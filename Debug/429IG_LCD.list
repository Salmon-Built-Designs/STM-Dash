
429IG_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ef90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ab8  0802f140  0802f140  0003f140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000d818  08033bf8  08033bf8  00043bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000010  08041410  08041410  00051410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 000b070c  08041420  08041420  00051420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000140  080f1b2c  080f1b2c  00101b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080f1c6c  080f1c6c  00110100  2**0
                  CONTENTS
  8 .ARM          00000008  080f1c6c  080f1c6c  00101c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080f1c74  080f1c74  00110100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080f1c74  080f1c74  00101c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080f1c88  080f1c88  00101c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  080f1c90  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  00110100  2**0
                  CONTENTS
 14 .bss          0000b52c  20000100  20000100  00110100  2**2
                  ALLOC
 15 ._user_heap_stack 00000c04  2000b62c  2000b62c  00110100  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  00110100  2**0
                  CONTENTS, READONLY
 17 .debug_info   00098340  00000000  00000000  00110130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00010cff  00000000  00000000  001a8470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003900  00000000  00000000  001b9170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003340  00000000  00000000  001bca70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003301b  00000000  00000000  001bfdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00041743  00000000  00000000  001f2dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001109d6  00000000  00000000  0023450e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  00344ee4  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f5e0  00000000  00000000  00344fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802f128 	.word	0x0802f128

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0802f128 	.word	0x0802f128

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <BH1750_send_command>:

	return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	1cfa      	adds	r2, r7, #3
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	f005 fa83 	bl	800629c <HAL_I2C_Master_Transmit>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <BH1750_send_command+0x2e>

	return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f8aa 	bl	8000f0c <BH1750_get_lumen>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000dce:	2114      	movs	r1, #20
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f02d f8c9 	bl	802df68 <calloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <BH1750_init_dev_struct+0x24>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e02d      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2247      	movs	r2, #71	; 0x47
 8000dee:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2246      	movs	r2, #70	; 0x46
 8000df4:	725a      	strb	r2, [r3, #9]
 8000df6:	e005      	b.n	8000e04 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	22ba      	movs	r2, #186	; 0xba
 8000dfc:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	22b9      	movs	r2, #185	; 0xb9
 8000e02:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	f7ff f9f3 	bl	80001f0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f02d f9f7 	bl	802e200 <malloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <BH1750_init_dev_struct+0x66>
 8000e22:	2300      	movs	r3, #0
 8000e24:	e00c      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f02d feb3 	bl	802eb9e <strcpy>

	init->poll = &BH1750_poll_self;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <BH1750_init_dev_struct+0x88>)
 8000e3c:	611a      	str	r2, [r3, #16]

	return init;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08000dab 	.word	0x08000dab

08000e4c <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000e54:	2101      	movs	r1, #1
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff8c 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff88 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000e64:	2110      	movs	r1, #16
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff84 	bl	8000d74 <BH1750_send_command>

	return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af02      	add	r7, sp, #8
 8000e7c:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e86:	b299      	uxth	r1, r3
			dev->buffer,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e8e:	230a      	movs	r3, #10
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f005 fb00 	bl	8006498 <HAL_I2C_Master_Receive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b5b      	ldrb	r3, [r3, #13]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	895b      	ldrh	r3, [r3, #10]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb32 	bl	8000544 <__aeabi_i2d>
 8000ee0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <BH1750_convert+0x5c>)
 8000ee6:	f7ff fcc1 	bl	800086c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fda3 	bl	8000a3c <__aeabi_d2uiz>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	3ff33333 	.word	0x3ff33333

08000f0c <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffae 	bl	8000e76 <BH1750_read_dev>
	BH1750_convert(dev);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffc6 	bl	8000eac <BH1750_convert>
	return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <DMA_Callback>:
#include "WS2812_Lib.h"

uint16_t WS2812_TIM_BUF[WS2812_BUFLEN];
uint8_t dma_ready = 1;

void DMA_Callback(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	dma_ready = 1;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <DMA_Callback+0x14>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000004 	.word	0x20000004
 8000f44:	00000000 	.word	0x00000000

08000f48 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;
  WS2812_RGB_t led;

  pos=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	f000 bce5 	b.w	8001924 <calcBuf+0x9dc>
    led=WS2812_LED_BUF_CH1[n];
 8000f5a:	49ab      	ldr	r1, [pc, #684]	; (8001208 <calcBuf+0x2c0>)
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	18ca      	adds	r2, r1, r3
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	8811      	ldrh	r1, [r2, #0]
 8000f6a:	7892      	ldrb	r2, [r2, #2]
 8000f6c:	8019      	strh	r1, [r3, #0]
 8000f6e:	709a      	strb	r2, [r3, #2]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da13      	bge.n	8000fa0 <calcBuf+0x58>
 8000f78:	4ba4      	ldr	r3, [pc, #656]	; (800120c <calcBuf+0x2c4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fad0 	bl	8000524 <__aeabi_ui2d>
 8000f84:	a39c      	add	r3, pc, #624	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fc6f 	bl	800086c <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd51 	bl	8000a3c <__aeabi_d2uiz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	e012      	b.n	8000fc6 <calcBuf+0x7e>
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <calcBuf+0x2c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fabc 	bl	8000524 <__aeabi_ui2d>
 8000fac:	a394      	add	r3, pc, #592	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fc5b 	bl	800086c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd3d 	bl	8000a3c <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	4990      	ldr	r1, [pc, #576]	; (8001210 <calcBuf+0x2c8>)
 8000fce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <calcBuf+0xbc>
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <calcBuf+0x2c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa9e 	bl	8000524 <__aeabi_ui2d>
 8000fe8:	a383      	add	r3, pc, #524	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc3d 	bl	800086c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd1f 	bl	8000a3c <__aeabi_d2uiz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	e012      	b.n	800102a <calcBuf+0xe2>
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <calcBuf+0x2c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa8a 	bl	8000524 <__aeabi_ui2d>
 8001010:	a37b      	add	r3, pc, #492	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fc29 	bl	800086c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd0b 	bl	8000a3c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c59      	adds	r1, r3, #1
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	4977      	ldr	r1, [pc, #476]	; (8001210 <calcBuf+0x2c8>)
 8001032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001036:	797b      	ldrb	r3, [r7, #5]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <calcBuf+0x120>
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <calcBuf+0x2c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_ui2d>
 800104c:	a36a      	add	r3, pc, #424	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fc0b 	bl	800086c <__aeabi_ddiv>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fced 	bl	8000a3c <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	e012      	b.n	800108e <calcBuf+0x146>
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <calcBuf+0x2c4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa58 	bl	8000524 <__aeabi_ui2d>
 8001074:	a362      	add	r3, pc, #392	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fbf7 	bl	800086c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fcd9 	bl	8000a3c <__aeabi_d2uiz>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c59      	adds	r1, r3, #1
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	495e      	ldr	r1, [pc, #376]	; (8001210 <calcBuf+0x2c8>)
 8001096:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <calcBuf+0x184>
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <calcBuf+0x2c4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa3a 	bl	8000524 <__aeabi_ui2d>
 80010b0:	a351      	add	r3, pc, #324	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fbd9 	bl	800086c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fcbb 	bl	8000a3c <__aeabi_d2uiz>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	e012      	b.n	80010f2 <calcBuf+0x1aa>
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <calcBuf+0x2c4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_ui2d>
 80010d8:	a349      	add	r3, pc, #292	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fbc5 	bl	800086c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fca7 	bl	8000a3c <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	4945      	ldr	r1, [pc, #276]	; (8001210 <calcBuf+0x2c8>)
 80010fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <calcBuf+0x1e8>
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <calcBuf+0x2c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa08 	bl	8000524 <__aeabi_ui2d>
 8001114:	a338      	add	r3, pc, #224	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fba7 	bl	800086c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc89 	bl	8000a3c <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	e012      	b.n	8001156 <calcBuf+0x20e>
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <calcBuf+0x2c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9f4 	bl	8000524 <__aeabi_ui2d>
 800113c:	a330      	add	r3, pc, #192	; (adr r3, 8001200 <calcBuf+0x2b8>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fb93 	bl	800086c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fc75 	bl	8000a3c <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	492c      	ldr	r1, [pc, #176]	; (8001210 <calcBuf+0x2c8>)
 800115e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <calcBuf+0x24c>
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <calcBuf+0x2c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_ui2d>
 8001178:	a31f      	add	r3, pc, #124	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fb75 	bl	800086c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fc57 	bl	8000a3c <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	e012      	b.n	80011ba <calcBuf+0x272>
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <calcBuf+0x2c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9c2 	bl	8000524 <__aeabi_ui2d>
 80011a0:	a317      	add	r3, pc, #92	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb61 	bl	800086c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc43 	bl	8000a3c <__aeabi_d2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <calcBuf+0x2c8>)
 80011c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <calcBuf+0x2cc>
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <calcBuf+0x2c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9a4 	bl	8000524 <__aeabi_ui2d>
 80011dc:	a306      	add	r3, pc, #24	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fb43 	bl	800086c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc25 	bl	8000a3c <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	e020      	b.n	800123a <calcBuf+0x2f2>
 80011f8:	08d3dcb1 	.word	0x08d3dcb1
 80011fc:	40013dcb 	.word	0x40013dcb
 8001200:	8ba2e8ba 	.word	0x8ba2e8ba
 8001204:	4016ba2e 	.word	0x4016ba2e
 8001208:	2000a40c 	.word	0x2000a40c
 800120c:	20009ac4 	.word	0x20009ac4
 8001210:	20009b0c 	.word	0x20009b0c
 8001214:	4bb2      	ldr	r3, [pc, #712]	; (80014e0 <calcBuf+0x598>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f982 	bl	8000524 <__aeabi_ui2d>
 8001220:	a3ab      	add	r3, pc, #684	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb21 	bl	800086c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc03 	bl	8000a3c <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	49a8      	ldr	r1, [pc, #672]	; (80014e4 <calcBuf+0x59c>)
 8001242:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <calcBuf+0x330>
 8001250:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <calcBuf+0x598>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f964 	bl	8000524 <__aeabi_ui2d>
 800125c:	a39e      	add	r3, pc, #632	; (adr r3, 80014d8 <calcBuf+0x590>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fbe5 	bl	8000a3c <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	e012      	b.n	800129e <calcBuf+0x356>
 8001278:	4b99      	ldr	r3, [pc, #612]	; (80014e0 <calcBuf+0x598>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f950 	bl	8000524 <__aeabi_ui2d>
 8001284:	a392      	add	r3, pc, #584	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff faef 	bl	800086c <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fbd1 	bl	8000a3c <__aeabi_d2uiz>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c59      	adds	r1, r3, #1
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	498f      	ldr	r1, [pc, #572]	; (80014e4 <calcBuf+0x59c>)
 80012a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da13      	bge.n	80012da <calcBuf+0x392>
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <calcBuf+0x598>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f933 	bl	8000524 <__aeabi_ui2d>
 80012be:	a386      	add	r3, pc, #536	; (adr r3, 80014d8 <calcBuf+0x590>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff fad2 	bl	800086c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fbb4 	bl	8000a3c <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	e012      	b.n	8001300 <calcBuf+0x3b8>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <calcBuf+0x598>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_ui2d>
 80012e6:	a37a      	add	r3, pc, #488	; (adr r3, 80014d0 <calcBuf+0x588>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fabe 	bl	800086c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fba0 	bl	8000a3c <__aeabi_d2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4977      	ldr	r1, [pc, #476]	; (80014e4 <calcBuf+0x59c>)
 8001308:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d013      	beq.n	800133e <calcBuf+0x3f6>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <calcBuf+0x598>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_ui2d>
 8001322:	a36d      	add	r3, pc, #436	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff faa0 	bl	800086c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb82 	bl	8000a3c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	e012      	b.n	8001364 <calcBuf+0x41c>
 800133e:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <calcBuf+0x598>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_ui2d>
 800134a:	a361      	add	r3, pc, #388	; (adr r3, 80014d0 <calcBuf+0x588>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa8c 	bl	800086c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb6e 	bl	8000a3c <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	495e      	ldr	r1, [pc, #376]	; (80014e4 <calcBuf+0x59c>)
 800136c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d013      	beq.n	80013a2 <calcBuf+0x45a>
 800137a:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <calcBuf+0x598>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_ui2d>
 8001386:	a354      	add	r3, pc, #336	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa6e 	bl	800086c <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb50 	bl	8000a3c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	e012      	b.n	80013c8 <calcBuf+0x480>
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <calcBuf+0x598>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_ui2d>
 80013ae:	a348      	add	r3, pc, #288	; (adr r3, 80014d0 <calcBuf+0x588>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa5a 	bl	800086c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb3c 	bl	8000a3c <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c59      	adds	r1, r3, #1
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4945      	ldr	r1, [pc, #276]	; (80014e4 <calcBuf+0x59c>)
 80013d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d013      	beq.n	8001406 <calcBuf+0x4be>
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <calcBuf+0x598>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f89d 	bl	8000524 <__aeabi_ui2d>
 80013ea:	a33b      	add	r3, pc, #236	; (adr r3, 80014d8 <calcBuf+0x590>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa3c 	bl	800086c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb1e 	bl	8000a3c <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	e012      	b.n	800142c <calcBuf+0x4e4>
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <calcBuf+0x598>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f889 	bl	8000524 <__aeabi_ui2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fa28 	bl	800086c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb0a 	bl	8000a3c <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	492c      	ldr	r1, [pc, #176]	; (80014e4 <calcBuf+0x59c>)
 8001434:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d013      	beq.n	800146a <calcBuf+0x522>
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <calcBuf+0x598>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_ui2d>
 800144e:	a322      	add	r3, pc, #136	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff fa0a 	bl	800086c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff faec 	bl	8000a3c <__aeabi_d2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	e012      	b.n	8001490 <calcBuf+0x548>
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <calcBuf+0x598>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f857 	bl	8000524 <__aeabi_ui2d>
 8001476:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f9f6 	bl	800086c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fad8 	bl	8000a3c <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4913      	ldr	r1, [pc, #76]	; (80014e4 <calcBuf+0x59c>)
 8001498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d020      	beq.n	80014e8 <calcBuf+0x5a0>
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <calcBuf+0x598>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f839 	bl	8000524 <__aeabi_ui2d>
 80014b2:	a309      	add	r3, pc, #36	; (adr r3, 80014d8 <calcBuf+0x590>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9d8 	bl	800086c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff faba 	bl	8000a3c <__aeabi_d2uiz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	e01f      	b.n	800150e <calcBuf+0x5c6>
 80014ce:	bf00      	nop
 80014d0:	8ba2e8ba 	.word	0x8ba2e8ba
 80014d4:	4016ba2e 	.word	0x4016ba2e
 80014d8:	08d3dcb1 	.word	0x08d3dcb1
 80014dc:	40013dcb 	.word	0x40013dcb
 80014e0:	20009ac4 	.word	0x20009ac4
 80014e4:	20009b0c 	.word	0x20009b0c
 80014e8:	4bb3      	ldr	r3, [pc, #716]	; (80017b8 <calcBuf+0x870>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f818 	bl	8000524 <__aeabi_ui2d>
 80014f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80017a8 <calcBuf+0x860>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f9b7 	bl	800086c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fa99 	bl	8000a3c <__aeabi_d2uiz>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	49a9      	ldr	r1, [pc, #676]	; (80017bc <calcBuf+0x874>)
 8001516:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800151a:	793b      	ldrb	r3, [r7, #4]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <calcBuf+0x604>
 8001524:	4ba4      	ldr	r3, [pc, #656]	; (80017b8 <calcBuf+0x870>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fffa 	bl	8000524 <__aeabi_ui2d>
 8001530:	a39f      	add	r3, pc, #636	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f999 	bl	800086c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fa7b 	bl	8000a3c <__aeabi_d2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	e012      	b.n	8001572 <calcBuf+0x62a>
 800154c:	4b9a      	ldr	r3, [pc, #616]	; (80017b8 <calcBuf+0x870>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffe6 	bl	8000524 <__aeabi_ui2d>
 8001558:	a393      	add	r3, pc, #588	; (adr r3, 80017a8 <calcBuf+0x860>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f985 	bl	800086c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa67 	bl	8000a3c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	4990      	ldr	r1, [pc, #576]	; (80017bc <calcBuf+0x874>)
 800157a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <calcBuf+0x668>
 8001588:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <calcBuf+0x870>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_ui2d>
 8001594:	a386      	add	r3, pc, #536	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f967 	bl	800086c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa49 	bl	8000a3c <__aeabi_d2uiz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	e012      	b.n	80015d6 <calcBuf+0x68e>
 80015b0:	4b81      	ldr	r3, [pc, #516]	; (80017b8 <calcBuf+0x870>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffb4 	bl	8000524 <__aeabi_ui2d>
 80015bc:	a37a      	add	r3, pc, #488	; (adr r3, 80017a8 <calcBuf+0x860>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f953 	bl	800086c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa35 	bl	8000a3c <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	4977      	ldr	r1, [pc, #476]	; (80017bc <calcBuf+0x874>)
 80015de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da13      	bge.n	8001612 <calcBuf+0x6ca>
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <calcBuf+0x870>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_ui2d>
 80015f6:	a36e      	add	r3, pc, #440	; (adr r3, 80017b0 <calcBuf+0x868>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f936 	bl	800086c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa18 	bl	8000a3c <__aeabi_d2uiz>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	e012      	b.n	8001638 <calcBuf+0x6f0>
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <calcBuf+0x870>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff83 	bl	8000524 <__aeabi_ui2d>
 800161e:	a362      	add	r3, pc, #392	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f922 	bl	800086c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fa04 	bl	8000a3c <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <calcBuf+0x874>)
 8001640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d013      	beq.n	8001676 <calcBuf+0x72e>
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <calcBuf+0x870>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_ui2d>
 800165a:	a355      	add	r3, pc, #340	; (adr r3, 80017b0 <calcBuf+0x868>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f904 	bl	800086c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f9e6 	bl	8000a3c <__aeabi_d2uiz>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	e012      	b.n	800169c <calcBuf+0x754>
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <calcBuf+0x870>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff51 	bl	8000524 <__aeabi_ui2d>
 8001682:	a349      	add	r3, pc, #292	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8f0 	bl	800086c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff f9d2 	bl	8000a3c <__aeabi_d2uiz>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4946      	ldr	r1, [pc, #280]	; (80017bc <calcBuf+0x874>)
 80016a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <calcBuf+0x792>
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <calcBuf+0x870>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff33 	bl	8000524 <__aeabi_ui2d>
 80016be:	a33c      	add	r3, pc, #240	; (adr r3, 80017b0 <calcBuf+0x868>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8d2 	bl	800086c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f9b4 	bl	8000a3c <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	e012      	b.n	8001700 <calcBuf+0x7b8>
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <calcBuf+0x870>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_ui2d>
 80016e6:	a330      	add	r3, pc, #192	; (adr r3, 80017a8 <calcBuf+0x860>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8be 	bl	800086c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9a0 	bl	8000a3c <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	492d      	ldr	r1, [pc, #180]	; (80017bc <calcBuf+0x874>)
 8001708:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <calcBuf+0x7f6>
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <calcBuf+0x870>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff01 	bl	8000524 <__aeabi_ui2d>
 8001722:	a323      	add	r3, pc, #140	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f8a0 	bl	800086c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f982 	bl	8000a3c <__aeabi_d2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	e012      	b.n	8001764 <calcBuf+0x81c>
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <calcBuf+0x870>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_ui2d>
 800174a:	a317      	add	r3, pc, #92	; (adr r3, 80017a8 <calcBuf+0x860>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f88c 	bl	800086c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f96e 	bl	8000a3c <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <calcBuf+0x874>)
 800176c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d022      	beq.n	80017c0 <calcBuf+0x878>
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <calcBuf+0x870>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fecf 	bl	8000524 <__aeabi_ui2d>
 8001786:	a30a      	add	r3, pc, #40	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7ff f86e 	bl	800086c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f950 	bl	8000a3c <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	e021      	b.n	80017e6 <calcBuf+0x89e>
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	8ba2e8ba 	.word	0x8ba2e8ba
 80017ac:	4016ba2e 	.word	0x4016ba2e
 80017b0:	08d3dcb1 	.word	0x08d3dcb1
 80017b4:	40013dcb 	.word	0x40013dcb
 80017b8:	20009ac4 	.word	0x20009ac4
 80017bc:	20009b0c 	.word	0x20009b0c
 80017c0:	4b69      	ldr	r3, [pc, #420]	; (8001968 <calcBuf+0xa20>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feac 	bl	8000524 <__aeabi_ui2d>
 80017cc:	a362      	add	r3, pc, #392	; (adr r3, 8001958 <calcBuf+0xa10>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7ff f84b 	bl	800086c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f92d 	bl	8000a3c <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1c59      	adds	r1, r3, #1
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	495f      	ldr	r1, [pc, #380]	; (800196c <calcBuf+0xa24>)
 80017ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <calcBuf+0x8dc>
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <calcBuf+0xa20>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe8e 	bl	8000524 <__aeabi_ui2d>
 8001808:	a355      	add	r3, pc, #340	; (adr r3, 8001960 <calcBuf+0xa18>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7ff f82d 	bl	800086c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f90f 	bl	8000a3c <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	e012      	b.n	800184a <calcBuf+0x902>
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <calcBuf+0xa20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe7a 	bl	8000524 <__aeabi_ui2d>
 8001830:	a349      	add	r3, pc, #292	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f819 	bl	800086c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8fb 	bl	8000a3c <__aeabi_d2uiz>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	4946      	ldr	r1, [pc, #280]	; (800196c <calcBuf+0xa24>)
 8001852:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <calcBuf+0x940>
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <calcBuf+0xa20>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe5c 	bl	8000524 <__aeabi_ui2d>
 800186c:	a33c      	add	r3, pc, #240	; (adr r3, 8001960 <calcBuf+0xa18>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fffb 	bl	800086c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f8dd 	bl	8000a3c <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	e012      	b.n	80018ae <calcBuf+0x966>
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <calcBuf+0xa20>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe48 	bl	8000524 <__aeabi_ui2d>
 8001894:	a330      	add	r3, pc, #192	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe ffe7 	bl	800086c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8c9 	bl	8000a3c <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	492d      	ldr	r1, [pc, #180]	; (800196c <calcBuf+0xa24>)
 80018b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <calcBuf+0x9a4>
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <calcBuf+0xa20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_ui2d>
 80018d0:	a323      	add	r3, pc, #140	; (adr r3, 8001960 <calcBuf+0xa18>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffc9 	bl	800086c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8ab 	bl	8000a3c <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	e012      	b.n	8001912 <calcBuf+0x9ca>
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <calcBuf+0xa20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_ui2d>
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <calcBuf+0xa10>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffb5 	bl	800086c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f897 	bl	8000a3c <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	4914      	ldr	r1, [pc, #80]	; (800196c <calcBuf+0xa24>)
 800191a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b2d      	cmp	r3, #45	; 0x2d
 8001928:	f67f ab17 	bls.w	8000f5a <calcBuf+0x12>
  }

  // short pause after all LEDs have been updated
  for(n=0;n<48;n++) {
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e009      	b.n	8001946 <calcBuf+0x9fe>
    WS2812_TIM_BUF[pos++]=0;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <calcBuf+0xa24>)
 800193a:	2100      	movs	r1, #0
 800193c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<48;n++) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b2f      	cmp	r3, #47	; 0x2f
 800194a:	d9f2      	bls.n	8001932 <calcBuf+0x9ea>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	8ba2e8ba 	.word	0x8ba2e8ba
 800195c:	4016ba2e 	.word	0x4016ba2e
 8001960:	08d3dcb1 	.word	0x08d3dcb1
 8001964:	40013dcb 	.word	0x40013dcb
 8001968:	20009ac4 	.word	0x20009ac4
 800196c:	20009b0c 	.word	0x20009b0c

08001970 <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	//uint8_t test[8] = {10};
	dma_ready = 0;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <startDMA+0x1c>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN);
 800197a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <startDMA+0x20>)
 8001980:	2100      	movs	r1, #0
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <startDMA+0x24>)
 8001984:	f008 f8a4 	bl	8009ad0 <HAL_TIM_PWM_Start_DMA>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000004 	.word	0x20000004
 8001990:	20009b0c 	.word	0x20009b0c
 8001994:	20009ac4 	.word	0x20009ac4

08001998 <WS2812_Refresh>:

void WS2812_Refresh(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	while(!dma_ready);
 800199c:	bf00      	nop
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <WS2812_Refresh+0x1c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0fb      	beq.n	800199e <WS2812_Refresh+0x6>
	calcBuf();
 80019a6:	f7ff facf 	bl	8000f48 <calcBuf>
	startDMA();
 80019aa:	f7ff ffe1 	bl	8001970 <startDMA>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004

080019b8 <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(uint8_t refresh) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
 80019c6:	e01a      	b.n	80019fe <WS2812_Clear+0x46>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <WS2812_Clear+0x60>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	2100      	movs	r1, #0
 80019d6:	7019      	strb	r1, [r3, #0]
 80019d8:	490f      	ldr	r1, [pc, #60]	; (8001a18 <WS2812_Clear+0x60>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	3301      	adds	r3, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	7019      	strb	r1, [r3, #0]
 80019e8:	490b      	ldr	r1, [pc, #44]	; (8001a18 <WS2812_Clear+0x60>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	3302      	adds	r3, #2
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	3301      	adds	r3, #1
 80019fc:	81fb      	strh	r3, [r7, #14]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	2b2d      	cmp	r3, #45	; 0x2d
 8001a02:	d9e1      	bls.n	80019c8 <WS2812_Clear+0x10>
	}

	 if(refresh==1) WS2812_Refresh();
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <WS2812_Clear+0x56>
 8001a0a:	f7ff ffc5 	bl	8001998 <WS2812_Refresh>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000a40c 	.word	0x2000a40c

08001a1c <WS2812_One_RGB>:

/**
 * Set one LED (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_One_RGB(uint32_t nr, WS2812_RGB_t rgb_col, uint8_t refresh)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
  if(nr<WS2812_NUM_LEDS_CH1) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a2e:	d811      	bhi.n	8001a54 <WS2812_One_RGB+0x38>
	  WS2812_LED_BUF_CH1[nr]=rgb_col;
 8001a30:	490a      	ldr	r1, [pc, #40]	; (8001a5c <WS2812_One_RGB+0x40>)
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	8819      	ldrh	r1, [r3, #0]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	8011      	strh	r1, [r2, #0]
 8001a48:	7093      	strb	r3, [r2, #2]

    if(refresh==1) WS2812_Refresh();
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <WS2812_One_RGB+0x38>
 8001a50:	f7ff ffa2 	bl	8001998 <WS2812_Refresh>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a40c 	.word	0x2000a40c

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <main+0x12c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6a:	f002 fca3 	bl	80043b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6e:	f000 f8d5 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a72:	f000 fcf7 	bl	8002464 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001a76:	f000 fa83 	bl	8001f80 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001a7a:	f000 f9f9 	bl	8001e70 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001a7e:	f000 fc93 	bl	80023a8 <MX_FMC_Init>
  MX_CRC_Init();
 8001a82:	f000 f9e1 	bl	8001e48 <MX_CRC_Init>
  MX_TIM13_Init();
 8001a86:	f000 fc21 	bl	80022cc <MX_TIM13_Init>
  MX_DMA_Init();
 8001a8a:	f000 fc6d 	bl	8002368 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a8e:	f000 fb2b 	bl	80020e8 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001a92:	f000 fbc9 	bl	8002228 <MX_TIM9_Init>
  MX_CAN1_Init();
 8001a96:	f000 f933 	bl	8001d00 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001a9a:	f000 f99f 	bl	8001ddc <MX_CAN2_Init>
  MX_I2C2_Init();
 8001a9e:	f000 fa2f 	bl	8001f00 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001aa2:	f000 fb01 	bl	80020a8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001aa6:	f009 fffd 	bl	800baa4 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8001aaa:	f00d ff17 	bl	800f8dc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4837      	ldr	r0, [pc, #220]	; (8001b90 <main+0x130>)
 8001ab2:	f007 ff45 	bl	8009940 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4836      	ldr	r0, [pc, #216]	; (8001b94 <main+0x134>)
 8001aba:	f007 ff41 	bl	8009940 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4834      	ldr	r0, [pc, #208]	; (8001b94 <main+0x134>)
 8001ac2:	f007 ff3d 	bl	8009940 <HAL_TIM_PWM_Start>


  BH1750_sensor = BH1750_init_dev_struct(&hi2c2, "BH1750 device", true);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <main+0x138>)
 8001aca:	4834      	ldr	r0, [pc, #208]	; (8001b9c <main+0x13c>)
 8001acc:	f7ff f978 	bl	8000dc0 <BH1750_init_dev_struct>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <main+0x140>)
 8001ad4:	6013      	str	r3, [r2, #0]

  BH1750_init_dev(BH1750_sensor);
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <main+0x140>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9b6 	bl	8000e4c <BH1750_init_dev>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ae0:	f00a fac4 	bl	800c06c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of START_Task */
  START_TaskHandle = osThreadNew(Start_START_Task, NULL, &START_Task_attributes);
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <main+0x144>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <main+0x148>)
 8001aea:	f00a fb40 	bl	800c16e <osThreadNew>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <main+0x14c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <main+0x150>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <main+0x154>)
 8001afa:	f00a fb38 	bl	800c16e <osThreadNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <main+0x158>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(Start_SD_Task, NULL, &SD_Task_attributes);
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <main+0x15c>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <main+0x160>)
 8001b0a:	f00a fb30 	bl	800c16e <osThreadNew>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <main+0x164>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* creation of LED_Task */
  LED_TaskHandle = osThreadNew(Start_LED_Task, NULL, &LED_Task_attributes);
 8001b14:	4a2c      	ldr	r2, [pc, #176]	; (8001bc8 <main+0x168>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <main+0x16c>)
 8001b1a:	f00a fb28 	bl	800c16e <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <main+0x170>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(Start_CAN_Task, NULL, &CAN_Task_attributes);
 8001b24:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <main+0x174>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	482b      	ldr	r0, [pc, #172]	; (8001bd8 <main+0x178>)
 8001b2a:	f00a fb20 	bl	800c16e <osThreadNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <main+0x17c>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* creation of BTN_Task */
  BTN_TaskHandle = osThreadNew(Start_BTN_Task, NULL, &BTN_Task_attributes);
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <main+0x180>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	482a      	ldr	r0, [pc, #168]	; (8001be4 <main+0x184>)
 8001b3a:	f00a fb18 	bl	800c16e <osThreadNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <main+0x188>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* creation of BARO_Task */
  BARO_TaskHandle = osThreadNew(Start_BARO_Task, NULL, &BARO_Task_attributes);
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <main+0x18c>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4829      	ldr	r0, [pc, #164]	; (8001bf0 <main+0x190>)
 8001b4a:	f00a fb10 	bl	800c16e <osThreadNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <main+0x194>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &RGB_Task_attributes);
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <main+0x198>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <main+0x19c>)
 8001b5a:	f00a fb08 	bl	800c16e <osThreadNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <main+0x1a0>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of BH1750_Task */
  BH1750_TaskHandle = osThreadNew(Start_BH1750_Task, NULL, &BH1750_Task_attributes);
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <main+0x1a4>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4827      	ldr	r0, [pc, #156]	; (8001c08 <main+0x1a8>)
 8001b6a:	f00a fb00 	bl	800c16e <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <main+0x1ac>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of LPS22_Task */
  LPS22_TaskHandle = osThreadNew(Start_LPS22_Task, NULL, &LPS22_Task_attributes);
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <main+0x1b0>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <main+0x1b4>)
 8001b7a:	f00a faf8 	bl	800c16e <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <main+0x1b8>)
 8001b82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b84:	f00a fab8 	bl	800c0f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001b88:	e7fe      	b.n	8001b88 <main+0x128>
 8001b8a:	bf00      	nop
 8001b8c:	2000a49c 	.word	0x2000a49c
 8001b90:	2000a698 	.word	0x2000a698
 8001b94:	2000af68 	.word	0x2000af68
 8001b98:	0802f1b8 	.word	0x0802f1b8
 8001b9c:	2000a4b0 	.word	0x2000a4b0
 8001ba0:	2000b11c 	.word	0x2000b11c
 8001ba4:	0802fcec 	.word	0x0802fcec
 8001ba8:	08002725 	.word	0x08002725
 8001bac:	2000a5c0 	.word	0x2000a5c0
 8001bb0:	0802fd10 	.word	0x0802fd10
 8001bb4:	0800f8e9 	.word	0x0800f8e9
 8001bb8:	2000a694 	.word	0x2000a694
 8001bbc:	0802fd34 	.word	0x0802fd34
 8001bc0:	08002775 	.word	0x08002775
 8001bc4:	2000a4a4 	.word	0x2000a4a4
 8001bc8:	0802fd58 	.word	0x0802fd58
 8001bcc:	08002785 	.word	0x08002785
 8001bd0:	2000a5a4 	.word	0x2000a5a4
 8001bd4:	0802fd7c 	.word	0x0802fd7c
 8001bd8:	08002799 	.word	0x08002799
 8001bdc:	2000b03c 	.word	0x2000b03c
 8001be0:	0802fda0 	.word	0x0802fda0
 8001be4:	080032d9 	.word	0x080032d9
 8001be8:	2000afb0 	.word	0x2000afb0
 8001bec:	0802fdc4 	.word	0x0802fdc4
 8001bf0:	080033e5 	.word	0x080033e5
 8001bf4:	2000b120 	.word	0x2000b120
 8001bf8:	0802fde8 	.word	0x0802fde8
 8001bfc:	080033f5 	.word	0x080033f5
 8001c00:	2000a498 	.word	0x2000a498
 8001c04:	0802fe0c 	.word	0x0802fe0c
 8001c08:	080035e5 	.word	0x080035e5
 8001c0c:	2000a4a0 	.word	0x2000a4a0
 8001c10:	0802fe30 	.word	0x0802fe30
 8001c14:	080035fb 	.word	0x080035fb
 8001c18:	2000b118 	.word	0x2000b118

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f02c fb06 	bl	802e23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c90:	23b4      	movs	r3, #180	; 0xb4
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f005 fdad 	bl	8007800 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f001 fcc0 	bl	8003630 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cb0:	f005 fd56 	bl	8007760 <HAL_PWREx_EnableOverDrive>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001cba:	f001 fcb9 	bl	8003630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2105      	movs	r1, #5
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f006 f807 	bl	8007cf0 <HAL_RCC_ClockConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ce8:	f001 fca2 	bl	8003630 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001cec:	f006 f8e6 	bl	8007ebc <HAL_RCC_EnableCSS>
}
 8001cf0:	bf00      	nop
 8001cf2:	3750      	adds	r7, #80	; 0x50
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000

08001d00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d08:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <MX_CAN1_Init+0xd4>)
 8001d0a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d0e:	220a      	movs	r2, #10
 8001d10:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d28:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d52:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d54:	f002 fb94 	bl	8004480 <HAL_CAN_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001d5e:	f001 fc67 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 15;
 8001d62:	230f      	movs	r3, #15
 8001d64:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  	sFilterConfig.FilterIdHigh = 0x0000;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterIdLow = 0x0000;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterActivation = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  	//sFilterConfig.SlaveStartFilterBank = 14;
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d8e:	f002 fc73 	bl	8004678 <HAL_CAN_ConfigFilter>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_CAN1_Init+0x9c>
  		/* Filter configuration Error */
  		Error_Handler();
 8001d98:	f001 fc4a 	bl	8003630 <Error_Handler>
  	}
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d9e:	f002 fd4b 	bl	8004838 <HAL_CAN_Start>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_CAN1_Init+0xac>
  		/* Start Error */
  		Error_Handler();
 8001da8:	f001 fc42 	bl	8003630 <Error_Handler>
  	}

	__HAL_RCC_CAN1_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_CAN1_Init+0xd8>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <MX_CAN1_Init+0xd8>)
 8001db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_CAN1_Init+0xd8>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
  	//__HAL_RCC_CAN2_CLK_ENABLE();
  /* USER CODE END CAN1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	; 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000b088 	.word	0x2000b088
 8001dd4:	40006400 	.word	0x40006400
 8001dd8:	40023800 	.word	0x40023800

08001ddc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <MX_CAN2_Init+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001de8:	220a      	movs	r2, #10
 8001dea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001dfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001dfe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e02:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001e06:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e2e:	f002 fb27 	bl	8004480 <HAL_CAN_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001e38:	f001 fbfa 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000a66c 	.word	0x2000a66c
 8001e44:	40006800 	.word	0x40006800

08001e48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_CRC_Init+0x20>)
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <MX_CRC_Init+0x24>)
 8001e50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_CRC_Init+0x20>)
 8001e54:	f003 f962 	bl	800511c <HAL_CRC_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001e5e:	f001 fbe7 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000a4a8 	.word	0x2000a4a8
 8001e6c:	40023000 	.word	0x40023000

08001e70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <MX_DMA2D_Init+0x8c>)
 8001e78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e80:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e84:	2202      	movs	r2, #2
 8001e86:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001ebe:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ec0:	f003 fcc4 	bl	800584c <HAL_DMA2D_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8001eca:	f001 fbb1 	bl	8003630 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ed2:	f003 fe15 	bl	8005b00 <HAL_DMA2D_ConfigLayer>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8001edc:	f001 fba8 	bl	8003630 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ee4:	f003 fe0c 	bl	8005b00 <HAL_DMA2D_ConfigLayer>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8001eee:	f001 fb9f 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000b040 	.word	0x2000b040
 8001efc:	4002b000 	.word	0x4002b000

08001f00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <MX_I2C2_Init+0x78>)
 8001f08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <MX_I2C2_Init+0x7c>)
 8001f0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f3e:	f004 f869 	bl	8006014 <HAL_I2C_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f48:	f001 fb72 	bl	8003630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f50:	f004 fff5 	bl	8006f3e <HAL_I2CEx_ConfigAnalogFilter>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001f5a:	f001 fb69 	bl	8003630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f62:	f005 f828 	bl	8006fb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001f6c:	f001 fb60 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000a4b0 	.word	0x2000a4b0
 8001f78:	40005800 	.word	0x40005800
 8001f7c:	00061a80 	.word	0x00061a80

08001f80 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b096      	sub	sp, #88	; 0x58
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2234      	movs	r2, #52	; 0x34
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f02c f955 	bl	802e23c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  int pwidth=1024;
 8001f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f96:	657b      	str	r3, [r7, #84]	; 0x54
  int pheight=600;
 8001f98:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
  int hsw=20;
 8001f9e:	2314      	movs	r3, #20
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  int vsw=3;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  int hbp=140;
 8001fa6:	238c      	movs	r3, #140	; 0x8c
 8001fa8:	647b      	str	r3, [r7, #68]	; 0x44
  int vbp=20;
 8001faa:	2314      	movs	r3, #20
 8001fac:	643b      	str	r3, [r7, #64]	; 0x40
  int hfp=160;
 8001fae:	23a0      	movs	r3, #160	; 0xa0
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  int vfp=12;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	63bb      	str	r3, [r7, #56]	; 0x38

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <MX_LTDC_Init+0x124>)
 8001fba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fd6:	2214      	movs	r2, #20
 8001fd8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fe2:	22a0      	movs	r2, #160	; 0xa0
 8001fe4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 14;
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fe8:	220e      	movs	r2, #14
 8001fea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1184;
 8001fec:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fee:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 614;
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001ff6:	f240 2266 	movw	r2, #614	; 0x266
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1344;
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001ffe:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <MX_LTDC_Init+0x120>)
 8002006:	f240 227a 	movw	r2, #634	; 0x27a
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <MX_LTDC_Init+0x120>)
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <MX_LTDC_Init+0x120>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_LTDC_Init+0x120>)
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002024:	481e      	ldr	r0, [pc, #120]	; (80020a0 <MX_LTDC_Init+0x120>)
 8002026:	f005 f805 	bl	8007034 <HAL_LTDC_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_LTDC_Init+0xb4>
  {
    Error_Handler();
 8002030:	f001 fafe 	bl	8003630 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8002038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8002042:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002046:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002048:	2302      	movs	r3, #2
 800204a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800204c:	23ff      	movs	r3, #255	; 0xff
 800204e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002054:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002058:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800205a:	2307      	movs	r3, #7
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800205e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8002064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 800206a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_LTDC_Init+0x120>)
 800208a:	f005 f95b 	bl	8007344 <HAL_LTDC_ConfigLayer>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_LTDC_Init+0x118>
  {
    Error_Handler();
 8002094:	f001 facc 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3758      	adds	r7, #88	; 0x58
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000a5c4 	.word	0x2000a5c4
 80020a4:	40016800 	.word	0x40016800

080020a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <MX_SDIO_SD_Init+0x3c>)
 80020b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	2000afb4 	.word	0x2000afb4
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b096      	sub	sp, #88	; 0x58
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2220      	movs	r2, #32
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f02c f88b 	bl	802e23c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <MX_TIM1_Init+0x138>)
 8002128:	4a3e      	ldr	r2, [pc, #248]	; (8002224 <MX_TIM1_Init+0x13c>)
 800212a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <MX_TIM1_Init+0x138>)
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <MX_TIM1_Init+0x138>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <MX_TIM1_Init+0x138>)
 800213a:	22d1      	movs	r2, #209	; 0xd1
 800213c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <MX_TIM1_Init+0x138>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <MX_TIM1_Init+0x138>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <MX_TIM1_Init+0x138>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002150:	4833      	ldr	r0, [pc, #204]	; (8002220 <MX_TIM1_Init+0x138>)
 8002152:	f007 fae5 	bl	8009720 <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800215c:	f001 fa68 	bl	8003630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216a:	4619      	mov	r1, r3
 800216c:	482c      	ldr	r0, [pc, #176]	; (8002220 <MX_TIM1_Init+0x138>)
 800216e:	f008 f841 	bl	800a1f4 <HAL_TIM_ConfigClockSource>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002178:	f001 fa5a 	bl	8003630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800217c:	4828      	ldr	r0, [pc, #160]	; (8002220 <MX_TIM1_Init+0x138>)
 800217e:	f007 fb8f 	bl	80098a0 <HAL_TIM_PWM_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002188:	f001 fa52 	bl	8003630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002198:	4619      	mov	r1, r3
 800219a:	4821      	ldr	r0, [pc, #132]	; (8002220 <MX_TIM1_Init+0x138>)
 800219c:	f008 fd0e 	bl	800abbc <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021a6:	f001 fa43 	bl	8003630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021aa:	2360      	movs	r3, #96	; 0x60
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4814      	ldr	r0, [pc, #80]	; (8002220 <MX_TIM1_Init+0x138>)
 80021d0:	f007 ff4e 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80021da:	f001 fa29 	bl	8003630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	4807      	ldr	r0, [pc, #28]	; (8002220 <MX_TIM1_Init+0x138>)
 8002202:	f008 fd57 	bl	800acb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800220c:	f001 fa10 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_TIM1_Init+0x138>)
 8002212:	f001 fde3 	bl	8003ddc <HAL_TIM_MspPostInit>

}
 8002216:	bf00      	nop
 8002218:	3758      	adds	r7, #88	; 0x58
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20009ac4 	.word	0x20009ac4
 8002224:	40010000 	.word	0x40010000

08002228 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	615a      	str	r2, [r3, #20]
 800223e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <MX_TIM9_Init+0xa0>)
 8002244:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = (840 * 3) -1;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002248:	f640 12d7 	movw	r2, #2519	; 0x9d7
 800224c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000 -1;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002256:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800225a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <MX_TIM9_Init+0x9c>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002268:	4816      	ldr	r0, [pc, #88]	; (80022c4 <MX_TIM9_Init+0x9c>)
 800226a:	f007 fb19 	bl	80098a0 <HAL_TIM_PWM_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8002274:	f001 f9dc 	bl	8003630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002278:	2360      	movs	r3, #96	; 0x60
 800227a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 800227c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002292:	f007 feed 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800229c:	f001 f9c8 	bl	8003630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2204      	movs	r2, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4807      	ldr	r0, [pc, #28]	; (80022c4 <MX_TIM9_Init+0x9c>)
 80022a8:	f007 fee2 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 80022b2:	f001 f9bd 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80022b6:	4803      	ldr	r0, [pc, #12]	; (80022c4 <MX_TIM9_Init+0x9c>)
 80022b8:	f001 fd90 	bl	8003ddc <HAL_TIM_MspPostInit>

}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000af68 	.word	0x2000af68
 80022c8:	40014000 	.word	0x40014000

080022cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_TIM13_Init+0x94>)
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <MX_TIM13_Init+0x98>)
 80022e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM13_Init+0x94>)
 80022ec:	2253      	movs	r2, #83	; 0x53
 80022ee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_TIM13_Init+0x94>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MX_TIM13_Init+0x94>)
 80022f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022fc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_TIM13_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <MX_TIM13_Init+0x94>)
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800230a:	4815      	ldr	r0, [pc, #84]	; (8002360 <MX_TIM13_Init+0x94>)
 800230c:	f007 fa08 	bl	8009720 <HAL_TIM_Base_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002316:	f001 f98b 	bl	8003630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800231a:	4811      	ldr	r0, [pc, #68]	; (8002360 <MX_TIM13_Init+0x94>)
 800231c:	f007 fac0 	bl	80098a0 <HAL_TIM_PWM_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002326:	f001 f983 	bl	8003630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232a:	2360      	movs	r3, #96	; 0x60
 800232c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM13_Init+0x94>)
 8002342:	f007 fe95 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800234c:	f001 f970 	bl	8003630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM13_Init+0x94>)
 8002352:	f001 fd43 	bl	8003ddc <HAL_TIM_MspPostInit>

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000a698 	.word	0x2000a698
 8002364:	40001c00 	.word	0x40001c00

08002368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_DMA_Init+0x3c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <MX_DMA_Init+0x3c>)
 8002378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_DMA_Init+0x3c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2105      	movs	r1, #5
 800238e:	2039      	movs	r0, #57	; 0x39
 8002390:	f002 fe9a 	bl	80050c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002394:	2039      	movs	r0, #57	; 0x39
 8002396:	f002 feb3 	bl	8005100 <HAL_NVIC_EnableIRQ>

}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <MX_FMC_Init+0xb4>)
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <MX_FMC_Init+0xb8>)
 80023c6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <MX_FMC_Init+0xb4>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <MX_FMC_Init+0xb4>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <MX_FMC_Init+0xb4>)
 80023d6:	2208      	movs	r2, #8
 80023d8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <MX_FMC_Init+0xb4>)
 80023dc:	2210      	movs	r2, #16
 80023de:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_FMC_Init+0xb4>)
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <MX_FMC_Init+0xb4>)
 80023e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023ec:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_FMC_Init+0xb4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <MX_FMC_Init+0xb4>)
 80023f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023fa:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <MX_FMC_Init+0xb4>)
 80023fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_FMC_Init+0xb4>)
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800240c:	2302      	movs	r3, #2
 800240e:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8002410:	2308      	movs	r3, #8
 8002412:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8002414:	2306      	movs	r3, #6
 8002416:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8002418:	2307      	movs	r3, #7
 800241a:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 800241c:	2305      	movs	r3, #5
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8002424:	2302      	movs	r3, #2
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	480b      	ldr	r0, [pc, #44]	; (800245c <MX_FMC_Init+0xb4>)
 8002430:	f007 f8f3 	bl	800961a <HAL_SDRAM_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 800243a:	f001 f8f9 	bl	8003630 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4806      	ldr	r0, [pc, #24]	; (800245c <MX_FMC_Init+0xb4>)
 8002444:	f001 f916 	bl	8003674 <SDRAM_Initialization_Sequence>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_FMC_Init+0xaa>
		Error_Handler();
 800244e:	f001 f8ef 	bl	8003630 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8002452:	bf00      	nop
 8002454:	3730      	adds	r7, #48	; 0x30
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000b0c8 	.word	0x2000b0c8
 8002460:	a0000140 	.word	0xa0000140

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b090      	sub	sp, #64	; 0x40
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
 800247e:	4b87      	ldr	r3, [pc, #540]	; (800269c <MX_GPIO_Init+0x238>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a86      	ldr	r2, [pc, #536]	; (800269c <MX_GPIO_Init+0x238>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <MX_GPIO_Init+0x238>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	4b80      	ldr	r3, [pc, #512]	; (800269c <MX_GPIO_Init+0x238>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a7f      	ldr	r2, [pc, #508]	; (800269c <MX_GPIO_Init+0x238>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b7d      	ldr	r3, [pc, #500]	; (800269c <MX_GPIO_Init+0x238>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	4b79      	ldr	r3, [pc, #484]	; (800269c <MX_GPIO_Init+0x238>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a78      	ldr	r2, [pc, #480]	; (800269c <MX_GPIO_Init+0x238>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <MX_GPIO_Init+0x238>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <MX_GPIO_Init+0x238>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a71      	ldr	r2, [pc, #452]	; (800269c <MX_GPIO_Init+0x238>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b6f      	ldr	r3, [pc, #444]	; (800269c <MX_GPIO_Init+0x238>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	4b6b      	ldr	r3, [pc, #428]	; (800269c <MX_GPIO_Init+0x238>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a6a      	ldr	r2, [pc, #424]	; (800269c <MX_GPIO_Init+0x238>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <MX_GPIO_Init+0x238>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	4b64      	ldr	r3, [pc, #400]	; (800269c <MX_GPIO_Init+0x238>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a63      	ldr	r2, [pc, #396]	; (800269c <MX_GPIO_Init+0x238>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b61      	ldr	r3, [pc, #388]	; (800269c <MX_GPIO_Init+0x238>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b5d      	ldr	r3, [pc, #372]	; (800269c <MX_GPIO_Init+0x238>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a5c      	ldr	r2, [pc, #368]	; (800269c <MX_GPIO_Init+0x238>)
 800252c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b5a      	ldr	r3, [pc, #360]	; (800269c <MX_GPIO_Init+0x238>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <MX_GPIO_Init+0x238>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a55      	ldr	r2, [pc, #340]	; (800269c <MX_GPIO_Init+0x238>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <MX_GPIO_Init+0x238>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <MX_GPIO_Init+0x238>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a4e      	ldr	r2, [pc, #312]	; (800269c <MX_GPIO_Init+0x238>)
 8002564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <MX_GPIO_Init+0x238>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b48      	ldr	r3, [pc, #288]	; (800269c <MX_GPIO_Init+0x238>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a47      	ldr	r2, [pc, #284]	; (800269c <MX_GPIO_Init+0x238>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <MX_GPIO_Init+0x238>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	2108      	movs	r1, #8
 8002596:	4842      	ldr	r0, [pc, #264]	; (80026a0 <MX_GPIO_Init+0x23c>)
 8002598:	f003 fd08 	bl	8005fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PD4_GPIO_Port, LED_PD4_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2110      	movs	r1, #16
 80025a0:	4840      	ldr	r0, [pc, #256]	; (80026a4 <MX_GPIO_Init+0x240>)
 80025a2:	f003 fd03 	bl	8005fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <MX_GPIO_Init+0x244>)
 80025ae:	f003 fcfd 	bl	8005fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 80025b2:	230c      	movs	r3, #12
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b6:	2300      	movs	r3, #0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	4839      	ldr	r0, [pc, #228]	; (80026ac <MX_GPIO_Init+0x248>)
 80025c6:	f003 fb2d 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin;
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	4832      	ldr	r0, [pc, #200]	; (80026a8 <MX_GPIO_Init+0x244>)
 80025de:	f003 fb21 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_ENT_Pin */
  GPIO_InitStruct.Pin = SDIO_ENT_Pin;
 80025e2:	2308      	movs	r3, #8
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e6:	2300      	movs	r3, #0
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO_ENT_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f2:	4619      	mov	r1, r3
 80025f4:	482e      	ldr	r0, [pc, #184]	; (80026b0 <MX_GPIO_Init+0x24c>)
 80025f6:	f003 fb15 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260c:	2307      	movs	r3, #7
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	4827      	ldr	r0, [pc, #156]	; (80026b4 <MX_GPIO_Init+0x250>)
 8002618:	f003 fb04 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 800261c:	2308      	movs	r3, #8
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	481b      	ldr	r0, [pc, #108]	; (80026a0 <MX_GPIO_Init+0x23c>)
 8002634:	f003 faf6 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PD4_Pin */
  GPIO_InitStruct.Pin = LED_PD4_Pin;
 8002638:	2310      	movs	r3, #16
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PD4_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264c:	4619      	mov	r1, r3
 800264e:	4815      	ldr	r0, [pc, #84]	; (80026a4 <MX_GPIO_Init+0x240>)
 8002650:	f003 fae8 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PJ12_Pin LED_PJ13_Pin LED_PJ14_Pin LED_PJ15_Pin */
  GPIO_InitStruct.Pin = LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin;
 8002654:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266a:	4619      	mov	r1, r3
 800266c:	480e      	ldr	r0, [pc, #56]	; (80026a8 <MX_GPIO_Init+0x244>)
 800266e:	f003 fad9 	bl	8005c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002672:	2338      	movs	r3, #56	; 0x38
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002682:	2305      	movs	r3, #5
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268a:	4619      	mov	r1, r3
 800268c:	480a      	ldr	r0, [pc, #40]	; (80026b8 <MX_GPIO_Init+0x254>)
 800268e:	f003 fac9 	bl	8005c24 <HAL_GPIO_Init>

}
 8002692:	bf00      	nop
 8002694:	3740      	adds	r7, #64	; 0x40
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40022400 	.word	0x40022400
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400

080026bc <mapInt>:
float mapFloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

long mapInt(float x, float in_min, float in_max, int out_min, int out_max) {
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80026c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80026ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80026ce:	60b8      	str	r0, [r7, #8]
 80026d0:	6079      	str	r1, [r7, #4]
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 80026d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ec:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			+ out_min);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270a:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 800270e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002712:	ee17 3a90 	vmov	r3, s15
}
 8002716:	4618      	mov	r0, r3
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <Start_START_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_START_Task */
void Start_START_Task(void *argument)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//htim13.Instance->CCR1 = (htim13.Instance->ARR) * 0.99;

	Current_Status.LED_BRIGHTNESS  = LED_DEFAULT_BRIGHTNESS;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <Start_START_Task+0x48>)
 800272e:	2205      	movs	r2, #5
 8002730:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	Current_Status.LCD_BRIGHTNESS = LCD_DEFAULT_BRIGHTNESS;
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <Start_START_Task+0x48>)
 8002736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800273a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <Start_START_Task+0x48>)
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	/* Infinite loop */
	for (;;) {
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <Start_START_Task+0x48>)
 8002748:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800274c:	2b01      	cmp	r3, #1
 800274e:	d109      	bne.n	8002764 <Start_START_Task+0x40>
		{
			htim13.Instance->CCR1 = Current_Status.LCD_BRIGHTNESS;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <Start_START_Task+0x48>)
 8002752:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <Start_START_Task+0x4c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	635a      	str	r2, [r3, #52]	; 0x34
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <Start_START_Task+0x48>)
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}
        //Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;
		osDelay(10);
 8002764:	200a      	movs	r0, #10
 8002766:	f009 fd94 	bl	800c292 <osDelay>
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 800276a:	e7ec      	b.n	8002746 <Start_START_Task+0x22>
 800276c:	2000a504 	.word	0x2000a504
 8002770:	2000a698 	.word	0x2000a698

08002774 <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800277c:	2001      	movs	r0, #1
 800277e:	f009 fd88 	bl	800c292 <osDelay>
 8002782:	e7fb      	b.n	800277c <Start_SD_Task+0x8>

08002784 <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f009 fd80 	bl	800c292 <osDelay>
 8002792:	e7fb      	b.n	800278c <Start_LED_Task+0x8>
 8002794:	0000      	movs	r0, r0
	...

08002798 <Start_CAN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CAN_Task */
void Start_CAN_Task(void *argument)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CAN_Task */
  /* Infinite loop */
	Current_Status.CAN_PROTOCOL = CAN_LINK;
 80027a0:	4bc5      	ldr	r3, [pc, #788]	; (8002ab8 <Start_CAN_Task+0x320>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  for(;;)
  {
	  if (CAN_ENABLED) {

	  			if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80027a8:	4bc4      	ldr	r3, [pc, #784]	; (8002abc <Start_CAN_Task+0x324>)
 80027aa:	4ac5      	ldr	r2, [pc, #788]	; (8002ac0 <Start_CAN_Task+0x328>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	48c5      	ldr	r0, [pc, #788]	; (8002ac4 <Start_CAN_Task+0x32c>)
 80027b0:	f002 f886 	bl	80048c0 <HAL_CAN_GetRxMessage>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8582 	bne.w	80032c0 <Start_CAN_Task+0xb28>
	  			{
	  				if(Current_Status.CAN_PROTOCOL == CAN_LINK)
 80027bc:	4bbe      	ldr	r3, [pc, #760]	; (8002ab8 <Start_CAN_Task+0x320>)
 80027be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 8384 	bne.w	8002ed0 <Start_CAN_Task+0x738>
	  				{
	  					switch (RxHeader.StdId) {
 80027c8:	4bbd      	ldr	r3, [pc, #756]	; (8002ac0 <Start_CAN_Task+0x328>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d0:	f000 814a 	beq.w	8002a68 <Start_CAN_Task+0x2d0>
 80027d4:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80027d8:	f040 836d 	bne.w	8002eb6 <Start_CAN_Task+0x71e>
	  						case 0x7E8:
	  							switch (RxData[2]) {
 80027dc:	4bb7      	ldr	r3, [pc, #732]	; (8002abc <Start_CAN_Task+0x324>)
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	3b05      	subs	r3, #5
 80027e2:	2b5b      	cmp	r3, #91	; 0x5b
 80027e4:	f200 813e 	bhi.w	8002a64 <Start_CAN_Task+0x2cc>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <Start_CAN_Task+0x58>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002961 	.word	0x08002961
 80027f4:	08002a65 	.word	0x08002a65
 80027f8:	08002a65 	.word	0x08002a65
 80027fc:	08002a65 	.word	0x08002a65
 8002800:	08002a65 	.word	0x08002a65
 8002804:	08002a65 	.word	0x08002a65
 8002808:	08002973 	.word	0x08002973
 800280c:	08002981 	.word	0x08002981
 8002810:	0800299b 	.word	0x0800299b
 8002814:	080029a7 	.word	0x080029a7
 8002818:	080029bb 	.word	0x080029bb
 800281c:	08002a65 	.word	0x08002a65
 8002820:	080029cd 	.word	0x080029cd
 8002824:	08002a65 	.word	0x08002a65
 8002828:	08002a65 	.word	0x08002a65
 800282c:	08002a65 	.word	0x08002a65
 8002830:	08002a65 	.word	0x08002a65
 8002834:	08002a65 	.word	0x08002a65
 8002838:	08002a65 	.word	0x08002a65
 800283c:	08002a65 	.word	0x08002a65
 8002840:	08002a65 	.word	0x08002a65
 8002844:	08002a65 	.word	0x08002a65
 8002848:	08002a65 	.word	0x08002a65
 800284c:	08002a65 	.word	0x08002a65
 8002850:	08002a65 	.word	0x08002a65
 8002854:	08002a65 	.word	0x08002a65
 8002858:	08002a65 	.word	0x08002a65
 800285c:	08002a65 	.word	0x08002a65
 8002860:	08002a65 	.word	0x08002a65
 8002864:	080029d7 	.word	0x080029d7
 8002868:	08002a65 	.word	0x08002a65
 800286c:	08002a11 	.word	0x08002a11
 8002870:	08002a19 	.word	0x08002a19
 8002874:	08002a65 	.word	0x08002a65
 8002878:	08002a65 	.word	0x08002a65
 800287c:	08002a65 	.word	0x08002a65
 8002880:	08002a65 	.word	0x08002a65
 8002884:	08002a65 	.word	0x08002a65
 8002888:	08002a65 	.word	0x08002a65
 800288c:	08002a65 	.word	0x08002a65
 8002890:	08002a65 	.word	0x08002a65
 8002894:	08002a65 	.word	0x08002a65
 8002898:	08002a65 	.word	0x08002a65
 800289c:	08002a65 	.word	0x08002a65
 80028a0:	08002a65 	.word	0x08002a65
 80028a4:	08002a65 	.word	0x08002a65
 80028a8:	08002a21 	.word	0x08002a21
 80028ac:	08002a65 	.word	0x08002a65
 80028b0:	08002a65 	.word	0x08002a65
 80028b4:	08002a65 	.word	0x08002a65
 80028b8:	08002a65 	.word	0x08002a65
 80028bc:	08002a65 	.word	0x08002a65
 80028c0:	08002a65 	.word	0x08002a65
 80028c4:	08002a65 	.word	0x08002a65
 80028c8:	08002a65 	.word	0x08002a65
 80028cc:	08002a65 	.word	0x08002a65
 80028d0:	08002a65 	.word	0x08002a65
 80028d4:	08002a65 	.word	0x08002a65
 80028d8:	08002a65 	.word	0x08002a65
 80028dc:	08002a65 	.word	0x08002a65
 80028e0:	08002a65 	.word	0x08002a65
 80028e4:	08002a2f 	.word	0x08002a2f
 80028e8:	08002a65 	.word	0x08002a65
 80028ec:	08002a65 	.word	0x08002a65
 80028f0:	08002a65 	.word	0x08002a65
 80028f4:	08002a65 	.word	0x08002a65
 80028f8:	08002a65 	.word	0x08002a65
 80028fc:	08002a65 	.word	0x08002a65
 8002900:	08002a65 	.word	0x08002a65
 8002904:	08002a65 	.word	0x08002a65
 8002908:	08002a65 	.word	0x08002a65
 800290c:	08002a65 	.word	0x08002a65
 8002910:	08002a65 	.word	0x08002a65
 8002914:	08002a65 	.word	0x08002a65
 8002918:	08002a65 	.word	0x08002a65
 800291c:	08002a65 	.word	0x08002a65
 8002920:	08002a65 	.word	0x08002a65
 8002924:	08002a49 	.word	0x08002a49
 8002928:	08002a65 	.word	0x08002a65
 800292c:	08002a65 	.word	0x08002a65
 8002930:	08002a65 	.word	0x08002a65
 8002934:	08002a65 	.word	0x08002a65
 8002938:	08002a65 	.word	0x08002a65
 800293c:	08002a65 	.word	0x08002a65
 8002940:	08002a65 	.word	0x08002a65
 8002944:	08002a65 	.word	0x08002a65
 8002948:	08002a65 	.word	0x08002a65
 800294c:	08002a53 	.word	0x08002a53
 8002950:	08002a65 	.word	0x08002a65
 8002954:	08002a65 	.word	0x08002a65
 8002958:	08002a65 	.word	0x08002a65
 800295c:	08002a65 	.word	0x08002a65
	  								case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  									Current_Status.ECT = RxData[3] - 40;
 8002960:	4b56      	ldr	r3, [pc, #344]	; (8002abc <Start_CAN_Task+0x324>)
 8002962:	78db      	ldrb	r3, [r3, #3]
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b28      	subs	r3, #40	; 0x28
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <Start_CAN_Task+0x320>)
 800296c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  									break;
 8002970:	e079      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  									Current_Status.MAP = RxData[3];
 8002972:	4b52      	ldr	r3, [pc, #328]	; (8002abc <Start_CAN_Task+0x324>)
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	b21a      	sxth	r2, r3
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <Start_CAN_Task+0x320>)
 800297a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  									break;
 800297e:	e072      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  									Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 8002980:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <Start_CAN_Task+0x324>)
 8002982:	791b      	ldrb	r3, [r3, #4]
 8002984:	b29b      	uxth	r3, r3
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <Start_CAN_Task+0x324>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002996:	801a      	strh	r2, [r3, #0]
	  									break;
 8002998:	e065      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  									Current_Status.LF_SPEED = RxData[3];
 800299a:	4b48      	ldr	r3, [pc, #288]	; (8002abc <Start_CAN_Task+0x324>)
 800299c:	78db      	ldrb	r3, [r3, #3]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <Start_CAN_Task+0x320>)
 80029a2:	859a      	strh	r2, [r3, #44]	; 0x2c
	  									break;
 80029a4:	e05f      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  									Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <Start_CAN_Task+0x324>)
 80029a8:	78db      	ldrb	r3, [r3, #3]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b40      	subs	r3, #64	; 0x40
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <Start_CAN_Task+0x320>)
 80029b6:	835a      	strh	r2, [r3, #26]
	  									break;
 80029b8:	e055      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  									Current_Status.IAT = RxData[3] - 40;
 80029ba:	4b40      	ldr	r3, [pc, #256]	; (8002abc <Start_CAN_Task+0x324>)
 80029bc:	78db      	ldrb	r3, [r3, #3]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b28      	subs	r3, #40	; 0x28
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <Start_CAN_Task+0x320>)
 80029c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  									break;
 80029ca:	e04c      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  									Current_Status.TPS = 100/256 * RxData[3];
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <Start_CAN_Task+0x320>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  									break;
 80029d4:	e047      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x1C: // PID-0x1C obd standard
	  									break;
	  								case 0x20: // PID-0x20 PIDs supported [21-40]
	  									break;
	  								case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  									Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <Start_CAN_Task+0x324>)
 80029d8:	791b      	ldrb	r3, [r3, #4]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <Start_CAN_Task+0x324>)
 80029e4:	78d2      	ldrb	r2, [r2, #3]
 80029e6:	4413      	add	r3, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fdab 	bl	8000544 <__aeabi_i2d>
 80029ee:	a330      	add	r3, pc, #192	; (adr r3, 8002ab0 <Start_CAN_Task+0x318>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fe10 	bl	8000618 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f81c 	bl	8000a3c <__aeabi_d2uiz>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  									break;
 8002a0e:	e02a      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x24: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	849a      	strh	r2, [r3, #36]	; 0x24
	  									break;
 8002a16:	e026      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	84da      	strh	r2, [r3, #38]	; 0x26
	  									break;
 8002a1e:	e022      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  									Current_Status.BARO = RxData[3];
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <Start_CAN_Task+0x324>)
 8002a22:	78db      	ldrb	r3, [r3, #3]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  									break;
 8002a2c:	e01b      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x40: // PIDs supported [41-60]
	  									break;
	  								case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  									Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <Start_CAN_Task+0x324>)
 8002a30:	78db      	ldrb	r3, [r3, #3]
 8002a32:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <Start_CAN_Task+0x330>)
 8002a34:	fb82 1203 	smull	r1, r2, r2, r3
 8002a38:	1192      	asrs	r2, r2, #6
 8002a3a:	17db      	asrs	r3, r3, #31
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  									break;
 8002a46:	e00e      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  									break;
	  								case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  									Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  									break;
 8002a50:	e009      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  									Current_Status.OILT = RxData[3] - 40;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <Start_CAN_Task+0x324>)
 8002a54:	78db      	ldrb	r3, [r3, #3]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b28      	subs	r3, #40	; 0x28
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <Start_CAN_Task+0x320>)
 8002a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  									break;
 8002a62:	e000      	b.n	8002a66 <Start_CAN_Task+0x2ce>
	  								case 0x60: // PIDs supported [61-80]
	  									break;
	  								default:
	  									break;
 8002a64:	bf00      	nop
	  							}
	  							break;
 8002a66:	e226      	b.n	8002eb6 <Start_CAN_Task+0x71e>
	  							case 0x3E8: //Link Dash
	  								switch (RxData[0]) {
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <Start_CAN_Task+0x324>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	f200 8221 	bhi.w	8002eb4 <Start_CAN_Task+0x71c>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <Start_CAN_Task+0x2e0>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002acd 	.word	0x08002acd
 8002a7c:	08002b1b 	.word	0x08002b1b
 8002a80:	08002b69 	.word	0x08002b69
 8002a84:	08002bb5 	.word	0x08002bb5
 8002a88:	08002c03 	.word	0x08002c03
 8002a8c:	08002c4f 	.word	0x08002c4f
 8002a90:	08002c99 	.word	0x08002c99
 8002a94:	08002ced 	.word	0x08002ced
 8002a98:	08002d39 	.word	0x08002d39
 8002a9c:	08002d87 	.word	0x08002d87
 8002aa0:	08002dd1 	.word	0x08002dd1
 8002aa4:	08002e1b 	.word	0x08002e1b
 8002aa8:	08002e65 	.word	0x08002e65
 8002aac:	f3af 8000 	nop.w
 8002ab0:	10624dd3 	.word	0x10624dd3
 8002ab4:	3fb43958 	.word	0x3fb43958
 8002ab8:	2000a504 	.word	0x2000a504
 8002abc:	2000b080 	.word	0x2000b080
 8002ac0:	2000b0fc 	.word	0x2000b0fc
 8002ac4:	2000b088 	.word	0x2000b088
 8002ac8:	10624dd3 	.word	0x10624dd3
	  									case 0:
	  										Current_Status.RPM = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002acc:	4b85      	ldr	r3, [pc, #532]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b83      	ldr	r3, [pc, #524]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002ad8:	789b      	ldrb	r3, [r3, #2]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002ae2:	801a      	strh	r2, [r3, #0]
	  										Current_Status.MAP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002ae6:	795b      	ldrb	r3, [r3, #5]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002af0:	791b      	ldrb	r3, [r3, #4]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002afc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  										Current_Status.MGP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b00:	4b78      	ldr	r3, [pc, #480]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b02:	79db      	ldrb	r3, [r3, #7]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b0c:	799b      	ldrb	r3, [r3, #6]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002b16:	81da      	strh	r2, [r3, #14]
	  										break;
 8002b18:	e1cc      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 1:
	  										Current_Status.BARO = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b1a:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b1c:	78db      	ldrb	r3, [r3, #3]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b26:	789b      	ldrb	r3, [r3, #2]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	4b6e      	ldr	r3, [pc, #440]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  										Current_Status.TPS = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b34:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b36:	795b      	ldrb	r3, [r3, #5]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b40:	791b      	ldrb	r3, [r3, #4]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  										Current_Status.INJ_DC = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b50:	79db      	ldrb	r3, [r3, #7]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002b64:	821a      	strh	r2, [r3, #16]
	  										break;
 8002b66:	e1a5      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 2:
	  										Current_Status.INJ_DC_ST = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b68:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b6a:	78db      	ldrb	r3, [r3, #3]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b74:	789b      	ldrb	r3, [r3, #2]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002b7e:	825a      	strh	r2, [r3, #18]
	  										Current_Status.INJ_PULSE = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b80:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b82:	795b      	ldrb	r3, [r3, #5]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002b96:	829a      	strh	r2, [r3, #20]
	  										Current_Status.ECT = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b98:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002b9a:	79db      	ldrb	r3, [r3, #7]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002ba4:	799b      	ldrb	r3, [r3, #6]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002bae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  										break;
 8002bb2:	e17f      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 3:
	  										Current_Status.IAT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002bb6:	78db      	ldrb	r3, [r3, #3]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002bc0:	789b      	ldrb	r3, [r3, #2]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002bca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  										Current_Status.BATT = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002bce:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002bd0:	795b      	ldrb	r3, [r3, #5]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  										Current_Status.MAF = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002be8:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002bea:	79db      	ldrb	r3, [r3, #7]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002bf4:	799b      	ldrb	r3, [r3, #6]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002bfe:	82da      	strh	r2, [r3, #22]
	  										break;
 8002c00:	e158      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 4:
	  										Current_Status.GEAR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c04:	78db      	ldrb	r3, [r3, #3]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c0e:	789b      	ldrb	r3, [r3, #2]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	  										Current_Status.INJ_TIM = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c1e:	795b      	ldrb	r3, [r3, #5]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002c32:	831a      	strh	r2, [r3, #24]
	  										Current_Status.IGN_TIM = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c36:	79db      	ldrb	r3, [r3, #7]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c40:	799b      	ldrb	r3, [r3, #6]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002c4a:	835a      	strh	r2, [r3, #26]
	  										break;
 8002c4c:	e132      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 5:
	  										Current_Status.CAM_I_L = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c4e:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c50:	78db      	ldrb	r3, [r3, #3]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c5a:	789b      	ldrb	r3, [r3, #2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002c64:	839a      	strh	r2, [r3, #28]
	  										Current_Status.CAM_I_R = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c68:	795b      	ldrb	r3, [r3, #5]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002c7c:	83da      	strh	r2, [r3, #30]
	  										Current_Status.CAM_E_L = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c80:	79db      	ldrb	r3, [r3, #7]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c8a:	799b      	ldrb	r3, [r3, #6]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002c94:	841a      	strh	r2, [r3, #32]
	  										break;
 8002c96:	e10d      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 6:
	  										Current_Status.CAM_E_R = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002c9a:	78db      	ldrb	r3, [r3, #3]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002cae:	845a      	strh	r2, [r3, #34]	; 0x22
	  										Current_Status.LAMBDA1 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002cb2:	795b      	ldrb	r3, [r3, #5]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002cbc:	791b      	ldrb	r3, [r3, #4]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002cc6:	849a      	strh	r2, [r3, #36]	; 0x24
	  										Current_Status.LAMBDA2 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002cca:	79db      	ldrb	r3, [r3, #7]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <Start_CAN_Task+0x54c>)
 8002cd4:	799b      	ldrb	r3, [r3, #6]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <Start_CAN_Task+0x550>)
 8002cde:	84da      	strh	r2, [r3, #38]	; 0x26
	  										break;
 8002ce0:	e0e8      	b.n	8002eb4 <Start_CAN_Task+0x71c>
 8002ce2:	bf00      	nop
 8002ce4:	2000b080 	.word	0x2000b080
 8002ce8:	2000a504 	.word	0x2000a504
	  									case 7:
	  										Current_Status.TRIG1_ERROR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002cec:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002cee:	78db      	ldrb	r3, [r3, #3]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002cf8:	789b      	ldrb	r3, [r3, #2]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
	  										Current_Status.FAULT_CODES = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d04:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d06:	795b      	ldrb	r3, [r3, #5]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d10:	791b      	ldrb	r3, [r3, #4]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
	  										Current_Status.FUELP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d1c:	4b69      	ldr	r3, [pc, #420]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d1e:	79db      	ldrb	r3, [r3, #7]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d28:	799b      	ldrb	r3, [r3, #6]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  										break;
 8002d36:	e0bd      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 8:
	  										Current_Status.OILT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d44:	789b      	ldrb	r3, [r3, #2]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  										Current_Status.OILP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d52:	4b5c      	ldr	r3, [pc, #368]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d54:	795b      	ldrb	r3, [r3, #5]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d5e:	791b      	ldrb	r3, [r3, #4]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	  										Current_Status.LF_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d6c:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d6e:	79db      	ldrb	r3, [r3, #7]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d82:	859a      	strh	r2, [r3, #44]	; 0x2c
	  										break;
 8002d84:	e096      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 9:
	  										Current_Status.LR_SPEED = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d86:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d88:	78db      	ldrb	r3, [r3, #3]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002d92:	789b      	ldrb	r3, [r3, #2]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
	  										Current_Status.RF_SPEED = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d9e:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002db4:	861a      	strh	r2, [r3, #48]	; 0x30
	  										Current_Status.RR_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002db6:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002db8:	79db      	ldrb	r3, [r3, #7]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002dc2:	799b      	ldrb	r3, [r3, #6]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002dcc:	865a      	strh	r2, [r3, #50]	; 0x32
	  										break;
 8002dce:	e071      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 10:
	  										Current_Status.KNOCK1 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002dd2:	78db      	ldrb	r3, [r3, #3]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002ddc:	789b      	ldrb	r3, [r3, #2]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002de6:	869a      	strh	r2, [r3, #52]	; 0x34
	  										Current_Status.KNOCK2 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002dea:	795b      	ldrb	r3, [r3, #5]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002df4:	791b      	ldrb	r3, [r3, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002dfe:	86da      	strh	r2, [r3, #54]	; 0x36
	  										Current_Status.KNOCK3 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e02:	79db      	ldrb	r3, [r3, #7]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e0c:	799b      	ldrb	r3, [r3, #6]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002e16:	871a      	strh	r2, [r3, #56]	; 0x38
	  										break;
 8002e18:	e04c      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 11:
	  										Current_Status.KNOCK4 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002e1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e1c:	78db      	ldrb	r3, [r3, #3]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e26:	789b      	ldrb	r3, [r3, #2]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002e30:	875a      	strh	r2, [r3, #58]	; 0x3a
	  										Current_Status.KNOCK5 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e34:	795b      	ldrb	r3, [r3, #5]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e3e:	791b      	ldrb	r3, [r3, #4]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002e48:	879a      	strh	r2, [r3, #60]	; 0x3c
	  										Current_Status.KNOCK6 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e4c:	79db      	ldrb	r3, [r3, #7]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e56:	799b      	ldrb	r3, [r3, #6]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002e60:	87da      	strh	r2, [r3, #62]	; 0x3e
	  										break;
 8002e62:	e027      	b.n	8002eb4 <Start_CAN_Task+0x71c>
	  									case 12:
	  										Current_Status.KNOCK7 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e66:	78db      	ldrb	r3, [r3, #3]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e70:	789b      	ldrb	r3, [r3, #2]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  										Current_Status.KNOCK8 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e80:	795b      	ldrb	r3, [r3, #5]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e8a:	791b      	ldrb	r3, [r3, #4]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002e94:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	  										Current_Status.LIMITS = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002e9a:	79db      	ldrb	r3, [r3, #7]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <Start_CAN_Task+0x72c>)
 8002ea4:	799b      	ldrb	r3, [r3, #6]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <Start_CAN_Task+0x730>)
 8002eae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  										break;
 8002eb2:	bf00      	nop
	  								}
	  								break;
 8002eb4:	bf00      	nop
	  							}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8002eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eba:	4804      	ldr	r0, [pc, #16]	; (8002ecc <Start_CAN_Task+0x734>)
 8002ebc:	f003 f88f 	bl	8005fde <HAL_GPIO_TogglePin>
 8002ec0:	e156      	b.n	8003170 <Start_CAN_Task+0x9d8>
 8002ec2:	bf00      	nop
 8002ec4:	2000b080 	.word	0x2000b080
 8002ec8:	2000a504 	.word	0x2000a504
 8002ecc:	40022400 	.word	0x40022400
	  				}
	  				else if(Current_Status.CAN_PROTOCOL == CAN_MX5)
 8002ed0:	4bc5      	ldr	r3, [pc, #788]	; (80031e8 <Start_CAN_Task+0xa50>)
 8002ed2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 814a 	bne.w	8003170 <Start_CAN_Task+0x9d8>
	  				{
	  					switch (RxHeader.StdId) {
 8002edc:	4bc3      	ldr	r3, [pc, #780]	; (80031ec <Start_CAN_Task+0xa54>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3b05      	subs	r3, #5
 8002ee2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ee4:	f200 813e 	bhi.w	8003164 <Start_CAN_Task+0x9cc>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <Start_CAN_Task+0x758>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08003061 	.word	0x08003061
 8002ef4:	08003165 	.word	0x08003165
 8002ef8:	08003165 	.word	0x08003165
 8002efc:	08003165 	.word	0x08003165
 8002f00:	08003165 	.word	0x08003165
 8002f04:	08003165 	.word	0x08003165
 8002f08:	08003073 	.word	0x08003073
 8002f0c:	08003081 	.word	0x08003081
 8002f10:	0800309b 	.word	0x0800309b
 8002f14:	080030a7 	.word	0x080030a7
 8002f18:	080030bb 	.word	0x080030bb
 8002f1c:	08003165 	.word	0x08003165
 8002f20:	080030cd 	.word	0x080030cd
 8002f24:	08003165 	.word	0x08003165
 8002f28:	08003165 	.word	0x08003165
 8002f2c:	08003165 	.word	0x08003165
 8002f30:	08003165 	.word	0x08003165
 8002f34:	08003165 	.word	0x08003165
 8002f38:	08003165 	.word	0x08003165
 8002f3c:	08003165 	.word	0x08003165
 8002f40:	08003165 	.word	0x08003165
 8002f44:	08003165 	.word	0x08003165
 8002f48:	08003165 	.word	0x08003165
 8002f4c:	08003165 	.word	0x08003165
 8002f50:	08003165 	.word	0x08003165
 8002f54:	08003165 	.word	0x08003165
 8002f58:	08003165 	.word	0x08003165
 8002f5c:	08003165 	.word	0x08003165
 8002f60:	08003165 	.word	0x08003165
 8002f64:	080030d7 	.word	0x080030d7
 8002f68:	08003165 	.word	0x08003165
 8002f6c:	08003165 	.word	0x08003165
 8002f70:	08003111 	.word	0x08003111
 8002f74:	08003165 	.word	0x08003165
 8002f78:	08003165 	.word	0x08003165
 8002f7c:	08003165 	.word	0x08003165
 8002f80:	08003165 	.word	0x08003165
 8002f84:	08003165 	.word	0x08003165
 8002f88:	08003165 	.word	0x08003165
 8002f8c:	08003165 	.word	0x08003165
 8002f90:	08003165 	.word	0x08003165
 8002f94:	08003165 	.word	0x08003165
 8002f98:	08003165 	.word	0x08003165
 8002f9c:	08003165 	.word	0x08003165
 8002fa0:	08003165 	.word	0x08003165
 8002fa4:	08003165 	.word	0x08003165
 8002fa8:	08003119 	.word	0x08003119
 8002fac:	08003127 	.word	0x08003127
 8002fb0:	08003165 	.word	0x08003165
 8002fb4:	08003165 	.word	0x08003165
 8002fb8:	08003165 	.word	0x08003165
 8002fbc:	08003165 	.word	0x08003165
 8002fc0:	08003165 	.word	0x08003165
 8002fc4:	08003165 	.word	0x08003165
 8002fc8:	08003165 	.word	0x08003165
 8002fcc:	08003165 	.word	0x08003165
 8002fd0:	08003165 	.word	0x08003165
 8002fd4:	08003165 	.word	0x08003165
 8002fd8:	08003165 	.word	0x08003165
 8002fdc:	08003165 	.word	0x08003165
 8002fe0:	08003165 	.word	0x08003165
 8002fe4:	0800312f 	.word	0x0800312f
 8002fe8:	08003165 	.word	0x08003165
 8002fec:	08003165 	.word	0x08003165
 8002ff0:	08003165 	.word	0x08003165
 8002ff4:	08003165 	.word	0x08003165
 8002ff8:	08003165 	.word	0x08003165
 8002ffc:	08003165 	.word	0x08003165
 8003000:	08003165 	.word	0x08003165
 8003004:	08003165 	.word	0x08003165
 8003008:	08003165 	.word	0x08003165
 800300c:	08003165 	.word	0x08003165
 8003010:	08003165 	.word	0x08003165
 8003014:	08003165 	.word	0x08003165
 8003018:	08003165 	.word	0x08003165
 800301c:	08003165 	.word	0x08003165
 8003020:	08003165 	.word	0x08003165
 8003024:	08003149 	.word	0x08003149
 8003028:	08003165 	.word	0x08003165
 800302c:	08003165 	.word	0x08003165
 8003030:	08003165 	.word	0x08003165
 8003034:	08003165 	.word	0x08003165
 8003038:	08003165 	.word	0x08003165
 800303c:	08003165 	.word	0x08003165
 8003040:	08003165 	.word	0x08003165
 8003044:	08003165 	.word	0x08003165
 8003048:	08003165 	.word	0x08003165
 800304c:	08003153 	.word	0x08003153
 8003050:	08003165 	.word	0x08003165
 8003054:	08003165 	.word	0x08003165
 8003058:	08003165 	.word	0x08003165
 800305c:	08003165 	.word	0x08003165
	  						case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  							Current_Status.ECT = RxData[3] - 40;
 8003060:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <Start_CAN_Task+0xa58>)
 8003062:	78db      	ldrb	r3, [r3, #3]
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b28      	subs	r3, #40	; 0x28
 8003068:	b29a      	uxth	r2, r3
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <Start_CAN_Task+0xa50>)
 800306c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  							break;
 8003070:	e079      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  							Current_Status.MAP = RxData[3];
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <Start_CAN_Task+0xa58>)
 8003074:	78db      	ldrb	r3, [r3, #3]
 8003076:	b21a      	sxth	r2, r3
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <Start_CAN_Task+0xa50>)
 800307a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  							break;
 800307e:	e072      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  							Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 8003080:	4b5b      	ldr	r3, [pc, #364]	; (80031f0 <Start_CAN_Task+0xa58>)
 8003082:	791b      	ldrb	r3, [r3, #4]
 8003084:	b29b      	uxth	r3, r3
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <Start_CAN_Task+0xa58>)
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	b29b      	uxth	r3, r3
 8003090:	4413      	add	r3, r2
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003096:	801a      	strh	r2, [r3, #0]
	  							break;
 8003098:	e065      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  							Current_Status.LF_SPEED = RxData[3];
 800309a:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <Start_CAN_Task+0xa58>)
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <Start_CAN_Task+0xa50>)
 80030a2:	859a      	strh	r2, [r3, #44]	; 0x2c
	  							break;
 80030a4:	e05f      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  							Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 80030a6:	4b52      	ldr	r3, [pc, #328]	; (80031f0 <Start_CAN_Task+0xa58>)
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b40      	subs	r3, #64	; 0x40
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <Start_CAN_Task+0xa50>)
 80030b6:	835a      	strh	r2, [r3, #26]
	  							break;
 80030b8:	e055      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  							Current_Status.IAT = RxData[3] - 40;
 80030ba:	4b4d      	ldr	r3, [pc, #308]	; (80031f0 <Start_CAN_Task+0xa58>)
 80030bc:	78db      	ldrb	r3, [r3, #3]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b28      	subs	r3, #40	; 0x28
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <Start_CAN_Task+0xa50>)
 80030c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  							break;
 80030ca:	e04c      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  							Current_Status.TPS = 100/256 * RxData[3];
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <Start_CAN_Task+0xa50>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  							break;
 80030d4:	e047      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x1C: // PID-0x1C obd standard
	  							break;
	  						case 0x20: // PID-0x20 PIDs supported [21-40]
	  							break;
	  						case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  							Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 80030d6:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <Start_CAN_Task+0xa58>)
 80030d8:	791b      	ldrb	r3, [r3, #4]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <Start_CAN_Task+0xa58>)
 80030e4:	78d2      	ldrb	r2, [r2, #3]
 80030e6:	4413      	add	r3, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fa2b 	bl	8000544 <__aeabi_i2d>
 80030ee:	a33c      	add	r3, pc, #240	; (adr r3, 80031e0 <Start_CAN_Task+0xa48>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd fa90 	bl	8000618 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fc9c 	bl	8000a3c <__aeabi_d2uiz>
 8003104:	4603      	mov	r3, r0
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <Start_CAN_Task+0xa50>)
 800310a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  							break;
 800310e:	e02a      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8003110:	4b35      	ldr	r3, [pc, #212]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003112:	2200      	movs	r2, #0
 8003114:	84da      	strh	r2, [r3, #38]	; 0x26
	  							break;
 8003116:	e026      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  							Current_Status.BARO = RxData[3];
 8003118:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <Start_CAN_Task+0xa58>)
 800311a:	78db      	ldrb	r3, [r3, #3]
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003120:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  							break;
 8003124:	e01f      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x34: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003128:	2200      	movs	r2, #0
 800312a:	849a      	strh	r2, [r3, #36]	; 0x24
	  							break;
 800312c:	e01b      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x40: // PIDs supported [41-60]
	  							break;
	  						case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  							Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 800312e:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <Start_CAN_Task+0xa58>)
 8003130:	78db      	ldrb	r3, [r3, #3]
 8003132:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <Start_CAN_Task+0xa5c>)
 8003134:	fb82 1203 	smull	r1, r2, r2, r3
 8003138:	1192      	asrs	r2, r2, #6
 800313a:	17db      	asrs	r3, r3, #31
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003142:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  							break;
 8003146:	e00e      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  							break;
	  						case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  							Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <Start_CAN_Task+0xa50>)
 800314a:	2200      	movs	r2, #0
 800314c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  							break;
 8003150:	e009      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  							Current_Status.OILT = RxData[3] - 40;
 8003152:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <Start_CAN_Task+0xa58>)
 8003154:	78db      	ldrb	r3, [r3, #3]
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b28      	subs	r3, #40	; 0x28
 800315a:	b29a      	uxth	r2, r3
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <Start_CAN_Task+0xa50>)
 800315e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  							break;
 8003162:	e000      	b.n	8003166 <Start_CAN_Task+0x9ce>
	  						case 0x60: // PIDs supported [61-80]
	  							break;
	  						default:
	  							break;
 8003164:	bf00      	nop
	  					}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8003166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316a:	4823      	ldr	r0, [pc, #140]	; (80031f8 <Start_CAN_Task+0xa60>)
 800316c:	f002 ff37 	bl	8005fde <HAL_GPIO_TogglePin>
	  				}

	  				Current_Status.RPM_100 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 100);
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	2164      	movs	r1, #100	; 0x64
 800317e:	2000      	movs	r0, #0
 8003180:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80031fc <Start_CAN_Task+0xa64>
 8003184:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003200 <Start_CAN_Task+0xa68>
 8003188:	eeb0 0a67 	vmov.f32	s0, s15
 800318c:	f7ff fa96 	bl	80026bc <mapInt>
 8003190:	4603      	mov	r3, r0
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <Start_CAN_Task+0xa50>)
 8003196:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_100 = Current_Status.RPM_100 >= 100 ? 100 : Current_Status.RPM_100;
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <Start_CAN_Task+0xa50>)
 800319a:	885b      	ldrh	r3, [r3, #2]
 800319c:	2b64      	cmp	r3, #100	; 0x64
 800319e:	bf28      	it	cs
 80031a0:	2364      	movcs	r3, #100	; 0x64
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <Start_CAN_Task+0xa50>)
 80031a6:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_180 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 180);
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <Start_CAN_Task+0xa50>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	21b4      	movs	r1, #180	; 0xb4
 80031b6:	2000      	movs	r0, #0
 80031b8:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80031fc <Start_CAN_Task+0xa64>
 80031bc:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003200 <Start_CAN_Task+0xa68>
 80031c0:	eeb0 0a67 	vmov.f32	s0, s15
 80031c4:	f7ff fa7a 	bl	80026bc <mapInt>
 80031c8:	4603      	mov	r3, r0
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <Start_CAN_Task+0xa50>)
 80031ce:	809a      	strh	r2, [r3, #4]
	  				Current_Status.RPM_180 = Current_Status.RPM_180 >= 180 ? 810 : Current_Status.RPM_180;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <Start_CAN_Task+0xa50>)
 80031d2:	889b      	ldrh	r3, [r3, #4]
 80031d4:	2bb3      	cmp	r3, #179	; 0xb3
 80031d6:	d815      	bhi.n	8003204 <Start_CAN_Task+0xa6c>
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <Start_CAN_Task+0xa50>)
 80031da:	889b      	ldrh	r3, [r3, #4]
 80031dc:	e014      	b.n	8003208 <Start_CAN_Task+0xa70>
 80031de:	bf00      	nop
 80031e0:	10624dd3 	.word	0x10624dd3
 80031e4:	3fb43958 	.word	0x3fb43958
 80031e8:	2000a504 	.word	0x2000a504
 80031ec:	2000b0fc 	.word	0x2000b0fc
 80031f0:	2000b080 	.word	0x2000b080
 80031f4:	10624dd3 	.word	0x10624dd3
 80031f8:	40022400 	.word	0x40022400
 80031fc:	45fa0000 	.word	0x45fa0000
 8003200:	00000000 	.word	0x00000000
 8003204:	f240 332a 	movw	r3, #810	; 0x32a
 8003208:	4a30      	ldr	r2, [pc, #192]	; (80032cc <Start_CAN_Task+0xb34>)
 800320a:	8093      	strh	r3, [r2, #4]
	  				Current_Status.RPM_270 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 270);
 800320c:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <Start_CAN_Task+0xb34>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003218:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800321c:	2000      	movs	r0, #0
 800321e:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80032d0 <Start_CAN_Task+0xb38>
 8003222:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80032d4 <Start_CAN_Task+0xb3c>
 8003226:	eeb0 0a67 	vmov.f32	s0, s15
 800322a:	f7ff fa47 	bl	80026bc <mapInt>
 800322e:	4603      	mov	r3, r0
 8003230:	b29a      	uxth	r2, r3
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <Start_CAN_Task+0xb34>)
 8003234:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_270 = Current_Status.RPM_270 >= 270 ? 270 : Current_Status.RPM_270;
 8003236:	4b25      	ldr	r3, [pc, #148]	; (80032cc <Start_CAN_Task+0xb34>)
 8003238:	891b      	ldrh	r3, [r3, #8]
 800323a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800323e:	bf28      	it	cs
 8003240:	f44f 7387 	movcs.w	r3, #270	; 0x10e
 8003244:	b29a      	uxth	r2, r3
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <Start_CAN_Task+0xb34>)
 8003248:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_240 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 240);
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <Start_CAN_Task+0xb34>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	21f0      	movs	r1, #240	; 0xf0
 8003258:	2000      	movs	r0, #0
 800325a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80032d0 <Start_CAN_Task+0xb38>
 800325e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80032d4 <Start_CAN_Task+0xb3c>
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	f7ff fa29 	bl	80026bc <mapInt>
 800326a:	4603      	mov	r3, r0
 800326c:	b29a      	uxth	r2, r3
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <Start_CAN_Task+0xb34>)
 8003270:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_240 = Current_Status.RPM_240 >= 240 ? 240 : Current_Status.RPM_240;
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <Start_CAN_Task+0xb34>)
 8003274:	88db      	ldrh	r3, [r3, #6]
 8003276:	2bf0      	cmp	r3, #240	; 0xf0
 8003278:	bf28      	it	cs
 800327a:	23f0      	movcs	r3, #240	; 0xf0
 800327c:	b29a      	uxth	r2, r3
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <Start_CAN_Task+0xb34>)
 8003280:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_360 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 360);
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <Start_CAN_Task+0xb34>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003292:	2000      	movs	r0, #0
 8003294:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 80032d0 <Start_CAN_Task+0xb38>
 8003298:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80032d4 <Start_CAN_Task+0xb3c>
 800329c:	eeb0 0a67 	vmov.f32	s0, s15
 80032a0:	f7ff fa0c 	bl	80026bc <mapInt>
 80032a4:	4603      	mov	r3, r0
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <Start_CAN_Task+0xb34>)
 80032aa:	815a      	strh	r2, [r3, #10]
	  				Current_Status.RPM_360 = Current_Status.RPM_360 >= 360 ? 360 : Current_Status.RPM_360;
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <Start_CAN_Task+0xb34>)
 80032ae:	895b      	ldrh	r3, [r3, #10]
 80032b0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80032b4:	bf28      	it	cs
 80032b6:	f44f 73b4 	movcs.w	r3, #360	; 0x168
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <Start_CAN_Task+0xb34>)
 80032be:	815a      	strh	r2, [r3, #10]

	  				//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
	  			}

	  			osDelay(1);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f008 ffe6 	bl	800c292 <osDelay>
	  if (CAN_ENABLED) {
 80032c6:	f7ff ba6f 	b.w	80027a8 <Start_CAN_Task+0x10>
 80032ca:	bf00      	nop
 80032cc:	2000a504 	.word	0x2000a504
 80032d0:	45fa0000 	.word	0x45fa0000
 80032d4:	00000000 	.word	0x00000000

080032d8 <Start_BTN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BTN_Task */
void Start_BTN_Task(void *argument)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BTN_Task */
  /* Infinite loop */
  for(;;)
  {
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80032e0:	2104      	movs	r1, #4
 80032e2:	483d      	ldr	r0, [pc, #244]	; (80033d8 <Start_BTN_Task+0x100>)
 80032e4:	f002 fe4a 	bl	8005f7c <HAL_GPIO_ReadPin>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <Start_BTN_Task+0x104>)
 80032ee:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		Current_Status.BTN_TOP_LEFT = HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin);
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	483a      	ldr	r0, [pc, #232]	; (80033e0 <Start_BTN_Task+0x108>)
 80032f6:	f002 fe41 	bl	8005f7c <HAL_GPIO_ReadPin>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <Start_BTN_Task+0x104>)
 8003300:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

		//Current_Status.RPM = Current_Status.LCD_BRIGHTNESS;
		Current_Status.IND_LEFT = Current_Status.BTN_TOP_LEFT;
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <Start_BTN_Task+0x104>)
 8003306:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b33      	ldr	r3, [pc, #204]	; (80033dc <Start_BTN_Task+0x104>)
 800330e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		Current_Status.IND_RIGHT = Current_Status.BTN_TOP_RIGHT;
 8003312:	4b32      	ldr	r3, [pc, #200]	; (80033dc <Start_BTN_Task+0x104>)
 8003314:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8003318:	b29a      	uxth	r2, r3
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <Start_BTN_Task+0x104>)
 800331c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		Current_Status.BTN_BOTTOM_RIGHT = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 8003320:	2108      	movs	r1, #8
 8003322:	482d      	ldr	r0, [pc, #180]	; (80033d8 <Start_BTN_Task+0x100>)
 8003324:	f002 fe2a 	bl	8005f7c <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <Start_BTN_Task+0x104>)
 800332e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Current_Status.BTN_BOTTOM_LEFT = HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin);
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	482a      	ldr	r0, [pc, #168]	; (80033e0 <Start_BTN_Task+0x108>)
 8003336:	f002 fe21 	bl	8005f7c <HAL_GPIO_ReadPin>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <Start_BTN_Task+0x104>)
 8003340:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

		if(Current_Status.BTN_BOTTOM_LEFT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <Start_BTN_Task+0x104>)
 8003346:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800334a:	2b01      	cmp	r3, #1
 800334c:	d11a      	bne.n	8003384 <Start_BTN_Task+0xac>
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <Start_BTN_Task+0x104>)
 8003350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003354:	2b00      	cmp	r3, #0
 8003356:	d115      	bne.n	8003384 <Start_BTN_Task+0xac>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS >= 50 ? Current_Status.LCD_BRIGHTNESS - 50 : Current_Status.LCD_BRIGHTNESS;
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <Start_BTN_Task+0x104>)
 800335a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800335e:	2b31      	cmp	r3, #49	; 0x31
 8003360:	d905      	bls.n	800336e <Start_BTN_Task+0x96>
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <Start_BTN_Task+0x104>)
 8003364:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003368:	3b32      	subs	r3, #50	; 0x32
 800336a:	b29b      	uxth	r3, r3
 800336c:	e002      	b.n	8003374 <Start_BTN_Task+0x9c>
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <Start_BTN_Task+0x104>)
 8003370:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003374:	4a19      	ldr	r2, [pc, #100]	; (80033dc <Start_BTN_Task+0x104>)
 8003376:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <Start_BTN_Task+0x104>)
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003382:	e024      	b.n	80033ce <Start_BTN_Task+0xf6>
		} else if(Current_Status.BTN_BOTTOM_RIGHT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <Start_BTN_Task+0x104>)
 8003386:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d11b      	bne.n	80033c6 <Start_BTN_Task+0xee>
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <Start_BTN_Task+0x104>)
 8003390:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003394:	2b00      	cmp	r3, #0
 8003396:	d116      	bne.n	80033c6 <Start_BTN_Task+0xee>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS <= 1000 ? Current_Status.LCD_BRIGHTNESS + 50 : Current_Status.LCD_BRIGHTNESS;
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <Start_BTN_Task+0x104>)
 800339a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800339e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a2:	d805      	bhi.n	80033b0 <Start_BTN_Task+0xd8>
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <Start_BTN_Task+0x104>)
 80033a6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	e002      	b.n	80033b6 <Start_BTN_Task+0xde>
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <Start_BTN_Task+0x104>)
 80033b2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <Start_BTN_Task+0x104>)
 80033b8:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <Start_BTN_Task+0x104>)
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80033c4:	e003      	b.n	80033ce <Start_BTN_Task+0xf6>
		}else{
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <Start_BTN_Task+0x104>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}


		osDelay(100);
 80033ce:	2064      	movs	r0, #100	; 0x64
 80033d0:	f008 ff5f 	bl	800c292 <osDelay>
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80033d4:	e784      	b.n	80032e0 <Start_BTN_Task+0x8>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	2000a504 	.word	0x2000a504
 80033e0:	40022400 	.word	0x40022400

080033e4 <Start_BARO_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BARO_Task */
void Start_BARO_Task(void *argument)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BARO_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033ec:	2001      	movs	r0, #1
 80033ee:	f008 ff50 	bl	800c292 <osDelay>
 80033f2:	e7fb      	b.n	80033ec <Start_BARO_Task+0x8>

080033f4 <Start_RGB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  if (RGB_ENABLED) {
	  		WS2812_Clear(0);
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fe fadb 	bl	80019b8 <WS2812_Clear>
	  		uint8_t RPMLED = 24;
 8003402:	2318      	movs	r3, #24
 8003404:	77fb      	strb	r3, [r7, #31]

	  		uint16_t lowRange = mapInt(Current_Status.RPM, PROTECTION_RPM_LOW, 0, RPMLED - PROTECTION_RPM_LED, 1);
 8003406:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <Start_RGB_Task+0x1dc>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	3b06      	subs	r3, #6
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80035d4 <Start_RGB_Task+0x1e0>
 800341e:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80035d8 <Start_RGB_Task+0x1e4>
 8003422:	eeb0 0a67 	vmov.f32	s0, s15
 8003426:	f7ff f949 	bl	80026bc <mapInt>
 800342a:	4603      	mov	r3, r0
 800342c:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange > RPMLED - PROTECTION_RPM_LED ? RPMLED - PROTECTION_RPM_LED : lowRange;
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	1f5a      	subs	r2, r3, #5
 8003432:	8bbb      	ldrh	r3, [r7, #28]
 8003434:	429a      	cmp	r2, r3
 8003436:	dc04      	bgt.n	8003442 <Start_RGB_Task+0x4e>
 8003438:	7ffb      	ldrb	r3, [r7, #31]
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b06      	subs	r3, #6
 800343e:	b29b      	uxth	r3, r3
 8003440:	e000      	b.n	8003444 <Start_RGB_Task+0x50>
 8003442:	8bbb      	ldrh	r3, [r7, #28]
 8003444:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange < 1 ? 1 : lowRange;
 8003446:	8bbb      	ldrh	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <Start_RGB_Task+0x5c>
 800344c:	8bbb      	ldrh	r3, [r7, #28]
 800344e:	e000      	b.n	8003452 <Start_RGB_Task+0x5e>
 8003450:	2301      	movs	r3, #1
 8003452:	83bb      	strh	r3, [r7, #28]

	  		for (int i = 1; i <= lowRange ; i++) {
 8003454:	2301      	movs	r3, #1
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e029      	b.n	80034ae <Start_RGB_Task+0xba>
	  			WS2812_RGB_t color;
	  			if(Current_Status.ENGINE_PROTECTION == 1)
 800345a:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <Start_RGB_Task+0x1dc>)
 800345c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <Start_RGB_Task+0x7e>
	  			{
	  				color.red = 255;
 8003464:	23ff      	movs	r3, #255	; 0xff
 8003466:	753b      	strb	r3, [r7, #20]
	  				color.green = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	757b      	strb	r3, [r7, #21]
	  				color.blue = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	75bb      	strb	r3, [r7, #22]
 8003470:	e012      	b.n	8003498 <Start_RGB_Task+0xa4>
	  			} else {
	  				color.red = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 8003472:	2300      	movs	r3, #0
 8003474:	753b      	strb	r3, [r7, #20]
	  				color.green = (int) (255 * Current_Status.LED_BRIGHTNESS / 100);
 8003476:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <Start_RGB_Task+0x1dc>)
 8003478:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800347c:	461a      	mov	r2, r3
 800347e:	4613      	mov	r3, r2
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	4a55      	ldr	r2, [pc, #340]	; (80035dc <Start_RGB_Task+0x1e8>)
 8003486:	fb82 1203 	smull	r1, r2, r2, r3
 800348a:	1152      	asrs	r2, r2, #5
 800348c:	17db      	asrs	r3, r3, #31
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	757b      	strb	r3, [r7, #21]
	  				color.blue = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 8003494:	2300      	movs	r3, #0
 8003496:	75bb      	strb	r3, [r7, #22]
	  			}
	  			WS2812_One_RGB((RPMLED - i) + (LED_NUMBER - RPMLED), color, 0);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 800349e:	2200      	movs	r2, #0
 80034a0:	6979      	ldr	r1, [r7, #20]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe faba 	bl	8001a1c <WS2812_One_RGB>
	  		for (int i = 1; i <= lowRange ; i++) {
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	3301      	adds	r3, #1
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	8bbb      	ldrh	r3, [r7, #28]
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	429a      	cmp	r2, r3
 80034b4:	ddd1      	ble.n	800345a <Start_RGB_Task+0x66>
	  		}

	  		if(Current_Status.RPM > PROTECTION_RPM_LOW)
 80034b6:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <Start_RGB_Task+0x1dc>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f641 1264 	movw	r2, #6500	; 0x1964
 80034be:	4293      	cmp	r3, r2
 80034c0:	d945      	bls.n	800354e <Start_RGB_Task+0x15a>
	  		{
	  			uint16_t highRange = mapInt(Current_Status.RPM, PROTECTION_RPM_HIGH, PROTECTION_RPM_LOW, PROTECTION_RPM_LED, 1);
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <Start_RGB_Task+0x1dc>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	2101      	movs	r1, #1
 80034d0:	2006      	movs	r0, #6
 80034d2:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80035d8 <Start_RGB_Task+0x1e4>
 80034d6:	eddf 0a42 	vldr	s1, [pc, #264]	; 80035e0 <Start_RGB_Task+0x1ec>
 80034da:	eeb0 0a67 	vmov.f32	s0, s15
 80034de:	f7ff f8ed 	bl	80026bc <mapInt>
 80034e2:	4603      	mov	r3, r0
 80034e4:	837b      	strh	r3, [r7, #26]

	  			 Current_Status.GPS_SATTELITES = highRange;
 80034e6:	4a3a      	ldr	r2, [pc, #232]	; (80035d0 <Start_RGB_Task+0x1dc>)
 80034e8:	8b7b      	ldrh	r3, [r7, #26]
 80034ea:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
	  			for (int i = 1; i <= highRange; i++) {
 80034ee:	2301      	movs	r3, #1
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	e028      	b.n	8003546 <Start_RGB_Task+0x152>
	  				WS2812_RGB_t color;
	  				color.red = (int) (255 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <Start_RGB_Task+0x1dc>)
 80034f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d00e      	beq.n	800351c <Start_RGB_Task+0x128>
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <Start_RGB_Task+0x1dc>)
 8003500:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8003504:	461a      	mov	r2, r3
 8003506:	4613      	mov	r3, r2
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	4a33      	ldr	r2, [pc, #204]	; (80035dc <Start_RGB_Task+0x1e8>)
 800350e:	fb82 1203 	smull	r1, r2, r2, r3
 8003512:	1152      	asrs	r2, r2, #5
 8003514:	17db      	asrs	r3, r3, #31
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e000      	b.n	800351e <Start_RGB_Task+0x12a>
 800351c:	23ff      	movs	r3, #255	; 0xff
 800351e:	743b      	strb	r3, [r7, #16]
	  				color.green = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 8003520:	2300      	movs	r3, #0
 8003522:	747b      	strb	r3, [r7, #17]
	  				color.blue = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 8003524:	2300      	movs	r3, #0
 8003526:	74bb      	strb	r3, [r7, #18]

	  				WS2812_One_RGB((PROTECTION_RPM_LED - i) + (LED_NUMBER - RPMLED), color, 0);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f1c3 0206 	rsb	r2, r3, #6
 800352e:	7ffb      	ldrb	r3, [r7, #31]
 8003530:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 8003534:	4413      	add	r3, r2
 8003536:	2200      	movs	r2, #0
 8003538:	6939      	ldr	r1, [r7, #16]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fa6e 	bl	8001a1c <WS2812_One_RGB>
	  			for (int i = 1; i <= highRange; i++) {
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	3301      	adds	r3, #1
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	8b7b      	ldrh	r3, [r7, #26]
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	429a      	cmp	r2, r3
 800354c:	ddd2      	ble.n	80034f4 <Start_RGB_Task+0x100>
	  //		WS2812_One_RGB(4, (WS2812_RGB_t){(255 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  //		WS2812_One_RGB(5, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
	  //
	  //		WS2812_One_RGB(18, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //red
	  //		WS2812_One_RGB(20, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  		if(Current_Status.IND_LEFT)
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <Start_RGB_Task+0x1dc>)
 8003550:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003554:	2b00      	cmp	r3, #0
 8003556:	d017      	beq.n	8003588 <Start_RGB_Task+0x194>
	  		{
	  			WS2812_One_RGB(21, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003558:	2300      	movs	r3, #0
 800355a:	733b      	strb	r3, [r7, #12]
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <Start_RGB_Task+0x1dc>)
 800355e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8003562:	461a      	mov	r2, r3
 8003564:	4613      	mov	r3, r2
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <Start_RGB_Task+0x1e8>)
 800356c:	fb82 1203 	smull	r1, r2, r2, r3
 8003570:	1152      	asrs	r2, r2, #5
 8003572:	17db      	asrs	r3, r3, #31
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	737b      	strb	r3, [r7, #13]
 800357a:	2300      	movs	r3, #0
 800357c:	73bb      	strb	r3, [r7, #14]
 800357e:	2200      	movs	r2, #0
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	2015      	movs	r0, #21
 8003584:	f7fe fa4a 	bl	8001a1c <WS2812_One_RGB>
	  		}
	  		if(Current_Status.IND_RIGHT)
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <Start_RGB_Task+0x1dc>)
 800358a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d017      	beq.n	80035c2 <Start_RGB_Task+0x1ce>
			{
				WS2812_One_RGB(0, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003592:	2300      	movs	r3, #0
 8003594:	723b      	strb	r3, [r7, #8]
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <Start_RGB_Task+0x1dc>)
 8003598:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800359c:	461a      	mov	r2, r3
 800359e:	4613      	mov	r3, r2
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <Start_RGB_Task+0x1e8>)
 80035a6:	fb82 1203 	smull	r1, r2, r2, r3
 80035aa:	1152      	asrs	r2, r2, #5
 80035ac:	17db      	asrs	r3, r3, #31
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	727b      	strb	r3, [r7, #9]
 80035b4:	2300      	movs	r3, #0
 80035b6:	72bb      	strb	r3, [r7, #10]
 80035b8:	2200      	movs	r2, #0
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fe fa2d 	bl	8001a1c <WS2812_One_RGB>
			}

	  		WS2812_Refresh();
 80035c2:	f7fe f9e9 	bl	8001998 <WS2812_Refresh>
	  		osDelay(84);
 80035c6:	2054      	movs	r0, #84	; 0x54
 80035c8:	f008 fe63 	bl	800c292 <osDelay>
	  if (RGB_ENABLED) {
 80035cc:	e716      	b.n	80033fc <Start_RGB_Task+0x8>
 80035ce:	bf00      	nop
 80035d0:	2000a504 	.word	0x2000a504
 80035d4:	00000000 	.word	0x00000000
 80035d8:	45cb2000 	.word	0x45cb2000
 80035dc:	51eb851f 	.word	0x51eb851f
 80035e0:	45f3c000 	.word	0x45f3c000

080035e4 <Start_BH1750_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BH1750_Task */
void Start_BH1750_Task(void *argument)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BH1750_Task */
	uint8_t changInProgress = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
	  				changInProgress = 0;
	  			}
	  			//Current_Status.RPM = Current_Status.BH1750_LUX;
	  			osDelay(200);
	  		} else {
	  			osDelay(60000);
 80035f0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80035f4:	f008 fe4d 	bl	800c292 <osDelay>
	  if (BH1750_ENABLED) {
 80035f8:	e7fa      	b.n	80035f0 <Start_BH1750_Task+0xc>

080035fa <Start_LPS22_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LPS22_Task */
void Start_LPS22_Task(void *argument)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LPS22_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003602:	2001      	movs	r0, #1
 8003604:	f008 fe45 	bl	800c292 <osDelay>
 8003608:	e7fb      	b.n	8003602 <Start_LPS22_Task+0x8>
	...

0800360c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800361e:	f000 feeb 	bl	80043f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40001000 	.word	0x40001000

08003630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003634:	b672      	cpsid	i
}
 8003636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003638:	e7fe      	b.n	8003638 <Error_Handler+0x8>
	...

0800363c <SDRAM_delay>:

SDRAM_HandleTypeDef hsdram1;
FMC_SDRAM_CommandTypeDef command;

void SDRAM_delay(__IO uint32_t nCount)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
	
  for(index = (100000 * nCount); index != 0; index--);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <SDRAM_delay+0x34>)
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e002      	b.n	800365a <SDRAM_delay+0x1e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3b01      	subs	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f9      	bne.n	8003654 <SDRAM_delay+0x18>

}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	000186a0 	.word	0x000186a0

08003674 <SDRAM_Initialization_Sequence>:


void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
  
  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ�� 
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2208      	movs	r2, #8
 800368c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800369a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f006 f812 	bl	80096ca <HAL_SDRAM_SendCommand>
  SDRAM_delay(1);		// ��ʱ�ȴ�
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7ff ffc8 	bl	800363c <SDRAM_delay>
  
  /* Configure a PALL (precharge all) command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2202      	movs	r2, #2
 80036b0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 80036c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f005 fffd 	bl	80096ca <HAL_SDRAM_SendCommand>
  
  /* Configure a Auto-Refresh command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2203      	movs	r2, #3
 80036d4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2208      	movs	r2, #8
 80036da:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2208      	movs	r2, #8
 80036e0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80036e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f005 ffeb 	bl	80096ca <HAL_SDRAM_SendCommand>
  
  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80036f4:	f240 2331 	movw	r3, #561	; 0x231
 80036f8:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2204      	movs	r2, #4
 80036fe:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2201      	movs	r2, #1
 800370a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 8003712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003716:	6839      	ldr	r1, [r7, #0]
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f005 ffd6 	bl	80096ca <HAL_SDRAM_SendCommand>
  
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼����� 
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6153      	str	r3, [r2, #20]
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_MspInit+0x54>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_MspInit+0x54>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003750:	6453      	str	r3, [r2, #68]	; 0x44
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_MspInit+0x54>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_MspInit+0x54>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <HAL_MspInit+0x54>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <HAL_MspInit+0x54>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	210f      	movs	r1, #15
 800377e:	f06f 0001 	mvn.w	r0, #1
 8003782:	f001 fca1 	bl	80050c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	; 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	f107 031c 	add.w	r3, r7, #28
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_CAN_MspInit+0x14c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d13e      	bne.n	8003834 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80037b6:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_CAN_MspInit+0x150>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a49      	ldr	r2, [pc, #292]	; (80038e4 <HAL_CAN_MspInit+0x150>)
 80037be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_CAN_MspInit+0x150>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10d      	bne.n	80037e4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 80037d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d6:	6413      	str	r3, [r2, #64]	; 0x40
 80037d8:	4b43      	ldr	r3, [pc, #268]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4a3e      	ldr	r2, [pc, #248]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 80037ee:	f043 0302 	orr.w	r3, r3, #2
 80037f2:	6313      	str	r3, [r2, #48]	; 0x30
 80037f4:	4b3c      	ldr	r3, [pc, #240]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380e:	2303      	movs	r3, #3
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003812:	2309      	movs	r3, #9
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003816:	f107 031c 	add.w	r3, r7, #28
 800381a:	4619      	mov	r1, r3
 800381c:	4833      	ldr	r0, [pc, #204]	; (80038ec <HAL_CAN_MspInit+0x158>)
 800381e:	f002 fa01 	bl	8005c24 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2105      	movs	r1, #5
 8003826:	2014      	movs	r0, #20
 8003828:	f001 fc4e 	bl	80050c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800382c:	2014      	movs	r0, #20
 800382e:	f001 fc67 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003832:	e050      	b.n	80038d6 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_CAN_MspInit+0x15c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d14b      	bne.n	80038d6 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 8003848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_CAN_MspInit+0x150>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <HAL_CAN_MspInit+0x150>)
 8003862:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003864:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_CAN_MspInit+0x150>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d10d      	bne.n	8003888 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 8003876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800387a:	6413      	str	r3, [r2, #64]	; 0x40
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	6313      	str	r3, [r2, #48]	; 0x30
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_CAN_MspInit+0x154>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80038a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b2:	2303      	movs	r3, #3
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80038b6:	2309      	movs	r3, #9
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	4619      	mov	r1, r3
 80038c0:	480a      	ldr	r0, [pc, #40]	; (80038ec <HAL_CAN_MspInit+0x158>)
 80038c2:	f002 f9af 	bl	8005c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2105      	movs	r1, #5
 80038ca:	2040      	movs	r0, #64	; 0x40
 80038cc:	f001 fbfc 	bl	80050c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80038d0:	2040      	movs	r0, #64	; 0x40
 80038d2:	f001 fc15 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3730      	adds	r7, #48	; 0x30
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40006400 	.word	0x40006400
 80038e4:	2000011c 	.word	0x2000011c
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40006800 	.word	0x40006800

080038f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_CRC_MspInit+0x3c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10d      	bne.n	8003922 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_CRC_MspInit+0x40>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_CRC_MspInit+0x40>)
 8003910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_CRC_MspInit+0x40>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023000 	.word	0x40023000
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_DMA2D_MspInit+0x48>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d115      	bne.n	8003976 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <HAL_DMA2D_MspInit+0x4c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <HAL_DMA2D_MspInit+0x4c>)
 8003954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_DMA2D_MspInit+0x4c>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003966:	2200      	movs	r2, #0
 8003968:	2105      	movs	r1, #5
 800396a:	205a      	movs	r0, #90	; 0x5a
 800396c:	f001 fbac 	bl	80050c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003970:	205a      	movs	r0, #90	; 0x5a
 8003972:	f001 fbc5 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	4002b000 	.word	0x4002b000
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <HAL_I2C_MspInit+0x84>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d12b      	bne.n	8003a02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_I2C_MspInit+0x88>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <HAL_I2C_MspInit+0x88>)
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_I2C_MspInit+0x88>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039c6:	2330      	movs	r3, #48	; 0x30
 80039c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ca:	2312      	movs	r3, #18
 80039cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039d6:	2304      	movs	r3, #4
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	4619      	mov	r1, r3
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <HAL_I2C_MspInit+0x8c>)
 80039e2:	f002 f91f 	bl	8005c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_I2C_MspInit+0x88>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_I2C_MspInit+0x88>)
 80039f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_I2C_MspInit+0x88>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	; 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40005800 	.word	0x40005800
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40021c00 	.word	0x40021c00

08003a18 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b09a      	sub	sp, #104	; 0x68
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	2230      	movs	r2, #48	; 0x30
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f02a fbff 	bl	802e23c <memset>
  if(hltdc->Instance==LTDC)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a65      	ldr	r2, [pc, #404]	; (8003bd8 <HAL_LTDC_MspInit+0x1c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	f040 80c2 	bne.w	8003bce <HAL_LTDC_MspInit+0x1b6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 80;
 8003a4e:	2350      	movs	r3, #80	; 0x50
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003a52:	2302      	movs	r3, #2
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003a56:	2300      	movs	r3, #0
 8003a58:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f004 fb88 	bl	8008174 <HAL_RCCEx_PeriphCLKConfig>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003a6a:	f7ff fde1 	bl	8003630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	4a59      	ldr	r2, [pc, #356]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b57      	ldr	r3, [pc, #348]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a4b      	ldr	r2, [pc, #300]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003ab0:	f043 0320 	orr.w	r3, r3, #32
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a44      	ldr	r2, [pc, #272]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a3d      	ldr	r2, [pc, #244]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a36      	ldr	r2, [pc, #216]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <HAL_LTDC_MspInit+0x1c4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003b16:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8003b1a:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b20:	2301      	movs	r3, #1
 8003b22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b24:	2303      	movs	r3, #3
 8003b26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b28:	230e      	movs	r3, #14
 8003b2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b30:	4619      	mov	r1, r3
 8003b32:	482b      	ldr	r0, [pc, #172]	; (8003be0 <HAL_LTDC_MspInit+0x1c8>)
 8003b34:	f002 f876 	bl	8005c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b42:	2301      	movs	r3, #1
 8003b44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b46:	2303      	movs	r3, #3
 8003b48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b52:	4619      	mov	r1, r3
 8003b54:	4823      	ldr	r0, [pc, #140]	; (8003be4 <HAL_LTDC_MspInit+0x1cc>)
 8003b56:	f002 f865 	bl	8005c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b62:	2301      	movs	r3, #1
 8003b64:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b66:	2303      	movs	r3, #3
 8003b68:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b6a:	2309      	movs	r3, #9
 8003b6c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b72:	4619      	mov	r1, r3
 8003b74:	481c      	ldr	r0, [pc, #112]	; (8003be8 <HAL_LTDC_MspInit+0x1d0>)
 8003b76:	f002 f855 	bl	8005c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8003b7a:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8003b7e:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b84:	2301      	movs	r3, #1
 8003b86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b8c:	230e      	movs	r3, #14
 8003b8e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b94:	4619      	mov	r1, r3
 8003b96:	4815      	ldr	r0, [pc, #84]	; (8003bec <HAL_LTDC_MspInit+0x1d4>)
 8003b98:	f002 f844 	bl	8005c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003b9c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003ba0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	2303      	movs	r3, #3
 8003bac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bae:	230e      	movs	r3, #14
 8003bb0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <HAL_LTDC_MspInit+0x1d8>)
 8003bba:	f002 f833 	bl	8005c24 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2105      	movs	r1, #5
 8003bc2:	2058      	movs	r0, #88	; 0x58
 8003bc4:	f001 fa80 	bl	80050c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003bc8:	2058      	movs	r0, #88	; 0x58
 8003bca:	f001 fa99 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3768      	adds	r7, #104	; 0x68
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40016800 	.word	0x40016800
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40022000 	.word	0x40022000
 8003be4:	40021400 	.word	0x40021400
 8003be8:	40020400 	.word	0x40020400
 8003bec:	40021c00 	.word	0x40021c00
 8003bf0:	40021800 	.word	0x40021800

08003bf4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <HAL_SD_MspInit+0xc0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d14a      	bne.n	8003cac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c24:	6453      	str	r3, [r2, #68]	; 0x44
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <HAL_SD_MspInit+0xc4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003c6a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c74:	2301      	movs	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4619      	mov	r1, r3
 8003c86:	480d      	ldr	r0, [pc, #52]	; (8003cbc <HAL_SD_MspInit+0xc8>)
 8003c88:	f001 ffcc 	bl	8005c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4806      	ldr	r0, [pc, #24]	; (8003cc0 <HAL_SD_MspInit+0xcc>)
 8003ca8:	f001 ffbc 	bl	8005c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003cac:	bf00      	nop
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	40020c00 	.word	0x40020c00

08003cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2c      	ldr	r2, [pc, #176]	; (8003d84 <HAL_TIM_Base_MspInit+0xc0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d13f      	bne.n	8003d56 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_TIM_Base_MspInit+0xc4>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <HAL_TIM_Base_MspInit+0xc4>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce6:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <HAL_TIM_Base_MspInit+0xc4>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003cf2:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_TIM_Base_MspInit+0xcc>)
 8003cf6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003cfa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003cfe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d00:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d12:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d1a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d22:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d2a:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d30:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d32:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003d38:	4814      	ldr	r0, [pc, #80]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d3a:	f001 fa0b 	bl	8005154 <HAL_DMA_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003d44:	f7ff fc74 	bl	8003630 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003d4e:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <HAL_TIM_Base_MspInit+0xc8>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003d54:	e012      	b.n	8003d7c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM13)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a0e      	ldr	r2, [pc, #56]	; (8003d94 <HAL_TIM_Base_MspInit+0xd0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10d      	bne.n	8003d7c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_TIM_Base_MspInit+0xc4>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_TIM_Base_MspInit+0xc4>)
 8003d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_TIM_Base_MspInit+0xc4>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	20009a64 	.word	0x20009a64
 8003d90:	40026428 	.word	0x40026428
 8003d94:	40001c00 	.word	0x40001c00

08003d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10d      	bne.n	8003dc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a37      	ldr	r2, [pc, #220]	; (8003ed8 <HAL_TIM_MspPostInit+0xfc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d11f      	bne.n	8003e3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a35      	ldr	r2, [pc, #212]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e20:	2302      	movs	r3, #2
 8003e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e24:	2302      	movs	r3, #2
 8003e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	4619      	mov	r1, r3
 8003e36:	482a      	ldr	r0, [pc, #168]	; (8003ee0 <HAL_TIM_MspPostInit+0x104>)
 8003e38:	f001 fef4 	bl	8005c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003e3c:	e047      	b.n	8003ece <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a28      	ldr	r2, [pc, #160]	; (8003ee4 <HAL_TIM_MspPostInit+0x108>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d11e      	bne.n	8003e86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e52:	f043 0310 	orr.w	r3, r3, #16
 8003e56:	6313      	str	r3, [r2, #48]	; 0x30
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e64:	2360      	movs	r3, #96	; 0x60
 8003e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e74:	2303      	movs	r3, #3
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	481a      	ldr	r0, [pc, #104]	; (8003ee8 <HAL_TIM_MspPostInit+0x10c>)
 8003e80:	f001 fed0 	bl	8005c24 <HAL_GPIO_Init>
}
 8003e84:	e023      	b.n	8003ece <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM13)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_TIM_MspPostInit+0x110>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d11e      	bne.n	8003ece <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003e9a:	f043 0320 	orr.w	r3, r3, #32
 8003e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_TIM_MspPostInit+0x100>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003ebe:	2309      	movs	r3, #9
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <HAL_TIM_MspPostInit+0x114>)
 8003eca:	f001 feab 	bl	8005c24 <HAL_GPIO_Init>
}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40001c00 	.word	0x40001c00
 8003ef0:	40021400 	.word	0x40021400

08003ef4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003f08:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <HAL_FMC_MspInit+0x114>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d177      	bne.n	8004000 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8003f10:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_FMC_MspInit+0x114>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	; (800400c <HAL_FMC_MspInit+0x118>)
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	4a3b      	ldr	r2, [pc, #236]	; (800400c <HAL_FMC_MspInit+0x118>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6393      	str	r3, [r2, #56]	; 0x38
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_FMC_MspInit+0x118>)
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003f32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f40:	2303      	movs	r3, #3
 8003f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f44:	230c      	movs	r3, #12
 8003f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4830      	ldr	r0, [pc, #192]	; (8004010 <HAL_FMC_MspInit+0x11c>)
 8003f4e:	f001 fe69 	bl	8005c24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f52:	2301      	movs	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f62:	230c      	movs	r3, #12
 8003f64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	482a      	ldr	r0, [pc, #168]	; (8004014 <HAL_FMC_MspInit+0x120>)
 8003f6c:	f001 fe5a 	bl	8005c24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003f70:	f248 1337 	movw	r3, #33079	; 0x8137
 8003f74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f82:	230c      	movs	r3, #12
 8003f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4823      	ldr	r0, [pc, #140]	; (8004018 <HAL_FMC_MspInit+0x124>)
 8003f8c:	f001 fe4a 	bl	8005c24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003f90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f94:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f96:	2302      	movs	r3, #2
 8003f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	481c      	ldr	r0, [pc, #112]	; (800401c <HAL_FMC_MspInit+0x128>)
 8003fac:	f001 fe3a 	bl	8005c24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fb0:	23c0      	movs	r3, #192	; 0xc0
 8003fb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4815      	ldr	r0, [pc, #84]	; (8004020 <HAL_FMC_MspInit+0x12c>)
 8003fca:	f001 fe2b 	bl	8005c24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003fce:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003fd2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	480e      	ldr	r0, [pc, #56]	; (8004024 <HAL_FMC_MspInit+0x130>)
 8003fea:	f001 fe1b 	bl	8005c24 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2105      	movs	r1, #5
 8003ff2:	2030      	movs	r0, #48	; 0x30
 8003ff4:	f001 f868 	bl	80050c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8003ff8:	2030      	movs	r0, #48	; 0x30
 8003ffa:	f001 f881 	bl	8005100 <HAL_NVIC_EnableIRQ>
 8003ffe:	e000      	b.n	8004002 <HAL_FMC_MspInit+0x10e>
    return;
 8004000:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000120 	.word	0x20000120
 800400c:	40023800 	.word	0x40023800
 8004010:	40021400 	.word	0x40021400
 8004014:	40020800 	.word	0x40020800
 8004018:	40021800 	.word	0x40021800
 800401c:	40021000 	.word	0x40021000
 8004020:	40021c00 	.word	0x40021c00
 8004024:	40020c00 	.word	0x40020c00

08004028 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004030:	f7ff ff60 	bl	8003ef4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800404c:	2200      	movs	r2, #0
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	2036      	movs	r0, #54	; 0x36
 8004052:	f001 f839 	bl	80050c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004056:	2036      	movs	r0, #54	; 0x36
 8004058:	f001 f852 	bl	8005100 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <HAL_InitTick+0xa4>)
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_InitTick+0xa4>)
 8004066:	f043 0310 	orr.w	r3, r3, #16
 800406a:	6413      	str	r3, [r2, #64]	; 0x40
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_InitTick+0xa4>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004078:	f107 0210 	add.w	r2, r7, #16
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f004 f828 	bl	80080d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004088:	f004 f812 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800408c:	4603      	mov	r3, r0
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_InitTick+0xa8>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0c9b      	lsrs	r3, r3, #18
 800409c:	3b01      	subs	r3, #1
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_InitTick+0xac>)
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_InitTick+0xb0>)
 80040a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_InitTick+0xac>)
 80040a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_InitTick+0xac>)
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_InitTick+0xac>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_InitTick+0xac>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80040c0:	4809      	ldr	r0, [pc, #36]	; (80040e8 <HAL_InitTick+0xac>)
 80040c2:	f005 fb2d 	bl	8009720 <HAL_TIM_Base_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d104      	bne.n	80040d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80040cc:	4806      	ldr	r0, [pc, #24]	; (80040e8 <HAL_InitTick+0xac>)
 80040ce:	f005 fb77 	bl	80097c0 <HAL_TIM_Base_Start_IT>
 80040d2:	4603      	mov	r3, r0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3730      	adds	r7, #48	; 0x30
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	431bde83 	.word	0x431bde83
 80040e8:	2000b124 	.word	0x2000b124
 80040ec:	40001000 	.word	0x40001000

080040f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80040f4:	f004 f822 	bl	800813c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040f8:	e7fe      	b.n	80040f8 <NMI_Handler+0x8>

080040fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040fe:	e7fe      	b.n	80040fe <HardFault_Handler+0x4>

08004100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004104:	e7fe      	b.n	8004104 <MemManage_Handler+0x4>

08004106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800410a:	e7fe      	b.n	800410a <BusFault_Handler+0x4>

0800410c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <UsageFault_Handler+0x4>

08004112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004124:	4802      	ldr	r0, [pc, #8]	; (8004130 <CAN1_RX0_IRQHandler+0x10>)
 8004126:	f000 fcdd 	bl	8004ae4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000b088 	.word	0x2000b088

08004134 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8004138:	4802      	ldr	r0, [pc, #8]	; (8004144 <FMC_IRQHandler+0x10>)
 800413a:	f005 faa2 	bl	8009682 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2000b0c8 	.word	0x2000b0c8

08004148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800414c:	4802      	ldr	r0, [pc, #8]	; (8004158 <TIM6_DAC_IRQHandler+0x10>)
 800414e:	f005 fe87 	bl	8009e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000b124 	.word	0x2000b124

0800415c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	DMA_Callback();
 8004160:	f7fc fee4 	bl	8000f2c <DMA_Callback>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <DMA2_Stream1_IRQHandler+0x14>)
 8004166:	f001 f8fb 	bl	8005360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20009a64 	.word	0x20009a64

08004174 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <CAN2_RX0_IRQHandler+0x10>)
 800417a:	f000 fcb3 	bl	8004ae4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	2000a66c 	.word	0x2000a66c

08004188 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <LTDC_IRQHandler+0x10>)
 800418e:	f003 f821 	bl	80071d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000a5c4 	.word	0x2000a5c4

0800419c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <DMA2D_IRQHandler+0x10>)
 80041a2:	f001 fb9c 	bl	80058de <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	2000b040 	.word	0x2000b040

080041b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
	return 1;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_kill>:

int _kill(int pid, int sig)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041ca:	f029 fee3 	bl	802df94 <__errno>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2216      	movs	r2, #22
 80041d2:	601a      	str	r2, [r3, #0]
	return -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_exit>:

void _exit (int status)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041e8:	f04f 31ff 	mov.w	r1, #4294967295
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ffe7 	bl	80041c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041f2:	e7fe      	b.n	80041f2 <_exit+0x12>

080041f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e00a      	b.n	800421c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004206:	f3af 8000 	nop.w
 800420a:	4601      	mov	r1, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	60ba      	str	r2, [r7, #8]
 8004212:	b2ca      	uxtb	r2, r1
 8004214:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	dbf0      	blt.n	8004206 <_read+0x12>
	}

return len;
 8004224:	687b      	ldr	r3, [r7, #4]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e009      	b.n	8004254 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	60ba      	str	r2, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	3301      	adds	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	dbf1      	blt.n	8004240 <_write+0x12>
	}
	return len;
 800425c:	687b      	ldr	r3, [r7, #4]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <_close>:

int _close(int file)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
	return -1;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800428e:	605a      	str	r2, [r3, #4]
	return 0;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <_isatty>:

int _isatty(int file)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
	return 1;
 80042a6:	2301      	movs	r3, #1
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
	return 0;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <_sbrk+0x5c>)
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <_sbrk+0x60>)
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <_sbrk+0x64>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <_sbrk+0x64>)
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <_sbrk+0x68>)
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <_sbrk+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d207      	bcs.n	8004310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004300:	f029 fe48 	bl	802df94 <__errno>
 8004304:	4603      	mov	r3, r0
 8004306:	220c      	movs	r2, #12
 8004308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
 800430e:	e009      	b.n	8004324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <_sbrk+0x64>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <_sbrk+0x64>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <_sbrk+0x64>)
 8004320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20030000 	.word	0x20030000
 8004330:	00000800 	.word	0x00000800
 8004334:	20000124 	.word	0x20000124
 8004338:	2000b630 	.word	0x2000b630

0800433c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <SystemInit+0x20>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	4a05      	ldr	r2, [pc, #20]	; (800435c <SystemInit+0x20>)
 8004348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800434c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004398 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004364:	480d      	ldr	r0, [pc, #52]	; (800439c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004366:	490e      	ldr	r1, [pc, #56]	; (80043a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800436a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800436c:	e002      	b.n	8004374 <LoopCopyDataInit>

0800436e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004372:	3304      	adds	r3, #4

08004374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004378:	d3f9      	bcc.n	800436e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800437c:	4c0b      	ldr	r4, [pc, #44]	; (80043ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004380:	e001      	b.n	8004386 <LoopFillZerobss>

08004382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004384:	3204      	adds	r2, #4

08004386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004388:	d3fb      	bcc.n	8004382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800438a:	f7ff ffd7 	bl	800433c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800438e:	f029 ff0f 	bl	802e1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004392:	f7fd fb65 	bl	8001a60 <main>
  bx  lr    
 8004396:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004398:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800439c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80043a4:	080f1c90 	.word	0x080f1c90
  ldr r2, =_sbss
 80043a8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80043ac:	2000b62c 	.word	0x2000b62c

080043b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b0:	e7fe      	b.n	80043b0 <ADC_IRQHandler>
	...

080043b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_Init+0x40>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <HAL_Init+0x40>)
 80043be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <HAL_Init+0x40>)
 80043ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <HAL_Init+0x40>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043dc:	2003      	movs	r0, #3
 80043de:	f000 fe68 	bl	80050b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043e2:	200f      	movs	r0, #15
 80043e4:	f7ff fe2a 	bl	800403c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e8:	f7ff f9a8 	bl	800373c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023c00 	.word	0x40023c00

080043f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_IncTick+0x20>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_IncTick+0x24>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4413      	add	r3, r2
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <HAL_IncTick+0x24>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000010 	.word	0x20000010
 800441c:	2000b16c 	.word	0x2000b16c

08004420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return uwTick;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_GetTick+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000b16c 	.word	0x2000b16c

08004438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004440:	f7ff ffee 	bl	8004420 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d005      	beq.n	800445e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_Delay+0x44>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800445e:	bf00      	nop
 8004460:	f7ff ffde 	bl	8004420 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	429a      	cmp	r2, r3
 800446e:	d8f7      	bhi.n	8004460 <HAL_Delay+0x28>
  {
  }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000010 	.word	0x20000010

08004480 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0ed      	b.n	800466e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff f978 	bl	8003794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b4:	f7ff ffb4 	bl	8004420 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044ba:	e012      	b.n	80044e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044bc:	f7ff ffb0 	bl	8004420 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d90b      	bls.n	80044e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2205      	movs	r2, #5
 80044da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0c5      	b.n	800466e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0e5      	beq.n	80044bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0202 	bic.w	r2, r2, #2
 80044fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004500:	f7ff ff8e 	bl	8004420 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004506:	e012      	b.n	800452e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004508:	f7ff ff8a 	bl	8004420 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b0a      	cmp	r3, #10
 8004514:	d90b      	bls.n	800452e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2205      	movs	r2, #5
 8004526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e09f      	b.n	800466e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7e1b      	ldrb	r3, [r3, #24]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d108      	bne.n	8004556 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e007      	b.n	8004566 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7e5b      	ldrb	r3, [r3, #25]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d108      	bne.n	8004580 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e007      	b.n	8004590 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7e9b      	ldrb	r3, [r3, #26]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d108      	bne.n	80045aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0220 	orr.w	r2, r2, #32
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e007      	b.n	80045ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0220 	bic.w	r2, r2, #32
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7edb      	ldrb	r3, [r3, #27]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d108      	bne.n	80045d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0210 	bic.w	r2, r2, #16
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e007      	b.n	80045e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0210 	orr.w	r2, r2, #16
 80045e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7f1b      	ldrb	r3, [r3, #28]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d108      	bne.n	80045fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e007      	b.n	800460e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0208 	bic.w	r2, r2, #8
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7f5b      	ldrb	r3, [r3, #29]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0204 	orr.w	r2, r2, #4
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e007      	b.n	8004638 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0204 	bic.w	r2, r2, #4
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	ea42 0103 	orr.w	r1, r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	1e5a      	subs	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800468e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d003      	beq.n	800469e <HAL_CAN_ConfigFilter+0x26>
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f040 80be 	bne.w	800481a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800469e:	4b65      	ldr	r3, [pc, #404]	; (8004834 <HAL_CAN_ConfigFilter+0x1bc>)
 80046a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046a8:	f043 0201 	orr.w	r2, r3, #1
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	431a      	orrs	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2201      	movs	r2, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	401a      	ands	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d123      	bne.n	8004748 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004722:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3248      	adds	r2, #72	; 0x48
 8004728:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800473c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	3348      	adds	r3, #72	; 0x48
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d122      	bne.n	8004796 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	431a      	orrs	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004770:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3248      	adds	r2, #72	; 0x48
 8004776:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800478a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	3348      	adds	r3, #72	; 0x48
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	401a      	ands	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80047b0:	e007      	b.n	80047c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	401a      	ands	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80047dc:	e007      	b.n	80047ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	431a      	orrs	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800480c:	f023 0201 	bic.w	r2, r3, #1
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e006      	b.n	8004828 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40006400 	.word	0x40006400

08004838 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d12e      	bne.n	80048aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004864:	f7ff fddc 	bl	8004420 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800486a:	e012      	b.n	8004892 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800486c:	f7ff fdd8 	bl	8004420 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b0a      	cmp	r3, #10
 8004878:	d90b      	bls.n	8004892 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2205      	movs	r2, #5
 800488a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e012      	b.n	80048b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e5      	bne.n	800486c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e006      	b.n	80048b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d003      	beq.n	80048e4 <HAL_CAN_GetRxMessage+0x24>
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	f040 80f3 	bne.w	8004aca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10e      	bne.n	8004908 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0e7      	b.n	8004ad8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0d8      	b.n	8004ad8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	331b      	adds	r3, #27
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4413      	add	r3, r2
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0204 	and.w	r2, r3, #4
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	331b      	adds	r3, #27
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4413      	add	r3, r2
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	0d5b      	lsrs	r3, r3, #21
 8004954:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e00b      	b.n	8004976 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	331b      	adds	r3, #27
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4413      	add	r3, r2
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	08db      	lsrs	r3, r3, #3
 800496e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	331b      	adds	r3, #27
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4413      	add	r3, r2
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0202 	and.w	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	331b      	adds	r3, #27
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	331b      	adds	r3, #27
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	331b      	adds	r3, #27
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	4413      	add	r3, r2
 80049c8:	3304      	adds	r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	0a1a      	lsrs	r2, r3, #8
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0c1a      	lsrs	r2, r3, #16
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3302      	adds	r3, #2
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0e1a      	lsrs	r2, r3, #24
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	3303      	adds	r3, #3
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0a1a      	lsrs	r2, r3, #8
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	3305      	adds	r3, #5
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0c1a      	lsrs	r2, r3, #16
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	3306      	adds	r3, #6
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0e1a      	lsrs	r2, r3, #24
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	3307      	adds	r3, #7
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0220 	orr.w	r2, r2, #32
 8004ab2:	60da      	str	r2, [r3, #12]
 8004ab4:	e007      	b.n	8004ac6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0220 	orr.w	r2, r2, #32
 8004ac4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e006      	b.n	8004ad8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07c      	beq.n	8004c24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d023      	beq.n	8004b7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f983 	bl	8004e52 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b4c:	e016      	b.n	8004b7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	e00c      	b.n	8004b7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
 8004b74:	e002      	b.n	8004b7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f989 	bl	8004e8e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d024      	beq.n	8004bd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f963 	bl	8004e66 <HAL_CAN_TxMailbox1CompleteCallback>
 8004ba0:	e016      	b.n	8004bd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e00c      	b.n	8004bd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc8:	e002      	b.n	8004bd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f969 	bl	8004ea2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d024      	beq.n	8004c24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004be2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f943 	bl	8004e7a <HAL_CAN_TxMailbox2CompleteCallback>
 8004bf4:	e016      	b.n	8004c24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
 8004c08:	e00c      	b.n	8004c24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	e002      	b.n	8004c24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f949 	bl	8004eb6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2210      	movs	r2, #16
 8004c46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2208      	movs	r2, #8
 8004c62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f93a 	bl	8004ede <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f921 	bl	8004eca <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2210      	movs	r2, #16
 8004caa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f91c 	bl	8004f06 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f903 	bl	8004ef2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2210      	movs	r2, #16
 8004d06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f906 	bl	8004f1a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2208      	movs	r2, #8
 8004d28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8ff 	bl	8004f2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d07b      	beq.n	8004e32 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d072      	beq.n	8004e2a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	f043 0302 	orr.w	r3, r3, #2
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	f043 0304 	orr.w	r3, r3, #4
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d043      	beq.n	8004e2a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d03e      	beq.n	8004e2a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db2:	2b60      	cmp	r3, #96	; 0x60
 8004db4:	d02b      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x32a>
 8004db6:	2b60      	cmp	r3, #96	; 0x60
 8004db8:	d82e      	bhi.n	8004e18 <HAL_CAN_IRQHandler+0x334>
 8004dba:	2b50      	cmp	r3, #80	; 0x50
 8004dbc:	d022      	beq.n	8004e04 <HAL_CAN_IRQHandler+0x320>
 8004dbe:	2b50      	cmp	r3, #80	; 0x50
 8004dc0:	d82a      	bhi.n	8004e18 <HAL_CAN_IRQHandler+0x334>
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d019      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x316>
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d826      	bhi.n	8004e18 <HAL_CAN_IRQHandler+0x334>
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d010      	beq.n	8004df0 <HAL_CAN_IRQHandler+0x30c>
 8004dce:	2b30      	cmp	r3, #48	; 0x30
 8004dd0:	d822      	bhi.n	8004e18 <HAL_CAN_IRQHandler+0x334>
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d002      	beq.n	8004ddc <HAL_CAN_IRQHandler+0x2f8>
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d005      	beq.n	8004de6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004dda:	e01d      	b.n	8004e18 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f043 0308 	orr.w	r3, r3, #8
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de4:	e019      	b.n	8004e1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	f043 0310 	orr.w	r3, r3, #16
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dee:	e014      	b.n	8004e1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	f043 0320 	orr.w	r3, r3, #32
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df8:	e00f      	b.n	8004e1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e02:	e00a      	b.n	8004e1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e0c:	e005      	b.n	8004e1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e16:	e000      	b.n	8004e1a <HAL_CAN_IRQHandler+0x336>
            break;
 8004e18:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e28:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f87c 	bl	8004f42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	3728      	adds	r7, #40	; 0x28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <__NVIC_SetPriorityGrouping+0x44>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f74:	4013      	ands	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <__NVIC_SetPriorityGrouping+0x44>)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	60d3      	str	r3, [r2, #12]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa4:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	0a1b      	lsrs	r3, r3, #8
 8004faa:	f003 0307 	and.w	r3, r3, #7
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db0b      	blt.n	8004fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	f003 021f 	and.w	r2, r3, #31
 8004fd4:	4907      	ldr	r1, [pc, #28]	; (8004ff4 <__NVIC_EnableIRQ+0x38>)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2001      	movs	r0, #1
 8004fde:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	e000e100 	.word	0xe000e100

08004ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005008:	2b00      	cmp	r3, #0
 800500a:	db0a      	blt.n	8005022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	490c      	ldr	r1, [pc, #48]	; (8005044 <__NVIC_SetPriority+0x4c>)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	0112      	lsls	r2, r2, #4
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	440b      	add	r3, r1
 800501c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005020:	e00a      	b.n	8005038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	4908      	ldr	r1, [pc, #32]	; (8005048 <__NVIC_SetPriority+0x50>)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	3b04      	subs	r3, #4
 8005030:	0112      	lsls	r2, r2, #4
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	440b      	add	r3, r1
 8005036:	761a      	strb	r2, [r3, #24]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000e100 	.word	0xe000e100
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800504c:	b480      	push	{r7}
 800504e:	b089      	sub	sp, #36	; 0x24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f1c3 0307 	rsb	r3, r3, #7
 8005066:	2b04      	cmp	r3, #4
 8005068:	bf28      	it	cs
 800506a:	2304      	movcs	r3, #4
 800506c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3304      	adds	r3, #4
 8005072:	2b06      	cmp	r3, #6
 8005074:	d902      	bls.n	800507c <NVIC_EncodePriority+0x30>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3b03      	subs	r3, #3
 800507a:	e000      	b.n	800507e <NVIC_EncodePriority+0x32>
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005080:	f04f 32ff 	mov.w	r2, #4294967295
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	401a      	ands	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005094:	f04f 31ff 	mov.w	r1, #4294967295
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	43d9      	mvns	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a4:	4313      	orrs	r3, r2
         );
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff ff4c 	bl	8004f58 <__NVIC_SetPriorityGrouping>
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050da:	f7ff ff61 	bl	8004fa0 <__NVIC_GetPriorityGrouping>
 80050de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6978      	ldr	r0, [r7, #20]
 80050e6:	f7ff ffb1 	bl	800504c <NVIC_EncodePriority>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff80 	bl	8004ff8 <__NVIC_SetPriority>
}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ff54 	bl	8004fbc <__NVIC_EnableIRQ>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e00e      	b.n	800514c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	795b      	ldrb	r3, [r3, #5]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fe fbd8 	bl	80038f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7ff f95e 	bl	8004420 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e099      	b.n	80052a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005190:	e00f      	b.n	80051b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005192:	f7ff f945 	bl	8004420 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b05      	cmp	r3, #5
 800519e:	d908      	bls.n	80051b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e078      	b.n	80052a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e8      	bne.n	8005192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4b38      	ldr	r3, [pc, #224]	; (80052ac <HAL_DMA_Init+0x158>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b04      	cmp	r3, #4
 800520a:	d107      	bne.n	800521c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	4313      	orrs	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b04      	cmp	r3, #4
 8005244:	d117      	bne.n	8005276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa7b 	bl	8005754 <DMA_CheckFifoParam>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2240      	movs	r2, #64	; 0x40
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005272:	2301      	movs	r3, #1
 8005274:	e016      	b.n	80052a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa32 	bl	80056e8 <DMA_CalcBaseAndBitshift>
 8005284:	4603      	mov	r3, r0
 8005286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	223f      	movs	r2, #63	; 0x3f
 800528e:	409a      	lsls	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	f010803f 	.word	0xf010803f

080052b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_DMA_Start_IT+0x26>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e040      	b.n	8005358 <HAL_DMA_Start_IT+0xa8>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d12f      	bne.n	800534a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f9c4 	bl	800568c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	223f      	movs	r2, #63	; 0x3f
 800530a:	409a      	lsls	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0216 	orr.w	r2, r2, #22
 800531e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e005      	b.n	8005356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005352:	2302      	movs	r3, #2
 8005354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800536c:	4b92      	ldr	r3, [pc, #584]	; (80055b8 <HAL_DMA_IRQHandler+0x258>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a92      	ldr	r2, [pc, #584]	; (80055bc <HAL_DMA_IRQHandler+0x25c>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	0a9b      	lsrs	r3, r3, #10
 8005378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	2208      	movs	r2, #8
 800538c:	409a      	lsls	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01a      	beq.n	80053cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	2208      	movs	r2, #8
 80053ba:	409a      	lsls	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c4:	f043 0201 	orr.w	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	2201      	movs	r2, #1
 80053d2:	409a      	lsls	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d012      	beq.n	8005402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ee:	2201      	movs	r2, #1
 80053f0:	409a      	lsls	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	f043 0202 	orr.w	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	2204      	movs	r2, #4
 8005408:	409a      	lsls	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d012      	beq.n	8005438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	2204      	movs	r2, #4
 8005426:	409a      	lsls	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f043 0204 	orr.w	r2, r3, #4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543c:	2210      	movs	r2, #16
 800543e:	409a      	lsls	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d043      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03c      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	2210      	movs	r2, #16
 800545c:	409a      	lsls	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d018      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d108      	bne.n	8005490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d024      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
 800548e:	e01f      	b.n	80054d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
 80054a0:	e016      	b.n	80054d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d107      	bne.n	80054c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0208 	bic.w	r2, r2, #8
 80054be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	2220      	movs	r2, #32
 80054d6:	409a      	lsls	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 808e 	beq.w	80055fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8086 	beq.w	80055fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	2220      	movs	r2, #32
 80054f8:	409a      	lsls	r2, r3
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b05      	cmp	r3, #5
 8005508:	d136      	bne.n	8005578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0216 	bic.w	r2, r2, #22
 8005518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <HAL_DMA_IRQHandler+0x1da>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0208 	bic.w	r2, r2, #8
 8005548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	223f      	movs	r2, #63	; 0x3f
 8005550:	409a      	lsls	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	2b00      	cmp	r3, #0
 800556c:	d07d      	beq.n	800566a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
        }
        return;
 8005576:	e078      	b.n	800566a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01c      	beq.n	80055c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	2b00      	cmp	r3, #0
 800559a:	d030      	beq.n	80055fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
 80055a4:	e02b      	b.n	80055fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d027      	beq.n	80055fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
 80055b6:	e022      	b.n	80055fe <HAL_DMA_IRQHandler+0x29e>
 80055b8:	20000008 	.word	0x20000008
 80055bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0210 	bic.w	r2, r2, #16
 80055dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d032      	beq.n	800566c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d022      	beq.n	8005658 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2205      	movs	r2, #5
 8005616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	3301      	adds	r3, #1
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	429a      	cmp	r2, r3
 8005634:	d307      	bcc.n	8005646 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f2      	bne.n	800562a <HAL_DMA_IRQHandler+0x2ca>
 8005644:	e000      	b.n	8005648 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005646:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
 8005668:	e000      	b.n	800566c <HAL_DMA_IRQHandler+0x30c>
        return;
 800566a:	bf00      	nop
    }
  }
}
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop

08005674 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d108      	bne.n	80056cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056ca:	e007      	b.n	80056dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	60da      	str	r2, [r3, #12]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	3b10      	subs	r3, #16
 80056f8:	4a14      	ldr	r2, [pc, #80]	; (800574c <DMA_CalcBaseAndBitshift+0x64>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <DMA_CalcBaseAndBitshift+0x68>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d909      	bls.n	800572a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	659a      	str	r2, [r3, #88]	; 0x58
 8005728:	e007      	b.n	800573a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	aaaaaaab 	.word	0xaaaaaaab
 8005750:	0802fe6c 	.word	0x0802fe6c

08005754 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11f      	bne.n	80057ae <DMA_CheckFifoParam+0x5a>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d856      	bhi.n	8005822 <DMA_CheckFifoParam+0xce>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <DMA_CheckFifoParam+0x28>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	0800578d 	.word	0x0800578d
 8005780:	0800579f 	.word	0x0800579f
 8005784:	0800578d 	.word	0x0800578d
 8005788:	08005823 	.word	0x08005823
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d046      	beq.n	8005826 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579c:	e043      	b.n	8005826 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057a6:	d140      	bne.n	800582a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ac:	e03d      	b.n	800582a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b6:	d121      	bne.n	80057fc <DMA_CheckFifoParam+0xa8>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d837      	bhi.n	800582e <DMA_CheckFifoParam+0xda>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <DMA_CheckFifoParam+0x70>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057db 	.word	0x080057db
 80057cc:	080057d5 	.word	0x080057d5
 80057d0:	080057ed 	.word	0x080057ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      break;
 80057d8:	e030      	b.n	800583c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d025      	beq.n	8005832 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ea:	e022      	b.n	8005832 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057f4:	d11f      	bne.n	8005836 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057fa:	e01c      	b.n	8005836 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d903      	bls.n	800580a <DMA_CheckFifoParam+0xb6>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d003      	beq.n	8005810 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005808:	e018      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
      break;
 800580e:	e015      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00e      	beq.n	800583a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e00b      	b.n	800583a <DMA_CheckFifoParam+0xe6>
      break;
 8005822:	bf00      	nop
 8005824:	e00a      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      break;
 8005826:	bf00      	nop
 8005828:	e008      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      break;
 800582a:	bf00      	nop
 800582c:	e006      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      break;
 800582e:	bf00      	nop
 8005830:	e004      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      break;
 8005832:	bf00      	nop
 8005834:	e002      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      break;   
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <DMA_CheckFifoParam+0xe8>
      break;
 800583a:	bf00      	nop
    }
  } 
  
  return status; 
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop

0800584c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e03b      	b.n	80058d6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe f860 	bl	8003938 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	f023 0107 	bic.w	r1, r3, #7
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68d1      	ldr	r1, [r2, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	430b      	orrs	r3, r1
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d026      	beq.n	800594e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005918:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2201      	movs	r2, #1
 800592c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d026      	beq.n	80059a6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d021      	beq.n	80059a6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005970:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2220      	movs	r2, #32
 8005978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	f043 0202 	orr.w	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d026      	beq.n	80059fe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d021      	beq.n	80059fe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2208      	movs	r2, #8
 80059d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	f043 0204 	orr.w	r2, r3, #4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2204      	movs	r2, #4
 80059e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d013      	beq.n	8005a30 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00e      	beq.n	8005a30 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a20:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2204      	movs	r2, #4
 8005a28:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f853 	bl	8005ad6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d024      	beq.n	8005a84 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01f      	beq.n	8005a84 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a52:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01f      	beq.n	8005ace <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01a      	beq.n	8005ace <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2210      	movs	r2, #16
 8005aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f80e 	bl	8005aea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_DMA2D_ConfigLayer+0x20>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e079      	b.n	8005c14 <HAL_DMA2D_ConfigLayer+0x114>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	3318      	adds	r3, #24
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	041b      	lsls	r3, r3, #16
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b4a:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <HAL_DMA2D_ConfigLayer+0x120>)
 8005b4c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b0a      	cmp	r3, #10
 8005b54:	d003      	beq.n	8005b5e <HAL_DMA2D_ConfigLayer+0x5e>
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b09      	cmp	r3, #9
 8005b5c:	d107      	bne.n	8005b6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e005      	b.n	8005b7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	061b      	lsls	r3, r3, #24
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d120      	bne.n	8005bc2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	ea02 0103 	and.w	r1, r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b0a      	cmp	r3, #10
 8005ba8:	d003      	beq.n	8005bb2 <HAL_DMA2D_ConfigLayer+0xb2>
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d127      	bne.n	8005c02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc0:	e01f      	b.n	8005c02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	ea02 0103 	and.w	r1, r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b0a      	cmp	r3, #10
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA2D_ConfigLayer+0xf4>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d106      	bne.n	8005c02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005c00:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	ff03000f 	.word	0xff03000f

08005c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	e177      	b.n	8005f30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c40:	2201      	movs	r2, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	f040 8166 	bne.w	8005f2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d005      	beq.n	8005c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d130      	bne.n	8005cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	2203      	movs	r2, #3
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cac:	2201      	movs	r2, #1
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 0201 	and.w	r2, r3, #1
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d017      	beq.n	8005d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d123      	bne.n	8005d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	08da      	lsrs	r2, r3, #3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3208      	adds	r2, #8
 8005d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	220f      	movs	r2, #15
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	08da      	lsrs	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3208      	adds	r2, #8
 8005d62:	69b9      	ldr	r1, [r7, #24]
 8005d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	2203      	movs	r2, #3
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 0203 	and.w	r2, r3, #3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80c0 	beq.w	8005f2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	4b66      	ldr	r3, [pc, #408]	; (8005f48 <HAL_GPIO_Init+0x324>)
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	4a65      	ldr	r2, [pc, #404]	; (8005f48 <HAL_GPIO_Init+0x324>)
 8005db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005db8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dba:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <HAL_GPIO_Init+0x324>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dc6:	4a61      	ldr	r2, [pc, #388]	; (8005f4c <HAL_GPIO_Init+0x328>)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	089b      	lsrs	r3, r3, #2
 8005dcc:	3302      	adds	r3, #2
 8005dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	220f      	movs	r2, #15
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a58      	ldr	r2, [pc, #352]	; (8005f50 <HAL_GPIO_Init+0x32c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d037      	beq.n	8005e62 <HAL_GPIO_Init+0x23e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a57      	ldr	r2, [pc, #348]	; (8005f54 <HAL_GPIO_Init+0x330>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d031      	beq.n	8005e5e <HAL_GPIO_Init+0x23a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a56      	ldr	r2, [pc, #344]	; (8005f58 <HAL_GPIO_Init+0x334>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d02b      	beq.n	8005e5a <HAL_GPIO_Init+0x236>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a55      	ldr	r2, [pc, #340]	; (8005f5c <HAL_GPIO_Init+0x338>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d025      	beq.n	8005e56 <HAL_GPIO_Init+0x232>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a54      	ldr	r2, [pc, #336]	; (8005f60 <HAL_GPIO_Init+0x33c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <HAL_GPIO_Init+0x22e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a53      	ldr	r2, [pc, #332]	; (8005f64 <HAL_GPIO_Init+0x340>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d019      	beq.n	8005e4e <HAL_GPIO_Init+0x22a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a52      	ldr	r2, [pc, #328]	; (8005f68 <HAL_GPIO_Init+0x344>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_GPIO_Init+0x226>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a51      	ldr	r2, [pc, #324]	; (8005f6c <HAL_GPIO_Init+0x348>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00d      	beq.n	8005e46 <HAL_GPIO_Init+0x222>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a50      	ldr	r2, [pc, #320]	; (8005f70 <HAL_GPIO_Init+0x34c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <HAL_GPIO_Init+0x21e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a4f      	ldr	r2, [pc, #316]	; (8005f74 <HAL_GPIO_Init+0x350>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <HAL_GPIO_Init+0x21a>
 8005e3a:	2309      	movs	r3, #9
 8005e3c:	e012      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e010      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e42:	2308      	movs	r3, #8
 8005e44:	e00e      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e46:	2307      	movs	r3, #7
 8005e48:	e00c      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e4a:	2306      	movs	r3, #6
 8005e4c:	e00a      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e4e:	2305      	movs	r3, #5
 8005e50:	e008      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e52:	2304      	movs	r3, #4
 8005e54:	e006      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e56:	2303      	movs	r3, #3
 8005e58:	e004      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e002      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <HAL_GPIO_Init+0x240>
 8005e62:	2300      	movs	r3, #0
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	f002 0203 	and.w	r2, r2, #3
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	4093      	lsls	r3, r2
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e74:	4935      	ldr	r1, [pc, #212]	; (8005f4c <HAL_GPIO_Init+0x328>)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e82:	4b3d      	ldr	r3, [pc, #244]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ea6:	4a34      	ldr	r2, [pc, #208]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005eac:	4b32      	ldr	r3, [pc, #200]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ed0:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ed6:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005efa:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f00:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f24:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <HAL_GPIO_Init+0x354>)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b0f      	cmp	r3, #15
 8005f34:	f67f ae84 	bls.w	8005c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3724      	adds	r7, #36	; 0x24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40013800 	.word	0x40013800
 8005f50:	40020000 	.word	0x40020000
 8005f54:	40020400 	.word	0x40020400
 8005f58:	40020800 	.word	0x40020800
 8005f5c:	40020c00 	.word	0x40020c00
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40021400 	.word	0x40021400
 8005f68:	40021800 	.word	0x40021800
 8005f6c:	40021c00 	.word	0x40021c00
 8005f70:	40022000 	.word	0x40022000
 8005f74:	40022400 	.word	0x40022400
 8005f78:	40013c00 	.word	0x40013c00

08005f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	887b      	ldrh	r3, [r7, #2]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	e001      	b.n	8005f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	807b      	strh	r3, [r7, #2]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fbc:	787b      	ldrb	r3, [r7, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fc2:	887a      	ldrh	r2, [r7, #2]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fc8:	e003      	b.n	8005fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fca:	887b      	ldrh	r3, [r7, #2]
 8005fcc:	041a      	lsls	r2, r3, #16
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	619a      	str	r2, [r3, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ff0:	887a      	ldrh	r2, [r7, #2]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	041a      	lsls	r2, r3, #16
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	43d9      	mvns	r1, r3
 8005ffc:	887b      	ldrh	r3, [r7, #2]
 8005ffe:	400b      	ands	r3, r1
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	619a      	str	r2, [r3, #24]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e12b      	b.n	800627e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fd fca4 	bl	8003988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	; 0x24
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006078:	f002 f81a 	bl	80080b0 <HAL_RCC_GetPCLK1Freq>
 800607c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4a81      	ldr	r2, [pc, #516]	; (8006288 <HAL_I2C_Init+0x274>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d807      	bhi.n	8006098 <HAL_I2C_Init+0x84>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a80      	ldr	r2, [pc, #512]	; (800628c <HAL_I2C_Init+0x278>)
 800608c:	4293      	cmp	r3, r2
 800608e:	bf94      	ite	ls
 8006090:	2301      	movls	r3, #1
 8006092:	2300      	movhi	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	e006      	b.n	80060a6 <HAL_I2C_Init+0x92>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a7d      	ldr	r2, [pc, #500]	; (8006290 <HAL_I2C_Init+0x27c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	bf94      	ite	ls
 80060a0:	2301      	movls	r3, #1
 80060a2:	2300      	movhi	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0e7      	b.n	800627e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a78      	ldr	r2, [pc, #480]	; (8006294 <HAL_I2C_Init+0x280>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0c9b      	lsrs	r3, r3, #18
 80060b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4a6a      	ldr	r2, [pc, #424]	; (8006288 <HAL_I2C_Init+0x274>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d802      	bhi.n	80060e8 <HAL_I2C_Init+0xd4>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3301      	adds	r3, #1
 80060e6:	e009      	b.n	80060fc <HAL_I2C_Init+0xe8>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	4a69      	ldr	r2, [pc, #420]	; (8006298 <HAL_I2C_Init+0x284>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	099b      	lsrs	r3, r3, #6
 80060fa:	3301      	adds	r3, #1
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	430b      	orrs	r3, r1
 8006102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800610e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	495c      	ldr	r1, [pc, #368]	; (8006288 <HAL_I2C_Init+0x274>)
 8006118:	428b      	cmp	r3, r1
 800611a:	d819      	bhi.n	8006150 <HAL_I2C_Init+0x13c>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1e59      	subs	r1, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	fbb1 f3f3 	udiv	r3, r1, r3
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006130:	400b      	ands	r3, r1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_I2C_Init+0x138>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1e59      	subs	r1, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	fbb1 f3f3 	udiv	r3, r1, r3
 8006144:	3301      	adds	r3, #1
 8006146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800614a:	e051      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 800614c:	2304      	movs	r3, #4
 800614e:	e04f      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d111      	bne.n	800617c <HAL_I2C_Init+0x168>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1e58      	subs	r0, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6859      	ldr	r1, [r3, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	440b      	add	r3, r1
 8006166:	fbb0 f3f3 	udiv	r3, r0, r3
 800616a:	3301      	adds	r3, #1
 800616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e012      	b.n	80061a2 <HAL_I2C_Init+0x18e>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1e58      	subs	r0, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	0099      	lsls	r1, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006192:	3301      	adds	r3, #1
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_I2C_Init+0x196>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e022      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10e      	bne.n	80061d0 <HAL_I2C_Init+0x1bc>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1e58      	subs	r0, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6859      	ldr	r1, [r3, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	440b      	add	r3, r1
 80061c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c4:	3301      	adds	r3, #1
 80061c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ce:	e00f      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1e58      	subs	r0, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6859      	ldr	r1, [r3, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	0099      	lsls	r1, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e6:	3301      	adds	r3, #1
 80061e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	6809      	ldr	r1, [r1, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800621e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6911      	ldr	r1, [r2, #16]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68d2      	ldr	r2, [r2, #12]
 800622a:	4311      	orrs	r1, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	000186a0 	.word	0x000186a0
 800628c:	001e847f 	.word	0x001e847f
 8006290:	003d08ff 	.word	0x003d08ff
 8006294:	431bde83 	.word	0x431bde83
 8006298:	10624dd3 	.word	0x10624dd3

0800629c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	461a      	mov	r2, r3
 80062a8:	460b      	mov	r3, r1
 80062aa:	817b      	strh	r3, [r7, #10]
 80062ac:	4613      	mov	r3, r2
 80062ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062b0:	f7fe f8b6 	bl	8004420 <HAL_GetTick>
 80062b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b20      	cmp	r3, #32
 80062c0:	f040 80e0 	bne.w	8006484 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2319      	movs	r3, #25
 80062ca:	2201      	movs	r2, #1
 80062cc:	4970      	ldr	r1, [pc, #448]	; (8006490 <HAL_I2C_Master_Transmit+0x1f4>)
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fc58 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
 80062dc:	e0d3      	b.n	8006486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_I2C_Master_Transmit+0x50>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e0cc      	b.n	8006486 <HAL_I2C_Master_Transmit+0x1ea>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d007      	beq.n	8006312 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006320:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2221      	movs	r2, #33	; 0x21
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2210      	movs	r2, #16
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	893a      	ldrh	r2, [r7, #8]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a50      	ldr	r2, [pc, #320]	; (8006494 <HAL_I2C_Master_Transmit+0x1f8>)
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006354:	8979      	ldrh	r1, [r7, #10]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fac2 	bl	80068e4 <I2C_MasterRequestWrite>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e08d      	b.n	8006486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006380:	e066      	b.n	8006450 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	6a39      	ldr	r1, [r7, #32]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 fcd2 	bl	8006d30 <I2C_WaitOnTXEFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b04      	cmp	r3, #4
 8006398:	d107      	bne.n	80063aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e06b      	b.n	8006486 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d11b      	bne.n	8006424 <HAL_I2C_Master_Transmit+0x188>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d017      	beq.n	8006424 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	781a      	ldrb	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	6a39      	ldr	r1, [r7, #32]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fcc2 	bl	8006db2 <I2C_WaitOnBTFFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	2b04      	cmp	r3, #4
 800643a:	d107      	bne.n	800644c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e01a      	b.n	8006486 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006454:	2b00      	cmp	r3, #0
 8006456:	d194      	bne.n	8006382 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	e000      	b.n	8006486 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006484:	2302      	movs	r3, #2
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	00100002 	.word	0x00100002
 8006494:	ffff0000 	.word	0xffff0000

08006498 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	461a      	mov	r2, r3
 80064a4:	460b      	mov	r3, r1
 80064a6:	817b      	strh	r3, [r7, #10]
 80064a8:	4613      	mov	r3, r2
 80064aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064ac:	f7fd ffb8 	bl	8004420 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	f040 820b 	bne.w	80068d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2319      	movs	r3, #25
 80064c6:	2201      	movs	r2, #1
 80064c8:	497c      	ldr	r1, [pc, #496]	; (80066bc <HAL_I2C_Master_Receive+0x224>)
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fb5a 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
 80064d8:	e1fe      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_I2C_Master_Receive+0x50>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e1f7      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d007      	beq.n	800650e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800651c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2222      	movs	r2, #34	; 0x22
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2210      	movs	r2, #16
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	893a      	ldrh	r2, [r7, #8]
 800653e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a5c      	ldr	r2, [pc, #368]	; (80066c0 <HAL_I2C_Master_Receive+0x228>)
 800654e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006550:	8979      	ldrh	r1, [r7, #10]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa46 	bl	80069e8 <I2C_MasterRequestRead>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e1b8      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b00      	cmp	r3, #0
 800656c:	d113      	bne.n	8006596 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e18c      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659a:	2b01      	cmp	r3, #1
 800659c:	d11b      	bne.n	80065d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e16c      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d11b      	bne.n	8006616 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	e14c      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800663c:	e138      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	2b03      	cmp	r3, #3
 8006644:	f200 80f1 	bhi.w	800682a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	2b01      	cmp	r3, #1
 800664e:	d123      	bne.n	8006698 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fbed 	bl	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e139      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006696:	e10b      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b02      	cmp	r3, #2
 800669e:	d14e      	bne.n	800673e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	2200      	movs	r2, #0
 80066a8:	4906      	ldr	r1, [pc, #24]	; (80066c4 <HAL_I2C_Master_Receive+0x22c>)
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fa6a 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e10e      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
 80066ba:	bf00      	nop
 80066bc:	00100002 	.word	0x00100002
 80066c0:	ffff0000 	.word	0xffff0000
 80066c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800673c:	e0b8      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2200      	movs	r2, #0
 8006746:	4966      	ldr	r1, [pc, #408]	; (80068e0 <HAL_I2C_Master_Receive+0x448>)
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fa1b 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0bf      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	2200      	movs	r2, #0
 80067a2:	494f      	ldr	r1, [pc, #316]	; (80068e0 <HAL_I2C_Master_Receive+0x448>)
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f9ed 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e091      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006828:	e042      	b.n	80068b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800682a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fb00 	bl	8006e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e04c      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b04      	cmp	r3, #4
 800687c:	d118      	bne.n	80068b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f47f aec2 	bne.w	800663e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
  }
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3728      	adds	r7, #40	; 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	00010004 	.word	0x00010004

080068e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	460b      	mov	r3, r1
 80068f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d006      	beq.n	800690e <I2C_MasterRequestWrite+0x2a>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d003      	beq.n	800690e <I2C_MasterRequestWrite+0x2a>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800690c:	d108      	bne.n	8006920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e00b      	b.n	8006938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	2b12      	cmp	r3, #18
 8006926:	d107      	bne.n	8006938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f91d 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695e:	d103      	bne.n	8006968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e035      	b.n	80069d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006974:	d108      	bne.n	8006988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006976:	897b      	ldrh	r3, [r7, #10]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006984:	611a      	str	r2, [r3, #16]
 8006986:	e01b      	b.n	80069c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006988:	897b      	ldrh	r3, [r7, #10]
 800698a:	11db      	asrs	r3, r3, #7
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0306 	and.w	r3, r3, #6
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f063 030f 	orn	r3, r3, #15
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	490e      	ldr	r1, [pc, #56]	; (80069e0 <I2C_MasterRequestWrite+0xfc>)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f943 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e010      	b.n	80069d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4907      	ldr	r1, [pc, #28]	; (80069e4 <I2C_MasterRequestWrite+0x100>)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f933 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	00010008 	.word	0x00010008
 80069e4:	00010002 	.word	0x00010002

080069e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	460b      	mov	r3, r1
 80069f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d006      	beq.n	8006a22 <I2C_MasterRequestRead+0x3a>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d003      	beq.n	8006a22 <I2C_MasterRequestRead+0x3a>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a20:	d108      	bne.n	8006a34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	e00b      	b.n	8006a4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	2b11      	cmp	r3, #17
 8006a3a:	d107      	bne.n	8006a4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f893 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00d      	beq.n	8006a80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a72:	d103      	bne.n	8006a7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e079      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a88:	d108      	bne.n	8006a9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a8a:	897b      	ldrh	r3, [r7, #10]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	611a      	str	r2, [r3, #16]
 8006a9a:	e05f      	b.n	8006b5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a9c:	897b      	ldrh	r3, [r7, #10]
 8006a9e:	11db      	asrs	r3, r3, #7
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0306 	and.w	r3, r3, #6
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f063 030f 	orn	r3, r3, #15
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4930      	ldr	r1, [pc, #192]	; (8006b7c <I2C_MasterRequestRead+0x194>)
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f8b9 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e054      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006aca:	897b      	ldrh	r3, [r7, #10]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4929      	ldr	r1, [pc, #164]	; (8006b80 <I2C_MasterRequestRead+0x198>)
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f8a9 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e044      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f831 	bl	8006b84 <I2C_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	d103      	bne.n	8006b40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e017      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b44:	897b      	ldrh	r3, [r7, #10]
 8006b46:	11db      	asrs	r3, r3, #7
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0306 	and.w	r3, r3, #6
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f063 030e 	orn	r3, r3, #14
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4907      	ldr	r1, [pc, #28]	; (8006b80 <I2C_MasterRequestRead+0x198>)
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f865 	bl	8006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	00010008 	.word	0x00010008
 8006b80:	00010002 	.word	0x00010002

08006b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b94:	e025      	b.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d021      	beq.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fd fc3f 	bl	8004420 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d116      	bne.n	8006be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f043 0220 	orr.w	r2, r3, #32
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e023      	b.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10d      	bne.n	8006c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	e00c      	b.n	8006c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	43da      	mvns	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d0b6      	beq.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c40:	e051      	b.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d123      	bne.n	8006c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e046      	b.n	8006d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d021      	beq.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fd fbbd 	bl	8004420 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d116      	bne.n	8006ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f043 0220 	orr.w	r2, r3, #32
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e020      	b.n	8006d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d10c      	bne.n	8006d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e00b      	b.n	8006d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	43da      	mvns	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d18d      	bne.n	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d3c:	e02d      	b.n	8006d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f8ce 	bl	8006ee0 <I2C_IsAcknowledgeFailed>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e02d      	b.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d021      	beq.n	8006d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fd fb63 	bl	8004420 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d116      	bne.n	8006d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e007      	b.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d1ca      	bne.n	8006d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dbe:	e02d      	b.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f88d 	bl	8006ee0 <I2C_IsAcknowledgeFailed>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e02d      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d021      	beq.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fd fb22 	bl	8004420 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	f043 0220 	orr.w	r2, r3, #32
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e007      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d1ca      	bne.n	8006dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e40:	e042      	b.n	8006ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d119      	bne.n	8006e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0210 	mvn.w	r2, #16
 8006e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e029      	b.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e84:	f7fd facc 	bl	8004420 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d116      	bne.n	8006ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e007      	b.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d1b5      	bne.n	8006e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef6:	d11b      	bne.n	8006f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	f043 0204 	orr.w	r2, r3, #4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d129      	bne.n	8006fa8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0210 	bic.w	r2, r2, #16
 8006f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d12a      	bne.n	8007026 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2224      	movs	r2, #36	; 0x24
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	f023 030f 	bic.w	r3, r3, #15
 8006ff6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	89fb      	ldrh	r3, [r7, #14]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	89fa      	ldrh	r2, [r7, #14]
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0201 	orr.w	r2, r2, #1
 8007018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e0bf      	b.n	80071c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fc fcdc 	bl	8003a18 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007076:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6999      	ldr	r1, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800708c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6899      	ldr	r1, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b4a      	ldr	r3, [pc, #296]	; (80071d0 <HAL_LTDC_Init+0x19c>)
 80070a8:	400b      	ands	r3, r1
 80070aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	041b      	lsls	r3, r3, #16
 80070b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6899      	ldr	r1, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68d9      	ldr	r1, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <HAL_LTDC_Init+0x19c>)
 80070d6:	400b      	ands	r3, r1
 80070d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68d9      	ldr	r1, [r3, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1a      	ldr	r2, [r3, #32]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6919      	ldr	r1, [r3, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b33      	ldr	r3, [pc, #204]	; (80071d0 <HAL_LTDC_Init+0x19c>)
 8007104:	400b      	ands	r3, r1
 8007106:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6919      	ldr	r1, [r3, #16]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6959      	ldr	r1, [r3, #20]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <HAL_LTDC_Init+0x19c>)
 8007132:	400b      	ands	r3, r1
 8007134:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6959      	ldr	r1, [r3, #20]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0206 	orr.w	r2, r2, #6
 80071a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	f000f800 	.word	0xf000f800

080071d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d023      	beq.n	800723e <HAL_LTDC_IRQHandler+0x6a>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0204 	bic.w	r2, r2, #4
 800720e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2204      	movs	r2, #4
 8007216:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800721e:	f043 0201 	orr.w	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2204      	movs	r2, #4
 800722c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f86f 	bl	800731c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d023      	beq.n	8007290 <HAL_LTDC_IRQHandler+0xbc>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01e      	beq.n	8007290 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0202 	bic.w	r2, r2, #2
 8007260:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2202      	movs	r2, #2
 8007268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007270:	f043 0202 	orr.w	r2, r3, #2
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f846 	bl	800731c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01b      	beq.n	80072d2 <HAL_LTDC_IRQHandler+0xfe>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d016      	beq.n	80072d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2201      	movs	r2, #1
 80072ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f00f fd11 	bl	8016cf4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <HAL_LTDC_IRQHandler+0x140>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0208 	bic.w	r2, r2, #8
 80072f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2208      	movs	r2, #8
 80072fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f80e 	bl	8007330 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007344:	b5b0      	push	{r4, r5, r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_LTDC_ConfigLayer+0x1a>
 800735a:	2302      	movs	r3, #2
 800735c:	e02c      	b.n	80073b8 <HAL_LTDC_ConfigLayer+0x74>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2134      	movs	r1, #52	; 0x34
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4614      	mov	r4, r2
 8007382:	461d      	mov	r5, r3
 8007384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800738a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800738c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f849 	bl	8007430 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2201      	movs	r2, #1
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bdb0      	pop	{r4, r5, r7, pc}

080073c0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_LTDC_ProgramLineEvent+0x18>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e023      	b.n	8007420 <HAL_LTDC_ProgramLineEvent+0x60>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80073f8:	4a0c      	ldr	r2, [pc, #48]	; (800742c <HAL_LTDC_ProgramLineEvent+0x6c>)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0201 	orr.w	r2, r2, #1
 800740c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	40016800 	.word	0x40016800

08007430 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800744c:	4413      	add	r3, r2
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	01db      	lsls	r3, r3, #7
 800745c:	4413      	add	r3, r2
 800745e:	3384      	adds	r3, #132	; 0x84
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	4611      	mov	r1, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	01d2      	lsls	r2, r2, #7
 800746c:	440a      	add	r2, r1
 800746e:	3284      	adds	r2, #132	; 0x84
 8007470:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007474:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007486:	4413      	add	r3, r2
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	440b      	add	r3, r1
 8007496:	3384      	adds	r3, #132	; 0x84
 8007498:	4619      	mov	r1, r3
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4313      	orrs	r3, r2
 800749e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ae:	4413      	add	r3, r2
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	01db      	lsls	r3, r3, #7
 80074be:	4413      	add	r3, r2
 80074c0:	3384      	adds	r3, #132	; 0x84
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	4611      	mov	r1, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	01d2      	lsls	r2, r2, #7
 80074ce:	440a      	add	r2, r1
 80074d0:	3284      	adds	r2, #132	; 0x84
 80074d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074e6:	4413      	add	r3, r2
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	01db      	lsls	r3, r3, #7
 80074f4:	440b      	add	r3, r1
 80074f6:	3384      	adds	r3, #132	; 0x84
 80074f8:	4619      	mov	r1, r3
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	01db      	lsls	r3, r3, #7
 800750a:	4413      	add	r3, r2
 800750c:	3384      	adds	r3, #132	; 0x84
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	4611      	mov	r1, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	01d2      	lsls	r2, r2, #7
 800751a:	440a      	add	r2, r1
 800751c:	3284      	adds	r2, #132	; 0x84
 800751e:	f023 0307 	bic.w	r3, r3, #7
 8007522:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	01db      	lsls	r3, r3, #7
 800752e:	4413      	add	r3, r2
 8007530:	3384      	adds	r3, #132	; 0x84
 8007532:	461a      	mov	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	4413      	add	r3, r2
 8007562:	3384      	adds	r3, #132	; 0x84
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	01db      	lsls	r3, r3, #7
 8007570:	4413      	add	r3, r2
 8007572:	3384      	adds	r3, #132	; 0x84
 8007574:	461a      	mov	r2, r3
 8007576:	2300      	movs	r3, #0
 8007578:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007580:	461a      	mov	r2, r3
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	431a      	orrs	r2, r3
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	431a      	orrs	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	440b      	add	r3, r1
 8007596:	3384      	adds	r3, #132	; 0x84
 8007598:	4619      	mov	r1, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	01db      	lsls	r3, r3, #7
 80075aa:	4413      	add	r3, r2
 80075ac:	3384      	adds	r3, #132	; 0x84
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	4611      	mov	r1, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	01d2      	lsls	r2, r2, #7
 80075ba:	440a      	add	r2, r1
 80075bc:	3284      	adds	r2, #132	; 0x84
 80075be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	01db      	lsls	r3, r3, #7
 80075ce:	4413      	add	r3, r2
 80075d0:	3384      	adds	r3, #132	; 0x84
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	01db      	lsls	r3, r3, #7
 80075e4:	4413      	add	r3, r2
 80075e6:	3384      	adds	r3, #132	; 0x84
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	6812      	ldr	r2, [r2, #0]
 80075ee:	4611      	mov	r1, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	01d2      	lsls	r2, r2, #7
 80075f4:	440a      	add	r2, r1
 80075f6:	3284      	adds	r2, #132	; 0x84
 80075f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80075fc:	f023 0307 	bic.w	r3, r3, #7
 8007600:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	69da      	ldr	r2, [r3, #28]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	6809      	ldr	r1, [r1, #0]
 800760e:	4608      	mov	r0, r1
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	01c9      	lsls	r1, r1, #7
 8007614:	4401      	add	r1, r0
 8007616:	3184      	adds	r1, #132	; 0x84
 8007618:	4313      	orrs	r3, r2
 800761a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	01db      	lsls	r3, r3, #7
 8007626:	4413      	add	r3, r2
 8007628:	3384      	adds	r3, #132	; 0x84
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	01db      	lsls	r3, r3, #7
 8007636:	4413      	add	r3, r2
 8007638:	3384      	adds	r3, #132	; 0x84
 800763a:	461a      	mov	r2, r3
 800763c:	2300      	movs	r3, #0
 800763e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	01db      	lsls	r3, r3, #7
 800764a:	4413      	add	r3, r2
 800764c:	3384      	adds	r3, #132	; 0x84
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800765e:	2304      	movs	r3, #4
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	e01b      	b.n	800769c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d102      	bne.n	8007672 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800766c:	2303      	movs	r3, #3
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	e014      	b.n	800769c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b04      	cmp	r3, #4
 8007678:	d00b      	beq.n	8007692 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800767e:	2b02      	cmp	r3, #2
 8007680:	d007      	beq.n	8007692 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007686:	2b03      	cmp	r3, #3
 8007688:	d003      	beq.n	8007692 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800768e:	2b07      	cmp	r3, #7
 8007690:	d102      	bne.n	8007698 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007692:	2302      	movs	r3, #2
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	e001      	b.n	800769c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007698:	2301      	movs	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	01db      	lsls	r3, r3, #7
 80076a6:	4413      	add	r3, r2
 80076a8:	3384      	adds	r3, #132	; 0x84
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	4611      	mov	r1, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	01d2      	lsls	r2, r2, #7
 80076b6:	440a      	add	r2, r1
 80076b8:	3284      	adds	r2, #132	; 0x84
 80076ba:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	fb02 f303 	mul.w	r3, r2, r3
 80076ca:	041a      	lsls	r2, r3, #16
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6859      	ldr	r1, [r3, #4]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	1acb      	subs	r3, r1, r3
 80076d6:	69f9      	ldr	r1, [r7, #28]
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	3303      	adds	r3, #3
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	6809      	ldr	r1, [r1, #0]
 80076e2:	4608      	mov	r0, r1
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	01c9      	lsls	r1, r1, #7
 80076e8:	4401      	add	r1, r0
 80076ea:	3184      	adds	r1, #132	; 0x84
 80076ec:	4313      	orrs	r3, r2
 80076ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	01db      	lsls	r3, r3, #7
 80076fa:	4413      	add	r3, r2
 80076fc:	3384      	adds	r3, #132	; 0x84
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	4611      	mov	r1, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	01d2      	lsls	r2, r2, #7
 800770a:	440a      	add	r2, r1
 800770c:	3284      	adds	r2, #132	; 0x84
 800770e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007712:	f023 0307 	bic.w	r3, r3, #7
 8007716:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	01db      	lsls	r3, r3, #7
 8007722:	4413      	add	r3, r2
 8007724:	3384      	adds	r3, #132	; 0x84
 8007726:	461a      	mov	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	01db      	lsls	r3, r3, #7
 8007738:	4413      	add	r3, r2
 800773a:	3384      	adds	r3, #132	; 0x84
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	4611      	mov	r1, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	01d2      	lsls	r2, r2, #7
 8007748:	440a      	add	r2, r1
 800774a:	3284      	adds	r2, #132	; 0x84
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	6013      	str	r3, [r2, #0]
}
 8007752:	bf00      	nop
 8007754:	3724      	adds	r7, #36	; 0x24
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	4b20      	ldr	r3, [pc, #128]	; (80077f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	4a1f      	ldr	r2, [pc, #124]	; (80077f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007778:	6413      	str	r3, [r2, #64]	; 0x40
 800777a:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007786:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8007788:	2201      	movs	r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800778c:	f7fc fe48 	bl	8004420 <HAL_GetTick>
 8007790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007792:	e009      	b.n	80077a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007794:	f7fc fe44 	bl	8004420 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a2:	d901      	bls.n	80077a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e01f      	b.n	80077e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d1ee      	bne.n	8007794 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077bc:	f7fc fe30 	bl	8004420 <HAL_GetTick>
 80077c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077c2:	e009      	b.n	80077d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077c4:	f7fc fe2c 	bl	8004420 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d2:	d901      	bls.n	80077d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e007      	b.n	80077e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077e4:	d1ee      	bne.n	80077c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40023800 	.word	0x40023800
 80077f4:	420e0040 	.word	0x420e0040
 80077f8:	40007000 	.word	0x40007000
 80077fc:	420e0044 	.word	0x420e0044

08007800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e264      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d075      	beq.n	800790a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800781e:	4ba3      	ldr	r3, [pc, #652]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
 8007826:	2b04      	cmp	r3, #4
 8007828:	d00c      	beq.n	8007844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800782a:	4ba0      	ldr	r3, [pc, #640]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007832:	2b08      	cmp	r3, #8
 8007834:	d112      	bne.n	800785c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007836:	4b9d      	ldr	r3, [pc, #628]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800783e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007842:	d10b      	bne.n	800785c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007844:	4b99      	ldr	r3, [pc, #612]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d05b      	beq.n	8007908 <HAL_RCC_OscConfig+0x108>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d157      	bne.n	8007908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e23f      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007864:	d106      	bne.n	8007874 <HAL_RCC_OscConfig+0x74>
 8007866:	4b91      	ldr	r3, [pc, #580]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a90      	ldr	r2, [pc, #576]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800786c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e01d      	b.n	80078b0 <HAL_RCC_OscConfig+0xb0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800787c:	d10c      	bne.n	8007898 <HAL_RCC_OscConfig+0x98>
 800787e:	4b8b      	ldr	r3, [pc, #556]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a8a      	ldr	r2, [pc, #552]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4b88      	ldr	r3, [pc, #544]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a87      	ldr	r2, [pc, #540]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e00b      	b.n	80078b0 <HAL_RCC_OscConfig+0xb0>
 8007898:	4b84      	ldr	r3, [pc, #528]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a83      	ldr	r2, [pc, #524]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b81      	ldr	r3, [pc, #516]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a80      	ldr	r2, [pc, #512]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 80078aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d013      	beq.n	80078e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b8:	f7fc fdb2 	bl	8004420 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c0:	f7fc fdae 	bl	8004420 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e204      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d2:	4b76      	ldr	r3, [pc, #472]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0xc0>
 80078de:	e014      	b.n	800790a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e0:	f7fc fd9e 	bl	8004420 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fc fd9a 	bl	8004420 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e1f0      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078fa:	4b6c      	ldr	r3, [pc, #432]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0xe8>
 8007906:	e000      	b.n	800790a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d063      	beq.n	80079de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007916:	4b65      	ldr	r3, [pc, #404]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 030c 	and.w	r3, r3, #12
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007922:	4b62      	ldr	r3, [pc, #392]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800792a:	2b08      	cmp	r3, #8
 800792c:	d11c      	bne.n	8007968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800792e:	4b5f      	ldr	r3, [pc, #380]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d116      	bne.n	8007968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793a:	4b5c      	ldr	r3, [pc, #368]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <HAL_RCC_OscConfig+0x152>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d001      	beq.n	8007952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e1c4      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007952:	4b56      	ldr	r3, [pc, #344]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4952      	ldr	r1, [pc, #328]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007962:	4313      	orrs	r3, r2
 8007964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007966:	e03a      	b.n	80079de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d020      	beq.n	80079b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007970:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <HAL_RCC_OscConfig+0x2b0>)
 8007972:	2201      	movs	r2, #1
 8007974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007976:	f7fc fd53 	bl	8004420 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800797e:	f7fc fd4f 	bl	8004420 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e1a5      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007990:	4b46      	ldr	r3, [pc, #280]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0f0      	beq.n	800797e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799c:	4b43      	ldr	r3, [pc, #268]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	4940      	ldr	r1, [pc, #256]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	600b      	str	r3, [r1, #0]
 80079b0:	e015      	b.n	80079de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079b2:	4b3f      	ldr	r3, [pc, #252]	; (8007ab0 <HAL_RCC_OscConfig+0x2b0>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b8:	f7fc fd32 	bl	8004420 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079c0:	f7fc fd2e 	bl	8004420 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e184      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079d2:	4b36      	ldr	r3, [pc, #216]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f0      	bne.n	80079c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d030      	beq.n	8007a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d016      	beq.n	8007a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079f2:	4b30      	ldr	r3, [pc, #192]	; (8007ab4 <HAL_RCC_OscConfig+0x2b4>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f8:	f7fc fd12 	bl	8004420 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a00:	f7fc fd0e 	bl	8004420 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e164      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a12:	4b26      	ldr	r3, [pc, #152]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCC_OscConfig+0x200>
 8007a1e:	e015      	b.n	8007a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a20:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <HAL_RCC_OscConfig+0x2b4>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a26:	f7fc fcfb 	bl	8004420 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a2c:	e008      	b.n	8007a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a2e:	f7fc fcf7 	bl	8004420 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e14d      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a40:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1f0      	bne.n	8007a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80a0 	beq.w	8007b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10f      	bne.n	8007a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	4a0e      	ldr	r2, [pc, #56]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a78:	6413      	str	r3, [r2, #64]	; 0x40
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <HAL_RCC_OscConfig+0x2ac>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a82:	60bb      	str	r3, [r7, #8]
 8007a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <HAL_RCC_OscConfig+0x2b8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d121      	bne.n	8007ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a96:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <HAL_RCC_OscConfig+0x2b8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <HAL_RCC_OscConfig+0x2b8>)
 8007a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aa2:	f7fc fcbd 	bl	8004420 <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa8:	e011      	b.n	8007ace <HAL_RCC_OscConfig+0x2ce>
 8007aaa:	bf00      	nop
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	42470000 	.word	0x42470000
 8007ab4:	42470e80 	.word	0x42470e80
 8007ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007abc:	f7fc fcb0 	bl	8004420 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e106      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ace:	4b85      	ldr	r3, [pc, #532]	; (8007ce4 <HAL_RCC_OscConfig+0x4e4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f0      	beq.n	8007abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d106      	bne.n	8007af0 <HAL_RCC_OscConfig+0x2f0>
 8007ae2:	4b81      	ldr	r3, [pc, #516]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	4a80      	ldr	r2, [pc, #512]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	6713      	str	r3, [r2, #112]	; 0x70
 8007aee:	e01c      	b.n	8007b2a <HAL_RCC_OscConfig+0x32a>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b05      	cmp	r3, #5
 8007af6:	d10c      	bne.n	8007b12 <HAL_RCC_OscConfig+0x312>
 8007af8:	4b7b      	ldr	r3, [pc, #492]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afc:	4a7a      	ldr	r2, [pc, #488]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007afe:	f043 0304 	orr.w	r3, r3, #4
 8007b02:	6713      	str	r3, [r2, #112]	; 0x70
 8007b04:	4b78      	ldr	r3, [pc, #480]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4a77      	ldr	r2, [pc, #476]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b0a:	f043 0301 	orr.w	r3, r3, #1
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b10:	e00b      	b.n	8007b2a <HAL_RCC_OscConfig+0x32a>
 8007b12:	4b75      	ldr	r3, [pc, #468]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	4a74      	ldr	r2, [pc, #464]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1e:	4b72      	ldr	r3, [pc, #456]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	4a71      	ldr	r2, [pc, #452]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b24:	f023 0304 	bic.w	r3, r3, #4
 8007b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d015      	beq.n	8007b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b32:	f7fc fc75 	bl	8004420 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b38:	e00a      	b.n	8007b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b3a:	f7fc fc71 	bl	8004420 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e0c5      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b50:	4b65      	ldr	r3, [pc, #404]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0ee      	beq.n	8007b3a <HAL_RCC_OscConfig+0x33a>
 8007b5c:	e014      	b.n	8007b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b5e:	f7fc fc5f 	bl	8004420 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b64:	e00a      	b.n	8007b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b66:	f7fc fc5b 	bl	8004420 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e0af      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7c:	4b5a      	ldr	r3, [pc, #360]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1ee      	bne.n	8007b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d105      	bne.n	8007b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b8e:	4b56      	ldr	r3, [pc, #344]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	4a55      	ldr	r2, [pc, #340]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 809b 	beq.w	8007cda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ba4:	4b50      	ldr	r3, [pc, #320]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 030c 	and.w	r3, r3, #12
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d05c      	beq.n	8007c6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d141      	bne.n	8007c3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bb8:	4b4c      	ldr	r3, [pc, #304]	; (8007cec <HAL_RCC_OscConfig+0x4ec>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbe:	f7fc fc2f 	bl	8004420 <HAL_GetTick>
 8007bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bc4:	e008      	b.n	8007bd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bc6:	f7fc fc2b 	bl	8004420 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e081      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd8:	4b43      	ldr	r3, [pc, #268]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f0      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69da      	ldr	r2, [r3, #28]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	019b      	lsls	r3, r3, #6
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	061b      	lsls	r3, r3, #24
 8007c08:	4937      	ldr	r1, [pc, #220]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c0e:	4b37      	ldr	r3, [pc, #220]	; (8007cec <HAL_RCC_OscConfig+0x4ec>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c14:	f7fc fc04 	bl	8004420 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c1c:	f7fc fc00 	bl	8004420 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e056      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0x41c>
 8007c3a:	e04e      	b.n	8007cda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c3c:	4b2b      	ldr	r3, [pc, #172]	; (8007cec <HAL_RCC_OscConfig+0x4ec>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c42:	f7fc fbed 	bl	8004420 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c4a:	f7fc fbe9 	bl	8004420 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e03f      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c5c:	4b22      	ldr	r3, [pc, #136]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f0      	bne.n	8007c4a <HAL_RCC_OscConfig+0x44a>
 8007c68:	e037      	b.n	8007cda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e032      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <HAL_RCC_OscConfig+0x4e8>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d028      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d121      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d11a      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d111      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d107      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d001      	beq.n	8007cda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40007000 	.word	0x40007000
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	42470060 	.word	0x42470060

08007cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0cc      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d04:	4b68      	ldr	r3, [pc, #416]	; (8007ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d90c      	bls.n	8007d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d12:	4b65      	ldr	r3, [pc, #404]	; (8007ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1a:	4b63      	ldr	r3, [pc, #396]	; (8007ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d001      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e0b8      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d020      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d44:	4b59      	ldr	r3, [pc, #356]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4a58      	ldr	r2, [pc, #352]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d5c:	4b53      	ldr	r3, [pc, #332]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	4a52      	ldr	r2, [pc, #328]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d68:	4b50      	ldr	r3, [pc, #320]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	494d      	ldr	r1, [pc, #308]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d044      	beq.n	8007e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d107      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d8e:	4b47      	ldr	r3, [pc, #284]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d119      	bne.n	8007dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e07f      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d003      	beq.n	8007dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d107      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dae:	4b3f      	ldr	r3, [pc, #252]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e06f      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dbe:	4b3b      	ldr	r3, [pc, #236]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e067      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dce:	4b37      	ldr	r3, [pc, #220]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f023 0203 	bic.w	r2, r3, #3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	4934      	ldr	r1, [pc, #208]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007de0:	f7fc fb1e 	bl	8004420 <HAL_GetTick>
 8007de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007de6:	e00a      	b.n	8007dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007de8:	f7fc fb1a 	bl	8004420 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e04f      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dfe:	4b2b      	ldr	r3, [pc, #172]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 020c 	and.w	r2, r3, #12
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d1eb      	bne.n	8007de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e10:	4b25      	ldr	r3, [pc, #148]	; (8007ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d20c      	bcs.n	8007e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1e:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e26:	4b20      	ldr	r3, [pc, #128]	; (8007ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d001      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e032      	b.n	8007e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e44:	4b19      	ldr	r3, [pc, #100]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4916      	ldr	r1, [pc, #88]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0308 	and.w	r3, r3, #8
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e62:	4b12      	ldr	r3, [pc, #72]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	490e      	ldr	r1, [pc, #56]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e76:	f000 f82d 	bl	8007ed4 <HAL_RCC_GetSysClockFreq>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	091b      	lsrs	r3, r3, #4
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	490a      	ldr	r1, [pc, #40]	; (8007eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e88:	5ccb      	ldrb	r3, [r1, r3]
 8007e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8e:	4a09      	ldr	r2, [pc, #36]	; (8007eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fc f8d0 	bl	800403c <HAL_InitTick>

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40023c00 	.word	0x40023c00
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	0802fe54 	.word	0x0802fe54
 8007eb4:	20000008 	.word	0x20000008
 8007eb8:	2000000c 	.word	0x2000000c

08007ebc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <HAL_RCC_EnableCSS+0x14>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	4247004c 	.word	0x4247004c

08007ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	607b      	str	r3, [r7, #4]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eec:	4b67      	ldr	r3, [pc, #412]	; (800808c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 030c 	and.w	r3, r3, #12
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d00d      	beq.n	8007f14 <HAL_RCC_GetSysClockFreq+0x40>
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	f200 80bd 	bhi.w	8008078 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_RCC_GetSysClockFreq+0x34>
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d003      	beq.n	8007f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8007f06:	e0b7      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f08:	4b61      	ldr	r3, [pc, #388]	; (8008090 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f0a:	60bb      	str	r3, [r7, #8]
       break;
 8007f0c:	e0b7      	b.n	800807e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f0e:	4b61      	ldr	r3, [pc, #388]	; (8008094 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007f10:	60bb      	str	r3, [r7, #8]
      break;
 8007f12:	e0b4      	b.n	800807e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f14:	4b5d      	ldr	r3, [pc, #372]	; (800808c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f1e:	4b5b      	ldr	r3, [pc, #364]	; (800808c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d04d      	beq.n	8007fc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f2a:	4b58      	ldr	r3, [pc, #352]	; (800808c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	099b      	lsrs	r3, r3, #6
 8007f30:	461a      	mov	r2, r3
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f3a:	f04f 0100 	mov.w	r1, #0
 8007f3e:	ea02 0800 	and.w	r8, r2, r0
 8007f42:	ea03 0901 	and.w	r9, r3, r1
 8007f46:	4640      	mov	r0, r8
 8007f48:	4649      	mov	r1, r9
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	014b      	lsls	r3, r1, #5
 8007f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f58:	0142      	lsls	r2, r0, #5
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	ebb0 0008 	subs.w	r0, r0, r8
 8007f62:	eb61 0109 	sbc.w	r1, r1, r9
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	018b      	lsls	r3, r1, #6
 8007f70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f74:	0182      	lsls	r2, r0, #6
 8007f76:	1a12      	subs	r2, r2, r0
 8007f78:	eb63 0301 	sbc.w	r3, r3, r1
 8007f7c:	f04f 0000 	mov.w	r0, #0
 8007f80:	f04f 0100 	mov.w	r1, #0
 8007f84:	00d9      	lsls	r1, r3, #3
 8007f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f8a:	00d0      	lsls	r0, r2, #3
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	eb12 0208 	adds.w	r2, r2, r8
 8007f94:	eb43 0309 	adc.w	r3, r3, r9
 8007f98:	f04f 0000 	mov.w	r0, #0
 8007f9c:	f04f 0100 	mov.w	r1, #0
 8007fa0:	0259      	lsls	r1, r3, #9
 8007fa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007fa6:	0250      	lsls	r0, r2, #9
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4610      	mov	r0, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	f7f8 fd60 	bl	8000a7c <__aeabi_uldivmod>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e04a      	b.n	800805c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fc6:	4b31      	ldr	r3, [pc, #196]	; (800808c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	099b      	lsrs	r3, r3, #6
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007fd6:	f04f 0100 	mov.w	r1, #0
 8007fda:	ea02 0400 	and.w	r4, r2, r0
 8007fde:	ea03 0501 	and.w	r5, r3, r1
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	014b      	lsls	r3, r1, #5
 8007ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ff4:	0142      	lsls	r2, r0, #5
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	1b00      	subs	r0, r0, r4
 8007ffc:	eb61 0105 	sbc.w	r1, r1, r5
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	018b      	lsls	r3, r1, #6
 800800a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800800e:	0182      	lsls	r2, r0, #6
 8008010:	1a12      	subs	r2, r2, r0
 8008012:	eb63 0301 	sbc.w	r3, r3, r1
 8008016:	f04f 0000 	mov.w	r0, #0
 800801a:	f04f 0100 	mov.w	r1, #0
 800801e:	00d9      	lsls	r1, r3, #3
 8008020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008024:	00d0      	lsls	r0, r2, #3
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	1912      	adds	r2, r2, r4
 800802c:	eb45 0303 	adc.w	r3, r5, r3
 8008030:	f04f 0000 	mov.w	r0, #0
 8008034:	f04f 0100 	mov.w	r1, #0
 8008038:	0299      	lsls	r1, r3, #10
 800803a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800803e:	0290      	lsls	r0, r2, #10
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4610      	mov	r0, r2
 8008046:	4619      	mov	r1, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	461a      	mov	r2, r3
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	f7f8 fd14 	bl	8000a7c <__aeabi_uldivmod>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4613      	mov	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	3301      	adds	r3, #1
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	60bb      	str	r3, [r7, #8]
      break;
 8008076:	e002      	b.n	800807e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008078:	4b05      	ldr	r3, [pc, #20]	; (8008090 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800807a:	60bb      	str	r3, [r7, #8]
      break;
 800807c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800807e:	68bb      	ldr	r3, [r7, #8]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800808a:	bf00      	nop
 800808c:	40023800 	.word	0x40023800
 8008090:	00f42400 	.word	0x00f42400
 8008094:	007a1200 	.word	0x007a1200

08008098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800809c:	4b03      	ldr	r3, [pc, #12]	; (80080ac <HAL_RCC_GetHCLKFreq+0x14>)
 800809e:	681b      	ldr	r3, [r3, #0]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20000008 	.word	0x20000008

080080b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080b4:	f7ff fff0 	bl	8008098 <HAL_RCC_GetHCLKFreq>
 80080b8:	4602      	mov	r2, r0
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	0a9b      	lsrs	r3, r3, #10
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	4903      	ldr	r1, [pc, #12]	; (80080d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080c6:	5ccb      	ldrb	r3, [r1, r3]
 80080c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40023800 	.word	0x40023800
 80080d4:	0802fe64 	.word	0x0802fe64

080080d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	220f      	movs	r2, #15
 80080e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <HAL_RCC_GetClockConfig+0x5c>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 0203 	and.w	r2, r3, #3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <HAL_RCC_GetClockConfig+0x5c>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008100:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <HAL_RCC_GetClockConfig+0x5c>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <HAL_RCC_GetClockConfig+0x5c>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	08db      	lsrs	r3, r3, #3
 8008112:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <HAL_RCC_GetClockConfig+0x60>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 020f 	and.w	r2, r3, #15
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	601a      	str	r2, [r3, #0]
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40023800 	.word	0x40023800
 8008138:	40023c00 	.word	0x40023c00

0800813c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <HAL_RCC_NMI_IRQHandler+0x20>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d104      	bne.n	8008156 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800814c:	f000 f80a 	bl	8008164 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008150:	4b03      	ldr	r3, [pc, #12]	; (8008160 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008152:	2280      	movs	r2, #128	; 0x80
 8008154:	701a      	strb	r2, [r3, #0]
  }
}
 8008156:	bf00      	nop
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	40023800 	.word	0x40023800
 8008160:	4002380e 	.word	0x4002380e

08008164 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008198:	2b00      	cmp	r3, #0
 800819a:	d105      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d075      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081a8:	4bad      	ldr	r3, [pc, #692]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081ae:	f7fc f937 	bl	8004420 <HAL_GetTick>
 80081b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081b4:	e008      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081b6:	f7fc f933 	bl	8004420 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e18b      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081c8:	4ba6      	ldr	r3, [pc, #664]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f0      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d009      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	019a      	lsls	r2, r3, #6
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	071b      	lsls	r3, r3, #28
 80081ec:	499d      	ldr	r1, [pc, #628]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01f      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008200:	4b98      	ldr	r3, [pc, #608]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008206:	0f1b      	lsrs	r3, r3, #28
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	019a      	lsls	r2, r3, #6
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	061b      	lsls	r3, r3, #24
 800821a:	431a      	orrs	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	071b      	lsls	r3, r3, #28
 8008220:	4990      	ldr	r1, [pc, #576]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008222:	4313      	orrs	r3, r2
 8008224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008228:	4b8e      	ldr	r3, [pc, #568]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800822a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822e:	f023 021f 	bic.w	r2, r3, #31
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	3b01      	subs	r3, #1
 8008238:	498a      	ldr	r1, [pc, #552]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800823a:	4313      	orrs	r3, r2
 800823c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00d      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	019a      	lsls	r2, r3, #6
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	061b      	lsls	r3, r3, #24
 8008258:	431a      	orrs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	071b      	lsls	r3, r3, #28
 8008260:	4980      	ldr	r1, [pc, #512]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008268:	4b7d      	ldr	r3, [pc, #500]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800826a:	2201      	movs	r2, #1
 800826c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800826e:	f7fc f8d7 	bl	8004420 <HAL_GetTick>
 8008272:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008274:	e008      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008276:	f7fc f8d3 	bl	8004420 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e12b      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008288:	4b76      	ldr	r3, [pc, #472]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0f0      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d079      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082ac:	4b6e      	ldr	r3, [pc, #440]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082b2:	f7fc f8b5 	bl	8004420 <HAL_GetTick>
 80082b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082b8:	e008      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80082ba:	f7fc f8b1 	bl	8004420 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e109      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082cc:	4b65      	ldr	r3, [pc, #404]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d8:	d0ef      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0304 	and.w	r3, r3, #4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d020      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082e6:	4b5f      	ldr	r3, [pc, #380]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ec:	0f1b      	lsrs	r3, r3, #28
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	019a      	lsls	r2, r3, #6
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	061b      	lsls	r3, r3, #24
 8008300:	431a      	orrs	r2, r3
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	071b      	lsls	r3, r3, #28
 8008306:	4957      	ldr	r1, [pc, #348]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008308:	4313      	orrs	r3, r2
 800830a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800830e:	4b55      	ldr	r3, [pc, #340]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008314:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	3b01      	subs	r3, #1
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	4950      	ldr	r1, [pc, #320]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01e      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008334:	4b4b      	ldr	r3, [pc, #300]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833a:	0e1b      	lsrs	r3, r3, #24
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	019a      	lsls	r2, r3, #6
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	071b      	lsls	r3, r3, #28
 8008354:	4943      	ldr	r1, [pc, #268]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800835c:	4b41      	ldr	r3, [pc, #260]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800835e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008362:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	493e      	ldr	r1, [pc, #248]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800836c:	4313      	orrs	r3, r2
 800836e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008372:	4b3d      	ldr	r3, [pc, #244]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008378:	f7fc f852 	bl	8004420 <HAL_GetTick>
 800837c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800837e:	e008      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008380:	f7fc f84e 	bl	8004420 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d901      	bls.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e0a6      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008392:	4b34      	ldr	r3, [pc, #208]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800839a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800839e:	d1ef      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 808d 	beq.w	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	4b2c      	ldr	r3, [pc, #176]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	4a2b      	ldr	r2, [pc, #172]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083bc:	6413      	str	r3, [r2, #64]	; 0x40
 80083be:	4b29      	ldr	r3, [pc, #164]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80083ca:	4b28      	ldr	r3, [pc, #160]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a27      	ldr	r2, [pc, #156]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083d6:	f7fc f823 	bl	8004420 <HAL_GetTick>
 80083da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083dc:	e008      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083de:	f7fc f81f 	bl	8004420 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d901      	bls.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e077      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083f0:	4b1e      	ldr	r3, [pc, #120]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f0      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008404:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d039      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	429a      	cmp	r2, r3
 8008418:	d032      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008422:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008426:	2201      	movs	r2, #1
 8008428:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800842a:	4b11      	ldr	r3, [pc, #68]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008430:	4a0c      	ldr	r2, [pc, #48]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d11e      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008442:	f7fb ffed 	bl	8004420 <HAL_GetTick>
 8008446:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008448:	e014      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800844a:	f7fb ffe9 	bl	8004420 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	f241 3288 	movw	r2, #5000	; 0x1388
 8008458:	4293      	cmp	r3, r2
 800845a:	d90b      	bls.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e03f      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008460:	42470068 	.word	0x42470068
 8008464:	40023800 	.word	0x40023800
 8008468:	42470070 	.word	0x42470070
 800846c:	40007000 	.word	0x40007000
 8008470:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0e4      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848c:	d10d      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800849e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a2:	4911      	ldr	r1, [pc, #68]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	608b      	str	r3, [r1, #8]
 80084a8:	e005      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80084aa:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	4a0e      	ldr	r2, [pc, #56]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084b4:	6093      	str	r3, [r2, #8]
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c2:	4909      	ldr	r1, [pc, #36]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80084da:	4b04      	ldr	r3, [pc, #16]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40023800 	.word	0x40023800
 80084ec:	424711e0 	.word	0x424711e0

080084f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e022      	b.n	8008548 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fb fb6d 	bl	8003bf4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2203      	movs	r2, #3
 800851e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f814 	bl	8008550 <HAL_SD_InitCard>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e00a      	b.n	8008548 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008550:	b5b0      	push	{r4, r5, r7, lr}
 8008552:	b08e      	sub	sp, #56	; 0x38
 8008554:	af04      	add	r7, sp, #16
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008558:	2300      	movs	r3, #0
 800855a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008568:	2300      	movs	r3, #0
 800856a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800856c:	2376      	movs	r3, #118	; 0x76
 800856e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681d      	ldr	r5, [r3, #0]
 8008574:	466c      	mov	r4, sp
 8008576:	f107 0314 	add.w	r3, r7, #20
 800857a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800857e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008582:	f107 0308 	add.w	r3, r7, #8
 8008586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008588:	4628      	mov	r0, r5
 800858a:	f002 fd27 	bl	800afdc <SDIO_Init>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e04c      	b.n	800863a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80085a0:	4b28      	ldr	r3, [pc, #160]	; (8008644 <HAL_SD_InitCard+0xf4>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fd4e 	bl	800b04c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80085b0:	4b24      	ldr	r3, [pc, #144]	; (8008644 <HAL_SD_InitCard+0xf4>)
 80085b2:	2201      	movs	r2, #1
 80085b4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fe10 	bl	80091dc <SD_PowerON>
 80085bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e02e      	b.n	800863a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fd31 	bl	8009044 <SD_InitCard>
 80085e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e01b      	b.n	800863a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800860a:	4618      	mov	r0, r3
 800860c:	f002 fdb1 	bl	800b172 <SDMMC_CmdBlockLength>
 8008610:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00f      	beq.n	8008638 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <HAL_SD_InitCard+0xf8>)
 800861e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3728      	adds	r7, #40	; 0x28
 800863e:	46bd      	mov	sp, r7
 8008640:	bdb0      	pop	{r4, r5, r7, pc}
 8008642:	bf00      	nop
 8008644:	422580a0 	.word	0x422580a0
 8008648:	004005ff 	.word	0x004005ff

0800864c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08c      	sub	sp, #48	; 0x30
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d107      	bne.n	8008674 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e0c0      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	f040 80b9 	bne.w	80087f4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	441a      	add	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008692:	429a      	cmp	r2, r3
 8008694:	d907      	bls.n	80086a6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e0a7      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2203      	movs	r2, #3
 80086aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2200      	movs	r2, #0
 80086b4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80086c4:	f043 0302 	orr.w	r3, r3, #2
 80086c8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	4a4c      	ldr	r2, [pc, #304]	; (8008800 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80086d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	4a4b      	ldr	r2, [pc, #300]	; (8008804 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80086d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	2200      	movs	r2, #0
 80086e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3380      	adds	r3, #128	; 0x80
 8008710:	4619      	mov	r1, r3
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	025b      	lsls	r3, r3, #9
 8008718:	089b      	lsrs	r3, r3, #2
 800871a:	f7fc fdc9 	bl	80052b0 <HAL_DMA_Start_IT>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d017      	beq.n	8008754 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008732:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a33      	ldr	r2, [pc, #204]	; (8008808 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800873a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e050      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008754:	4b2d      	ldr	r3, [pc, #180]	; (800880c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875e:	2b01      	cmp	r3, #1
 8008760:	d002      	beq.n	8008768 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	025b      	lsls	r3, r3, #9
 8008766:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	025b      	lsls	r3, r3, #9
 8008772:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008774:	2390      	movs	r3, #144	; 0x90
 8008776:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008778:	2302      	movs	r3, #2
 800877a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800877c:	2300      	movs	r3, #0
 800877e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008780:	2301      	movs	r3, #1
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f107 0210 	add.w	r2, r7, #16
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f002 fcc3 	bl	800b11a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d90a      	bls.n	80087b0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2282      	movs	r2, #130	; 0x82
 800879e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a6:	4618      	mov	r0, r3
 80087a8:	f002 fd27 	bl	800b1fa <SDMMC_CmdReadMultiBlock>
 80087ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80087ae:	e009      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2281      	movs	r2, #129	; 0x81
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 fcfa 	bl	800b1b6 <SDMMC_CmdReadSingleBlock>
 80087c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d012      	beq.n	80087f0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	431a      	orrs	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e002      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e000      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3730      	adds	r7, #48	; 0x30
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	08008f2f 	.word	0x08008f2f
 8008804:	08008fa1 	.word	0x08008fa1
 8008808:	004005ff 	.word	0x004005ff
 800880c:	4225858c 	.word	0x4225858c

08008810 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d107      	bne.n	8008838 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e0c5      	b.n	80089c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	f040 80be 	bne.w	80089c2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800884c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	441a      	add	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008856:	429a      	cmp	r2, r3
 8008858:	d907      	bls.n	800886a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0ac      	b.n	80089c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2203      	movs	r2, #3
 800886e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2200      	movs	r2, #0
 8008878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008888:	f043 0302 	orr.w	r3, r3, #2
 800888c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008892:	4a4e      	ldr	r2, [pc, #312]	; (80089cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	4a4d      	ldr	r2, [pc, #308]	; (80089d0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800889c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a2:	2200      	movs	r2, #0
 80088a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d002      	beq.n	80088b4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	025b      	lsls	r3, r3, #9
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d90a      	bls.n	80088d0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	22a0      	movs	r2, #160	; 0xa0
 80088be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 fcdb 	bl	800b282 <SDMMC_CmdWriteMultiBlock>
 80088cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088ce:	e009      	b.n	80088e4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2290      	movs	r2, #144	; 0x90
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088dc:	4618      	mov	r0, r3
 80088de:	f002 fcae 	bl	800b23e <SDMMC_CmdWriteSingleBlock>
 80088e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d012      	beq.n	8008910 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a39      	ldr	r2, [pc, #228]	; (80089d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	431a      	orrs	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e059      	b.n	80089c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008910:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	2240      	movs	r2, #64	; 0x40
 800891c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3380      	adds	r3, #128	; 0x80
 8008946:	461a      	mov	r2, r3
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	025b      	lsls	r3, r3, #9
 800894c:	089b      	lsrs	r3, r3, #2
 800894e:	f7fc fcaf 	bl	80052b0 <HAL_DMA_Start_IT>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01c      	beq.n	8008992 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008966:	f023 0302 	bic.w	r3, r3, #2
 800896a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e018      	b.n	80089c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008992:	f04f 33ff 	mov.w	r3, #4294967295
 8008996:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	025b      	lsls	r3, r3, #9
 800899c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800899e:	2390      	movs	r3, #144	; 0x90
 80089a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80089aa:	2301      	movs	r3, #1
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f107 0210 	add.w	r2, r7, #16
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f002 fbae 	bl	800b11a <SDIO_ConfigData>

      return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3730      	adds	r7, #48	; 0x30
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	08008f05 	.word	0x08008f05
 80089d0:	08008fa1 	.word	0x08008fa1
 80089d4:	004005ff 	.word	0x004005ff
 80089d8:	4225858c 	.word	0x4225858c

080089dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089fe:	0f9b      	lsrs	r3, r3, #30
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0a:	0e9b      	lsrs	r3, r3, #26
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1c:	0e1b      	lsrs	r3, r3, #24
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a2e:	0c1b      	lsrs	r3, r3, #16
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a50:	0d1b      	lsrs	r3, r3, #20
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	0c1b      	lsrs	r3, r3, #16
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6e:	0bdb      	lsrs	r3, r3, #15
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a80:	0b9b      	lsrs	r3, r3, #14
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a92:	0b5b      	lsrs	r3, r3, #13
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa4:	0b1b      	lsrs	r3, r3, #12
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d163      	bne.n	8008b88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac4:	009a      	lsls	r2, r3, #2
 8008ac6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008aca:	4013      	ands	r3, r2
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008ad0:	0f92      	lsrs	r2, r2, #30
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008adc:	0edb      	lsrs	r3, r3, #27
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aee:	0e1b      	lsrs	r3, r3, #24
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b00:	0d5b      	lsrs	r3, r3, #21
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b12:	0c9b      	lsrs	r3, r3, #18
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b24:	0bdb      	lsrs	r3, r3, #15
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	7e1b      	ldrb	r3, [r3, #24]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	3302      	adds	r3, #2
 8008b48:	2201      	movs	r2, #1
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b52:	fb02 f203 	mul.w	r2, r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	7a1b      	ldrb	r3, [r3, #8]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	2201      	movs	r2, #1
 8008b66:	409a      	lsls	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b74:	0a52      	lsrs	r2, r2, #9
 8008b76:	fb02 f203 	mul.w	r2, r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b84:	661a      	str	r2, [r3, #96]	; 0x60
 8008b86:	e031      	b.n	8008bec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d11d      	bne.n	8008bcc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b94:	041b      	lsls	r3, r3, #16
 8008b96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	3301      	adds	r3, #1
 8008bac:	029a      	lsls	r2, r3, #10
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	661a      	str	r2, [r3, #96]	; 0x60
 8008bca:	e00f      	b.n	8008bec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a58      	ldr	r2, [pc, #352]	; (8008d34 <HAL_SD_GetCardCSD+0x344>)
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e09d      	b.n	8008d28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf0:	0b9b      	lsrs	r3, r3, #14
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c02:	09db      	lsrs	r3, r3, #7
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c24:	0fdb      	lsrs	r3, r3, #31
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	0f5b      	lsrs	r3, r3, #29
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c42:	0e9b      	lsrs	r3, r3, #26
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	0d9b      	lsrs	r3, r3, #22
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	0d5b      	lsrs	r3, r3, #21
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	0bdb      	lsrs	r3, r3, #15
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	0b9b      	lsrs	r3, r3, #14
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	0b5b      	lsrs	r3, r3, #13
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	0b1b      	lsrs	r3, r3, #12
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	0a9b      	lsrs	r3, r3, #10
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	004005ff 	.word	0x004005ff

08008d38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d90:	b5b0      	push	{r4, r5, r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2203      	movs	r2, #3
 8008da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d02e      	beq.n	8008e0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008db6:	d106      	bne.n	8008dc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8008dc4:	e029      	b.n	8008e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dcc:	d10a      	bne.n	8008de4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 faba 	bl	8009348 <SD_WideBus_Enable>
 8008dd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	639a      	str	r2, [r3, #56]	; 0x38
 8008de2:	e01a      	b.n	8008e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 faf7 	bl	80093de <SD_WideBus_Disable>
 8008df0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8008dfe:	e00c      	b.n	8008e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8008e0c:	e005      	b.n	8008e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e38:	e01f      	b.n	8008e7a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681d      	ldr	r5, [r3, #0]
 8008e60:	466c      	mov	r4, sp
 8008e62:	f107 0314 	add.w	r3, r7, #20
 8008e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e6e:	f107 0308 	add.w	r3, r7, #8
 8008e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e74:	4628      	mov	r0, r5
 8008e76:	f002 f8b1 	bl	800afdc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e82:	4618      	mov	r0, r3
 8008e84:	f002 f975 	bl	800b172 <SDMMC_CmdBlockLength>
 8008e88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00c      	beq.n	8008eaa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3728      	adds	r7, #40	; 0x28
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	004005ff 	.word	0x004005ff

08008ec4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ed0:	f107 030c 	add.w	r3, r7, #12
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa0e 	bl	80092f8 <SD_SendStatus>
 8008edc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	0a5b      	lsrs	r3, r3, #9
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008efa:	693b      	ldr	r3, [r7, #16]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f20:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f40:	2b82      	cmp	r3, #130	; 0x82
 8008f42:	d111      	bne.n	8008f68 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f002 f9bd 	bl	800b2c8 <SDMMC_CmdStopTransfer>
 8008f4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d008      	beq.n	8008f68 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff fd3a 	bl	80089dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0208 	bic.w	r2, r2, #8
 8008f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f002 fe11 	bl	800bbb8 <HAL_SD_RxCpltCallback>
#endif
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7fc fb60 	bl	8005674 <HAL_DMA_GetError>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d03e      	beq.n	8009038 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d002      	beq.n	8008fd6 <SD_DMAError+0x36>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d12d      	bne.n	8009032 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a19      	ldr	r2, [pc, #100]	; (8009040 <SD_DMAError+0xa0>)
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008fec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008ffa:	6978      	ldr	r0, [r7, #20]
 8008ffc:	f7ff ff62 	bl	8008ec4 <HAL_SD_GetCardState>
 8009000:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b06      	cmp	r3, #6
 8009006:	d002      	beq.n	800900e <SD_DMAError+0x6e>
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b05      	cmp	r3, #5
 800900c:	d10a      	bne.n	8009024 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f002 f958 	bl	800b2c8 <SDMMC_CmdStopTransfer>
 8009018:	4602      	mov	r2, r0
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	431a      	orrs	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2200      	movs	r2, #0
 8009030:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009032:	6978      	ldr	r0, [r7, #20]
 8009034:	f7ff fcd2 	bl	80089dc <HAL_SD_ErrorCallback>
#endif
  }
}
 8009038:	bf00      	nop
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	004005ff 	.word	0x004005ff

08009044 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009044:	b5b0      	push	{r4, r5, r7, lr}
 8009046:	b094      	sub	sp, #80	; 0x50
 8009048:	af04      	add	r7, sp, #16
 800904a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800904c:	2301      	movs	r3, #1
 800904e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f002 f808 	bl	800b06a <SDIO_GetPowerState>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009060:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009064:	e0b6      	b.n	80091d4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906a:	2b03      	cmp	r3, #3
 800906c:	d02f      	beq.n	80090ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4618      	mov	r0, r3
 8009074:	f002 fa32 	bl	800b4dc <SDMMC_CmdSendCID>
 8009078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800907a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <SD_InitCard+0x40>
    {
      return errorstate;
 8009080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009082:	e0a7      	b.n	80091d4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f002 f832 	bl	800b0f4 <SDIO_GetResponse>
 8009090:	4602      	mov	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2104      	movs	r1, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f002 f829 	bl	800b0f4 <SDIO_GetResponse>
 80090a2:	4602      	mov	r2, r0
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2108      	movs	r1, #8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f002 f820 	bl	800b0f4 <SDIO_GetResponse>
 80090b4:	4602      	mov	r2, r0
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	210c      	movs	r1, #12
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 f817 	bl	800b0f4 <SDIO_GetResponse>
 80090c6:	4602      	mov	r2, r0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d00d      	beq.n	80090f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f107 020e 	add.w	r2, r7, #14
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f002 fa38 	bl	800b556 <SDMMC_CmdSetRelAdd>
 80090e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80090ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f0:	e070      	b.n	80091d4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d036      	beq.n	8009168 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80090fa:	89fb      	ldrh	r3, [r7, #14]
 80090fc:	461a      	mov	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910a:	041b      	lsls	r3, r3, #16
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f002 fa02 	bl	800b518 <SDMMC_CmdSendCSD>
 8009114:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <SD_InitCard+0xdc>
    {
      return errorstate;
 800911c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911e:	e059      	b.n	80091d4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2100      	movs	r1, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f001 ffe4 	bl	800b0f4 <SDIO_GetResponse>
 800912c:	4602      	mov	r2, r0
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2104      	movs	r1, #4
 8009138:	4618      	mov	r0, r3
 800913a:	f001 ffdb 	bl	800b0f4 <SDIO_GetResponse>
 800913e:	4602      	mov	r2, r0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2108      	movs	r1, #8
 800914a:	4618      	mov	r0, r3
 800914c:	f001 ffd2 	bl	800b0f4 <SDIO_GetResponse>
 8009150:	4602      	mov	r2, r0
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	210c      	movs	r1, #12
 800915c:	4618      	mov	r0, r3
 800915e:	f001 ffc9 	bl	800b0f4 <SDIO_GetResponse>
 8009162:	4602      	mov	r2, r0
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2104      	movs	r1, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f001 ffc0 	bl	800b0f4 <SDIO_GetResponse>
 8009174:	4603      	mov	r3, r0
 8009176:	0d1a      	lsrs	r2, r3, #20
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800917c:	f107 0310 	add.w	r3, r7, #16
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fc34 	bl	80089f0 <HAL_SD_GetCardCSD>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800918e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009192:	e01f      	b.n	80091d4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6819      	ldr	r1, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	461a      	mov	r2, r3
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	4608      	mov	r0, r1
 80091a6:	f002 f8b1 	bl	800b30c <SDMMC_CmdSelDesel>
 80091aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <SD_InitCard+0x172>
  {
    return errorstate;
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	e00e      	b.n	80091d4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	466c      	mov	r4, sp
 80091be:	f103 0210 	add.w	r2, r3, #16
 80091c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80091c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091c8:	3304      	adds	r3, #4
 80091ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091cc:	4628      	mov	r0, r5
 80091ce:	f001 ff05 	bl	800afdc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3740      	adds	r7, #64	; 0x40
 80091d8:	46bd      	mov	sp, r7
 80091da:	bdb0      	pop	{r4, r5, r7, pc}

080091dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 f8ac 	bl	800b352 <SDMMC_CmdGoIdleState>
 80091fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	e072      	b.n	80092ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f002 f8bf 	bl	800b38e <SDMMC_CmdOperCond>
 8009210:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00d      	beq.n	8009234 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f002 f895 	bl	800b352 <SDMMC_CmdGoIdleState>
 8009228:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	e05b      	b.n	80092ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923e:	2b01      	cmp	r3, #1
 8009240:	d137      	bne.n	80092b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f002 f8bf 	bl	800b3cc <SDMMC_CmdAppCommand>
 800924e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02d      	beq.n	80092b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800925a:	e047      	b.n	80092ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f002 f8b2 	bl	800b3cc <SDMMC_CmdAppCommand>
 8009268:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <SD_PowerON+0x98>
    {
      return errorstate;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	e03b      	b.n	80092ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	491e      	ldr	r1, [pc, #120]	; (80092f4 <SD_PowerON+0x118>)
 800927a:	4618      	mov	r0, r3
 800927c:	f002 f8c8 	bl	800b410 <SDMMC_CmdAppOperCommand>
 8009280:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009288:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800928c:	e02e      	b.n	80092ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f001 ff2d 	bl	800b0f4 <SDIO_GetResponse>
 800929a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	0fdb      	lsrs	r3, r3, #31
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <SD_PowerON+0xcc>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <SD_PowerON+0xce>
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]

    count++;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	3301      	adds	r3, #1
 80092b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d802      	bhi.n	80092c2 <SD_PowerON+0xe6>
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0cc      	beq.n	800925c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d902      	bls.n	80092d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092d0:	e00c      	b.n	80092ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
 80092e2:	e002      	b.n	80092ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	c1100000 	.word	0xc1100000

080092f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800930c:	e018      	b.n	8009340 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f002 f93c 	bl	800b598 <SDMMC_CmdSendStatus>
 8009320:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	e009      	b.n	8009340 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fede 	bl	800b0f4 <SDIO_GetResponse>
 8009338:	4602      	mov	r2, r0
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f001 fec8 	bl	800b0f4 <SDIO_GetResponse>
 8009364:	4603      	mov	r3, r0
 8009366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936e:	d102      	bne.n	8009376 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009374:	e02f      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009376:	f107 030c 	add.w	r3, r7, #12
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f879 	bl	8009474 <SD_FindSCR>
 8009382:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	e023      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01c      	beq.n	80093d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f002 f811 	bl	800b3cc <SDMMC_CmdAppCommand>
 80093aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e00f      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2102      	movs	r1, #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 f84a 	bl	800b456 <SDMMC_CmdBusWidth>
 80093c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	e003      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e001      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 fe7d 	bl	800b0f4 <SDIO_GetResponse>
 80093fa:	4603      	mov	r3, r0
 80093fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009404:	d102      	bne.n	800940c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800940a:	e02f      	b.n	800946c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f82e 	bl	8009474 <SD_FindSCR>
 8009418:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	e023      	b.n	800946c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01c      	beq.n	8009468 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f001 ffc6 	bl	800b3cc <SDMMC_CmdAppCommand>
 8009440:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	e00f      	b.n	800946c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f001 ffff 	bl	800b456 <SDMMC_CmdBusWidth>
 8009458:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	e003      	b.n	800946c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009464:	2300      	movs	r3, #0
 8009466:	e001      	b.n	800946c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009468:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b08f      	sub	sp, #60	; 0x3c
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800947e:	f7fa ffcf 	bl	8004420 <HAL_GetTick>
 8009482:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009488:	2300      	movs	r3, #0
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2108      	movs	r1, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f001 fe69 	bl	800b172 <SDMMC_CmdBlockLength>
 80094a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	e0b2      	b.n	8009612 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f001 ff87 	bl	800b3cc <SDMMC_CmdAppCommand>
 80094be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	e0a3      	b.n	8009612 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094ca:	f04f 33ff 	mov.w	r3, #4294967295
 80094ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80094d0:	2308      	movs	r3, #8
 80094d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80094d4:	2330      	movs	r3, #48	; 0x30
 80094d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80094d8:	2302      	movs	r3, #2
 80094da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80094dc:	2300      	movs	r3, #0
 80094de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f107 0210 	add.w	r2, r7, #16
 80094ec:	4611      	mov	r1, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 fe13 	bl	800b11a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 ffce 	bl	800b49a <SDMMC_CmdSendSCR>
 80094fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	2b00      	cmp	r3, #0
 8009504:	d02a      	beq.n	800955c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	e083      	b.n	8009612 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00f      	beq.n	8009538 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	f107 0208 	add.w	r2, r7, #8
 8009524:	18d4      	adds	r4, r2, r3
 8009526:	4608      	mov	r0, r1
 8009528:	f001 fd83 	bl	800b032 <SDIO_ReadFIFO>
 800952c:	4603      	mov	r3, r0
 800952e:	6023      	str	r3, [r4, #0]
      index++;
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	3301      	adds	r3, #1
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
 8009536:	e006      	b.n	8009546 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d012      	beq.n	800956c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009546:	f7fa ff6b 	bl	8004420 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009554:	d102      	bne.n	800955c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009556:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800955a:	e05a      	b.n	8009612 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0cf      	beq.n	800950a <SD_FindSCR+0x96>
 800956a:	e000      	b.n	800956e <SD_FindSCR+0xfa>
      break;
 800956c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2208      	movs	r2, #8
 8009582:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009584:	2308      	movs	r3, #8
 8009586:	e044      	b.n	8009612 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d005      	beq.n	80095a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2202      	movs	r2, #2
 800959c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800959e:	2302      	movs	r3, #2
 80095a0:	e037      	b.n	8009612 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2220      	movs	r2, #32
 80095b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80095b8:	2320      	movs	r3, #32
 80095ba:	e02a      	b.n	8009612 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	061a      	lsls	r2, r3, #24
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	0e1b      	lsrs	r3, r3, #24
 80095e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	601a      	str	r2, [r3, #0]
    scr++;
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	3304      	adds	r3, #4
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	061a      	lsls	r2, r3, #24
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009604:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	0e1b      	lsrs	r3, r3, #24
 800960a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	373c      	adds	r7, #60	; 0x3c
 8009616:	46bd      	mov	sp, r7
 8009618:	bd90      	pop	{r4, r7, pc}

0800961a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e025      	b.n	800967a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fa fcf0 	bl	8004028 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f001 fb90 	bl	800ad80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	461a      	mov	r2, r3
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	f001 fbfb 	bl	800ae66 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b01      	cmp	r3, #1
 8009696:	d10a      	bne.n	80096ae <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f80c 	bl	80096b6 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	695a      	ldr	r2, [r3, #20]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	615a      	str	r2, [r3, #20]
  }
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d101      	bne.n	80096e6 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
 80096e4:	e018      	b.n	8009718 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2202      	movs	r2, #2
 80096ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fc34 	bl	800af64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d104      	bne.n	800970e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2205      	movs	r2, #5
 8009708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800970c:	e003      	b.n	8009716 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e041      	b.n	80097b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d106      	bne.n	800974c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fa fabc 	bl	8003cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3304      	adds	r3, #4
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f000 ff1c 	bl	800a59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d001      	beq.n	80097d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e04e      	b.n	8009876 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f042 0201 	orr.w	r2, r2, #1
 80097ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a23      	ldr	r2, [pc, #140]	; (8009884 <HAL_TIM_Base_Start_IT+0xc4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d022      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009802:	d01d      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1f      	ldr	r2, [pc, #124]	; (8009888 <HAL_TIM_Base_Start_IT+0xc8>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d018      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1e      	ldr	r2, [pc, #120]	; (800988c <HAL_TIM_Base_Start_IT+0xcc>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d013      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1c      	ldr	r2, [pc, #112]	; (8009890 <HAL_TIM_Base_Start_IT+0xd0>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00e      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a1b      	ldr	r2, [pc, #108]	; (8009894 <HAL_TIM_Base_Start_IT+0xd4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d009      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a19      	ldr	r2, [pc, #100]	; (8009898 <HAL_TIM_Base_Start_IT+0xd8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d004      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x80>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a18      	ldr	r2, [pc, #96]	; (800989c <HAL_TIM_Base_Start_IT+0xdc>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d111      	bne.n	8009864 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b06      	cmp	r3, #6
 8009850:	d010      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0201 	orr.w	r2, r2, #1
 8009860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009862:	e007      	b.n	8009874 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	40010000 	.word	0x40010000
 8009888:	40000400 	.word	0x40000400
 800988c:	40000800 	.word	0x40000800
 8009890:	40000c00 	.word	0x40000c00
 8009894:	40010400 	.word	0x40010400
 8009898:	40014000 	.word	0x40014000
 800989c:	40001800 	.word	0x40001800

080098a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e041      	b.n	8009936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fa fa66 	bl	8003d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3304      	adds	r3, #4
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	f000 fe5c 	bl	800a59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d109      	bne.n	8009964 <HAL_TIM_PWM_Start+0x24>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b01      	cmp	r3, #1
 800995a:	bf14      	ite	ne
 800995c:	2301      	movne	r3, #1
 800995e:	2300      	moveq	r3, #0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	e022      	b.n	80099aa <HAL_TIM_PWM_Start+0x6a>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b04      	cmp	r3, #4
 8009968:	d109      	bne.n	800997e <HAL_TIM_PWM_Start+0x3e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b01      	cmp	r3, #1
 8009974:	bf14      	ite	ne
 8009976:	2301      	movne	r3, #1
 8009978:	2300      	moveq	r3, #0
 800997a:	b2db      	uxtb	r3, r3
 800997c:	e015      	b.n	80099aa <HAL_TIM_PWM_Start+0x6a>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b08      	cmp	r3, #8
 8009982:	d109      	bne.n	8009998 <HAL_TIM_PWM_Start+0x58>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b01      	cmp	r3, #1
 800998e:	bf14      	ite	ne
 8009990:	2301      	movne	r3, #1
 8009992:	2300      	moveq	r3, #0
 8009994:	b2db      	uxtb	r3, r3
 8009996:	e008      	b.n	80099aa <HAL_TIM_PWM_Start+0x6a>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	bf14      	ite	ne
 80099a4:	2301      	movne	r3, #1
 80099a6:	2300      	moveq	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e07c      	b.n	8009aac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d104      	bne.n	80099c2 <HAL_TIM_PWM_Start+0x82>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099c0:	e013      	b.n	80099ea <HAL_TIM_PWM_Start+0xaa>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d104      	bne.n	80099d2 <HAL_TIM_PWM_Start+0x92>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099d0:	e00b      	b.n	80099ea <HAL_TIM_PWM_Start+0xaa>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d104      	bne.n	80099e2 <HAL_TIM_PWM_Start+0xa2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099e0:	e003      	b.n	80099ea <HAL_TIM_PWM_Start+0xaa>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2202      	movs	r2, #2
 80099e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2201      	movs	r2, #1
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 f8bc 	bl	800ab70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a2d      	ldr	r2, [pc, #180]	; (8009ab4 <HAL_TIM_PWM_Start+0x174>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d004      	beq.n	8009a0c <HAL_TIM_PWM_Start+0xcc>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a2c      	ldr	r2, [pc, #176]	; (8009ab8 <HAL_TIM_PWM_Start+0x178>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d101      	bne.n	8009a10 <HAL_TIM_PWM_Start+0xd0>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e000      	b.n	8009a12 <HAL_TIM_PWM_Start+0xd2>
 8009a10:	2300      	movs	r3, #0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d007      	beq.n	8009a26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a22      	ldr	r2, [pc, #136]	; (8009ab4 <HAL_TIM_PWM_Start+0x174>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d022      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a38:	d01d      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a1f      	ldr	r2, [pc, #124]	; (8009abc <HAL_TIM_PWM_Start+0x17c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d018      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a1d      	ldr	r2, [pc, #116]	; (8009ac0 <HAL_TIM_PWM_Start+0x180>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d013      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <HAL_TIM_PWM_Start+0x184>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d00e      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a16      	ldr	r2, [pc, #88]	; (8009ab8 <HAL_TIM_PWM_Start+0x178>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d009      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a18      	ldr	r2, [pc, #96]	; (8009ac8 <HAL_TIM_PWM_Start+0x188>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d004      	beq.n	8009a76 <HAL_TIM_PWM_Start+0x136>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a16      	ldr	r2, [pc, #88]	; (8009acc <HAL_TIM_PWM_Start+0x18c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d111      	bne.n	8009a9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b06      	cmp	r3, #6
 8009a86:	d010      	beq.n	8009aaa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a98:	e007      	b.n	8009aaa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40010000 	.word	0x40010000
 8009ab8:	40010400 	.word	0x40010400
 8009abc:	40000400 	.word	0x40000400
 8009ac0:	40000800 	.word	0x40000800
 8009ac4:	40000c00 	.word	0x40000c00
 8009ac8:	40014000 	.word	0x40014000
 8009acc:	40001800 	.word	0x40001800

08009ad0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <HAL_TIM_PWM_Start_DMA+0x2c>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	bf0c      	ite	eq
 8009af4:	2301      	moveq	r3, #1
 8009af6:	2300      	movne	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	e022      	b.n	8009b42 <HAL_TIM_PWM_Start_DMA+0x72>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d109      	bne.n	8009b16 <HAL_TIM_PWM_Start_DMA+0x46>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	bf0c      	ite	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	2300      	movne	r3, #0
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	e015      	b.n	8009b42 <HAL_TIM_PWM_Start_DMA+0x72>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d109      	bne.n	8009b30 <HAL_TIM_PWM_Start_DMA+0x60>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	bf0c      	ite	eq
 8009b28:	2301      	moveq	r3, #1
 8009b2a:	2300      	movne	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	e008      	b.n	8009b42 <HAL_TIM_PWM_Start_DMA+0x72>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2301      	moveq	r3, #1
 8009b3e:	2300      	movne	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009b46:	2302      	movs	r3, #2
 8009b48:	e171      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d109      	bne.n	8009b64 <HAL_TIM_PWM_Start_DMA+0x94>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2301      	moveq	r3, #1
 8009b5e:	2300      	movne	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	e022      	b.n	8009baa <HAL_TIM_PWM_Start_DMA+0xda>
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d109      	bne.n	8009b7e <HAL_TIM_PWM_Start_DMA+0xae>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	bf0c      	ite	eq
 8009b76:	2301      	moveq	r3, #1
 8009b78:	2300      	movne	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	e015      	b.n	8009baa <HAL_TIM_PWM_Start_DMA+0xda>
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d109      	bne.n	8009b98 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	bf0c      	ite	eq
 8009b90:	2301      	moveq	r3, #1
 8009b92:	2300      	movne	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	e008      	b.n	8009baa <HAL_TIM_PWM_Start_DMA+0xda>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	bf0c      	ite	eq
 8009ba4:	2301      	moveq	r3, #1
 8009ba6:	2300      	movne	r3, #0
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d024      	beq.n	8009bf8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <HAL_TIM_PWM_Start_DMA+0xee>
 8009bb4:	887b      	ldrh	r3, [r7, #2]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e137      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d104      	bne.n	8009bce <HAL_TIM_PWM_Start_DMA+0xfe>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bcc:	e016      	b.n	8009bfc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d104      	bne.n	8009bde <HAL_TIM_PWM_Start_DMA+0x10e>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bdc:	e00e      	b.n	8009bfc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d104      	bne.n	8009bee <HAL_TIM_PWM_Start_DMA+0x11e>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bec:	e006      	b.n	8009bfc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bf6:	e001      	b.n	8009bfc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e118      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b0c      	cmp	r3, #12
 8009c00:	f200 80ae 	bhi.w	8009d60 <HAL_TIM_PWM_Start_DMA+0x290>
 8009c04:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0a:	bf00      	nop
 8009c0c:	08009c41 	.word	0x08009c41
 8009c10:	08009d61 	.word	0x08009d61
 8009c14:	08009d61 	.word	0x08009d61
 8009c18:	08009d61 	.word	0x08009d61
 8009c1c:	08009c89 	.word	0x08009c89
 8009c20:	08009d61 	.word	0x08009d61
 8009c24:	08009d61 	.word	0x08009d61
 8009c28:	08009d61 	.word	0x08009d61
 8009c2c:	08009cd1 	.word	0x08009cd1
 8009c30:	08009d61 	.word	0x08009d61
 8009c34:	08009d61 	.word	0x08009d61
 8009c38:	08009d61 	.word	0x08009d61
 8009c3c:	08009d19 	.word	0x08009d19
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	4a7c      	ldr	r2, [pc, #496]	; (8009e38 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009c46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	4a7b      	ldr	r2, [pc, #492]	; (8009e3c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c54:	4a7a      	ldr	r2, [pc, #488]	; (8009e40 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009c56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3334      	adds	r3, #52	; 0x34
 8009c64:	461a      	mov	r2, r3
 8009c66:	887b      	ldrh	r3, [r7, #2]
 8009c68:	f7fb fb22 	bl	80052b0 <HAL_DMA_Start_IT>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e0db      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c84:	60da      	str	r2, [r3, #12]
      break;
 8009c86:	e06e      	b.n	8009d66 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8c:	4a6a      	ldr	r2, [pc, #424]	; (8009e38 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c94:	4a69      	ldr	r2, [pc, #420]	; (8009e3c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9c:	4a68      	ldr	r2, [pc, #416]	; (8009e40 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009c9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3338      	adds	r3, #56	; 0x38
 8009cac:	461a      	mov	r2, r3
 8009cae:	887b      	ldrh	r3, [r7, #2]
 8009cb0:	f7fb fafe 	bl	80052b0 <HAL_DMA_Start_IT>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e0b7      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ccc:	60da      	str	r2, [r3, #12]
      break;
 8009cce:	e04a      	b.n	8009d66 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a58      	ldr	r2, [pc, #352]	; (8009e38 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009cd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	4a57      	ldr	r2, [pc, #348]	; (8009e3c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a56      	ldr	r2, [pc, #344]	; (8009e40 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009ce6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	333c      	adds	r3, #60	; 0x3c
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	f7fb fada 	bl	80052b0 <HAL_DMA_Start_IT>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e093      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d14:	60da      	str	r2, [r3, #12]
      break;
 8009d16:	e026      	b.n	8009d66 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1c:	4a46      	ldr	r2, [pc, #280]	; (8009e38 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	4a45      	ldr	r2, [pc, #276]	; (8009e3c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	4a44      	ldr	r2, [pc, #272]	; (8009e40 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009d2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3340      	adds	r3, #64	; 0x40
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	887b      	ldrh	r3, [r7, #2]
 8009d40:	f7fb fab6 	bl	80052b0 <HAL_DMA_Start_IT>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e06f      	b.n	8009e2e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d5c:	60da      	str	r2, [r3, #12]
      break;
 8009d5e:	e002      	b.n	8009d66 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	75fb      	strb	r3, [r7, #23]
      break;
 8009d64:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d15f      	bne.n	8009e2c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2201      	movs	r2, #1
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fefb 	bl	800ab70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a31      	ldr	r2, [pc, #196]	; (8009e44 <HAL_TIM_PWM_Start_DMA+0x374>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d004      	beq.n	8009d8e <HAL_TIM_PWM_Start_DMA+0x2be>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a2f      	ldr	r2, [pc, #188]	; (8009e48 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d101      	bne.n	8009d92 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009da6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a25      	ldr	r2, [pc, #148]	; (8009e44 <HAL_TIM_PWM_Start_DMA+0x374>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d022      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dba:	d01d      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a22      	ldr	r2, [pc, #136]	; (8009e4c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d018      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a21      	ldr	r2, [pc, #132]	; (8009e50 <HAL_TIM_PWM_Start_DMA+0x380>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d013      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <HAL_TIM_PWM_Start_DMA+0x384>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00e      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1a      	ldr	r2, [pc, #104]	; (8009e48 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d009      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1b      	ldr	r2, [pc, #108]	; (8009e58 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d004      	beq.n	8009df8 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a1a      	ldr	r2, [pc, #104]	; (8009e5c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d111      	bne.n	8009e1c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2b06      	cmp	r3, #6
 8009e08:	d010      	beq.n	8009e2c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0201 	orr.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1a:	e007      	b.n	8009e2c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	0800a48d 	.word	0x0800a48d
 8009e3c:	0800a535 	.word	0x0800a535
 8009e40:	0800a3fb 	.word	0x0800a3fb
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40010400 	.word	0x40010400
 8009e4c:	40000400 	.word	0x40000400
 8009e50:	40000800 	.word	0x40000800
 8009e54:	40000c00 	.word	0x40000c00
 8009e58:	40014000 	.word	0x40014000
 8009e5c:	40001800 	.word	0x40001800

08009e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d122      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d11b      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f06f 0202 	mvn.w	r2, #2
 8009e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	f003 0303 	and.w	r3, r3, #3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa77 	bl	800a396 <HAL_TIM_IC_CaptureCallback>
 8009ea8:	e005      	b.n	8009eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa69 	bl	800a382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fa7a 	bl	800a3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	d122      	bne.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d11b      	bne.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0204 	mvn.w	r2, #4
 8009ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa4d 	bl	800a396 <HAL_TIM_IC_CaptureCallback>
 8009efc:	e005      	b.n	8009f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa3f 	bl	800a382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fa50 	bl	800a3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d122      	bne.n	8009f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d11b      	bne.n	8009f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f06f 0208 	mvn.w	r2, #8
 8009f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2204      	movs	r2, #4
 8009f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa23 	bl	800a396 <HAL_TIM_IC_CaptureCallback>
 8009f50:	e005      	b.n	8009f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fa15 	bl	800a382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa26 	bl	800a3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	f003 0310 	and.w	r3, r3, #16
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d122      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b10      	cmp	r3, #16
 8009f7e:	d11b      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f06f 0210 	mvn.w	r2, #16
 8009f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9f9 	bl	800a396 <HAL_TIM_IC_CaptureCallback>
 8009fa4:	e005      	b.n	8009fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9eb 	bl	800a382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f9fc 	bl	800a3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d107      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0201 	mvn.w	r2, #1
 8009fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7f9 fb14 	bl	800360c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fee:	2b80      	cmp	r3, #128	; 0x80
 8009ff0:	d10e      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 feae 	bl	800ad6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01a:	2b40      	cmp	r3, #64	; 0x40
 800a01c:	d10e      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a028:	2b40      	cmp	r3, #64	; 0x40
 800a02a:	d107      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f9cb 	bl	800a3d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b20      	cmp	r3, #32
 800a048:	d10e      	bne.n	800a068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b20      	cmp	r3, #32
 800a056:	d107      	bne.n	800a068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f06f 0220 	mvn.w	r2, #32
 800a060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fe78 	bl	800ad58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e0ae      	b.n	800a1ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b0c      	cmp	r3, #12
 800a09a:	f200 809f 	bhi.w	800a1dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a09e:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0d9 	.word	0x0800a0d9
 800a0a8:	0800a1dd 	.word	0x0800a1dd
 800a0ac:	0800a1dd 	.word	0x0800a1dd
 800a0b0:	0800a1dd 	.word	0x0800a1dd
 800a0b4:	0800a119 	.word	0x0800a119
 800a0b8:	0800a1dd 	.word	0x0800a1dd
 800a0bc:	0800a1dd 	.word	0x0800a1dd
 800a0c0:	0800a1dd 	.word	0x0800a1dd
 800a0c4:	0800a15b 	.word	0x0800a15b
 800a0c8:	0800a1dd 	.word	0x0800a1dd
 800a0cc:	0800a1dd 	.word	0x0800a1dd
 800a0d0:	0800a1dd 	.word	0x0800a1dd
 800a0d4:	0800a19b 	.word	0x0800a19b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fafc 	bl	800a6dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0208 	orr.w	r2, r2, #8
 800a0f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699a      	ldr	r2, [r3, #24]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0204 	bic.w	r2, r2, #4
 800a102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6999      	ldr	r1, [r3, #24]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	619a      	str	r2, [r3, #24]
      break;
 800a116:	e064      	b.n	800a1e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fb4c 	bl	800a7bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	699a      	ldr	r2, [r3, #24]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699a      	ldr	r2, [r3, #24]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6999      	ldr	r1, [r3, #24]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	021a      	lsls	r2, r3, #8
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	619a      	str	r2, [r3, #24]
      break;
 800a158:	e043      	b.n	800a1e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fba1 	bl	800a8a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69da      	ldr	r2, [r3, #28]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0208 	orr.w	r2, r2, #8
 800a174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f022 0204 	bic.w	r2, r2, #4
 800a184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69d9      	ldr	r1, [r3, #28]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	430a      	orrs	r2, r1
 800a196:	61da      	str	r2, [r3, #28]
      break;
 800a198:	e023      	b.n	800a1e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 fbf5 	bl	800a990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	69da      	ldr	r2, [r3, #28]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69d9      	ldr	r1, [r3, #28]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	021a      	lsls	r2, r3, #8
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	61da      	str	r2, [r3, #28]
      break;
 800a1da:	e002      	b.n	800a1e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_TIM_ConfigClockSource+0x1c>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e0b4      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x186>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a22e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a248:	d03e      	beq.n	800a2c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a24e:	f200 8087 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a256:	f000 8086 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x172>
 800a25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a25e:	d87f      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a260:	2b70      	cmp	r3, #112	; 0x70
 800a262:	d01a      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0xa6>
 800a264:	2b70      	cmp	r3, #112	; 0x70
 800a266:	d87b      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a268:	2b60      	cmp	r3, #96	; 0x60
 800a26a:	d050      	beq.n	800a30e <HAL_TIM_ConfigClockSource+0x11a>
 800a26c:	2b60      	cmp	r3, #96	; 0x60
 800a26e:	d877      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a270:	2b50      	cmp	r3, #80	; 0x50
 800a272:	d03c      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0xfa>
 800a274:	2b50      	cmp	r3, #80	; 0x50
 800a276:	d873      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a278:	2b40      	cmp	r3, #64	; 0x40
 800a27a:	d058      	beq.n	800a32e <HAL_TIM_ConfigClockSource+0x13a>
 800a27c:	2b40      	cmp	r3, #64	; 0x40
 800a27e:	d86f      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a280:	2b30      	cmp	r3, #48	; 0x30
 800a282:	d064      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x15a>
 800a284:	2b30      	cmp	r3, #48	; 0x30
 800a286:	d86b      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d060      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x15a>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d867      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
 800a290:	2b00      	cmp	r3, #0
 800a292:	d05c      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x15a>
 800a294:	2b10      	cmp	r3, #16
 800a296:	d05a      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x15a>
 800a298:	e062      	b.n	800a360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	6899      	ldr	r1, [r3, #8]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f000 fc41 	bl	800ab30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	609a      	str	r2, [r3, #8]
      break;
 800a2c6:	e04f      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	6899      	ldr	r1, [r3, #8]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f000 fc2a 	bl	800ab30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2ea:	609a      	str	r2, [r3, #8]
      break;
 800a2ec:	e03c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6859      	ldr	r1, [r3, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f000 fb9e 	bl	800aa3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2150      	movs	r1, #80	; 0x50
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fbf7 	bl	800aafa <TIM_ITRx_SetConfig>
      break;
 800a30c:	e02c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6818      	ldr	r0, [r3, #0]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	6859      	ldr	r1, [r3, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	461a      	mov	r2, r3
 800a31c:	f000 fbbd 	bl	800aa9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2160      	movs	r1, #96	; 0x60
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fbe7 	bl	800aafa <TIM_ITRx_SetConfig>
      break;
 800a32c:	e01c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6859      	ldr	r1, [r3, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f000 fb7e 	bl	800aa3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2140      	movs	r1, #64	; 0x40
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fbd7 	bl	800aafa <TIM_ITRx_SetConfig>
      break;
 800a34c:	e00c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f000 fbce 	bl	800aafa <TIM_ITRx_SetConfig>
      break;
 800a35e:	e003      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
      break;
 800a364:	e000      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d107      	bne.n	800a422 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2201      	movs	r2, #1
 800a416:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a420:	e02a      	b.n	800a478 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d107      	bne.n	800a43c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2202      	movs	r2, #2
 800a430:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a43a:	e01d      	b.n	800a478 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d107      	bne.n	800a456 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2204      	movs	r2, #4
 800a44a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a454:	e010      	b.n	800a478 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d107      	bne.n	800a470 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2208      	movs	r2, #8
 800a464:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a46e:	e003      	b.n	800a478 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff ffb4 	bl	800a3e6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	771a      	strb	r2, [r3, #28]
}
 800a484:	bf00      	nop
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d10b      	bne.n	800a4bc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d136      	bne.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4ba:	e031      	b.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d10b      	bne.n	800a4de <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d125      	bne.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4dc:	e020      	b.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d10b      	bne.n	800a500 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2204      	movs	r2, #4
 800a4ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d114      	bne.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4fe:	e00f      	b.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	429a      	cmp	r2, r3
 800a508:	d10a      	bne.n	800a520 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2208      	movs	r2, #8
 800a50e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d103      	bne.n	800a520 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff ff42 	bl	800a3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	771a      	strb	r2, [r3, #28]
}
 800a52c:	bf00      	nop
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a540:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d103      	bne.n	800a554 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2201      	movs	r2, #1
 800a550:	771a      	strb	r2, [r3, #28]
 800a552:	e019      	b.n	800a588 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d103      	bne.n	800a566 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2202      	movs	r2, #2
 800a562:	771a      	strb	r2, [r3, #28]
 800a564:	e010      	b.n	800a588 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d103      	bne.n	800a578 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2204      	movs	r2, #4
 800a574:	771a      	strb	r2, [r3, #28]
 800a576:	e007      	b.n	800a588 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d102      	bne.n	800a588 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2208      	movs	r2, #8
 800a586:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff ff18 	bl	800a3be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	771a      	strb	r2, [r3, #28]
}
 800a594:	bf00      	nop
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a40      	ldr	r2, [pc, #256]	; (800a6b0 <TIM_Base_SetConfig+0x114>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d013      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ba:	d00f      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a3d      	ldr	r2, [pc, #244]	; (800a6b4 <TIM_Base_SetConfig+0x118>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00b      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a3c      	ldr	r2, [pc, #240]	; (800a6b8 <TIM_Base_SetConfig+0x11c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d007      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a3b      	ldr	r2, [pc, #236]	; (800a6bc <TIM_Base_SetConfig+0x120>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d003      	beq.n	800a5dc <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a3a      	ldr	r2, [pc, #232]	; (800a6c0 <TIM_Base_SetConfig+0x124>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d108      	bne.n	800a5ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a2f      	ldr	r2, [pc, #188]	; (800a6b0 <TIM_Base_SetConfig+0x114>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d02b      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fc:	d027      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a2c      	ldr	r2, [pc, #176]	; (800a6b4 <TIM_Base_SetConfig+0x118>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d023      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a2b      	ldr	r2, [pc, #172]	; (800a6b8 <TIM_Base_SetConfig+0x11c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d01f      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a2a      	ldr	r2, [pc, #168]	; (800a6bc <TIM_Base_SetConfig+0x120>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d01b      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a29      	ldr	r2, [pc, #164]	; (800a6c0 <TIM_Base_SetConfig+0x124>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d017      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a28      	ldr	r2, [pc, #160]	; (800a6c4 <TIM_Base_SetConfig+0x128>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d013      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a27      	ldr	r2, [pc, #156]	; (800a6c8 <TIM_Base_SetConfig+0x12c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00f      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a26      	ldr	r2, [pc, #152]	; (800a6cc <TIM_Base_SetConfig+0x130>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00b      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a25      	ldr	r2, [pc, #148]	; (800a6d0 <TIM_Base_SetConfig+0x134>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d007      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a24      	ldr	r2, [pc, #144]	; (800a6d4 <TIM_Base_SetConfig+0x138>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d003      	beq.n	800a64e <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a23      	ldr	r2, [pc, #140]	; (800a6d8 <TIM_Base_SetConfig+0x13c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d108      	bne.n	800a660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a0a      	ldr	r2, [pc, #40]	; (800a6b0 <TIM_Base_SetConfig+0x114>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d003      	beq.n	800a694 <TIM_Base_SetConfig+0xf8>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a0c      	ldr	r2, [pc, #48]	; (800a6c0 <TIM_Base_SetConfig+0x124>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d103      	bne.n	800a69c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	615a      	str	r2, [r3, #20]
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	40010000 	.word	0x40010000
 800a6b4:	40000400 	.word	0x40000400
 800a6b8:	40000800 	.word	0x40000800
 800a6bc:	40000c00 	.word	0x40000c00
 800a6c0:	40010400 	.word	0x40010400
 800a6c4:	40014000 	.word	0x40014000
 800a6c8:	40014400 	.word	0x40014400
 800a6cc:	40014800 	.word	0x40014800
 800a6d0:	40001800 	.word	0x40001800
 800a6d4:	40001c00 	.word	0x40001c00
 800a6d8:	40002000 	.word	0x40002000

0800a6dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	f023 0201 	bic.w	r2, r3, #1
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f023 0302 	bic.w	r3, r3, #2
 800a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a20      	ldr	r2, [pc, #128]	; (800a7b4 <TIM_OC1_SetConfig+0xd8>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d003      	beq.n	800a740 <TIM_OC1_SetConfig+0x64>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1f      	ldr	r2, [pc, #124]	; (800a7b8 <TIM_OC1_SetConfig+0xdc>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d10c      	bne.n	800a75a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f023 0308 	bic.w	r3, r3, #8
 800a746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f023 0304 	bic.w	r3, r3, #4
 800a758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a15      	ldr	r2, [pc, #84]	; (800a7b4 <TIM_OC1_SetConfig+0xd8>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d003      	beq.n	800a76a <TIM_OC1_SetConfig+0x8e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a14      	ldr	r2, [pc, #80]	; (800a7b8 <TIM_OC1_SetConfig+0xdc>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d111      	bne.n	800a78e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4313      	orrs	r3, r2
 800a782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	621a      	str	r2, [r3, #32]
}
 800a7a8:	bf00      	nop
 800a7aa:	371c      	adds	r7, #28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40010400 	.word	0x40010400

0800a7bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	f023 0210 	bic.w	r2, r3, #16
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f023 0320 	bic.w	r3, r3, #32
 800a806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4313      	orrs	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a22      	ldr	r2, [pc, #136]	; (800a8a0 <TIM_OC2_SetConfig+0xe4>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d003      	beq.n	800a824 <TIM_OC2_SetConfig+0x68>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a21      	ldr	r2, [pc, #132]	; (800a8a4 <TIM_OC2_SetConfig+0xe8>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d10d      	bne.n	800a840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a82a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a83e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a17      	ldr	r2, [pc, #92]	; (800a8a0 <TIM_OC2_SetConfig+0xe4>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d003      	beq.n	800a850 <TIM_OC2_SetConfig+0x94>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a16      	ldr	r2, [pc, #88]	; (800a8a4 <TIM_OC2_SetConfig+0xe8>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d113      	bne.n	800a878 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a85e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4313      	orrs	r3, r2
 800a86a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4313      	orrs	r3, r2
 800a876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	621a      	str	r2, [r3, #32]
}
 800a892:	bf00      	nop
 800a894:	371c      	adds	r7, #28
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	40010000 	.word	0x40010000
 800a8a4:	40010400 	.word	0x40010400

0800a8a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0303 	bic.w	r3, r3, #3
 800a8de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a21      	ldr	r2, [pc, #132]	; (800a988 <TIM_OC3_SetConfig+0xe0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d003      	beq.n	800a90e <TIM_OC3_SetConfig+0x66>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a20      	ldr	r2, [pc, #128]	; (800a98c <TIM_OC3_SetConfig+0xe4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d10d      	bne.n	800a92a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	021b      	lsls	r3, r3, #8
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a16      	ldr	r2, [pc, #88]	; (800a988 <TIM_OC3_SetConfig+0xe0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d003      	beq.n	800a93a <TIM_OC3_SetConfig+0x92>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a15      	ldr	r2, [pc, #84]	; (800a98c <TIM_OC3_SetConfig+0xe4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d113      	bne.n	800a962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4313      	orrs	r3, r2
 800a954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	621a      	str	r2, [r3, #32]
}
 800a97c:	bf00      	nop
 800a97e:	371c      	adds	r7, #28
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	40010000 	.word	0x40010000
 800a98c:	40010400 	.word	0x40010400

0800a990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	021b      	lsls	r3, r3, #8
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	031b      	lsls	r3, r3, #12
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a12      	ldr	r2, [pc, #72]	; (800aa34 <TIM_OC4_SetConfig+0xa4>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d003      	beq.n	800a9f8 <TIM_OC4_SetConfig+0x68>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a11      	ldr	r2, [pc, #68]	; (800aa38 <TIM_OC4_SetConfig+0xa8>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d109      	bne.n	800aa0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	019b      	lsls	r3, r3, #6
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	621a      	str	r2, [r3, #32]
}
 800aa26:	bf00      	nop
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40010000 	.word	0x40010000
 800aa38:	40010400 	.word	0x40010400

0800aa3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	f023 0201 	bic.w	r2, r3, #1
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	011b      	lsls	r3, r3, #4
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f023 030a 	bic.w	r3, r3, #10
 800aa78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	621a      	str	r2, [r3, #32]
}
 800aa8e:	bf00      	nop
 800aa90:	371c      	adds	r7, #28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b087      	sub	sp, #28
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	f023 0210 	bic.w	r2, r3, #16
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	031b      	lsls	r3, r3, #12
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	4313      	orrs	r3, r2
 800aace:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aad6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	011b      	lsls	r3, r3, #4
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	4313      	orrs	r3, r2
 800aae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	621a      	str	r2, [r3, #32]
}
 800aaee:	bf00      	nop
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	f043 0307 	orr.w	r3, r3, #7
 800ab1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	609a      	str	r2, [r3, #8]
}
 800ab24:	bf00      	nop
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	021a      	lsls	r2, r3, #8
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	609a      	str	r2, [r3, #8]
}
 800ab64:	bf00      	nop
 800ab66:	371c      	adds	r7, #28
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f003 031f 	and.w	r3, r3, #31
 800ab82:	2201      	movs	r2, #1
 800ab84:	fa02 f303 	lsl.w	r3, r2, r3
 800ab88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1a      	ldr	r2, [r3, #32]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	43db      	mvns	r3, r3
 800ab92:	401a      	ands	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6a1a      	ldr	r2, [r3, #32]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	f003 031f 	and.w	r3, r3, #31
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	fa01 f303 	lsl.w	r3, r1, r3
 800aba8:	431a      	orrs	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	621a      	str	r2, [r3, #32]
}
 800abae:	bf00      	nop
 800abb0:	371c      	adds	r7, #28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
	...

0800abbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abd0:	2302      	movs	r3, #2
 800abd2:	e05a      	b.n	800ac8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a21      	ldr	r2, [pc, #132]	; (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d022      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac20:	d01d      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a1d      	ldr	r2, [pc, #116]	; (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d018      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a1b      	ldr	r2, [pc, #108]	; (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d013      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a1a      	ldr	r2, [pc, #104]	; (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00e      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a18      	ldr	r2, [pc, #96]	; (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d009      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a17      	ldr	r2, [pc, #92]	; (800acac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d004      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a15      	ldr	r2, [pc, #84]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d10c      	bne.n	800ac78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	40010000 	.word	0x40010000
 800ac9c:	40000400 	.word	0x40000400
 800aca0:	40000800 	.word	0x40000800
 800aca4:	40000c00 	.word	0x40000c00
 800aca8:	40010400 	.word	0x40010400
 800acac:	40014000 	.word	0x40014000
 800acb0:	40001800 	.word	0x40001800

0800acb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d101      	bne.n	800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800accc:	2302      	movs	r3, #2
 800acce:	e03d      	b.n	800ad4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d029      	beq.n	800adee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ada6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adaa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800adb4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800adba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800adc0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800adc6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800adcc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800add2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800add8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800adde:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	e034      	b.n	800ae58 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adfa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae04:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ae0a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800ae32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800ae38:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800ae3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800ae44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d02e      	beq.n	800aede <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae8c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800ae9c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aea6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aeb0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aeba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aec4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aece:	4313      	orrs	r3, r2
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	609a      	str	r2, [r3, #8]
 800aedc:	e03b      	b.n	800af56 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aeea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af00:	4313      	orrs	r3, r2
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	4313      	orrs	r3, r2
 800af06:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af14:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	3b01      	subs	r3, #1
 800af22:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af24:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af2e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	3b01      	subs	r3, #1
 800af36:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af38:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	3b01      	subs	r3, #1
 800af40:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af42:	4313      	orrs	r3, r2
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800af80:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800af8a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800af92:	4313      	orrs	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800af9c:	f7f9 fa40 	bl	8004420 <HAL_GetTick>
 800afa0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800afa2:	e010      	b.n	800afc6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afaa:	d00c      	beq.n	800afc6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d007      	beq.n	800afc2 <FMC_SDRAM_SendCommand+0x5e>
 800afb2:	f7f9 fa35 	bl	8004420 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d201      	bcs.n	800afc6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e006      	b.n	800afd4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	f003 0320 	and.w	r3, r3, #32
 800afce:	2b20      	cmp	r3, #32
 800afd0:	d0e8      	beq.n	800afa4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800afdc:	b084      	sub	sp, #16
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	f107 001c 	add.w	r0, r7, #28
 800afea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aff2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aff4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aff6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800affa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800affe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b002:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b006:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	431a      	orrs	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	b004      	add	sp, #16
 800b030:	4770      	bx	lr

0800b032 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b040:	4618      	mov	r0, r3
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2203      	movs	r2, #3
 800b058:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b05a:	2002      	movs	r0, #2
 800b05c:	f7f9 f9ec 	bl	8004438 <HAL_Delay>
  
  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0303 	and.w	r3, r3, #3
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b086:	b480      	push	{r7}
 800b088:	b085      	sub	sp, #20
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b0aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b0c0:	f023 030f 	bic.w	r3, r3, #15
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b083      	sub	sp, #12
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	b2db      	uxtb	r3, r3
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3314      	adds	r3, #20
 800b102:	461a      	mov	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	4413      	add	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
}  
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b140:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b146:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b14c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b164:	2300      	movs	r3, #0

}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b180:	2310      	movs	r3, #16
 800b182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b184:	2340      	movs	r3, #64	; 0x40
 800b186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b188:	2300      	movs	r3, #0
 800b18a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b18c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b190:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b192:	f107 0308 	add.w	r3, r7, #8
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff ff74 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a2:	2110      	movs	r1, #16
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fa45 	bl	800b634 <SDMMC_GetCmdResp1>
 800b1aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3720      	adds	r7, #32
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b088      	sub	sp, #32
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1c4:	2311      	movs	r3, #17
 800b1c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1c8:	2340      	movs	r3, #64	; 0x40
 800b1ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1d6:	f107 0308 	add.w	r3, r7, #8
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7ff ff52 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b1e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e6:	2111      	movs	r1, #17
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fa23 	bl	800b634 <SDMMC_GetCmdResp1>
 800b1ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3720      	adds	r7, #32
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b088      	sub	sp, #32
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b208:	2312      	movs	r3, #18
 800b20a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b20c:	2340      	movs	r3, #64	; 0x40
 800b20e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b210:	2300      	movs	r3, #0
 800b212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b21a:	f107 0308 	add.w	r3, r7, #8
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ff30 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b226:	f241 3288 	movw	r2, #5000	; 0x1388
 800b22a:	2112      	movs	r1, #18
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fa01 	bl	800b634 <SDMMC_GetCmdResp1>
 800b232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b234:	69fb      	ldr	r3, [r7, #28]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3720      	adds	r7, #32
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b088      	sub	sp, #32
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b24c:	2318      	movs	r3, #24
 800b24e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b250:	2340      	movs	r3, #64	; 0x40
 800b252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b25c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b25e:	f107 0308 	add.w	r3, r7, #8
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff ff0e 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b26a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b26e:	2118      	movs	r1, #24
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f9df 	bl	800b634 <SDMMC_GetCmdResp1>
 800b276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b278:	69fb      	ldr	r3, [r7, #28]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3720      	adds	r7, #32
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b088      	sub	sp, #32
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b290:	2319      	movs	r3, #25
 800b292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b294:	2340      	movs	r3, #64	; 0x40
 800b296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b298:	2300      	movs	r3, #0
 800b29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b29c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2a2:	f107 0308 	add.w	r3, r7, #8
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff feec 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2b2:	2119      	movs	r1, #25
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f9bd 	bl	800b634 <SDMMC_GetCmdResp1>
 800b2ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3720      	adds	r7, #32
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b2d4:	230c      	movs	r3, #12
 800b2d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2d8:	2340      	movs	r3, #64	; 0x40
 800b2da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2e6:	f107 0308 	add.w	r3, r7, #8
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff feca 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b2f2:	4a05      	ldr	r2, [pc, #20]	; (800b308 <SDMMC_CmdStopTransfer+0x40>)
 800b2f4:	210c      	movs	r1, #12
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f99c 	bl	800b634 <SDMMC_GetCmdResp1>
 800b2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2fe:	69fb      	ldr	r3, [r7, #28]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	05f5e100 	.word	0x05f5e100

0800b30c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	; 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b31c:	2307      	movs	r3, #7
 800b31e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b320:	2340      	movs	r3, #64	; 0x40
 800b322:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b324:	2300      	movs	r3, #0
 800b326:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b32e:	f107 0310 	add.w	r3, r7, #16
 800b332:	4619      	mov	r1, r3
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f7ff fea6 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b33a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b33e:	2107      	movs	r1, #7
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f000 f977 	bl	800b634 <SDMMC_GetCmdResp1>
 800b346:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3728      	adds	r7, #40	; 0x28
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b088      	sub	sp, #32
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b366:	2300      	movs	r3, #0
 800b368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fe85 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f92d 	bl	800b5dc <SDMMC_GetCmdError>
 800b382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b384:	69fb      	ldr	r3, [r7, #28]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3720      	adds	r7, #32
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b088      	sub	sp, #32
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b396:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b39a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b39c:	2308      	movs	r3, #8
 800b39e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3a0:	2340      	movs	r3, #64	; 0x40
 800b3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff fe66 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fb24 	bl	800ba08 <SDMMC_GetCmdResp7>
 800b3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c2:	69fb      	ldr	r3, [r7, #28]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3da:	2337      	movs	r3, #55	; 0x37
 800b3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3de:	2340      	movs	r3, #64	; 0x40
 800b3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3ec:	f107 0308 	add.w	r3, r7, #8
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7ff fe47 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fc:	2137      	movs	r1, #55	; 0x37
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f918 	bl	800b634 <SDMMC_GetCmdResp1>
 800b404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b406:	69fb      	ldr	r3, [r7, #28]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3720      	adds	r7, #32
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b426:	2329      	movs	r3, #41	; 0x29
 800b428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b42a:	2340      	movs	r3, #64	; 0x40
 800b42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fe21 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fa2b 	bl	800b8a0 <SDMMC_GetCmdResp3>
 800b44a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b44c:	69fb      	ldr	r3, [r7, #28]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3720      	adds	r7, #32
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b088      	sub	sp, #32
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b464:	2306      	movs	r3, #6
 800b466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b468:	2340      	movs	r3, #64	; 0x40
 800b46a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b474:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff fe02 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b482:	f241 3288 	movw	r2, #5000	; 0x1388
 800b486:	2106      	movs	r1, #6
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f8d3 	bl	800b634 <SDMMC_GetCmdResp1>
 800b48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b490:	69fb      	ldr	r3, [r7, #28]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b4a6:	2333      	movs	r3, #51	; 0x33
 800b4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4aa:	2340      	movs	r3, #64	; 0x40
 800b4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4b8:	f107 0308 	add.w	r3, r7, #8
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fde1 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c8:	2133      	movs	r1, #51	; 0x33
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f8b2 	bl	800b634 <SDMMC_GetCmdResp1>
 800b4d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b088      	sub	sp, #32
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b4ec:	23c0      	movs	r3, #192	; 0xc0
 800b4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4fa:	f107 0308 	add.w	r3, r7, #8
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff fdc0 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f982 	bl	800b810 <SDMMC_GetCmdResp2>
 800b50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50e:	69fb      	ldr	r3, [r7, #28]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b526:	2309      	movs	r3, #9
 800b528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b52a:	23c0      	movs	r3, #192	; 0xc0
 800b52c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b536:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b538:	f107 0308 	add.w	r3, r7, #8
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fda1 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f963 	bl	800b810 <SDMMC_GetCmdResp2>
 800b54a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54c:	69fb      	ldr	r3, [r7, #28]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b088      	sub	sp, #32
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b564:	2303      	movs	r3, #3
 800b566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b56c:	2300      	movs	r3, #0
 800b56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b576:	f107 0308 	add.w	r3, r7, #8
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff fd82 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	2103      	movs	r1, #3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f9c8 	bl	800b91c <SDMMC_GetCmdResp6>
 800b58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b58e:	69fb      	ldr	r3, [r7, #28]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3720      	adds	r7, #32
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5a6:	230d      	movs	r3, #13
 800b5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5aa:	2340      	movs	r3, #64	; 0x40
 800b5ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5b8:	f107 0308 	add.w	r3, r7, #8
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff fd61 	bl	800b086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c8:	210d      	movs	r1, #13
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f832 	bl	800b634 <SDMMC_GetCmdResp1>
 800b5d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d2:	69fb      	ldr	r3, [r7, #28]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3720      	adds	r7, #32
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5e4:	4b11      	ldr	r3, [pc, #68]	; (800b62c <SDMMC_GetCmdError+0x50>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a11      	ldr	r2, [pc, #68]	; (800b630 <SDMMC_GetCmdError+0x54>)
 800b5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ee:	0a5b      	lsrs	r3, r3, #9
 800b5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f4:	fb02 f303 	mul.w	r3, r2, r3
 800b5f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	60fa      	str	r2, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b608:	e009      	b.n	800b61e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b612:	2b00      	cmp	r3, #0
 800b614:	d0f1      	beq.n	800b5fa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	22c5      	movs	r2, #197	; 0xc5
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20000008 	.word	0x20000008
 800b630:	10624dd3 	.word	0x10624dd3

0800b634 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	460b      	mov	r3, r1
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b642:	4b70      	ldr	r3, [pc, #448]	; (800b804 <SDMMC_GetCmdResp1+0x1d0>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a70      	ldr	r2, [pc, #448]	; (800b808 <SDMMC_GetCmdResp1+0x1d4>)
 800b648:	fba2 2303 	umull	r2, r3, r2, r3
 800b64c:	0a5a      	lsrs	r2, r3, #9
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	1e5a      	subs	r2, r3, #1
 800b65a:	61fa      	str	r2, [r7, #28]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b660:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b664:	e0c9      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0ef      	beq.n	800b656 <SDMMC_GetCmdResp1+0x22>
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1ea      	bne.n	800b656 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2204      	movs	r2, #4
 800b690:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b692:	2304      	movs	r3, #4
 800b694:	e0b1      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d004      	beq.n	800b6ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e0a6      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	22c5      	movs	r2, #197	; 0xc5
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f7ff fd11 	bl	800b0da <SDIO_GetCommandResponse>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	7afb      	ldrb	r3, [r7, #11]
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d001      	beq.n	800b6c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e099      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff fd13 	bl	800b0f4 <SDIO_GetResponse>
 800b6ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	4b4e      	ldr	r3, [pc, #312]	; (800b80c <SDMMC_GetCmdResp1+0x1d8>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e08d      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	da02      	bge.n	800b6ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6e8:	e087      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6f4:	2340      	movs	r3, #64	; 0x40
 800b6f6:	e080      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b702:	2380      	movs	r3, #128	; 0x80
 800b704:	e079      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b710:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b714:	e071      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b720:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b724:	e069      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b734:	e061      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b744:	e059      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b754:	e051      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b764:	e049      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b774:	e041      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b784:	e039      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b794:	e031      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b7a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b7a4:	e029      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b7b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7b4:	e021      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b7c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b7c4:	e019      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b7d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b7d4:	e011      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b7e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b7e4:	e009      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f003 0308 	and.w	r3, r3, #8
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b7f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b7f4:	e001      	b.n	800b7fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3720      	adds	r7, #32
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	20000008 	.word	0x20000008
 800b808:	10624dd3 	.word	0x10624dd3
 800b80c:	fdffe008 	.word	0xfdffe008

0800b810 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b818:	4b1f      	ldr	r3, [pc, #124]	; (800b898 <SDMMC_GetCmdResp2+0x88>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a1f      	ldr	r2, [pc, #124]	; (800b89c <SDMMC_GetCmdResp2+0x8c>)
 800b81e:	fba2 2303 	umull	r2, r3, r2, r3
 800b822:	0a5b      	lsrs	r3, r3, #9
 800b824:	f241 3288 	movw	r2, #5000	; 0x1388
 800b828:	fb02 f303 	mul.w	r3, r2, r3
 800b82c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1e5a      	subs	r2, r3, #1
 800b832:	60fa      	str	r2, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b83c:	e026      	b.n	800b88c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b842:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0ef      	beq.n	800b82e <SDMMC_GetCmdResp2+0x1e>
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1ea      	bne.n	800b82e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d004      	beq.n	800b86e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2204      	movs	r2, #4
 800b868:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b86a:	2304      	movs	r3, #4
 800b86c:	e00e      	b.n	800b88c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	f003 0301 	and.w	r3, r3, #1
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b880:	2301      	movs	r3, #1
 800b882:	e003      	b.n	800b88c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	22c5      	movs	r2, #197	; 0xc5
 800b888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	20000008 	.word	0x20000008
 800b89c:	10624dd3 	.word	0x10624dd3

0800b8a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8a8:	4b1a      	ldr	r3, [pc, #104]	; (800b914 <SDMMC_GetCmdResp3+0x74>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a1a      	ldr	r2, [pc, #104]	; (800b918 <SDMMC_GetCmdResp3+0x78>)
 800b8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b2:	0a5b      	lsrs	r3, r3, #9
 800b8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	1e5a      	subs	r2, r3, #1
 800b8c2:	60fa      	str	r2, [r7, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8cc:	e01b      	b.n	800b906 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0ef      	beq.n	800b8be <SDMMC_GetCmdResp3+0x1e>
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1ea      	bne.n	800b8be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8fa:	2304      	movs	r3, #4
 800b8fc:	e003      	b.n	800b906 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	22c5      	movs	r2, #197	; 0xc5
 800b902:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	20000008 	.word	0x20000008
 800b918:	10624dd3 	.word	0x10624dd3

0800b91c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	460b      	mov	r3, r1
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b92a:	4b35      	ldr	r3, [pc, #212]	; (800ba00 <SDMMC_GetCmdResp6+0xe4>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a35      	ldr	r2, [pc, #212]	; (800ba04 <SDMMC_GetCmdResp6+0xe8>)
 800b930:	fba2 2303 	umull	r2, r3, r2, r3
 800b934:	0a5b      	lsrs	r3, r3, #9
 800b936:	f241 3288 	movw	r2, #5000	; 0x1388
 800b93a:	fb02 f303 	mul.w	r3, r2, r3
 800b93e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	1e5a      	subs	r2, r3, #1
 800b944:	61fa      	str	r2, [r7, #28]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b94a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b94e:	e052      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b954:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0ef      	beq.n	800b940 <SDMMC_GetCmdResp6+0x24>
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1ea      	bne.n	800b940 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	2b00      	cmp	r3, #0
 800b974:	d004      	beq.n	800b980 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2204      	movs	r2, #4
 800b97a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b97c:	2304      	movs	r3, #4
 800b97e:	e03a      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b992:	2301      	movs	r3, #1
 800b994:	e02f      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f7ff fb9f 	bl	800b0da <SDIO_GetCommandResponse>
 800b99c:	4603      	mov	r3, r0
 800b99e:	461a      	mov	r2, r3
 800b9a0:	7afb      	ldrb	r3, [r7, #11]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d001      	beq.n	800b9aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e025      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	22c5      	movs	r2, #197	; 0xc5
 800b9ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff fb9e 	bl	800b0f4 <SDIO_GetResponse>
 800b9b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	0c1b      	lsrs	r3, r3, #16
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e011      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9e0:	e009      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9f0:	e001      	b.n	800b9f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3720      	adds	r7, #32
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20000008 	.word	0x20000008
 800ba04:	10624dd3 	.word	0x10624dd3

0800ba08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba10:	4b22      	ldr	r3, [pc, #136]	; (800ba9c <SDMMC_GetCmdResp7+0x94>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a22      	ldr	r2, [pc, #136]	; (800baa0 <SDMMC_GetCmdResp7+0x98>)
 800ba16:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1a:	0a5b      	lsrs	r3, r3, #9
 800ba1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba20:	fb02 f303 	mul.w	r3, r2, r3
 800ba24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	1e5a      	subs	r2, r3, #1
 800ba2a:	60fa      	str	r2, [r7, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba34:	e02c      	b.n	800ba90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0ef      	beq.n	800ba26 <SDMMC_GetCmdResp7+0x1e>
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1ea      	bne.n	800ba26 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2204      	movs	r2, #4
 800ba60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba62:	2304      	movs	r3, #4
 800ba64:	e014      	b.n	800ba90 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d004      	beq.n	800ba7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e009      	b.n	800ba90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2240      	movs	r2, #64	; 0x40
 800ba8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba8e:	2300      	movs	r3, #0
  
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr
 800ba9c:	20000008 	.word	0x20000008
 800baa0:	10624dd3 	.word	0x10624dd3

0800baa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800baa8:	4904      	ldr	r1, [pc, #16]	; (800babc <MX_FATFS_Init+0x18>)
 800baaa:	4805      	ldr	r0, [pc, #20]	; (800bac0 <MX_FATFS_Init+0x1c>)
 800baac:	f000 fa8a 	bl	800bfc4 <FATFS_LinkDriver>
 800bab0:	4603      	mov	r3, r0
 800bab2:	461a      	mov	r2, r3
 800bab4:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <MX_FATFS_Init+0x20>)
 800bab6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bab8:	bf00      	nop
 800baba:	bd80      	pop	{r7, pc}
 800babc:	2000b174 	.word	0x2000b174
 800bac0:	0802fe74 	.word	0x0802fe74
 800bac4:	2000b170 	.word	0x2000b170

0800bac8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bad2:	f000 f87b 	bl	800bbcc <BSP_SD_IsDetected>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d001      	beq.n	800bae0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e012      	b.n	800bb06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bae0:	480b      	ldr	r0, [pc, #44]	; (800bb10 <BSP_SD_Init+0x48>)
 800bae2:	f7fc fd05 	bl	80084f0 <HAL_SD_Init>
 800bae6:	4603      	mov	r3, r0
 800bae8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800baea:	79fb      	ldrb	r3, [r7, #7]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800baf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800baf4:	4806      	ldr	r0, [pc, #24]	; (800bb10 <BSP_SD_Init+0x48>)
 800baf6:	f7fd f94b 	bl	8008d90 <HAL_SD_ConfigWideBusOperation>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bb04:	79fb      	ldrb	r3, [r7, #7]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	2000afb4 	.word	0x2000afb4

0800bb14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	68f9      	ldr	r1, [r7, #12]
 800bb2a:	4806      	ldr	r0, [pc, #24]	; (800bb44 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bb2c:	f7fc fd8e 	bl	800864c <HAL_SD_ReadBlocks_DMA>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	2000afb4 	.word	0x2000afb4

0800bb48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	68f9      	ldr	r1, [r7, #12]
 800bb5e:	4806      	ldr	r0, [pc, #24]	; (800bb78 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bb60:	f7fc fe56 	bl	8008810 <HAL_SD_WriteBlocks_DMA>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	2000afb4 	.word	0x2000afb4

0800bb7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb80:	4805      	ldr	r0, [pc, #20]	; (800bb98 <BSP_SD_GetCardState+0x1c>)
 800bb82:	f7fd f99f 	bl	8008ec4 <HAL_SD_GetCardState>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	bf14      	ite	ne
 800bb8c:	2301      	movne	r3, #1
 800bb8e:	2300      	moveq	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	2000afb4 	.word	0x2000afb4

0800bb9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4803      	ldr	r0, [pc, #12]	; (800bbb4 <BSP_SD_GetCardInfo+0x18>)
 800bba8:	f7fd f8c6 	bl	8008d38 <HAL_SD_GetCardInfo>
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	2000afb4 	.word	0x2000afb4

0800bbb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bbc0:	f000 f9a2 	bl	800bf08 <BSP_SD_ReadCpltCallback>
}
 800bbc4:	bf00      	nop
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bbd6:	f000 f80b 	bl	800bbf0 <BSP_PlatformIsDetected>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bbe4:	79fb      	ldrb	r3, [r7, #7]
 800bbe6:	b2db      	uxtb	r3, r3
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bbfa:	2108      	movs	r1, #8
 800bbfc:	4806      	ldr	r0, [pc, #24]	; (800bc18 <BSP_PlatformIsDetected+0x28>)
 800bbfe:	f7fa f9bd 	bl	8005f7c <HAL_GPIO_ReadPin>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	40021800 	.word	0x40021800

0800bc1c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bc24:	f000 fa8e 	bl	800c144 <osKernelGetTickCount>
 800bc28:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bc2a:	e006      	b.n	800bc3a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc2c:	f7ff ffa6 	bl	800bb7c <BSP_SD_GetCardState>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e009      	b.n	800bc4e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bc3a:	f000 fa83 	bl	800c144 <osKernelGetTickCount>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d8f0      	bhi.n	800bc2c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc62:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc68:	f7ff ff88 	bl	800bb7c <BSP_SD_GetCardState>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d107      	bne.n	800bc82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bc82:	4b03      	ldr	r3, [pc, #12]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b2db      	uxtb	r3, r3
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20000011 	.word	0x20000011

0800bc94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bc9e:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <SD_initialize+0x7c>)
 800bca0:	2201      	movs	r2, #1
 800bca2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800bca4:	f000 fa06 	bl	800c0b4 <osKernelGetState>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d129      	bne.n	800bd02 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bcae:	f7ff ff0b 	bl	800bac8 <BSP_SD_Init>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d107      	bne.n	800bcc8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff ffcc 	bl	800bc58 <SD_CheckStatus>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	4b12      	ldr	r3, [pc, #72]	; (800bd10 <SD_initialize+0x7c>)
 800bcc6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bcc8:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <SD_initialize+0x7c>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d017      	beq.n	800bd02 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800bcd2:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <SD_initialize+0x80>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d107      	bne.n	800bcea <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2102      	movs	r1, #2
 800bcde:	200a      	movs	r0, #10
 800bce0:	f000 fc12 	bl	800c508 <osMessageQueueNew>
 800bce4:	4603      	mov	r3, r0
 800bce6:	4a0b      	ldr	r2, [pc, #44]	; (800bd14 <SD_initialize+0x80>)
 800bce8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bcea:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <SD_initialize+0x80>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d107      	bne.n	800bd02 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <SD_initialize+0x7c>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f043 0301 	orr.w	r3, r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <SD_initialize+0x7c>)
 800bd00:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bd02:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <SD_initialize+0x7c>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	b2db      	uxtb	r3, r3
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20000011 	.word	0x20000011
 800bd14:	20000128 	.word	0x20000128

0800bd18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff ff97 	bl	800bc58 <SD_CheckStatus>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4603      	mov	r3, r0
 800bd42:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd48:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd4c:	f7ff ff66 	bl	800bc1c <SD_CheckStatusWithTimeout>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	da01      	bge.n	800bd5a <SD_read+0x26>
  {
    return res;
 800bd56:	7ffb      	ldrb	r3, [r7, #31]
 800bd58:	e02f      	b.n	800bdba <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	68b8      	ldr	r0, [r7, #8]
 800bd60:	f7ff fed8 	bl	800bb14 <BSP_SD_ReadBlocks_DMA>
 800bd64:	4603      	mov	r3, r0
 800bd66:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bd68:	7fbb      	ldrb	r3, [r7, #30]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d124      	bne.n	800bdb8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bd6e:	4b15      	ldr	r3, [pc, #84]	; (800bdc4 <SD_read+0x90>)
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f107 0112 	add.w	r1, r7, #18
 800bd76:	f247 5330 	movw	r3, #30000	; 0x7530
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f000 fc98 	bl	800c6b0 <osMessageQueueGet>
 800bd80:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d117      	bne.n	800bdb8 <SD_read+0x84>
 800bd88:	8a7b      	ldrh	r3, [r7, #18]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d114      	bne.n	800bdb8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bd8e:	f000 f9d9 	bl	800c144 <osKernelGetTickCount>
 800bd92:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bd94:	e007      	b.n	800bda6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd96:	f7ff fef1 	bl	800bb7c <BSP_SD_GetCardState>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d102      	bne.n	800bda6 <SD_read+0x72>
              {
                res = RES_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bda4:	e008      	b.n	800bdb8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bda6:	f000 f9cd 	bl	800c144 <osKernelGetTickCount>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d9ee      	bls.n	800bd96 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bdb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3720      	adds	r7, #32
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000128 	.word	0x20000128

0800bdc8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	603b      	str	r3, [r7, #0]
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bddc:	f247 5030 	movw	r0, #30000	; 0x7530
 800bde0:	f7ff ff1c 	bl	800bc1c <SD_CheckStatusWithTimeout>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	da01      	bge.n	800bdee <SD_write+0x26>
  {
    return res;
 800bdea:	7ffb      	ldrb	r3, [r7, #31]
 800bdec:	e02d      	b.n	800be4a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	68b8      	ldr	r0, [r7, #8]
 800bdf4:	f7ff fea8 	bl	800bb48 <BSP_SD_WriteBlocks_DMA>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d124      	bne.n	800be48 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bdfe:	4b15      	ldr	r3, [pc, #84]	; (800be54 <SD_write+0x8c>)
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f107 0112 	add.w	r1, r7, #18
 800be06:	f247 5330 	movw	r3, #30000	; 0x7530
 800be0a:	2200      	movs	r2, #0
 800be0c:	f000 fc50 	bl	800c6b0 <osMessageQueueGet>
 800be10:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d117      	bne.n	800be48 <SD_write+0x80>
 800be18:	8a7b      	ldrh	r3, [r7, #18]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d114      	bne.n	800be48 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800be1e:	f000 f991 	bl	800c144 <osKernelGetTickCount>
 800be22:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be24:	e007      	b.n	800be36 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be26:	f7ff fea9 	bl	800bb7c <BSP_SD_GetCardState>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <SD_write+0x6e>
          {
            res = RES_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	77fb      	strb	r3, [r7, #31]
            break;
 800be34:	e008      	b.n	800be48 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be36:	f000 f985 	bl	800c144 <osKernelGetTickCount>
 800be3a:	4602      	mov	r2, r0
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	f247 522f 	movw	r2, #29999	; 0x752f
 800be44:	4293      	cmp	r3, r2
 800be46:	d9ee      	bls.n	800be26 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800be48:	7ffb      	ldrb	r3, [r7, #31]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3720      	adds	r7, #32
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20000128 	.word	0x20000128

0800be58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08c      	sub	sp, #48	; 0x30
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	603a      	str	r2, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
 800be64:	460b      	mov	r3, r1
 800be66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be6e:	4b25      	ldr	r3, [pc, #148]	; (800bf04 <SD_ioctl+0xac>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <SD_ioctl+0x28>
 800be7c:	2303      	movs	r3, #3
 800be7e:	e03c      	b.n	800befa <SD_ioctl+0xa2>

  switch (cmd)
 800be80:	79bb      	ldrb	r3, [r7, #6]
 800be82:	2b03      	cmp	r3, #3
 800be84:	d834      	bhi.n	800bef0 <SD_ioctl+0x98>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <SD_ioctl+0x34>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800be9d 	.word	0x0800be9d
 800be90:	0800bea5 	.word	0x0800bea5
 800be94:	0800bebd 	.word	0x0800bebd
 800be98:	0800bed7 	.word	0x0800bed7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bea2:	e028      	b.n	800bef6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bea4:	f107 030c 	add.w	r3, r7, #12
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fe77 	bl	800bb9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800beae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beba:	e01c      	b.n	800bef6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff fe6b 	bl	800bb9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	b29a      	uxth	r2, r3
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bed4:	e00f      	b.n	800bef6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bed6:	f107 030c 	add.w	r3, r7, #12
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff fe5e 	bl	800bb9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	0a5a      	lsrs	r2, r3, #9
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beee:	e002      	b.n	800bef6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bef0:	2304      	movs	r3, #4
 800bef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800befa:	4618      	mov	r0, r3
 800befc:	3730      	adds	r7, #48	; 0x30
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000011 	.word	0x20000011

0800bf08 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <BSP_SD_ReadCpltCallback+0x20>)
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	1db9      	adds	r1, r7, #6
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f000 fb68 	bl	800c5f0 <osMessageQueuePut>
#endif
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	20000128 	.word	0x20000128

0800bf2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf42:	4b1f      	ldr	r3, [pc, #124]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf44:	7a5b      	ldrb	r3, [r3, #9]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d131      	bne.n	800bfb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf4c:	4b1c      	ldr	r3, [pc, #112]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf4e:	7a5b      	ldrb	r3, [r3, #9]
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	461a      	mov	r2, r3
 800bf54:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf56:	2100      	movs	r1, #0
 800bf58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf5a:	4b19      	ldr	r3, [pc, #100]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf5c:	7a5b      	ldrb	r3, [r3, #9]
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	4a17      	ldr	r2, [pc, #92]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf6a:	4b15      	ldr	r3, [pc, #84]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf6c:	7a5b      	ldrb	r3, [r3, #9]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	4b13      	ldr	r3, [pc, #76]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf74:	4413      	add	r3, r2
 800bf76:	79fa      	ldrb	r2, [r7, #7]
 800bf78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf7a:	4b11      	ldr	r3, [pc, #68]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf7c:	7a5b      	ldrb	r3, [r3, #9]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	b2d1      	uxtb	r1, r2
 800bf84:	4a0e      	ldr	r2, [pc, #56]	; (800bfc0 <FATFS_LinkDriverEx+0x94>)
 800bf86:	7251      	strb	r1, [r2, #9]
 800bf88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf8a:	7dbb      	ldrb	r3, [r7, #22]
 800bf8c:	3330      	adds	r3, #48	; 0x30
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3301      	adds	r3, #1
 800bf98:	223a      	movs	r2, #58	; 0x3a
 800bf9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	3302      	adds	r3, #2
 800bfa0:	222f      	movs	r2, #47	; 0x2f
 800bfa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	3303      	adds	r3, #3
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	371c      	adds	r7, #28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	2000012c 	.word	0x2000012c

0800bfc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfce:	2200      	movs	r2, #0
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff ffaa 	bl	800bf2c <FATFS_LinkDriverEx>
 800bfd8:	4603      	mov	r3, r0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <__NVIC_SetPriority>:
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	6039      	str	r1, [r7, #0]
 800bfee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	db0a      	blt.n	800c00e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	490c      	ldr	r1, [pc, #48]	; (800c030 <__NVIC_SetPriority+0x4c>)
 800bffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c002:	0112      	lsls	r2, r2, #4
 800c004:	b2d2      	uxtb	r2, r2
 800c006:	440b      	add	r3, r1
 800c008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c00c:	e00a      	b.n	800c024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	b2da      	uxtb	r2, r3
 800c012:	4908      	ldr	r1, [pc, #32]	; (800c034 <__NVIC_SetPriority+0x50>)
 800c014:	79fb      	ldrb	r3, [r7, #7]
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	3b04      	subs	r3, #4
 800c01c:	0112      	lsls	r2, r2, #4
 800c01e:	b2d2      	uxtb	r2, r2
 800c020:	440b      	add	r3, r1
 800c022:	761a      	strb	r2, [r3, #24]
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	e000e100 	.word	0xe000e100
 800c034:	e000ed00 	.word	0xe000ed00

0800c038 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c03c:	4b05      	ldr	r3, [pc, #20]	; (800c054 <SysTick_Handler+0x1c>)
 800c03e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c040:	f002 fae4 	bl	800e60c <xTaskGetSchedulerState>
 800c044:	4603      	mov	r3, r0
 800c046:	2b01      	cmp	r3, #1
 800c048:	d001      	beq.n	800c04e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c04a:	f003 f9cd 	bl	800f3e8 <xPortSysTickHandler>
  }
}
 800c04e:	bf00      	nop
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	e000e010 	.word	0xe000e010

0800c058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c05c:	2100      	movs	r1, #0
 800c05e:	f06f 0004 	mvn.w	r0, #4
 800c062:	f7ff ffbf 	bl	800bfe4 <__NVIC_SetPriority>
#endif
}
 800c066:	bf00      	nop
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c072:	f3ef 8305 	mrs	r3, IPSR
 800c076:	603b      	str	r3, [r7, #0]
  return(result);
 800c078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c07e:	f06f 0305 	mvn.w	r3, #5
 800c082:	607b      	str	r3, [r7, #4]
 800c084:	e00c      	b.n	800c0a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c086:	4b0a      	ldr	r3, [pc, #40]	; (800c0b0 <osKernelInitialize+0x44>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d105      	bne.n	800c09a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c08e:	4b08      	ldr	r3, [pc, #32]	; (800c0b0 <osKernelInitialize+0x44>)
 800c090:	2201      	movs	r2, #1
 800c092:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c094:	2300      	movs	r3, #0
 800c096:	607b      	str	r3, [r7, #4]
 800c098:	e002      	b.n	800c0a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c09a:	f04f 33ff 	mov.w	r3, #4294967295
 800c09e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0a0:	687b      	ldr	r3, [r7, #4]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	20000138 	.word	0x20000138

0800c0b4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c0ba:	f002 faa7 	bl	800e60c <xTaskGetSchedulerState>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d004      	beq.n	800c0ce <osKernelGetState+0x1a>
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d105      	bne.n	800c0d4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	607b      	str	r3, [r7, #4]
      break;
 800c0cc:	e00c      	b.n	800c0e8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	607b      	str	r3, [r7, #4]
      break;
 800c0d2:	e009      	b.n	800c0e8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c0d4:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <osKernelGetState+0x40>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d102      	bne.n	800c0e2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c0e0:	e001      	b.n	800c0e6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
      break;
 800c0e6:	bf00      	nop
  }

  return (state);
 800c0e8:	687b      	ldr	r3, [r7, #4]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000138 	.word	0x20000138

0800c0f8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0fe:	f3ef 8305 	mrs	r3, IPSR
 800c102:	603b      	str	r3, [r7, #0]
  return(result);
 800c104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c10a:	f06f 0305 	mvn.w	r3, #5
 800c10e:	607b      	str	r3, [r7, #4]
 800c110:	e010      	b.n	800c134 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c112:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <osKernelStart+0x48>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d109      	bne.n	800c12e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c11a:	f7ff ff9d 	bl	800c058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <osKernelStart+0x48>)
 800c120:	2202      	movs	r2, #2
 800c122:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c124:	f001 fe04 	bl	800dd30 <vTaskStartScheduler>
      stat = osOK;
 800c128:	2300      	movs	r3, #0
 800c12a:	607b      	str	r3, [r7, #4]
 800c12c:	e002      	b.n	800c134 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c12e:	f04f 33ff 	mov.w	r3, #4294967295
 800c132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c134:	687b      	ldr	r3, [r7, #4]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	20000138 	.word	0x20000138

0800c144 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c14a:	f3ef 8305 	mrs	r3, IPSR
 800c14e:	603b      	str	r3, [r7, #0]
  return(result);
 800c150:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c156:	f001 ff17 	bl	800df88 <xTaskGetTickCountFromISR>
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	e002      	b.n	800c164 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c15e:	f001 ff03 	bl	800df68 <xTaskGetTickCount>
 800c162:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c164:	687b      	ldr	r3, [r7, #4]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c16e:	b580      	push	{r7, lr}
 800c170:	b08e      	sub	sp, #56	; 0x38
 800c172:	af04      	add	r7, sp, #16
 800c174:	60f8      	str	r0, [r7, #12]
 800c176:	60b9      	str	r1, [r7, #8]
 800c178:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c17e:	f3ef 8305 	mrs	r3, IPSR
 800c182:	617b      	str	r3, [r7, #20]
  return(result);
 800c184:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c186:	2b00      	cmp	r3, #0
 800c188:	d17e      	bne.n	800c288 <osThreadNew+0x11a>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d07b      	beq.n	800c288 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c194:	2318      	movs	r3, #24
 800c196:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c19c:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d045      	beq.n	800c234 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d002      	beq.n	800c1b6 <osThreadNew+0x48>
        name = attr->name;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d008      	beq.n	800c1dc <osThreadNew+0x6e>
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	2b38      	cmp	r3, #56	; 0x38
 800c1ce:	d805      	bhi.n	800c1dc <osThreadNew+0x6e>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <osThreadNew+0x72>
        return (NULL);
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e054      	b.n	800c28a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	695b      	ldr	r3, [r3, #20]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d003      	beq.n	800c1f0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	089b      	lsrs	r3, r3, #2
 800c1ee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00e      	beq.n	800c216 <osThreadNew+0xa8>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	2bbb      	cmp	r3, #187	; 0xbb
 800c1fe:	d90a      	bls.n	800c216 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c204:	2b00      	cmp	r3, #0
 800c206:	d006      	beq.n	800c216 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <osThreadNew+0xa8>
        mem = 1;
 800c210:	2301      	movs	r3, #1
 800c212:	61bb      	str	r3, [r7, #24]
 800c214:	e010      	b.n	800c238 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10c      	bne.n	800c238 <osThreadNew+0xca>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d108      	bne.n	800c238 <osThreadNew+0xca>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d104      	bne.n	800c238 <osThreadNew+0xca>
          mem = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e001      	b.n	800c238 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d110      	bne.n	800c260 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c246:	9202      	str	r2, [sp, #8]
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	6a3a      	ldr	r2, [r7, #32]
 800c252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f001 fb7f 	bl	800d958 <xTaskCreateStatic>
 800c25a:	4603      	mov	r3, r0
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	e013      	b.n	800c288 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d110      	bne.n	800c288 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	b29a      	uxth	r2, r3
 800c26a:	f107 0310 	add.w	r3, r7, #16
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f001 fbca 	bl	800da12 <xTaskCreate>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b01      	cmp	r3, #1
 800c282:	d001      	beq.n	800c288 <osThreadNew+0x11a>
            hTask = NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c288:	693b      	ldr	r3, [r7, #16]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3728      	adds	r7, #40	; 0x28
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c29a:	f3ef 8305 	mrs	r3, IPSR
 800c29e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <osDelay+0x1c>
    stat = osErrorISR;
 800c2a6:	f06f 0305 	mvn.w	r3, #5
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	e007      	b.n	800c2be <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <osDelay+0x2c>
      vTaskDelay(ticks);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 fd05 	bl	800dcc8 <vTaskDelay>
    }
  }

  return (stat);
 800c2be:	68fb      	ldr	r3, [r7, #12]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08a      	sub	sp, #40	; 0x28
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2d8:	f3ef 8305 	mrs	r3, IPSR
 800c2dc:	613b      	str	r3, [r7, #16]
  return(result);
 800c2de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d175      	bne.n	800c3d0 <osSemaphoreNew+0x108>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d072      	beq.n	800c3d0 <osSemaphoreNew+0x108>
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d86e      	bhi.n	800c3d0 <osSemaphoreNew+0x108>
    mem = -1;
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d015      	beq.n	800c32a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d006      	beq.n	800c314 <osSemaphoreNew+0x4c>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	2b4f      	cmp	r3, #79	; 0x4f
 800c30c:	d902      	bls.n	800c314 <osSemaphoreNew+0x4c>
        mem = 1;
 800c30e:	2301      	movs	r3, #1
 800c310:	61bb      	str	r3, [r7, #24]
 800c312:	e00c      	b.n	800c32e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d108      	bne.n	800c32e <osSemaphoreNew+0x66>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <osSemaphoreNew+0x66>
          mem = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	61bb      	str	r3, [r7, #24]
 800c328:	e001      	b.n	800c32e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c334:	d04c      	beq.n	800c3d0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d128      	bne.n	800c38e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d10a      	bne.n	800c358 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	2203      	movs	r2, #3
 800c348:	9200      	str	r2, [sp, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	2100      	movs	r1, #0
 800c34e:	2001      	movs	r0, #1
 800c350:	f000 fb5c 	bl	800ca0c <xQueueGenericCreateStatic>
 800c354:	61f8      	str	r0, [r7, #28]
 800c356:	e005      	b.n	800c364 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c358:	2203      	movs	r2, #3
 800c35a:	2100      	movs	r1, #0
 800c35c:	2001      	movs	r0, #1
 800c35e:	f000 fbcd 	bl	800cafc <xQueueGenericCreate>
 800c362:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d022      	beq.n	800c3b0 <osSemaphoreNew+0xe8>
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01f      	beq.n	800c3b0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c370:	2300      	movs	r3, #0
 800c372:	2200      	movs	r2, #0
 800c374:	2100      	movs	r1, #0
 800c376:	69f8      	ldr	r0, [r7, #28]
 800c378:	f000 fc88 	bl	800cc8c <xQueueGenericSend>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d016      	beq.n	800c3b0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c382:	69f8      	ldr	r0, [r7, #28]
 800c384:	f001 f914 	bl	800d5b0 <vQueueDelete>
            hSemaphore = NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	61fb      	str	r3, [r7, #28]
 800c38c:	e010      	b.n	800c3b0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d108      	bne.n	800c3a6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	461a      	mov	r2, r3
 800c39a:	68b9      	ldr	r1, [r7, #8]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 fc0a 	bl	800cbb6 <xQueueCreateCountingSemaphoreStatic>
 800c3a2:	61f8      	str	r0, [r7, #28]
 800c3a4:	e004      	b.n	800c3b0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c3a6:	68b9      	ldr	r1, [r7, #8]
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 fc3b 	bl	800cc24 <xQueueCreateCountingSemaphore>
 800c3ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00c      	beq.n	800c3d0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	e001      	b.n	800c3c8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c3c8:	6979      	ldr	r1, [r7, #20]
 800c3ca:	69f8      	ldr	r0, [r7, #28]
 800c3cc:	f001 fa3c 	bl	800d848 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c3d0:	69fb      	ldr	r3, [r7, #28]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3720      	adds	r7, #32
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d103      	bne.n	800c3fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c3f4:	f06f 0303 	mvn.w	r3, #3
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	e039      	b.n	800c470 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3fc:	f3ef 8305 	mrs	r3, IPSR
 800c400:	60fb      	str	r3, [r7, #12]
  return(result);
 800c402:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c404:	2b00      	cmp	r3, #0
 800c406:	d022      	beq.n	800c44e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c40e:	f06f 0303 	mvn.w	r3, #3
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e02c      	b.n	800c470 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c416:	2300      	movs	r3, #0
 800c418:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c41a:	f107 0308 	add.w	r3, r7, #8
 800c41e:	461a      	mov	r2, r3
 800c420:	2100      	movs	r1, #0
 800c422:	6938      	ldr	r0, [r7, #16]
 800c424:	f001 f844 	bl	800d4b0 <xQueueReceiveFromISR>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d003      	beq.n	800c436 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c42e:	f06f 0302 	mvn.w	r3, #2
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	e01c      	b.n	800c470 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d019      	beq.n	800c470 <osSemaphoreAcquire+0x94>
 800c43c:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <osSemaphoreAcquire+0xa0>)
 800c43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	e010      	b.n	800c470 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6938      	ldr	r0, [r7, #16]
 800c452:	f000 ff21 	bl	800d298 <xQueueSemaphoreTake>
 800c456:	4603      	mov	r3, r0
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d009      	beq.n	800c470 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c462:	f06f 0301 	mvn.w	r3, #1
 800c466:	617b      	str	r3, [r7, #20]
 800c468:	e002      	b.n	800c470 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c46a:	f06f 0302 	mvn.w	r3, #2
 800c46e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c470:	697b      	ldr	r3, [r7, #20]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	e000ed04 	.word	0xe000ed04

0800c480 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d103      	bne.n	800c49e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c496:	f06f 0303 	mvn.w	r3, #3
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	e02c      	b.n	800c4f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c49e:	f3ef 8305 	mrs	r3, IPSR
 800c4a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01a      	beq.n	800c4e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c4ae:	f107 0308 	add.w	r3, r7, #8
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6938      	ldr	r0, [r7, #16]
 800c4b6:	f000 fd82 	bl	800cfbe <xQueueGiveFromISR>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d003      	beq.n	800c4c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c4c0:	f06f 0302 	mvn.w	r3, #2
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	e017      	b.n	800c4f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d014      	beq.n	800c4f8 <osSemaphoreRelease+0x78>
 800c4ce:	4b0d      	ldr	r3, [pc, #52]	; (800c504 <osSemaphoreRelease+0x84>)
 800c4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	e00b      	b.n	800c4f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	6938      	ldr	r0, [r7, #16]
 800c4e8:	f000 fbd0 	bl	800cc8c <xQueueGenericSend>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d002      	beq.n	800c4f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c4f2:	f06f 0302 	mvn.w	r3, #2
 800c4f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c4f8:	697b      	ldr	r3, [r7, #20]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	e000ed04 	.word	0xe000ed04

0800c508 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08a      	sub	sp, #40	; 0x28
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c518:	f3ef 8305 	mrs	r3, IPSR
 800c51c:	613b      	str	r3, [r7, #16]
  return(result);
 800c51e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c520:	2b00      	cmp	r3, #0
 800c522:	d15f      	bne.n	800c5e4 <osMessageQueueNew+0xdc>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d05c      	beq.n	800c5e4 <osMessageQueueNew+0xdc>
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d059      	beq.n	800c5e4 <osMessageQueueNew+0xdc>
    mem = -1;
 800c530:	f04f 33ff 	mov.w	r3, #4294967295
 800c534:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d029      	beq.n	800c590 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d012      	beq.n	800c56a <osMessageQueueNew+0x62>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	2b4f      	cmp	r3, #79	; 0x4f
 800c54a:	d90e      	bls.n	800c56a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00a      	beq.n	800c56a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	695a      	ldr	r2, [r3, #20]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	68b9      	ldr	r1, [r7, #8]
 800c55c:	fb01 f303 	mul.w	r3, r1, r3
 800c560:	429a      	cmp	r2, r3
 800c562:	d302      	bcc.n	800c56a <osMessageQueueNew+0x62>
        mem = 1;
 800c564:	2301      	movs	r3, #1
 800c566:	61bb      	str	r3, [r7, #24]
 800c568:	e014      	b.n	800c594 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d110      	bne.n	800c594 <osMessageQueueNew+0x8c>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10c      	bne.n	800c594 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d108      	bne.n	800c594 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d104      	bne.n	800c594 <osMessageQueueNew+0x8c>
          mem = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	61bb      	str	r3, [r7, #24]
 800c58e:	e001      	b.n	800c594 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d10b      	bne.n	800c5b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691a      	ldr	r2, [r3, #16]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	9100      	str	r1, [sp, #0]
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 fa2f 	bl	800ca0c <xQueueGenericCreateStatic>
 800c5ae:	61f8      	str	r0, [r7, #28]
 800c5b0:	e008      	b.n	800c5c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	68b9      	ldr	r1, [r7, #8]
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 fa9d 	bl	800cafc <xQueueGenericCreate>
 800c5c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00c      	beq.n	800c5e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	e001      	b.n	800c5dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c5dc:	6979      	ldr	r1, [r7, #20]
 800c5de:	69f8      	ldr	r0, [r7, #28]
 800c5e0:	f001 f932 	bl	800d848 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c5e4:	69fb      	ldr	r3, [r7, #28]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3720      	adds	r7, #32
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
	...

0800c5f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	603b      	str	r3, [r7, #0]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c604:	2300      	movs	r3, #0
 800c606:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c608:	f3ef 8305 	mrs	r3, IPSR
 800c60c:	617b      	str	r3, [r7, #20]
  return(result);
 800c60e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c610:	2b00      	cmp	r3, #0
 800c612:	d028      	beq.n	800c666 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d005      	beq.n	800c626 <osMessageQueuePut+0x36>
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <osMessageQueuePut+0x36>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c626:	f06f 0303 	mvn.w	r3, #3
 800c62a:	61fb      	str	r3, [r7, #28]
 800c62c:	e038      	b.n	800c6a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c62e:	2300      	movs	r3, #0
 800c630:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c632:	f107 0210 	add.w	r2, r7, #16
 800c636:	2300      	movs	r3, #0
 800c638:	68b9      	ldr	r1, [r7, #8]
 800c63a:	69b8      	ldr	r0, [r7, #24]
 800c63c:	f000 fc24 	bl	800ce88 <xQueueGenericSendFromISR>
 800c640:	4603      	mov	r3, r0
 800c642:	2b01      	cmp	r3, #1
 800c644:	d003      	beq.n	800c64e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c646:	f06f 0302 	mvn.w	r3, #2
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	e028      	b.n	800c6a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d025      	beq.n	800c6a0 <osMessageQueuePut+0xb0>
 800c654:	4b15      	ldr	r3, [pc, #84]	; (800c6ac <osMessageQueuePut+0xbc>)
 800c656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	e01c      	b.n	800c6a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <osMessageQueuePut+0x82>
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c672:	f06f 0303 	mvn.w	r3, #3
 800c676:	61fb      	str	r3, [r7, #28]
 800c678:	e012      	b.n	800c6a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c67a:	2300      	movs	r3, #0
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	68b9      	ldr	r1, [r7, #8]
 800c680:	69b8      	ldr	r0, [r7, #24]
 800c682:	f000 fb03 	bl	800cc8c <xQueueGenericSend>
 800c686:	4603      	mov	r3, r0
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d009      	beq.n	800c6a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c692:	f06f 0301 	mvn.w	r3, #1
 800c696:	61fb      	str	r3, [r7, #28]
 800c698:	e002      	b.n	800c6a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c69a:	f06f 0302 	mvn.w	r3, #2
 800c69e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c6a0:	69fb      	ldr	r3, [r7, #28]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3720      	adds	r7, #32
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6c6:	f3ef 8305 	mrs	r3, IPSR
 800c6ca:	617b      	str	r3, [r7, #20]
  return(result);
 800c6cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d028      	beq.n	800c724 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d005      	beq.n	800c6e4 <osMessageQueueGet+0x34>
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <osMessageQueueGet+0x34>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c6e4:	f06f 0303 	mvn.w	r3, #3
 800c6e8:	61fb      	str	r3, [r7, #28]
 800c6ea:	e037      	b.n	800c75c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c6f0:	f107 0310 	add.w	r3, r7, #16
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	69b8      	ldr	r0, [r7, #24]
 800c6fa:	f000 fed9 	bl	800d4b0 <xQueueReceiveFromISR>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b01      	cmp	r3, #1
 800c702:	d003      	beq.n	800c70c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c704:	f06f 0302 	mvn.w	r3, #2
 800c708:	61fb      	str	r3, [r7, #28]
 800c70a:	e027      	b.n	800c75c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d024      	beq.n	800c75c <osMessageQueueGet+0xac>
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <osMessageQueueGet+0xb8>)
 800c714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c718:	601a      	str	r2, [r3, #0]
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	e01b      	b.n	800c75c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <osMessageQueueGet+0x80>
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d103      	bne.n	800c738 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c730:	f06f 0303 	mvn.w	r3, #3
 800c734:	61fb      	str	r3, [r7, #28]
 800c736:	e011      	b.n	800c75c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	68b9      	ldr	r1, [r7, #8]
 800c73c:	69b8      	ldr	r0, [r7, #24]
 800c73e:	f000 fccb 	bl	800d0d8 <xQueueReceive>
 800c742:	4603      	mov	r3, r0
 800c744:	2b01      	cmp	r3, #1
 800c746:	d009      	beq.n	800c75c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c74e:	f06f 0301 	mvn.w	r3, #1
 800c752:	61fb      	str	r3, [r7, #28]
 800c754:	e002      	b.n	800c75c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c756:	f06f 0302 	mvn.w	r3, #2
 800c75a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c75c:	69fb      	ldr	r3, [r7, #28]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3720      	adds	r7, #32
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	e000ed04 	.word	0xe000ed04

0800c76c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	4a07      	ldr	r2, [pc, #28]	; (800c798 <vApplicationGetIdleTaskMemory+0x2c>)
 800c77c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	4a06      	ldr	r2, [pc, #24]	; (800c79c <vApplicationGetIdleTaskMemory+0x30>)
 800c782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2240      	movs	r2, #64	; 0x40
 800c788:	601a      	str	r2, [r3, #0]
}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	2000013c 	.word	0x2000013c
 800c79c:	200001f8 	.word	0x200001f8

0800c7a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4a07      	ldr	r2, [pc, #28]	; (800c7cc <vApplicationGetTimerTaskMemory+0x2c>)
 800c7b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	4a06      	ldr	r2, [pc, #24]	; (800c7d0 <vApplicationGetTimerTaskMemory+0x30>)
 800c7b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2280      	movs	r2, #128	; 0x80
 800c7bc:	601a      	str	r2, [r3, #0]
}
 800c7be:	bf00      	nop
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	200002f8 	.word	0x200002f8
 800c7d0:	200003b4 	.word	0x200003b4

0800c7d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f103 0208 	add.w	r2, r3, #8
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f103 0208 	add.w	r2, r3, #8
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f103 0208 	add.w	r2, r3, #8
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c822:	bf00      	nop
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c82e:	b480      	push	{r7}
 800c830:	b085      	sub	sp, #20
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	601a      	str	r2, [r3, #0]
}
 800c86a:	bf00      	nop
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c876:	b480      	push	{r7}
 800c878:	b085      	sub	sp, #20
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88c:	d103      	bne.n	800c896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e00c      	b.n	800c8b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3308      	adds	r3, #8
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	e002      	b.n	800c8a4 <vListInsert+0x2e>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d2f6      	bcs.n	800c89e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	601a      	str	r2, [r3, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6892      	ldr	r2, [r2, #8]
 800c8fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	6852      	ldr	r2, [r2, #4]
 800c908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	429a      	cmp	r2, r3
 800c912:	d103      	bne.n	800c91c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	689a      	ldr	r2, [r3, #8]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	1e5a      	subs	r2, r3, #1
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10a      	bne.n	800c966 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c966:	f002 fcad 	bl	800f2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c972:	68f9      	ldr	r1, [r7, #12]
 800c974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c976:	fb01 f303 	mul.w	r3, r1, r3
 800c97a:	441a      	add	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2200      	movs	r2, #0
 800c984:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c996:	3b01      	subs	r3, #1
 800c998:	68f9      	ldr	r1, [r7, #12]
 800c99a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c99c:	fb01 f303 	mul.w	r3, r1, r3
 800c9a0:	441a      	add	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	22ff      	movs	r2, #255	; 0xff
 800c9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	22ff      	movs	r2, #255	; 0xff
 800c9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d114      	bne.n	800c9e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d01a      	beq.n	800c9fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3310      	adds	r3, #16
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 fc5d 	bl	800e288 <xTaskRemoveFromEventList>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d012      	beq.n	800c9fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <xQueueGenericReset+0xcc>)
 800c9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	e009      	b.n	800c9fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3310      	adds	r3, #16
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fef2 	bl	800c7d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3324      	adds	r3, #36	; 0x24
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff feed 	bl	800c7d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9fa:	f002 fc93 	bl	800f324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9fe:	2301      	movs	r3, #1
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08e      	sub	sp, #56	; 0x38
 800ca10:	af02      	add	r7, sp, #8
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca32:	bf00      	nop
 800ca34:	e7fe      	b.n	800ca34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10a      	bne.n	800ca52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <xQueueGenericCreateStatic+0x52>
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <xQueueGenericCreateStatic+0x56>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e000      	b.n	800ca64 <xQueueGenericCreateStatic+0x58>
 800ca62:	2300      	movs	r3, #0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	623b      	str	r3, [r7, #32]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <xQueueGenericCreateStatic+0x7e>
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueGenericCreateStatic+0x82>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueGenericCreateStatic+0x84>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	61fb      	str	r3, [r7, #28]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800caaa:	2350      	movs	r3, #80	; 0x50
 800caac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b50      	cmp	r3, #80	; 0x50
 800cab2:	d00a      	beq.n	800caca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	61bb      	str	r3, [r7, #24]
}
 800cac6:	bf00      	nop
 800cac8:	e7fe      	b.n	800cac8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800caca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00d      	beq.n	800caf2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cade:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4613      	mov	r3, r2
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f000 f83f 	bl	800cb70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3730      	adds	r7, #48	; 0x30
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	; 0x28
 800cb00:	af02      	add	r7, sp, #8
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4613      	mov	r3, r2
 800cb08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10a      	bne.n	800cb26 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	613b      	str	r3, [r7, #16]
}
 800cb22:	bf00      	nop
 800cb24:	e7fe      	b.n	800cb24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	fb02 f303 	mul.w	r3, r2, r3
 800cb2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	3350      	adds	r3, #80	; 0x50
 800cb34:	4618      	mov	r0, r3
 800cb36:	f002 fce7 	bl	800f508 <pvPortMalloc>
 800cb3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d011      	beq.n	800cb66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3350      	adds	r3, #80	; 0x50
 800cb4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb54:	79fa      	ldrb	r2, [r7, #7]
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 f805 	bl	800cb70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb66:	69bb      	ldr	r3, [r7, #24]
	}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3720      	adds	r7, #32
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d103      	bne.n	800cb8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	69ba      	ldr	r2, [r7, #24]
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	e002      	b.n	800cb92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb9e:	2101      	movs	r1, #1
 800cba0:	69b8      	ldr	r0, [r7, #24]
 800cba2:	f7ff fecb 	bl	800c93c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cbae:	bf00      	nop
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b08a      	sub	sp, #40	; 0x28
 800cbba:	af02      	add	r7, sp, #8
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	60b9      	str	r1, [r7, #8]
 800cbc0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	61bb      	str	r3, [r7, #24]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d90a      	bls.n	800cbfc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	617b      	str	r3, [r7, #20]
}
 800cbf8:	bf00      	nop
 800cbfa:	e7fe      	b.n	800cbfa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	2100      	movs	r1, #0
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7ff ff00 	bl	800ca0c <xQueueGenericCreateStatic>
 800cc0c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc1a:	69fb      	ldr	r3, [r7, #28]
	}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	613b      	str	r3, [r7, #16]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d90a      	bls.n	800cc68 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	60fb      	str	r3, [r7, #12]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc68:	2202      	movs	r2, #2
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ff45 	bl	800cafc <xQueueGenericCreate>
 800cc72:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc80:	697b      	ldr	r3, [r7, #20]
	}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
	...

0800cc8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08e      	sub	sp, #56	; 0x38
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10a      	bne.n	800ccbe <xQueueGenericSend+0x32>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d103      	bne.n	800cccc <xQueueGenericSend+0x40>
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <xQueueGenericSend+0x44>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e000      	b.n	800ccd2 <xQueueGenericSend+0x46>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10a      	bne.n	800ccec <xQueueGenericSend+0x60>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d103      	bne.n	800ccfa <xQueueGenericSend+0x6e>
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d101      	bne.n	800ccfe <xQueueGenericSend+0x72>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e000      	b.n	800cd00 <xQueueGenericSend+0x74>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10a      	bne.n	800cd1a <xQueueGenericSend+0x8e>
	__asm volatile
 800cd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	623b      	str	r3, [r7, #32]
}
 800cd16:	bf00      	nop
 800cd18:	e7fe      	b.n	800cd18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd1a:	f001 fc77 	bl	800e60c <xTaskGetSchedulerState>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <xQueueGenericSend+0x9e>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <xQueueGenericSend+0xa2>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <xQueueGenericSend+0xa4>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10a      	bne.n	800cd4a <xQueueGenericSend+0xbe>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	61fb      	str	r3, [r7, #28]
}
 800cd46:	bf00      	nop
 800cd48:	e7fe      	b.n	800cd48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd4a:	f002 fabb 	bl	800f2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d302      	bcc.n	800cd60 <xQueueGenericSend+0xd4>
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d129      	bne.n	800cdb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	68b9      	ldr	r1, [r7, #8]
 800cd64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd66:	f000 fc5e 	bl	800d626 <prvCopyDataToQueue>
 800cd6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d010      	beq.n	800cd96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	3324      	adds	r3, #36	; 0x24
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f001 fa85 	bl	800e288 <xTaskRemoveFromEventList>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d013      	beq.n	800cdac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd84:	4b3f      	ldr	r3, [pc, #252]	; (800ce84 <xQueueGenericSend+0x1f8>)
 800cd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	e00a      	b.n	800cdac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d007      	beq.n	800cdac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd9c:	4b39      	ldr	r3, [pc, #228]	; (800ce84 <xQueueGenericSend+0x1f8>)
 800cd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cdac:	f002 faba 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e063      	b.n	800ce7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d103      	bne.n	800cdc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdba:	f002 fab3 	bl	800f324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e05c      	b.n	800ce7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d106      	bne.n	800cdd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdc8:	f107 0314 	add.w	r3, r7, #20
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f001 fabf 	bl	800e350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdd6:	f002 faa5 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdda:	f001 f819 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdde:	f002 fa71 	bl	800f2c4 <vPortEnterCritical>
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cde8:	b25b      	sxtb	r3, r3
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdee:	d103      	bne.n	800cdf8 <xQueueGenericSend+0x16c>
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdfe:	b25b      	sxtb	r3, r3
 800ce00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce04:	d103      	bne.n	800ce0e <xQueueGenericSend+0x182>
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce0e:	f002 fa89 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce12:	1d3a      	adds	r2, r7, #4
 800ce14:	f107 0314 	add.w	r3, r7, #20
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f001 faae 	bl	800e37c <xTaskCheckForTimeOut>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d124      	bne.n	800ce70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce28:	f000 fcf5 	bl	800d816 <prvIsQueueFull>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d018      	beq.n	800ce64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	3310      	adds	r3, #16
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	4611      	mov	r1, r2
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f001 f9d4 	bl	800e1e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce42:	f000 fc80 	bl	800d746 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce46:	f000 fff1 	bl	800de2c <xTaskResumeAll>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f47f af7c 	bne.w	800cd4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce52:	4b0c      	ldr	r3, [pc, #48]	; (800ce84 <xQueueGenericSend+0x1f8>)
 800ce54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	e772      	b.n	800cd4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce66:	f000 fc6e 	bl	800d746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce6a:	f000 ffdf 	bl	800de2c <xTaskResumeAll>
 800ce6e:	e76c      	b.n	800cd4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce72:	f000 fc68 	bl	800d746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce76:	f000 ffd9 	bl	800de2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3738      	adds	r7, #56	; 0x38
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	e000ed04 	.word	0xe000ed04

0800ce88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b090      	sub	sp, #64	; 0x40
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10a      	bne.n	800ceb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d103      	bne.n	800cec4 <xQueueGenericSendFromISR+0x3c>
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <xQueueGenericSendFromISR+0x40>
 800cec4:	2301      	movs	r3, #1
 800cec6:	e000      	b.n	800ceca <xQueueGenericSendFromISR+0x42>
 800cec8:	2300      	movs	r3, #0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10a      	bne.n	800cee4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cee0:	bf00      	nop
 800cee2:	e7fe      	b.n	800cee2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d103      	bne.n	800cef2 <xQueueGenericSendFromISR+0x6a>
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d101      	bne.n	800cef6 <xQueueGenericSendFromISR+0x6e>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <xQueueGenericSendFromISR+0x70>
 800cef6:	2300      	movs	r3, #0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	623b      	str	r3, [r7, #32]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf12:	f002 fab9 	bl	800f488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf16:	f3ef 8211 	mrs	r2, BASEPRI
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	61fa      	str	r2, [r7, #28]
 800cf2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d302      	bcc.n	800cf44 <xQueueGenericSendFromISR+0xbc>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d12f      	bne.n	800cfa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf5a:	f000 fb64 	bl	800d626 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf66:	d112      	bne.n	800cf8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d016      	beq.n	800cf9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	3324      	adds	r3, #36	; 0x24
 800cf74:	4618      	mov	r0, r3
 800cf76:	f001 f987 	bl	800e288 <xTaskRemoveFromEventList>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00e      	beq.n	800cf9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00b      	beq.n	800cf9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	e007      	b.n	800cf9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf92:	3301      	adds	r3, #1
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	b25a      	sxtb	r2, r3
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cfa2:	e001      	b.n	800cfa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cfb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3740      	adds	r7, #64	; 0x40
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b08e      	sub	sp, #56	; 0x38
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10a      	bne.n	800cfe8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	623b      	str	r3, [r7, #32]
}
 800cfe4:	bf00      	nop
 800cfe6:	e7fe      	b.n	800cfe6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00a      	beq.n	800d006 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	61fb      	str	r3, [r7, #28]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d103      	bne.n	800d016 <xQueueGiveFromISR+0x58>
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <xQueueGiveFromISR+0x5c>
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <xQueueGiveFromISR+0x5e>
 800d01a:	2300      	movs	r3, #0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10a      	bne.n	800d036 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	61bb      	str	r3, [r7, #24]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d036:	f002 fa27 	bl	800f488 <vPortValidateInterruptPriority>
	__asm volatile
 800d03a:	f3ef 8211 	mrs	r2, BASEPRI
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	617a      	str	r2, [r7, #20]
 800d050:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d052:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d054:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d062:	429a      	cmp	r2, r3
 800d064:	d22b      	bcs.n	800d0be <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d06c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	1c5a      	adds	r2, r3, #1
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d078:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d080:	d112      	bne.n	800d0a8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	2b00      	cmp	r3, #0
 800d088:	d016      	beq.n	800d0b8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	3324      	adds	r3, #36	; 0x24
 800d08e:	4618      	mov	r0, r3
 800d090:	f001 f8fa 	bl	800e288 <xTaskRemoveFromEventList>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00e      	beq.n	800d0b8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	e007      	b.n	800d0b8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	b25a      	sxtb	r2, r3
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d0bc:	e001      	b.n	800d0c2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f383 8811 	msr	BASEPRI, r3
}
 800d0cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3738      	adds	r7, #56	; 0x38
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08c      	sub	sp, #48	; 0x30
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d10a      	bne.n	800d108 <xQueueReceive+0x30>
	__asm volatile
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	623b      	str	r3, [r7, #32]
}
 800d104:	bf00      	nop
 800d106:	e7fe      	b.n	800d106 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d103      	bne.n	800d116 <xQueueReceive+0x3e>
 800d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <xQueueReceive+0x42>
 800d116:	2301      	movs	r3, #1
 800d118:	e000      	b.n	800d11c <xQueueReceive+0x44>
 800d11a:	2300      	movs	r3, #0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10a      	bne.n	800d136 <xQueueReceive+0x5e>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	61fb      	str	r3, [r7, #28]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d136:	f001 fa69 	bl	800e60c <xTaskGetSchedulerState>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d102      	bne.n	800d146 <xQueueReceive+0x6e>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <xQueueReceive+0x72>
 800d146:	2301      	movs	r3, #1
 800d148:	e000      	b.n	800d14c <xQueueReceive+0x74>
 800d14a:	2300      	movs	r3, #0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10a      	bne.n	800d166 <xQueueReceive+0x8e>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	61bb      	str	r3, [r7, #24]
}
 800d162:	bf00      	nop
 800d164:	e7fe      	b.n	800d164 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d166:	f002 f8ad 	bl	800f2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	2b00      	cmp	r3, #0
 800d174:	d01f      	beq.n	800d1b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d176:	68b9      	ldr	r1, [r7, #8]
 800d178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d17a:	f000 fabe 	bl	800d6fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d184:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00f      	beq.n	800d1ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	3310      	adds	r3, #16
 800d192:	4618      	mov	r0, r3
 800d194:	f001 f878 	bl	800e288 <xTaskRemoveFromEventList>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d007      	beq.n	800d1ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d19e:	4b3d      	ldr	r3, [pc, #244]	; (800d294 <xQueueReceive+0x1bc>)
 800d1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1ae:	f002 f8b9 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e069      	b.n	800d28a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d103      	bne.n	800d1c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1bc:	f002 f8b2 	bl	800f324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e062      	b.n	800d28a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d106      	bne.n	800d1d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1ca:	f107 0310 	add.w	r3, r7, #16
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 f8be 	bl	800e350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1d8:	f002 f8a4 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1dc:	f000 fe18 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1e0:	f002 f870 	bl	800f2c4 <vPortEnterCritical>
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1ea:	b25b      	sxtb	r3, r3
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f0:	d103      	bne.n	800d1fa <xQueueReceive+0x122>
 800d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d200:	b25b      	sxtb	r3, r3
 800d202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d206:	d103      	bne.n	800d210 <xQueueReceive+0x138>
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d210:	f002 f888 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d214:	1d3a      	adds	r2, r7, #4
 800d216:	f107 0310 	add.w	r3, r7, #16
 800d21a:	4611      	mov	r1, r2
 800d21c:	4618      	mov	r0, r3
 800d21e:	f001 f8ad 	bl	800e37c <xTaskCheckForTimeOut>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d123      	bne.n	800d270 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d22a:	f000 fade 	bl	800d7ea <prvIsQueueEmpty>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d017      	beq.n	800d264 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	3324      	adds	r3, #36	; 0x24
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	4611      	mov	r1, r2
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 ffd3 	bl	800e1e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d244:	f000 fa7f 	bl	800d746 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d248:	f000 fdf0 	bl	800de2c <xTaskResumeAll>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d189      	bne.n	800d166 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d252:	4b10      	ldr	r3, [pc, #64]	; (800d294 <xQueueReceive+0x1bc>)
 800d254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	e780      	b.n	800d166 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d266:	f000 fa6e 	bl	800d746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d26a:	f000 fddf 	bl	800de2c <xTaskResumeAll>
 800d26e:	e77a      	b.n	800d166 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d272:	f000 fa68 	bl	800d746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d276:	f000 fdd9 	bl	800de2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d27c:	f000 fab5 	bl	800d7ea <prvIsQueueEmpty>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	f43f af6f 	beq.w	800d166 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3730      	adds	r7, #48	; 0x30
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	e000ed04 	.word	0xe000ed04

0800d298 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08e      	sub	sp, #56	; 0x38
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10a      	bne.n	800d2ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	623b      	str	r3, [r7, #32]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00a      	beq.n	800d2e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	61fb      	str	r3, [r7, #28]
}
 800d2e4:	bf00      	nop
 800d2e6:	e7fe      	b.n	800d2e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2e8:	f001 f990 	bl	800e60c <xTaskGetSchedulerState>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d102      	bne.n	800d2f8 <xQueueSemaphoreTake+0x60>
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <xQueueSemaphoreTake+0x64>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <xQueueSemaphoreTake+0x66>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	61bb      	str	r3, [r7, #24]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d318:	f001 ffd4 	bl	800f2c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	2b00      	cmp	r3, #0
 800d326:	d024      	beq.n	800d372 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	1e5a      	subs	r2, r3, #1
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d104      	bne.n	800d342 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d338:	f001 fade 	bl	800e8f8 <pvTaskIncrementMutexHeldCount>
 800d33c:	4602      	mov	r2, r0
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00f      	beq.n	800d36a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	3310      	adds	r3, #16
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 ff9a 	bl	800e288 <xTaskRemoveFromEventList>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d007      	beq.n	800d36a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d35a:	4b54      	ldr	r3, [pc, #336]	; (800d4ac <xQueueSemaphoreTake+0x214>)
 800d35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d36a:	f001 ffdb 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d36e:	2301      	movs	r3, #1
 800d370:	e097      	b.n	800d4a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d111      	bne.n	800d39c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00a      	beq.n	800d394 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	617b      	str	r3, [r7, #20]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d394:	f001 ffc6 	bl	800f324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d398:	2300      	movs	r3, #0
 800d39a:	e082      	b.n	800d4a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3a2:	f107 030c 	add.w	r3, r7, #12
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 ffd2 	bl	800e350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3b0:	f001 ffb8 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3b4:	f000 fd2c 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3b8:	f001 ff84 	bl	800f2c4 <vPortEnterCritical>
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3c2:	b25b      	sxtb	r3, r3
 800d3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c8:	d103      	bne.n	800d3d2 <xQueueSemaphoreTake+0x13a>
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3d8:	b25b      	sxtb	r3, r3
 800d3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3de:	d103      	bne.n	800d3e8 <xQueueSemaphoreTake+0x150>
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3e8:	f001 ff9c 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3ec:	463a      	mov	r2, r7
 800d3ee:	f107 030c 	add.w	r3, r7, #12
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 ffc1 	bl	800e37c <xTaskCheckForTimeOut>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d132      	bne.n	800d466 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d402:	f000 f9f2 	bl	800d7ea <prvIsQueueEmpty>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d026      	beq.n	800d45a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d109      	bne.n	800d428 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d414:	f001 ff56 	bl	800f2c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f001 f913 	bl	800e648 <xTaskPriorityInherit>
 800d422:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d424:	f001 ff7e 	bl	800f324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	3324      	adds	r3, #36	; 0x24
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fed9 	bl	800e1e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d438:	f000 f985 	bl	800d746 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d43c:	f000 fcf6 	bl	800de2c <xTaskResumeAll>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	f47f af68 	bne.w	800d318 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d448:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <xQueueSemaphoreTake+0x214>)
 800d44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	e75e      	b.n	800d318 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d45a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d45c:	f000 f973 	bl	800d746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d460:	f000 fce4 	bl	800de2c <xTaskResumeAll>
 800d464:	e758      	b.n	800d318 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d468:	f000 f96d 	bl	800d746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d46c:	f000 fcde 	bl	800de2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d472:	f000 f9ba 	bl	800d7ea <prvIsQueueEmpty>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f43f af4d 	beq.w	800d318 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00d      	beq.n	800d4a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d484:	f001 ff1e 	bl	800f2c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d48a:	f000 f8b4 	bl	800d5f6 <prvGetDisinheritPriorityAfterTimeout>
 800d48e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d496:	4618      	mov	r0, r3
 800d498:	f001 f9ac 	bl	800e7f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d49c:	f001 ff42 	bl	800f324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3738      	adds	r7, #56	; 0x38
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	e000ed04 	.word	0xe000ed04

0800d4b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b08e      	sub	sp, #56	; 0x38
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	623b      	str	r3, [r7, #32]
}
 800d4d8:	bf00      	nop
 800d4da:	e7fe      	b.n	800d4da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d103      	bne.n	800d4ea <xQueueReceiveFromISR+0x3a>
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <xQueueReceiveFromISR+0x3e>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e000      	b.n	800d4f0 <xQueueReceiveFromISR+0x40>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10a      	bne.n	800d50a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	61fb      	str	r3, [r7, #28]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d50a:	f001 ffbd 	bl	800f488 <vPortValidateInterruptPriority>
	__asm volatile
 800d50e:	f3ef 8211 	mrs	r2, BASEPRI
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	f383 8811 	msr	BASEPRI, r3
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	61ba      	str	r2, [r7, #24]
 800d524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d526:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	d02f      	beq.n	800d596 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d540:	68b9      	ldr	r1, [r7, #8]
 800d542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d544:	f000 f8d9 	bl	800d6fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54a:	1e5a      	subs	r2, r3, #1
 800d54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d558:	d112      	bne.n	800d580 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d016      	beq.n	800d590 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	3310      	adds	r3, #16
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fe8e 	bl	800e288 <xTaskRemoveFromEventList>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00e      	beq.n	800d590 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e007      	b.n	800d590 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d584:	3301      	adds	r3, #1
 800d586:	b2db      	uxtb	r3, r3
 800d588:	b25a      	sxtb	r2, r3
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d590:	2301      	movs	r3, #1
 800d592:	637b      	str	r3, [r7, #52]	; 0x34
 800d594:	e001      	b.n	800d59a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d596:	2300      	movs	r3, #0
 800d598:	637b      	str	r3, [r7, #52]	; 0x34
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f383 8811 	msr	BASEPRI, r3
}
 800d5a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3738      	adds	r7, #56	; 0x38
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10a      	bne.n	800d5d8 <vQueueDelete+0x28>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60bb      	str	r3, [r7, #8]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f000 f95f 	bl	800d89c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d102      	bne.n	800d5ee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f002 f859 	bl	800f6a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b085      	sub	sp, #20
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	2b00      	cmp	r3, #0
 800d604:	d006      	beq.n	800d614 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d610:	60fb      	str	r3, [r7, #12]
 800d612:	e001      	b.n	800d618 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d614:	2300      	movs	r3, #0
 800d616:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d618:	68fb      	ldr	r3, [r7, #12]
	}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b086      	sub	sp, #24
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d632:	2300      	movs	r3, #0
 800d634:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10d      	bne.n	800d660 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d14d      	bne.n	800d6e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	4618      	mov	r0, r3
 800d652:	f001 f861 	bl	800e718 <xTaskPriorityDisinherit>
 800d656:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	609a      	str	r2, [r3, #8]
 800d65e:	e043      	b.n	800d6e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d119      	bne.n	800d69a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6858      	ldr	r0, [r3, #4]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	461a      	mov	r2, r3
 800d670:	68b9      	ldr	r1, [r7, #8]
 800d672:	f020 fdd5 	bl	802e220 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67e:	441a      	add	r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d32b      	bcc.n	800d6e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	605a      	str	r2, [r3, #4]
 800d698:	e026      	b.n	800d6e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	68d8      	ldr	r0, [r3, #12]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	68b9      	ldr	r1, [r7, #8]
 800d6a6:	f020 fdbb 	bl	802e220 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	425b      	negs	r3, r3
 800d6b4:	441a      	add	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d207      	bcs.n	800d6d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	425b      	negs	r3, r3
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d105      	bne.n	800d6e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d002      	beq.n	800d6e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6f0:	697b      	ldr	r3, [r7, #20]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3718      	adds	r7, #24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b082      	sub	sp, #8
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d018      	beq.n	800d73e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d714:	441a      	add	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	429a      	cmp	r2, r3
 800d724:	d303      	bcc.n	800d72e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68d9      	ldr	r1, [r3, #12]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d736:	461a      	mov	r2, r3
 800d738:	6838      	ldr	r0, [r7, #0]
 800d73a:	f020 fd71 	bl	802e220 <memcpy>
	}
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d74e:	f001 fdb9 	bl	800f2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d758:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d75a:	e011      	b.n	800d780 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d012      	beq.n	800d78a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3324      	adds	r3, #36	; 0x24
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fd8d 	bl	800e288 <xTaskRemoveFromEventList>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d774:	f000 fe64 	bl	800e440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d778:	7bfb      	ldrb	r3, [r7, #15]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dce9      	bgt.n	800d75c <prvUnlockQueue+0x16>
 800d788:	e000      	b.n	800d78c <prvUnlockQueue+0x46>
					break;
 800d78a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	22ff      	movs	r2, #255	; 0xff
 800d790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d794:	f001 fdc6 	bl	800f324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d798:	f001 fd94 	bl	800f2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7a4:	e011      	b.n	800d7ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d012      	beq.n	800d7d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 fd68 	bl	800e288 <xTaskRemoveFromEventList>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d001      	beq.n	800d7c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7be:	f000 fe3f 	bl	800e440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	dce9      	bgt.n	800d7a6 <prvUnlockQueue+0x60>
 800d7d2:	e000      	b.n	800d7d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	22ff      	movs	r2, #255	; 0xff
 800d7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7de:	f001 fda1 	bl	800f324 <vPortExitCritical>
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7f2:	f001 fd67 	bl	800f2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7fe:	2301      	movs	r3, #1
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	e001      	b.n	800d808 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d804:	2300      	movs	r3, #0
 800d806:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d808:	f001 fd8c 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800d80c:	68fb      	ldr	r3, [r7, #12]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d81e:	f001 fd51 	bl	800f2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d102      	bne.n	800d834 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d82e:	2301      	movs	r3, #1
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	e001      	b.n	800d838 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d838:	f001 fd74 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800d83c:	68fb      	ldr	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	e014      	b.n	800d882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d858:	4a0f      	ldr	r2, [pc, #60]	; (800d898 <vQueueAddToRegistry+0x50>)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10b      	bne.n	800d87c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d864:	490c      	ldr	r1, [pc, #48]	; (800d898 <vQueueAddToRegistry+0x50>)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d86e:	4a0a      	ldr	r2, [pc, #40]	; (800d898 <vQueueAddToRegistry+0x50>)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	4413      	add	r3, r2
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d87a:	e006      	b.n	800d88a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	3301      	adds	r3, #1
 800d880:	60fb      	str	r3, [r7, #12]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2b07      	cmp	r3, #7
 800d886:	d9e7      	bls.n	800d858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d888:	bf00      	nop
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	2000b5dc 	.word	0x2000b5dc

0800d89c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	60fb      	str	r3, [r7, #12]
 800d8a8:	e016      	b.n	800d8d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8aa:	4a10      	ldr	r2, [pc, #64]	; (800d8ec <vQueueUnregisterQueue+0x50>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	4413      	add	r3, r2
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d10b      	bne.n	800d8d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8ba:	4a0c      	ldr	r2, [pc, #48]	; (800d8ec <vQueueUnregisterQueue+0x50>)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2100      	movs	r1, #0
 800d8c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8c4:	4a09      	ldr	r2, [pc, #36]	; (800d8ec <vQueueUnregisterQueue+0x50>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	00db      	lsls	r3, r3, #3
 800d8ca:	4413      	add	r3, r2
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	605a      	str	r2, [r3, #4]
				break;
 800d8d0:	e006      	b.n	800d8e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b07      	cmp	r3, #7
 800d8dc:	d9e5      	bls.n	800d8aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	2000b5dc 	.word	0x2000b5dc

0800d8f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d900:	f001 fce0 	bl	800f2c4 <vPortEnterCritical>
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d90a:	b25b      	sxtb	r3, r3
 800d90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d910:	d103      	bne.n	800d91a <vQueueWaitForMessageRestricted+0x2a>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d920:	b25b      	sxtb	r3, r3
 800d922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d926:	d103      	bne.n	800d930 <vQueueWaitForMessageRestricted+0x40>
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d930:	f001 fcf8 	bl	800f324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	3324      	adds	r3, #36	; 0x24
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	68b9      	ldr	r1, [r7, #8]
 800d944:	4618      	mov	r0, r3
 800d946:	f000 fc73 	bl	800e230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d94a:	6978      	ldr	r0, [r7, #20]
 800d94c:	f7ff fefb 	bl	800d746 <prvUnlockQueue>
	}
 800d950:	bf00      	nop
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08e      	sub	sp, #56	; 0x38
 800d95c:	af04      	add	r7, sp, #16
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	623b      	str	r3, [r7, #32]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10a      	bne.n	800d99e <xTaskCreateStatic+0x46>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	61fb      	str	r3, [r7, #28]
}
 800d99a:	bf00      	nop
 800d99c:	e7fe      	b.n	800d99c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d99e:	23bc      	movs	r3, #188	; 0xbc
 800d9a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2bbc      	cmp	r3, #188	; 0xbc
 800d9a6:	d00a      	beq.n	800d9be <xTaskCreateStatic+0x66>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	61bb      	str	r3, [r7, #24]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d01e      	beq.n	800da04 <xTaskCreateStatic+0xac>
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d01b      	beq.n	800da04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	2202      	movs	r2, #2
 800d9da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9de:	2300      	movs	r3, #0
 800d9e0:	9303      	str	r3, [sp, #12]
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	9302      	str	r3, [sp, #8]
 800d9e6:	f107 0314 	add.w	r3, r7, #20
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 f850 	bl	800da9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9fe:	f000 f8f3 	bl	800dbe8 <prvAddNewTaskToReadyList>
 800da02:	e001      	b.n	800da08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da08:	697b      	ldr	r3, [r7, #20]
	}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3728      	adds	r7, #40	; 0x28
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da12:	b580      	push	{r7, lr}
 800da14:	b08c      	sub	sp, #48	; 0x30
 800da16:	af04      	add	r7, sp, #16
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	603b      	str	r3, [r7, #0]
 800da1e:	4613      	mov	r3, r2
 800da20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da22:	88fb      	ldrh	r3, [r7, #6]
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	4618      	mov	r0, r3
 800da28:	f001 fd6e 	bl	800f508 <pvPortMalloc>
 800da2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00e      	beq.n	800da52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da34:	20bc      	movs	r0, #188	; 0xbc
 800da36:	f001 fd67 	bl	800f508 <pvPortMalloc>
 800da3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	631a      	str	r2, [r3, #48]	; 0x30
 800da48:	e005      	b.n	800da56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da4a:	6978      	ldr	r0, [r7, #20]
 800da4c:	f001 fe28 	bl	800f6a0 <vPortFree>
 800da50:	e001      	b.n	800da56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d017      	beq.n	800da8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	2200      	movs	r2, #0
 800da60:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da64:	88fa      	ldrh	r2, [r7, #6]
 800da66:	2300      	movs	r3, #0
 800da68:	9303      	str	r3, [sp, #12]
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	9302      	str	r3, [sp, #8]
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	68b9      	ldr	r1, [r7, #8]
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 f80e 	bl	800da9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da80:	69f8      	ldr	r0, [r7, #28]
 800da82:	f000 f8b1 	bl	800dbe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da86:	2301      	movs	r3, #1
 800da88:	61bb      	str	r3, [r7, #24]
 800da8a:	e002      	b.n	800da92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da8c:	f04f 33ff 	mov.w	r3, #4294967295
 800da90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da92:	69bb      	ldr	r3, [r7, #24]
	}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	461a      	mov	r2, r3
 800dab4:	21a5      	movs	r1, #165	; 0xa5
 800dab6:	f020 fbc1 	bl	802e23c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dac4:	3b01      	subs	r3, #1
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	f023 0307 	bic.w	r3, r3, #7
 800dad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00a      	beq.n	800daf4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	617b      	str	r3, [r7, #20]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d01f      	beq.n	800db3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dafa:	2300      	movs	r3, #0
 800dafc:	61fb      	str	r3, [r7, #28]
 800dafe:	e012      	b.n	800db26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	4413      	add	r3, r2
 800db06:	7819      	ldrb	r1, [r3, #0]
 800db08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	4413      	add	r3, r2
 800db0e:	3334      	adds	r3, #52	; 0x34
 800db10:	460a      	mov	r2, r1
 800db12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	4413      	add	r3, r2
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	3301      	adds	r3, #1
 800db24:	61fb      	str	r3, [r7, #28]
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	2b0f      	cmp	r3, #15
 800db2a:	d9e9      	bls.n	800db00 <prvInitialiseNewTask+0x64>
 800db2c:	e000      	b.n	800db30 <prvInitialiseNewTask+0x94>
			{
				break;
 800db2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db38:	e003      	b.n	800db42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	2b37      	cmp	r3, #55	; 0x37
 800db46:	d901      	bls.n	800db4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db48:	2337      	movs	r3, #55	; 0x37
 800db4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	2200      	movs	r2, #0
 800db5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	3304      	adds	r3, #4
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe fe56 	bl	800c814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6a:	3318      	adds	r3, #24
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe fe51 	bl	800c814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	2200      	movs	r2, #0
 800db94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	3354      	adds	r3, #84	; 0x54
 800db9c:	2260      	movs	r2, #96	; 0x60
 800db9e:	2100      	movs	r1, #0
 800dba0:	4618      	mov	r0, r3
 800dba2:	f020 fb4b 	bl	802e23c <memset>
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	4a0c      	ldr	r2, [pc, #48]	; (800dbdc <prvInitialiseNewTask+0x140>)
 800dbaa:	659a      	str	r2, [r3, #88]	; 0x58
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	4a0c      	ldr	r2, [pc, #48]	; (800dbe0 <prvInitialiseNewTask+0x144>)
 800dbb0:	65da      	str	r2, [r3, #92]	; 0x5c
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	4a0b      	ldr	r2, [pc, #44]	; (800dbe4 <prvInitialiseNewTask+0x148>)
 800dbb6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	68f9      	ldr	r1, [r7, #12]
 800dbbc:	69b8      	ldr	r0, [r7, #24]
 800dbbe:	f001 fa51 	bl	800f064 <pxPortInitialiseStack>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d002      	beq.n	800dbd4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbd4:	bf00      	nop
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	08033b7c 	.word	0x08033b7c
 800dbe0:	08033b9c 	.word	0x08033b9c
 800dbe4:	08033b5c 	.word	0x08033b5c

0800dbe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbf0:	f001 fb68 	bl	800f2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbf4:	4b2d      	ldr	r3, [pc, #180]	; (800dcac <prvAddNewTaskToReadyList+0xc4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	4a2c      	ldr	r2, [pc, #176]	; (800dcac <prvAddNewTaskToReadyList+0xc4>)
 800dbfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbfe:	4b2c      	ldr	r3, [pc, #176]	; (800dcb0 <prvAddNewTaskToReadyList+0xc8>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d109      	bne.n	800dc1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc06:	4a2a      	ldr	r2, [pc, #168]	; (800dcb0 <prvAddNewTaskToReadyList+0xc8>)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc0c:	4b27      	ldr	r3, [pc, #156]	; (800dcac <prvAddNewTaskToReadyList+0xc4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d110      	bne.n	800dc36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc14:	f000 fc38 	bl	800e488 <prvInitialiseTaskLists>
 800dc18:	e00d      	b.n	800dc36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc1a:	4b26      	ldr	r3, [pc, #152]	; (800dcb4 <prvAddNewTaskToReadyList+0xcc>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d109      	bne.n	800dc36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc22:	4b23      	ldr	r3, [pc, #140]	; (800dcb0 <prvAddNewTaskToReadyList+0xc8>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d802      	bhi.n	800dc36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc30:	4a1f      	ldr	r2, [pc, #124]	; (800dcb0 <prvAddNewTaskToReadyList+0xc8>)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc36:	4b20      	ldr	r3, [pc, #128]	; (800dcb8 <prvAddNewTaskToReadyList+0xd0>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	4a1e      	ldr	r2, [pc, #120]	; (800dcb8 <prvAddNewTaskToReadyList+0xd0>)
 800dc3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc40:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <prvAddNewTaskToReadyList+0xd0>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4b1b      	ldr	r3, [pc, #108]	; (800dcbc <prvAddNewTaskToReadyList+0xd4>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d903      	bls.n	800dc5c <prvAddNewTaskToReadyList+0x74>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	4a18      	ldr	r2, [pc, #96]	; (800dcbc <prvAddNewTaskToReadyList+0xd4>)
 800dc5a:	6013      	str	r3, [r2, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc60:	4613      	mov	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	4413      	add	r3, r2
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4a15      	ldr	r2, [pc, #84]	; (800dcc0 <prvAddNewTaskToReadyList+0xd8>)
 800dc6a:	441a      	add	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	3304      	adds	r3, #4
 800dc70:	4619      	mov	r1, r3
 800dc72:	4610      	mov	r0, r2
 800dc74:	f7fe fddb 	bl	800c82e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc78:	f001 fb54 	bl	800f324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc7c:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <prvAddNewTaskToReadyList+0xcc>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00e      	beq.n	800dca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc84:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <prvAddNewTaskToReadyList+0xc8>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d207      	bcs.n	800dca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc92:	4b0c      	ldr	r3, [pc, #48]	; (800dcc4 <prvAddNewTaskToReadyList+0xdc>)
 800dc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dca2:	bf00      	nop
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	20000a88 	.word	0x20000a88
 800dcb0:	200005b4 	.word	0x200005b4
 800dcb4:	20000a94 	.word	0x20000a94
 800dcb8:	20000aa4 	.word	0x20000aa4
 800dcbc:	20000a90 	.word	0x20000a90
 800dcc0:	200005b8 	.word	0x200005b8
 800dcc4:	e000ed04 	.word	0xe000ed04

0800dcc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d017      	beq.n	800dd0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcda:	4b13      	ldr	r3, [pc, #76]	; (800dd28 <vTaskDelay+0x60>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00a      	beq.n	800dcf8 <vTaskDelay+0x30>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	60bb      	str	r3, [r7, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	e7fe      	b.n	800dcf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dcf8:	f000 f88a 	bl	800de10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fe0e 	bl	800e920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd04:	f000 f892 	bl	800de2c <xTaskResumeAll>
 800dd08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d107      	bne.n	800dd20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd10:	4b06      	ldr	r3, [pc, #24]	; (800dd2c <vTaskDelay+0x64>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd20:	bf00      	nop
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	20000ab0 	.word	0x20000ab0
 800dd2c:	e000ed04 	.word	0xe000ed04

0800dd30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08a      	sub	sp, #40	; 0x28
 800dd34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd3e:	463a      	mov	r2, r7
 800dd40:	1d39      	adds	r1, r7, #4
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fd10 	bl	800c76c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	9202      	str	r2, [sp, #8]
 800dd54:	9301      	str	r3, [sp, #4]
 800dd56:	2300      	movs	r3, #0
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	460a      	mov	r2, r1
 800dd5e:	4924      	ldr	r1, [pc, #144]	; (800ddf0 <vTaskStartScheduler+0xc0>)
 800dd60:	4824      	ldr	r0, [pc, #144]	; (800ddf4 <vTaskStartScheduler+0xc4>)
 800dd62:	f7ff fdf9 	bl	800d958 <xTaskCreateStatic>
 800dd66:	4603      	mov	r3, r0
 800dd68:	4a23      	ldr	r2, [pc, #140]	; (800ddf8 <vTaskStartScheduler+0xc8>)
 800dd6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd6c:	4b22      	ldr	r3, [pc, #136]	; (800ddf8 <vTaskStartScheduler+0xc8>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd74:	2301      	movs	r3, #1
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e001      	b.n	800dd7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d102      	bne.n	800dd8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd84:	f000 fe20 	bl	800e9c8 <xTimerCreateTimerTask>
 800dd88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d11b      	bne.n	800ddc8 <vTaskStartScheduler+0x98>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	613b      	str	r3, [r7, #16]
}
 800dda2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dda4:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <vTaskStartScheduler+0xcc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	3354      	adds	r3, #84	; 0x54
 800ddaa:	4a15      	ldr	r2, [pc, #84]	; (800de00 <vTaskStartScheduler+0xd0>)
 800ddac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddae:	4b15      	ldr	r3, [pc, #84]	; (800de04 <vTaskStartScheduler+0xd4>)
 800ddb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <vTaskStartScheduler+0xd8>)
 800ddb8:	2201      	movs	r2, #1
 800ddba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddbc:	4b13      	ldr	r3, [pc, #76]	; (800de0c <vTaskStartScheduler+0xdc>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddc2:	f001 f9dd 	bl	800f180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddc6:	e00e      	b.n	800dde6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddce:	d10a      	bne.n	800dde6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	60fb      	str	r3, [r7, #12]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <vTaskStartScheduler+0xb4>
}
 800dde6:	bf00      	nop
 800dde8:	3718      	adds	r7, #24
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	0802f1c8 	.word	0x0802f1c8
 800ddf4:	0800e459 	.word	0x0800e459
 800ddf8:	20000aac 	.word	0x20000aac
 800ddfc:	200005b4 	.word	0x200005b4
 800de00:	20000098 	.word	0x20000098
 800de04:	20000aa8 	.word	0x20000aa8
 800de08:	20000a94 	.word	0x20000a94
 800de0c:	20000a8c 	.word	0x20000a8c

0800de10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de10:	b480      	push	{r7}
 800de12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de14:	4b04      	ldr	r3, [pc, #16]	; (800de28 <vTaskSuspendAll+0x18>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3301      	adds	r3, #1
 800de1a:	4a03      	ldr	r2, [pc, #12]	; (800de28 <vTaskSuspendAll+0x18>)
 800de1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de1e:	bf00      	nop
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	20000ab0 	.word	0x20000ab0

0800de2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de3a:	4b42      	ldr	r3, [pc, #264]	; (800df44 <xTaskResumeAll+0x118>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <xTaskResumeAll+0x2c>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	603b      	str	r3, [r7, #0]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de58:	f001 fa34 	bl	800f2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de5c:	4b39      	ldr	r3, [pc, #228]	; (800df44 <xTaskResumeAll+0x118>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3b01      	subs	r3, #1
 800de62:	4a38      	ldr	r2, [pc, #224]	; (800df44 <xTaskResumeAll+0x118>)
 800de64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de66:	4b37      	ldr	r3, [pc, #220]	; (800df44 <xTaskResumeAll+0x118>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d162      	bne.n	800df34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de6e:	4b36      	ldr	r3, [pc, #216]	; (800df48 <xTaskResumeAll+0x11c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d05e      	beq.n	800df34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de76:	e02f      	b.n	800ded8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de78:	4b34      	ldr	r3, [pc, #208]	; (800df4c <xTaskResumeAll+0x120>)
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3318      	adds	r3, #24
 800de84:	4618      	mov	r0, r3
 800de86:	f7fe fd2f 	bl	800c8e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fd2a 	bl	800c8e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b2d      	ldr	r3, [pc, #180]	; (800df50 <xTaskResumeAll+0x124>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <xTaskResumeAll+0x7c>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a2a      	ldr	r2, [pc, #168]	; (800df50 <xTaskResumeAll+0x124>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a27      	ldr	r2, [pc, #156]	; (800df54 <xTaskResumeAll+0x128>)
 800deb6:	441a      	add	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fcb5 	bl	800c82e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4b23      	ldr	r3, [pc, #140]	; (800df58 <xTaskResumeAll+0x12c>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dece:	429a      	cmp	r2, r3
 800ded0:	d302      	bcc.n	800ded8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ded2:	4b22      	ldr	r3, [pc, #136]	; (800df5c <xTaskResumeAll+0x130>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ded8:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <xTaskResumeAll+0x120>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1cb      	bne.n	800de78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dee6:	f000 fb71 	bl	800e5cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800deea:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <xTaskResumeAll+0x134>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d010      	beq.n	800df18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800def6:	f000 f859 	bl	800dfac <xTaskIncrementTick>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df00:	4b16      	ldr	r3, [pc, #88]	; (800df5c <xTaskResumeAll+0x130>)
 800df02:	2201      	movs	r2, #1
 800df04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3b01      	subs	r3, #1
 800df0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f1      	bne.n	800def6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df12:	4b13      	ldr	r3, [pc, #76]	; (800df60 <xTaskResumeAll+0x134>)
 800df14:	2200      	movs	r2, #0
 800df16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df18:	4b10      	ldr	r3, [pc, #64]	; (800df5c <xTaskResumeAll+0x130>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d009      	beq.n	800df34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df20:	2301      	movs	r3, #1
 800df22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df24:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <xTaskResumeAll+0x138>)
 800df26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df34:	f001 f9f6 	bl	800f324 <vPortExitCritical>

	return xAlreadyYielded;
 800df38:	68bb      	ldr	r3, [r7, #8]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	20000ab0 	.word	0x20000ab0
 800df48:	20000a88 	.word	0x20000a88
 800df4c:	20000a48 	.word	0x20000a48
 800df50:	20000a90 	.word	0x20000a90
 800df54:	200005b8 	.word	0x200005b8
 800df58:	200005b4 	.word	0x200005b4
 800df5c:	20000a9c 	.word	0x20000a9c
 800df60:	20000a98 	.word	0x20000a98
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df6e:	4b05      	ldr	r3, [pc, #20]	; (800df84 <xTaskGetTickCount+0x1c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df74:	687b      	ldr	r3, [r7, #4]
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	20000a8c 	.word	0x20000a8c

0800df88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df8e:	f001 fa7b 	bl	800f488 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800df92:	2300      	movs	r3, #0
 800df94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800df96:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <xTaskGetTickCountFromISR+0x20>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df9c:	683b      	ldr	r3, [r7, #0]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20000a8c 	.word	0x20000a8c

0800dfac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfb6:	4b4f      	ldr	r3, [pc, #316]	; (800e0f4 <xTaskIncrementTick+0x148>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f040 808f 	bne.w	800e0de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfc0:	4b4d      	ldr	r3, [pc, #308]	; (800e0f8 <xTaskIncrementTick+0x14c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfc8:	4a4b      	ldr	r2, [pc, #300]	; (800e0f8 <xTaskIncrementTick+0x14c>)
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d120      	bne.n	800e016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfd4:	4b49      	ldr	r3, [pc, #292]	; (800e0fc <xTaskIncrementTick+0x150>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	603b      	str	r3, [r7, #0]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <xTaskIncrementTick+0x46>
 800dff4:	4b41      	ldr	r3, [pc, #260]	; (800e0fc <xTaskIncrementTick+0x150>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	60fb      	str	r3, [r7, #12]
 800dffa:	4b41      	ldr	r3, [pc, #260]	; (800e100 <xTaskIncrementTick+0x154>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a3f      	ldr	r2, [pc, #252]	; (800e0fc <xTaskIncrementTick+0x150>)
 800e000:	6013      	str	r3, [r2, #0]
 800e002:	4a3f      	ldr	r2, [pc, #252]	; (800e100 <xTaskIncrementTick+0x154>)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6013      	str	r3, [r2, #0]
 800e008:	4b3e      	ldr	r3, [pc, #248]	; (800e104 <xTaskIncrementTick+0x158>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3301      	adds	r3, #1
 800e00e:	4a3d      	ldr	r2, [pc, #244]	; (800e104 <xTaskIncrementTick+0x158>)
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	f000 fadb 	bl	800e5cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e016:	4b3c      	ldr	r3, [pc, #240]	; (800e108 <xTaskIncrementTick+0x15c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	693a      	ldr	r2, [r7, #16]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d349      	bcc.n	800e0b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e020:	4b36      	ldr	r3, [pc, #216]	; (800e0fc <xTaskIncrementTick+0x150>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d104      	bne.n	800e034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e02a:	4b37      	ldr	r3, [pc, #220]	; (800e108 <xTaskIncrementTick+0x15c>)
 800e02c:	f04f 32ff 	mov.w	r2, #4294967295
 800e030:	601a      	str	r2, [r3, #0]
					break;
 800e032:	e03f      	b.n	800e0b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e034:	4b31      	ldr	r3, [pc, #196]	; (800e0fc <xTaskIncrementTick+0x150>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d203      	bcs.n	800e054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e04c:	4a2e      	ldr	r2, [pc, #184]	; (800e108 <xTaskIncrementTick+0x15c>)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e052:	e02f      	b.n	800e0b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	3304      	adds	r3, #4
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fe fc45 	bl	800c8e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	3318      	adds	r3, #24
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe fc3c 	bl	800c8e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e074:	4b25      	ldr	r3, [pc, #148]	; (800e10c <xTaskIncrementTick+0x160>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d903      	bls.n	800e084 <xTaskIncrementTick+0xd8>
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e080:	4a22      	ldr	r2, [pc, #136]	; (800e10c <xTaskIncrementTick+0x160>)
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4a1f      	ldr	r2, [pc, #124]	; (800e110 <xTaskIncrementTick+0x164>)
 800e092:	441a      	add	r2, r3
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	3304      	adds	r3, #4
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f7fe fbc7 	bl	800c82e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a4:	4b1b      	ldr	r3, [pc, #108]	; (800e114 <xTaskIncrementTick+0x168>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d3b8      	bcc.n	800e020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0b2:	e7b5      	b.n	800e020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0b4:	4b17      	ldr	r3, [pc, #92]	; (800e114 <xTaskIncrementTick+0x168>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ba:	4915      	ldr	r1, [pc, #84]	; (800e110 <xTaskIncrementTick+0x164>)
 800e0bc:	4613      	mov	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	440b      	add	r3, r1
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d901      	bls.n	800e0d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0d0:	4b11      	ldr	r3, [pc, #68]	; (800e118 <xTaskIncrementTick+0x16c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	617b      	str	r3, [r7, #20]
 800e0dc:	e004      	b.n	800e0e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0de:	4b0f      	ldr	r3, [pc, #60]	; (800e11c <xTaskIncrementTick+0x170>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	4a0d      	ldr	r2, [pc, #52]	; (800e11c <xTaskIncrementTick+0x170>)
 800e0e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0e8:	697b      	ldr	r3, [r7, #20]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20000ab0 	.word	0x20000ab0
 800e0f8:	20000a8c 	.word	0x20000a8c
 800e0fc:	20000a40 	.word	0x20000a40
 800e100:	20000a44 	.word	0x20000a44
 800e104:	20000aa0 	.word	0x20000aa0
 800e108:	20000aa8 	.word	0x20000aa8
 800e10c:	20000a90 	.word	0x20000a90
 800e110:	200005b8 	.word	0x200005b8
 800e114:	200005b4 	.word	0x200005b4
 800e118:	20000a9c 	.word	0x20000a9c
 800e11c:	20000a98 	.word	0x20000a98

0800e120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e126:	4b2a      	ldr	r3, [pc, #168]	; (800e1d0 <vTaskSwitchContext+0xb0>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e12e:	4b29      	ldr	r3, [pc, #164]	; (800e1d4 <vTaskSwitchContext+0xb4>)
 800e130:	2201      	movs	r2, #1
 800e132:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e134:	e046      	b.n	800e1c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e136:	4b27      	ldr	r3, [pc, #156]	; (800e1d4 <vTaskSwitchContext+0xb4>)
 800e138:	2200      	movs	r2, #0
 800e13a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e13c:	4b26      	ldr	r3, [pc, #152]	; (800e1d8 <vTaskSwitchContext+0xb8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	e010      	b.n	800e166 <vTaskSwitchContext+0x46>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10a      	bne.n	800e160 <vTaskSwitchContext+0x40>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	607b      	str	r3, [r7, #4]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <vTaskSwitchContext+0x3e>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3b01      	subs	r3, #1
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	491d      	ldr	r1, [pc, #116]	; (800e1dc <vTaskSwitchContext+0xbc>)
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	4613      	mov	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4413      	add	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	440b      	add	r3, r1
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0e4      	beq.n	800e144 <vTaskSwitchContext+0x24>
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	4613      	mov	r3, r2
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4a15      	ldr	r2, [pc, #84]	; (800e1dc <vTaskSwitchContext+0xbc>)
 800e186:	4413      	add	r3, r2
 800e188:	60bb      	str	r3, [r7, #8]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	605a      	str	r2, [r3, #4]
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	685a      	ldr	r2, [r3, #4]
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	3308      	adds	r3, #8
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d104      	bne.n	800e1aa <vTaskSwitchContext+0x8a>
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	605a      	str	r2, [r3, #4]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	4a0b      	ldr	r2, [pc, #44]	; (800e1e0 <vTaskSwitchContext+0xc0>)
 800e1b2:	6013      	str	r3, [r2, #0]
 800e1b4:	4a08      	ldr	r2, [pc, #32]	; (800e1d8 <vTaskSwitchContext+0xb8>)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1ba:	4b09      	ldr	r3, [pc, #36]	; (800e1e0 <vTaskSwitchContext+0xc0>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3354      	adds	r3, #84	; 0x54
 800e1c0:	4a08      	ldr	r2, [pc, #32]	; (800e1e4 <vTaskSwitchContext+0xc4>)
 800e1c2:	6013      	str	r3, [r2, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20000ab0 	.word	0x20000ab0
 800e1d4:	20000a9c 	.word	0x20000a9c
 800e1d8:	20000a90 	.word	0x20000a90
 800e1dc:	200005b8 	.word	0x200005b8
 800e1e0:	200005b4 	.word	0x200005b4
 800e1e4:	20000098 	.word	0x20000098

0800e1e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10a      	bne.n	800e20e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	60fb      	str	r3, [r7, #12]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e20e:	4b07      	ldr	r3, [pc, #28]	; (800e22c <vTaskPlaceOnEventList+0x44>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3318      	adds	r3, #24
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fe fb2d 	bl	800c876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e21c:	2101      	movs	r1, #1
 800e21e:	6838      	ldr	r0, [r7, #0]
 800e220:	f000 fb7e 	bl	800e920 <prvAddCurrentTaskToDelayedList>
}
 800e224:	bf00      	nop
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	200005b4 	.word	0x200005b4

0800e230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10a      	bne.n	800e258 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	617b      	str	r3, [r7, #20]
}
 800e254:	bf00      	nop
 800e256:	e7fe      	b.n	800e256 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e258:	4b0a      	ldr	r3, [pc, #40]	; (800e284 <vTaskPlaceOnEventListRestricted+0x54>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3318      	adds	r3, #24
 800e25e:	4619      	mov	r1, r3
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f7fe fae4 	bl	800c82e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e26c:	f04f 33ff 	mov.w	r3, #4294967295
 800e270:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e272:	6879      	ldr	r1, [r7, #4]
 800e274:	68b8      	ldr	r0, [r7, #8]
 800e276:	f000 fb53 	bl	800e920 <prvAddCurrentTaskToDelayedList>
	}
 800e27a:	bf00      	nop
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	200005b4 	.word	0x200005b4

0800e288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d10a      	bne.n	800e2b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	60fb      	str	r3, [r7, #12]
}
 800e2b0:	bf00      	nop
 800e2b2:	e7fe      	b.n	800e2b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fb15 	bl	800c8e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2be:	4b1e      	ldr	r3, [pc, #120]	; (800e338 <xTaskRemoveFromEventList+0xb0>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d11d      	bne.n	800e302 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe fb0c 	bl	800c8e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d4:	4b19      	ldr	r3, [pc, #100]	; (800e33c <xTaskRemoveFromEventList+0xb4>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d903      	bls.n	800e2e4 <xTaskRemoveFromEventList+0x5c>
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e0:	4a16      	ldr	r2, [pc, #88]	; (800e33c <xTaskRemoveFromEventList+0xb4>)
 800e2e2:	6013      	str	r3, [r2, #0]
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4413      	add	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4a13      	ldr	r2, [pc, #76]	; (800e340 <xTaskRemoveFromEventList+0xb8>)
 800e2f2:	441a      	add	r2, r3
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	f7fe fa97 	bl	800c82e <vListInsertEnd>
 800e300:	e005      	b.n	800e30e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	3318      	adds	r3, #24
 800e306:	4619      	mov	r1, r3
 800e308:	480e      	ldr	r0, [pc, #56]	; (800e344 <xTaskRemoveFromEventList+0xbc>)
 800e30a:	f7fe fa90 	bl	800c82e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e312:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <xTaskRemoveFromEventList+0xc0>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	429a      	cmp	r2, r3
 800e31a:	d905      	bls.n	800e328 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e31c:	2301      	movs	r3, #1
 800e31e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e320:	4b0a      	ldr	r3, [pc, #40]	; (800e34c <xTaskRemoveFromEventList+0xc4>)
 800e322:	2201      	movs	r2, #1
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e001      	b.n	800e32c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e328:	2300      	movs	r3, #0
 800e32a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e32c:	697b      	ldr	r3, [r7, #20]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	20000ab0 	.word	0x20000ab0
 800e33c:	20000a90 	.word	0x20000a90
 800e340:	200005b8 	.word	0x200005b8
 800e344:	20000a48 	.word	0x20000a48
 800e348:	200005b4 	.word	0x200005b4
 800e34c:	20000a9c 	.word	0x20000a9c

0800e350 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e358:	4b06      	ldr	r3, [pc, #24]	; (800e374 <vTaskInternalSetTimeOutState+0x24>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e360:	4b05      	ldr	r3, [pc, #20]	; (800e378 <vTaskInternalSetTimeOutState+0x28>)
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	605a      	str	r2, [r3, #4]
}
 800e368:	bf00      	nop
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	20000aa0 	.word	0x20000aa0
 800e378:	20000a8c 	.word	0x20000a8c

0800e37c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b088      	sub	sp, #32
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	613b      	str	r3, [r7, #16]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10a      	bne.n	800e3be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	60fb      	str	r3, [r7, #12]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e3be:	f000 ff81 	bl	800f2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e3c2:	4b1d      	ldr	r3, [pc, #116]	; (800e438 <xTaskCheckForTimeOut+0xbc>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3da:	d102      	bne.n	800e3e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61fb      	str	r3, [r7, #28]
 800e3e0:	e023      	b.n	800e42a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	4b15      	ldr	r3, [pc, #84]	; (800e43c <xTaskCheckForTimeOut+0xc0>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d007      	beq.n	800e3fe <xTaskCheckForTimeOut+0x82>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	69ba      	ldr	r2, [r7, #24]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d302      	bcc.n	800e3fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	61fb      	str	r3, [r7, #28]
 800e3fc:	e015      	b.n	800e42a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	429a      	cmp	r2, r3
 800e406:	d20b      	bcs.n	800e420 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	1ad2      	subs	r2, r2, r3
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff ff9b 	bl	800e350 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e41a:	2300      	movs	r3, #0
 800e41c:	61fb      	str	r3, [r7, #28]
 800e41e:	e004      	b.n	800e42a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e426:	2301      	movs	r3, #1
 800e428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e42a:	f000 ff7b 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800e42e:	69fb      	ldr	r3, [r7, #28]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3720      	adds	r7, #32
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20000a8c 	.word	0x20000a8c
 800e43c:	20000aa0 	.word	0x20000aa0

0800e440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e440:	b480      	push	{r7}
 800e442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e444:	4b03      	ldr	r3, [pc, #12]	; (800e454 <vTaskMissedYield+0x14>)
 800e446:	2201      	movs	r2, #1
 800e448:	601a      	str	r2, [r3, #0]
}
 800e44a:	bf00      	nop
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	20000a9c 	.word	0x20000a9c

0800e458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e460:	f000 f852 	bl	800e508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e464:	4b06      	ldr	r3, [pc, #24]	; (800e480 <prvIdleTask+0x28>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d9f9      	bls.n	800e460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e46c:	4b05      	ldr	r3, [pc, #20]	; (800e484 <prvIdleTask+0x2c>)
 800e46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e47c:	e7f0      	b.n	800e460 <prvIdleTask+0x8>
 800e47e:	bf00      	nop
 800e480:	200005b8 	.word	0x200005b8
 800e484:	e000ed04 	.word	0xe000ed04

0800e488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e48e:	2300      	movs	r3, #0
 800e490:	607b      	str	r3, [r7, #4]
 800e492:	e00c      	b.n	800e4ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4613      	mov	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4413      	add	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4a12      	ldr	r2, [pc, #72]	; (800e4e8 <prvInitialiseTaskLists+0x60>)
 800e4a0:	4413      	add	r3, r2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fe f996 	bl	800c7d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	607b      	str	r3, [r7, #4]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b37      	cmp	r3, #55	; 0x37
 800e4b2:	d9ef      	bls.n	800e494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4b4:	480d      	ldr	r0, [pc, #52]	; (800e4ec <prvInitialiseTaskLists+0x64>)
 800e4b6:	f7fe f98d 	bl	800c7d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4ba:	480d      	ldr	r0, [pc, #52]	; (800e4f0 <prvInitialiseTaskLists+0x68>)
 800e4bc:	f7fe f98a 	bl	800c7d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4c0:	480c      	ldr	r0, [pc, #48]	; (800e4f4 <prvInitialiseTaskLists+0x6c>)
 800e4c2:	f7fe f987 	bl	800c7d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e4c6:	480c      	ldr	r0, [pc, #48]	; (800e4f8 <prvInitialiseTaskLists+0x70>)
 800e4c8:	f7fe f984 	bl	800c7d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e4cc:	480b      	ldr	r0, [pc, #44]	; (800e4fc <prvInitialiseTaskLists+0x74>)
 800e4ce:	f7fe f981 	bl	800c7d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4d2:	4b0b      	ldr	r3, [pc, #44]	; (800e500 <prvInitialiseTaskLists+0x78>)
 800e4d4:	4a05      	ldr	r2, [pc, #20]	; (800e4ec <prvInitialiseTaskLists+0x64>)
 800e4d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4d8:	4b0a      	ldr	r3, [pc, #40]	; (800e504 <prvInitialiseTaskLists+0x7c>)
 800e4da:	4a05      	ldr	r2, [pc, #20]	; (800e4f0 <prvInitialiseTaskLists+0x68>)
 800e4dc:	601a      	str	r2, [r3, #0]
}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	200005b8 	.word	0x200005b8
 800e4ec:	20000a18 	.word	0x20000a18
 800e4f0:	20000a2c 	.word	0x20000a2c
 800e4f4:	20000a48 	.word	0x20000a48
 800e4f8:	20000a5c 	.word	0x20000a5c
 800e4fc:	20000a74 	.word	0x20000a74
 800e500:	20000a40 	.word	0x20000a40
 800e504:	20000a44 	.word	0x20000a44

0800e508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e50e:	e019      	b.n	800e544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e510:	f000 fed8 	bl	800f2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e514:	4b10      	ldr	r3, [pc, #64]	; (800e558 <prvCheckTasksWaitingTermination+0x50>)
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3304      	adds	r3, #4
 800e520:	4618      	mov	r0, r3
 800e522:	f7fe f9e1 	bl	800c8e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e526:	4b0d      	ldr	r3, [pc, #52]	; (800e55c <prvCheckTasksWaitingTermination+0x54>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	4a0b      	ldr	r2, [pc, #44]	; (800e55c <prvCheckTasksWaitingTermination+0x54>)
 800e52e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e530:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <prvCheckTasksWaitingTermination+0x58>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	3b01      	subs	r3, #1
 800e536:	4a0a      	ldr	r2, [pc, #40]	; (800e560 <prvCheckTasksWaitingTermination+0x58>)
 800e538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e53a:	f000 fef3 	bl	800f324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 f810 	bl	800e564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e544:	4b06      	ldr	r3, [pc, #24]	; (800e560 <prvCheckTasksWaitingTermination+0x58>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1e1      	bne.n	800e510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e54c:	bf00      	nop
 800e54e:	bf00      	nop
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20000a5c 	.word	0x20000a5c
 800e55c:	20000a88 	.word	0x20000a88
 800e560:	20000a70 	.word	0x20000a70

0800e564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3354      	adds	r3, #84	; 0x54
 800e570:	4618      	mov	r0, r3
 800e572:	f020 fa21 	bl	802e9b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d108      	bne.n	800e592 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e584:	4618      	mov	r0, r3
 800e586:	f001 f88b 	bl	800f6a0 <vPortFree>
				vPortFree( pxTCB );
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 f888 	bl	800f6a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e590:	e018      	b.n	800e5c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d103      	bne.n	800e5a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f001 f87f 	bl	800f6a0 <vPortFree>
	}
 800e5a2:	e00f      	b.n	800e5c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d00a      	beq.n	800e5c4 <prvDeleteTCB+0x60>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	60fb      	str	r3, [r7, #12]
}
 800e5c0:	bf00      	nop
 800e5c2:	e7fe      	b.n	800e5c2 <prvDeleteTCB+0x5e>
	}
 800e5c4:	bf00      	nop
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <prvResetNextTaskUnblockTime+0x38>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d104      	bne.n	800e5e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5dc:	4b0a      	ldr	r3, [pc, #40]	; (800e608 <prvResetNextTaskUnblockTime+0x3c>)
 800e5de:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e5e4:	e008      	b.n	800e5f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5e6:	4b07      	ldr	r3, [pc, #28]	; (800e604 <prvResetNextTaskUnblockTime+0x38>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	4a04      	ldr	r2, [pc, #16]	; (800e608 <prvResetNextTaskUnblockTime+0x3c>)
 800e5f6:	6013      	str	r3, [r2, #0]
}
 800e5f8:	bf00      	nop
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr
 800e604:	20000a40 	.word	0x20000a40
 800e608:	20000aa8 	.word	0x20000aa8

0800e60c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e612:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <xTaskGetSchedulerState+0x34>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d102      	bne.n	800e620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e61a:	2301      	movs	r3, #1
 800e61c:	607b      	str	r3, [r7, #4]
 800e61e:	e008      	b.n	800e632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e620:	4b08      	ldr	r3, [pc, #32]	; (800e644 <xTaskGetSchedulerState+0x38>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d102      	bne.n	800e62e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e628:	2302      	movs	r3, #2
 800e62a:	607b      	str	r3, [r7, #4]
 800e62c:	e001      	b.n	800e632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e62e:	2300      	movs	r3, #0
 800e630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e632:	687b      	ldr	r3, [r7, #4]
	}
 800e634:	4618      	mov	r0, r3
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr
 800e640:	20000a94 	.word	0x20000a94
 800e644:	20000ab0 	.word	0x20000ab0

0800e648 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e654:	2300      	movs	r3, #0
 800e656:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d051      	beq.n	800e702 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e662:	4b2a      	ldr	r3, [pc, #168]	; (800e70c <xTaskPriorityInherit+0xc4>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	429a      	cmp	r2, r3
 800e66a:	d241      	bcs.n	800e6f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	699b      	ldr	r3, [r3, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	db06      	blt.n	800e682 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e674:	4b25      	ldr	r3, [pc, #148]	; (800e70c <xTaskPriorityInherit+0xc4>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	6959      	ldr	r1, [r3, #20]
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68a:	4613      	mov	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	4a1f      	ldr	r2, [pc, #124]	; (800e710 <xTaskPriorityInherit+0xc8>)
 800e694:	4413      	add	r3, r2
 800e696:	4299      	cmp	r1, r3
 800e698:	d122      	bne.n	800e6e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	3304      	adds	r3, #4
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe f922 	bl	800c8e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6a4:	4b19      	ldr	r3, [pc, #100]	; (800e70c <xTaskPriorityInherit+0xc4>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b2:	4b18      	ldr	r3, [pc, #96]	; (800e714 <xTaskPriorityInherit+0xcc>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d903      	bls.n	800e6c2 <xTaskPriorityInherit+0x7a>
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6be:	4a15      	ldr	r2, [pc, #84]	; (800e714 <xTaskPriorityInherit+0xcc>)
 800e6c0:	6013      	str	r3, [r2, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4a10      	ldr	r2, [pc, #64]	; (800e710 <xTaskPriorityInherit+0xc8>)
 800e6d0:	441a      	add	r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4610      	mov	r0, r2
 800e6da:	f7fe f8a8 	bl	800c82e <vListInsertEnd>
 800e6de:	e004      	b.n	800e6ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6e0:	4b0a      	ldr	r3, [pc, #40]	; (800e70c <xTaskPriorityInherit+0xc4>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e008      	b.n	800e702 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6f4:	4b05      	ldr	r3, [pc, #20]	; (800e70c <xTaskPriorityInherit+0xc4>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d201      	bcs.n	800e702 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e6fe:	2301      	movs	r3, #1
 800e700:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e702:	68fb      	ldr	r3, [r7, #12]
	}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	200005b4 	.word	0x200005b4
 800e710:	200005b8 	.word	0x200005b8
 800e714:	20000a90 	.word	0x20000a90

0800e718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e724:	2300      	movs	r3, #0
 800e726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d056      	beq.n	800e7dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e72e:	4b2e      	ldr	r3, [pc, #184]	; (800e7e8 <xTaskPriorityDisinherit+0xd0>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	429a      	cmp	r2, r3
 800e736:	d00a      	beq.n	800e74e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	60fb      	str	r3, [r7, #12]
}
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	60bb      	str	r3, [r7, #8]
}
 800e768:	bf00      	nop
 800e76a:	e7fe      	b.n	800e76a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e770:	1e5a      	subs	r2, r3, #1
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77e:	429a      	cmp	r2, r3
 800e780:	d02c      	beq.n	800e7dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e786:	2b00      	cmp	r3, #0
 800e788:	d128      	bne.n	800e7dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	3304      	adds	r3, #4
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fe f8aa 	bl	800c8e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <xTaskPriorityDisinherit+0xd4>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d903      	bls.n	800e7bc <xTaskPriorityDisinherit+0xa4>
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b8:	4a0c      	ldr	r2, [pc, #48]	; (800e7ec <xTaskPriorityDisinherit+0xd4>)
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4a09      	ldr	r2, [pc, #36]	; (800e7f0 <xTaskPriorityDisinherit+0xd8>)
 800e7ca:	441a      	add	r2, r3
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	3304      	adds	r3, #4
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4610      	mov	r0, r2
 800e7d4:	f7fe f82b 	bl	800c82e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7dc:	697b      	ldr	r3, [r7, #20]
	}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	200005b4 	.word	0x200005b4
 800e7ec:	20000a90 	.word	0x20000a90
 800e7f0:	200005b8 	.word	0x200005b8

0800e7f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e802:	2301      	movs	r3, #1
 800e804:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d06a      	beq.n	800e8e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10a      	bne.n	800e82a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	60fb      	str	r3, [r7, #12]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d902      	bls.n	800e83a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	61fb      	str	r3, [r7, #28]
 800e838:	e002      	b.n	800e840 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e83e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	429a      	cmp	r2, r3
 800e848:	d04b      	beq.n	800e8e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e84e:	697a      	ldr	r2, [r7, #20]
 800e850:	429a      	cmp	r2, r3
 800e852:	d146      	bne.n	800e8e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e854:	4b25      	ldr	r3, [pc, #148]	; (800e8ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	69ba      	ldr	r2, [r7, #24]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d10a      	bne.n	800e874 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	60bb      	str	r3, [r7, #8]
}
 800e870:	bf00      	nop
 800e872:	e7fe      	b.n	800e872 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e878:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	69fa      	ldr	r2, [r7, #28]
 800e87e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	2b00      	cmp	r3, #0
 800e886:	db04      	blt.n	800e892 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	6959      	ldr	r1, [r3, #20]
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	4613      	mov	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4a13      	ldr	r2, [pc, #76]	; (800e8f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8a2:	4413      	add	r3, r2
 800e8a4:	4299      	cmp	r1, r3
 800e8a6:	d11c      	bne.n	800e8e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fe f81b 	bl	800c8e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b6:	4b0f      	ldr	r3, [pc, #60]	; (800e8f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d903      	bls.n	800e8c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c2:	4a0c      	ldr	r2, [pc, #48]	; (800e8f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8c4:	6013      	str	r3, [r2, #0]
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	4413      	add	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4a07      	ldr	r2, [pc, #28]	; (800e8f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8d4:	441a      	add	r2, r3
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	4619      	mov	r1, r3
 800e8dc:	4610      	mov	r0, r2
 800e8de:	f7fd ffa6 	bl	800c82e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8e2:	bf00      	nop
 800e8e4:	3720      	adds	r7, #32
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	200005b4 	.word	0x200005b4
 800e8f0:	200005b8 	.word	0x200005b8
 800e8f4:	20000a90 	.word	0x20000a90

0800e8f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8f8:	b480      	push	{r7}
 800e8fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8fc:	4b07      	ldr	r3, [pc, #28]	; (800e91c <pvTaskIncrementMutexHeldCount+0x24>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e904:	4b05      	ldr	r3, [pc, #20]	; (800e91c <pvTaskIncrementMutexHeldCount+0x24>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e90a:	3201      	adds	r2, #1
 800e90c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e90e:	4b03      	ldr	r3, [pc, #12]	; (800e91c <pvTaskIncrementMutexHeldCount+0x24>)
 800e910:	681b      	ldr	r3, [r3, #0]
	}
 800e912:	4618      	mov	r0, r3
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr
 800e91c:	200005b4 	.word	0x200005b4

0800e920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e92a:	4b21      	ldr	r3, [pc, #132]	; (800e9b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e930:	4b20      	ldr	r3, [pc, #128]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3304      	adds	r3, #4
 800e936:	4618      	mov	r0, r3
 800e938:	f7fd ffd6 	bl	800c8e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e942:	d10a      	bne.n	800e95a <prvAddCurrentTaskToDelayedList+0x3a>
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d007      	beq.n	800e95a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e94a:	4b1a      	ldr	r3, [pc, #104]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3304      	adds	r3, #4
 800e950:	4619      	mov	r1, r3
 800e952:	4819      	ldr	r0, [pc, #100]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e954:	f7fd ff6b 	bl	800c82e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e958:	e026      	b.n	800e9a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4413      	add	r3, r2
 800e960:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e962:	4b14      	ldr	r3, [pc, #80]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e96a:	68ba      	ldr	r2, [r7, #8]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d209      	bcs.n	800e986 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e972:	4b12      	ldr	r3, [pc, #72]	; (800e9bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	3304      	adds	r3, #4
 800e97c:	4619      	mov	r1, r3
 800e97e:	4610      	mov	r0, r2
 800e980:	f7fd ff79 	bl	800c876 <vListInsert>
}
 800e984:	e010      	b.n	800e9a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e986:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	4b0a      	ldr	r3, [pc, #40]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3304      	adds	r3, #4
 800e990:	4619      	mov	r1, r3
 800e992:	4610      	mov	r0, r2
 800e994:	f7fd ff6f 	bl	800c876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e998:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d202      	bcs.n	800e9a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e9a2:	4a08      	ldr	r2, [pc, #32]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	6013      	str	r3, [r2, #0]
}
 800e9a8:	bf00      	nop
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20000a8c 	.word	0x20000a8c
 800e9b4:	200005b4 	.word	0x200005b4
 800e9b8:	20000a74 	.word	0x20000a74
 800e9bc:	20000a44 	.word	0x20000a44
 800e9c0:	20000a40 	.word	0x20000a40
 800e9c4:	20000aa8 	.word	0x20000aa8

0800e9c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	; 0x28
 800e9cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9d2:	f000 fb07 	bl	800efe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9d6:	4b1c      	ldr	r3, [pc, #112]	; (800ea48 <xTimerCreateTimerTask+0x80>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d021      	beq.n	800ea22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e9e6:	1d3a      	adds	r2, r7, #4
 800e9e8:	f107 0108 	add.w	r1, r7, #8
 800e9ec:	f107 030c 	add.w	r3, r7, #12
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fd fed5 	bl	800c7a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	9202      	str	r2, [sp, #8]
 800e9fe:	9301      	str	r3, [sp, #4]
 800ea00:	2302      	movs	r3, #2
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	2300      	movs	r3, #0
 800ea06:	460a      	mov	r2, r1
 800ea08:	4910      	ldr	r1, [pc, #64]	; (800ea4c <xTimerCreateTimerTask+0x84>)
 800ea0a:	4811      	ldr	r0, [pc, #68]	; (800ea50 <xTimerCreateTimerTask+0x88>)
 800ea0c:	f7fe ffa4 	bl	800d958 <xTaskCreateStatic>
 800ea10:	4603      	mov	r3, r0
 800ea12:	4a10      	ldr	r2, [pc, #64]	; (800ea54 <xTimerCreateTimerTask+0x8c>)
 800ea14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea16:	4b0f      	ldr	r3, [pc, #60]	; (800ea54 <xTimerCreateTimerTask+0x8c>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10a      	bne.n	800ea3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2c:	f383 8811 	msr	BASEPRI, r3
 800ea30:	f3bf 8f6f 	isb	sy
 800ea34:	f3bf 8f4f 	dsb	sy
 800ea38:	613b      	str	r3, [r7, #16]
}
 800ea3a:	bf00      	nop
 800ea3c:	e7fe      	b.n	800ea3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea3e:	697b      	ldr	r3, [r7, #20]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20000ae4 	.word	0x20000ae4
 800ea4c:	0802f1d0 	.word	0x0802f1d0
 800ea50:	0800eb8d 	.word	0x0800eb8d
 800ea54:	20000ae8 	.word	0x20000ae8

0800ea58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08a      	sub	sp, #40	; 0x28
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
 800ea64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea66:	2300      	movs	r3, #0
 800ea68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10a      	bne.n	800ea86 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	623b      	str	r3, [r7, #32]
}
 800ea82:	bf00      	nop
 800ea84:	e7fe      	b.n	800ea84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea86:	4b1a      	ldr	r3, [pc, #104]	; (800eaf0 <xTimerGenericCommand+0x98>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d02a      	beq.n	800eae4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b05      	cmp	r3, #5
 800ea9e:	dc18      	bgt.n	800ead2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eaa0:	f7ff fdb4 	bl	800e60c <xTaskGetSchedulerState>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d109      	bne.n	800eabe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eaaa:	4b11      	ldr	r3, [pc, #68]	; (800eaf0 <xTimerGenericCommand+0x98>)
 800eaac:	6818      	ldr	r0, [r3, #0]
 800eaae:	f107 0110 	add.w	r1, r7, #16
 800eab2:	2300      	movs	r3, #0
 800eab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab6:	f7fe f8e9 	bl	800cc8c <xQueueGenericSend>
 800eaba:	6278      	str	r0, [r7, #36]	; 0x24
 800eabc:	e012      	b.n	800eae4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eabe:	4b0c      	ldr	r3, [pc, #48]	; (800eaf0 <xTimerGenericCommand+0x98>)
 800eac0:	6818      	ldr	r0, [r3, #0]
 800eac2:	f107 0110 	add.w	r1, r7, #16
 800eac6:	2300      	movs	r3, #0
 800eac8:	2200      	movs	r2, #0
 800eaca:	f7fe f8df 	bl	800cc8c <xQueueGenericSend>
 800eace:	6278      	str	r0, [r7, #36]	; 0x24
 800ead0:	e008      	b.n	800eae4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ead2:	4b07      	ldr	r3, [pc, #28]	; (800eaf0 <xTimerGenericCommand+0x98>)
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	f107 0110 	add.w	r1, r7, #16
 800eada:	2300      	movs	r3, #0
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	f7fe f9d3 	bl	800ce88 <xQueueGenericSendFromISR>
 800eae2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3728      	adds	r7, #40	; 0x28
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000ae4 	.word	0x20000ae4

0800eaf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b088      	sub	sp, #32
 800eaf8:	af02      	add	r7, sp, #8
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eafe:	4b22      	ldr	r3, [pc, #136]	; (800eb88 <prvProcessExpiredTimer+0x94>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fd feeb 	bl	800c8e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d022      	beq.n	800eb66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	699a      	ldr	r2, [r3, #24]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	18d1      	adds	r1, r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	6978      	ldr	r0, [r7, #20]
 800eb2e:	f000 f8d1 	bl	800ecd4 <prvInsertTimerInActiveList>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d01f      	beq.n	800eb78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb38:	2300      	movs	r3, #0
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	2100      	movs	r1, #0
 800eb42:	6978      	ldr	r0, [r7, #20]
 800eb44:	f7ff ff88 	bl	800ea58 <xTimerGenericCommand>
 800eb48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d113      	bne.n	800eb78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60fb      	str	r3, [r7, #12]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb6c:	f023 0301 	bic.w	r3, r3, #1
 800eb70:	b2da      	uxtb	r2, r3
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	6a1b      	ldr	r3, [r3, #32]
 800eb7c:	6978      	ldr	r0, [r7, #20]
 800eb7e:	4798      	blx	r3
}
 800eb80:	bf00      	nop
 800eb82:	3718      	adds	r7, #24
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20000adc 	.word	0x20000adc

0800eb8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb94:	f107 0308 	add.w	r3, r7, #8
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f000 f857 	bl	800ec4c <prvGetNextExpireTime>
 800eb9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	4619      	mov	r1, r3
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 f803 	bl	800ebb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ebaa:	f000 f8d5 	bl	800ed58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebae:	e7f1      	b.n	800eb94 <prvTimerTask+0x8>

0800ebb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ebba:	f7ff f929 	bl	800de10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebbe:	f107 0308 	add.w	r3, r7, #8
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 f866 	bl	800ec94 <prvSampleTimeNow>
 800ebc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d130      	bne.n	800ec32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10a      	bne.n	800ebec <prvProcessTimerOrBlockTask+0x3c>
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d806      	bhi.n	800ebec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ebde:	f7ff f925 	bl	800de2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ebe2:	68f9      	ldr	r1, [r7, #12]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff ff85 	bl	800eaf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ebea:	e024      	b.n	800ec36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d008      	beq.n	800ec04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ebf2:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <prvProcessTimerOrBlockTask+0x90>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d101      	bne.n	800ec00 <prvProcessTimerOrBlockTask+0x50>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e000      	b.n	800ec02 <prvProcessTimerOrBlockTask+0x52>
 800ec00:	2300      	movs	r3, #0
 800ec02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec04:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <prvProcessTimerOrBlockTask+0x94>)
 800ec06:	6818      	ldr	r0, [r3, #0]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	4619      	mov	r1, r3
 800ec12:	f7fe fe6d 	bl	800d8f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec16:	f7ff f909 	bl	800de2c <xTaskResumeAll>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec20:	4b09      	ldr	r3, [pc, #36]	; (800ec48 <prvProcessTimerOrBlockTask+0x98>)
 800ec22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec26:	601a      	str	r2, [r3, #0]
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	f3bf 8f6f 	isb	sy
}
 800ec30:	e001      	b.n	800ec36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec32:	f7ff f8fb 	bl	800de2c <xTaskResumeAll>
}
 800ec36:	bf00      	nop
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20000ae0 	.word	0x20000ae0
 800ec44:	20000ae4 	.word	0x20000ae4
 800ec48:	e000ed04 	.word	0xe000ed04

0800ec4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec54:	4b0e      	ldr	r3, [pc, #56]	; (800ec90 <prvGetNextExpireTime+0x44>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <prvGetNextExpireTime+0x16>
 800ec5e:	2201      	movs	r2, #1
 800ec60:	e000      	b.n	800ec64 <prvGetNextExpireTime+0x18>
 800ec62:	2200      	movs	r2, #0
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d105      	bne.n	800ec7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec70:	4b07      	ldr	r3, [pc, #28]	; (800ec90 <prvGetNextExpireTime+0x44>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	60fb      	str	r3, [r7, #12]
 800ec7a:	e001      	b.n	800ec80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec80:	68fb      	ldr	r3, [r7, #12]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	20000adc 	.word	0x20000adc

0800ec94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec9c:	f7ff f964 	bl	800df68 <xTaskGetTickCount>
 800eca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eca2:	4b0b      	ldr	r3, [pc, #44]	; (800ecd0 <prvSampleTimeNow+0x3c>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d205      	bcs.n	800ecb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ecac:	f000 f936 	bl	800ef1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	601a      	str	r2, [r3, #0]
 800ecb6:	e002      	b.n	800ecbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ecbe:	4a04      	ldr	r2, [pc, #16]	; (800ecd0 <prvSampleTimeNow+0x3c>)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	20000aec 	.word	0x20000aec

0800ecd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ece2:	2300      	movs	r3, #0
 800ece4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d812      	bhi.n	800ed20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	1ad2      	subs	r2, r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	699b      	ldr	r3, [r3, #24]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d302      	bcc.n	800ed0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	617b      	str	r3, [r7, #20]
 800ed0c:	e01b      	b.n	800ed46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed0e:	4b10      	ldr	r3, [pc, #64]	; (800ed50 <prvInsertTimerInActiveList+0x7c>)
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	3304      	adds	r3, #4
 800ed16:	4619      	mov	r1, r3
 800ed18:	4610      	mov	r0, r2
 800ed1a:	f7fd fdac 	bl	800c876 <vListInsert>
 800ed1e:	e012      	b.n	800ed46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d206      	bcs.n	800ed36 <prvInsertTimerInActiveList+0x62>
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d302      	bcc.n	800ed36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed30:	2301      	movs	r3, #1
 800ed32:	617b      	str	r3, [r7, #20]
 800ed34:	e007      	b.n	800ed46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed36:	4b07      	ldr	r3, [pc, #28]	; (800ed54 <prvInsertTimerInActiveList+0x80>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	4619      	mov	r1, r3
 800ed40:	4610      	mov	r0, r2
 800ed42:	f7fd fd98 	bl	800c876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed46:	697b      	ldr	r3, [r7, #20]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20000ae0 	.word	0x20000ae0
 800ed54:	20000adc 	.word	0x20000adc

0800ed58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08e      	sub	sp, #56	; 0x38
 800ed5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed5e:	e0ca      	b.n	800eef6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	da18      	bge.n	800ed98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed66:	1d3b      	adds	r3, r7, #4
 800ed68:	3304      	adds	r3, #4
 800ed6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10a      	bne.n	800ed88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	61fb      	str	r3, [r7, #28]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed8e:	6850      	ldr	r0, [r2, #4]
 800ed90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed92:	6892      	ldr	r2, [r2, #8]
 800ed94:	4611      	mov	r1, r2
 800ed96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f2c0 80aa 	blt.w	800eef4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	695b      	ldr	r3, [r3, #20]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d004      	beq.n	800edb6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	3304      	adds	r3, #4
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fd fd99 	bl	800c8e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edb6:	463b      	mov	r3, r7
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff ff6b 	bl	800ec94 <prvSampleTimeNow>
 800edbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b09      	cmp	r3, #9
 800edc4:	f200 8097 	bhi.w	800eef6 <prvProcessReceivedCommands+0x19e>
 800edc8:	a201      	add	r2, pc, #4	; (adr r2, 800edd0 <prvProcessReceivedCommands+0x78>)
 800edca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edce:	bf00      	nop
 800edd0:	0800edf9 	.word	0x0800edf9
 800edd4:	0800edf9 	.word	0x0800edf9
 800edd8:	0800edf9 	.word	0x0800edf9
 800eddc:	0800ee6d 	.word	0x0800ee6d
 800ede0:	0800ee81 	.word	0x0800ee81
 800ede4:	0800eecb 	.word	0x0800eecb
 800ede8:	0800edf9 	.word	0x0800edf9
 800edec:	0800edf9 	.word	0x0800edf9
 800edf0:	0800ee6d 	.word	0x0800ee6d
 800edf4:	0800ee81 	.word	0x0800ee81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edfe:	f043 0301 	orr.w	r3, r3, #1
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	18d1      	adds	r1, r2, r3
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee18:	f7ff ff5c 	bl	800ecd4 <prvInsertTimerInActiveList>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d069      	beq.n	800eef6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee30:	f003 0304 	and.w	r3, r3, #4
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d05e      	beq.n	800eef6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3c:	699b      	ldr	r3, [r3, #24]
 800ee3e:	441a      	add	r2, r3
 800ee40:	2300      	movs	r3, #0
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	2300      	movs	r3, #0
 800ee46:	2100      	movs	r1, #0
 800ee48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee4a:	f7ff fe05 	bl	800ea58 <xTimerGenericCommand>
 800ee4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee50:	6a3b      	ldr	r3, [r7, #32]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d14f      	bne.n	800eef6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5a:	f383 8811 	msr	BASEPRI, r3
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	61bb      	str	r3, [r7, #24]
}
 800ee68:	bf00      	nop
 800ee6a:	e7fe      	b.n	800ee6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee72:	f023 0301 	bic.w	r3, r3, #1
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee7e:	e03a      	b.n	800eef6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee86:	f043 0301 	orr.w	r3, r3, #1
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10a      	bne.n	800eeb6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	617b      	str	r3, [r7, #20]
}
 800eeb2:	bf00      	nop
 800eeb4:	e7fe      	b.n	800eeb4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	699a      	ldr	r2, [r3, #24]
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	18d1      	adds	r1, r2, r3
 800eebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec4:	f7ff ff06 	bl	800ecd4 <prvInsertTimerInActiveList>
					break;
 800eec8:	e015      	b.n	800eef6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eed0:	f003 0302 	and.w	r3, r3, #2
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d103      	bne.n	800eee0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeda:	f000 fbe1 	bl	800f6a0 <vPortFree>
 800eede:	e00a      	b.n	800eef6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eee6:	f023 0301 	bic.w	r3, r3, #1
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eef2:	e000      	b.n	800eef6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eef6:	4b08      	ldr	r3, [pc, #32]	; (800ef18 <prvProcessReceivedCommands+0x1c0>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	1d39      	adds	r1, r7, #4
 800eefc:	2200      	movs	r2, #0
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe f8ea 	bl	800d0d8 <xQueueReceive>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f47f af2a 	bne.w	800ed60 <prvProcessReceivedCommands+0x8>
	}
}
 800ef0c:	bf00      	nop
 800ef0e:	bf00      	nop
 800ef10:	3730      	adds	r7, #48	; 0x30
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20000ae4 	.word	0x20000ae4

0800ef1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef22:	e048      	b.n	800efb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef24:	4b2d      	ldr	r3, [pc, #180]	; (800efdc <prvSwitchTimerLists+0xc0>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef2e:	4b2b      	ldr	r3, [pc, #172]	; (800efdc <prvSwitchTimerLists+0xc0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fd fcd3 	bl	800c8e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6a1b      	ldr	r3, [r3, #32]
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef50:	f003 0304 	and.w	r3, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d02e      	beq.n	800efb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	693a      	ldr	r2, [r7, #16]
 800ef5e:	4413      	add	r3, r2
 800ef60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d90e      	bls.n	800ef88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef76:	4b19      	ldr	r3, [pc, #100]	; (800efdc <prvSwitchTimerLists+0xc0>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4610      	mov	r0, r2
 800ef82:	f7fd fc78 	bl	800c876 <vListInsert>
 800ef86:	e016      	b.n	800efb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef88:	2300      	movs	r3, #0
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	2100      	movs	r1, #0
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f7ff fd60 	bl	800ea58 <xTimerGenericCommand>
 800ef98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10a      	bne.n	800efb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	603b      	str	r3, [r7, #0]
}
 800efb2:	bf00      	nop
 800efb4:	e7fe      	b.n	800efb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efb6:	4b09      	ldr	r3, [pc, #36]	; (800efdc <prvSwitchTimerLists+0xc0>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1b1      	bne.n	800ef24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efc0:	4b06      	ldr	r3, [pc, #24]	; (800efdc <prvSwitchTimerLists+0xc0>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efc6:	4b06      	ldr	r3, [pc, #24]	; (800efe0 <prvSwitchTimerLists+0xc4>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a04      	ldr	r2, [pc, #16]	; (800efdc <prvSwitchTimerLists+0xc0>)
 800efcc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efce:	4a04      	ldr	r2, [pc, #16]	; (800efe0 <prvSwitchTimerLists+0xc4>)
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	6013      	str	r3, [r2, #0]
}
 800efd4:	bf00      	nop
 800efd6:	3718      	adds	r7, #24
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	20000adc 	.word	0x20000adc
 800efe0:	20000ae0 	.word	0x20000ae0

0800efe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800efea:	f000 f96b 	bl	800f2c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800efee:	4b15      	ldr	r3, [pc, #84]	; (800f044 <prvCheckForValidListAndQueue+0x60>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d120      	bne.n	800f038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eff6:	4814      	ldr	r0, [pc, #80]	; (800f048 <prvCheckForValidListAndQueue+0x64>)
 800eff8:	f7fd fbec 	bl	800c7d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800effc:	4813      	ldr	r0, [pc, #76]	; (800f04c <prvCheckForValidListAndQueue+0x68>)
 800effe:	f7fd fbe9 	bl	800c7d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f002:	4b13      	ldr	r3, [pc, #76]	; (800f050 <prvCheckForValidListAndQueue+0x6c>)
 800f004:	4a10      	ldr	r2, [pc, #64]	; (800f048 <prvCheckForValidListAndQueue+0x64>)
 800f006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f008:	4b12      	ldr	r3, [pc, #72]	; (800f054 <prvCheckForValidListAndQueue+0x70>)
 800f00a:	4a10      	ldr	r2, [pc, #64]	; (800f04c <prvCheckForValidListAndQueue+0x68>)
 800f00c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f00e:	2300      	movs	r3, #0
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	4b11      	ldr	r3, [pc, #68]	; (800f058 <prvCheckForValidListAndQueue+0x74>)
 800f014:	4a11      	ldr	r2, [pc, #68]	; (800f05c <prvCheckForValidListAndQueue+0x78>)
 800f016:	2110      	movs	r1, #16
 800f018:	200a      	movs	r0, #10
 800f01a:	f7fd fcf7 	bl	800ca0c <xQueueGenericCreateStatic>
 800f01e:	4603      	mov	r3, r0
 800f020:	4a08      	ldr	r2, [pc, #32]	; (800f044 <prvCheckForValidListAndQueue+0x60>)
 800f022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f024:	4b07      	ldr	r3, [pc, #28]	; (800f044 <prvCheckForValidListAndQueue+0x60>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d005      	beq.n	800f038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f02c:	4b05      	ldr	r3, [pc, #20]	; (800f044 <prvCheckForValidListAndQueue+0x60>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	490b      	ldr	r1, [pc, #44]	; (800f060 <prvCheckForValidListAndQueue+0x7c>)
 800f032:	4618      	mov	r0, r3
 800f034:	f7fe fc08 	bl	800d848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f038:	f000 f974 	bl	800f324 <vPortExitCritical>
}
 800f03c:	bf00      	nop
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	20000ae4 	.word	0x20000ae4
 800f048:	20000ab4 	.word	0x20000ab4
 800f04c:	20000ac8 	.word	0x20000ac8
 800f050:	20000adc 	.word	0x20000adc
 800f054:	20000ae0 	.word	0x20000ae0
 800f058:	20000b90 	.word	0x20000b90
 800f05c:	20000af0 	.word	0x20000af0
 800f060:	0802f1d8 	.word	0x0802f1d8

0800f064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3b04      	subs	r3, #4
 800f074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3b04      	subs	r3, #4
 800f082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	f023 0201 	bic.w	r2, r3, #1
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3b04      	subs	r3, #4
 800f092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f094:	4a0c      	ldr	r2, [pc, #48]	; (800f0c8 <pxPortInitialiseStack+0x64>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3b14      	subs	r3, #20
 800f09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f06f 0202 	mvn.w	r2, #2
 800f0b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	3b20      	subs	r3, #32
 800f0b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr
 800f0c8:	0800f0cd 	.word	0x0800f0cd

0800f0cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0d6:	4b12      	ldr	r3, [pc, #72]	; (800f120 <prvTaskExitError+0x54>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0de:	d00a      	beq.n	800f0f6 <prvTaskExitError+0x2a>
	__asm volatile
 800f0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	60fb      	str	r3, [r7, #12]
}
 800f0f2:	bf00      	nop
 800f0f4:	e7fe      	b.n	800f0f4 <prvTaskExitError+0x28>
	__asm volatile
 800f0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fa:	f383 8811 	msr	BASEPRI, r3
 800f0fe:	f3bf 8f6f 	isb	sy
 800f102:	f3bf 8f4f 	dsb	sy
 800f106:	60bb      	str	r3, [r7, #8]
}
 800f108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f10a:	bf00      	nop
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d0fc      	beq.n	800f10c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f112:	bf00      	nop
 800f114:	bf00      	nop
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	20000014 	.word	0x20000014
	...

0800f130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <pxCurrentTCBConst2>)
 800f132:	6819      	ldr	r1, [r3, #0]
 800f134:	6808      	ldr	r0, [r1, #0]
 800f136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13a:	f380 8809 	msr	PSP, r0
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f04f 0000 	mov.w	r0, #0
 800f146:	f380 8811 	msr	BASEPRI, r0
 800f14a:	4770      	bx	lr
 800f14c:	f3af 8000 	nop.w

0800f150 <pxCurrentTCBConst2>:
 800f150:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f154:	bf00      	nop
 800f156:	bf00      	nop

0800f158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f158:	4808      	ldr	r0, [pc, #32]	; (800f17c <prvPortStartFirstTask+0x24>)
 800f15a:	6800      	ldr	r0, [r0, #0]
 800f15c:	6800      	ldr	r0, [r0, #0]
 800f15e:	f380 8808 	msr	MSP, r0
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8814 	msr	CONTROL, r0
 800f16a:	b662      	cpsie	i
 800f16c:	b661      	cpsie	f
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	df00      	svc	0
 800f178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f17a:	bf00      	nop
 800f17c:	e000ed08 	.word	0xe000ed08

0800f180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f186:	4b46      	ldr	r3, [pc, #280]	; (800f2a0 <xPortStartScheduler+0x120>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a46      	ldr	r2, [pc, #280]	; (800f2a4 <xPortStartScheduler+0x124>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d10a      	bne.n	800f1a6 <xPortStartScheduler+0x26>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	613b      	str	r3, [r7, #16]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1a6:	4b3e      	ldr	r3, [pc, #248]	; (800f2a0 <xPortStartScheduler+0x120>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a3f      	ldr	r2, [pc, #252]	; (800f2a8 <xPortStartScheduler+0x128>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d10a      	bne.n	800f1c6 <xPortStartScheduler+0x46>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	60fb      	str	r3, [r7, #12]
}
 800f1c2:	bf00      	nop
 800f1c4:	e7fe      	b.n	800f1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1c6:	4b39      	ldr	r3, [pc, #228]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	22ff      	movs	r2, #255	; 0xff
 800f1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	4b31      	ldr	r3, [pc, #196]	; (800f2b0 <xPortStartScheduler+0x130>)
 800f1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ee:	4b31      	ldr	r3, [pc, #196]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f1f0:	2207      	movs	r2, #7
 800f1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1f4:	e009      	b.n	800f20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f1f6:	4b2f      	ldr	r3, [pc, #188]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	4a2d      	ldr	r2, [pc, #180]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f212:	2b80      	cmp	r3, #128	; 0x80
 800f214:	d0ef      	beq.n	800f1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f216:	4b27      	ldr	r3, [pc, #156]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f1c3 0307 	rsb	r3, r3, #7
 800f21e:	2b04      	cmp	r3, #4
 800f220:	d00a      	beq.n	800f238 <xPortStartScheduler+0xb8>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	60bb      	str	r3, [r7, #8]
}
 800f234:	bf00      	nop
 800f236:	e7fe      	b.n	800f236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f238:	4b1e      	ldr	r3, [pc, #120]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	021b      	lsls	r3, r3, #8
 800f23e:	4a1d      	ldr	r2, [pc, #116]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f242:	4b1c      	ldr	r3, [pc, #112]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f24a:	4a1a      	ldr	r2, [pc, #104]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	b2da      	uxtb	r2, r3
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f256:	4b18      	ldr	r3, [pc, #96]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a17      	ldr	r2, [pc, #92]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f262:	4b15      	ldr	r3, [pc, #84]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a14      	ldr	r2, [pc, #80]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f26e:	f000 f8dd 	bl	800f42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f272:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <xPortStartScheduler+0x13c>)
 800f274:	2200      	movs	r2, #0
 800f276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f278:	f000 f8fc 	bl	800f474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f27c:	4b10      	ldr	r3, [pc, #64]	; (800f2c0 <xPortStartScheduler+0x140>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a0f      	ldr	r2, [pc, #60]	; (800f2c0 <xPortStartScheduler+0x140>)
 800f282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f288:	f7ff ff66 	bl	800f158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f28c:	f7fe ff48 	bl	800e120 <vTaskSwitchContext>
	prvTaskExitError();
 800f290:	f7ff ff1c 	bl	800f0cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	e000ed00 	.word	0xe000ed00
 800f2a4:	410fc271 	.word	0x410fc271
 800f2a8:	410fc270 	.word	0x410fc270
 800f2ac:	e000e400 	.word	0xe000e400
 800f2b0:	20000be0 	.word	0x20000be0
 800f2b4:	20000be4 	.word	0x20000be4
 800f2b8:	e000ed20 	.word	0xe000ed20
 800f2bc:	20000014 	.word	0x20000014
 800f2c0:	e000ef34 	.word	0xe000ef34

0800f2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ce:	f383 8811 	msr	BASEPRI, r3
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	607b      	str	r3, [r7, #4]
}
 800f2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2de:	4b0f      	ldr	r3, [pc, #60]	; (800f31c <vPortEnterCritical+0x58>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	4a0d      	ldr	r2, [pc, #52]	; (800f31c <vPortEnterCritical+0x58>)
 800f2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2e8:	4b0c      	ldr	r3, [pc, #48]	; (800f31c <vPortEnterCritical+0x58>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d10f      	bne.n	800f310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2f0:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <vPortEnterCritical+0x5c>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00a      	beq.n	800f310 <vPortEnterCritical+0x4c>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	603b      	str	r3, [r7, #0]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <vPortEnterCritical+0x4a>
	}
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	20000014 	.word	0x20000014
 800f320:	e000ed04 	.word	0xe000ed04

0800f324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f32a:	4b12      	ldr	r3, [pc, #72]	; (800f374 <vPortExitCritical+0x50>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10a      	bne.n	800f348 <vPortExitCritical+0x24>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	607b      	str	r3, [r7, #4]
}
 800f344:	bf00      	nop
 800f346:	e7fe      	b.n	800f346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f348:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <vPortExitCritical+0x50>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	4a09      	ldr	r2, [pc, #36]	; (800f374 <vPortExitCritical+0x50>)
 800f350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f352:	4b08      	ldr	r3, [pc, #32]	; (800f374 <vPortExitCritical+0x50>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d105      	bne.n	800f366 <vPortExitCritical+0x42>
 800f35a:	2300      	movs	r3, #0
 800f35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f383 8811 	msr	BASEPRI, r3
}
 800f364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f366:	bf00      	nop
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	20000014 	.word	0x20000014
	...

0800f380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f380:	f3ef 8009 	mrs	r0, PSP
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	4b15      	ldr	r3, [pc, #84]	; (800f3e0 <pxCurrentTCBConst>)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	f01e 0f10 	tst.w	lr, #16
 800f390:	bf08      	it	eq
 800f392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	6010      	str	r0, [r2, #0]
 800f39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3a4:	f380 8811 	msr	BASEPRI, r0
 800f3a8:	f3bf 8f4f 	dsb	sy
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f7fe feb6 	bl	800e120 <vTaskSwitchContext>
 800f3b4:	f04f 0000 	mov.w	r0, #0
 800f3b8:	f380 8811 	msr	BASEPRI, r0
 800f3bc:	bc09      	pop	{r0, r3}
 800f3be:	6819      	ldr	r1, [r3, #0]
 800f3c0:	6808      	ldr	r0, [r1, #0]
 800f3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c6:	f01e 0f10 	tst.w	lr, #16
 800f3ca:	bf08      	it	eq
 800f3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3d0:	f380 8809 	msr	PSP, r0
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	f3af 8000 	nop.w

0800f3e0 <pxCurrentTCBConst>:
 800f3e0:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3e4:	bf00      	nop
 800f3e6:	bf00      	nop

0800f3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f2:	f383 8811 	msr	BASEPRI, r3
 800f3f6:	f3bf 8f6f 	isb	sy
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	607b      	str	r3, [r7, #4]
}
 800f400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f402:	f7fe fdd3 	bl	800dfac <xTaskIncrementTick>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d003      	beq.n	800f414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f40c:	4b06      	ldr	r3, [pc, #24]	; (800f428 <xPortSysTickHandler+0x40>)
 800f40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f412:	601a      	str	r2, [r3, #0]
 800f414:	2300      	movs	r3, #0
 800f416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	f383 8811 	msr	BASEPRI, r3
}
 800f41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f420:	bf00      	nop
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	e000ed04 	.word	0xe000ed04

0800f42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f42c:	b480      	push	{r7}
 800f42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f430:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <vPortSetupTimerInterrupt+0x34>)
 800f432:	2200      	movs	r2, #0
 800f434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f436:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <vPortSetupTimerInterrupt+0x38>)
 800f438:	2200      	movs	r2, #0
 800f43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <vPortSetupTimerInterrupt+0x3c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a0a      	ldr	r2, [pc, #40]	; (800f46c <vPortSetupTimerInterrupt+0x40>)
 800f442:	fba2 2303 	umull	r2, r3, r2, r3
 800f446:	099b      	lsrs	r3, r3, #6
 800f448:	4a09      	ldr	r2, [pc, #36]	; (800f470 <vPortSetupTimerInterrupt+0x44>)
 800f44a:	3b01      	subs	r3, #1
 800f44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f44e:	4b04      	ldr	r3, [pc, #16]	; (800f460 <vPortSetupTimerInterrupt+0x34>)
 800f450:	2207      	movs	r2, #7
 800f452:	601a      	str	r2, [r3, #0]
}
 800f454:	bf00      	nop
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	e000e010 	.word	0xe000e010
 800f464:	e000e018 	.word	0xe000e018
 800f468:	20000008 	.word	0x20000008
 800f46c:	10624dd3 	.word	0x10624dd3
 800f470:	e000e014 	.word	0xe000e014

0800f474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f484 <vPortEnableVFP+0x10>
 800f478:	6801      	ldr	r1, [r0, #0]
 800f47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f47e:	6001      	str	r1, [r0, #0]
 800f480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f482:	bf00      	nop
 800f484:	e000ed88 	.word	0xe000ed88

0800f488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f48e:	f3ef 8305 	mrs	r3, IPSR
 800f492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2b0f      	cmp	r3, #15
 800f498:	d914      	bls.n	800f4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f49a:	4a17      	ldr	r2, [pc, #92]	; (800f4f8 <vPortValidateInterruptPriority+0x70>)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	4413      	add	r3, r2
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4a4:	4b15      	ldr	r3, [pc, #84]	; (800f4fc <vPortValidateInterruptPriority+0x74>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	7afa      	ldrb	r2, [r7, #11]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d20a      	bcs.n	800f4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	607b      	str	r3, [r7, #4]
}
 800f4c0:	bf00      	nop
 800f4c2:	e7fe      	b.n	800f4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <vPortValidateInterruptPriority+0x78>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4cc:	4b0d      	ldr	r3, [pc, #52]	; (800f504 <vPortValidateInterruptPriority+0x7c>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d90a      	bls.n	800f4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d8:	f383 8811 	msr	BASEPRI, r3
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	f3bf 8f4f 	dsb	sy
 800f4e4:	603b      	str	r3, [r7, #0]
}
 800f4e6:	bf00      	nop
 800f4e8:	e7fe      	b.n	800f4e8 <vPortValidateInterruptPriority+0x60>
	}
 800f4ea:	bf00      	nop
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	e000e3f0 	.word	0xe000e3f0
 800f4fc:	20000be0 	.word	0x20000be0
 800f500:	e000ed0c 	.word	0xe000ed0c
 800f504:	20000be4 	.word	0x20000be4

0800f508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f510:	2300      	movs	r3, #0
 800f512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f514:	f7fe fc7c 	bl	800de10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f518:	4b5b      	ldr	r3, [pc, #364]	; (800f688 <pvPortMalloc+0x180>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f520:	f000 f920 	bl	800f764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f524:	4b59      	ldr	r3, [pc, #356]	; (800f68c <pvPortMalloc+0x184>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4013      	ands	r3, r2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 8093 	bne.w	800f658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d01d      	beq.n	800f574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f538:	2208      	movs	r2, #8
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4413      	add	r3, r2
 800f53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f003 0307 	and.w	r3, r3, #7
 800f546:	2b00      	cmp	r3, #0
 800f548:	d014      	beq.n	800f574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f023 0307 	bic.w	r3, r3, #7
 800f550:	3308      	adds	r3, #8
 800f552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f003 0307 	and.w	r3, r3, #7
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00a      	beq.n	800f574 <pvPortMalloc+0x6c>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	617b      	str	r3, [r7, #20]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d06e      	beq.n	800f658 <pvPortMalloc+0x150>
 800f57a:	4b45      	ldr	r3, [pc, #276]	; (800f690 <pvPortMalloc+0x188>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d869      	bhi.n	800f658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f584:	4b43      	ldr	r3, [pc, #268]	; (800f694 <pvPortMalloc+0x18c>)
 800f586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f588:	4b42      	ldr	r3, [pc, #264]	; (800f694 <pvPortMalloc+0x18c>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f58e:	e004      	b.n	800f59a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d903      	bls.n	800f5ac <pvPortMalloc+0xa4>
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d1f1      	bne.n	800f590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5ac:	4b36      	ldr	r3, [pc, #216]	; (800f688 <pvPortMalloc+0x180>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d050      	beq.n	800f658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5b6:	6a3b      	ldr	r3, [r7, #32]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2208      	movs	r2, #8
 800f5bc:	4413      	add	r3, r2
 800f5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6a3b      	ldr	r3, [r7, #32]
 800f5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d91f      	bls.n	800f618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4413      	add	r3, r2
 800f5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	f003 0307 	and.w	r3, r3, #7
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00a      	beq.n	800f600 <pvPortMalloc+0xf8>
	__asm volatile
 800f5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	613b      	str	r3, [r7, #16]
}
 800f5fc:	bf00      	nop
 800f5fe:	e7fe      	b.n	800f5fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	685a      	ldr	r2, [r3, #4]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f612:	69b8      	ldr	r0, [r7, #24]
 800f614:	f000 f908 	bl	800f828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f618:	4b1d      	ldr	r3, [pc, #116]	; (800f690 <pvPortMalloc+0x188>)
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	4a1b      	ldr	r2, [pc, #108]	; (800f690 <pvPortMalloc+0x188>)
 800f624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f626:	4b1a      	ldr	r3, [pc, #104]	; (800f690 <pvPortMalloc+0x188>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	4b1b      	ldr	r3, [pc, #108]	; (800f698 <pvPortMalloc+0x190>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d203      	bcs.n	800f63a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f632:	4b17      	ldr	r3, [pc, #92]	; (800f690 <pvPortMalloc+0x188>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a18      	ldr	r2, [pc, #96]	; (800f698 <pvPortMalloc+0x190>)
 800f638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	4b13      	ldr	r3, [pc, #76]	; (800f68c <pvPortMalloc+0x184>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	431a      	orrs	r2, r3
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	2200      	movs	r2, #0
 800f64c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <pvPortMalloc+0x194>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3301      	adds	r3, #1
 800f654:	4a11      	ldr	r2, [pc, #68]	; (800f69c <pvPortMalloc+0x194>)
 800f656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f658:	f7fe fbe8 	bl	800de2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	f003 0307 	and.w	r3, r3, #7
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00a      	beq.n	800f67c <pvPortMalloc+0x174>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	60fb      	str	r3, [r7, #12]
}
 800f678:	bf00      	nop
 800f67a:	e7fe      	b.n	800f67a <pvPortMalloc+0x172>
	return pvReturn;
 800f67c:	69fb      	ldr	r3, [r7, #28]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3728      	adds	r7, #40	; 0x28
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	20007ab8 	.word	0x20007ab8
 800f68c:	20007acc 	.word	0x20007acc
 800f690:	20007abc 	.word	0x20007abc
 800f694:	20007ab0 	.word	0x20007ab0
 800f698:	20007ac0 	.word	0x20007ac0
 800f69c:	20007ac4 	.word	0x20007ac4

0800f6a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d04d      	beq.n	800f74e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6b2:	2308      	movs	r3, #8
 800f6b4:	425b      	negs	r3, r3
 800f6b6:	697a      	ldr	r2, [r7, #20]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	685a      	ldr	r2, [r3, #4]
 800f6c4:	4b24      	ldr	r3, [pc, #144]	; (800f758 <vPortFree+0xb8>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d10a      	bne.n	800f6e4 <vPortFree+0x44>
	__asm volatile
 800f6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d2:	f383 8811 	msr	BASEPRI, r3
 800f6d6:	f3bf 8f6f 	isb	sy
 800f6da:	f3bf 8f4f 	dsb	sy
 800f6de:	60fb      	str	r3, [r7, #12]
}
 800f6e0:	bf00      	nop
 800f6e2:	e7fe      	b.n	800f6e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <vPortFree+0x62>
	__asm volatile
 800f6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f0:	f383 8811 	msr	BASEPRI, r3
 800f6f4:	f3bf 8f6f 	isb	sy
 800f6f8:	f3bf 8f4f 	dsb	sy
 800f6fc:	60bb      	str	r3, [r7, #8]
}
 800f6fe:	bf00      	nop
 800f700:	e7fe      	b.n	800f700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	685a      	ldr	r2, [r3, #4]
 800f706:	4b14      	ldr	r3, [pc, #80]	; (800f758 <vPortFree+0xb8>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4013      	ands	r3, r2
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d01e      	beq.n	800f74e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d11a      	bne.n	800f74e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	4b0e      	ldr	r3, [pc, #56]	; (800f758 <vPortFree+0xb8>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	43db      	mvns	r3, r3
 800f722:	401a      	ands	r2, r3
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f728:	f7fe fb72 	bl	800de10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	685a      	ldr	r2, [r3, #4]
 800f730:	4b0a      	ldr	r3, [pc, #40]	; (800f75c <vPortFree+0xbc>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4413      	add	r3, r2
 800f736:	4a09      	ldr	r2, [pc, #36]	; (800f75c <vPortFree+0xbc>)
 800f738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f73a:	6938      	ldr	r0, [r7, #16]
 800f73c:	f000 f874 	bl	800f828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f740:	4b07      	ldr	r3, [pc, #28]	; (800f760 <vPortFree+0xc0>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3301      	adds	r3, #1
 800f746:	4a06      	ldr	r2, [pc, #24]	; (800f760 <vPortFree+0xc0>)
 800f748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f74a:	f7fe fb6f 	bl	800de2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f74e:	bf00      	nop
 800f750:	3718      	adds	r7, #24
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20007acc 	.word	0x20007acc
 800f75c:	20007abc 	.word	0x20007abc
 800f760:	20007ac8 	.word	0x20007ac8

0800f764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f76a:	f646 63c8 	movw	r3, #28360	; 0x6ec8
 800f76e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f770:	4b27      	ldr	r3, [pc, #156]	; (800f810 <prvHeapInit+0xac>)
 800f772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f003 0307 	and.w	r3, r3, #7
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00c      	beq.n	800f798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3307      	adds	r3, #7
 800f782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f023 0307 	bic.w	r3, r3, #7
 800f78a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	4a1f      	ldr	r2, [pc, #124]	; (800f810 <prvHeapInit+0xac>)
 800f794:	4413      	add	r3, r2
 800f796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f79c:	4a1d      	ldr	r2, [pc, #116]	; (800f814 <prvHeapInit+0xb0>)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7a2:	4b1c      	ldr	r3, [pc, #112]	; (800f814 <prvHeapInit+0xb0>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7b0:	2208      	movs	r2, #8
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	1a9b      	subs	r3, r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f023 0307 	bic.w	r3, r3, #7
 800f7be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	4a15      	ldr	r2, [pc, #84]	; (800f818 <prvHeapInit+0xb4>)
 800f7c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7c6:	4b14      	ldr	r3, [pc, #80]	; (800f818 <prvHeapInit+0xb4>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7ce:	4b12      	ldr	r3, [pc, #72]	; (800f818 <prvHeapInit+0xb4>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7e4:	4b0c      	ldr	r3, [pc, #48]	; (800f818 <prvHeapInit+0xb4>)
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	4a0a      	ldr	r2, [pc, #40]	; (800f81c <prvHeapInit+0xb8>)
 800f7f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4a09      	ldr	r2, [pc, #36]	; (800f820 <prvHeapInit+0xbc>)
 800f7fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7fc:	4b09      	ldr	r3, [pc, #36]	; (800f824 <prvHeapInit+0xc0>)
 800f7fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f802:	601a      	str	r2, [r3, #0]
}
 800f804:	bf00      	nop
 800f806:	3714      	adds	r7, #20
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr
 800f810:	20000be8 	.word	0x20000be8
 800f814:	20007ab0 	.word	0x20007ab0
 800f818:	20007ab8 	.word	0x20007ab8
 800f81c:	20007ac0 	.word	0x20007ac0
 800f820:	20007abc 	.word	0x20007abc
 800f824:	20007acc 	.word	0x20007acc

0800f828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f830:	4b28      	ldr	r3, [pc, #160]	; (800f8d4 <prvInsertBlockIntoFreeList+0xac>)
 800f832:	60fb      	str	r3, [r7, #12]
 800f834:	e002      	b.n	800f83c <prvInsertBlockIntoFreeList+0x14>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	429a      	cmp	r2, r3
 800f844:	d8f7      	bhi.n	800f836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	4413      	add	r3, r2
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	429a      	cmp	r2, r3
 800f856:	d108      	bne.n	800f86a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	685a      	ldr	r2, [r3, #4]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	441a      	add	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	441a      	add	r2, r3
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d118      	bne.n	800f8b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	4b15      	ldr	r3, [pc, #84]	; (800f8d8 <prvInsertBlockIntoFreeList+0xb0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	429a      	cmp	r2, r3
 800f888:	d00d      	beq.n	800f8a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	441a      	add	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	e008      	b.n	800f8b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	e003      	b.n	800f8b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d002      	beq.n	800f8c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8c6:	bf00      	nop
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	20007ab0 	.word	0x20007ab0
 800f8d8:	20007ab8 	.word	0x20007ab8

0800f8dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800f8e0:	f006 fe9a 	bl	8016618 <touchgfx_init>
}
 800f8e4:	bf00      	nop
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800f8f0:	f006 febc 	bl	801666c <touchgfx_taskEntry>
}
 800f8f4:	bf00      	nop
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
    {
 800f904:	4a04      	ldr	r2, [pc, #16]	; (800f918 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	601a      	str	r2, [r3, #0]
    }
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr
 800f918:	0802fea4 	.word	0x0802fea4

0800f91c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
    }
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f7ff ffe9 	bl	800f8fc <_ZN8touchgfx12FontProviderD1Ev>
 800f92a:	2104      	movs	r1, #4
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f01d fcd8 	bl	802d2e2 <_ZdlPvj>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4618      	mov	r0, r3
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	460b      	mov	r3, r1
 800f946:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f948:	887b      	ldrh	r3, [r7, #2]
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d010      	beq.n	800f970 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f94e:	2b02      	cmp	r3, #2
 800f950:	dc13      	bgt.n	800f97a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f952:	2b00      	cmp	r3, #0
 800f954:	d002      	beq.n	800f95c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f956:	2b01      	cmp	r3, #1
 800f958:	d005      	beq.n	800f966 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f95a:	e00e      	b.n	800f97a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_VALUES:
        // bahnschrift_100_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f95c:	f004 fe32 	bl	80145c4 <_ZN17TypedTextDatabase8getFontsEv>
 800f960:	4603      	mov	r3, r0
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	e00a      	b.n	800f97c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_LABEL:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f966:	f004 fe2d 	bl	80145c4 <_ZN17TypedTextDatabase8getFontsEv>
 800f96a:	4603      	mov	r3, r0
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	e005      	b.n	800f97c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f970:	f004 fe28 	bl	80145c4 <_ZN17TypedTextDatabase8getFontsEv>
 800f974:	4603      	mov	r3, r0
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	e000      	b.n	800f97c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f97a:	2300      	movs	r3, #0
    }
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_LABEL = 1;  // bahnschrift_25_2bpp
    static const touchgfx::FontId SENSOR_UNIT = 1;   // bahnschrift_25_2bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	4a05      	ldr	r2, [pc, #20]	; (800f9a4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	4618      	mov	r0, r3
 800f996:	f7ff ffb1 	bl	800f8fc <_ZN8touchgfx12FontProviderD1Ev>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	0802fe90 	.word	0x0802fe90

0800f9a8 <_ZN23ApplicationFontProviderD0Ev>:
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f7ff ffe7 	bl	800f984 <_ZN23ApplicationFontProviderD1Ev>
 800f9b6:	2104      	movs	r1, #4
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f01d fc92 	bl	802d2e2 <_ZdlPvj>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
    {
 800f9d0:	4a04      	ldr	r2, [pc, #16]	; (800f9e4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	601a      	str	r2, [r3, #0]
    }
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	0803027c 	.word	0x0803027c

0800f9e8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    }
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7ff ffe9 	bl	800f9c8 <_ZN8touchgfx4FontD1Ev>
 800f9f6:	2110      	movs	r1, #16
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f01d fc72 	bl	802d2e2 <_ZdlPvj>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4618      	mov	r0, r3
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800fa08:	b590      	push	{r4, r7, lr}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800fa14:	887b      	ldrh	r3, [r7, #2]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e010      	b.n	800fa40 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800fa22:	2300      	movs	r3, #0
 800fa24:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	3308      	adds	r3, #8
 800fa2c:	681c      	ldr	r4, [r3, #0]
 800fa2e:	f107 030f 	add.w	r3, r7, #15
 800fa32:	f107 0210 	add.w	r2, r7, #16
 800fa36:	8879      	ldrh	r1, [r7, #2]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	47a0      	blx	r4
 800fa3c:	6178      	str	r0, [r7, #20]
        return glyph;
 800fa3e:	697b      	ldr	r3, [r7, #20]
    }
 800fa40:	4618      	mov	r0, r3
 800fa42:	371c      	adds	r7, #28
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd90      	pop	{r4, r7, pc}

0800fa48 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	895b      	ldrh	r3, [r3, #10]
    }
 800fa54:	4618      	mov	r0, r3
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	899b      	ldrh	r3, [r3, #12]
    }
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	889b      	ldrh	r3, [r3, #4]
    }
 800fa84:	4618      	mov	r0, r3
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	889a      	ldrh	r2, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	799b      	ldrb	r3, [r3, #6]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	4413      	add	r3, r2
 800faa4:	b29b      	uxth	r3, r3
    }
 800faa6:	4618      	mov	r0, r3
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800fab2:	b480      	push	{r7}
 800fab4:	b083      	sub	sp, #12
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	79db      	ldrb	r3, [r3, #7]
 800fabe:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800fac2:	b2db      	uxtb	r3, r3
    }
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	79db      	ldrb	r3, [r3, #7]
 800fadc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fae0:	b2db      	uxtb	r3, r3
    }
 800fae2:	4618      	mov	r0, r3
 800fae4:	370c      	adds	r7, #12
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr
	...

0800faf0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	4a05      	ldr	r2, [pc, #20]	; (800fb10 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7ff ff61 	bl	800f9c8 <_ZN8touchgfx4FontD1Ev>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	0803203c 	.word	0x0803203c

0800fb14 <_ZN8touchgfx9ConstFontD0Ev>:
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff ffe7 	bl	800faf0 <_ZN8touchgfx9ConstFontD1Ev>
 800fb22:	2118      	movs	r1, #24
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f01d fbdc 	bl	802d2e2 <_ZdlPvj>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	4a05      	ldr	r2, [pc, #20]	; (800fb54 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7ff ffd3 	bl	800faf0 <_ZN8touchgfx9ConstFontD1Ev>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	0802fec8 	.word	0x0802fec8

0800fb58 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7ff ffe7 	bl	800fb34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fb66:	2128      	movs	r1, #40	; 0x28
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f01d fbba 	bl	802d2e2 <_ZdlPvj>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
    {
 800fb80:	4a04      	ldr	r2, [pc, #16]	; (800fb94 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	601a      	str	r2, [r3, #0]
    }
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr
 800fb94:	0802feb8 	.word	0x0802feb8

0800fb98 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
    }
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7ff ffe9 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
 800fba6:	2108      	movs	r1, #8
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f01d fb9a 	bl	802d2e2 <_ZdlPvj>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
    }
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800fbd0:	b480      	push	{r7}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800fbdc:	4618      	mov	r0, r3
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b08c      	sub	sp, #48	; 0x30
 800fbec:	af08      	add	r7, sp, #32
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	80fb      	strh	r3, [r7, #6]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	88b9      	ldrh	r1, [r7, #4]
 800fc02:	88fa      	ldrh	r2, [r7, #6]
 800fc04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fc06:	9306      	str	r3, [sp, #24]
 800fc08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fc0a:	9305      	str	r3, [sp, #20]
 800fc0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc10:	9304      	str	r3, [sp, #16]
 800fc12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc16:	9303      	str	r3, [sp, #12]
 800fc18:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc1c:	9302      	str	r3, [sp, #8]
 800fc1e:	7f3b      	ldrb	r3, [r7, #28]
 800fc20:	9301      	str	r3, [sp, #4]
 800fc22:	7e3b      	ldrb	r3, [r7, #24]
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	460b      	mov	r3, r1
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	f00d facf 	bl	801d1cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800fc2e:	4a0a      	ldr	r2, [pc, #40]	; (800fc58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc38:	619a      	str	r2, [r3, #24]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc3e:	61da      	str	r2, [r3, #28]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc44:	621a      	str	r2, [r3, #32]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc4a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	0802fec8 	.word	0x0802fec8

0800fc5c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	699b      	ldr	r3, [r3, #24]
 800fc6a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	889b      	ldrh	r3, [r3, #4]
 800fc70:	0adb      	lsrs	r3, r3, #11
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	4413      	add	r3, r2
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4413      	add	r3, r2
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b089      	sub	sp, #36	; 0x24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	460b      	mov	r3, r1
 800fc98:	607a      	str	r2, [r7, #4]
 800fc9a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d003      	beq.n	800fcaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	7b1b      	ldrb	r3, [r3, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d101      	bne.n	800fcae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e030      	b.n	800fd10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	69da      	ldr	r2, [r3, #28]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	7b5b      	ldrb	r3, [r3, #13]
 800fcba:	021b      	lsls	r3, r3, #8
 800fcbc:	b21b      	sxth	r3, r3
 800fcbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fcc2:	b219      	sxth	r1, r3
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	7adb      	ldrb	r3, [r3, #11]
 800fcc8:	b21b      	sxth	r3, r3
 800fcca:	430b      	orrs	r3, r1
 800fccc:	b21b      	sxth	r3, r3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	7b1b      	ldrb	r3, [r3, #12]
 800fcda:	837b      	strh	r3, [r7, #26]
 800fcdc:	8b7b      	ldrh	r3, [r7, #26]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d015      	beq.n	800fd0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	897a      	ldrh	r2, [r7, #10]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d103      	bne.n	800fcf4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fcf2:	e00d      	b.n	800fd10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	897a      	ldrh	r2, [r7, #10]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d306      	bcc.n	800fd0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fcfe:	8b7b      	ldrh	r3, [r7, #26]
 800fd00:	3b01      	subs	r3, #1
 800fd02:	837b      	strh	r3, [r7, #26]
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	3304      	adds	r3, #4
 800fd08:	61fb      	str	r3, [r7, #28]
 800fd0a:	e7e7      	b.n	800fcdc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800fd0c:	bf00      	nop
        }
    }
    return 0;
 800fd0e:	2300      	movs	r3, #0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3724      	adds	r7, #36	; 0x24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_100_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_100_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_100_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_100_2bpp(glyphs_bahnschrift_100_2bpp, 70, 100, 22, 2, 0, 2, 2, unicodes_bahnschrift_100_2bpp, kerning_bahnschrift_100_2bpp, 0, 0, 0, 0);
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	4801      	ldr	r0, [pc, #4]	; (800fd28 <__tcf_0+0xc>)
 800fd22:	f7ff ff07 	bl	800fb34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20007ad0 	.word	0x20007ad0

0800fd2c <_Z28getFont_bahnschrift_100_2bppv>:
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08c      	sub	sp, #48	; 0x30
 800fd30:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_100_2bpp(glyphs_bahnschrift_100_2bpp, 70, 100, 22, 2, 0, 2, 2, unicodes_bahnschrift_100_2bpp, kerning_bahnschrift_100_2bpp, 0, 0, 0, 0);
 800fd32:	4b1f      	ldr	r3, [pc, #124]	; (800fdb0 <_Z28getFont_bahnschrift_100_2bppv+0x84>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f3bf 8f5b 	dmb	ish
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	f003 0301 	and.w	r3, r3, #1
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	bf0c      	ite	eq
 800fd44:	2301      	moveq	r3, #1
 800fd46:	2300      	movne	r3, #0
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d02c      	beq.n	800fda8 <_Z28getFont_bahnschrift_100_2bppv+0x7c>
 800fd4e:	4818      	ldr	r0, [pc, #96]	; (800fdb0 <_Z28getFont_bahnschrift_100_2bppv+0x84>)
 800fd50:	f01d fac9 	bl	802d2e6 <__cxa_guard_acquire>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	bf14      	ite	ne
 800fd5a:	2301      	movne	r3, #1
 800fd5c:	2300      	moveq	r3, #0
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d021      	beq.n	800fda8 <_Z28getFont_bahnschrift_100_2bppv+0x7c>
 800fd64:	2300      	movs	r3, #0
 800fd66:	930a      	str	r3, [sp, #40]	; 0x28
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	9308      	str	r3, [sp, #32]
 800fd70:	2300      	movs	r3, #0
 800fd72:	9307      	str	r3, [sp, #28]
 800fd74:	4b0f      	ldr	r3, [pc, #60]	; (800fdb4 <_Z28getFont_bahnschrift_100_2bppv+0x88>)
 800fd76:	9306      	str	r3, [sp, #24]
 800fd78:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <_Z28getFont_bahnschrift_100_2bppv+0x8c>)
 800fd7a:	9305      	str	r3, [sp, #20]
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	9304      	str	r3, [sp, #16]
 800fd80:	2302      	movs	r3, #2
 800fd82:	9303      	str	r3, [sp, #12]
 800fd84:	2300      	movs	r3, #0
 800fd86:	9302      	str	r3, [sp, #8]
 800fd88:	2302      	movs	r3, #2
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	2316      	movs	r3, #22
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2364      	movs	r3, #100	; 0x64
 800fd92:	2246      	movs	r2, #70	; 0x46
 800fd94:	4909      	ldr	r1, [pc, #36]	; (800fdbc <_Z28getFont_bahnschrift_100_2bppv+0x90>)
 800fd96:	480a      	ldr	r0, [pc, #40]	; (800fdc0 <_Z28getFont_bahnschrift_100_2bppv+0x94>)
 800fd98:	f7ff ff26 	bl	800fbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fd9c:	4804      	ldr	r0, [pc, #16]	; (800fdb0 <_Z28getFont_bahnschrift_100_2bppv+0x84>)
 800fd9e:	f01d faae 	bl	802d2fe <__cxa_guard_release>
 800fda2:	4808      	ldr	r0, [pc, #32]	; (800fdc4 <_Z28getFont_bahnschrift_100_2bppv+0x98>)
 800fda4:	f01e f8da 	bl	802df5c <atexit>
    return bahnschrift_100_2bpp;
 800fda8:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <_Z28getFont_bahnschrift_100_2bppv+0x94>)
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20007af8 	.word	0x20007af8
 800fdb4:	08041410 	.word	0x08041410
 800fdb8:	08041418 	.word	0x08041418
 800fdbc:	08040c68 	.word	0x08040c68
 800fdc0:	20007ad0 	.word	0x20007ad0
 800fdc4:	0800fd1d 	.word	0x0800fd1d

0800fdc8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_25_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	4801      	ldr	r0, [pc, #4]	; (800fdd4 <__tcf_0+0xc>)
 800fdce:	f7ff feb1 	bl	800fb34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20007afc 	.word	0x20007afc

0800fdd8 <_Z27getFont_bahnschrift_25_2bppv>:
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08c      	sub	sp, #48	; 0x30
 800fddc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 800fdde:	4b1f      	ldr	r3, [pc, #124]	; (800fe5c <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	f3bf 8f5b 	dmb	ish
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	f003 0301 	and.w	r3, r3, #1
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	bf0c      	ite	eq
 800fdf0:	2301      	moveq	r3, #1
 800fdf2:	2300      	movne	r3, #0
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d02c      	beq.n	800fe54 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 800fdfa:	4818      	ldr	r0, [pc, #96]	; (800fe5c <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fdfc:	f01d fa73 	bl	802d2e6 <__cxa_guard_acquire>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	bf14      	ite	ne
 800fe06:	2301      	movne	r3, #1
 800fe08:	2300      	moveq	r3, #0
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d021      	beq.n	800fe54 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 800fe10:	2300      	movs	r3, #0
 800fe12:	930a      	str	r3, [sp, #40]	; 0x28
 800fe14:	2300      	movs	r3, #0
 800fe16:	9309      	str	r3, [sp, #36]	; 0x24
 800fe18:	2300      	movs	r3, #0
 800fe1a:	9308      	str	r3, [sp, #32]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9307      	str	r3, [sp, #28]
 800fe20:	4b0f      	ldr	r3, [pc, #60]	; (800fe60 <_Z27getFont_bahnschrift_25_2bppv+0x88>)
 800fe22:	9306      	str	r3, [sp, #24]
 800fe24:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <_Z27getFont_bahnschrift_25_2bppv+0x8c>)
 800fe26:	9305      	str	r3, [sp, #20]
 800fe28:	2301      	movs	r3, #1
 800fe2a:	9304      	str	r3, [sp, #16]
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	9303      	str	r3, [sp, #12]
 800fe30:	2300      	movs	r3, #0
 800fe32:	9302      	str	r3, [sp, #8]
 800fe34:	2302      	movs	r3, #2
 800fe36:	9301      	str	r3, [sp, #4]
 800fe38:	2305      	movs	r3, #5
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	2319      	movs	r3, #25
 800fe3e:	2246      	movs	r2, #70	; 0x46
 800fe40:	4909      	ldr	r1, [pc, #36]	; (800fe68 <_Z27getFont_bahnschrift_25_2bppv+0x90>)
 800fe42:	480a      	ldr	r0, [pc, #40]	; (800fe6c <_Z27getFont_bahnschrift_25_2bppv+0x94>)
 800fe44:	f7ff fed0 	bl	800fbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fe48:	4804      	ldr	r0, [pc, #16]	; (800fe5c <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fe4a:	f01d fa58 	bl	802d2fe <__cxa_guard_release>
 800fe4e:	4808      	ldr	r0, [pc, #32]	; (800fe70 <_Z27getFont_bahnschrift_25_2bppv+0x98>)
 800fe50:	f01e f884 	bl	802df5c <atexit>
    return bahnschrift_25_2bpp;
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <_Z27getFont_bahnschrift_25_2bppv+0x94>)
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	20007b24 	.word	0x20007b24
 800fe60:	08041414 	.word	0x08041414
 800fe64:	0804141c 	.word	0x0804141c
 800fe68:	0804103c 	.word	0x0804103c
 800fe6c:	20007afc 	.word	0x20007afc
 800fe70:	0800fdc9 	.word	0x0800fdc9

0800fe74 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	4618      	mov	r0, r3
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
    {
    }
 800fe96:	bf00      	nop
 800fe98:	370c      	adds	r7, #12
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr

0800fea2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fea2:	b480      	push	{r7}
 800fea4:	b083      	sub	sp, #12
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
 800feaa:	6039      	str	r1, [r7, #0]
    {
    }
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
    {
    }
 800fec2:	bf00      	nop
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	460b      	mov	r3, r1
 800fed8:	70fb      	strb	r3, [r7, #3]
    {
    }
 800feda:	bf00      	nop
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fee6:	b480      	push	{r7}
 800fee8:	b083      	sub	sp, #12
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
    {
    }
 800feee:	bf00      	nop
 800fef0:	370c      	adds	r7, #12
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800fefa:	b480      	push	{r7}
 800fefc:	b083      	sub	sp, #12
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
    {
    }
 800ff02:	bf00      	nop
 800ff04:	370c      	adds	r7, #12
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
	...

0800ff10 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    {
 800ff18:	4a04      	ldr	r2, [pc, #16]	; (800ff2c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]
    }
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	08030020 	.word	0x08030020

0800ff30 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
    }
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff ffe9 	bl	800ff10 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ff3e:	2104      	movs	r1, #4
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f01d f9ce 	bl	802d2e2 <_ZdlPvj>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ff7a:	6810      	ldr	r0, [r2, #0]
 800ff7c:	6851      	ldr	r1, [r2, #4]
 800ff7e:	c303      	stmia	r3!, {r0, r1}
    }
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
    {
 800ff94:	4a04      	ldr	r2, [pc, #16]	; (800ffa8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
    }
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	08030008 	.word	0x08030008

0800ffac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
    }
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f7ff ffe9 	bl	800ff8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ffba:	2104      	movs	r1, #4
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f01d f990 	bl	802d2e2 <_ZdlPvj>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ffcc:	b480      	push	{r7}
 800ffce:	af00      	add	r7, sp, #0
    {
        return instance;
 800ffd0:	4b03      	ldr	r3, [pc, #12]	; (800ffe0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
    }
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop
 800ffe0:	200097a8 	.word	0x200097a8

0800ffe4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ffe4:	b480      	push	{r7}
 800ffe6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ffe8:	4b0b      	ldr	r3, [pc, #44]	; (8010018 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d008      	beq.n	8010006 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fff4:	4b08      	ldr	r3, [pc, #32]	; (8010018 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d003      	beq.n	8010006 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fffe:	4b06      	ldr	r3, [pc, #24]	; (8010018 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010004:	e002      	b.n	801000c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8010006:	4b04      	ldr	r3, [pc, #16]	; (8010018 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	689b      	ldr	r3, [r3, #8]
    }
 801000c:	4618      	mov	r0, r3
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	200097a8 	.word	0x200097a8

0801001c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8010024:	4a07      	ldr	r2, [pc, #28]	; (8010044 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	605a      	str	r2, [r3, #4]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	721a      	strb	r2, [r3, #8]
    {
    }
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	0802ffe4 	.word	0x0802ffe4

08010048 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
    {
 8010050:	4a04      	ldr	r2, [pc, #16]	; (8010064 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	601a      	str	r2, [r3, #0]
    }
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr
 8010064:	0802ffe4 	.word	0x0802ffe4

08010068 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
    }
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f7ff ffe9 	bl	8010048 <_ZN8touchgfx10TransitionD1Ev>
 8010076:	210c      	movs	r1, #12
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f01d f932 	bl	802d2e2 <_ZdlPvj>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4618      	mov	r0, r3
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
    {
    }
 8010090:	bf00      	nop
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
    {
    }
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
    {
    }
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80100cc:	f00c f80a 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 80100d0:	4603      	mov	r3, r0
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	3230      	adds	r2, #48	; 0x30
 80100d6:	6812      	ldr	r2, [r2, #0]
 80100d8:	4618      	mov	r0, r3
 80100da:	4790      	blx	r2
    }
 80100dc:	bf00      	nop
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	683a      	ldr	r2, [r7, #0]
 80100f2:	605a      	str	r2, [r3, #4]
    }
 80100f4:	bf00      	nop
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	4a05      	ldr	r2, [pc, #20]	; (8010120 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff fefd 	bl	800ff10 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	08031d78 	.word	0x08031d78

08010124 <_ZN8touchgfx11ApplicationD0Ev>:
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff ffe7 	bl	8010100 <_ZN8touchgfx11ApplicationD1Ev>
 8010132:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f01d f8d3 	bl	802d2e2 <_ZdlPvj>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4618      	mov	r0, r3
 8010140:	3708      	adds	r7, #8
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	4618      	mov	r0, r3
 8010154:	f00c f82e 	bl	801c1b4 <_ZN8touchgfx11ApplicationC1Ev>
 8010158:	4a09      	ldr	r2, [pc, #36]	; (8010180 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	601a      	str	r2, [r3, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4a04      	ldr	r2, [pc, #16]	; (8010184 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010172:	6013      	str	r3, [r2, #0]
    }
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	4618      	mov	r0, r3
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	0802ffa0 	.word	0x0802ffa0
 8010184:	200097f4 	.word	0x200097f4

08010188 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 f804 	bl	801019e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010196:	bf00      	nop
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00f      	beq.n	80101d0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	330c      	adds	r3, #12
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4610      	mov	r0, r2
 80101c4:	4798      	blx	r3
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d001      	beq.n	80101d0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80101cc:	2301      	movs	r3, #1
 80101ce:	e000      	b.n	80101d2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80101d0:	2300      	movs	r3, #0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00e      	beq.n	80101f4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3308      	adds	r3, #8
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4610      	mov	r0, r2
 80101ea:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80101f4:	bf00      	nop
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	601a      	str	r2, [r3, #0]
    }
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	4a05      	ldr	r2, [pc, #20]	; (8010238 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	601a      	str	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4618      	mov	r0, r3
 801022a:	f7ff ff69 	bl	8010100 <_ZN8touchgfx11ApplicationD1Ev>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	0802ffa0 	.word	0x0802ffa0

0801023c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7ff ffe7 	bl	8010218 <_ZN8touchgfx14MVPApplicationD1Ev>
 801024a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f01d f847 	bl	802d2e2 <_ZdlPvj>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4618      	mov	r0, r3
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
	...

08010260 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	4a08      	ldr	r2, [pc, #32]	; (801028c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010274:	4618      	mov	r0, r3
 8010276:	f000 fabf 	bl	80107f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	f7ff ffcb 	bl	8010218 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4618      	mov	r0, r3
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	0802ff44 	.word	0x0802ff44

08010290 <_ZN23FrontendApplicationBaseD0Ev>:
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7ff ffe1 	bl	8010260 <_ZN23FrontendApplicationBaseD1Ev>
 801029e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f01d f81d 	bl	802d2e2 <_ZdlPvj>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4618      	mov	r0, r3
 80102ac:	3708      	adds	r7, #8
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}

080102b2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80102b2:	b480      	push	{r7}
 80102b4:	b083      	sub	sp, #12
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2201      	movs	r2, #1
 80102be:	721a      	strb	r2, [r3, #8]
    }
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	605a      	str	r2, [r3, #4]
    }
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff ff26 	bl	8010148 <_ZN8touchgfx14MVPApplicationC1Ev>
 80102fc:	4a13      	ldr	r2, [pc, #76]	; (801034c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	601a      	str	r2, [r3, #0]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010308:	4618      	mov	r0, r3
 801030a:	f000 f89f 	bl	801044c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	68ba      	ldr	r2, [r7, #8]
 801031a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801031e:	f7ff fe55 	bl	800ffcc <_ZN8touchgfx3HAL11getInstanceEv>
 8010322:	4603      	mov	r3, r0
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	3208      	adds	r2, #8
 8010328:	6812      	ldr	r2, [r2, #0]
 801032a:	2100      	movs	r1, #0
 801032c:	4618      	mov	r0, r3
 801032e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010330:	2000      	movs	r0, #0
 8010332:	f004 f8cf 	bl	80144d4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010336:	f7ff fe55 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 801033a:	4603      	mov	r3, r0
 801033c:	4618      	mov	r0, r3
 801033e:	f014 f9d4 	bl	80246ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	4618      	mov	r0, r3
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	0802ff44 	.word	0x0802ff44

08010350 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	4611      	mov	r1, r2
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff ffe9 	bl	8010350 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	605a      	str	r2, [r3, #4]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	3308      	adds	r3, #8
 801038c:	3208      	adds	r2, #8
 801038e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010392:	e883 0003 	stmia.w	r3, {r0, r1}
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4618      	mov	r0, r3
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80103a0:	b590      	push	{r4, r7, lr}
 80103a2:	b089      	sub	sp, #36	; 0x24
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80103ae:	4b10      	ldr	r3, [pc, #64]	; (80103f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80103b0:	61bb      	str	r3, [r7, #24]
 80103b2:	2300      	movs	r3, #0
 80103b4:	61fb      	str	r3, [r7, #28]
 80103b6:	f107 0008 	add.w	r0, r7, #8
 80103ba:	f107 0318 	add.w	r3, r7, #24
 80103be:	cb0c      	ldmia	r3, {r2, r3}
 80103c0:	6879      	ldr	r1, [r7, #4]
 80103c2:	f000 f85f 	bl	8010484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80103c6:	f107 0308 	add.w	r3, r7, #8
 80103ca:	4619      	mov	r1, r3
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7ff ffcb 	bl	8010368 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80103d2:	f107 0308 	add.w	r3, r7, #8
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 fa0e 	bl	80107f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80103e8:	bf00      	nop
 80103ea:	3724      	adds	r7, #36	; 0x24
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd90      	pop	{r4, r7, pc}
 80103f0:	080103f5 	.word	0x080103f5

080103f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af02      	add	r7, sp, #8
 80103fa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010408:	461a      	mov	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	4b04      	ldr	r3, [pc, #16]	; (8010424 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8010414:	4804      	ldr	r0, [pc, #16]	; (8010428 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8010416:	f000 f867 	bl	80104e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801041a:	bf00      	nop
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	200097e8 	.word	0x200097e8
 8010428:	200097e4 	.word	0x200097e4

0801042c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	4a04      	ldr	r2, [pc, #16]	; (8010448 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	08030008 	.word	0x08030008

0801044c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff ffe8 	bl	801042c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801045c:	4a08      	ldr	r2, [pc, #32]	; (8010480 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	605a      	str	r2, [r3, #4]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	609a      	str	r2, [r3, #8]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2200      	movs	r2, #0
 8010472:	60da      	str	r2, [r3, #12]
    {
    }
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	0802ff88 	.word	0x0802ff88

08010484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	4639      	mov	r1, r7
 8010490:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff ffc8 	bl	801042c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801049c:	4a08      	ldr	r2, [pc, #32]	; (80104c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	68ba      	ldr	r2, [r7, #8]
 80104a6:	605a      	str	r2, [r3, #4]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	3308      	adds	r3, #8
 80104ac:	463a      	mov	r2, r7
 80104ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104b2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	4618      	mov	r0, r3
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	0802ff88 	.word	0x0802ff88

080104c4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7ff fda4 	bl	801001c <_ZN8touchgfx10TransitionC1Ev>
 80104d4:	4a03      	ldr	r2, [pc, #12]	; (80104e4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	0802ff20 	.word	0x0802ff20

080104e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b08f      	sub	sp, #60	; 0x3c
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	607a      	str	r2, [r7, #4]
 80104f4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	689a      	ldr	r2, [r3, #8]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	3320      	adds	r3, #32
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4610      	mov	r0, r2
 8010506:	4798      	blx	r3
 8010508:	4603      	mov	r3, r0
 801050a:	f640 528b 	movw	r2, #3467	; 0xd8b
 801050e:	4293      	cmp	r3, r2
 8010510:	d805      	bhi.n	801051e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8010512:	4b7f      	ldr	r3, [pc, #508]	; (8010710 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010514:	4a7f      	ldr	r2, [pc, #508]	; (8010714 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010516:	21a3      	movs	r1, #163	; 0xa3
 8010518:	487f      	ldr	r0, [pc, #508]	; (8010718 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801051a:	f01d fd01 	bl	802df20 <__assert_func>
 801051e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	685a      	ldr	r2, [r3, #4]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3320      	adds	r3, #32
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4610      	mov	r0, r2
 8010530:	4798      	blx	r3
 8010532:	4603      	mov	r3, r0
 8010534:	2b0f      	cmp	r3, #15
 8010536:	d805      	bhi.n	8010544 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010538:	4b78      	ldr	r3, [pc, #480]	; (801071c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801053a:	4a76      	ldr	r2, [pc, #472]	; (8010714 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801053c:	21a4      	movs	r1, #164	; 0xa4
 801053e:	4876      	ldr	r0, [pc, #472]	; (8010718 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010540:	f01d fcee 	bl	802df20 <__assert_func>
 8010544:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	68da      	ldr	r2, [r3, #12]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	3320      	adds	r3, #32
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4610      	mov	r0, r2
 8010556:	4798      	blx	r3
 8010558:	4603      	mov	r3, r0
 801055a:	2b0b      	cmp	r3, #11
 801055c:	d805      	bhi.n	801056a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801055e:	4b70      	ldr	r3, [pc, #448]	; (8010720 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8010560:	4a6c      	ldr	r2, [pc, #432]	; (8010714 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010562:	21a5      	movs	r1, #165	; 0xa5
 8010564:	486c      	ldr	r0, [pc, #432]	; (8010718 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010566:	f01d fcdb 	bl	802df20 <__assert_func>
 801056a:	bf00      	nop
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	627b      	str	r3, [r7, #36]	; 0x24
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010578:	f00b fdb4 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 801057c:	4603      	mov	r3, r0
 801057e:	4618      	mov	r0, r3
 8010580:	f00b fdfe 	bl	801c180 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d008      	beq.n	801059e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	6a3b      	ldr	r3, [r7, #32]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	330c      	adds	r3, #12
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4610      	mov	r0, r2
 801059c:	4798      	blx	r3
    if (*currentTrans)
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d007      	beq.n	80105b6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80105a6:	6a3b      	ldr	r3, [r7, #32]
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4610      	mov	r0, r2
 80105b4:	4798      	blx	r3
    if (*currentScreen)
 80105b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d008      	beq.n	80105d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80105be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	3314      	adds	r3, #20
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4610      	mov	r0, r2
 80105ce:	4798      	blx	r3
    if (*currentPresenter)
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d008      	beq.n	80105ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80105d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3304      	adds	r3, #4
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4610      	mov	r0, r2
 80105e8:	4798      	blx	r3
    if (*currentScreen)
 80105ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d007      	beq.n	8010602 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80105f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4610      	mov	r0, r2
 8010600:	4798      	blx	r3
    if (*currentPresenter)
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d008      	beq.n	801061c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3308      	adds	r3, #8
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4610      	mov	r0, r2
 801061a:	4798      	blx	r3
}
 801061c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	2100      	movs	r1, #0
 8010624:	4618      	mov	r0, r3
 8010626:	f000 f87d 	bl	8010724 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801062a:	4603      	mov	r3, r0
 801062c:	4619      	mov	r1, r3
 801062e:	200c      	movs	r0, #12
 8010630:	f7ff fc20 	bl	800fe74 <_ZnwjPv>
 8010634:	4604      	mov	r4, r0
 8010636:	4620      	mov	r0, r4
 8010638:	f7ff ff44 	bl	80104c4 <_ZN8touchgfx12NoTransitionC1Ev>
 801063c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	2100      	movs	r1, #0
 8010644:	4618      	mov	r0, r3
 8010646:	f000 f880 	bl	801074a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801064a:	4603      	mov	r3, r0
 801064c:	4619      	mov	r1, r3
 801064e:	f640 508c 	movw	r0, #3468	; 0xd8c
 8010652:	f7ff fc0f 	bl	800fe74 <_ZnwjPv>
 8010656:	4604      	mov	r4, r0
 8010658:	4620      	mov	r0, r4
 801065a:	f004 f96f 	bl	801493c <_ZN11Screen1ViewC1Ev>
 801065e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	2100      	movs	r1, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f000 f882 	bl	8010770 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801066c:	4603      	mov	r3, r0
 801066e:	4619      	mov	r1, r3
 8010670:	2010      	movs	r0, #16
 8010672:	f7ff fbff 	bl	800fe74 <_ZnwjPv>
 8010676:	4604      	mov	r4, r0
 8010678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801067a:	4620      	mov	r0, r4
 801067c:	f004 f8e2 	bl	8014844 <_ZN16Screen1PresenterC1ER11Screen1View>
 8010680:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010686:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801068c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010692:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	2b00      	cmp	r3, #0
 8010698:	d002      	beq.n	80106a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	3304      	adds	r3, #4
 801069e:	e000      	b.n	80106a2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80106a0:	2300      	movs	r3, #0
 80106a2:	4619      	mov	r1, r3
 80106a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80106a6:	f7ff fda9 	bl	80101fc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80106aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ac:	3304      	adds	r3, #4
 80106ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fe0b 	bl	80102cc <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106ba:	4618      	mov	r0, r3
 80106bc:	f000 f86b 	bl	8010796 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80106c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c2:	61fb      	str	r3, [r7, #28]
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c6:	61bb      	str	r3, [r7, #24]
 80106c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ca:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	330c      	adds	r3, #12
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	69f8      	ldr	r0, [r7, #28]
 80106d6:	4798      	blx	r3
    newPresenter->activate();
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	69b8      	ldr	r0, [r7, #24]
 80106e0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80106e2:	6979      	ldr	r1, [r7, #20]
 80106e4:	69f8      	ldr	r0, [r7, #28]
 80106e6:	f00d f9bb 	bl	801da60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3310      	adds	r3, #16
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6978      	ldr	r0, [r7, #20]
 80106f4:	4798      	blx	r3
    newTransition->invalidate();
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	3314      	adds	r3, #20
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	6978      	ldr	r0, [r7, #20]
 8010700:	4798      	blx	r3
}
 8010702:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010706:	4618      	mov	r0, r3
 8010708:	373c      	adds	r7, #60	; 0x3c
 801070a:	46bd      	mov	sp, r7
 801070c:	bd90      	pop	{r4, r7, pc}
 801070e:	bf00      	nop
 8010710:	0802f1e0 	.word	0x0802f1e0
 8010714:	0802f270 	.word	0x0802f270
 8010718:	0802f374 	.word	0x0802f374
 801071c:	0802f3b8 	.word	0x0802f3b8
 8010720:	0802f45c 	.word	0x0802f45c

08010724 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	460b      	mov	r3, r1
 801072e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	3324      	adds	r3, #36	; 0x24
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	887a      	ldrh	r2, [r7, #2]
 801073a:	4611      	mov	r1, r2
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	4798      	blx	r3
 8010740:	4603      	mov	r3, r0
    }
 8010742:	4618      	mov	r0, r3
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801074a:	b580      	push	{r7, lr}
 801074c:	b082      	sub	sp, #8
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	460b      	mov	r3, r1
 8010754:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	3324      	adds	r3, #36	; 0x24
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	887a      	ldrh	r2, [r7, #2]
 8010760:	4611      	mov	r1, r2
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	4798      	blx	r3
 8010766:	4603      	mov	r3, r0
    }
 8010768:	4618      	mov	r0, r3
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	460b      	mov	r3, r1
 801077a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	3324      	adds	r3, #36	; 0x24
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	887a      	ldrh	r2, [r7, #2]
 8010786:	4611      	mov	r1, r2
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	4798      	blx	r3
 801078c:	4603      	mov	r3, r0
    }
 801078e:	4618      	mov	r0, r3
 8010790:	3708      	adds	r7, #8
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8010796:	b480      	push	{r7}
 8010798:	b083      	sub	sp, #12
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
 801079e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
	...

080107b4 <_ZN8touchgfx12NoTransitionD1Ev>:
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	4a05      	ldr	r2, [pc, #20]	; (80107d4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	601a      	str	r2, [r3, #0]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7ff fc3f 	bl	8010048 <_ZN8touchgfx10TransitionD1Ev>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	0802ff20 	.word	0x0802ff20

080107d8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff ffe7 	bl	80107b4 <_ZN8touchgfx12NoTransitionD1Ev>
 80107e6:	210c      	movs	r1, #12
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f01c fd7a 	bl	802d2e2 <_ZdlPvj>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4618      	mov	r0, r3
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	4a05      	ldr	r2, [pc, #20]	; (8010818 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	601a      	str	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff fbbf 	bl	800ff8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4618      	mov	r0, r3
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	0802ff88 	.word	0x0802ff88

0801081c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7ff ffe7 	bl	80107f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801082a:	2110      	movs	r1, #16
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f01c fd58 	bl	802d2e2 <_ZdlPvj>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	68d2      	ldr	r2, [r2, #12]
 801084c:	1052      	asrs	r2, r2, #1
 801084e:	1899      	adds	r1, r3, r2
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	f003 0301 	and.w	r3, r3, #1
 8010858:	2b00      	cmp	r3, #0
 801085a:	d102      	bne.n	8010862 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	e00a      	b.n	8010878 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	68d2      	ldr	r2, [r2, #12]
 801086a:	1052      	asrs	r2, r2, #1
 801086c:	4413      	add	r3, r2
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	6892      	ldr	r2, [r2, #8]
 8010874:	4413      	add	r3, r2
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4608      	mov	r0, r1
 801087a:	4798      	blx	r3
    }
 801087c:	bf00      	nop
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d010      	beq.n	80108b6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d107      	bne.n	80108ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	f003 0301 	and.w	r3, r3, #1
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80108a8:	2301      	movs	r3, #1
 80108aa:	e000      	b.n	80108ae <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80108ac:	2300      	movs	r3, #0
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d001      	beq.n	80108b6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80108b2:	2301      	movs	r3, #1
 80108b4:	e000      	b.n	80108b8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80108b6:	2300      	movs	r3, #0
    }
 80108b8:	4618      	mov	r0, r3
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
        : color(col)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	601a      	str	r2, [r3, #0]
    {
    }
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80108e2:	b480      	push	{r7}
 80108e4:	b083      	sub	sp, #12
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	801a      	strh	r2, [r3, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	805a      	strh	r2, [r3, #2]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	809a      	strh	r2, [r3, #4]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	80da      	strh	r2, [r3, #6]
    {
    }
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	460b      	mov	r3, r1
 801091a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	887a      	ldrh	r2, [r7, #2]
 8010920:	801a      	strh	r2, [r3, #0]
    {
    }
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010938:	4a14      	ldr	r2, [pc, #80]	; (801098c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3304      	adds	r3, #4
 8010942:	4618      	mov	r0, r3
 8010944:	f7ff ffcd 	bl	80108e2 <_ZN8touchgfx4RectC1Ev>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	330c      	adds	r3, #12
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff ffc8 	bl	80108e2 <_ZN8touchgfx4RectC1Ev>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	615a      	str	r2, [r3, #20]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	619a      	str	r2, [r3, #24]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	61da      	str	r2, [r3, #28]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	841a      	strh	r2, [r3, #32]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2200      	movs	r2, #0
 801096e:	845a      	strh	r2, [r3, #34]	; 0x22
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2201      	movs	r2, #1
 801097c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4618      	mov	r0, r3
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	08031fd8 	.word	0x08031fd8

08010990 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
    {
 8010998:	4a04      	ldr	r2, [pc, #16]	; (80109ac <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	601a      	str	r2, [r3, #0]
    }
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr
 80109ac:	08031fd8 	.word	0x08031fd8

080109b0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
    }
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7ff ffe9 	bl	8010990 <_ZN8touchgfx8DrawableD1Ev>
 80109be:	2128      	movs	r1, #40	; 0x28
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f01c fc8e 	bl	802d2e2 <_ZdlPvj>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80109d8:	2300      	movs	r3, #0
    }
 80109da:	4618      	mov	r0, r3
 80109dc:	370c      	adds	r7, #12
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	60f8      	str	r0, [r7, #12]
 80109ee:	4608      	mov	r0, r1
 80109f0:	4611      	mov	r1, r2
 80109f2:	461a      	mov	r2, r3
 80109f4:	4603      	mov	r3, r0
 80109f6:	817b      	strh	r3, [r7, #10]
 80109f8:	460b      	mov	r3, r1
 80109fa:	813b      	strh	r3, [r7, #8]
 80109fc:	4613      	mov	r3, r2
 80109fe:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010a00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010a04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	f000 f82a 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8010a10:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a18:	4619      	mov	r1, r3
 8010a1a:	68f8      	ldr	r0, [r7, #12]
 8010a1c:	f000 f87e 	bl	8010b1c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8010a20:	bf00      	nop
 8010a22:	3710      	adds	r7, #16
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	460b      	mov	r3, r1
 8010a32:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	887a      	ldrh	r2, [r7, #2]
 8010a38:	809a      	strh	r2, [r3, #4]
    }
 8010a3a:	bf00      	nop
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr

08010a46 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010a46:	b480      	push	{r7}
 8010a48:	b083      	sub	sp, #12
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	460b      	mov	r3, r1
 8010a50:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	887a      	ldrh	r2, [r7, #2]
 8010a56:	80da      	strh	r2, [r3, #6]
    }
 8010a58:	bf00      	nop
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	807b      	strh	r3, [r7, #2]
 8010a70:	4613      	mov	r3, r2
 8010a72:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	332c      	adds	r3, #44	; 0x2c
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010a80:	4611      	mov	r1, r2
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
        setY(y);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	3330      	adds	r3, #48	; 0x30
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010a92:	4611      	mov	r1, r2
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	4798      	blx	r3
    }
 8010a98:	bf00      	nop
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	887a      	ldrh	r2, [r7, #2]
 8010ab0:	811a      	strh	r2, [r3, #8]
    }
 8010ab2:	bf00      	nop
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr

08010abe <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010abe:	b480      	push	{r7}
 8010ac0:	b083      	sub	sp, #12
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	887a      	ldrh	r2, [r7, #2]
 8010ace:	815a      	strh	r2, [r3, #10]
    }
 8010ad0:	bf00      	nop
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
    {
    }
 8010ae4:	bf00      	nop
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
    {
    }
 8010afa:	bf00      	nop
 8010afc:	370c      	adds	r7, #12
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010b06:	b480      	push	{r7}
 8010b08:	b083      	sub	sp, #12
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	6039      	str	r1, [r7, #0]
    {
    }
 8010b10:	bf00      	nop
 8010b12:	370c      	adds	r7, #12
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr

08010b1c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	460b      	mov	r3, r1
 8010b26:	807b      	strh	r3, [r7, #2]
 8010b28:	4613      	mov	r3, r2
 8010b2a:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3334      	adds	r3, #52	; 0x34
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010b38:	4611      	mov	r1, r2
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	4798      	blx	r3
        setHeight(height);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3338      	adds	r3, #56	; 0x38
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	4798      	blx	r3
    }
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	6039      	str	r1, [r7, #0]
    {
    }
 8010b62:	bf00      	nop
 8010b64:	370c      	adds	r7, #12
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr

08010b6e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010b6e:	b480      	push	{r7}
 8010b70:	b083      	sub	sp, #12
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
    {
    }
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010b82:	b480      	push	{r7}
 8010b84:	b083      	sub	sp, #12
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010b90:	4618      	mov	r0, r3
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b082      	sub	sp, #8
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	807b      	strh	r3, [r7, #2]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	3350      	adds	r3, #80	; 0x50
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	8879      	ldrh	r1, [r7, #2]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010bd6:	b292      	uxth	r2, r2
 8010bd8:	1a8a      	subs	r2, r1, r2
 8010bda:	b292      	uxth	r2, r2
 8010bdc:	b210      	sxth	r0, r2
 8010bde:	8839      	ldrh	r1, [r7, #0]
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010be6:	b292      	uxth	r2, r2
 8010be8:	1a8a      	subs	r2, r1, r2
 8010bea:	b292      	uxth	r2, r2
 8010bec:	b212      	sxth	r2, r2
 8010bee:	4601      	mov	r1, r0
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	4798      	blx	r3
    }
 8010bf4:	bf00      	nop
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c0a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c12:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c1a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010c1c:	bf00      	nop
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7ff ffe1 	bl	8010bfc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	601a      	str	r2, [r3, #0]
    }
 8010c48:	bf00      	nop
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
    {
 8010c58:	4a06      	ldr	r2, [pc, #24]	; (8010c74 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	601a      	str	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	3304      	adds	r3, #4
 8010c62:	4618      	mov	r0, r3
 8010c64:	f003 f99e 	bl	8013fa4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	080320d0 	.word	0x080320d0

08010c78 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    }
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff ffe5 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8010c86:	213c      	movs	r1, #60	; 0x3c
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f01c fb2a 	bl	802d2e2 <_ZdlPvj>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
    {
    }
 8010ca0:	bf00      	nop
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
    {
    }
 8010cb4:	bf00      	nop
 8010cb6:	370c      	adds	r7, #12
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
    {
    }
 8010cc8:	bf00      	nop
 8010cca:	370c      	adds	r7, #12
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
    {
    }
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010cf4:	bf00      	nop
 8010cf6:	370c      	adds	r7, #12
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f006 fad5 	bl	80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010d16:	bf00      	nop
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b084      	sub	sp, #16
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	607b      	str	r3, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	817b      	strh	r3, [r7, #10]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff ff25 	bl	8010b82 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d008      	beq.n	8010d50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff ff2b 	bl	8010b9c <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d001      	beq.n	8010d50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e000      	b.n	8010d52 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010d50:	2300      	movs	r3, #0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d002      	beq.n	8010d5c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	601a      	str	r2, [r3, #0]
        }
    }
 8010d5c:	bf00      	nop
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7ff fdde 	bl	8010930 <_ZN8touchgfx8DrawableC1Ev>
 8010d74:	4a03      	ldr	r2, [pc, #12]	; (8010d84 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	080300b0 	.word	0x080300b0

08010d88 <_ZN8touchgfx6WidgetD1Ev>:
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	4a05      	ldr	r2, [pc, #20]	; (8010da8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7ff fdf9 	bl	8010990 <_ZN8touchgfx8DrawableD1Ev>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4618      	mov	r0, r3
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	080300b0 	.word	0x080300b0

08010dac <_ZN8touchgfx6WidgetD0Ev>:
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff ffe7 	bl	8010d88 <_ZN8touchgfx6WidgetD1Ev>
 8010dba:	2128      	movs	r1, #40	; 0x28
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f01c fa90 	bl	802d2e2 <_ZdlPvj>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	2326      	movs	r3, #38	; 0x26
 8010dda:	461a      	mov	r2, r3
 8010ddc:	2100      	movs	r1, #0
 8010dde:	f01d fa2d 	bl	802e23c <memset>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7ff ffbd 	bl	8010d64 <_ZN8touchgfx6WidgetC1Ev>
 8010dea:	4a09      	ldr	r2, [pc, #36]	; (8010e10 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	22ff      	movs	r2, #255	; 0xff
 8010df4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3328      	adds	r3, #40	; 0x28
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff fd60 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4618      	mov	r0, r3
 8010e08:	3708      	adds	r7, #8
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	0803198c 	.word	0x0803198c

08010e14 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	683a      	ldr	r2, [r7, #0]
 8010e22:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010e24:	bf00      	nop
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	2326      	movs	r3, #38	; 0x26
 8010e40:	461a      	mov	r2, r3
 8010e42:	2100      	movs	r1, #0
 8010e44:	f01d f9fa 	bl	802e23c <memset>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff ff8a 	bl	8010d64 <_ZN8touchgfx6WidgetC1Ev>
 8010e50:	4a09      	ldr	r2, [pc, #36]	; (8010e78 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	8812      	ldrh	r2, [r2, #0]
 8010e5c:	84da      	strh	r2, [r3, #38]	; 0x26
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	22ff      	movs	r2, #255	; 0xff
 8010e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8010e66:	6839      	ldr	r1, [r7, #0]
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f009 fc33 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4618      	mov	r0, r3
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	08031bfc 	.word	0x08031bfc

08010e7c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	460b      	mov	r3, r1
 8010e86:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8010e88:	4a06      	ldr	r2, [pc, #24]	; (8010ea4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	887a      	ldrh	r2, [r7, #2]
 8010e92:	809a      	strh	r2, [r3, #4]
    }
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4618      	mov	r0, r3
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	0802feb8 	.word	0x0802feb8

08010ea8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	2326      	movs	r3, #38	; 0x26
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	2100      	movs	r1, #0
 8010eba:	f01d f9bf 	bl	802e23c <memset>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff ff4f 	bl	8010d64 <_ZN8touchgfx6WidgetC1Ev>
 8010ec6:	4a14      	ldr	r2, [pc, #80]	; (8010f18 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	3328      	adds	r3, #40	; 0x28
 8010ed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff ffd1 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	3330      	adds	r3, #48	; 0x30
 8010ede:	2100      	movs	r1, #0
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fcef 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	869a      	strh	r2, [r3, #52]	; 0x34
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	22ff      	movs	r2, #255	; 0xff
 8010ef0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3708      	adds	r7, #8
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	080318e4 	.word	0x080318e4

08010f1c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	4a08      	ldr	r2, [pc, #32]	; (8010f48 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	3328      	adds	r3, #40	; 0x28
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fe fe22 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7ff ff26 	bl	8010d88 <_ZN8touchgfx6WidgetD1Ev>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	080318e4 	.word	0x080318e4

08010f4c <_ZN8touchgfx8TextAreaD0Ev>:
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f7ff ffe1 	bl	8010f1c <_ZN8touchgfx8TextAreaD1Ev>
 8010f5a:	213c      	movs	r1, #60	; 0x3c
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f01c f9c0 	bl	802d2e2 <_ZdlPvj>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7ff ff96 	bl	8010ea8 <_ZN8touchgfx8TextAreaC1Ev>
 8010f7c:	4a05      	ldr	r2, [pc, #20]	; (8010f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	601a      	str	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	08031b54 	.word	0x08031b54

08010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010f98:	b480      	push	{r7}
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	4a05      	ldr	r2, [pc, #20]	; (8010fd4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fe43 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	0803007c 	.word	0x0803007c

08010fd8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7ff ffe7 	bl	8010fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010fe6:	2140      	movs	r1, #64	; 0x40
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f01c f97a 	bl	802d2e2 <_ZdlPvj>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	4a78      	ldr	r2, [pc, #480]	; (80111e4 <_ZN15Screen1ViewBaseD1Ev+0x1ec>)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	601a      	str	r2, [r3, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801100c:	4618      	mov	r0, r3
 801100e:	f003 f80d 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011018:	4618      	mov	r0, r3
 801101a:	f003 f8dd 	bl	80141d8 <_ZN8touchgfx5GaugeD1Ev>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8011024:	4618      	mov	r0, r3
 8011026:	f003 f823 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011030:	4618      	mov	r0, r3
 8011032:	f003 f81d 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801103c:	4618      	mov	r0, r3
 801103e:	f003 f817 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8011048:	4618      	mov	r0, r3
 801104a:	f003 f811 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8011054:	4618      	mov	r0, r3
 8011056:	f003 f80b 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8011060:	4618      	mov	r0, r3
 8011062:	f003 f805 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 801106c:	4618      	mov	r0, r3
 801106e:	f002 ffff 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8011078:	4618      	mov	r0, r3
 801107a:	f002 fff9 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8011084:	4618      	mov	r0, r3
 8011086:	f002 fff3 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8011090:	4618      	mov	r0, r3
 8011092:	f002 ffed 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 801109c:	4618      	mov	r0, r3
 801109e:	f002 ffe7 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80110a8:	4618      	mov	r0, r3
 80110aa:	f002 ffe1 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80110b4:	4618      	mov	r0, r3
 80110b6:	f002 ffdb 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80110c0:	4618      	mov	r0, r3
 80110c2:	f002 ffd5 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80110cc:	4618      	mov	r0, r3
 80110ce:	f002 ffcf 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80110d8:	4618      	mov	r0, r3
 80110da:	f002 ffc9 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80110e4:	4618      	mov	r0, r3
 80110e6:	f002 ffc3 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80110f0:	4618      	mov	r0, r3
 80110f2:	f002 ffbd 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80110fc:	4618      	mov	r0, r3
 80110fe:	f002 ffb7 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011108:	4618      	mov	r0, r3
 801110a:	f002 ffb1 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011114:	4618      	mov	r0, r3
 8011116:	f002 ffab 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011120:	4618      	mov	r0, r3
 8011122:	f002 ffa5 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801112c:	4618      	mov	r0, r3
 801112e:	f002 ff9f 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011138:	4618      	mov	r0, r3
 801113a:	f002 ff99 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011144:	4618      	mov	r0, r3
 8011146:	f002 ff71 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011150:	4618      	mov	r0, r3
 8011152:	f002 ff6b 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801115c:	4618      	mov	r0, r3
 801115e:	f002 ff65 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011168:	4618      	mov	r0, r3
 801116a:	f002 ff5f 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011174:	4618      	mov	r0, r3
 8011176:	f002 ff59 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011180:	4618      	mov	r0, r3
 8011182:	f002 ff53 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801118c:	4618      	mov	r0, r3
 801118e:	f002 ff4d 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011198:	4618      	mov	r0, r3
 801119a:	f002 ff47 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	33f0      	adds	r3, #240	; 0xf0
 80111a2:	4618      	mov	r0, r3
 80111a4:	f002 ff42 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	33c4      	adds	r3, #196	; 0xc4
 80111ac:	4618      	mov	r0, r3
 80111ae:	f002 ff3d 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3398      	adds	r3, #152	; 0x98
 80111b6:	4618      	mov	r0, r3
 80111b8:	f002 ff38 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	336c      	adds	r3, #108	; 0x6c
 80111c0:	4618      	mov	r0, r3
 80111c2:	f002 ff11 	bl	8013fe8 <_ZN8touchgfx3BoxD1Ev>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	3340      	adds	r3, #64	; 0x40
 80111ca:	4618      	mov	r0, r3
 80111cc:	f002 ff0c 	bl	8013fe8 <_ZN8touchgfx3BoxD1Ev>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff feee 	bl	8010fb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	08030048 	.word	0x08030048

080111e8 <_ZN15Screen1ViewBaseD0Ev>:
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7ff ff01 	bl	8010ff8 <_ZN15Screen1ViewBaseD1Ev>
 80111f6:	f640 518c 	movw	r1, #3468	; 0xd8c
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f01c f871 	bl	802d2e2 <_ZdlPvj>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	4618      	mov	r0, r3
 8011204:	3708      	adds	r7, #8
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
	...

0801120c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 801120c:	b590      	push	{r4, r7, lr}
 801120e:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8011212:	af02      	add	r7, sp, #8
 8011214:	1d3b      	adds	r3, r7, #4
 8011216:	6018      	str	r0, [r3, #0]
 8011218:	1d3b      	adds	r3, r7, #4
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4618      	mov	r0, r3
 801121e:	f002 feab 	bl	8013f78 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8011222:	4ae5      	ldr	r2, [pc, #916]	; (80115b8 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 8011224:	1d3b      	adds	r3, r7, #4
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	1d3b      	adds	r3, r7, #4
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	3340      	adds	r3, #64	; 0x40
 8011230:	4618      	mov	r0, r3
 8011232:	f7ff fdcb 	bl	8010dcc <_ZN8touchgfx3BoxC1Ev>
 8011236:	1d3b      	adds	r3, r7, #4
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	336c      	adds	r3, #108	; 0x6c
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff fdc5 	bl	8010dcc <_ZN8touchgfx3BoxC1Ev>
 8011242:	1d3b      	adds	r3, r7, #4
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f103 0498 	add.w	r4, r3, #152	; 0x98
 801124a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801124e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff fb5c 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011258:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801125c:	4619      	mov	r1, r3
 801125e:	4620      	mov	r0, r4
 8011260:	f7ff fde6 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011264:	1d3b      	adds	r3, r7, #4
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 801126c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011274:	4618      	mov	r0, r3
 8011276:	f7ff fb4b 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801127a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801127e:	4619      	mov	r1, r3
 8011280:	4620      	mov	r0, r4
 8011282:	f7ff fdd5 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011286:	1d3b      	adds	r3, r7, #4
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 801128e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011292:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff fb3a 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801129c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80112a0:	4619      	mov	r1, r3
 80112a2:	4620      	mov	r0, r4
 80112a4:	f7ff fdc4 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112a8:	1d3b      	adds	r3, r7, #4
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80112b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80112b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7ff fb29 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80112be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80112c2:	4619      	mov	r1, r3
 80112c4:	4620      	mov	r0, r4
 80112c6:	f7ff fdb3 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112ca:	1d3b      	adds	r3, r7, #4
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80112d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80112d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff fb18 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80112e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80112e4:	4619      	mov	r1, r3
 80112e6:	4620      	mov	r0, r4
 80112e8:	f7ff fda2 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112ec:	1d3b      	adds	r3, r7, #4
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80112f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80112f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7ff fb07 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011302:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011306:	4619      	mov	r1, r3
 8011308:	4620      	mov	r0, r4
 801130a:	f7ff fd91 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801130e:	1d3b      	adds	r3, r7, #4
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8011316:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801131a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801131e:	4618      	mov	r0, r3
 8011320:	f7ff faf6 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011324:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011328:	4619      	mov	r1, r3
 801132a:	4620      	mov	r0, r4
 801132c:	f7ff fd80 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011330:	1d3b      	adds	r3, r7, #4
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8011338:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801133c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff fae5 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011346:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801134a:	4619      	mov	r1, r3
 801134c:	4620      	mov	r0, r4
 801134e:	f7ff fd6f 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011352:	1d3b      	adds	r3, r7, #4
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 801135a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801135e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011362:	4618      	mov	r0, r3
 8011364:	f7ff fad4 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011368:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801136c:	4619      	mov	r1, r3
 801136e:	4620      	mov	r0, r4
 8011370:	f7ff fd5e 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011374:	1d3b      	adds	r3, r7, #4
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f503 7409 	add.w	r4, r3, #548	; 0x224
 801137c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011384:	4618      	mov	r0, r3
 8011386:	f7ff fac3 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801138a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801138e:	4619      	mov	r1, r3
 8011390:	4620      	mov	r0, r4
 8011392:	f7ff fd4d 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011396:	1d3b      	adds	r3, r7, #4
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f503 7414 	add.w	r4, r3, #592	; 0x250
 801139e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80113a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fab2 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80113ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80113b0:	4619      	mov	r1, r3
 80113b2:	4620      	mov	r0, r4
 80113b4:	f7ff fd3c 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80113b8:	1d3b      	adds	r3, r7, #4
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7ff fdd3 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113c6:	1d3b      	adds	r3, r7, #4
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff fdcc 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113d4:	1d3b      	adds	r3, r7, #4
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff fdc5 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113e2:	1d3b      	adds	r3, r7, #4
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff fdbe 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113f0:	1d3b      	adds	r3, r7, #4
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff fdb7 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113fe:	1d3b      	adds	r3, r7, #4
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011406:	4618      	mov	r0, r3
 8011408:	f7ff fdb0 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801140c:	1d3b      	adds	r3, r7, #4
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011414:	4618      	mov	r0, r3
 8011416:	f7ff fda9 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801141a:	1d3b      	adds	r3, r7, #4
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011422:	4618      	mov	r0, r3
 8011424:	f7ff fda2 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011428:	1d3b      	adds	r3, r7, #4
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff fd9b 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011436:	1d3b      	adds	r3, r7, #4
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801143e:	4618      	mov	r0, r3
 8011440:	f7ff fd94 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011444:	1d3b      	adds	r3, r7, #4
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801144c:	4618      	mov	r0, r3
 801144e:	f7ff fd8d 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011452:	1d3b      	adds	r3, r7, #4
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801145a:	4618      	mov	r0, r3
 801145c:	f7ff fd86 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011460:	1d3b      	adds	r3, r7, #4
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fd7f 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801146e:	1d3b      	adds	r3, r7, #4
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8011476:	4618      	mov	r0, r3
 8011478:	f7ff fd78 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801147c:	1d3b      	adds	r3, r7, #4
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff fd71 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801148a:	1d3b      	adds	r3, r7, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff fd6a 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011498:	1d3b      	adds	r3, r7, #4
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7ff fd63 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114a6:	1d3b      	adds	r3, r7, #4
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7ff fd5c 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114b4:	1d3b      	adds	r3, r7, #4
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80114bc:	4618      	mov	r0, r3
 80114be:	f7ff fd55 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114c2:	1d3b      	adds	r3, r7, #4
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7ff fd4e 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114d0:	1d3b      	adds	r3, r7, #4
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80114d8:	4618      	mov	r0, r3
 80114da:	f7ff fd47 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114de:	1d3b      	adds	r3, r7, #4
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7ff fd40 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114ec:	1d3b      	adds	r3, r7, #4
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff fd39 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114fa:	1d3b      	adds	r3, r7, #4
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8011502:	4618      	mov	r0, r3
 8011504:	f7ff fd32 	bl	8010f6c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011508:	1d3b      	adds	r3, r7, #4
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011510:	4618      	mov	r0, r3
 8011512:	f008 fe97 	bl	801a244 <_ZN8touchgfx5GaugeC1Ev>
 8011516:	1d3b      	adds	r3, r7, #4
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 801151e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011522:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff f9f2 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801152c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011530:	4619      	mov	r1, r3
 8011532:	4620      	mov	r0, r4
 8011534:	f7ff fc7c 	bl	8010e30 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    __background.setPosition(0, 0, 1024, 600);
 8011538:	1d3b      	adds	r3, r7, #4
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011540:	f44f 7316 	mov.w	r3, #600	; 0x258
 8011544:	9300      	str	r3, [sp, #0]
 8011546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801154a:	2200      	movs	r2, #0
 801154c:	2100      	movs	r1, #0
 801154e:	f7ff fa4a 	bl	80109e6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011552:	1d3b      	adds	r3, r7, #4
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801155a:	f207 23b5 	addw	r3, r7, #693	; 0x2b5
 801155e:	2200      	movs	r2, #0
 8011560:	701a      	strb	r2, [r3, #0]
 8011562:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8011566:	2200      	movs	r2, #0
 8011568:	701a      	strb	r2, [r3, #0]
 801156a:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 801156e:	2200      	movs	r2, #0
 8011570:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8011572:	f207 23b5 	addw	r3, r7, #693	; 0x2b5
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	041b      	lsls	r3, r3, #16
 801157a:	461a      	mov	r2, r3
 801157c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	021b      	lsls	r3, r3, #8
 8011584:	431a      	orrs	r2, r3
 8011586:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	4313      	orrs	r3, r2
 801158e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011592:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8011596:	4611      	mov	r1, r2
 8011598:	4618      	mov	r0, r3
 801159a:	f7ff f993 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 801159e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4619      	mov	r1, r3
 80115a6:	4620      	mov	r0, r4
 80115a8:	f7ff fc34 	bl	8010e14 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(1, 0, 1024, 600);
 80115ac:	1d3b      	adds	r3, r7, #4
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80115b4:	e002      	b.n	80115bc <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 80115b6:	bf00      	nop
 80115b8:	08030048 	.word	0x08030048
 80115bc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80115c0:	9300      	str	r3, [sp, #0]
 80115c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115c6:	2200      	movs	r2, #0
 80115c8:	2101      	movs	r1, #1
 80115ca:	f7ff fa0c 	bl	80109e6 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80115ce:	1d3b      	adds	r3, r7, #4
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80115d6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80115da:	2200      	movs	r2, #0
 80115dc:	701a      	strb	r2, [r3, #0]
 80115de:	f207 23b7 	addw	r3, r7, #695	; 0x2b7
 80115e2:	2200      	movs	r2, #0
 80115e4:	701a      	strb	r2, [r3, #0]
 80115e6:	f207 23b6 	addw	r3, r7, #694	; 0x2b6
 80115ea:	2200      	movs	r2, #0
 80115ec:	701a      	strb	r2, [r3, #0]
 80115ee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	041b      	lsls	r3, r3, #16
 80115f6:	461a      	mov	r2, r3
 80115f8:	f207 23b7 	addw	r3, r7, #695	; 0x2b7
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	021b      	lsls	r3, r3, #8
 8011600:	431a      	orrs	r2, r3
 8011602:	f207 23b6 	addw	r3, r7, #694	; 0x2b6
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	4313      	orrs	r3, r2
 801160a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801160e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8011612:	4611      	mov	r1, r2
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff f955 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 801161a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4619      	mov	r1, r3
 8011622:	4620      	mov	r0, r4
 8011624:	f7ff fbf6 	bl	8010e14 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, -7);
 8011628:	1d3b      	adds	r3, r7, #4
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	3398      	adds	r3, #152	; 0x98
 801162e:	f06f 0206 	mvn.w	r2, #6
 8011632:	2100      	movs	r1, #0
 8011634:	4618      	mov	r0, r3
 8011636:	f7ff fa15 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RACE_DASH_ID));
 801163a:	1d3b      	adds	r3, r7, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8011642:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011646:	210f      	movs	r1, #15
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff f961 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801164e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011652:	4619      	mov	r1, r3
 8011654:	4620      	mov	r0, r4
 8011656:	f009 f83d 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLeft.setXY(263, 31);
 801165a:	1d3b      	adds	r3, r7, #4
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	33c4      	adds	r3, #196	; 0xc4
 8011660:	221f      	movs	r2, #31
 8011662:	f240 1107 	movw	r1, #263	; 0x107
 8011666:	4618      	mov	r0, r3
 8011668:	f7ff f9fc 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indLeft.setBitmap(touchgfx::Bitmap(BITMAP_INDLEFT_ID));
 801166c:	1d3b      	adds	r3, r7, #4
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8011674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011678:	2109      	movs	r1, #9
 801167a:	4618      	mov	r0, r3
 801167c:	f7ff f948 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011680:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011684:	4619      	mov	r1, r3
 8011686:	4620      	mov	r0, r4
 8011688:	f009 f824 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indRight.setXY(725, 31);
 801168c:	1d3b      	adds	r3, r7, #4
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	33f0      	adds	r3, #240	; 0xf0
 8011692:	221f      	movs	r2, #31
 8011694:	f240 21d5 	movw	r1, #725	; 0x2d5
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff f9e3 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indRight.setBitmap(touchgfx::Bitmap(BITMAP_INDRIGHT_ID));
 801169e:	1d3b      	adds	r3, r7, #4
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80116a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80116aa:	210d      	movs	r1, #13
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff f92f 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80116b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80116b6:	4619      	mov	r1, r3
 80116b8:	4620      	mov	r0, r4
 80116ba:	f009 f80b 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indHigh.setXY(394, 284);
 80116be:	1d3b      	adds	r3, r7, #4
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80116c6:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80116ca:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7ff f9c8 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indHigh.setBitmap(touchgfx::Bitmap(BITMAP_INDHIGH_ID));
 80116d4:	1d3b      	adds	r3, r7, #4
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80116dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80116e0:	2108      	movs	r1, #8
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff f914 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80116e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80116ec:	4619      	mov	r1, r3
 80116ee:	4620      	mov	r0, r4
 80116f0:	f008 fff0 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indFuel.setXY(563, 212);
 80116f4:	1d3b      	adds	r3, r7, #4
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80116fc:	22d4      	movs	r2, #212	; 0xd4
 80116fe:	f240 2133 	movw	r1, #563	; 0x233
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff f9ae 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_INDFUEL_ID));
 8011708:	1d3b      	adds	r3, r7, #4
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 8011710:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011714:	2107      	movs	r1, #7
 8011716:	4618      	mov	r0, r3
 8011718:	f7ff f8fa 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801171c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011720:	4619      	mov	r1, r3
 8011722:	4620      	mov	r0, r4
 8011724:	f008 ffd6 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indOil.setXY(410, 343);
 8011728:	1d3b      	adds	r3, r7, #4
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011730:	f240 1257 	movw	r2, #343	; 0x157
 8011734:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8011738:	4618      	mov	r0, r3
 801173a:	f7ff f993 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_INDOIL_ID));
 801173e:	1d3b      	adds	r3, r7, #4
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801174a:	210b      	movs	r1, #11
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff f8df 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011752:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011756:	4619      	mov	r1, r3
 8011758:	4620      	mov	r0, r4
 801175a:	f008 ffbb 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indBatt.setXY(425, 214);
 801175e:	1d3b      	adds	r3, r7, #4
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011766:	22d6      	movs	r2, #214	; 0xd6
 8011768:	f240 11a9 	movw	r1, #425	; 0x1a9
 801176c:	4618      	mov	r0, r3
 801176e:	f7ff f979 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_INDBATT_ID));
 8011772:	1d3b      	adds	r3, r7, #4
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 801177a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801177e:	2104      	movs	r1, #4
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff f8c5 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011786:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801178a:	4619      	mov	r1, r3
 801178c:	4620      	mov	r0, r4
 801178e:	f008 ffa1 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indPark.setXY(496, 185);
 8011792:	1d3b      	adds	r3, r7, #4
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801179a:	22b9      	movs	r2, #185	; 0xb9
 801179c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7ff f95f 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indPark.setBitmap(touchgfx::Bitmap(BITMAP_INDPARK_ID));
 80117a6:	1d3b      	adds	r3, r7, #4
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80117ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80117b2:	210c      	movs	r1, #12
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ff f8ab 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80117ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80117be:	4619      	mov	r1, r3
 80117c0:	4620      	mov	r0, r4
 80117c2:	f008 ff87 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indDTC.setXY(495, 231);
 80117c6:	1d3b      	adds	r3, r7, #4
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80117ce:	22e7      	movs	r2, #231	; 0xe7
 80117d0:	f240 11ef 	movw	r1, #495	; 0x1ef
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7ff f945 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_INDDTC_ID));
 80117da:	1d3b      	adds	r3, r7, #4
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80117e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80117e6:	2105      	movs	r1, #5
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7ff f891 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 80117ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80117f2:	4619      	mov	r1, r3
 80117f4:	4620      	mov	r0, r4
 80117f6:	f008 ff6d 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indECT.setXY(451, 376);
 80117fa:	1d3b      	adds	r3, r7, #4
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011802:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8011806:	f240 11c3 	movw	r1, #451	; 0x1c3
 801180a:	4618      	mov	r0, r3
 801180c:	f7ff f92a 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_INDECT_ID));
 8011810:	1d3b      	adds	r3, r7, #4
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8011818:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801181c:	2106      	movs	r1, #6
 801181e:	4618      	mov	r0, r3
 8011820:	f7ff f876 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8011824:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011828:	4619      	mov	r1, r3
 801182a:	4620      	mov	r0, r4
 801182c:	f008 ff52 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLow.setXY(452, 286);
 8011830:	1d3b      	adds	r3, r7, #4
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011838:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801183c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8011840:	4618      	mov	r0, r3
 8011842:	f7ff f90f 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    indLow.setBitmap(touchgfx::Bitmap(BITMAP_INDLOW_ID));
 8011846:	1d3b      	adds	r3, r7, #4
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f503 7414 	add.w	r4, r3, #592	; 0x250
 801184e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011852:	210a      	movs	r1, #10
 8011854:	4618      	mov	r0, r3
 8011856:	f7ff f85b 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 801185a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801185e:	4619      	mov	r1, r3
 8011860:	4620      	mov	r0, r4
 8011862:	f008 ff37 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    map_value.setXY(940, -2);
 8011866:	1d3b      	adds	r3, r7, #4
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801186e:	f06f 0201 	mvn.w	r2, #1
 8011872:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8011876:	4618      	mov	r0, r3
 8011878:	f7ff f8f4 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    map_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801187c:	1d3b      	adds	r3, r7, #4
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8011884:	f207 23bb 	addw	r3, r7, #699	; 0x2bb
 8011888:	22ff      	movs	r2, #255	; 0xff
 801188a:	701a      	strb	r2, [r3, #0]
 801188c:	f207 23ba 	addw	r3, r7, #698	; 0x2ba
 8011890:	22ff      	movs	r2, #255	; 0xff
 8011892:	701a      	strb	r2, [r3, #0]
 8011894:	f207 23b9 	addw	r3, r7, #697	; 0x2b9
 8011898:	22ff      	movs	r2, #255	; 0xff
 801189a:	701a      	strb	r2, [r3, #0]
 801189c:	f207 23bb 	addw	r3, r7, #699	; 0x2bb
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	041b      	lsls	r3, r3, #16
 80118a4:	461a      	mov	r2, r3
 80118a6:	f207 23ba 	addw	r3, r7, #698	; 0x2ba
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	021b      	lsls	r3, r3, #8
 80118ae:	431a      	orrs	r2, r3
 80118b0:	f207 23b9 	addw	r3, r7, #697	; 0x2b9
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80118bc:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80118c0:	4611      	mov	r1, r2
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fe fffe 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80118c8:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	461a      	mov	r2, r3
 80118d0:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80118d4:	601c      	str	r4, [r3, #0]
 80118d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80118da:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80118dc:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80118e6:	6812      	ldr	r2, [r2, #0]
 80118e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80118ea:	bf00      	nop
    map_value.setLinespacing(0);
 80118ec:	1d3b      	adds	r3, r7, #4
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 80118f4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80118f8:	601a      	str	r2, [r3, #0]
 80118fa:	f207 23c2 	addw	r3, r7, #706	; 0x2c2
 80118fe:	2200      	movs	r2, #0
 8011900:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8011902:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f207 22c2 	addw	r2, r7, #706	; 0x2c2
 801190c:	8812      	ldrh	r2, [r2, #0]
 801190e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011910:	bf00      	nop
    Unicode::snprintf(map_valueBuffer, MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1H44).getText());
 8011912:	1d3b      	adds	r3, r7, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f603 244c 	addw	r4, r3, #2636	; 0xa4c
 801191a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801191e:	2118      	movs	r1, #24
 8011920:	4618      	mov	r0, r3
 8011922:	f7ff faab 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011926:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801192a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801192e:	601a      	str	r2, [r3, #0]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011930:	4bc5      	ldr	r3, [pc, #788]	; (8011c48 <_ZN15Screen1ViewBaseC1Ev+0xa3c>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d105      	bne.n	8011944 <_ZN15Screen1ViewBaseC1Ev+0x738>
 8011938:	4bc4      	ldr	r3, [pc, #784]	; (8011c4c <_ZN15Screen1ViewBaseC1Ev+0xa40>)
 801193a:	4ac5      	ldr	r2, [pc, #788]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 801193c:	21ae      	movs	r1, #174	; 0xae
 801193e:	48c5      	ldr	r0, [pc, #788]	; (8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011940:	f01c faee 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011944:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	889a      	ldrh	r2, [r3, #4]
 801194c:	4bc2      	ldr	r3, [pc, #776]	; (8011c58 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	429a      	cmp	r2, r3
 8011952:	d305      	bcc.n	8011960 <_ZN15Screen1ViewBaseC1Ev+0x754>
 8011954:	4bc1      	ldr	r3, [pc, #772]	; (8011c5c <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011956:	4abe      	ldr	r2, [pc, #760]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011958:	21af      	movs	r1, #175	; 0xaf
 801195a:	48be      	ldr	r0, [pc, #760]	; (8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 801195c:	f01c fae0 	bl	802df20 <__assert_func>
    }
 8011960:	bf00      	nop
        return texts->getText(typedTextId);
 8011962:	4bbf      	ldr	r3, [pc, #764]	; (8011c60 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801196a:	889b      	ldrh	r3, [r3, #4]
 801196c:	4619      	mov	r1, r3
 801196e:	4610      	mov	r0, r2
 8011970:	f002 fe06 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8011974:	4603      	mov	r3, r0
 8011976:	bf00      	nop
 8011978:	4aba      	ldr	r2, [pc, #744]	; (8011c64 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 801197a:	2120      	movs	r1, #32
 801197c:	4620      	mov	r0, r4
 801197e:	f00d fd1b 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011982:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011986:	4618      	mov	r0, r3
 8011988:	f7fe f8f6 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    map_value.setWildcard(map_valueBuffer);
 801198c:	1d3b      	adds	r3, r7, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8011994:	1d3b      	adds	r3, r7, #4
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 801199c:	4619      	mov	r1, r3
 801199e:	4610      	mov	r0, r2
 80119a0:	f7ff fafa 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_value.resizeToCurrentText();
 80119a4:	1d3b      	adds	r3, r7, #4
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80119ac:	4618      	mov	r0, r3
 80119ae:	f008 fb37 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LQYM));
 80119b2:	1d3b      	adds	r3, r7, #4
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 80119ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80119be:	2116      	movs	r1, #22
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff fa5b 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80119c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80119ca:	4619      	mov	r1, r3
 80119cc:	4620      	mov	r0, r4
 80119ce:	f008 fb44 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80119d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fe f8ce 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    map_label.setXY(889, 99);
 80119dc:	1d3b      	adds	r3, r7, #4
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80119e4:	2263      	movs	r2, #99	; 0x63
 80119e6:	f240 3179 	movw	r1, #889	; 0x379
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff f83a 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    map_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80119f0:	1d3b      	adds	r3, r7, #4
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80119f8:	f207 23cf 	addw	r3, r7, #719	; 0x2cf
 80119fc:	22ff      	movs	r2, #255	; 0xff
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 8011a04:	22ff      	movs	r2, #255	; 0xff
 8011a06:	701a      	strb	r2, [r3, #0]
 8011a08:	f207 23cd 	addw	r3, r7, #717	; 0x2cd
 8011a0c:	22ff      	movs	r2, #255	; 0xff
 8011a0e:	701a      	strb	r2, [r3, #0]
 8011a10:	f207 23cf 	addw	r3, r7, #719	; 0x2cf
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	041b      	lsls	r3, r3, #16
 8011a18:	461a      	mov	r2, r3
 8011a1a:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	021b      	lsls	r3, r3, #8
 8011a22:	431a      	orrs	r2, r3
 8011a24:	f207 23cd 	addw	r3, r7, #717	; 0x2cd
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011a30:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8011a34:	4611      	mov	r1, r2
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe ff44 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8011a3c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	461a      	mov	r2, r3
 8011a44:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011a48:	601c      	str	r4, [r3, #0]
 8011a4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a4e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011a50:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011a5a:	6812      	ldr	r2, [r2, #0]
 8011a5c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011a5e:	bf00      	nop
    map_label.setLinespacing(0);
 8011a60:	1d3b      	adds	r3, r7, #4
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011a68:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	f207 23d6 	addw	r3, r7, #726	; 0x2d6
 8011a72:	2200      	movs	r2, #0
 8011a74:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011a76:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f207 22d6 	addw	r2, r7, #726	; 0x2d6
 8011a80:	8812      	ldrh	r2, [r2, #0]
 8011a82:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011a84:	bf00      	nop
    Unicode::snprintf(map_labelBuffer, MAP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FXL2).getText());
 8011a86:	1d3b      	adds	r3, r7, #4
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8011a8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011a92:	2119      	movs	r1, #25
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff f9f1 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011a9a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8011a9e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8011aa2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011aa4:	4b68      	ldr	r3, [pc, #416]	; (8011c48 <_ZN15Screen1ViewBaseC1Ev+0xa3c>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d105      	bne.n	8011ab8 <_ZN15Screen1ViewBaseC1Ev+0x8ac>
 8011aac:	4b67      	ldr	r3, [pc, #412]	; (8011c4c <_ZN15Screen1ViewBaseC1Ev+0xa40>)
 8011aae:	4a68      	ldr	r2, [pc, #416]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011ab0:	21ae      	movs	r1, #174	; 0xae
 8011ab2:	4868      	ldr	r0, [pc, #416]	; (8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011ab4:	f01c fa34 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011ab8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	889a      	ldrh	r2, [r3, #4]
 8011ac0:	4b65      	ldr	r3, [pc, #404]	; (8011c58 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d305      	bcc.n	8011ad4 <_ZN15Screen1ViewBaseC1Ev+0x8c8>
 8011ac8:	4b64      	ldr	r3, [pc, #400]	; (8011c5c <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011aca:	4a61      	ldr	r2, [pc, #388]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011acc:	21af      	movs	r1, #175	; 0xaf
 8011ace:	4861      	ldr	r0, [pc, #388]	; (8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011ad0:	f01c fa26 	bl	802df20 <__assert_func>
    }
 8011ad4:	bf00      	nop
        return texts->getText(typedTextId);
 8011ad6:	4b62      	ldr	r3, [pc, #392]	; (8011c60 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011ade:	889b      	ldrh	r3, [r3, #4]
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	4610      	mov	r0, r2
 8011ae4:	f002 fd4c 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	bf00      	nop
 8011aec:	4a5d      	ldr	r2, [pc, #372]	; (8011c64 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 8011aee:	210a      	movs	r1, #10
 8011af0:	4620      	mov	r0, r4
 8011af2:	f00d fc61 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011af6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fe f83c 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    map_label.setWildcard(map_labelBuffer);
 8011b00:	1d3b      	adds	r3, r7, #4
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011b08:	1d3b      	adds	r3, r7, #4
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8011b10:	4619      	mov	r1, r3
 8011b12:	4610      	mov	r0, r2
 8011b14:	f7ff fa40 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_label.resizeToCurrentText();
 8011b18:	1d3b      	adds	r3, r7, #4
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011b20:	4618      	mov	r0, r3
 8011b22:	f008 fa7d 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W2NZ));
 8011b26:	1d3b      	adds	r3, r7, #4
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011b2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011b32:	2114      	movs	r1, #20
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7ff f9a1 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011b3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011b3e:	4619      	mov	r1, r3
 8011b40:	4620      	mov	r0, r4
 8011b42:	f008 fa8a 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011b46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe f814 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    map_units.setXY(779, 99);
 8011b50:	1d3b      	adds	r3, r7, #4
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011b58:	2263      	movs	r2, #99	; 0x63
 8011b5a:	f240 310b 	movw	r1, #779	; 0x30b
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fe ff80 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    map_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011b64:	1d3b      	adds	r3, r7, #4
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011b6c:	f207 23e3 	addw	r3, r7, #739	; 0x2e3
 8011b70:	22ff      	movs	r2, #255	; 0xff
 8011b72:	701a      	strb	r2, [r3, #0]
 8011b74:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 8011b78:	22ff      	movs	r2, #255	; 0xff
 8011b7a:	701a      	strb	r2, [r3, #0]
 8011b7c:	f207 23e1 	addw	r3, r7, #737	; 0x2e1
 8011b80:	22ff      	movs	r2, #255	; 0xff
 8011b82:	701a      	strb	r2, [r3, #0]
 8011b84:	f207 23e3 	addw	r3, r7, #739	; 0x2e3
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	041b      	lsls	r3, r3, #16
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	021b      	lsls	r3, r3, #8
 8011b96:	431a      	orrs	r2, r3
 8011b98:	f207 23e1 	addw	r3, r7, #737	; 0x2e1
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011ba4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8011ba8:	4611      	mov	r1, r2
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fe fe8a 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8011bb0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8011bbc:	601c      	str	r4, [r3, #0]
 8011bbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011bc2:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011bc4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011bce:	6812      	ldr	r2, [r2, #0]
 8011bd0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011bd2:	bf00      	nop
    map_units.setLinespacing(0);
 8011bd4:	1d3b      	adds	r3, r7, #4
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011bdc:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	f207 23ea 	addw	r3, r7, #746	; 0x2ea
 8011be6:	2200      	movs	r2, #0
 8011be8:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011bea:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f207 22ea 	addw	r2, r7, #746	; 0x2ea
 8011bf4:	8812      	ldrh	r2, [r2, #0]
 8011bf6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011bf8:	bf00      	nop
    Unicode::snprintf(map_unitsBuffer, MAP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_13X6).getText());
 8011bfa:	1d3b      	adds	r3, r7, #4
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f503 642a 	add.w	r4, r3, #2720	; 0xaa0
 8011c02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011c06:	2117      	movs	r1, #23
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7ff f937 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011c0e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011c12:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8011c16:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011c18:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <_ZN15Screen1ViewBaseC1Ev+0xa3c>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d105      	bne.n	8011c2c <_ZN15Screen1ViewBaseC1Ev+0xa20>
 8011c20:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <_ZN15Screen1ViewBaseC1Ev+0xa40>)
 8011c22:	4a0b      	ldr	r2, [pc, #44]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011c24:	21ae      	movs	r1, #174	; 0xae
 8011c26:	480b      	ldr	r0, [pc, #44]	; (8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011c28:	f01c f97a 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011c2c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	889a      	ldrh	r2, [r3, #4]
 8011c34:	4b08      	ldr	r3, [pc, #32]	; (8011c58 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d315      	bcc.n	8011c68 <_ZN15Screen1ViewBaseC1Ev+0xa5c>
 8011c3c:	4b07      	ldr	r3, [pc, #28]	; (8011c5c <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011c3e:	4a04      	ldr	r2, [pc, #16]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011c40:	21af      	movs	r1, #175	; 0xaf
 8011c42:	4804      	ldr	r0, [pc, #16]	; (8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011c44:	f01c f96c 	bl	802df20 <__assert_func>
 8011c48:	200097f8 	.word	0x200097f8
 8011c4c:	0802f500 	.word	0x0802f500
 8011c50:	0802f544 	.word	0x0802f544
 8011c54:	0802f574 	.word	0x0802f574
 8011c58:	200097fc 	.word	0x200097fc
 8011c5c:	0802f5b8 	.word	0x0802f5b8
 8011c60:	20009804 	.word	0x20009804
 8011c64:	0802f60c 	.word	0x0802f60c
    }
 8011c68:	bf00      	nop
        return texts->getText(typedTextId);
 8011c6a:	4bb9      	ldr	r3, [pc, #740]	; (8011f50 <_ZN15Screen1ViewBaseC1Ev+0xd44>)
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011c72:	889b      	ldrh	r3, [r3, #4]
 8011c74:	4619      	mov	r1, r3
 8011c76:	4610      	mov	r0, r2
 8011c78:	f002 fc82 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	bf00      	nop
 8011c80:	4ab4      	ldr	r2, [pc, #720]	; (8011f54 <_ZN15Screen1ViewBaseC1Ev+0xd48>)
 8011c82:	210a      	movs	r1, #10
 8011c84:	4620      	mov	r0, r4
 8011c86:	f00d fb97 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011c8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fd ff72 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    map_units.setWildcard(map_unitsBuffer);
 8011c94:	1d3b      	adds	r3, r7, #4
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011c9c:	1d3b      	adds	r3, r7, #4
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	f7ff f976 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_units.resizeToCurrentText();
 8011cac:	1d3b      	adds	r3, r7, #4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f008 f9b3 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G76O));
 8011cba:	1d3b      	adds	r3, r7, #4
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011cc2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8011cc6:	2115      	movs	r1, #21
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff f8d7 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011cce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f008 f9c0 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011cda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fd ff4a 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    batt_value.setXY(940, 146);
 8011ce4:	1d3b      	adds	r3, r7, #4
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011cec:	2292      	movs	r2, #146	; 0x92
 8011cee:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fe feb6 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    batt_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011cf8:	1d3b      	adds	r3, r7, #4
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011d00:	f207 23f7 	addw	r3, r7, #759	; 0x2f7
 8011d04:	22ff      	movs	r2, #255	; 0xff
 8011d06:	701a      	strb	r2, [r3, #0]
 8011d08:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011d0c:	22ff      	movs	r2, #255	; 0xff
 8011d0e:	701a      	strb	r2, [r3, #0]
 8011d10:	f207 23f5 	addw	r3, r7, #757	; 0x2f5
 8011d14:	22ff      	movs	r2, #255	; 0xff
 8011d16:	701a      	strb	r2, [r3, #0]
 8011d18:	f207 23f7 	addw	r3, r7, #759	; 0x2f7
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	041b      	lsls	r3, r3, #16
 8011d20:	461a      	mov	r2, r3
 8011d22:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	021b      	lsls	r3, r3, #8
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	f207 23f5 	addw	r3, r7, #757	; 0x2f5
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	4313      	orrs	r3, r2
 8011d34:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011d38:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8011d3c:	4611      	mov	r1, r2
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7fe fdc0 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8011d44:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011d50:	601c      	str	r4, [r3, #0]
 8011d52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011d56:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011d58:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d62:	6812      	ldr	r2, [r2, #0]
 8011d64:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011d66:	bf00      	nop
    batt_value.setLinespacing(0);
 8011d68:	1d3b      	adds	r3, r7, #4
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011d70:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011d74:	601a      	str	r2, [r3, #0]
 8011d76:	f207 23fe 	addw	r3, r7, #766	; 0x2fe
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011d7e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f207 22fe 	addw	r2, r7, #766	; 0x2fe
 8011d88:	8812      	ldrh	r2, [r2, #0]
 8011d8a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011d8c:	bf00      	nop
    Unicode::snprintf(batt_valueBuffer, BATT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TSMP).getText());
 8011d8e:	1d3b      	adds	r3, r7, #4
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8011d96:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8011d9a:	211d      	movs	r1, #29
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7ff f86d 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011da2:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011da6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8011daa:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011dac:	4b6a      	ldr	r3, [pc, #424]	; (8011f58 <_ZN15Screen1ViewBaseC1Ev+0xd4c>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d105      	bne.n	8011dc0 <_ZN15Screen1ViewBaseC1Ev+0xbb4>
 8011db4:	4b69      	ldr	r3, [pc, #420]	; (8011f5c <_ZN15Screen1ViewBaseC1Ev+0xd50>)
 8011db6:	4a6a      	ldr	r2, [pc, #424]	; (8011f60 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011db8:	21ae      	movs	r1, #174	; 0xae
 8011dba:	486a      	ldr	r0, [pc, #424]	; (8011f64 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011dbc:	f01c f8b0 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011dc0:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	889a      	ldrh	r2, [r3, #4]
 8011dc8:	4b67      	ldr	r3, [pc, #412]	; (8011f68 <_ZN15Screen1ViewBaseC1Ev+0xd5c>)
 8011dca:	881b      	ldrh	r3, [r3, #0]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d305      	bcc.n	8011ddc <_ZN15Screen1ViewBaseC1Ev+0xbd0>
 8011dd0:	4b66      	ldr	r3, [pc, #408]	; (8011f6c <_ZN15Screen1ViewBaseC1Ev+0xd60>)
 8011dd2:	4a63      	ldr	r2, [pc, #396]	; (8011f60 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011dd4:	21af      	movs	r1, #175	; 0xaf
 8011dd6:	4863      	ldr	r0, [pc, #396]	; (8011f64 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011dd8:	f01c f8a2 	bl	802df20 <__assert_func>
    }
 8011ddc:	bf00      	nop
        return texts->getText(typedTextId);
 8011dde:	4b5c      	ldr	r3, [pc, #368]	; (8011f50 <_ZN15Screen1ViewBaseC1Ev+0xd44>)
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8011de6:	889b      	ldrh	r3, [r3, #4]
 8011de8:	4619      	mov	r1, r3
 8011dea:	4610      	mov	r0, r2
 8011dec:	f002 fbc8 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8011df0:	4603      	mov	r3, r0
 8011df2:	bf00      	nop
 8011df4:	4a57      	ldr	r2, [pc, #348]	; (8011f54 <_ZN15Screen1ViewBaseC1Ev+0xd48>)
 8011df6:	2120      	movs	r1, #32
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f00d fadd 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011dfe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fd feb8 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    batt_value.setWildcard(batt_valueBuffer);
 8011e08:	1d3b      	adds	r3, r7, #4
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011e10:	1d3b      	adds	r3, r7, #4
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8011e18:	4619      	mov	r1, r3
 8011e1a:	4610      	mov	r0, r2
 8011e1c:	f7ff f8bc 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_value.resizeToCurrentText();
 8011e20:	1d3b      	adds	r3, r7, #4
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f008 f8f9 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_391O));
 8011e2e:	1d3b      	adds	r3, r7, #4
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011e36:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011e3a:	2113      	movs	r1, #19
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7ff f81d 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011e42:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011e46:	4619      	mov	r1, r3
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f008 f906 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011e4e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fd fe90 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    batt_label.setXY(888, 246);
 8011e58:	1d3b      	adds	r3, r7, #4
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011e60:	22f6      	movs	r2, #246	; 0xf6
 8011e62:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fe fdfc 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    batt_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011e6c:	1d3b      	adds	r3, r7, #4
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011e74:	f207 330b 	addw	r3, r7, #779	; 0x30b
 8011e78:	22ff      	movs	r2, #255	; 0xff
 8011e7a:	701a      	strb	r2, [r3, #0]
 8011e7c:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011e80:	22ff      	movs	r2, #255	; 0xff
 8011e82:	701a      	strb	r2, [r3, #0]
 8011e84:	f207 3309 	addw	r3, r7, #777	; 0x309
 8011e88:	22ff      	movs	r2, #255	; 0xff
 8011e8a:	701a      	strb	r2, [r3, #0]
 8011e8c:	f207 330b 	addw	r3, r7, #779	; 0x30b
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	041b      	lsls	r3, r3, #16
 8011e94:	461a      	mov	r2, r3
 8011e96:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	021b      	lsls	r3, r3, #8
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	f207 3309 	addw	r3, r7, #777	; 0x309
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011eac:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7fe fd06 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8011eb8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011ec4:	601c      	str	r4, [r3, #0]
 8011ec6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011eca:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011ecc:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011ed6:	6812      	ldr	r2, [r2, #0]
 8011ed8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011eda:	bf00      	nop
    batt_label.setLinespacing(0);
 8011edc:	1d3b      	adds	r3, r7, #4
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011ee4:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011ee8:	601a      	str	r2, [r3, #0]
 8011eea:	f207 3312 	addw	r3, r7, #786	; 0x312
 8011eee:	2200      	movs	r2, #0
 8011ef0:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011ef2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f207 3212 	addw	r2, r7, #786	; 0x312
 8011efc:	8812      	ldrh	r2, [r2, #0]
 8011efe:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011f00:	bf00      	nop
    Unicode::snprintf(batt_labelBuffer, BATT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RUP7).getText());
 8011f02:	1d3b      	adds	r3, r7, #4
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f603 24f4 	addw	r4, r3, #2804	; 0xaf4
 8011f0a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011f0e:	2121      	movs	r1, #33	; 0x21
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe ffb3 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011f16:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011f1a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011f1e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011f20:	4b0d      	ldr	r3, [pc, #52]	; (8011f58 <_ZN15Screen1ViewBaseC1Ev+0xd4c>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d105      	bne.n	8011f34 <_ZN15Screen1ViewBaseC1Ev+0xd28>
 8011f28:	4b0c      	ldr	r3, [pc, #48]	; (8011f5c <_ZN15Screen1ViewBaseC1Ev+0xd50>)
 8011f2a:	4a0d      	ldr	r2, [pc, #52]	; (8011f60 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011f2c:	21ae      	movs	r1, #174	; 0xae
 8011f2e:	480d      	ldr	r0, [pc, #52]	; (8011f64 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011f30:	f01b fff6 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011f34:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	889a      	ldrh	r2, [r3, #4]
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <_ZN15Screen1ViewBaseC1Ev+0xd5c>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d315      	bcc.n	8011f70 <_ZN15Screen1ViewBaseC1Ev+0xd64>
 8011f44:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <_ZN15Screen1ViewBaseC1Ev+0xd60>)
 8011f46:	4a06      	ldr	r2, [pc, #24]	; (8011f60 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011f48:	21af      	movs	r1, #175	; 0xaf
 8011f4a:	4806      	ldr	r0, [pc, #24]	; (8011f64 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011f4c:	f01b ffe8 	bl	802df20 <__assert_func>
 8011f50:	20009804 	.word	0x20009804
 8011f54:	0802f60c 	.word	0x0802f60c
 8011f58:	200097f8 	.word	0x200097f8
 8011f5c:	0802f500 	.word	0x0802f500
 8011f60:	0802f544 	.word	0x0802f544
 8011f64:	0802f574 	.word	0x0802f574
 8011f68:	200097fc 	.word	0x200097fc
 8011f6c:	0802f5b8 	.word	0x0802f5b8
    }
 8011f70:	bf00      	nop
        return texts->getText(typedTextId);
 8011f72:	4bba      	ldr	r3, [pc, #744]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x1050>)
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011f7a:	889b      	ldrh	r3, [r3, #4]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f002 fafe 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8011f84:	4603      	mov	r3, r0
 8011f86:	bf00      	nop
 8011f88:	4ab5      	ldr	r2, [pc, #724]	; (8012260 <_ZN15Screen1ViewBaseC1Ev+0x1054>)
 8011f8a:	210a      	movs	r1, #10
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f00d fa13 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011f92:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fd fdee 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    batt_label.setWildcard(batt_labelBuffer);
 8011f9c:	1d3b      	adds	r3, r7, #4
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011fa4:	1d3b      	adds	r3, r7, #4
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
 8011fac:	4619      	mov	r1, r3
 8011fae:	4610      	mov	r0, r2
 8011fb0:	f7fe fff2 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_label.resizeToCurrentText();
 8011fb4:	1d3b      	adds	r3, r7, #4
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f008 f82f 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4QE0));
 8011fc2:	1d3b      	adds	r3, r7, #4
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011fca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8011fce:	2112      	movs	r1, #18
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fe ff53 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8011fd6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8011fda:	4619      	mov	r1, r3
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f008 f83c 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011fe2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fd fdc6 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    batt_units.setXY(830, 246);
 8011fec:	1d3b      	adds	r3, r7, #4
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011ff4:	22f6      	movs	r2, #246	; 0xf6
 8011ff6:	f240 313e 	movw	r1, #830	; 0x33e
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fe fd32 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    batt_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012000:	1d3b      	adds	r3, r7, #4
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8012008:	f207 331f 	addw	r3, r7, #799	; 0x31f
 801200c:	22ff      	movs	r2, #255	; 0xff
 801200e:	701a      	strb	r2, [r3, #0]
 8012010:	f207 331e 	addw	r3, r7, #798	; 0x31e
 8012014:	22ff      	movs	r2, #255	; 0xff
 8012016:	701a      	strb	r2, [r3, #0]
 8012018:	f207 331d 	addw	r3, r7, #797	; 0x31d
 801201c:	22ff      	movs	r2, #255	; 0xff
 801201e:	701a      	strb	r2, [r3, #0]
 8012020:	f207 331f 	addw	r3, r7, #799	; 0x31f
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	041b      	lsls	r3, r3, #16
 8012028:	461a      	mov	r2, r3
 801202a:	f207 331e 	addw	r3, r7, #798	; 0x31e
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	021b      	lsls	r3, r3, #8
 8012032:	431a      	orrs	r2, r3
 8012034:	f207 331d 	addw	r3, r7, #797	; 0x31d
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	4313      	orrs	r3, r2
 801203c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012040:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8012044:	4611      	mov	r1, r2
 8012046:	4618      	mov	r0, r3
 8012048:	f7fe fc3c 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 801204c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	461a      	mov	r2, r3
 8012054:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8012058:	601c      	str	r4, [r3, #0]
 801205a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801205e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012060:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801206a:	6812      	ldr	r2, [r2, #0]
 801206c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801206e:	bf00      	nop
    batt_units.setLinespacing(0);
 8012070:	1d3b      	adds	r3, r7, #4
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8012078:	f507 734a 	add.w	r3, r7, #808	; 0x328
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	f207 3326 	addw	r3, r7, #806	; 0x326
 8012082:	2200      	movs	r2, #0
 8012084:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012086:	f507 734a 	add.w	r3, r7, #808	; 0x328
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f207 3226 	addw	r2, r7, #806	; 0x326
 8012090:	8812      	ldrh	r2, [r2, #0]
 8012092:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012094:	bf00      	nop
    Unicode::snprintf(batt_unitsBuffer, BATT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_F7I8).getText());
 8012096:	1d3b      	adds	r3, r7, #4
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f603 3408 	addw	r4, r3, #2824	; 0xb08
 801209e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80120a2:	2120      	movs	r1, #32
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fe fee9 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80120aa:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80120ae:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80120b2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80120b4:	4b6b      	ldr	r3, [pc, #428]	; (8012264 <_ZN15Screen1ViewBaseC1Ev+0x1058>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d105      	bne.n	80120c8 <_ZN15Screen1ViewBaseC1Ev+0xebc>
 80120bc:	4b6a      	ldr	r3, [pc, #424]	; (8012268 <_ZN15Screen1ViewBaseC1Ev+0x105c>)
 80120be:	4a6b      	ldr	r2, [pc, #428]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 80120c0:	21ae      	movs	r1, #174	; 0xae
 80120c2:	486b      	ldr	r0, [pc, #428]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 80120c4:	f01b ff2c 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80120c8:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	889a      	ldrh	r2, [r3, #4]
 80120d0:	4b68      	ldr	r3, [pc, #416]	; (8012274 <_ZN15Screen1ViewBaseC1Ev+0x1068>)
 80120d2:	881b      	ldrh	r3, [r3, #0]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d305      	bcc.n	80120e4 <_ZN15Screen1ViewBaseC1Ev+0xed8>
 80120d8:	4b67      	ldr	r3, [pc, #412]	; (8012278 <_ZN15Screen1ViewBaseC1Ev+0x106c>)
 80120da:	4a64      	ldr	r2, [pc, #400]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 80120dc:	21af      	movs	r1, #175	; 0xaf
 80120de:	4864      	ldr	r0, [pc, #400]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 80120e0:	f01b ff1e 	bl	802df20 <__assert_func>
    }
 80120e4:	bf00      	nop
        return texts->getText(typedTextId);
 80120e6:	4b5d      	ldr	r3, [pc, #372]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x1050>)
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80120ee:	889b      	ldrh	r3, [r3, #4]
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f002 fa44 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 80120f8:	4603      	mov	r3, r0
 80120fa:	bf00      	nop
 80120fc:	4a58      	ldr	r2, [pc, #352]	; (8012260 <_ZN15Screen1ViewBaseC1Ev+0x1054>)
 80120fe:	210a      	movs	r1, #10
 8012100:	4620      	mov	r0, r4
 8012102:	f00d f959 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012106:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801210a:	4618      	mov	r0, r3
 801210c:	f7fd fd34 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    batt_units.setWildcard(batt_unitsBuffer);
 8012110:	1d3b      	adds	r3, r7, #4
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8012118:	1d3b      	adds	r3, r7, #4
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8012120:	4619      	mov	r1, r3
 8012122:	4610      	mov	r0, r2
 8012124:	f7fe ff38 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_units.resizeToCurrentText();
 8012128:	1d3b      	adds	r3, r7, #4
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8012130:	4618      	mov	r0, r3
 8012132:	f007 ff75 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YBF));
 8012136:	1d3b      	adds	r3, r7, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 801213e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8012142:	2111      	movs	r1, #17
 8012144:	4618      	mov	r0, r3
 8012146:	f7fe fe99 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801214a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801214e:	4619      	mov	r1, r3
 8012150:	4620      	mov	r0, r4
 8012152:	f007 ff82 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012156:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801215a:	4618      	mov	r0, r3
 801215c:	f7fd fd0c 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    tps_value.setXY(940, 300);
 8012160:	1d3b      	adds	r3, r7, #4
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8012168:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801216c:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8012170:	4618      	mov	r0, r3
 8012172:	f7fe fc77 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    tps_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012176:	1d3b      	adds	r3, r7, #4
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 801217e:	f207 3333 	addw	r3, r7, #819	; 0x333
 8012182:	22ff      	movs	r2, #255	; 0xff
 8012184:	701a      	strb	r2, [r3, #0]
 8012186:	f207 3332 	addw	r3, r7, #818	; 0x332
 801218a:	22ff      	movs	r2, #255	; 0xff
 801218c:	701a      	strb	r2, [r3, #0]
 801218e:	f207 3331 	addw	r3, r7, #817	; 0x331
 8012192:	22ff      	movs	r2, #255	; 0xff
 8012194:	701a      	strb	r2, [r3, #0]
 8012196:	f207 3333 	addw	r3, r7, #819	; 0x333
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	041b      	lsls	r3, r3, #16
 801219e:	461a      	mov	r2, r3
 80121a0:	f207 3332 	addw	r3, r7, #818	; 0x332
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	021b      	lsls	r3, r3, #8
 80121a8:	431a      	orrs	r2, r3
 80121aa:	f207 3331 	addw	r3, r7, #817	; 0x331
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	4313      	orrs	r3, r2
 80121b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80121b6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80121ba:	4611      	mov	r1, r2
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe fb81 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80121c2:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	461a      	mov	r2, r3
 80121ca:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80121ce:	601c      	str	r4, [r3, #0]
 80121d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80121d4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80121d6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80121e0:	6812      	ldr	r2, [r2, #0]
 80121e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80121e4:	bf00      	nop
    tps_value.setLinespacing(0);
 80121e6:	1d3b      	adds	r3, r7, #4
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 80121ee:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80121f2:	601a      	str	r2, [r3, #0]
 80121f4:	f207 333a 	addw	r3, r7, #826	; 0x33a
 80121f8:	2200      	movs	r2, #0
 80121fa:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80121fc:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f207 323a 	addw	r2, r7, #826	; 0x33a
 8012206:	8812      	ldrh	r2, [r2, #0]
 8012208:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801220a:	bf00      	nop
    Unicode::snprintf(tps_valueBuffer, TPS_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AYOA).getText());
 801220c:	1d3b      	adds	r3, r7, #4
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f603 341c 	addw	r4, r3, #2844	; 0xb1c
 8012214:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8012218:	211e      	movs	r1, #30
 801221a:	4618      	mov	r0, r3
 801221c:	f7fe fe2e 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012220:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8012224:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8012228:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801222a:	4b0e      	ldr	r3, [pc, #56]	; (8012264 <_ZN15Screen1ViewBaseC1Ev+0x1058>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d105      	bne.n	801223e <_ZN15Screen1ViewBaseC1Ev+0x1032>
 8012232:	4b0d      	ldr	r3, [pc, #52]	; (8012268 <_ZN15Screen1ViewBaseC1Ev+0x105c>)
 8012234:	4a0d      	ldr	r2, [pc, #52]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8012236:	21ae      	movs	r1, #174	; 0xae
 8012238:	480d      	ldr	r0, [pc, #52]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 801223a:	f01b fe71 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801223e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	889a      	ldrh	r2, [r3, #4]
 8012246:	4b0b      	ldr	r3, [pc, #44]	; (8012274 <_ZN15Screen1ViewBaseC1Ev+0x1068>)
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	429a      	cmp	r2, r3
 801224c:	d316      	bcc.n	801227c <_ZN15Screen1ViewBaseC1Ev+0x1070>
 801224e:	4b0a      	ldr	r3, [pc, #40]	; (8012278 <_ZN15Screen1ViewBaseC1Ev+0x106c>)
 8012250:	4a06      	ldr	r2, [pc, #24]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8012252:	21af      	movs	r1, #175	; 0xaf
 8012254:	4806      	ldr	r0, [pc, #24]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 8012256:	f01b fe63 	bl	802df20 <__assert_func>
 801225a:	bf00      	nop
 801225c:	20009804 	.word	0x20009804
 8012260:	0802f60c 	.word	0x0802f60c
 8012264:	200097f8 	.word	0x200097f8
 8012268:	0802f500 	.word	0x0802f500
 801226c:	0802f544 	.word	0x0802f544
 8012270:	0802f574 	.word	0x0802f574
 8012274:	200097fc 	.word	0x200097fc
 8012278:	0802f5b8 	.word	0x0802f5b8
    }
 801227c:	bf00      	nop
        return texts->getText(typedTextId);
 801227e:	4bba      	ldr	r3, [pc, #744]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x135c>)
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8012286:	889b      	ldrh	r3, [r3, #4]
 8012288:	4619      	mov	r1, r3
 801228a:	4610      	mov	r0, r2
 801228c:	f002 f978 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012290:	4603      	mov	r3, r0
 8012292:	bf00      	nop
 8012294:	4ab5      	ldr	r2, [pc, #724]	; (801256c <_ZN15Screen1ViewBaseC1Ev+0x1360>)
 8012296:	2120      	movs	r1, #32
 8012298:	4620      	mov	r0, r4
 801229a:	f00d f88d 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801229e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fd fc68 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    tps_value.setWildcard(tps_valueBuffer);
 80122a8:	1d3b      	adds	r3, r7, #4
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 80122b0:	1d3b      	adds	r3, r7, #4
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 80122b8:	4619      	mov	r1, r3
 80122ba:	4610      	mov	r0, r2
 80122bc:	f7fe fe6c 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_value.resizeToCurrentText();
 80122c0:	1d3b      	adds	r3, r7, #4
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80122c8:	4618      	mov	r0, r3
 80122ca:	f007 fea9 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MP7X));
 80122ce:	1d3b      	adds	r3, r7, #4
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 80122d6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80122da:	2110      	movs	r1, #16
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fe fdcd 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80122e2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80122e6:	4619      	mov	r1, r3
 80122e8:	4620      	mov	r0, r4
 80122ea:	f007 feb6 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80122ee:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fd fc40 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    tps_label.setXY(888, 399);
 80122f8:	1d3b      	adds	r3, r7, #4
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8012300:	f240 128f 	movw	r2, #399	; 0x18f
 8012304:	f44f 715e 	mov.w	r1, #888	; 0x378
 8012308:	4618      	mov	r0, r3
 801230a:	f7fe fbab 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    tps_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801230e:	1d3b      	adds	r3, r7, #4
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 8012316:	f207 3347 	addw	r3, r7, #839	; 0x347
 801231a:	22ff      	movs	r2, #255	; 0xff
 801231c:	701a      	strb	r2, [r3, #0]
 801231e:	f207 3346 	addw	r3, r7, #838	; 0x346
 8012322:	22ff      	movs	r2, #255	; 0xff
 8012324:	701a      	strb	r2, [r3, #0]
 8012326:	f207 3345 	addw	r3, r7, #837	; 0x345
 801232a:	22ff      	movs	r2, #255	; 0xff
 801232c:	701a      	strb	r2, [r3, #0]
 801232e:	f207 3347 	addw	r3, r7, #839	; 0x347
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	041b      	lsls	r3, r3, #16
 8012336:	461a      	mov	r2, r3
 8012338:	f207 3346 	addw	r3, r7, #838	; 0x346
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	021b      	lsls	r3, r3, #8
 8012340:	431a      	orrs	r2, r3
 8012342:	f207 3345 	addw	r3, r7, #837	; 0x345
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	4313      	orrs	r3, r2
 801234a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801234e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8012352:	4611      	mov	r1, r2
 8012354:	4618      	mov	r0, r3
 8012356:	f7fe fab5 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 801235a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	461a      	mov	r2, r3
 8012362:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8012366:	601c      	str	r4, [r3, #0]
 8012368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801236c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801236e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012378:	6812      	ldr	r2, [r2, #0]
 801237a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801237c:	bf00      	nop
    tps_label.setLinespacing(0);
 801237e:	1d3b      	adds	r3, r7, #4
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8012386:	f507 7354 	add.w	r3, r7, #848	; 0x350
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	f207 334e 	addw	r3, r7, #846	; 0x34e
 8012390:	2200      	movs	r2, #0
 8012392:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012394:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f207 324e 	addw	r2, r7, #846	; 0x34e
 801239e:	8812      	ldrh	r2, [r2, #0]
 80123a0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80123a2:	bf00      	nop
    Unicode::snprintf(tps_labelBuffer, TPS_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VMJT).getText());
 80123a4:	1d3b      	adds	r3, r7, #4
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	f603 345c 	addw	r4, r3, #2908	; 0xb5c
 80123ac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80123b0:	2123      	movs	r1, #35	; 0x23
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fe fd62 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80123b8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80123bc:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80123c0:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80123c2:	4b6b      	ldr	r3, [pc, #428]	; (8012570 <_ZN15Screen1ViewBaseC1Ev+0x1364>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d105      	bne.n	80123d6 <_ZN15Screen1ViewBaseC1Ev+0x11ca>
 80123ca:	4b6a      	ldr	r3, [pc, #424]	; (8012574 <_ZN15Screen1ViewBaseC1Ev+0x1368>)
 80123cc:	4a6a      	ldr	r2, [pc, #424]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 80123ce:	21ae      	movs	r1, #174	; 0xae
 80123d0:	486a      	ldr	r0, [pc, #424]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 80123d2:	f01b fda5 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80123d6:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	889a      	ldrh	r2, [r3, #4]
 80123de:	4b68      	ldr	r3, [pc, #416]	; (8012580 <_ZN15Screen1ViewBaseC1Ev+0x1374>)
 80123e0:	881b      	ldrh	r3, [r3, #0]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d305      	bcc.n	80123f2 <_ZN15Screen1ViewBaseC1Ev+0x11e6>
 80123e6:	4b67      	ldr	r3, [pc, #412]	; (8012584 <_ZN15Screen1ViewBaseC1Ev+0x1378>)
 80123e8:	4a63      	ldr	r2, [pc, #396]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 80123ea:	21af      	movs	r1, #175	; 0xaf
 80123ec:	4863      	ldr	r0, [pc, #396]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 80123ee:	f01b fd97 	bl	802df20 <__assert_func>
    }
 80123f2:	bf00      	nop
        return texts->getText(typedTextId);
 80123f4:	4b5c      	ldr	r3, [pc, #368]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x135c>)
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80123fc:	889b      	ldrh	r3, [r3, #4]
 80123fe:	4619      	mov	r1, r3
 8012400:	4610      	mov	r0, r2
 8012402:	f002 f8bd 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012406:	4603      	mov	r3, r0
 8012408:	bf00      	nop
 801240a:	4a58      	ldr	r2, [pc, #352]	; (801256c <_ZN15Screen1ViewBaseC1Ev+0x1360>)
 801240c:	210a      	movs	r1, #10
 801240e:	4620      	mov	r0, r4
 8012410:	f00c ffd2 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012414:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012418:	4618      	mov	r0, r3
 801241a:	f7fd fbad 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    tps_label.setWildcard(tps_labelBuffer);
 801241e:	1d3b      	adds	r3, r7, #4
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8012426:	1d3b      	adds	r3, r7, #4
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f7fe fdb1 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_label.resizeToCurrentText();
 8012436:	1d3b      	adds	r3, r7, #4
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801243e:	4618      	mov	r0, r3
 8012440:	f007 fdee 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L5WH));
 8012444:	1d3b      	adds	r3, r7, #4
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 801244c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8012450:	210e      	movs	r1, #14
 8012452:	4618      	mov	r0, r3
 8012454:	f7fe fd12 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012458:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801245c:	4619      	mov	r1, r3
 801245e:	4620      	mov	r0, r4
 8012460:	f007 fdfb 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012464:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8012468:	4618      	mov	r0, r3
 801246a:	f7fd fb85 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    tps_units.setXY(808, 398);
 801246e:	1d3b      	adds	r3, r7, #4
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8012476:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 801247a:	f44f 714a 	mov.w	r1, #808	; 0x328
 801247e:	4618      	mov	r0, r3
 8012480:	f7fe faf0 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    tps_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012484:	1d3b      	adds	r3, r7, #4
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 801248c:	f207 335b 	addw	r3, r7, #859	; 0x35b
 8012490:	22ff      	movs	r2, #255	; 0xff
 8012492:	701a      	strb	r2, [r3, #0]
 8012494:	f207 335a 	addw	r3, r7, #858	; 0x35a
 8012498:	22ff      	movs	r2, #255	; 0xff
 801249a:	701a      	strb	r2, [r3, #0]
 801249c:	f207 3359 	addw	r3, r7, #857	; 0x359
 80124a0:	22ff      	movs	r2, #255	; 0xff
 80124a2:	701a      	strb	r2, [r3, #0]
 80124a4:	f207 335b 	addw	r3, r7, #859	; 0x35b
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	041b      	lsls	r3, r3, #16
 80124ac:	461a      	mov	r2, r3
 80124ae:	f207 335a 	addw	r3, r7, #858	; 0x35a
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	021b      	lsls	r3, r3, #8
 80124b6:	431a      	orrs	r2, r3
 80124b8:	f207 3359 	addw	r3, r7, #857	; 0x359
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	4313      	orrs	r3, r2
 80124c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80124c4:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80124c8:	4611      	mov	r1, r2
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fe f9fa 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80124d0:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	461a      	mov	r2, r3
 80124d8:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80124dc:	601c      	str	r4, [r3, #0]
 80124de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80124e2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80124e4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80124ee:	6812      	ldr	r2, [r2, #0]
 80124f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124f2:	bf00      	nop
    tps_units.setLinespacing(0);
 80124f4:	1d3b      	adds	r3, r7, #4
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 80124fc:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8012500:	601a      	str	r2, [r3, #0]
 8012502:	f207 3362 	addw	r3, r7, #866	; 0x362
 8012506:	2200      	movs	r2, #0
 8012508:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801250a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f207 3262 	addw	r2, r7, #866	; 0x362
 8012514:	8812      	ldrh	r2, [r2, #0]
 8012516:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012518:	bf00      	nop
    Unicode::snprintf(tps_unitsBuffer, TPS_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L3HM).getText());
 801251a:	1d3b      	adds	r3, r7, #4
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 8012522:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8012526:	2122      	movs	r1, #34	; 0x22
 8012528:	4618      	mov	r0, r3
 801252a:	f7fe fca7 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801252e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8012532:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8012536:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012538:	4b0d      	ldr	r3, [pc, #52]	; (8012570 <_ZN15Screen1ViewBaseC1Ev+0x1364>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d105      	bne.n	801254c <_ZN15Screen1ViewBaseC1Ev+0x1340>
 8012540:	4b0c      	ldr	r3, [pc, #48]	; (8012574 <_ZN15Screen1ViewBaseC1Ev+0x1368>)
 8012542:	4a0d      	ldr	r2, [pc, #52]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 8012544:	21ae      	movs	r1, #174	; 0xae
 8012546:	480d      	ldr	r0, [pc, #52]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 8012548:	f01b fcea 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801254c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	889a      	ldrh	r2, [r3, #4]
 8012554:	4b0a      	ldr	r3, [pc, #40]	; (8012580 <_ZN15Screen1ViewBaseC1Ev+0x1374>)
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	429a      	cmp	r2, r3
 801255a:	d315      	bcc.n	8012588 <_ZN15Screen1ViewBaseC1Ev+0x137c>
 801255c:	4b09      	ldr	r3, [pc, #36]	; (8012584 <_ZN15Screen1ViewBaseC1Ev+0x1378>)
 801255e:	4a06      	ldr	r2, [pc, #24]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 8012560:	21af      	movs	r1, #175	; 0xaf
 8012562:	4806      	ldr	r0, [pc, #24]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 8012564:	f01b fcdc 	bl	802df20 <__assert_func>
 8012568:	20009804 	.word	0x20009804
 801256c:	0802f60c 	.word	0x0802f60c
 8012570:	200097f8 	.word	0x200097f8
 8012574:	0802f500 	.word	0x0802f500
 8012578:	0802f544 	.word	0x0802f544
 801257c:	0802f574 	.word	0x0802f574
 8012580:	200097fc 	.word	0x200097fc
 8012584:	0802f5b8 	.word	0x0802f5b8
    }
 8012588:	bf00      	nop
        return texts->getText(typedTextId);
 801258a:	4bba      	ldr	r3, [pc, #744]	; (8012874 <_ZN15Screen1ViewBaseC1Ev+0x1668>)
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8012592:	889b      	ldrh	r3, [r3, #4]
 8012594:	4619      	mov	r1, r3
 8012596:	4610      	mov	r0, r2
 8012598:	f001 fff2 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801259c:	4603      	mov	r3, r0
 801259e:	bf00      	nop
 80125a0:	4ab5      	ldr	r2, [pc, #724]	; (8012878 <_ZN15Screen1ViewBaseC1Ev+0x166c>)
 80125a2:	210a      	movs	r1, #10
 80125a4:	4620      	mov	r0, r4
 80125a6:	f00c ff07 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80125aa:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fd fae2 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    tps_units.setWildcard(tps_unitsBuffer);
 80125b4:	1d3b      	adds	r3, r7, #4
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 80125bc:	1d3b      	adds	r3, r7, #4
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80125c4:	4619      	mov	r1, r3
 80125c6:	4610      	mov	r0, r2
 80125c8:	f7fe fce6 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_units.resizeToCurrentText();
 80125cc:	1d3b      	adds	r3, r7, #4
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80125d4:	4618      	mov	r0, r3
 80125d6:	f007 fd23 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RPXE));
 80125da:	1d3b      	adds	r3, r7, #4
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 80125e2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80125e6:	210f      	movs	r1, #15
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fe fc47 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80125ee:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80125f2:	4619      	mov	r1, r3
 80125f4:	4620      	mov	r0, r4
 80125f6:	f007 fd30 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80125fa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fd faba 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_value.setXY(940, 450);
 8012604:	1d3b      	adds	r3, r7, #4
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801260c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8012610:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8012614:	4618      	mov	r0, r3
 8012616:	f7fe fa25 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801261a:	1d3b      	adds	r3, r7, #4
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 8012622:	f207 336f 	addw	r3, r7, #879	; 0x36f
 8012626:	22ff      	movs	r2, #255	; 0xff
 8012628:	701a      	strb	r2, [r3, #0]
 801262a:	f207 336e 	addw	r3, r7, #878	; 0x36e
 801262e:	22ff      	movs	r2, #255	; 0xff
 8012630:	701a      	strb	r2, [r3, #0]
 8012632:	f207 336d 	addw	r3, r7, #877	; 0x36d
 8012636:	22ff      	movs	r2, #255	; 0xff
 8012638:	701a      	strb	r2, [r3, #0]
 801263a:	f207 336f 	addw	r3, r7, #879	; 0x36f
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	041b      	lsls	r3, r3, #16
 8012642:	461a      	mov	r2, r3
 8012644:	f207 336e 	addw	r3, r7, #878	; 0x36e
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	021b      	lsls	r3, r3, #8
 801264c:	431a      	orrs	r2, r3
 801264e:	f207 336d 	addw	r3, r7, #877	; 0x36d
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	4313      	orrs	r3, r2
 8012656:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801265a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801265e:	4611      	mov	r1, r2
 8012660:	4618      	mov	r0, r3
 8012662:	f7fe f92f 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8012666:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	461a      	mov	r2, r3
 801266e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8012672:	601c      	str	r4, [r3, #0]
 8012674:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012678:	601a      	str	r2, [r3, #0]
        this->color = color;
 801267a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012684:	6812      	ldr	r2, [r2, #0]
 8012686:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012688:	bf00      	nop
    lambda_value.setLinespacing(0);
 801268a:	1d3b      	adds	r3, r7, #4
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 8012692:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8012696:	601a      	str	r2, [r3, #0]
 8012698:	f207 3376 	addw	r3, r7, #886	; 0x376
 801269c:	2200      	movs	r2, #0
 801269e:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80126a0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f207 3276 	addw	r2, r7, #886	; 0x376
 80126aa:	8812      	ldrh	r2, [r2, #0]
 80126ac:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80126ae:	bf00      	nop
    Unicode::snprintf(lambda_valueBuffer, LAMBDA_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2H8W).getText());
 80126b0:	1d3b      	adds	r3, r7, #4
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 80126b8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80126bc:	211f      	movs	r1, #31
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fe fbdc 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80126c4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80126c8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80126cc:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80126ce:	4b6b      	ldr	r3, [pc, #428]	; (801287c <_ZN15Screen1ViewBaseC1Ev+0x1670>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d105      	bne.n	80126e2 <_ZN15Screen1ViewBaseC1Ev+0x14d6>
 80126d6:	4b6a      	ldr	r3, [pc, #424]	; (8012880 <_ZN15Screen1ViewBaseC1Ev+0x1674>)
 80126d8:	4a6a      	ldr	r2, [pc, #424]	; (8012884 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 80126da:	21ae      	movs	r1, #174	; 0xae
 80126dc:	486a      	ldr	r0, [pc, #424]	; (8012888 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 80126de:	f01b fc1f 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80126e2:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	889a      	ldrh	r2, [r3, #4]
 80126ea:	4b68      	ldr	r3, [pc, #416]	; (801288c <_ZN15Screen1ViewBaseC1Ev+0x1680>)
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d305      	bcc.n	80126fe <_ZN15Screen1ViewBaseC1Ev+0x14f2>
 80126f2:	4b67      	ldr	r3, [pc, #412]	; (8012890 <_ZN15Screen1ViewBaseC1Ev+0x1684>)
 80126f4:	4a63      	ldr	r2, [pc, #396]	; (8012884 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 80126f6:	21af      	movs	r1, #175	; 0xaf
 80126f8:	4863      	ldr	r0, [pc, #396]	; (8012888 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 80126fa:	f01b fc11 	bl	802df20 <__assert_func>
    }
 80126fe:	bf00      	nop
        return texts->getText(typedTextId);
 8012700:	4b5c      	ldr	r3, [pc, #368]	; (8012874 <_ZN15Screen1ViewBaseC1Ev+0x1668>)
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012708:	889b      	ldrh	r3, [r3, #4]
 801270a:	4619      	mov	r1, r3
 801270c:	4610      	mov	r0, r2
 801270e:	f001 ff37 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012712:	4603      	mov	r3, r0
 8012714:	bf00      	nop
 8012716:	4a58      	ldr	r2, [pc, #352]	; (8012878 <_ZN15Screen1ViewBaseC1Ev+0x166c>)
 8012718:	2120      	movs	r1, #32
 801271a:	4620      	mov	r0, r4
 801271c:	f00c fe4c 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012720:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012724:	4618      	mov	r0, r3
 8012726:	f7fd fa27 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_value.setWildcard(lambda_valueBuffer);
 801272a:	1d3b      	adds	r3, r7, #4
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 8012732:	1d3b      	adds	r3, r7, #4
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 801273a:	4619      	mov	r1, r3
 801273c:	4610      	mov	r0, r2
 801273e:	f7fe fc2b 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_value.resizeToCurrentText();
 8012742:	1d3b      	adds	r3, r7, #4
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801274a:	4618      	mov	r0, r3
 801274c:	f007 fc68 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TLZY));
 8012750:	1d3b      	adds	r3, r7, #4
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 8012758:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801275c:	210d      	movs	r1, #13
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe fb8c 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012764:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8012768:	4619      	mov	r1, r3
 801276a:	4620      	mov	r0, r4
 801276c:	f007 fc75 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012770:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8012774:	4618      	mov	r0, r3
 8012776:	f7fd f9ff 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_label.setXY(886, 550);
 801277a:	1d3b      	adds	r3, r7, #4
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012782:	f240 2226 	movw	r2, #550	; 0x226
 8012786:	f240 3176 	movw	r1, #886	; 0x376
 801278a:	4618      	mov	r0, r3
 801278c:	f7fe f96a 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012790:	1d3b      	adds	r3, r7, #4
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8012798:	f207 3383 	addw	r3, r7, #899	; 0x383
 801279c:	22ff      	movs	r2, #255	; 0xff
 801279e:	701a      	strb	r2, [r3, #0]
 80127a0:	f207 3382 	addw	r3, r7, #898	; 0x382
 80127a4:	22ff      	movs	r2, #255	; 0xff
 80127a6:	701a      	strb	r2, [r3, #0]
 80127a8:	f207 3381 	addw	r3, r7, #897	; 0x381
 80127ac:	22ff      	movs	r2, #255	; 0xff
 80127ae:	701a      	strb	r2, [r3, #0]
 80127b0:	f207 3383 	addw	r3, r7, #899	; 0x383
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	041b      	lsls	r3, r3, #16
 80127b8:	461a      	mov	r2, r3
 80127ba:	f207 3382 	addw	r3, r7, #898	; 0x382
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	021b      	lsls	r3, r3, #8
 80127c2:	431a      	orrs	r2, r3
 80127c4:	f207 3381 	addw	r3, r7, #897	; 0x381
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	4313      	orrs	r3, r2
 80127cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80127d0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80127d4:	4611      	mov	r1, r2
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fe f874 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80127dc:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	461a      	mov	r2, r3
 80127e4:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80127e8:	601c      	str	r4, [r3, #0]
 80127ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80127ee:	601a      	str	r2, [r3, #0]
        this->color = color;
 80127f0:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80127fa:	6812      	ldr	r2, [r2, #0]
 80127fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80127fe:	bf00      	nop
    lambda_label.setLinespacing(0);
 8012800:	1d3b      	adds	r3, r7, #4
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8012808:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801280c:	601a      	str	r2, [r3, #0]
 801280e:	f207 338a 	addw	r3, r7, #906	; 0x38a
 8012812:	2200      	movs	r2, #0
 8012814:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012816:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f207 328a 	addw	r2, r7, #906	; 0x38a
 8012820:	8812      	ldrh	r2, [r2, #0]
 8012822:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012824:	bf00      	nop
    Unicode::snprintf(lambda_labelBuffer, LAMBDA_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JQKX).getText());
 8012826:	1d3b      	adds	r3, r7, #4
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f603 34c4 	addw	r4, r3, #3012	; 0xbc4
 801282e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8012832:	2125      	movs	r1, #37	; 0x25
 8012834:	4618      	mov	r0, r3
 8012836:	f7fe fb21 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801283a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801283e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8012842:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012844:	4b0d      	ldr	r3, [pc, #52]	; (801287c <_ZN15Screen1ViewBaseC1Ev+0x1670>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d105      	bne.n	8012858 <_ZN15Screen1ViewBaseC1Ev+0x164c>
 801284c:	4b0c      	ldr	r3, [pc, #48]	; (8012880 <_ZN15Screen1ViewBaseC1Ev+0x1674>)
 801284e:	4a0d      	ldr	r2, [pc, #52]	; (8012884 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 8012850:	21ae      	movs	r1, #174	; 0xae
 8012852:	480d      	ldr	r0, [pc, #52]	; (8012888 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 8012854:	f01b fb64 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012858:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	889a      	ldrh	r2, [r3, #4]
 8012860:	4b0a      	ldr	r3, [pc, #40]	; (801288c <_ZN15Screen1ViewBaseC1Ev+0x1680>)
 8012862:	881b      	ldrh	r3, [r3, #0]
 8012864:	429a      	cmp	r2, r3
 8012866:	d315      	bcc.n	8012894 <_ZN15Screen1ViewBaseC1Ev+0x1688>
 8012868:	4b09      	ldr	r3, [pc, #36]	; (8012890 <_ZN15Screen1ViewBaseC1Ev+0x1684>)
 801286a:	4a06      	ldr	r2, [pc, #24]	; (8012884 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 801286c:	21af      	movs	r1, #175	; 0xaf
 801286e:	4806      	ldr	r0, [pc, #24]	; (8012888 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 8012870:	f01b fb56 	bl	802df20 <__assert_func>
 8012874:	20009804 	.word	0x20009804
 8012878:	0802f60c 	.word	0x0802f60c
 801287c:	200097f8 	.word	0x200097f8
 8012880:	0802f500 	.word	0x0802f500
 8012884:	0802f544 	.word	0x0802f544
 8012888:	0802f574 	.word	0x0802f574
 801288c:	200097fc 	.word	0x200097fc
 8012890:	0802f5b8 	.word	0x0802f5b8
    }
 8012894:	bf00      	nop
        return texts->getText(typedTextId);
 8012896:	4bb0      	ldr	r3, [pc, #704]	; (8012b58 <_ZN15Screen1ViewBaseC1Ev+0x194c>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801289e:	889b      	ldrh	r3, [r3, #4]
 80128a0:	4619      	mov	r1, r3
 80128a2:	4610      	mov	r0, r2
 80128a4:	f001 fe6c 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 80128a8:	4603      	mov	r3, r0
 80128aa:	bf00      	nop
 80128ac:	4aab      	ldr	r2, [pc, #684]	; (8012b5c <_ZN15Screen1ViewBaseC1Ev+0x1950>)
 80128ae:	210a      	movs	r1, #10
 80128b0:	4620      	mov	r0, r4
 80128b2:	f00c fd81 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80128b6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fd f95c 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_label.setWildcard(lambda_labelBuffer);
 80128c0:	1d3b      	adds	r3, r7, #4
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 80128c8:	1d3b      	adds	r3, r7, #4
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f603 33c4 	addw	r3, r3, #3012	; 0xbc4
 80128d0:	4619      	mov	r1, r3
 80128d2:	4610      	mov	r0, r2
 80128d4:	f7fe fb60 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_label.resizeToCurrentText();
 80128d8:	1d3b      	adds	r3, r7, #4
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80128e0:	4618      	mov	r0, r3
 80128e2:	f007 fb9d 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLOQ));
 80128e6:	1d3b      	adds	r3, r7, #4
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 80128ee:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80128f2:	210c      	movs	r1, #12
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7fe fac1 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80128fa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80128fe:	4619      	mov	r1, r3
 8012900:	4620      	mov	r0, r4
 8012902:	f007 fbaa 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012906:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801290a:	4618      	mov	r0, r3
 801290c:	f7fd f934 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_units.setXY(686, 550);
 8012910:	1d3b      	adds	r3, r7, #4
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8012918:	f240 2226 	movw	r2, #550	; 0x226
 801291c:	f240 21ae 	movw	r1, #686	; 0x2ae
 8012920:	4618      	mov	r0, r3
 8012922:	f7fe f89f 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012926:	1d3b      	adds	r3, r7, #4
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 801292e:	f207 3397 	addw	r3, r7, #919	; 0x397
 8012932:	22ff      	movs	r2, #255	; 0xff
 8012934:	701a      	strb	r2, [r3, #0]
 8012936:	f207 3396 	addw	r3, r7, #918	; 0x396
 801293a:	22ff      	movs	r2, #255	; 0xff
 801293c:	701a      	strb	r2, [r3, #0]
 801293e:	f207 3395 	addw	r3, r7, #917	; 0x395
 8012942:	22ff      	movs	r2, #255	; 0xff
 8012944:	701a      	strb	r2, [r3, #0]
 8012946:	f207 3397 	addw	r3, r7, #919	; 0x397
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	041b      	lsls	r3, r3, #16
 801294e:	461a      	mov	r2, r3
 8012950:	f207 3396 	addw	r3, r7, #918	; 0x396
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	021b      	lsls	r3, r3, #8
 8012958:	431a      	orrs	r2, r3
 801295a:	f207 3395 	addw	r3, r7, #917	; 0x395
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	4313      	orrs	r3, r2
 8012962:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012966:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801296a:	4611      	mov	r1, r2
 801296c:	4618      	mov	r0, r3
 801296e:	f7fd ffa9 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8012972:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	461a      	mov	r2, r3
 801297a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 801297e:	601c      	str	r4, [r3, #0]
 8012980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012984:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012986:	f507 7366 	add.w	r3, r7, #920	; 0x398
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012990:	6812      	ldr	r2, [r2, #0]
 8012992:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012994:	bf00      	nop
    lambda_units.setLinespacing(0);
 8012996:	1d3b      	adds	r3, r7, #4
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801299e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80129a2:	2300      	movs	r3, #0
 80129a4:	f8a7 339e 	strh.w	r3, [r7, #926]	; 0x39e
        linespace = space;
 80129a8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80129ac:	f8b7 239e 	ldrh.w	r2, [r7, #926]	; 0x39e
 80129b0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80129b2:	bf00      	nop
    Unicode::snprintf(lambda_unitsBuffer, LAMBDA_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J843).getText());
 80129b4:	1d3b      	adds	r3, r7, #4
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f603 34d8 	addw	r4, r3, #3032	; 0xbd8
 80129bc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80129c0:	2124      	movs	r1, #36	; 0x24
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7fe fa5a 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80129c8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80129cc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80129d0:	4b63      	ldr	r3, [pc, #396]	; (8012b60 <_ZN15Screen1ViewBaseC1Ev+0x1954>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d105      	bne.n	80129e4 <_ZN15Screen1ViewBaseC1Ev+0x17d8>
 80129d8:	4b62      	ldr	r3, [pc, #392]	; (8012b64 <_ZN15Screen1ViewBaseC1Ev+0x1958>)
 80129da:	4a63      	ldr	r2, [pc, #396]	; (8012b68 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 80129dc:	21ae      	movs	r1, #174	; 0xae
 80129de:	4863      	ldr	r0, [pc, #396]	; (8012b6c <_ZN15Screen1ViewBaseC1Ev+0x1960>)
 80129e0:	f01b fa9e 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80129e4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80129e8:	889a      	ldrh	r2, [r3, #4]
 80129ea:	4b61      	ldr	r3, [pc, #388]	; (8012b70 <_ZN15Screen1ViewBaseC1Ev+0x1964>)
 80129ec:	881b      	ldrh	r3, [r3, #0]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d305      	bcc.n	80129fe <_ZN15Screen1ViewBaseC1Ev+0x17f2>
 80129f2:	4b60      	ldr	r3, [pc, #384]	; (8012b74 <_ZN15Screen1ViewBaseC1Ev+0x1968>)
 80129f4:	4a5c      	ldr	r2, [pc, #368]	; (8012b68 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 80129f6:	21af      	movs	r1, #175	; 0xaf
 80129f8:	485c      	ldr	r0, [pc, #368]	; (8012b6c <_ZN15Screen1ViewBaseC1Ev+0x1960>)
 80129fa:	f01b fa91 	bl	802df20 <__assert_func>
    }
 80129fe:	bf00      	nop
        return texts->getText(typedTextId);
 8012a00:	4b55      	ldr	r3, [pc, #340]	; (8012b58 <_ZN15Screen1ViewBaseC1Ev+0x194c>)
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8012a08:	889b      	ldrh	r3, [r3, #4]
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	f001 fdb7 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012a12:	4603      	mov	r3, r0
 8012a14:	bf00      	nop
 8012a16:	4a51      	ldr	r2, [pc, #324]	; (8012b5c <_ZN15Screen1ViewBaseC1Ev+0x1950>)
 8012a18:	210a      	movs	r1, #10
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f00c fccc 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012a20:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fd f8a7 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_units.setWildcard(lambda_unitsBuffer);
 8012a2a:	1d3b      	adds	r3, r7, #4
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f203 523c 	addw	r2, r3, #1340	; 0x53c
 8012a32:	1d3b      	adds	r3, r7, #4
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f7fe faab 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_units.resizeToCurrentText();
 8012a42:	1d3b      	adds	r3, r7, #4
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f007 fae8 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KCKH));
 8012a50:	1d3b      	adds	r3, r7, #4
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 8012a58:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012a5c:	210b      	movs	r1, #11
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fe fa0c 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012a64:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012a68:	4619      	mov	r1, r3
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f007 faf5 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012a70:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7fd f87f 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    ect_value.setXY(30, -2);
 8012a7a:	1d3b      	adds	r3, r7, #4
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012a82:	f06f 0201 	mvn.w	r2, #1
 8012a86:	211e      	movs	r1, #30
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fd ffeb 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    ect_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012a8e:	1d3b      	adds	r3, r7, #4
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012a96:	23ff      	movs	r3, #255	; 0xff
 8012a98:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
 8012a9c:	23ff      	movs	r3, #255	; 0xff
 8012a9e:	f887 33aa 	strb.w	r3, [r7, #938]	; 0x3aa
 8012aa2:	23ff      	movs	r3, #255	; 0xff
 8012aa4:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
 8012aa8:	f897 33ab 	ldrb.w	r3, [r7, #939]	; 0x3ab
 8012aac:	041b      	lsls	r3, r3, #16
 8012aae:	461a      	mov	r2, r3
 8012ab0:	f897 33aa 	ldrb.w	r3, [r7, #938]	; 0x3aa
 8012ab4:	021b      	lsls	r3, r3, #8
 8012ab6:	431a      	orrs	r2, r3
 8012ab8:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 8012abc:	4313      	orrs	r3, r2
 8012abe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012ac2:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8012ac6:	4611      	mov	r1, r2
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7fd fefb 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8012ace:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	f8c7 43ac 	str.w	r4, [r7, #940]	; 0x3ac
 8012ada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ade:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012ae0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8012ae4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012ae8:	6812      	ldr	r2, [r2, #0]
 8012aea:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012aec:	bf00      	nop
    ect_value.setLinespacing(0);
 8012aee:	1d3b      	adds	r3, r7, #4
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012af6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8012afa:	2300      	movs	r3, #0
 8012afc:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
        linespace = space;
 8012b00:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8012b04:	f8b7 23b2 	ldrh.w	r2, [r7, #946]	; 0x3b2
 8012b08:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012b0a:	bf00      	nop
    Unicode::snprintf(ect_valueBuffer, ECT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6GW0).getText());
 8012b0c:	1d3b      	adds	r3, r7, #4
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f603 34ec 	addw	r4, r3, #3052	; 0xbec
 8012b14:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012b18:	212f      	movs	r1, #47	; 0x2f
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe f9ae 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012b20:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012b24:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012b28:	4b0d      	ldr	r3, [pc, #52]	; (8012b60 <_ZN15Screen1ViewBaseC1Ev+0x1954>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d105      	bne.n	8012b3c <_ZN15Screen1ViewBaseC1Ev+0x1930>
 8012b30:	4b0c      	ldr	r3, [pc, #48]	; (8012b64 <_ZN15Screen1ViewBaseC1Ev+0x1958>)
 8012b32:	4a0d      	ldr	r2, [pc, #52]	; (8012b68 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 8012b34:	21ae      	movs	r1, #174	; 0xae
 8012b36:	480d      	ldr	r0, [pc, #52]	; (8012b6c <_ZN15Screen1ViewBaseC1Ev+0x1960>)
 8012b38:	f01b f9f2 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012b3c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8012b40:	889a      	ldrh	r2, [r3, #4]
 8012b42:	4b0b      	ldr	r3, [pc, #44]	; (8012b70 <_ZN15Screen1ViewBaseC1Ev+0x1964>)
 8012b44:	881b      	ldrh	r3, [r3, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d316      	bcc.n	8012b78 <_ZN15Screen1ViewBaseC1Ev+0x196c>
 8012b4a:	4b0a      	ldr	r3, [pc, #40]	; (8012b74 <_ZN15Screen1ViewBaseC1Ev+0x1968>)
 8012b4c:	4a06      	ldr	r2, [pc, #24]	; (8012b68 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 8012b4e:	21af      	movs	r1, #175	; 0xaf
 8012b50:	4806      	ldr	r0, [pc, #24]	; (8012b6c <_ZN15Screen1ViewBaseC1Ev+0x1960>)
 8012b52:	f01b f9e5 	bl	802df20 <__assert_func>
 8012b56:	bf00      	nop
 8012b58:	20009804 	.word	0x20009804
 8012b5c:	0802f60c 	.word	0x0802f60c
 8012b60:	200097f8 	.word	0x200097f8
 8012b64:	0802f500 	.word	0x0802f500
 8012b68:	0802f544 	.word	0x0802f544
 8012b6c:	0802f574 	.word	0x0802f574
 8012b70:	200097fc 	.word	0x200097fc
 8012b74:	0802f5b8 	.word	0x0802f5b8
    }
 8012b78:	bf00      	nop
        return texts->getText(typedTextId);
 8012b7a:	4baa      	ldr	r3, [pc, #680]	; (8012e24 <_ZN15Screen1ViewBaseC1Ev+0x1c18>)
 8012b7c:	681a      	ldr	r2, [r3, #0]
 8012b7e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012b82:	889b      	ldrh	r3, [r3, #4]
 8012b84:	4619      	mov	r1, r3
 8012b86:	4610      	mov	r0, r2
 8012b88:	f001 fcfa 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	bf00      	nop
 8012b90:	4aa5      	ldr	r2, [pc, #660]	; (8012e28 <_ZN15Screen1ViewBaseC1Ev+0x1c1c>)
 8012b92:	2120      	movs	r1, #32
 8012b94:	4620      	mov	r0, r4
 8012b96:	f00c fc0f 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012b9a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fc ffea 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    ect_value.setWildcard(ect_valueBuffer);
 8012ba4:	1d3b      	adds	r3, r7, #4
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f203 527c 	addw	r2, r3, #1404	; 0x57c
 8012bac:	1d3b      	adds	r3, r7, #4
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	4610      	mov	r0, r2
 8012bb8:	f7fe f9ee 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_value.resizeToCurrentText();
 8012bbc:	1d3b      	adds	r3, r7, #4
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f007 fa2b 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LD25));
 8012bca:	1d3b      	adds	r3, r7, #4
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012bd2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012bd6:	212e      	movs	r1, #46	; 0x2e
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe f94f 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012bde:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012be2:	4619      	mov	r1, r3
 8012be4:	4620      	mov	r0, r4
 8012be6:	f007 fa38 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012bea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fc ffc2 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    ect_label.setXY(34, 96);
 8012bf4:	1d3b      	adds	r3, r7, #4
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012bfc:	2260      	movs	r2, #96	; 0x60
 8012bfe:	2122      	movs	r1, #34	; 0x22
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fd ff2f 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    ect_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012c06:	1d3b      	adds	r3, r7, #4
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012c0e:	23ff      	movs	r3, #255	; 0xff
 8012c10:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
 8012c14:	23ff      	movs	r3, #255	; 0xff
 8012c16:	f887 33be 	strb.w	r3, [r7, #958]	; 0x3be
 8012c1a:	23ff      	movs	r3, #255	; 0xff
 8012c1c:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
 8012c20:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8012c24:	041b      	lsls	r3, r3, #16
 8012c26:	461a      	mov	r2, r3
 8012c28:	f897 33be 	ldrb.w	r3, [r7, #958]	; 0x3be
 8012c2c:	021b      	lsls	r3, r3, #8
 8012c2e:	431a      	orrs	r2, r3
 8012c30:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 8012c34:	4313      	orrs	r3, r2
 8012c36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012c3a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c3e:	4611      	mov	r1, r2
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fd fe3f 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8012c46:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 8012c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012c56:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012c58:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8012c5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c60:	6812      	ldr	r2, [r2, #0]
 8012c62:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012c64:	bf00      	nop
    ect_label.setLinespacing(0);
 8012c66:	1d3b      	adds	r3, r7, #4
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012c6e:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8012c72:	2300      	movs	r3, #0
 8012c74:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
        linespace = space;
 8012c78:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8012c7c:	f8b7 23c6 	ldrh.w	r2, [r7, #966]	; 0x3c6
 8012c80:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012c82:	bf00      	nop
    Unicode::snprintf(ect_labelBuffer, ECT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P413).getText());
 8012c84:	1d3b      	adds	r3, r7, #4
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f603 442c 	addw	r4, r3, #3116	; 0xc2c
 8012c8c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012c90:	212c      	movs	r1, #44	; 0x2c
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fe f8f2 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012c98:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012c9c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012ca0:	4b62      	ldr	r3, [pc, #392]	; (8012e2c <_ZN15Screen1ViewBaseC1Ev+0x1c20>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d105      	bne.n	8012cb4 <_ZN15Screen1ViewBaseC1Ev+0x1aa8>
 8012ca8:	4b61      	ldr	r3, [pc, #388]	; (8012e30 <_ZN15Screen1ViewBaseC1Ev+0x1c24>)
 8012caa:	4a62      	ldr	r2, [pc, #392]	; (8012e34 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012cac:	21ae      	movs	r1, #174	; 0xae
 8012cae:	4862      	ldr	r0, [pc, #392]	; (8012e38 <_ZN15Screen1ViewBaseC1Ev+0x1c2c>)
 8012cb0:	f01b f936 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012cb4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8012cb8:	889a      	ldrh	r2, [r3, #4]
 8012cba:	4b60      	ldr	r3, [pc, #384]	; (8012e3c <_ZN15Screen1ViewBaseC1Ev+0x1c30>)
 8012cbc:	881b      	ldrh	r3, [r3, #0]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d305      	bcc.n	8012cce <_ZN15Screen1ViewBaseC1Ev+0x1ac2>
 8012cc2:	4b5f      	ldr	r3, [pc, #380]	; (8012e40 <_ZN15Screen1ViewBaseC1Ev+0x1c34>)
 8012cc4:	4a5b      	ldr	r2, [pc, #364]	; (8012e34 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012cc6:	21af      	movs	r1, #175	; 0xaf
 8012cc8:	485b      	ldr	r0, [pc, #364]	; (8012e38 <_ZN15Screen1ViewBaseC1Ev+0x1c2c>)
 8012cca:	f01b f929 	bl	802df20 <__assert_func>
    }
 8012cce:	bf00      	nop
        return texts->getText(typedTextId);
 8012cd0:	4b54      	ldr	r3, [pc, #336]	; (8012e24 <_ZN15Screen1ViewBaseC1Ev+0x1c18>)
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012cd8:	889b      	ldrh	r3, [r3, #4]
 8012cda:	4619      	mov	r1, r3
 8012cdc:	4610      	mov	r0, r2
 8012cde:	f001 fc4f 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	bf00      	nop
 8012ce6:	4a50      	ldr	r2, [pc, #320]	; (8012e28 <_ZN15Screen1ViewBaseC1Ev+0x1c1c>)
 8012ce8:	210a      	movs	r1, #10
 8012cea:	4620      	mov	r0, r4
 8012cec:	f00c fb64 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012cf0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fc ff3f 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    ect_label.setWildcard(ect_labelBuffer);
 8012cfa:	1d3b      	adds	r3, r7, #4
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 8012d02:	1d3b      	adds	r3, r7, #4
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	4610      	mov	r0, r2
 8012d0e:	f7fe f943 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_label.resizeToCurrentText();
 8012d12:	1d3b      	adds	r3, r7, #4
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f007 f980 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4T7D));
 8012d20:	1d3b      	adds	r3, r7, #4
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012d28:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7fe f8a4 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012d34:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012d38:	4619      	mov	r1, r3
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f007 f98d 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012d40:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fc ff17 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    ect_units.setXY(173, 96);
 8012d4a:	1d3b      	adds	r3, r7, #4
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012d52:	2260      	movs	r2, #96	; 0x60
 8012d54:	21ad      	movs	r1, #173	; 0xad
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fd fe84 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    ect_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012d5c:	1d3b      	adds	r3, r7, #4
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012d64:	23ff      	movs	r3, #255	; 0xff
 8012d66:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
 8012d6a:	23ff      	movs	r3, #255	; 0xff
 8012d6c:	f887 33d2 	strb.w	r3, [r7, #978]	; 0x3d2
 8012d70:	23ff      	movs	r3, #255	; 0xff
 8012d72:	f887 33d1 	strb.w	r3, [r7, #977]	; 0x3d1
 8012d76:	f897 33d3 	ldrb.w	r3, [r7, #979]	; 0x3d3
 8012d7a:	041b      	lsls	r3, r3, #16
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	f897 33d2 	ldrb.w	r3, [r7, #978]	; 0x3d2
 8012d82:	021b      	lsls	r3, r3, #8
 8012d84:	431a      	orrs	r2, r3
 8012d86:	f897 33d1 	ldrb.w	r3, [r7, #977]	; 0x3d1
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012d90:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fd fd94 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8012d9c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	461a      	mov	r2, r3
 8012da4:	f8c7 43d4 	str.w	r4, [r7, #980]	; 0x3d4
 8012da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dac:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012dae:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8012db2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012db6:	6812      	ldr	r2, [r2, #0]
 8012db8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012dba:	bf00      	nop
    ect_units.setLinespacing(0);
 8012dbc:	1d3b      	adds	r3, r7, #4
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012dc4:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
        linespace = space;
 8012dce:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8012dd2:	f8b7 23da 	ldrh.w	r2, [r7, #986]	; 0x3da
 8012dd6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012dd8:	bf00      	nop
    Unicode::snprintf(ect_unitsBuffer, ECT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NFMY).getText());
 8012dda:	1d3b      	adds	r3, r7, #4
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8012de2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012de6:	212d      	movs	r1, #45	; 0x2d
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fe f847 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012dee:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012df2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012df6:	4b0d      	ldr	r3, [pc, #52]	; (8012e2c <_ZN15Screen1ViewBaseC1Ev+0x1c20>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d105      	bne.n	8012e0a <_ZN15Screen1ViewBaseC1Ev+0x1bfe>
 8012dfe:	4b0c      	ldr	r3, [pc, #48]	; (8012e30 <_ZN15Screen1ViewBaseC1Ev+0x1c24>)
 8012e00:	4a0c      	ldr	r2, [pc, #48]	; (8012e34 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012e02:	21ae      	movs	r1, #174	; 0xae
 8012e04:	480c      	ldr	r0, [pc, #48]	; (8012e38 <_ZN15Screen1ViewBaseC1Ev+0x1c2c>)
 8012e06:	f01b f88b 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012e0a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8012e0e:	889a      	ldrh	r2, [r3, #4]
 8012e10:	4b0a      	ldr	r3, [pc, #40]	; (8012e3c <_ZN15Screen1ViewBaseC1Ev+0x1c30>)
 8012e12:	881b      	ldrh	r3, [r3, #0]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d315      	bcc.n	8012e44 <_ZN15Screen1ViewBaseC1Ev+0x1c38>
 8012e18:	4b09      	ldr	r3, [pc, #36]	; (8012e40 <_ZN15Screen1ViewBaseC1Ev+0x1c34>)
 8012e1a:	4a06      	ldr	r2, [pc, #24]	; (8012e34 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012e1c:	21af      	movs	r1, #175	; 0xaf
 8012e1e:	4806      	ldr	r0, [pc, #24]	; (8012e38 <_ZN15Screen1ViewBaseC1Ev+0x1c2c>)
 8012e20:	f01b f87e 	bl	802df20 <__assert_func>
 8012e24:	20009804 	.word	0x20009804
 8012e28:	0802f60c 	.word	0x0802f60c
 8012e2c:	200097f8 	.word	0x200097f8
 8012e30:	0802f500 	.word	0x0802f500
 8012e34:	0802f544 	.word	0x0802f544
 8012e38:	0802f574 	.word	0x0802f574
 8012e3c:	200097fc 	.word	0x200097fc
 8012e40:	0802f5b8 	.word	0x0802f5b8
    }
 8012e44:	bf00      	nop
        return texts->getText(typedTextId);
 8012e46:	4baa      	ldr	r3, [pc, #680]	; (80130f0 <_ZN15Screen1ViewBaseC1Ev+0x1ee4>)
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012e4e:	889b      	ldrh	r3, [r3, #4]
 8012e50:	4619      	mov	r1, r3
 8012e52:	4610      	mov	r0, r2
 8012e54:	f001 fb94 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	bf00      	nop
 8012e5c:	4aa5      	ldr	r2, [pc, #660]	; (80130f4 <_ZN15Screen1ViewBaseC1Ev+0x1ee8>)
 8012e5e:	210a      	movs	r1, #10
 8012e60:	4620      	mov	r0, r4
 8012e62:	f00c faa9 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012e66:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fc fe84 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    ect_units.setWildcard(ect_unitsBuffer);
 8012e70:	1d3b      	adds	r3, r7, #4
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f203 52fc 	addw	r2, r3, #1532	; 0x5fc
 8012e78:	1d3b      	adds	r3, r7, #4
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8012e80:	4619      	mov	r1, r3
 8012e82:	4610      	mov	r0, r2
 8012e84:	f7fe f888 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_units.resizeToCurrentText();
 8012e88:	1d3b      	adds	r3, r7, #4
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012e90:	4618      	mov	r0, r3
 8012e92:	f007 f8c5 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ERKY));
 8012e96:	1d3b      	adds	r3, r7, #4
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012e9e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012ea2:	2101      	movs	r1, #1
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7fd ffe9 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012eaa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012eae:	4619      	mov	r1, r3
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f007 f8d2 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012eb6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7fc fe5c 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    iat_value.setXY(30, 146);
 8012ec0:	1d3b      	adds	r3, r7, #4
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012ec8:	2292      	movs	r2, #146	; 0x92
 8012eca:	211e      	movs	r1, #30
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7fd fdc9 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    iat_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012ed2:	1d3b      	adds	r3, r7, #4
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012eda:	23ff      	movs	r3, #255	; 0xff
 8012edc:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7
 8012ee0:	23ff      	movs	r3, #255	; 0xff
 8012ee2:	f887 33e6 	strb.w	r3, [r7, #998]	; 0x3e6
 8012ee6:	23ff      	movs	r3, #255	; 0xff
 8012ee8:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
 8012eec:	f897 33e7 	ldrb.w	r3, [r7, #999]	; 0x3e7
 8012ef0:	041b      	lsls	r3, r3, #16
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	f897 33e6 	ldrb.w	r3, [r7, #998]	; 0x3e6
 8012ef8:	021b      	lsls	r3, r3, #8
 8012efa:	431a      	orrs	r2, r3
 8012efc:	f897 33e5 	ldrb.w	r3, [r7, #997]	; 0x3e5
 8012f00:	4313      	orrs	r3, r2
 8012f02:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012f06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012f0a:	4611      	mov	r1, r2
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7fd fcd9 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8012f12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	461a      	mov	r2, r3
 8012f1a:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 8012f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f22:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012f24:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8012f28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f2c:	6812      	ldr	r2, [r2, #0]
 8012f2e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012f30:	bf00      	nop
    iat_value.setLinespacing(0);
 8012f32:	1d3b      	adds	r3, r7, #4
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012f3a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8012f3e:	2300      	movs	r3, #0
 8012f40:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
        linespace = space;
 8012f44:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8012f48:	f8b7 23ee 	ldrh.w	r2, [r7, #1006]	; 0x3ee
 8012f4c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012f4e:	bf00      	nop
    Unicode::snprintf(iat_valueBuffer, IAT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_H85L).getText());
 8012f50:	1d3b      	adds	r3, r7, #4
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f603 4454 	addw	r4, r3, #3156	; 0xc54
 8012f58:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012f5c:	211a      	movs	r1, #26
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fd ff8c 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8012f64:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012f68:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012f6c:	4b62      	ldr	r3, [pc, #392]	; (80130f8 <_ZN15Screen1ViewBaseC1Ev+0x1eec>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d105      	bne.n	8012f80 <_ZN15Screen1ViewBaseC1Ev+0x1d74>
 8012f74:	4b61      	ldr	r3, [pc, #388]	; (80130fc <_ZN15Screen1ViewBaseC1Ev+0x1ef0>)
 8012f76:	4a62      	ldr	r2, [pc, #392]	; (8013100 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 8012f78:	21ae      	movs	r1, #174	; 0xae
 8012f7a:	4862      	ldr	r0, [pc, #392]	; (8013104 <_ZN15Screen1ViewBaseC1Ev+0x1ef8>)
 8012f7c:	f01a ffd0 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012f80:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8012f84:	889a      	ldrh	r2, [r3, #4]
 8012f86:	4b60      	ldr	r3, [pc, #384]	; (8013108 <_ZN15Screen1ViewBaseC1Ev+0x1efc>)
 8012f88:	881b      	ldrh	r3, [r3, #0]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d305      	bcc.n	8012f9a <_ZN15Screen1ViewBaseC1Ev+0x1d8e>
 8012f8e:	4b5f      	ldr	r3, [pc, #380]	; (801310c <_ZN15Screen1ViewBaseC1Ev+0x1f00>)
 8012f90:	4a5b      	ldr	r2, [pc, #364]	; (8013100 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 8012f92:	21af      	movs	r1, #175	; 0xaf
 8012f94:	485b      	ldr	r0, [pc, #364]	; (8013104 <_ZN15Screen1ViewBaseC1Ev+0x1ef8>)
 8012f96:	f01a ffc3 	bl	802df20 <__assert_func>
    }
 8012f9a:	bf00      	nop
        return texts->getText(typedTextId);
 8012f9c:	4b54      	ldr	r3, [pc, #336]	; (80130f0 <_ZN15Screen1ViewBaseC1Ev+0x1ee4>)
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012fa4:	889b      	ldrh	r3, [r3, #4]
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	4610      	mov	r0, r2
 8012faa:	f001 fae9 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	bf00      	nop
 8012fb2:	4a50      	ldr	r2, [pc, #320]	; (80130f4 <_ZN15Screen1ViewBaseC1Ev+0x1ee8>)
 8012fb4:	2120      	movs	r1, #32
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	f00c f9fe 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012fbc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fc fdd9 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    iat_value.setWildcard(iat_valueBuffer);
 8012fc6:	1d3b      	adds	r3, r7, #4
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f203 623c 	addw	r2, r3, #1596	; 0x63c
 8012fce:	1d3b      	adds	r3, r7, #4
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	4610      	mov	r0, r2
 8012fda:	f7fd ffdd 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_value.resizeToCurrentText();
 8012fde:	1d3b      	adds	r3, r7, #4
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f007 f81a 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z15X));
 8012fec:	1d3b      	adds	r3, r7, #4
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012ff4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8012ff8:	2102      	movs	r1, #2
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fd ff3e 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013000:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8013004:	4619      	mov	r1, r3
 8013006:	4620      	mov	r0, r4
 8013008:	f007 f827 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801300c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8013010:	4618      	mov	r0, r3
 8013012:	f7fc fdb1 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    iat_label.setXY(34, 245);
 8013016:	1d3b      	adds	r3, r7, #4
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 801301e:	22f5      	movs	r2, #245	; 0xf5
 8013020:	2122      	movs	r1, #34	; 0x22
 8013022:	4618      	mov	r0, r3
 8013024:	f7fd fd1e 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    iat_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013028:	1d3b      	adds	r3, r7, #4
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8013030:	23ff      	movs	r3, #255	; 0xff
 8013032:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
 8013036:	23ff      	movs	r3, #255	; 0xff
 8013038:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
 801303c:	23ff      	movs	r3, #255	; 0xff
 801303e:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
 8013042:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8013046:	041b      	lsls	r3, r3, #16
 8013048:	461a      	mov	r2, r3
 801304a:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 801304e:	021b      	lsls	r3, r3, #8
 8013050:	431a      	orrs	r2, r3
 8013052:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 8013056:	4313      	orrs	r3, r2
 8013058:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801305c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8013060:	4611      	mov	r1, r2
 8013062:	4618      	mov	r0, r3
 8013064:	f7fd fc2e 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8013068:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	461a      	mov	r2, r3
 8013070:	f8c7 43fc 	str.w	r4, [r7, #1020]	; 0x3fc
 8013074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013078:	601a      	str	r2, [r3, #0]
        this->color = color;
 801307a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 801307e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013082:	6812      	ldr	r2, [r2, #0]
 8013084:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013086:	bf00      	nop
    iat_label.setLinespacing(0);
 8013088:	1d3b      	adds	r3, r7, #4
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013090:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8013094:	2300      	movs	r3, #0
 8013096:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
        linespace = space;
 801309a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 801309e:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 80130a2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80130a4:	bf00      	nop
    Unicode::snprintf(iat_labelBuffer, IAT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K94Y).getText());
 80130a6:	1d3b      	adds	r3, r7, #4
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f603 4494 	addw	r4, r3, #3220	; 0xc94
 80130ae:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80130b2:	212b      	movs	r1, #43	; 0x2b
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fd fee1 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80130ba:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80130be:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80130c2:	4b0d      	ldr	r3, [pc, #52]	; (80130f8 <_ZN15Screen1ViewBaseC1Ev+0x1eec>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d105      	bne.n	80130d6 <_ZN15Screen1ViewBaseC1Ev+0x1eca>
 80130ca:	4b0c      	ldr	r3, [pc, #48]	; (80130fc <_ZN15Screen1ViewBaseC1Ev+0x1ef0>)
 80130cc:	4a0c      	ldr	r2, [pc, #48]	; (8013100 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 80130ce:	21ae      	movs	r1, #174	; 0xae
 80130d0:	480c      	ldr	r0, [pc, #48]	; (8013104 <_ZN15Screen1ViewBaseC1Ev+0x1ef8>)
 80130d2:	f01a ff25 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80130d6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80130da:	889a      	ldrh	r2, [r3, #4]
 80130dc:	4b0a      	ldr	r3, [pc, #40]	; (8013108 <_ZN15Screen1ViewBaseC1Ev+0x1efc>)
 80130de:	881b      	ldrh	r3, [r3, #0]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d315      	bcc.n	8013110 <_ZN15Screen1ViewBaseC1Ev+0x1f04>
 80130e4:	4b09      	ldr	r3, [pc, #36]	; (801310c <_ZN15Screen1ViewBaseC1Ev+0x1f00>)
 80130e6:	4a06      	ldr	r2, [pc, #24]	; (8013100 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 80130e8:	21af      	movs	r1, #175	; 0xaf
 80130ea:	4806      	ldr	r0, [pc, #24]	; (8013104 <_ZN15Screen1ViewBaseC1Ev+0x1ef8>)
 80130ec:	f01a ff18 	bl	802df20 <__assert_func>
 80130f0:	20009804 	.word	0x20009804
 80130f4:	0802f60c 	.word	0x0802f60c
 80130f8:	200097f8 	.word	0x200097f8
 80130fc:	0802f500 	.word	0x0802f500
 8013100:	0802f544 	.word	0x0802f544
 8013104:	0802f574 	.word	0x0802f574
 8013108:	200097fc 	.word	0x200097fc
 801310c:	0802f5b8 	.word	0x0802f5b8
    }
 8013110:	bf00      	nop
        return texts->getText(typedTextId);
 8013112:	4bab      	ldr	r3, [pc, #684]	; (80133c0 <_ZN15Screen1ViewBaseC1Ev+0x21b4>)
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801311a:	889b      	ldrh	r3, [r3, #4]
 801311c:	4619      	mov	r1, r3
 801311e:	4610      	mov	r0, r2
 8013120:	f001 fa2e 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8013124:	4603      	mov	r3, r0
 8013126:	bf00      	nop
 8013128:	4aa6      	ldr	r2, [pc, #664]	; (80133c4 <_ZN15Screen1ViewBaseC1Ev+0x21b8>)
 801312a:	210a      	movs	r1, #10
 801312c:	4620      	mov	r0, r4
 801312e:	f00c f943 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013132:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8013136:	4618      	mov	r0, r3
 8013138:	f7fc fd1e 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    iat_label.setWildcard(iat_labelBuffer);
 801313c:	1d3b      	adds	r3, r7, #4
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f203 627c 	addw	r2, r3, #1660	; 0x67c
 8013144:	1d3b      	adds	r3, r7, #4
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f603 4394 	addw	r3, r3, #3220	; 0xc94
 801314c:	4619      	mov	r1, r3
 801314e:	4610      	mov	r0, r2
 8013150:	f7fd ff22 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_label.resizeToCurrentText();
 8013154:	1d3b      	adds	r3, r7, #4
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 801315c:	4618      	mov	r0, r3
 801315e:	f006 ff5f 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S5UQ));
 8013162:	1d3b      	adds	r3, r7, #4
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 801316a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801316e:	2104      	movs	r1, #4
 8013170:	4618      	mov	r0, r3
 8013172:	f7fd fe83 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013176:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801317a:	4619      	mov	r1, r3
 801317c:	4620      	mov	r0, r4
 801317e:	f006 ff6c 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013182:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8013186:	4618      	mov	r0, r3
 8013188:	f7fc fcf6 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    iat_units.setXY(123, 245);
 801318c:	1d3b      	adds	r3, r7, #4
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013194:	22f5      	movs	r2, #245	; 0xf5
 8013196:	217b      	movs	r1, #123	; 0x7b
 8013198:	4618      	mov	r0, r3
 801319a:	f7fd fc63 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    iat_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801319e:	1d3b      	adds	r3, r7, #4
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 80131a6:	23ff      	movs	r3, #255	; 0xff
 80131a8:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 80131ac:	23ff      	movs	r3, #255	; 0xff
 80131ae:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
 80131b2:	23ff      	movs	r3, #255	; 0xff
 80131b4:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
 80131b8:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80131bc:	041b      	lsls	r3, r3, #16
 80131be:	461a      	mov	r2, r3
 80131c0:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80131c4:	021b      	lsls	r3, r3, #8
 80131c6:	431a      	orrs	r2, r3
 80131c8:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80131cc:	4313      	orrs	r3, r2
 80131ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80131d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80131d6:	4611      	mov	r1, r2
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fd fb73 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80131de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	461a      	mov	r2, r3
 80131e6:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 80131ea:	f107 0320 	add.w	r3, r7, #32
 80131ee:	601a      	str	r2, [r3, #0]
        this->color = color;
 80131f0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80131f4:	f107 0220 	add.w	r2, r7, #32
 80131f8:	6812      	ldr	r2, [r2, #0]
 80131fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80131fc:	bf00      	nop
    iat_units.setLinespacing(0);
 80131fe:	1d3b      	adds	r3, r7, #4
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013206:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 801320a:	2300      	movs	r3, #0
 801320c:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
        linespace = space;
 8013210:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8013214:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8013218:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801321a:	bf00      	nop
    Unicode::snprintf(iat_unitsBuffer, IAT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S9CZ).getText());
 801321c:	1d3b      	adds	r3, r7, #4
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f603 44a8 	addw	r4, r3, #3240	; 0xca8
 8013224:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8013228:	212a      	movs	r1, #42	; 0x2a
 801322a:	4618      	mov	r0, r3
 801322c:	f7fd fe26 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013230:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8013234:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013238:	4b63      	ldr	r3, [pc, #396]	; (80133c8 <_ZN15Screen1ViewBaseC1Ev+0x21bc>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d105      	bne.n	801324c <_ZN15Screen1ViewBaseC1Ev+0x2040>
 8013240:	4b62      	ldr	r3, [pc, #392]	; (80133cc <_ZN15Screen1ViewBaseC1Ev+0x21c0>)
 8013242:	4a63      	ldr	r2, [pc, #396]	; (80133d0 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 8013244:	21ae      	movs	r1, #174	; 0xae
 8013246:	4863      	ldr	r0, [pc, #396]	; (80133d4 <_ZN15Screen1ViewBaseC1Ev+0x21c8>)
 8013248:	f01a fe6a 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801324c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8013250:	889a      	ldrh	r2, [r3, #4]
 8013252:	4b61      	ldr	r3, [pc, #388]	; (80133d8 <_ZN15Screen1ViewBaseC1Ev+0x21cc>)
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	429a      	cmp	r2, r3
 8013258:	d305      	bcc.n	8013266 <_ZN15Screen1ViewBaseC1Ev+0x205a>
 801325a:	4b60      	ldr	r3, [pc, #384]	; (80133dc <_ZN15Screen1ViewBaseC1Ev+0x21d0>)
 801325c:	4a5c      	ldr	r2, [pc, #368]	; (80133d0 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 801325e:	21af      	movs	r1, #175	; 0xaf
 8013260:	485c      	ldr	r0, [pc, #368]	; (80133d4 <_ZN15Screen1ViewBaseC1Ev+0x21c8>)
 8013262:	f01a fe5d 	bl	802df20 <__assert_func>
    }
 8013266:	bf00      	nop
        return texts->getText(typedTextId);
 8013268:	4b55      	ldr	r3, [pc, #340]	; (80133c0 <_ZN15Screen1ViewBaseC1Ev+0x21b4>)
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8013270:	889b      	ldrh	r3, [r3, #4]
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f001 f983 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801327a:	4603      	mov	r3, r0
 801327c:	bf00      	nop
 801327e:	4a51      	ldr	r2, [pc, #324]	; (80133c4 <_ZN15Screen1ViewBaseC1Ev+0x21b8>)
 8013280:	210a      	movs	r1, #10
 8013282:	4620      	mov	r0, r4
 8013284:	f00c f898 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013288:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801328c:	4618      	mov	r0, r3
 801328e:	f7fc fc73 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    iat_units.setWildcard(iat_unitsBuffer);
 8013292:	1d3b      	adds	r3, r7, #4
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f203 62bc 	addw	r2, r3, #1724	; 0x6bc
 801329a:	1d3b      	adds	r3, r7, #4
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 80132a2:	4619      	mov	r1, r3
 80132a4:	4610      	mov	r0, r2
 80132a6:	f7fd fe77 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_units.resizeToCurrentText();
 80132aa:	1d3b      	adds	r3, r7, #4
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80132b2:	4618      	mov	r0, r3
 80132b4:	f006 feb4 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XBZK));
 80132b8:	1d3b      	adds	r3, r7, #4
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 80132c0:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80132c4:	2103      	movs	r1, #3
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fd fdd8 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80132cc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80132d0:	4619      	mov	r1, r3
 80132d2:	4620      	mov	r0, r4
 80132d4:	f006 fec1 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80132d8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fc fc4b 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_value.setXY(30, 298);
 80132e2:	1d3b      	adds	r3, r7, #4
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80132ea:	f44f 7295 	mov.w	r2, #298	; 0x12a
 80132ee:	211e      	movs	r1, #30
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fd fbb7 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80132f6:	1d3b      	adds	r3, r7, #4
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 80132fe:	23ff      	movs	r3, #255	; 0xff
 8013300:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
 8013304:	23ff      	movs	r3, #255	; 0xff
 8013306:	f887 3422 	strb.w	r3, [r7, #1058]	; 0x422
 801330a:	23ff      	movs	r3, #255	; 0xff
 801330c:	f887 3421 	strb.w	r3, [r7, #1057]	; 0x421
 8013310:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 8013314:	041b      	lsls	r3, r3, #16
 8013316:	461a      	mov	r2, r3
 8013318:	f897 3422 	ldrb.w	r3, [r7, #1058]	; 0x422
 801331c:	021b      	lsls	r3, r3, #8
 801331e:	431a      	orrs	r2, r3
 8013320:	f897 3421 	ldrb.w	r3, [r7, #1057]	; 0x421
 8013324:	4313      	orrs	r3, r2
 8013326:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801332a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801332e:	4611      	mov	r1, r2
 8013330:	4618      	mov	r0, r3
 8013332:	f7fd fac7 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8013336:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	461a      	mov	r2, r3
 801333e:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
 8013342:	f107 031c 	add.w	r3, r7, #28
 8013346:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013348:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801334c:	f107 021c 	add.w	r2, r7, #28
 8013350:	6812      	ldr	r2, [r2, #0]
 8013352:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013354:	bf00      	nop
    oilp_value.setLinespacing(0);
 8013356:	1d3b      	adds	r3, r7, #4
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 801335e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8013362:	2300      	movs	r3, #0
 8013364:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
        linespace = space;
 8013368:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801336c:	f8b7 242a 	ldrh.w	r2, [r7, #1066]	; 0x42a
 8013370:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013372:	bf00      	nop
    Unicode::snprintf(oilp_valueBuffer, OILP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DHUY).getText());
 8013374:	1d3b      	adds	r3, r7, #4
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	f603 44bc 	addw	r4, r3, #3260	; 0xcbc
 801337c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8013380:	211b      	movs	r1, #27
 8013382:	4618      	mov	r0, r3
 8013384:	f7fd fd7a 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013388:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801338c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013390:	4b0d      	ldr	r3, [pc, #52]	; (80133c8 <_ZN15Screen1ViewBaseC1Ev+0x21bc>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d105      	bne.n	80133a4 <_ZN15Screen1ViewBaseC1Ev+0x2198>
 8013398:	4b0c      	ldr	r3, [pc, #48]	; (80133cc <_ZN15Screen1ViewBaseC1Ev+0x21c0>)
 801339a:	4a0d      	ldr	r2, [pc, #52]	; (80133d0 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 801339c:	21ae      	movs	r1, #174	; 0xae
 801339e:	480d      	ldr	r0, [pc, #52]	; (80133d4 <_ZN15Screen1ViewBaseC1Ev+0x21c8>)
 80133a0:	f01a fdbe 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80133a4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80133a8:	889a      	ldrh	r2, [r3, #4]
 80133aa:	4b0b      	ldr	r3, [pc, #44]	; (80133d8 <_ZN15Screen1ViewBaseC1Ev+0x21cc>)
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d316      	bcc.n	80133e0 <_ZN15Screen1ViewBaseC1Ev+0x21d4>
 80133b2:	4b0a      	ldr	r3, [pc, #40]	; (80133dc <_ZN15Screen1ViewBaseC1Ev+0x21d0>)
 80133b4:	4a06      	ldr	r2, [pc, #24]	; (80133d0 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 80133b6:	21af      	movs	r1, #175	; 0xaf
 80133b8:	4806      	ldr	r0, [pc, #24]	; (80133d4 <_ZN15Screen1ViewBaseC1Ev+0x21c8>)
 80133ba:	f01a fdb1 	bl	802df20 <__assert_func>
 80133be:	bf00      	nop
 80133c0:	20009804 	.word	0x20009804
 80133c4:	0802f60c 	.word	0x0802f60c
 80133c8:	200097f8 	.word	0x200097f8
 80133cc:	0802f500 	.word	0x0802f500
 80133d0:	0802f544 	.word	0x0802f544
 80133d4:	0802f574 	.word	0x0802f574
 80133d8:	200097fc 	.word	0x200097fc
 80133dc:	0802f5b8 	.word	0x0802f5b8
    }
 80133e0:	bf00      	nop
        return texts->getText(typedTextId);
 80133e2:	4bab      	ldr	r3, [pc, #684]	; (8013690 <_ZN15Screen1ViewBaseC1Ev+0x2484>)
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80133ea:	889b      	ldrh	r3, [r3, #4]
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	f001 f8c6 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 80133f4:	4603      	mov	r3, r0
 80133f6:	bf00      	nop
 80133f8:	4aa6      	ldr	r2, [pc, #664]	; (8013694 <_ZN15Screen1ViewBaseC1Ev+0x2488>)
 80133fa:	2120      	movs	r1, #32
 80133fc:	4620      	mov	r0, r4
 80133fe:	f00b ffdb 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013402:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8013406:	4618      	mov	r0, r3
 8013408:	f7fc fbb6 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_value.setWildcard(oilp_valueBuffer);
 801340c:	1d3b      	adds	r3, r7, #4
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f203 62fc 	addw	r2, r3, #1788	; 0x6fc
 8013414:	1d3b      	adds	r3, r7, #4
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 801341c:	4619      	mov	r1, r3
 801341e:	4610      	mov	r0, r2
 8013420:	f7fd fdba 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_value.resizeToCurrentText();
 8013424:	1d3b      	adds	r3, r7, #4
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 801342c:	4618      	mov	r0, r3
 801342e:	f006 fdf7 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GFHB));
 8013432:	1d3b      	adds	r3, r7, #4
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 801343a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801343e:	2105      	movs	r1, #5
 8013440:	4618      	mov	r0, r3
 8013442:	f7fd fd1b 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013446:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801344a:	4619      	mov	r1, r3
 801344c:	4620      	mov	r0, r4
 801344e:	f006 fe04 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013452:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8013456:	4618      	mov	r0, r3
 8013458:	f7fc fb8e 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_label.setXY(34, 399);
 801345c:	1d3b      	adds	r3, r7, #4
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013464:	f240 128f 	movw	r2, #399	; 0x18f
 8013468:	2122      	movs	r1, #34	; 0x22
 801346a:	4618      	mov	r0, r3
 801346c:	f7fd fafa 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013470:	1d3b      	adds	r3, r7, #4
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 8013478:	23ff      	movs	r3, #255	; 0xff
 801347a:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
 801347e:	23ff      	movs	r3, #255	; 0xff
 8013480:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
 8013484:	23ff      	movs	r3, #255	; 0xff
 8013486:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
 801348a:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 801348e:	041b      	lsls	r3, r3, #16
 8013490:	461a      	mov	r2, r3
 8013492:	f897 3436 	ldrb.w	r3, [r7, #1078]	; 0x436
 8013496:	021b      	lsls	r3, r3, #8
 8013498:	431a      	orrs	r2, r3
 801349a:	f897 3435 	ldrb.w	r3, [r7, #1077]	; 0x435
 801349e:	4313      	orrs	r3, r2
 80134a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80134a4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80134a8:	4611      	mov	r1, r2
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7fd fa0a 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80134b0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	461a      	mov	r2, r3
 80134b8:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 80134bc:	f107 0318 	add.w	r3, r7, #24
 80134c0:	601a      	str	r2, [r3, #0]
        this->color = color;
 80134c2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80134c6:	f107 0218 	add.w	r2, r7, #24
 80134ca:	6812      	ldr	r2, [r2, #0]
 80134cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80134ce:	bf00      	nop
    oilp_label.setLinespacing(0);
 80134d0:	1d3b      	adds	r3, r7, #4
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80134d8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80134dc:	2300      	movs	r3, #0
 80134de:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        linespace = space;
 80134e2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80134e6:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 80134ea:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80134ec:	bf00      	nop
    Unicode::snprintf(oilp_labelBuffer, OILP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9VHS).getText());
 80134ee:	1d3b      	adds	r3, r7, #4
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	f603 44fc 	addw	r4, r3, #3324	; 0xcfc
 80134f6:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80134fa:	2129      	movs	r1, #41	; 0x29
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7fd fcbd 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013502:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8013506:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801350a:	4b63      	ldr	r3, [pc, #396]	; (8013698 <_ZN15Screen1ViewBaseC1Ev+0x248c>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d105      	bne.n	801351e <_ZN15Screen1ViewBaseC1Ev+0x2312>
 8013512:	4b62      	ldr	r3, [pc, #392]	; (801369c <_ZN15Screen1ViewBaseC1Ev+0x2490>)
 8013514:	4a62      	ldr	r2, [pc, #392]	; (80136a0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 8013516:	21ae      	movs	r1, #174	; 0xae
 8013518:	4862      	ldr	r0, [pc, #392]	; (80136a4 <_ZN15Screen1ViewBaseC1Ev+0x2498>)
 801351a:	f01a fd01 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801351e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8013522:	889a      	ldrh	r2, [r3, #4]
 8013524:	4b60      	ldr	r3, [pc, #384]	; (80136a8 <_ZN15Screen1ViewBaseC1Ev+0x249c>)
 8013526:	881b      	ldrh	r3, [r3, #0]
 8013528:	429a      	cmp	r2, r3
 801352a:	d305      	bcc.n	8013538 <_ZN15Screen1ViewBaseC1Ev+0x232c>
 801352c:	4b5f      	ldr	r3, [pc, #380]	; (80136ac <_ZN15Screen1ViewBaseC1Ev+0x24a0>)
 801352e:	4a5c      	ldr	r2, [pc, #368]	; (80136a0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 8013530:	21af      	movs	r1, #175	; 0xaf
 8013532:	485c      	ldr	r0, [pc, #368]	; (80136a4 <_ZN15Screen1ViewBaseC1Ev+0x2498>)
 8013534:	f01a fcf4 	bl	802df20 <__assert_func>
    }
 8013538:	bf00      	nop
        return texts->getText(typedTextId);
 801353a:	4b55      	ldr	r3, [pc, #340]	; (8013690 <_ZN15Screen1ViewBaseC1Ev+0x2484>)
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8013542:	889b      	ldrh	r3, [r3, #4]
 8013544:	4619      	mov	r1, r3
 8013546:	4610      	mov	r0, r2
 8013548:	f001 f81a 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801354c:	4603      	mov	r3, r0
 801354e:	bf00      	nop
 8013550:	4a50      	ldr	r2, [pc, #320]	; (8013694 <_ZN15Screen1ViewBaseC1Ev+0x2488>)
 8013552:	210a      	movs	r1, #10
 8013554:	4620      	mov	r0, r4
 8013556:	f00b ff2f 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801355a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801355e:	4618      	mov	r0, r3
 8013560:	f7fc fb0a 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_label.setWildcard(oilp_labelBuffer);
 8013564:	1d3b      	adds	r3, r7, #4
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f203 723c 	addw	r2, r3, #1852	; 0x73c
 801356c:	1d3b      	adds	r3, r7, #4
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 8013574:	4619      	mov	r1, r3
 8013576:	4610      	mov	r0, r2
 8013578:	f7fd fd0e 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_label.resizeToCurrentText();
 801357c:	1d3b      	adds	r3, r7, #4
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013584:	4618      	mov	r0, r3
 8013586:	f006 fd4b 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BVOP));
 801358a:	1d3b      	adds	r3, r7, #4
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 8013592:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8013596:	2107      	movs	r1, #7
 8013598:	4618      	mov	r0, r3
 801359a:	f7fd fc6f 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801359e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80135a2:	4619      	mov	r1, r3
 80135a4:	4620      	mov	r0, r4
 80135a6:	f006 fd58 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80135aa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fc fae2 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_units.setXY(141, 399);
 80135b4:	1d3b      	adds	r3, r7, #4
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80135bc:	f240 128f 	movw	r2, #399	; 0x18f
 80135c0:	218d      	movs	r1, #141	; 0x8d
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7fd fa4e 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80135c8:	1d3b      	adds	r3, r7, #4
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 80135d0:	23ff      	movs	r3, #255	; 0xff
 80135d2:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 80135d6:	23ff      	movs	r3, #255	; 0xff
 80135d8:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 80135dc:	23ff      	movs	r3, #255	; 0xff
 80135de:	f887 3449 	strb.w	r3, [r7, #1097]	; 0x449
 80135e2:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 80135e6:	041b      	lsls	r3, r3, #16
 80135e8:	461a      	mov	r2, r3
 80135ea:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 80135ee:	021b      	lsls	r3, r3, #8
 80135f0:	431a      	orrs	r2, r3
 80135f2:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 80135f6:	4313      	orrs	r3, r2
 80135f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80135fc:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013600:	4611      	mov	r1, r2
 8013602:	4618      	mov	r0, r3
 8013604:	f7fd f95e 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8013608:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	461a      	mov	r2, r3
 8013610:	f8c7 444c 	str.w	r4, [r7, #1100]	; 0x44c
 8013614:	f107 0314 	add.w	r3, r7, #20
 8013618:	601a      	str	r2, [r3, #0]
        this->color = color;
 801361a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801361e:	f107 0214 	add.w	r2, r7, #20
 8013622:	6812      	ldr	r2, [r2, #0]
 8013624:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013626:	bf00      	nop
    oilp_units.setLinespacing(0);
 8013628:	1d3b      	adds	r3, r7, #4
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013630:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8013634:	2300      	movs	r3, #0
 8013636:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
        linespace = space;
 801363a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 801363e:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	; 0x452
 8013642:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013644:	bf00      	nop
    Unicode::snprintf(oilp_unitsBuffer, OILP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9IGG).getText());
 8013646:	1d3b      	adds	r3, r7, #4
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f503 6451 	add.w	r4, r3, #3344	; 0xd10
 801364e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8013652:	2128      	movs	r1, #40	; 0x28
 8013654:	4618      	mov	r0, r3
 8013656:	f7fd fc11 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801365a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801365e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013662:	4b0d      	ldr	r3, [pc, #52]	; (8013698 <_ZN15Screen1ViewBaseC1Ev+0x248c>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d105      	bne.n	8013676 <_ZN15Screen1ViewBaseC1Ev+0x246a>
 801366a:	4b0c      	ldr	r3, [pc, #48]	; (801369c <_ZN15Screen1ViewBaseC1Ev+0x2490>)
 801366c:	4a0c      	ldr	r2, [pc, #48]	; (80136a0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 801366e:	21ae      	movs	r1, #174	; 0xae
 8013670:	480c      	ldr	r0, [pc, #48]	; (80136a4 <_ZN15Screen1ViewBaseC1Ev+0x2498>)
 8013672:	f01a fc55 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013676:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801367a:	889a      	ldrh	r2, [r3, #4]
 801367c:	4b0a      	ldr	r3, [pc, #40]	; (80136a8 <_ZN15Screen1ViewBaseC1Ev+0x249c>)
 801367e:	881b      	ldrh	r3, [r3, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d315      	bcc.n	80136b0 <_ZN15Screen1ViewBaseC1Ev+0x24a4>
 8013684:	4b09      	ldr	r3, [pc, #36]	; (80136ac <_ZN15Screen1ViewBaseC1Ev+0x24a0>)
 8013686:	4a06      	ldr	r2, [pc, #24]	; (80136a0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 8013688:	21af      	movs	r1, #175	; 0xaf
 801368a:	4806      	ldr	r0, [pc, #24]	; (80136a4 <_ZN15Screen1ViewBaseC1Ev+0x2498>)
 801368c:	f01a fc48 	bl	802df20 <__assert_func>
 8013690:	20009804 	.word	0x20009804
 8013694:	0802f60c 	.word	0x0802f60c
 8013698:	200097f8 	.word	0x200097f8
 801369c:	0802f500 	.word	0x0802f500
 80136a0:	0802f544 	.word	0x0802f544
 80136a4:	0802f574 	.word	0x0802f574
 80136a8:	200097fc 	.word	0x200097fc
 80136ac:	0802f5b8 	.word	0x0802f5b8
    }
 80136b0:	bf00      	nop
        return texts->getText(typedTextId);
 80136b2:	4bab      	ldr	r3, [pc, #684]	; (8013960 <_ZN15Screen1ViewBaseC1Ev+0x2754>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80136ba:	889b      	ldrh	r3, [r3, #4]
 80136bc:	4619      	mov	r1, r3
 80136be:	4610      	mov	r0, r2
 80136c0:	f000 ff5e 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 80136c4:	4603      	mov	r3, r0
 80136c6:	bf00      	nop
 80136c8:	4aa6      	ldr	r2, [pc, #664]	; (8013964 <_ZN15Screen1ViewBaseC1Ev+0x2758>)
 80136ca:	210a      	movs	r1, #10
 80136cc:	4620      	mov	r0, r4
 80136ce:	f00b fe73 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80136d2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fc fa4e 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_units.setWildcard(oilp_unitsBuffer);
 80136dc:	1d3b      	adds	r3, r7, #4
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 80136e4:	1d3b      	adds	r3, r7, #4
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80136ec:	4619      	mov	r1, r3
 80136ee:	4610      	mov	r0, r2
 80136f0:	f7fd fc52 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_units.resizeToCurrentText();
 80136f4:	1d3b      	adds	r3, r7, #4
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80136fc:	4618      	mov	r0, r3
 80136fe:	f006 fc8f 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R7A4));
 8013702:	1d3b      	adds	r3, r7, #4
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 801370a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801370e:	2106      	movs	r1, #6
 8013710:	4618      	mov	r0, r3
 8013712:	f7fd fbb3 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013716:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801371a:	4619      	mov	r1, r3
 801371c:	4620      	mov	r0, r4
 801371e:	f006 fc9c 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013722:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8013726:	4618      	mov	r0, r3
 8013728:	f7fc fa26 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_value.setXY(30, 450);
 801372c:	1d3b      	adds	r3, r7, #4
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013734:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8013738:	211e      	movs	r1, #30
 801373a:	4618      	mov	r0, r3
 801373c:	f7fd f992 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013740:	1d3b      	adds	r3, r7, #4
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8013748:	23ff      	movs	r3, #255	; 0xff
 801374a:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 801374e:	23ff      	movs	r3, #255	; 0xff
 8013750:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8013754:	23ff      	movs	r3, #255	; 0xff
 8013756:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
 801375a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 801375e:	041b      	lsls	r3, r3, #16
 8013760:	461a      	mov	r2, r3
 8013762:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 8013766:	021b      	lsls	r3, r3, #8
 8013768:	431a      	orrs	r2, r3
 801376a:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 801376e:	4313      	orrs	r3, r2
 8013770:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8013778:	4611      	mov	r1, r2
 801377a:	4618      	mov	r0, r3
 801377c:	f7fd f8a2 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8013780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 801378c:	f107 0310 	add.w	r3, r7, #16
 8013790:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013792:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8013796:	f107 0210 	add.w	r2, r7, #16
 801379a:	6812      	ldr	r2, [r2, #0]
 801379c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801379e:	bf00      	nop
    fuelp_value.setLinespacing(0);
 80137a0:	1d3b      	adds	r3, r7, #4
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80137a8:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80137ac:	2300      	movs	r3, #0
 80137ae:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
        linespace = space;
 80137b2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80137b6:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 80137ba:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80137bc:	bf00      	nop
    Unicode::snprintf(fuelp_valueBuffer, FUELP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C87O).getText());
 80137be:	1d3b      	adds	r3, r7, #4
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f603 5424 	addw	r4, r3, #3364	; 0xd24
 80137c6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80137ca:	211c      	movs	r1, #28
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fd fb55 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80137d2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80137d6:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80137da:	4b63      	ldr	r3, [pc, #396]	; (8013968 <_ZN15Screen1ViewBaseC1Ev+0x275c>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d105      	bne.n	80137ee <_ZN15Screen1ViewBaseC1Ev+0x25e2>
 80137e2:	4b62      	ldr	r3, [pc, #392]	; (801396c <_ZN15Screen1ViewBaseC1Ev+0x2760>)
 80137e4:	4a62      	ldr	r2, [pc, #392]	; (8013970 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 80137e6:	21ae      	movs	r1, #174	; 0xae
 80137e8:	4862      	ldr	r0, [pc, #392]	; (8013974 <_ZN15Screen1ViewBaseC1Ev+0x2768>)
 80137ea:	f01a fb99 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80137ee:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80137f2:	889a      	ldrh	r2, [r3, #4]
 80137f4:	4b60      	ldr	r3, [pc, #384]	; (8013978 <_ZN15Screen1ViewBaseC1Ev+0x276c>)
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d305      	bcc.n	8013808 <_ZN15Screen1ViewBaseC1Ev+0x25fc>
 80137fc:	4b5f      	ldr	r3, [pc, #380]	; (801397c <_ZN15Screen1ViewBaseC1Ev+0x2770>)
 80137fe:	4a5c      	ldr	r2, [pc, #368]	; (8013970 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 8013800:	21af      	movs	r1, #175	; 0xaf
 8013802:	485c      	ldr	r0, [pc, #368]	; (8013974 <_ZN15Screen1ViewBaseC1Ev+0x2768>)
 8013804:	f01a fb8c 	bl	802df20 <__assert_func>
    }
 8013808:	bf00      	nop
        return texts->getText(typedTextId);
 801380a:	4b55      	ldr	r3, [pc, #340]	; (8013960 <_ZN15Screen1ViewBaseC1Ev+0x2754>)
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8013812:	889b      	ldrh	r3, [r3, #4]
 8013814:	4619      	mov	r1, r3
 8013816:	4610      	mov	r0, r2
 8013818:	f000 feb2 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801381c:	4603      	mov	r3, r0
 801381e:	bf00      	nop
 8013820:	4a50      	ldr	r2, [pc, #320]	; (8013964 <_ZN15Screen1ViewBaseC1Ev+0x2758>)
 8013822:	2120      	movs	r1, #32
 8013824:	4620      	mov	r0, r4
 8013826:	f00b fdc7 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801382a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801382e:	4618      	mov	r0, r3
 8013830:	f7fc f9a2 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_value.setWildcard(fuelp_valueBuffer);
 8013834:	1d3b      	adds	r3, r7, #4
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 801383c:	1d3b      	adds	r3, r7, #4
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f603 5324 	addw	r3, r3, #3364	; 0xd24
 8013844:	4619      	mov	r1, r3
 8013846:	4610      	mov	r0, r2
 8013848:	f7fd fba6 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_value.resizeToCurrentText();
 801384c:	1d3b      	adds	r3, r7, #4
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013854:	4618      	mov	r0, r3
 8013856:	f006 fbe3 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0AFA));
 801385a:	1d3b      	adds	r3, r7, #4
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8013862:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8013866:	2108      	movs	r1, #8
 8013868:	4618      	mov	r0, r3
 801386a:	f7fd fb07 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801386e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8013872:	4619      	mov	r1, r3
 8013874:	4620      	mov	r0, r4
 8013876:	f006 fbf0 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801387a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801387e:	4618      	mov	r0, r3
 8013880:	f7fc f97a 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_label.setXY(34, 550);
 8013884:	1d3b      	adds	r3, r7, #4
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 801388c:	f240 2226 	movw	r2, #550	; 0x226
 8013890:	2122      	movs	r1, #34	; 0x22
 8013892:	4618      	mov	r0, r3
 8013894:	f7fd f8e6 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013898:	1d3b      	adds	r3, r7, #4
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 80138a0:	23ff      	movs	r3, #255	; 0xff
 80138a2:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
 80138a6:	23ff      	movs	r3, #255	; 0xff
 80138a8:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
 80138ac:	23ff      	movs	r3, #255	; 0xff
 80138ae:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 80138b2:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80138b6:	041b      	lsls	r3, r3, #16
 80138b8:	461a      	mov	r2, r3
 80138ba:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 80138be:	021b      	lsls	r3, r3, #8
 80138c0:	431a      	orrs	r2, r3
 80138c2:	f897 3471 	ldrb.w	r3, [r7, #1137]	; 0x471
 80138c6:	4313      	orrs	r3, r2
 80138c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80138cc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fc fff6 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 80138d8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	461a      	mov	r2, r3
 80138e0:	f8c7 4474 	str.w	r4, [r7, #1140]	; 0x474
 80138e4:	f107 030c 	add.w	r3, r7, #12
 80138e8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80138ea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80138ee:	f107 020c 	add.w	r2, r7, #12
 80138f2:	6812      	ldr	r2, [r2, #0]
 80138f4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80138f6:	bf00      	nop
    fuelp_label.setLinespacing(0);
 80138f8:	1d3b      	adds	r3, r7, #4
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013900:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8013904:	2300      	movs	r3, #0
 8013906:	f8a7 347a 	strh.w	r3, [r7, #1146]	; 0x47a
        linespace = space;
 801390a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 801390e:	f8b7 247a 	ldrh.w	r2, [r7, #1146]	; 0x47a
 8013912:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013914:	bf00      	nop
    Unicode::snprintf(fuelp_labelBuffer, FUELP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4VJ9).getText());
 8013916:	1d3b      	adds	r3, r7, #4
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f603 5464 	addw	r4, r3, #3428	; 0xd64
 801391e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8013922:	2127      	movs	r1, #39	; 0x27
 8013924:	4618      	mov	r0, r3
 8013926:	f7fd faa9 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 801392a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801392e:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013932:	4b0d      	ldr	r3, [pc, #52]	; (8013968 <_ZN15Screen1ViewBaseC1Ev+0x275c>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d105      	bne.n	8013946 <_ZN15Screen1ViewBaseC1Ev+0x273a>
 801393a:	4b0c      	ldr	r3, [pc, #48]	; (801396c <_ZN15Screen1ViewBaseC1Ev+0x2760>)
 801393c:	4a0c      	ldr	r2, [pc, #48]	; (8013970 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 801393e:	21ae      	movs	r1, #174	; 0xae
 8013940:	480c      	ldr	r0, [pc, #48]	; (8013974 <_ZN15Screen1ViewBaseC1Ev+0x2768>)
 8013942:	f01a faed 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013946:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 801394a:	889a      	ldrh	r2, [r3, #4]
 801394c:	4b0a      	ldr	r3, [pc, #40]	; (8013978 <_ZN15Screen1ViewBaseC1Ev+0x276c>)
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d315      	bcc.n	8013980 <_ZN15Screen1ViewBaseC1Ev+0x2774>
 8013954:	4b09      	ldr	r3, [pc, #36]	; (801397c <_ZN15Screen1ViewBaseC1Ev+0x2770>)
 8013956:	4a06      	ldr	r2, [pc, #24]	; (8013970 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 8013958:	21af      	movs	r1, #175	; 0xaf
 801395a:	4806      	ldr	r0, [pc, #24]	; (8013974 <_ZN15Screen1ViewBaseC1Ev+0x2768>)
 801395c:	f01a fae0 	bl	802df20 <__assert_func>
 8013960:	20009804 	.word	0x20009804
 8013964:	0802f60c 	.word	0x0802f60c
 8013968:	200097f8 	.word	0x200097f8
 801396c:	0802f500 	.word	0x0802f500
 8013970:	0802f544 	.word	0x0802f544
 8013974:	0802f574 	.word	0x0802f574
 8013978:	200097fc 	.word	0x200097fc
 801397c:	0802f5b8 	.word	0x0802f5b8
    }
 8013980:	bf00      	nop
        return texts->getText(typedTextId);
 8013982:	4b56      	ldr	r3, [pc, #344]	; (8013adc <_ZN15Screen1ViewBaseC1Ev+0x28d0>)
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801398a:	889b      	ldrh	r3, [r3, #4]
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f000 fdf6 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8013994:	4603      	mov	r3, r0
 8013996:	bf00      	nop
 8013998:	4a51      	ldr	r2, [pc, #324]	; (8013ae0 <_ZN15Screen1ViewBaseC1Ev+0x28d4>)
 801399a:	210a      	movs	r1, #10
 801399c:	4620      	mov	r0, r4
 801399e:	f00b fd0b 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80139a2:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fc f8e6 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_label.setWildcard(fuelp_labelBuffer);
 80139ac:	1d3b      	adds	r3, r7, #4
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 80139b4:	1d3b      	adds	r3, r7, #4
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f603 5364 	addw	r3, r3, #3428	; 0xd64
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7fd faea 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_label.resizeToCurrentText();
 80139c4:	1d3b      	adds	r3, r7, #4
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80139cc:	4618      	mov	r0, r3
 80139ce:	f006 fb27 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MPLH));
 80139d2:	1d3b      	adds	r3, r7, #4
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 80139da:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80139de:	210a      	movs	r1, #10
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fd fa4b 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 80139e6:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80139ea:	4619      	mov	r1, r3
 80139ec:	4620      	mov	r0, r4
 80139ee:	f006 fb34 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80139f2:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fc f8be 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_units.setXY(259, 550);
 80139fc:	1d3b      	adds	r3, r7, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013a04:	f240 2226 	movw	r2, #550	; 0x226
 8013a08:	f240 1103 	movw	r1, #259	; 0x103
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fd f829 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013a12:	1d3b      	adds	r3, r7, #4
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 8013a1a:	23ff      	movs	r3, #255	; 0xff
 8013a1c:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
 8013a20:	23ff      	movs	r3, #255	; 0xff
 8013a22:	f887 3486 	strb.w	r3, [r7, #1158]	; 0x486
 8013a26:	23ff      	movs	r3, #255	; 0xff
 8013a28:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
 8013a2c:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 8013a30:	041b      	lsls	r3, r3, #16
 8013a32:	461a      	mov	r2, r3
 8013a34:	f897 3486 	ldrb.w	r3, [r7, #1158]	; 0x486
 8013a38:	021b      	lsls	r3, r3, #8
 8013a3a:	431a      	orrs	r2, r3
 8013a3c:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 8013a40:	4313      	orrs	r3, r2
 8013a42:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013a46:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fc ff39 	bl	80108c4 <_ZN8touchgfx9colortypeC1Em>
 8013a52:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	461a      	mov	r2, r3
 8013a5a:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 8013a5e:	f107 0308 	add.w	r3, r7, #8
 8013a62:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013a64:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8013a68:	f107 0208 	add.w	r2, r7, #8
 8013a6c:	6812      	ldr	r2, [r2, #0]
 8013a6e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013a70:	bf00      	nop
    fuelp_units.setLinespacing(0);
 8013a72:	1d3b      	adds	r3, r7, #4
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013a7a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8013a7e:	2300      	movs	r3, #0
 8013a80:	f8a7 348e 	strh.w	r3, [r7, #1166]	; 0x48e
        linespace = space;
 8013a84:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8013a88:	f8b7 248e 	ldrh.w	r2, [r7, #1166]	; 0x48e
 8013a8c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013a8e:	bf00      	nop
    Unicode::snprintf(fuelp_unitsBuffer, FUELP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L52U).getText());
 8013a90:	1d3b      	adds	r3, r7, #4
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	f603 5478 	addw	r4, r3, #3448	; 0xd78
 8013a98:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013a9c:	2126      	movs	r1, #38	; 0x26
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fd f9ec 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013aa4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013aa8:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013aac:	4b0d      	ldr	r3, [pc, #52]	; (8013ae4 <_ZN15Screen1ViewBaseC1Ev+0x28d8>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d105      	bne.n	8013ac0 <_ZN15Screen1ViewBaseC1Ev+0x28b4>
 8013ab4:	4b0c      	ldr	r3, [pc, #48]	; (8013ae8 <_ZN15Screen1ViewBaseC1Ev+0x28dc>)
 8013ab6:	4a0d      	ldr	r2, [pc, #52]	; (8013aec <_ZN15Screen1ViewBaseC1Ev+0x28e0>)
 8013ab8:	21ae      	movs	r1, #174	; 0xae
 8013aba:	480d      	ldr	r0, [pc, #52]	; (8013af0 <_ZN15Screen1ViewBaseC1Ev+0x28e4>)
 8013abc:	f01a fa30 	bl	802df20 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013ac0:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8013ac4:	889a      	ldrh	r2, [r3, #4]
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <_ZN15Screen1ViewBaseC1Ev+0x28e8>)
 8013ac8:	881b      	ldrh	r3, [r3, #0]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d316      	bcc.n	8013afc <_ZN15Screen1ViewBaseC1Ev+0x28f0>
 8013ace:	4b0a      	ldr	r3, [pc, #40]	; (8013af8 <_ZN15Screen1ViewBaseC1Ev+0x28ec>)
 8013ad0:	4a06      	ldr	r2, [pc, #24]	; (8013aec <_ZN15Screen1ViewBaseC1Ev+0x28e0>)
 8013ad2:	21af      	movs	r1, #175	; 0xaf
 8013ad4:	4806      	ldr	r0, [pc, #24]	; (8013af0 <_ZN15Screen1ViewBaseC1Ev+0x28e4>)
 8013ad6:	f01a fa23 	bl	802df20 <__assert_func>
 8013ada:	bf00      	nop
 8013adc:	20009804 	.word	0x20009804
 8013ae0:	0802f60c 	.word	0x0802f60c
 8013ae4:	200097f8 	.word	0x200097f8
 8013ae8:	0802f500 	.word	0x0802f500
 8013aec:	0802f544 	.word	0x0802f544
 8013af0:	0802f574 	.word	0x0802f574
 8013af4:	200097fc 	.word	0x200097fc
 8013af8:	0802f5b8 	.word	0x0802f5b8
    }
 8013afc:	bf00      	nop
        return texts->getText(typedTextId);
 8013afe:	4bd9      	ldr	r3, [pc, #868]	; (8013e64 <_ZN15Screen1ViewBaseC1Ev+0x2c58>)
 8013b00:	681a      	ldr	r2, [r3, #0]
 8013b02:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013b06:	889b      	ldrh	r3, [r3, #4]
 8013b08:	4619      	mov	r1, r3
 8013b0a:	4610      	mov	r0, r2
 8013b0c:	f000 fd38 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8013b10:	4603      	mov	r3, r0
 8013b12:	bf00      	nop
 8013b14:	4ad4      	ldr	r2, [pc, #848]	; (8013e68 <_ZN15Screen1ViewBaseC1Ev+0x2c5c>)
 8013b16:	210a      	movs	r1, #10
 8013b18:	4620      	mov	r0, r4
 8013b1a:	f00b fc4d 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013b1e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fc f828 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_units.setWildcard(fuelp_unitsBuffer);
 8013b28:	1d3b      	adds	r3, r7, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f603 023c 	addw	r2, r3, #2108	; 0x83c
 8013b30:	1d3b      	adds	r3, r7, #4
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f603 5378 	addw	r3, r3, #3448	; 0xd78
 8013b38:	4619      	mov	r1, r3
 8013b3a:	4610      	mov	r0, r2
 8013b3c:	f7fd fa2c 	bl	8010f98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_units.resizeToCurrentText();
 8013b40:	1d3b      	adds	r3, r7, #4
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f006 fa69 	bl	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_INAE));
 8013b4e:	1d3b      	adds	r3, r7, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 8013b56:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013b5a:	2109      	movs	r1, #9
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fd f98d 	bl	8010e7c <_ZN8touchgfx9TypedTextC1Et>
 8013b62:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013b66:	4619      	mov	r1, r3
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f006 fa76 	bl	801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013b6e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7fc f800 	bl	800fb78 <_ZN8touchgfx9TypedTextD1Ev>

    gauge1.setPosition(226, 0, 600, 600);
 8013b78:	1d3b      	adds	r3, r7, #4
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013b80:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013b84:	9300      	str	r3, [sp, #0]
 8013b86:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	21e2      	movs	r1, #226	; 0xe2
 8013b8e:	f7fc ff2a 	bl	80109e6 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(305, 300);
 8013b92:	1d3b      	adds	r3, r7, #4
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013b9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013b9e:	f240 1131 	movw	r1, #305	; 0x131
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f006 fbf9 	bl	801a39a <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(0, 240);
 8013ba8:	1d3b      	adds	r3, r7, #4
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013bb0:	22f0      	movs	r2, #240	; 0xf0
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f006 fc75 	bl	801a4a4 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 8000);
 8013bba:	1d3b      	adds	r3, r7, #4
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013bcc:	2100      	movs	r1, #0
 8013bce:	f003 f9ff 	bl	8016fd0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8013bd2:	1d3b      	adds	r3, r7, #4
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013bda:	2100      	movs	r1, #0
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f006 fc0b 	bl	801a3f8 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_BLUE_GAUGES_ORIGINAL_GAUGE_FILL_STYLE_01_ID, 13, 18);
 8013be2:	1d3b      	adds	r3, r7, #4
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013bea:	2312      	movs	r3, #18
 8013bec:	220d      	movs	r2, #13
 8013bee:	2101      	movs	r1, #1
 8013bf0:	f006 fbbe 	bl	801a370 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 8013bf4:	1d3b      	adds	r3, r7, #4
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f006 fb58 	bl	801a2b4 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 8013c04:	1d3b      	adds	r3, r7, #4
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f006 fb53 	bl	801a2ba <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    image2.setXY(672, 252);
 8013c14:	1d3b      	adds	r3, r7, #4
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013c1c:	22fc      	movs	r2, #252	; 0xfc
 8013c1e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fc ff1e 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDUINO1_ID));
 8013c28:	1d3b      	adds	r3, r7, #4
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8013c30:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8013c34:	2111      	movs	r1, #17
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fc fe6a 	bl	8010910 <_ZN8touchgfx6BitmapC1Et>
 8013c3c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8013c40:	4619      	mov	r1, r3
 8013c42:	4620      	mov	r0, r4
 8013c44:	f006 fd46 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8013c48:	1d3b      	adds	r3, r7, #4
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	1d3b      	adds	r3, r7, #4
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3340      	adds	r3, #64	; 0x40
 8013c52:	4619      	mov	r1, r3
 8013c54:	4610      	mov	r0, r2
 8013c56:	f7fd f853 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8013c5a:	1d3b      	adds	r3, r7, #4
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	1d3b      	adds	r3, r7, #4
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	336c      	adds	r3, #108	; 0x6c
 8013c64:	4619      	mov	r1, r3
 8013c66:	4610      	mov	r0, r2
 8013c68:	f7fd f84a 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8013c6c:	1d3b      	adds	r3, r7, #4
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	1d3b      	adds	r3, r7, #4
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	3398      	adds	r3, #152	; 0x98
 8013c76:	4619      	mov	r1, r3
 8013c78:	4610      	mov	r0, r2
 8013c7a:	f7fd f841 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLeft);
 8013c7e:	1d3b      	adds	r3, r7, #4
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	1d3b      	adds	r3, r7, #4
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	33c4      	adds	r3, #196	; 0xc4
 8013c88:	4619      	mov	r1, r3
 8013c8a:	4610      	mov	r0, r2
 8013c8c:	f7fd f838 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indRight);
 8013c90:	1d3b      	adds	r3, r7, #4
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	1d3b      	adds	r3, r7, #4
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	33f0      	adds	r3, #240	; 0xf0
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	4610      	mov	r0, r2
 8013c9e:	f7fd f82f 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indHigh);
 8013ca2:	1d3b      	adds	r3, r7, #4
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	1d3b      	adds	r3, r7, #4
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013cae:	4619      	mov	r1, r3
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	f7fd f825 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indFuel);
 8013cb6:	1d3b      	adds	r3, r7, #4
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	1d3b      	adds	r3, r7, #4
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	4610      	mov	r0, r2
 8013cc6:	f7fd f81b 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indOil);
 8013cca:	1d3b      	adds	r3, r7, #4
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	1d3b      	adds	r3, r7, #4
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	4610      	mov	r0, r2
 8013cda:	f7fd f811 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indBatt);
 8013cde:	1d3b      	adds	r3, r7, #4
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	1d3b      	adds	r3, r7, #4
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013cea:	4619      	mov	r1, r3
 8013cec:	4610      	mov	r0, r2
 8013cee:	f7fd f807 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indPark);
 8013cf2:	1d3b      	adds	r3, r7, #4
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	1d3b      	adds	r3, r7, #4
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013cfe:	4619      	mov	r1, r3
 8013d00:	4610      	mov	r0, r2
 8013d02:	f7fc fffd 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indDTC);
 8013d06:	1d3b      	adds	r3, r7, #4
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	1d3b      	adds	r3, r7, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013d12:	4619      	mov	r1, r3
 8013d14:	4610      	mov	r0, r2
 8013d16:	f7fc fff3 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indECT);
 8013d1a:	1d3b      	adds	r3, r7, #4
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	1d3b      	adds	r3, r7, #4
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013d26:	4619      	mov	r1, r3
 8013d28:	4610      	mov	r0, r2
 8013d2a:	f7fc ffe9 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLow);
 8013d2e:	1d3b      	adds	r3, r7, #4
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	1d3b      	adds	r3, r7, #4
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4610      	mov	r0, r2
 8013d3e:	f7fc ffdf 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_value);
 8013d42:	1d3b      	adds	r3, r7, #4
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	1d3b      	adds	r3, r7, #4
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8013d4e:	4619      	mov	r1, r3
 8013d50:	4610      	mov	r0, r2
 8013d52:	f7fc ffd5 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_label);
 8013d56:	1d3b      	adds	r3, r7, #4
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	1d3b      	adds	r3, r7, #4
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013d62:	4619      	mov	r1, r3
 8013d64:	4610      	mov	r0, r2
 8013d66:	f7fc ffcb 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_units);
 8013d6a:	1d3b      	adds	r3, r7, #4
 8013d6c:	681a      	ldr	r2, [r3, #0]
 8013d6e:	1d3b      	adds	r3, r7, #4
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013d76:	4619      	mov	r1, r3
 8013d78:	4610      	mov	r0, r2
 8013d7a:	f7fc ffc1 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_value);
 8013d7e:	1d3b      	adds	r3, r7, #4
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	1d3b      	adds	r3, r7, #4
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	4610      	mov	r0, r2
 8013d8e:	f7fc ffb7 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_label);
 8013d92:	1d3b      	adds	r3, r7, #4
 8013d94:	681a      	ldr	r2, [r3, #0]
 8013d96:	1d3b      	adds	r3, r7, #4
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8013d9e:	4619      	mov	r1, r3
 8013da0:	4610      	mov	r0, r2
 8013da2:	f7fc ffad 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_units);
 8013da6:	1d3b      	adds	r3, r7, #4
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	1d3b      	adds	r3, r7, #4
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013db2:	4619      	mov	r1, r3
 8013db4:	4610      	mov	r0, r2
 8013db6:	f7fc ffa3 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_value);
 8013dba:	1d3b      	adds	r3, r7, #4
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	1d3b      	adds	r3, r7, #4
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	4610      	mov	r0, r2
 8013dca:	f7fc ff99 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_label);
 8013dce:	1d3b      	adds	r3, r7, #4
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	1d3b      	adds	r3, r7, #4
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8013dda:	4619      	mov	r1, r3
 8013ddc:	4610      	mov	r0, r2
 8013dde:	f7fc ff8f 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_units);
 8013de2:	1d3b      	adds	r3, r7, #4
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	1d3b      	adds	r3, r7, #4
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8013dee:	4619      	mov	r1, r3
 8013df0:	4610      	mov	r0, r2
 8013df2:	f7fc ff85 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_value);
 8013df6:	1d3b      	adds	r3, r7, #4
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	1d3b      	adds	r3, r7, #4
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8013e02:	4619      	mov	r1, r3
 8013e04:	4610      	mov	r0, r2
 8013e06:	f7fc ff7b 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_label);
 8013e0a:	1d3b      	adds	r3, r7, #4
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	1d3b      	adds	r3, r7, #4
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8013e16:	4619      	mov	r1, r3
 8013e18:	4610      	mov	r0, r2
 8013e1a:	f7fc ff71 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_units);
 8013e1e:	1d3b      	adds	r3, r7, #4
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	1d3b      	adds	r3, r7, #4
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	4610      	mov	r0, r2
 8013e2e:	f7fc ff67 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_value);
 8013e32:	1d3b      	adds	r3, r7, #4
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	1d3b      	adds	r3, r7, #4
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8013e3e:	4619      	mov	r1, r3
 8013e40:	4610      	mov	r0, r2
 8013e42:	f7fc ff5d 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_label);
 8013e46:	1d3b      	adds	r3, r7, #4
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	1d3b      	adds	r3, r7, #4
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8013e52:	4619      	mov	r1, r3
 8013e54:	4610      	mov	r0, r2
 8013e56:	f7fc ff53 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_units);
 8013e5a:	1d3b      	adds	r3, r7, #4
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	1d3b      	adds	r3, r7, #4
 8013e60:	e004      	b.n	8013e6c <_ZN15Screen1ViewBaseC1Ev+0x2c60>
 8013e62:	bf00      	nop
 8013e64:	20009804 	.word	0x20009804
 8013e68:	0802f60c 	.word	0x0802f60c
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8013e72:	4619      	mov	r1, r3
 8013e74:	4610      	mov	r0, r2
 8013e76:	f7fc ff43 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_value);
 8013e7a:	1d3b      	adds	r3, r7, #4
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	1d3b      	adds	r3, r7, #4
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8013e86:	4619      	mov	r1, r3
 8013e88:	4610      	mov	r0, r2
 8013e8a:	f7fc ff39 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_label);
 8013e8e:	1d3b      	adds	r3, r7, #4
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	1d3b      	adds	r3, r7, #4
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	4610      	mov	r0, r2
 8013e9e:	f7fc ff2f 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_units);
 8013ea2:	1d3b      	adds	r3, r7, #4
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	1d3b      	adds	r3, r7, #4
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013eae:	4619      	mov	r1, r3
 8013eb0:	4610      	mov	r0, r2
 8013eb2:	f7fc ff25 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_value);
 8013eb6:	1d3b      	adds	r3, r7, #4
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	1d3b      	adds	r3, r7, #4
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	4610      	mov	r0, r2
 8013ec6:	f7fc ff1b 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_label);
 8013eca:	1d3b      	adds	r3, r7, #4
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	1d3b      	adds	r3, r7, #4
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	4610      	mov	r0, r2
 8013eda:	f7fc ff11 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_units);
 8013ede:	1d3b      	adds	r3, r7, #4
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	1d3b      	adds	r3, r7, #4
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013eea:	4619      	mov	r1, r3
 8013eec:	4610      	mov	r0, r2
 8013eee:	f7fc ff07 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_value);
 8013ef2:	1d3b      	adds	r3, r7, #4
 8013ef4:	681a      	ldr	r2, [r3, #0]
 8013ef6:	1d3b      	adds	r3, r7, #4
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013efe:	4619      	mov	r1, r3
 8013f00:	4610      	mov	r0, r2
 8013f02:	f7fc fefd 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_label);
 8013f06:	1d3b      	adds	r3, r7, #4
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	1d3b      	adds	r3, r7, #4
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013f12:	4619      	mov	r1, r3
 8013f14:	4610      	mov	r0, r2
 8013f16:	f7fc fef3 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_units);
 8013f1a:	1d3b      	adds	r3, r7, #4
 8013f1c:	681a      	ldr	r2, [r3, #0]
 8013f1e:	1d3b      	adds	r3, r7, #4
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013f26:	4619      	mov	r1, r3
 8013f28:	4610      	mov	r0, r2
 8013f2a:	f7fc fee9 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8013f2e:	1d3b      	adds	r3, r7, #4
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	1d3b      	adds	r3, r7, #4
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f7fc fedf 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8013f42:	1d3b      	adds	r3, r7, #4
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	1d3b      	adds	r3, r7, #4
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013f4e:	4619      	mov	r1, r3
 8013f50:	4610      	mov	r0, r2
 8013f52:	f7fc fed5 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013f56:	1d3b      	adds	r3, r7, #4
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f207 479c 	addw	r7, r7, #1180	; 0x49c
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd90      	pop	{r4, r7, pc}

08013f64 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013f64:	b480      	push	{r7}
 8013f66:	b083      	sub	sp, #12
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]

}
 8013f6c:	bf00      	nop
 8013f6e:	370c      	adds	r7, #12
 8013f70:	46bd      	mov	sp, r7
 8013f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f76:	4770      	bx	lr

08013f78 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f009 fbc0 	bl	801d708 <_ZN8touchgfx6ScreenC1Ev>
 8013f88:	4a05      	ldr	r2, [pc, #20]	; (8013fa0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	601a      	str	r2, [r3, #0]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2200      	movs	r2, #0
 8013f92:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4618      	mov	r0, r3
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	0803007c 	.word	0x0803007c

08013fa4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	4a05      	ldr	r2, [pc, #20]	; (8013fc4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	601a      	str	r2, [r3, #0]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fc fceb 	bl	8010990 <_ZN8touchgfx8DrawableD1Ev>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}
 8013fc4:	08030b10 	.word	0x08030b10

08013fc8 <_ZN8touchgfx9ContainerD0Ev>:
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff ffe7 	bl	8013fa4 <_ZN8touchgfx9ContainerD1Ev>
 8013fd6:	212c      	movs	r1, #44	; 0x2c
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f019 f982 	bl	802d2e2 <_ZdlPvj>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	4a05      	ldr	r2, [pc, #20]	; (8014008 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	601a      	str	r2, [r3, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fc fec5 	bl	8010d88 <_ZN8touchgfx6WidgetD1Ev>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4618      	mov	r0, r3
 8014002:	3708      	adds	r7, #8
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	0803198c 	.word	0x0803198c

0801400c <_ZN8touchgfx3BoxD0Ev>:
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f7ff ffe7 	bl	8013fe8 <_ZN8touchgfx3BoxD1Ev>
 801401a:	212c      	movs	r1, #44	; 0x2c
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f019 f960 	bl	802d2e2 <_ZdlPvj>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	4618      	mov	r0, r3
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	4a05      	ldr	r2, [pc, #20]	; (801404c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	601a      	str	r2, [r3, #0]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	f7fc fea3 	bl	8010d88 <_ZN8touchgfx6WidgetD1Ev>
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	4618      	mov	r0, r3
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	08031bfc 	.word	0x08031bfc

08014050 <_ZN8touchgfx5ImageD0Ev>:
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7ff ffe7 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 801405e:	212c      	movs	r1, #44	; 0x2c
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f019 f93e 	bl	802d2e2 <_ZdlPvj>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4618      	mov	r0, r3
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	4a05      	ldr	r2, [pc, #20]	; (8014090 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	4618      	mov	r0, r3
 8014082:	f7fc ff4b 	bl	8010f1c <_ZN8touchgfx8TextAreaD1Ev>
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	4618      	mov	r0, r3
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	08031b54 	.word	0x08031b54

08014094 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7ff ffe7 	bl	8014070 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80140a2:	2140      	movs	r1, #64	; 0x40
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f019 f91c 	bl	802d2e2 <_ZdlPvj>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	4a0a      	ldr	r2, [pc, #40]	; (80140e8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	601a      	str	r2, [r3, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	3358      	adds	r3, #88	; 0x58
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7ff ff6c 	bl	8013fa4 <_ZN8touchgfx9ContainerD1Ev>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	332c      	adds	r3, #44	; 0x2c
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7ff ffab 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4618      	mov	r0, r3
 80140da:	f7ff ff63 	bl	8013fa4 <_ZN8touchgfx9ContainerD1Ev>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	4618      	mov	r0, r3
 80140e2:	3708      	adds	r7, #8
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	0803091c 	.word	0x0803091c

080140ec <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f7ff ffdd 	bl	80140b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80140fa:	21b4      	movs	r1, #180	; 0xb4
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f019 f8f0 	bl	802d2e2 <_ZdlPvj>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4618      	mov	r0, r3
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	4a05      	ldr	r2, [pc, #20]	; (801412c <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	4618      	mov	r0, r3
 801411e:	f7ff ff85 	bl	801402c <_ZN8touchgfx5ImageD1Ev>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	08031714 	.word	0x08031714

08014130 <_ZN8touchgfx13TextureMapperD0Ev>:
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f7ff ffe7 	bl	801410c <_ZN8touchgfx13TextureMapperD1Ev>
 801413e:	2190      	movs	r1, #144	; 0x90
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f019 f8ce 	bl	802d2e2 <_ZdlPvj>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	4618      	mov	r0, r3
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	4a05      	ldr	r2, [pc, #20]	; (8014170 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	601a      	str	r2, [r3, #0]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	4618      	mov	r0, r3
 8014162:	f7fc fe11 	bl	8010d88 <_ZN8touchgfx6WidgetD1Ev>
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4618      	mov	r0, r3
 801416a:	3708      	adds	r7, #8
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	08031648 	.word	0x08031648

08014174 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7ff ffe7 	bl	8014150 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014182:	2130      	movs	r1, #48	; 0x30
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f019 f8ac 	bl	802d2e2 <_ZdlPvj>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	4618      	mov	r0, r3
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}

08014194 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	4a05      	ldr	r2, [pc, #20]	; (80141b4 <_ZN8touchgfx6CircleD1Ev+0x20>)
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	601a      	str	r2, [r3, #0]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7ff ffd3 	bl	8014150 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	4618      	mov	r0, r3
 80141ae:	3708      	adds	r7, #8
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	08031568 	.word	0x08031568

080141b8 <_ZN8touchgfx6CircleD0Ev>:
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f7ff ffe7 	bl	8014194 <_ZN8touchgfx6CircleD1Ev>
 80141c6:	214c      	movs	r1, #76	; 0x4c
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f019 f88a 	bl	802d2e2 <_ZdlPvj>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	4618      	mov	r0, r3
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	4a0b      	ldr	r2, [pc, #44]	; (8014210 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	601a      	str	r2, [r3, #0]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7ff ffd1 	bl	8014194 <_ZN8touchgfx6CircleD1Ev>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	33b4      	adds	r3, #180	; 0xb4
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7ff ff88 	bl	801410c <_ZN8touchgfx13TextureMapperD1Ev>
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	4618      	mov	r0, r3
 8014200:	f7ff ff58 	bl	80140b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	4618      	mov	r0, r3
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	08031a34 	.word	0x08031a34

08014214 <_ZN8touchgfx5GaugeD0Ev>:
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7ff ffdb 	bl	80141d8 <_ZN8touchgfx5GaugeD1Ev>
 8014222:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f019 f85b 	bl	802d2e2 <_ZdlPvj>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	4618      	mov	r0, r3
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
	...

08014238 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014238:	b480      	push	{r7}
 801423a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801423c:	4b02      	ldr	r3, [pc, #8]	; (8014248 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801423e:	4618      	mov	r0, r3
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	0803010c 	.word	0x0803010c

0801424c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801424c:	b480      	push	{r7}
 801424e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014250:	2312      	movs	r3, #18
}
 8014252:	4618      	mov	r0, r3
 8014254:	46bd      	mov	sp, r7
 8014256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425a:	4770      	bx	lr

0801425c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	460b      	mov	r3, r1
 8014266:	607a      	str	r2, [r7, #4]
 8014268:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801426a:	2300      	movs	r3, #0
    }
 801426c:	4618      	mov	r0, r3
 801426e:	3714      	adds	r7, #20
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr

08014278 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014280:	2300      	movs	r3, #0
    }
 8014282:	4618      	mov	r0, r3
 8014284:	370c      	adds	r7, #12
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr

0801428e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801428e:	b480      	push	{r7}
 8014290:	b083      	sub	sp, #12
 8014292:	af00      	add	r7, sp, #0
 8014294:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014296:	2300      	movs	r3, #0
    }
 8014298:	4618      	mov	r0, r3
 801429a:	370c      	adds	r7, #12
 801429c:	46bd      	mov	sp, r7
 801429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a2:	4770      	bx	lr

080142a4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80142a4:	b480      	push	{r7}
 80142a6:	b085      	sub	sp, #20
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	4613      	mov	r3, r2
 80142b0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80142b2:	4a07      	ldr	r2, [pc, #28]	; (80142d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80142b8:	4a06      	ldr	r2, [pc, #24]	; (80142d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80142be:	4a06      	ldr	r2, [pc, #24]	; (80142d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80142c0:	88fb      	ldrh	r3, [r7, #6]
 80142c2:	8013      	strh	r3, [r2, #0]
    }
 80142c4:	bf00      	nop
 80142c6:	3714      	adds	r7, #20
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr
 80142d0:	200097f8 	.word	0x200097f8
 80142d4:	20009800 	.word	0x20009800
 80142d8:	200097fc 	.word	0x200097fc

080142dc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80142dc:	b40e      	push	{r1, r2, r3}
 80142de:	b580      	push	{r7, lr}
 80142e0:	b085      	sub	sp, #20
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80142e6:	f107 0320 	add.w	r3, r7, #32
 80142ea:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	69fa      	ldr	r2, [r7, #28]
 80142f0:	2100      	movs	r1, #0
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f008 fda0 	bl	801ce38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80142f8:	4603      	mov	r3, r0
 80142fa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80142fc:	89fb      	ldrh	r3, [r7, #14]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3714      	adds	r7, #20
 8014302:	46bd      	mov	sp, r7
 8014304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014308:	b003      	add	sp, #12
 801430a:	4770      	bx	lr

0801430c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801430c:	b40c      	push	{r2, r3}
 801430e:	b580      	push	{r7, lr}
 8014310:	b084      	sub	sp, #16
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
 8014316:	460b      	mov	r3, r1
 8014318:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801431a:	f107 031c 	add.w	r3, r7, #28
 801431e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8014320:	78f9      	ldrb	r1, [r7, #3]
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	69ba      	ldr	r2, [r7, #24]
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f008 fd86 	bl	801ce38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801432c:	4603      	mov	r3, r0
 801432e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8014330:	89fb      	ldrh	r3, [r7, #14]
}
 8014332:	4618      	mov	r0, r3
 8014334:	3710      	adds	r7, #16
 8014336:	46bd      	mov	sp, r7
 8014338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801433c:	b002      	add	sp, #8
 801433e:	4770      	bx	lr

08014340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b08a      	sub	sp, #40	; 0x28
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	460b      	mov	r3, r1
 801434a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014350:	2b00      	cmp	r3, #0
 8014352:	d016      	beq.n	8014382 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	3322      	adds	r3, #34	; 0x22
 8014358:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	8adb      	ldrh	r3, [r3, #22]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d105      	bne.n	801436e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014362:	4b43      	ldr	r3, [pc, #268]	; (8014470 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014364:	4a43      	ldr	r2, [pc, #268]	; (8014474 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014366:	21c0      	movs	r1, #192	; 0xc0
 8014368:	4843      	ldr	r0, [pc, #268]	; (8014478 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801436a:	f019 fdd9 	bl	802df20 <__assert_func>
            return buffer[pos];
 801436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014370:	8a9b      	ldrh	r3, [r3, #20]
 8014372:	461a      	mov	r2, r3
 8014374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014376:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d001      	beq.n	8014382 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801437e:	2301      	movs	r3, #1
 8014380:	e000      	b.n	8014384 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8014382:	2300      	movs	r3, #0
 8014384:	2b00      	cmp	r3, #0
 8014386:	d06a      	beq.n	801445e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f00a f905 	bl	801e598 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	3322      	adds	r3, #34	; 0x22
 8014392:	623b      	str	r3, [r7, #32]
 8014394:	2301      	movs	r3, #1
 8014396:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014398:	6a3b      	ldr	r3, [r7, #32]
 801439a:	8adb      	ldrh	r3, [r3, #22]
 801439c:	8bfa      	ldrh	r2, [r7, #30]
 801439e:	429a      	cmp	r2, r3
 80143a0:	d305      	bcc.n	80143ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80143a2:	4b36      	ldr	r3, [pc, #216]	; (801447c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80143a4:	4a36      	ldr	r2, [pc, #216]	; (8014480 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80143a6:	21c5      	movs	r1, #197	; 0xc5
 80143a8:	4833      	ldr	r0, [pc, #204]	; (8014478 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80143aa:	f019 fdb9 	bl	802df20 <__assert_func>
            const uint16_t index = pos + offset;
 80143ae:	6a3b      	ldr	r3, [r7, #32]
 80143b0:	8a9a      	ldrh	r2, [r3, #20]
 80143b2:	8bfb      	ldrh	r3, [r7, #30]
 80143b4:	4413      	add	r3, r2
 80143b6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80143b8:	8bbb      	ldrh	r3, [r7, #28]
 80143ba:	2b09      	cmp	r3, #9
 80143bc:	d801      	bhi.n	80143c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80143be:	8bbb      	ldrh	r3, [r7, #28]
 80143c0:	e001      	b.n	80143c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80143c2:	8bbb      	ldrh	r3, [r7, #28]
 80143c4:	3b0a      	subs	r3, #10
 80143c6:	6a3a      	ldr	r2, [r7, #32]
 80143c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143cc:	f640 123f 	movw	r2, #2367	; 0x93f
 80143d0:	4293      	cmp	r3, r2
 80143d2:	bf0c      	ite	eq
 80143d4:	2301      	moveq	r3, #1
 80143d6:	2300      	movne	r3, #0
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d03f      	beq.n	801445e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	3322      	adds	r3, #34	; 0x22
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	3222      	adds	r2, #34	; 0x22
 80143e6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80143e8:	68ba      	ldr	r2, [r7, #8]
 80143ea:	8ad2      	ldrh	r2, [r2, #22]
 80143ec:	2a00      	cmp	r2, #0
 80143ee:	d105      	bne.n	80143fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80143f0:	4b1f      	ldr	r3, [pc, #124]	; (8014470 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80143f2:	4a20      	ldr	r2, [pc, #128]	; (8014474 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80143f4:	21c0      	movs	r1, #192	; 0xc0
 80143f6:	4820      	ldr	r0, [pc, #128]	; (8014478 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80143f8:	f019 fd92 	bl	802df20 <__assert_func>
            return buffer[pos];
 80143fc:	68ba      	ldr	r2, [r7, #8]
 80143fe:	8a92      	ldrh	r2, [r2, #20]
 8014400:	4611      	mov	r1, r2
 8014402:	68ba      	ldr	r2, [r7, #8]
 8014404:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014408:	613b      	str	r3, [r7, #16]
 801440a:	4613      	mov	r3, r2
 801440c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	8adb      	ldrh	r3, [r3, #22]
 8014412:	2b01      	cmp	r3, #1
 8014414:	d806      	bhi.n	8014424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8014416:	4b1b      	ldr	r3, [pc, #108]	; (8014484 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8014418:	4a1b      	ldr	r2, [pc, #108]	; (8014488 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801441a:	f240 110d 	movw	r1, #269	; 0x10d
 801441e:	4816      	ldr	r0, [pc, #88]	; (8014478 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014420:	f019 fd7e 	bl	802df20 <__assert_func>
            const uint16_t index = pos + 1;
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	8a9b      	ldrh	r3, [r3, #20]
 8014428:	3301      	adds	r3, #1
 801442a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 801442c:	89bb      	ldrh	r3, [r7, #12]
 801442e:	2b09      	cmp	r3, #9
 8014430:	d801      	bhi.n	8014436 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8014432:	89bb      	ldrh	r3, [r7, #12]
 8014434:	e000      	b.n	8014438 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8014436:	2300      	movs	r3, #0
 8014438:	693a      	ldr	r2, [r7, #16]
 801443a:	89f9      	ldrh	r1, [r7, #14]
 801443c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8014440:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	3322      	adds	r3, #34	; 0x22
 8014446:	61bb      	str	r3, [r7, #24]
 8014448:	f640 133f 	movw	r3, #2367	; 0x93f
 801444c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801444e:	69bb      	ldr	r3, [r7, #24]
 8014450:	8a9b      	ldrh	r3, [r3, #20]
 8014452:	4619      	mov	r1, r3
 8014454:	69bb      	ldr	r3, [r7, #24]
 8014456:	8afa      	ldrh	r2, [r7, #22]
 8014458:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 801445c:	bf00      	nop
        }
    }
    return getNextChar();
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f009 ff7e 	bl	801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014464:	4603      	mov	r3, r0
}
 8014466:	4618      	mov	r0, r3
 8014468:	3728      	adds	r7, #40	; 0x28
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	0802f610 	.word	0x0802f610
 8014474:	0802f61c 	.word	0x0802f61c
 8014478:	0802f6c8 	.word	0x0802f6c8
 801447c:	0802f710 	.word	0x0802f710
 8014480:	0802f720 	.word	0x0802f720
 8014484:	0802f7f4 	.word	0x0802f7f4
 8014488:	0802f800 	.word	0x0802f800

0801448c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f009 ff1b 	bl	801e2d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801449a:	bf00      	nop
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b088      	sub	sp, #32
 80144a6:	af02      	add	r7, sp, #8
 80144a8:	60f8      	str	r0, [r7, #12]
 80144aa:	1d38      	adds	r0, r7, #4
 80144ac:	e880 0006 	stmia.w	r0, {r1, r2}
 80144b0:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80144b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80144b6:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80144b8:	1d39      	adds	r1, r7, #4
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	9301      	str	r3, [sp, #4]
 80144be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c0:	9300      	str	r3, [sp, #0]
 80144c2:	6a3b      	ldr	r3, [r7, #32]
 80144c4:	683a      	ldr	r2, [r7, #0]
 80144c6:	68f8      	ldr	r0, [r7, #12]
 80144c8:	f007 f993 	bl	801b7f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80144cc:	bf00      	nop
 80144ce:	3718      	adds	r7, #24
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80144d4:	b590      	push	{r4, r7, lr}
 80144d6:	b085      	sub	sp, #20
 80144d8:	af00      	add	r7, sp, #0
 80144da:	4603      	mov	r3, r0
 80144dc:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80144e2:	88fb      	ldrh	r3, [r7, #6]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d127      	bne.n	8014538 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80144e8:	88fb      	ldrh	r3, [r7, #6]
 80144ea:	4a1e      	ldr	r2, [pc, #120]	; (8014564 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80144ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d016      	beq.n	8014522 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80144f4:	88fb      	ldrh	r3, [r7, #6]
 80144f6:	4a1b      	ldr	r2, [pc, #108]	; (8014564 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80144f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144fc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	68ba      	ldr	r2, [r7, #8]
 8014504:	4413      	add	r3, r2
 8014506:	4a18      	ldr	r2, [pc, #96]	; (8014568 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014508:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	68ba      	ldr	r2, [r7, #8]
 8014510:	4413      	add	r3, r2
 8014512:	4a16      	ldr	r2, [pc, #88]	; (801456c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014514:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	689b      	ldr	r3, [r3, #8]
 801451a:	68ba      	ldr	r2, [r7, #8]
 801451c:	4413      	add	r3, r2
 801451e:	60fb      	str	r3, [r7, #12]
 8014520:	e00a      	b.n	8014538 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014522:	4b11      	ldr	r3, [pc, #68]	; (8014568 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014524:	4a12      	ldr	r2, [pc, #72]	; (8014570 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014526:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014528:	4a12      	ldr	r2, [pc, #72]	; (8014574 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801452a:	4b10      	ldr	r3, [pc, #64]	; (801456c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801452c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801452e:	88fb      	ldrh	r3, [r7, #6]
 8014530:	4a11      	ldr	r2, [pc, #68]	; (8014578 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014536:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d00d      	beq.n	801455a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801453e:	4a0f      	ldr	r2, [pc, #60]	; (801457c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014540:	88fb      	ldrh	r3, [r7, #6]
 8014542:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014544:	f000 f83e 	bl	80145c4 <_ZN17TypedTextDatabase8getFontsEv>
 8014548:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801454a:	f000 f833 	bl	80145b4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801454e:	4603      	mov	r3, r0
 8014550:	461a      	mov	r2, r3
 8014552:	4621      	mov	r1, r4
 8014554:	68f8      	ldr	r0, [r7, #12]
 8014556:	f7ff fea5 	bl	80142a4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801455a:	bf00      	nop
 801455c:	3714      	adds	r7, #20
 801455e:	46bd      	mov	sp, r7
 8014560:	bd90      	pop	{r4, r7, pc}
 8014562:	bf00      	nop
 8014564:	20007b28 	.word	0x20007b28
 8014568:	20007b30 	.word	0x20007b30
 801456c:	20007b34 	.word	0x20007b34
 8014570:	080f1bec 	.word	0x080f1bec
 8014574:	080f1b2c 	.word	0x080f1b2c
 8014578:	080f1c68 	.word	0x080f1c68
 801457c:	20007b2c 	.word	0x20007b2c

08014580 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	460b      	mov	r3, r1
 801458a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 801458c:	4b07      	ldr	r3, [pc, #28]	; (80145ac <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	4b07      	ldr	r3, [pc, #28]	; (80145b0 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014592:	6819      	ldr	r1, [r3, #0]
 8014594:	887b      	ldrh	r3, [r7, #2]
 8014596:	009b      	lsls	r3, r3, #2
 8014598:	440b      	add	r3, r1
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	370c      	adds	r7, #12
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr
 80145ac:	20007b30 	.word	0x20007b30
 80145b0:	20007b34 	.word	0x20007b34

080145b4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80145b4:	b480      	push	{r7}
 80145b6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80145b8:	2330      	movs	r3, #48	; 0x30
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr

080145c4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80145c4:	b480      	push	{r7}
 80145c6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80145c8:	4b02      	ldr	r3, [pc, #8]	; (80145d4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	20007b38 	.word	0x20007b38

080145d8 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_25_2bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d10e      	bne.n	8014606 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d109      	bne.n	8014606 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_100_2bpp()),
 80145f2:	f7fb fb9b 	bl	800fd2c <_Z28getFont_bahnschrift_100_2bppv>
 80145f6:	4603      	mov	r3, r0
};
 80145f8:	4a05      	ldr	r2, [pc, #20]	; (8014610 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80145fa:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_25_2bpp())
 80145fc:	f7fb fbec 	bl	800fdd8 <_Z27getFont_bahnschrift_25_2bppv>
 8014600:	4603      	mov	r3, r0
};
 8014602:	4a03      	ldr	r2, [pc, #12]	; (8014610 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8014604:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 8014606:	bf00      	nop
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	20007b38 	.word	0x20007b38

08014614 <_GLOBAL__sub_I_touchgfx_fonts>:
 8014614:	b580      	push	{r7, lr}
 8014616:	af00      	add	r7, sp, #0
 8014618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801461c:	2001      	movs	r0, #1
 801461e:	f7ff ffdb 	bl	80145d8 <_Z41__static_initialization_and_destruction_0ii>
 8014622:	bd80      	pop	{r7, pc}

08014624 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	4a05      	ldr	r2, [pc, #20]	; (8014644 <_ZN19FrontendApplicationD1Ev+0x20>)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	601a      	str	r2, [r3, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	4618      	mov	r0, r3
 8014636:	f7fb fe13 	bl	8010260 <_ZN23FrontendApplicationBaseD1Ev>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	4618      	mov	r0, r3
 801463e:	3708      	adds	r7, #8
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}
 8014644:	080302d0 	.word	0x080302d0

08014648 <_ZN19FrontendApplicationD0Ev>:
 8014648:	b580      	push	{r7, lr}
 801464a:	b082      	sub	sp, #8
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ff ffe7 	bl	8014624 <_ZN19FrontendApplicationD1Ev>
 8014656:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f018 fe41 	bl	802d2e2 <_ZdlPvj>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	4618      	mov	r0, r3
 8014664:	3708      	adds	r7, #8
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}

0801466a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801466a:	b580      	push	{r7, lr}
 801466c:	b082      	sub	sp, #8
 801466e:	af00      	add	r7, sp, #0
 8014670:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014678:	4618      	mov	r0, r3
 801467a:	f000 f82d 	bl	80146d8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	4618      	mov	r0, r3
 8014682:	f007 fc25 	bl	801bed0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014686:	bf00      	nop
 8014688:	3708      	adds	r7, #8
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
	...

08014690 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	68b9      	ldr	r1, [r7, #8]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fb fe20 	bl	80102e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80146a8:	4a03      	ldr	r2, [pc, #12]	; (80146b8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	601a      	str	r2, [r3, #0]
{

}
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	4618      	mov	r0, r3
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	080302d0 	.word	0x080302d0

080146bc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	601a      	str	r2, [r3, #0]
{

}
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4618      	mov	r0, r3
 80146ce:	370c      	adds	r7, #12
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr

080146d8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80146d8:	b480      	push	{r7}
 80146da:	b083      	sub	sp, #12
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]

}
 80146e0:	bf00      	nop
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
    {
    }
 80146f4:	bf00      	nop
 80146f6:	370c      	adds	r7, #12
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
    {
    }
 8014708:	bf00      	nop
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8014714:	b480      	push	{r7}
 8014716:	b083      	sub	sp, #12
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
    {
 801471c:	4a04      	ldr	r2, [pc, #16]	; (8014730 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	601a      	str	r2, [r3, #0]
    }
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4618      	mov	r0, r3
 8014726:	370c      	adds	r7, #12
 8014728:	46bd      	mov	sp, r7
 801472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472e:	4770      	bx	lr
 8014730:	0803034c 	.word	0x0803034c

08014734 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
    }
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f7ff ffe9 	bl	8014714 <_ZN8touchgfx9PresenterD1Ev>
 8014742:	2104      	movs	r1, #4
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f018 fdcc 	bl	802d2e2 <_ZdlPvj>
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8014754:	b480      	push	{r7}
 8014756:	b083      	sub	sp, #12
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
    {
 801475c:	4a04      	ldr	r2, [pc, #16]	; (8014770 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	601a      	str	r2, [r3, #0]
    }
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	4618      	mov	r0, r3
 8014766:	370c      	adds	r7, #12
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr
 8014770:	0803034c 	.word	0x0803034c

08014774 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	4a06      	ldr	r2, [pc, #24]	; (8014798 <_ZN13ModelListenerC1Ev+0x24>)
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	601a      	str	r2, [r3, #0]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2200      	movs	r2, #0
 8014786:	605a      	str	r2, [r3, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	370c      	adds	r7, #12
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	0803033c 	.word	0x0803033c

0801479c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801479c:	b480      	push	{r7}
 801479e:	b083      	sub	sp, #12
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	4a04      	ldr	r2, [pc, #16]	; (80147b8 <_ZN13ModelListenerD1Ev+0x1c>)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	601a      	str	r2, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	4618      	mov	r0, r3
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr
 80147b8:	0803033c 	.word	0x0803033c

080147bc <_ZN13ModelListenerD0Ev>:
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7ff ffe9 	bl	801479c <_ZN13ModelListenerD1Ev>
 80147ca:	2108      	movs	r1, #8
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f018 fd88 	bl	802d2e2 <_ZdlPvj>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	4618      	mov	r0, r3
 80147d6:	3708      	adds	r7, #8
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	4a09      	ldr	r2, [pc, #36]	; (801480c <_ZN16Screen1PresenterD1Ev+0x30>)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	601a      	str	r2, [r3, #0]
 80147ea:	4a09      	ldr	r2, [pc, #36]	; (8014810 <_ZN16Screen1PresenterD1Ev+0x34>)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	605a      	str	r2, [r3, #4]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	3304      	adds	r3, #4
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7ff ffd1 	bl	801479c <_ZN13ModelListenerD1Ev>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7ff ff89 	bl	8014714 <_ZN8touchgfx9PresenterD1Ev>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4618      	mov	r0, r3
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	08030314 	.word	0x08030314
 8014810:	0803032c 	.word	0x0803032c

08014814 <_ZThn4_N16Screen1PresenterD1Ev>:
 8014814:	f1a0 0004 	sub.w	r0, r0, #4
 8014818:	e7e0      	b.n	80147dc <_ZN16Screen1PresenterD1Ev>
 801481a:	bf00      	nop

0801481c <_ZN16Screen1PresenterD0Ev>:
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7ff ffd9 	bl	80147dc <_ZN16Screen1PresenterD1Ev>
 801482a:	2110      	movs	r1, #16
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f018 fd58 	bl	802d2e2 <_ZdlPvj>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	4618      	mov	r0, r3
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <_ZThn4_N16Screen1PresenterD0Ev>:
 801483c:	f1a0 0004 	sub.w	r0, r0, #4
 8014840:	e7ec      	b.n	801481c <_ZN16Screen1PresenterD0Ev>
	...

08014844 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
    : view(v)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff ff7f 	bl	8014754 <_ZN8touchgfx9PresenterC1Ev>
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	3304      	adds	r3, #4
 801485a:	4618      	mov	r0, r3
 801485c:	f7ff ff8a 	bl	8014774 <_ZN13ModelListenerC1Ev>
 8014860:	4a06      	ldr	r2, [pc, #24]	; (801487c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	601a      	str	r2, [r3, #0]
 8014866:	4a06      	ldr	r2, [pc, #24]	; (8014880 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	605a      	str	r2, [r3, #4]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	683a      	ldr	r2, [r7, #0]
 8014870:	60da      	str	r2, [r3, #12]
{

}
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	4618      	mov	r0, r3
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	08030314 	.word	0x08030314
 8014880:	0803032c 	.word	0x0803032c

08014884 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]

}
 801488c:	bf00      	nop
 801488e:	370c      	adds	r7, #12
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr

08014898 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]

}
 80148a0:	bf00      	nop
 80148a2:	370c      	adds	r7, #12
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr

080148ac <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	460b      	mov	r3, r1
 80148b6:	607a      	str	r2, [r7, #4]
 80148b8:	ed87 0a00 	vstr	s0, [r7]
 80148bc:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80148be:	463b      	mov	r3, r7
 80148c0:	8979      	ldrh	r1, [r7, #10]
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	68f8      	ldr	r0, [r7, #12]
 80148c6:	f00a ff37 	bl	801f738 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80148ca:	4603      	mov	r3, r0
    }
 80148cc:	4618      	mov	r0, r3
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 80148d4:	b480      	push	{r7}
 80148d6:	b083      	sub	sp, #12
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	460b      	mov	r3, r1
 80148de:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	78fa      	ldrb	r2, [r7, #3]
 80148e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80148e8:	bf00      	nop
 80148ea:	370c      	adds	r7, #12
 80148ec:	46bd      	mov	sp, r7
 80148ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f2:	4770      	bx	lr

080148f4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	4a05      	ldr	r2, [pc, #20]	; (8014914 <_ZN11Screen1ViewD1Ev+0x20>)
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	601a      	str	r2, [r3, #0]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	4618      	mov	r0, r3
 8014906:	f7fc fb77 	bl	8010ff8 <_ZN15Screen1ViewBaseD1Ev>
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4618      	mov	r0, r3
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	08030364 	.word	0x08030364

08014918 <_ZN11Screen1ViewD0Ev>:
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f7ff ffe7 	bl	80148f4 <_ZN11Screen1ViewD1Ev>
 8014926:	f640 518c 	movw	r1, #3468	; 0xd8c
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f018 fcd9 	bl	802d2e2 <_ZdlPvj>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	4618      	mov	r0, r3
 8014934:	3708      	adds	r7, #8
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
	...

0801493c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "main.h"
#include "extern.h"

Screen1View::Screen1View() {
 801493c:	b580      	push	{r7, lr}
 801493e:	b082      	sub	sp, #8
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	4618      	mov	r0, r3
 8014948:	f7fc fc60 	bl	801120c <_ZN15Screen1ViewBaseC1Ev>
 801494c:	4a03      	ldr	r2, [pc, #12]	; (801495c <_ZN11Screen1ViewC1Ev+0x20>)
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	601a      	str	r2, [r3, #0]

}
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	4618      	mov	r0, r3
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	08030364 	.word	0x08030364

08014960 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 8014960:	b580      	push	{r7, lr}
 8014962:	b088      	sub	sp, #32
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fafa 	bl	8013f64 <_ZN15Screen1ViewBase11setupScreenEv>

	Unicode::UnicodeChar buffer[10];

	//.................UNITS.................

	Unicode::strncpy(buffer, "BAR", 10);
 8014970:	f107 030c 	add.w	r3, r7, #12
 8014974:	220a      	movs	r2, #10
 8014976:	49d7      	ldr	r1, [pc, #860]	; (8014cd4 <_ZN11Screen1View11setupScreenEv+0x374>)
 8014978:	4618      	mov	r0, r3
 801497a:	f00a f9b6 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_unitsBuffer, 10, "%s", buffer);
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f503 602a 	add.w	r0, r3, #2720	; 0xaa0
 8014984:	f107 030c 	add.w	r3, r7, #12
 8014988:	4ad3      	ldr	r2, [pc, #844]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 801498a:	210a      	movs	r1, #10
 801498c:	f00a fd14 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014996:	4618      	mov	r0, r3
 8014998:	f005 fb6a 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80149a2:	4618      	mov	r0, r3
 80149a4:	f008 fb69 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "Lambda", 10);
 80149a8:	f107 030c 	add.w	r3, r7, #12
 80149ac:	220a      	movs	r2, #10
 80149ae:	49cb      	ldr	r1, [pc, #812]	; (8014cdc <_ZN11Screen1View11setupScreenEv+0x37c>)
 80149b0:	4618      	mov	r0, r3
 80149b2:	f00a f99a 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_unitsBuffer, 10, "%s", buffer);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f603 30d8 	addw	r0, r3, #3032	; 0xbd8
 80149bc:	f107 030c 	add.w	r3, r7, #12
 80149c0:	4ac5      	ldr	r2, [pc, #788]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 80149c2:	210a      	movs	r1, #10
 80149c4:	f00a fcf8 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80149ce:	4618      	mov	r0, r3
 80149d0:	f005 fb4e 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80149da:	4618      	mov	r0, r3
 80149dc:	f008 fb4d 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 80149e0:	f107 030c 	add.w	r3, r7, #12
 80149e4:	220a      	movs	r2, #10
 80149e6:	49bb      	ldr	r1, [pc, #748]	; (8014cd4 <_ZN11Screen1View11setupScreenEv+0x374>)
 80149e8:	4618      	mov	r0, r3
 80149ea:	f00a f97e 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_unitsBuffer, 10, "%s", buffer);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f503 6051 	add.w	r0, r3, #3344	; 0xd10
 80149f4:	f107 030c 	add.w	r3, r7, #12
 80149f8:	4ab7      	ldr	r2, [pc, #732]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 80149fa:	210a      	movs	r1, #10
 80149fc:	f00a fcdc 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014a06:	4618      	mov	r0, r3
 8014a08:	f005 fb32 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014a12:	4618      	mov	r0, r3
 8014a14:	f008 fb31 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8014a18:	f107 030c 	add.w	r3, r7, #12
 8014a1c:	220a      	movs	r2, #10
 8014a1e:	49ad      	ldr	r1, [pc, #692]	; (8014cd4 <_ZN11Screen1View11setupScreenEv+0x374>)
 8014a20:	4618      	mov	r0, r3
 8014a22:	f00a f962 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_unitsBuffer, 10, "%s", buffer);
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f603 5078 	addw	r0, r3, #3448	; 0xd78
 8014a2c:	f107 030c 	add.w	r3, r7, #12
 8014a30:	4aa9      	ldr	r2, [pc, #676]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a32:	210a      	movs	r1, #10
 8014a34:	f00a fcc0 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f005 fb16 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f008 fb15 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8014a50:	f107 030c 	add.w	r3, r7, #12
 8014a54:	220a      	movs	r2, #10
 8014a56:	49a2      	ldr	r1, [pc, #648]	; (8014ce0 <_ZN11Screen1View11setupScreenEv+0x380>)
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f00a f946 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_unitsBuffer, 10, "%s", buffer);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f503 6044 	add.w	r0, r3, #3136	; 0xc40
 8014a64:	f107 030c 	add.w	r3, r7, #12
 8014a68:	4a9b      	ldr	r2, [pc, #620]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a6a:	210a      	movs	r1, #10
 8014a6c:	f00a fca4 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a76:	4618      	mov	r0, r3
 8014a78:	f005 fafa 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a82:	4618      	mov	r0, r3
 8014a84:	f008 faf9 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8014a88:	f107 030c 	add.w	r3, r7, #12
 8014a8c:	220a      	movs	r2, #10
 8014a8e:	4994      	ldr	r1, [pc, #592]	; (8014ce0 <_ZN11Screen1View11setupScreenEv+0x380>)
 8014a90:	4618      	mov	r0, r3
 8014a92:	f00a f92a 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_unitsBuffer, 10, "%s", buffer);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f603 40a8 	addw	r0, r3, #3240	; 0xca8
 8014a9c:	f107 030c 	add.w	r3, r7, #12
 8014aa0:	4a8d      	ldr	r2, [pc, #564]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014aa2:	210a      	movs	r1, #10
 8014aa4:	f00a fc88 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f005 fade 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014aba:	4618      	mov	r0, r3
 8014abc:	f008 fadd 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "V", 10);
 8014ac0:	f107 030c 	add.w	r3, r7, #12
 8014ac4:	220a      	movs	r2, #10
 8014ac6:	4987      	ldr	r1, [pc, #540]	; (8014ce4 <_ZN11Screen1View11setupScreenEv+0x384>)
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f00a f90e 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_unitsBuffer, 10, "%s", buffer);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 8014ad4:	f107 030c 	add.w	r3, r7, #12
 8014ad8:	4a7f      	ldr	r2, [pc, #508]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014ada:	210a      	movs	r1, #10
 8014adc:	f00a fc6c 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f005 fac2 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014af2:	4618      	mov	r0, r3
 8014af4:	f008 fac1 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "%", 10);
 8014af8:	f107 030c 	add.w	r3, r7, #12
 8014afc:	220a      	movs	r2, #10
 8014afe:	497a      	ldr	r1, [pc, #488]	; (8014ce8 <_ZN11Screen1View11setupScreenEv+0x388>)
 8014b00:	4618      	mov	r0, r3
 8014b02:	f00a f8f2 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_unitsBuffer, 10, "%s", buffer);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8014b0c:	f107 030c 	add.w	r3, r7, #12
 8014b10:	4a71      	ldr	r2, [pc, #452]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b12:	210a      	movs	r1, #10
 8014b14:	f00a fc50 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f005 faa6 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f008 faa5 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	//.................LABELS.................

	Unicode::strncpy(buffer, "MAP", 10);
 8014b30:	f107 030c 	add.w	r3, r7, #12
 8014b34:	220a      	movs	r2, #10
 8014b36:	496d      	ldr	r1, [pc, #436]	; (8014cec <_ZN11Screen1View11setupScreenEv+0x38c>)
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f00a f8d6 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_labelBuffer, 10, "%s", buffer);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f603 208c 	addw	r0, r3, #2700	; 0xa8c
 8014b44:	f107 030c 	add.w	r3, r7, #12
 8014b48:	4a63      	ldr	r2, [pc, #396]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b4a:	210a      	movs	r1, #10
 8014b4c:	f00a fc34 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b56:	4618      	mov	r0, r3
 8014b58:	f005 fa8a 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b62:	4618      	mov	r0, r3
 8014b64:	f008 fa89 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "AFP", 10);
 8014b68:	f107 030c 	add.w	r3, r7, #12
 8014b6c:	220a      	movs	r2, #10
 8014b6e:	4960      	ldr	r1, [pc, #384]	; (8014cf0 <_ZN11Screen1View11setupScreenEv+0x390>)
 8014b70:	4618      	mov	r0, r3
 8014b72:	f00a f8ba 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_labelBuffer, 10, "%s", buffer);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f603 30c4 	addw	r0, r3, #3012	; 0xbc4
 8014b7c:	f107 030c 	add.w	r3, r7, #12
 8014b80:	4a55      	ldr	r2, [pc, #340]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b82:	210a      	movs	r1, #10
 8014b84:	f00a fc18 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f005 fa6e 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f008 fa6d 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "OIL P", 10);
 8014ba0:	f107 030c 	add.w	r3, r7, #12
 8014ba4:	220a      	movs	r2, #10
 8014ba6:	4953      	ldr	r1, [pc, #332]	; (8014cf4 <_ZN11Screen1View11setupScreenEv+0x394>)
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f00a f89e 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_labelBuffer, 10, "%s", buffer);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f603 40fc 	addw	r0, r3, #3324	; 0xcfc
 8014bb4:	f107 030c 	add.w	r3, r7, #12
 8014bb8:	4a47      	ldr	r2, [pc, #284]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014bba:	210a      	movs	r1, #10
 8014bbc:	f00a fbfc 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f005 fa52 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f008 fa51 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "FUEL P", 10);
 8014bd8:	f107 030c 	add.w	r3, r7, #12
 8014bdc:	220a      	movs	r2, #10
 8014bde:	4946      	ldr	r1, [pc, #280]	; (8014cf8 <_ZN11Screen1View11setupScreenEv+0x398>)
 8014be0:	4618      	mov	r0, r3
 8014be2:	f00a f882 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_labelBuffer, 10, "%s", buffer);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f603 5064 	addw	r0, r3, #3428	; 0xd64
 8014bec:	f107 030c 	add.w	r3, r7, #12
 8014bf0:	4a39      	ldr	r2, [pc, #228]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014bf2:	210a      	movs	r1, #10
 8014bf4:	f00a fbe0 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f005 fa36 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f008 fa35 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "ECT", 10);
 8014c10:	f107 030c 	add.w	r3, r7, #12
 8014c14:	220a      	movs	r2, #10
 8014c16:	4939      	ldr	r1, [pc, #228]	; (8014cfc <_ZN11Screen1View11setupScreenEv+0x39c>)
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f00a f866 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_labelBuffer, 10, "%s", buffer);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f603 402c 	addw	r0, r3, #3116	; 0xc2c
 8014c24:	f107 030c 	add.w	r3, r7, #12
 8014c28:	4a2b      	ldr	r2, [pc, #172]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c2a:	210a      	movs	r1, #10
 8014c2c:	f00a fbc4 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c36:	4618      	mov	r0, r3
 8014c38:	f005 fa1a 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c42:	4618      	mov	r0, r3
 8014c44:	f008 fa19 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "IAT", 10);
 8014c48:	f107 030c 	add.w	r3, r7, #12
 8014c4c:	220a      	movs	r2, #10
 8014c4e:	492c      	ldr	r1, [pc, #176]	; (8014d00 <_ZN11Screen1View11setupScreenEv+0x3a0>)
 8014c50:	4618      	mov	r0, r3
 8014c52:	f00a f84a 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_labelBuffer, 10, "%s", buffer);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f603 4094 	addw	r0, r3, #3220	; 0xc94
 8014c5c:	f107 030c 	add.w	r3, r7, #12
 8014c60:	4a1d      	ldr	r2, [pc, #116]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c62:	210a      	movs	r1, #10
 8014c64:	f00a fba8 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f005 f9fe 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f008 f9fd 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BATTERY", 10);
 8014c80:	f107 030c 	add.w	r3, r7, #12
 8014c84:	220a      	movs	r2, #10
 8014c86:	491f      	ldr	r1, [pc, #124]	; (8014d04 <_ZN11Screen1View11setupScreenEv+0x3a4>)
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f00a f82e 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_labelBuffer, 10, "%s", buffer);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f603 20f4 	addw	r0, r3, #2804	; 0xaf4
 8014c94:	f107 030c 	add.w	r3, r7, #12
 8014c98:	4a0f      	ldr	r2, [pc, #60]	; (8014cd8 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c9a:	210a      	movs	r1, #10
 8014c9c:	f00a fb8c 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f005 f9e2 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f008 f9e1 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "TPS", 10);
 8014cb8:	f107 030c 	add.w	r3, r7, #12
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	4912      	ldr	r1, [pc, #72]	; (8014d08 <_ZN11Screen1View11setupScreenEv+0x3a8>)
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f00a f812 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f603 305c 	addw	r0, r3, #2908	; 0xb5c
 8014ccc:	f107 030c 	add.w	r3, r7, #12
 8014cd0:	e01c      	b.n	8014d0c <_ZN11Screen1View11setupScreenEv+0x3ac>
 8014cd2:	bf00      	nop
 8014cd4:	0802f8b4 	.word	0x0802f8b4
 8014cd8:	0802f8b8 	.word	0x0802f8b8
 8014cdc:	0802f8bc 	.word	0x0802f8bc
 8014ce0:	0802f8c4 	.word	0x0802f8c4
 8014ce4:	0802f8c8 	.word	0x0802f8c8
 8014ce8:	0802f8cc 	.word	0x0802f8cc
 8014cec:	0802f8d0 	.word	0x0802f8d0
 8014cf0:	0802f8d4 	.word	0x0802f8d4
 8014cf4:	0802f8d8 	.word	0x0802f8d8
 8014cf8:	0802f8e0 	.word	0x0802f8e0
 8014cfc:	0802f8e8 	.word	0x0802f8e8
 8014d00:	0802f8ec 	.word	0x0802f8ec
 8014d04:	0802f8f0 	.word	0x0802f8f0
 8014d08:	0802f8f8 	.word	0x0802f8f8
 8014d0c:	4a09      	ldr	r2, [pc, #36]	; (8014d34 <_ZN11Screen1View11setupScreenEv+0x3d4>)
 8014d0e:	210a      	movs	r1, #10
 8014d10:	f00a fb52 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f005 f9a8 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014d26:	4618      	mov	r0, r3
 8014d28:	f008 f9a7 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8014d2c:	bf00      	nop
 8014d2e:	3720      	adds	r7, #32
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	0802f8b8 	.word	0x0802f8b8

08014d38 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7fb ffbc 	bl	8010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014d48:	bf00      	nop
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b08a      	sub	sp, #40	; 0x28
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	map_value.invalidate();
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f008 f98b 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.MAP * PSI_TO_BAR));
 8014d64:	4bd1      	ldr	r3, [pc, #836]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014d66:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014d6a:	ee07 3a90 	vmov	s15, r3
 8014d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d72:	ed9f 7acf 	vldr	s14, [pc, #828]	; 80150b0 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d7a:	f107 0308 	add.w	r3, r7, #8
 8014d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8014d82:	4acc      	ldr	r2, [pc, #816]	; (80150b4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014d84:	2110      	movs	r1, #16
 8014d86:	4618      	mov	r0, r3
 8014d88:	f7ff fd90 	bl	80148ac <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(map_valueBuffer, 16, "%s", buffer);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f603 204c 	addw	r0, r3, #2636	; 0xa4c
 8014d92:	f107 0308 	add.w	r3, r7, #8
 8014d96:	4ac8      	ldr	r2, [pc, #800]	; (80150b8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014d98:	2110      	movs	r1, #16
 8014d9a:	f00a fb0d 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_value.resizeToCurrentTextWithAlignment();
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014da4:	4618      	mov	r0, r3
 8014da6:	f005 f963 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_value.invalidate();
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014db0:	4618      	mov	r0, r3
 8014db2:	f008 f962 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	batt_value.invalidate();
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f008 f95c 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f", (Current_Status.BATT / 100.00f));
 8014dc2:	4bba      	ldr	r3, [pc, #744]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8014dc8:	ee07 3a90 	vmov	s15, r3
 8014dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014dd0:	eddf 6aba 	vldr	s13, [pc, #744]	; 80150bc <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014dd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014dd8:	f107 0308 	add.w	r3, r7, #8
 8014ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8014de0:	4ab4      	ldr	r2, [pc, #720]	; (80150b4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014de2:	2110      	movs	r1, #16
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7ff fd61 	bl	80148ac <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(batt_valueBuffer, 16, "%s", buffer);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f603 20b4 	addw	r0, r3, #2740	; 0xab4
 8014df0:	f107 0308 	add.w	r3, r7, #8
 8014df4:	4ab0      	ldr	r2, [pc, #704]	; (80150b8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014df6:	2110      	movs	r1, #16
 8014df8:	f00a fade 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	batt_value.resizeToCurrentTextWithAlignment();
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014e02:	4618      	mov	r0, r3
 8014e04:	f005 f934 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	batt_value.invalidate();
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f008 f933 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	tps_value.invalidate();
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f008 f92d 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(tps_valueBuffer, 16, "%d", (Current_Status.TPS / 10));
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f603 301c 	addw	r0, r3, #2844	; 0xb1c
 8014e26:	4ba1      	ldr	r3, [pc, #644]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014e2c:	4aa4      	ldr	r2, [pc, #656]	; (80150c0 <_ZN11Screen1View15handleTickEventEv+0x370>)
 8014e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8014e32:	08db      	lsrs	r3, r3, #3
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	4aa3      	ldr	r2, [pc, #652]	; (80150c4 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014e38:	2110      	movs	r1, #16
 8014e3a:	f00a fabd 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tps_value.resizeToCurrentTextWithAlignment();
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014e44:	4618      	mov	r0, r3
 8014e46:	f005 f913 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	tps_value.invalidate();
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014e50:	4618      	mov	r0, r3
 8014e52:	f008 f912 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	lambda_value.invalidate();
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f008 f90c 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f",
			(Current_Status.LAMBDA1 * AFR_TO_LAMBDA / 100.00f));
 8014e62:	4b92      	ldr	r3, [pc, #584]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014e64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014e66:	ee07 3a90 	vmov	s15, r3
 8014e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e6e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80150c8 <_ZN11Screen1View15handleTickEventEv+0x378>
 8014e72:	ee67 7a87 	vmul.f32	s15, s15, s14
	Unicode::snprintfFloat(buffer, 16, "%.2f",
 8014e76:	eddf 6a91 	vldr	s13, [pc, #580]	; 80150bc <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014e7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014e7e:	f107 0308 	add.w	r3, r7, #8
 8014e82:	eeb0 0a47 	vmov.f32	s0, s14
 8014e86:	4a91      	ldr	r2, [pc, #580]	; (80150cc <_ZN11Screen1View15handleTickEventEv+0x37c>)
 8014e88:	2110      	movs	r1, #16
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7ff fd0e 	bl	80148ac <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(lambda_valueBuffer, 16, "%s", buffer);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8014e96:	f107 0308 	add.w	r3, r7, #8
 8014e9a:	4a87      	ldr	r2, [pc, #540]	; (80150b8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014e9c:	2110      	movs	r1, #16
 8014e9e:	f00a fa8b 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	lambda_value.resizeToCurrentTextWithAlignment();
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f005 f8e1 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_value.invalidate();
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f008 f8e0 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	ect_value.invalidate();
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f008 f8da 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(ect_valueBuffer, 16, "%d", Current_Status.ECT - 50);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f603 30ec 	addw	r0, r3, #3052	; 0xbec
 8014ecc:	4b77      	ldr	r3, [pc, #476]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014ece:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ed2:	3b32      	subs	r3, #50	; 0x32
 8014ed4:	4a7b      	ldr	r2, [pc, #492]	; (80150c4 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014ed6:	2110      	movs	r1, #16
 8014ed8:	f00a fa6e 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ect_value.resizeToCurrentTextWithAlignment();
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f005 f8c4 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ect_value.invalidate();
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f008 f8c3 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	iat_value.invalidate();
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014efa:	4618      	mov	r0, r3
 8014efc:	f008 f8bd 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(iat_valueBuffer, 16, "%d", Current_Status.IAT - 50);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 8014f06:	4b69      	ldr	r3, [pc, #420]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f08:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014f0c:	3b32      	subs	r3, #50	; 0x32
 8014f0e:	4a6d      	ldr	r2, [pc, #436]	; (80150c4 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014f10:	2110      	movs	r1, #16
 8014f12:	f00a fa51 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	iat_value.resizeToCurrentTextWithAlignment();
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f005 f8a7 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	iat_value.invalidate();
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f008 f8a6 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	oilp_value.invalidate();
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014f34:	4618      	mov	r0, r3
 8014f36:	f008 f8a0 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.OILP * PSI_TO_BAR));
 8014f3a:	4b5c      	ldr	r3, [pc, #368]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014f40:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f48:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80150b0 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f50:	f107 0308 	add.w	r3, r7, #8
 8014f54:	eeb0 0a67 	vmov.f32	s0, s15
 8014f58:	4a56      	ldr	r2, [pc, #344]	; (80150b4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014f5a:	2110      	movs	r1, #16
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7ff fca5 	bl	80148ac <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(oilp_valueBuffer, 16, "%s", buffer);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f603 40bc 	addw	r0, r3, #3260	; 0xcbc
 8014f68:	f107 0308 	add.w	r3, r7, #8
 8014f6c:	4a52      	ldr	r2, [pc, #328]	; (80150b8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014f6e:	2110      	movs	r1, #16
 8014f70:	f00a fa22 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_value.resizeToCurrentTextWithAlignment();
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f005 f878 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_value.invalidate();
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014f86:	4618      	mov	r0, r3
 8014f88:	f008 f877 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	fuelp_value.invalidate();
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014f92:	4618      	mov	r0, r3
 8014f94:	f008 f871 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.FUELP * PSI_TO_BAR));
 8014f98:	4b44      	ldr	r3, [pc, #272]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8014f9e:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fa6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80150b0 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fae:	f107 0308 	add.w	r3, r7, #8
 8014fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8014fb6:	4a3f      	ldr	r2, [pc, #252]	; (80150b4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014fb8:	2110      	movs	r1, #16
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7ff fc76 	bl	80148ac <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(fuelp_valueBuffer, 16, "%s", buffer);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f603 5024 	addw	r0, r3, #3364	; 0xd24
 8014fc6:	f107 0308 	add.w	r3, r7, #8
 8014fca:	4a3b      	ldr	r2, [pc, #236]	; (80150b8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014fcc:	2110      	movs	r1, #16
 8014fce:	f00a f9f3 	bl	801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_value.resizeToCurrentTextWithAlignment();
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f005 f849 	bl	801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_value.invalidate();
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f008 f848 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indLeft.setVisible(Current_Status.IND_LEFT);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8014ff0:	4b2e      	ldr	r3, [pc, #184]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014ff2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	bf14      	ite	ne
 8014ffa:	2301      	movne	r3, #1
 8014ffc:	2300      	moveq	r3, #0
 8014ffe:	b2db      	uxtb	r3, r3
 8015000:	4619      	mov	r1, r3
 8015002:	4610      	mov	r0, r2
 8015004:	f7ff fc66 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLeft.invalidate();
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	33c4      	adds	r3, #196	; 0xc4
 801500c:	4618      	mov	r0, r3
 801500e:	f008 f834 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indHigh.setVisible(Current_Status.IND_HIGH);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8015018:	4b24      	ldr	r3, [pc, #144]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 801501a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 801501e:	2b00      	cmp	r3, #0
 8015020:	bf14      	ite	ne
 8015022:	2301      	movne	r3, #1
 8015024:	2300      	moveq	r3, #0
 8015026:	b2db      	uxtb	r3, r3
 8015028:	4619      	mov	r1, r3
 801502a:	4610      	mov	r0, r2
 801502c:	f7ff fc52 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indHigh.invalidate();
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015036:	4618      	mov	r0, r3
 8015038:	f008 f81f 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indFuel.setVisible(Current_Status.IND_FUEL);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8015042:	4b1a      	ldr	r3, [pc, #104]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015044:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8015048:	2b00      	cmp	r3, #0
 801504a:	bf14      	ite	ne
 801504c:	2301      	movne	r3, #1
 801504e:	2300      	moveq	r3, #0
 8015050:	b2db      	uxtb	r3, r3
 8015052:	4619      	mov	r1, r3
 8015054:	4610      	mov	r0, r2
 8015056:	f7ff fc3d 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indFuel.invalidate();
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8015060:	4618      	mov	r0, r3
 8015062:	f008 f80a 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indOil.setVisible(Current_Status.IND_OIL);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 801506c:	4b0f      	ldr	r3, [pc, #60]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 801506e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8015072:	2b00      	cmp	r3, #0
 8015074:	bf14      	ite	ne
 8015076:	2301      	movne	r3, #1
 8015078:	2300      	moveq	r3, #0
 801507a:	b2db      	uxtb	r3, r3
 801507c:	4619      	mov	r1, r3
 801507e:	4610      	mov	r0, r2
 8015080:	f7ff fc28 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indOil.invalidate();
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801508a:	4618      	mov	r0, r3
 801508c:	f007 fff5 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indBatt.setVisible(Current_Status.IND_BATT);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8015096:	4b05      	ldr	r3, [pc, #20]	; (80150ac <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015098:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 801509c:	2b00      	cmp	r3, #0
 801509e:	bf14      	ite	ne
 80150a0:	2301      	movne	r3, #1
 80150a2:	2300      	moveq	r3, #0
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	4619      	mov	r1, r3
 80150a8:	4610      	mov	r0, r2
 80150aa:	e011      	b.n	80150d0 <_ZN11Screen1View15handleTickEventEv+0x380>
 80150ac:	2000a504 	.word	0x2000a504
 80150b0:	3d8d3466 	.word	0x3d8d3466
 80150b4:	0802f8fc 	.word	0x0802f8fc
 80150b8:	0802f8b8 	.word	0x0802f8b8
 80150bc:	42c80000 	.word	0x42c80000
 80150c0:	cccccccd 	.word	0xcccccccd
 80150c4:	0802f904 	.word	0x0802f904
 80150c8:	416b3333 	.word	0x416b3333
 80150cc:	0802f908 	.word	0x0802f908
 80150d0:	f7ff fc00 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indBatt.invalidate();
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80150da:	4618      	mov	r0, r3
 80150dc:	f007 ffcd 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indPark.setVisible(Current_Status.IND_PARK);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 80150e6:	4b39      	ldr	r3, [pc, #228]	; (80151cc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80150e8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	bf14      	ite	ne
 80150f0:	2301      	movne	r3, #1
 80150f2:	2300      	moveq	r3, #0
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	4619      	mov	r1, r3
 80150f8:	4610      	mov	r0, r2
 80150fa:	f7ff fbeb 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indPark.invalidate();
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8015104:	4618      	mov	r0, r3
 8015106:	f007 ffb8 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indDTC.setVisible(Current_Status.IND_DTC);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015110:	4b2e      	ldr	r3, [pc, #184]	; (80151cc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015112:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8015116:	2b00      	cmp	r3, #0
 8015118:	bf14      	ite	ne
 801511a:	2301      	movne	r3, #1
 801511c:	2300      	moveq	r3, #0
 801511e:	b2db      	uxtb	r3, r3
 8015120:	4619      	mov	r1, r3
 8015122:	4610      	mov	r0, r2
 8015124:	f7ff fbd6 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indDTC.invalidate();
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801512e:	4618      	mov	r0, r3
 8015130:	f007 ffa3 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indECT.setVisible(Current_Status.IND_ECT);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f503 7209 	add.w	r2, r3, #548	; 0x224
 801513a:	4b24      	ldr	r3, [pc, #144]	; (80151cc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 801513c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015140:	2b00      	cmp	r3, #0
 8015142:	bf14      	ite	ne
 8015144:	2301      	movne	r3, #1
 8015146:	2300      	moveq	r3, #0
 8015148:	b2db      	uxtb	r3, r3
 801514a:	4619      	mov	r1, r3
 801514c:	4610      	mov	r0, r2
 801514e:	f7ff fbc1 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indECT.invalidate();
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8015158:	4618      	mov	r0, r3
 801515a:	f007 ff8e 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indLow.setVisible(Current_Status.IND_LOW);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8015164:	4b19      	ldr	r3, [pc, #100]	; (80151cc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015166:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801516a:	2b00      	cmp	r3, #0
 801516c:	bf14      	ite	ne
 801516e:	2301      	movne	r3, #1
 8015170:	2300      	moveq	r3, #0
 8015172:	b2db      	uxtb	r3, r3
 8015174:	4619      	mov	r1, r3
 8015176:	4610      	mov	r0, r2
 8015178:	f7ff fbac 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLow.invalidate();
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8015182:	4618      	mov	r0, r3
 8015184:	f007 ff79 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	indRight.setVisible(Current_Status.IND_RIGHT);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 801518e:	4b0f      	ldr	r3, [pc, #60]	; (80151cc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015190:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8015194:	2b00      	cmp	r3, #0
 8015196:	bf14      	ite	ne
 8015198:	2301      	movne	r3, #1
 801519a:	2300      	moveq	r3, #0
 801519c:	b2db      	uxtb	r3, r3
 801519e:	4619      	mov	r1, r3
 80151a0:	4610      	mov	r0, r2
 80151a2:	f7ff fb97 	bl	80148d4 <_ZN8touchgfx8Drawable10setVisibleEb>
	indRight.invalidate();
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	33f0      	adds	r3, #240	; 0xf0
 80151aa:	4618      	mov	r0, r3
 80151ac:	f007 ff65 	bl	801d07a <_ZNK8touchgfx8Drawable10invalidateEv>

	gauge1.updateValue(Current_Status.RPM, 0);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 80151b6:	4a05      	ldr	r2, [pc, #20]	; (80151cc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80151b8:	8812      	ldrh	r2, [r2, #0]
 80151ba:	4611      	mov	r1, r2
 80151bc:	2200      	movs	r2, #0
 80151be:	4618      	mov	r0, r3
 80151c0:	f001 fea1 	bl	8016f06 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	//gauge1.set
	//gauge1.invalidate();

}
 80151c4:	bf00      	nop
 80151c6:	3728      	adds	r7, #40	; 0x28
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	2000a504 	.word	0x2000a504

080151d0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
    {
 80151d8:	4a04      	ldr	r2, [pc, #16]	; (80151ec <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	601a      	str	r2, [r3, #0]
    }
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	4618      	mov	r0, r3
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr
 80151ec:	080303b0 	.word	0x080303b0

080151f0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
    }
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f7ff ffe9 	bl	80151d0 <_ZN8touchgfx15TouchControllerD1Ev>
 80151fe:	2104      	movs	r1, #4
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f018 f86e 	bl	802d2e2 <_ZdlPvj>
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4618      	mov	r0, r3
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8015210:	b480      	push	{r7}
 8015212:	b083      	sub	sp, #12
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8015218:	bf00      	nop
 801521a:	370c      	adds	r7, #12
 801521c:	46bd      	mov	sp, r7
 801521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015222:	4770      	bx	lr

08015224 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015224:	b480      	push	{r7}
 8015226:	b085      	sub	sp, #20
 8015228:	af00      	add	r7, sp, #0
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8015230:	2300      	movs	r3, #0
}
 8015232:	4618      	mov	r0, r3
 8015234:	3714      	adds	r7, #20
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr
	...

08015240 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	4a05      	ldr	r2, [pc, #20]	; (8015260 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	601a      	str	r2, [r3, #0]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	4618      	mov	r0, r3
 8015252:	f7ff ffbd 	bl	80151d0 <_ZN8touchgfx15TouchControllerD1Ev>
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	4618      	mov	r0, r3
 801525a:	3708      	adds	r7, #8
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	08030398 	.word	0x08030398

08015264 <_ZN20STM32TouchControllerD0Ev>:
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f7ff ffe7 	bl	8015240 <_ZN20STM32TouchControllerD1Ev>
 8015272:	2104      	movs	r1, #4
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f018 f834 	bl	802d2e2 <_ZdlPvj>
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	4618      	mov	r0, r3
 801527e:	3708      	adds	r7, #8
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	4603      	mov	r3, r0
 801528c:	71fb      	strb	r3, [r7, #7]

}
 801528e:	bf00      	nop
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801529a:	b480      	push	{r7}
 801529c:	b083      	sub	sp, #12
 801529e:	af00      	add	r7, sp, #0
 80152a0:	4603      	mov	r3, r0
 80152a2:	71fb      	strb	r3, [r7, #7]

}
 80152a4:	bf00      	nop
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr

080152b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	71fb      	strb	r3, [r7, #7]

}
 80152ba:	bf00      	nop
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr
	...

080152c8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80152c8:	b480      	push	{r7}
 80152ca:	b083      	sub	sp, #12
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
    {
 80152d0:	4a04      	ldr	r2, [pc, #16]	; (80152e4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	601a      	str	r2, [r3, #0]
    }
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	4618      	mov	r0, r3
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr
 80152e4:	08030e38 	.word	0x08030e38

080152e8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
    }
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f7ff ffe9 	bl	80152c8 <_ZN8touchgfx3HALD1Ev>
 80152f6:	217c      	movs	r1, #124	; 0x7c
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f017 fff2 	bl	802d2e2 <_ZdlPvj>
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	4618      	mov	r0, r3
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	460b      	mov	r3, r1
 8015312:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	78fa      	ldrb	r2, [r7, #3]
 8015318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2201      	movs	r2, #1
 8015320:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8015324:	bf00      	nop
 8015326:	370c      	adds	r7, #12
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr

08015330 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	460b      	mov	r3, r1
 801533a:	807b      	strh	r3, [r7, #2]
 801533c:	4613      	mov	r3, r2
 801533e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8015340:	4b0c      	ldr	r3, [pc, #48]	; (8015374 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8015342:	881b      	ldrh	r3, [r3, #0]
 8015344:	887a      	ldrh	r2, [r7, #2]
 8015346:	429a      	cmp	r2, r3
 8015348:	d304      	bcc.n	8015354 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801534a:	4b0b      	ldr	r3, [pc, #44]	; (8015378 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801534c:	881b      	ldrh	r3, [r3, #0]
 801534e:	883a      	ldrh	r2, [r7, #0]
 8015350:	429a      	cmp	r2, r3
 8015352:	d205      	bcs.n	8015360 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8015354:	4b09      	ldr	r3, [pc, #36]	; (801537c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8015356:	4a0a      	ldr	r2, [pc, #40]	; (8015380 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8015358:	219e      	movs	r1, #158	; 0x9e
 801535a:	480a      	ldr	r0, [pc, #40]	; (8015384 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801535c:	f018 fde0 	bl	802df20 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8015360:	4a09      	ldr	r2, [pc, #36]	; (8015388 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8015362:	887b      	ldrh	r3, [r7, #2]
 8015364:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8015366:	4a09      	ldr	r2, [pc, #36]	; (801538c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8015368:	883b      	ldrh	r3, [r7, #0]
 801536a:	8013      	strh	r3, [r2, #0]
    }
 801536c:	bf00      	nop
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	2000979c 	.word	0x2000979c
 8015378:	2000979e 	.word	0x2000979e
 801537c:	0802f910 	.word	0x0802f910
 8015380:	0802f974 	.word	0x0802f974
 8015384:	0802f9b8 	.word	0x0802f9b8
 8015388:	200097a2 	.word	0x200097a2
 801538c:	200097a4 	.word	0x200097a4

08015390 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d009      	beq.n	80153b6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	685a      	ldr	r2, [r3, #4]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4610      	mov	r0, r2
 80153b0:	4798      	blx	r3
 80153b2:	4603      	mov	r3, r0
 80153b4:	e000      	b.n	80153b8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80153b6:	2300      	movs	r3, #0
    }
 80153b8:	4618      	mov	r0, r3
 80153ba:	3708      	adds	r7, #8
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f003 f831 	bl	8018430 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	33a4      	adds	r3, #164	; 0xa4
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	4798      	blx	r3
    }
 80153da:	bf00      	nop
 80153dc:	3708      	adds	r7, #8
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80153e2:	b480      	push	{r7}
 80153e4:	b083      	sub	sp, #12
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
 80153ea:	6039      	str	r1, [r7, #0]
    {
        return false;
 80153ec:	2300      	movs	r3, #0
    }
 80153ee:	4618      	mov	r0, r3
 80153f0:	370c      	adds	r7, #12
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr
	...

080153fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b084      	sub	sp, #16
 8015400:	af00      	add	r7, sp, #0
 8015402:	60f8      	str	r0, [r7, #12]
 8015404:	60b9      	str	r1, [r7, #8]
 8015406:	607a      	str	r2, [r7, #4]
 8015408:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d106      	bne.n	801541e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015410:	4b11      	ldr	r3, [pc, #68]	; (8015458 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8015412:	4a12      	ldr	r2, [pc, #72]	; (801545c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015414:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8015418:	4811      	ldr	r0, [pc, #68]	; (8015460 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801541a:	f018 fd81 	bl	802df20 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	68ba      	ldr	r2, [r7, #8]
 8015422:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	683a      	ldr	r2, [r7, #0]
 801542e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2b00      	cmp	r3, #0
 8015434:	bf14      	ite	ne
 8015436:	2301      	movne	r3, #1
 8015438:	2300      	moveq	r3, #0
 801543a:	b2da      	uxtb	r2, r3
 801543c:	4b09      	ldr	r3, [pc, #36]	; (8015464 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801543e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	2b00      	cmp	r3, #0
 8015444:	bf14      	ite	ne
 8015446:	2301      	movne	r3, #1
 8015448:	2300      	moveq	r3, #0
 801544a:	b2da      	uxtb	r2, r3
 801544c:	4b06      	ldr	r3, [pc, #24]	; (8015468 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801544e:	701a      	strb	r2, [r3, #0]
    }
 8015450:	bf00      	nop
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	0802f9fc 	.word	0x0802f9fc
 801545c:	0802fa34 	.word	0x0802fa34
 8015460:	0802f9b8 	.word	0x0802f9b8
 8015464:	200097a6 	.word	0x200097a6
 8015468:	200097a7 	.word	0x200097a7

0801546c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015474:	2300      	movs	r3, #0
    }
 8015476:	4618      	mov	r0, r3
 8015478:	370c      	adds	r7, #12
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr

08015482 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8015482:	b580      	push	{r7, lr}
 8015484:	b082      	sub	sp, #8
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
 801548a:	460b      	mov	r3, r1
 801548c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015492:	2b00      	cmp	r3, #0
 8015494:	d004      	beq.n	80154a0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801549a:	887a      	ldrh	r2, [r7, #2]
 801549c:	4610      	mov	r0, r2
 801549e:	4798      	blx	r3
        }
    }
 80154a0:	bf00      	nop
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}

080154a8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80154a8:	b480      	push	{r7}
 80154aa:	b083      	sub	sp, #12
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80154b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80154b4:	4618      	mov	r0, r3
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr

080154c0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	685a      	ldr	r2, [r3, #4]
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	3318      	adds	r3, #24
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	4610      	mov	r0, r2
 80154d8:	4798      	blx	r3
 80154da:	4603      	mov	r3, r0
    }
 80154dc:	4618      	mov	r0, r3
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80154e4:	b480      	push	{r7}
 80154e6:	b085      	sub	sp, #20
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d011      	beq.n	8015520 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80154fc:	4b14      	ldr	r3, [pc, #80]	; (8015550 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d11e      	bne.n	8015542 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8015504:	4b13      	ldr	r3, [pc, #76]	; (8015554 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015506:	881b      	ldrh	r3, [r3, #0]
 8015508:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801550a:	4b13      	ldr	r3, [pc, #76]	; (8015558 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801550c:	881a      	ldrh	r2, [r3, #0]
 801550e:	4b11      	ldr	r3, [pc, #68]	; (8015554 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015510:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8015512:	4a11      	ldr	r2, [pc, #68]	; (8015558 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015514:	89bb      	ldrh	r3, [r7, #12]
 8015516:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8015518:	4b0d      	ldr	r3, [pc, #52]	; (8015550 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801551a:	2201      	movs	r2, #1
 801551c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801551e:	e010      	b.n	8015542 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8015520:	4b0b      	ldr	r3, [pc, #44]	; (8015550 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8015522:	781b      	ldrb	r3, [r3, #0]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d00c      	beq.n	8015542 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8015528:	4b0a      	ldr	r3, [pc, #40]	; (8015554 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801552a:	881b      	ldrh	r3, [r3, #0]
 801552c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801552e:	4b0a      	ldr	r3, [pc, #40]	; (8015558 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015530:	881a      	ldrh	r2, [r3, #0]
 8015532:	4b08      	ldr	r3, [pc, #32]	; (8015554 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015534:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8015536:	4a08      	ldr	r2, [pc, #32]	; (8015558 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015538:	89fb      	ldrh	r3, [r7, #14]
 801553a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 801553c:	4b04      	ldr	r3, [pc, #16]	; (8015550 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801553e:	2200      	movs	r2, #0
 8015540:	701a      	strb	r2, [r3, #0]
    }
 8015542:	bf00      	nop
 8015544:	3714      	adds	r7, #20
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr
 801554e:	bf00      	nop
 8015550:	200097a0 	.word	0x200097a0
 8015554:	2000979e 	.word	0x2000979e
 8015558:	2000979c 	.word	0x2000979c

0801555c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 801555c:	b480      	push	{r7}
 801555e:	b083      	sub	sp, #12
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
    {
    }
 8015564:	bf00      	nop
 8015566:	370c      	adds	r7, #12
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
    {
    }
 8015578:	bf00      	nop
 801557a:	370c      	adds	r7, #12
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr

08015584 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	f002 f8ea 	bl	8017768 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015594:	bf00      	nop
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	4a05      	ldr	r2, [pc, #20]	; (80155bc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	601a      	str	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7ff fe8b 	bl	80152c8 <_ZN8touchgfx3HALD1Ev>
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	4618      	mov	r0, r3
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	080305e0 	.word	0x080305e0

080155c0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f7ff ffe7 	bl	801559c <_ZN20TouchGFXGeneratedHALD1Ev>
 80155ce:	217c      	movs	r1, #124	; 0x7c
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f017 fe86 	bl	802d2e2 <_ZdlPvj>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	4618      	mov	r0, r3
 80155da:	3708      	adds	r7, #8
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7ff ffca 	bl	8015584 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80155f0:	bf00      	nop
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	4618      	mov	r0, r3
 8015604:	f001 fa9a 	bl	8016b3c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015608:	bf00      	nop
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}

08015610 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4618      	mov	r0, r3
 801561c:	f001 fb26 	bl	8016c6c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015620:	4603      	mov	r3, r0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b082      	sub	sp, #8
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6839      	ldr	r1, [r7, #0]
 8015638:	4618      	mov	r0, r3
 801563a:	f001 fb25 	bl	8016c88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801563e:	bf00      	nop
 8015640:	3708      	adds	r7, #8
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}

08015646 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b082      	sub	sp, #8
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
 801564e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6839      	ldr	r1, [r7, #0]
 8015654:	4618      	mov	r0, r3
 8015656:	f001 fb2d 	bl	8016cb4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801565a:	bf00      	nop
 801565c:	3708      	adds	r7, #8
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b084      	sub	sp, #16
 8015666:	af00      	add	r7, sp, #0
 8015668:	60f8      	str	r0, [r7, #12]
 801566a:	60b9      	str	r1, [r7, #8]
 801566c:	607a      	str	r2, [r7, #4]
 801566e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015670:	68f8      	ldr	r0, [r7, #12]
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	687a      	ldr	r2, [r7, #4]
 8015676:	68b9      	ldr	r1, [r7, #8]
 8015678:	f001 fb2a 	bl	8016cd0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801567c:	4603      	mov	r3, r0
}
 801567e:	4618      	mov	r0, r3
 8015680:	3710      	adds	r7, #16
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}

08015686 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8015686:	b580      	push	{r7, lr}
 8015688:	b082      	sub	sp, #8
 801568a:	af00      	add	r7, sp, #0
 801568c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	4618      	mov	r0, r3
 8015692:	f001 fa77 	bl	8016b84 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8015696:	bf00      	nop
 8015698:	3708      	adds	r7, #8
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}

0801569e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801569e:	b580      	push	{r7, lr}
 80156a0:	b082      	sub	sp, #8
 80156a2:	af00      	add	r7, sp, #0
 80156a4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f001 fa7b 	bl	8016ba4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80156ae:	bf00      	nop
 80156b0:	3708      	adds	r7, #8
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80156b6:	b580      	push	{r7, lr}
 80156b8:	b082      	sub	sp, #8
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4618      	mov	r0, r3
 80156c2:	f001 fa7d 	bl	8016bc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80156c6:	bf00      	nop
 80156c8:	3708      	adds	r7, #8
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b082      	sub	sp, #8
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	4618      	mov	r0, r3
 80156da:	f001 fa7f 	bl	8016bdc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80156de:	bf00      	nop
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
	...

080156e8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	4a05      	ldr	r2, [pc, #20]	; (8015708 <_ZN11TouchGFXHALD1Ev+0x20>)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7ff ff4f 	bl	801559c <_ZN20TouchGFXGeneratedHALD1Ev>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4618      	mov	r0, r3
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	080303c8 	.word	0x080303c8

0801570c <_ZN11TouchGFXHALD0Ev>:
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f7ff ffe7 	bl	80156e8 <_ZN11TouchGFXHALD1Ev>
 801571a:	217c      	movs	r1, #124	; 0x7c
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f017 fde0 	bl	802d2e2 <_ZdlPvj>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	4618      	mov	r0, r3
 8015726:	3708      	adds	r7, #8
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801572c:	b580      	push	{r7, lr}
 801572e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8015730:	2200      	movs	r2, #0
 8015732:	2101      	movs	r1, #1
 8015734:	2001      	movs	r0, #1
 8015736:	f7f6 fdc7 	bl	800c2c8 <osSemaphoreNew>
 801573a:	4603      	mov	r3, r0
 801573c:	4a0f      	ldr	r2, [pc, #60]	; (801577c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801573e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8015740:	4b0e      	ldr	r3, [pc, #56]	; (801577c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d105      	bne.n	8015754 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8015748:	4b0d      	ldr	r3, [pc, #52]	; (8015780 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 801574a:	4a0e      	ldr	r2, [pc, #56]	; (8015784 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801574c:	2128      	movs	r1, #40	; 0x28
 801574e:	480e      	ldr	r0, [pc, #56]	; (8015788 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015750:	f018 fbe6 	bl	802df20 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8015754:	2200      	movs	r2, #0
 8015756:	2104      	movs	r1, #4
 8015758:	2001      	movs	r0, #1
 801575a:	f7f6 fed5 	bl	800c508 <osMessageQueueNew>
 801575e:	4603      	mov	r3, r0
 8015760:	4a0a      	ldr	r2, [pc, #40]	; (801578c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015762:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8015764:	4b09      	ldr	r3, [pc, #36]	; (801578c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d105      	bne.n	8015778 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 801576c:	4b08      	ldr	r3, [pc, #32]	; (8015790 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801576e:	4a05      	ldr	r2, [pc, #20]	; (8015784 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015770:	212c      	movs	r1, #44	; 0x2c
 8015772:	4805      	ldr	r0, [pc, #20]	; (8015788 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015774:	f018 fbd4 	bl	802df20 <__assert_func>
}
 8015778:	bf00      	nop
 801577a:	bd80      	pop	{r7, pc}
 801577c:	20007b40 	.word	0x20007b40
 8015780:	0802fa84 	.word	0x0802fa84
 8015784:	0802fad0 	.word	0x0802fad0
 8015788:	0802fb00 	.word	0x0802fb00
 801578c:	20007b44 	.word	0x20007b44
 8015790:	0802fb2c 	.word	0x0802fb2c

08015794 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8015794:	b580      	push	{r7, lr}
 8015796:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8015798:	4b04      	ldr	r3, [pc, #16]	; (80157ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f04f 31ff 	mov.w	r1, #4294967295
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7f6 fe1b 	bl	800c3dc <osSemaphoreAcquire>
}
 80157a6:	bf00      	nop
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	20007b40 	.word	0x20007b40

080157b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80157b4:	4b03      	ldr	r3, [pc, #12]	; (80157c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7f6 fe61 	bl	800c480 <osSemaphoreRelease>
}
 80157be:	bf00      	nop
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20007b40 	.word	0x20007b40

080157c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80157cc:	4b03      	ldr	r3, [pc, #12]	; (80157dc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2100      	movs	r1, #0
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7f6 fe02 	bl	800c3dc <osSemaphoreAcquire>
}
 80157d8:	bf00      	nop
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	20007b40 	.word	0x20007b40

080157e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80157e4:	4b03      	ldr	r3, [pc, #12]	; (80157f4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7f6 fe49 	bl	800c480 <osSemaphoreRelease>
}
 80157ee:	bf00      	nop
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop
 80157f4:	20007b40 	.word	0x20007b40

080157f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80157fc:	4b04      	ldr	r3, [pc, #16]	; (8015810 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80157fe:	6818      	ldr	r0, [r3, #0]
 8015800:	2300      	movs	r3, #0
 8015802:	2200      	movs	r2, #0
 8015804:	4903      	ldr	r1, [pc, #12]	; (8015814 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8015806:	f7f6 fef3 	bl	800c5f0 <osMessageQueuePut>
}
 801580a:	bf00      	nop
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	20007b44 	.word	0x20007b44
 8015814:	20000018 	.word	0x20000018

08015818 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801581e:	4b09      	ldr	r3, [pc, #36]	; (8015844 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015820:	6818      	ldr	r0, [r3, #0]
 8015822:	1d39      	adds	r1, r7, #4
 8015824:	2300      	movs	r3, #0
 8015826:	2200      	movs	r2, #0
 8015828:	f7f6 ff42 	bl	800c6b0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 801582c:	4b05      	ldr	r3, [pc, #20]	; (8015844 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801582e:	6818      	ldr	r0, [r3, #0]
 8015830:	1d39      	adds	r1, r7, #4
 8015832:	f04f 33ff 	mov.w	r3, #4294967295
 8015836:	2200      	movs	r2, #0
 8015838:	f7f6 ff3a 	bl	800c6b0 <osMessageQueueGet>
}
 801583c:	bf00      	nop
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}
 8015844:	20007b44 	.word	0x20007b44

08015848 <__NVIC_EnableIRQ>:
{
 8015848:	b480      	push	{r7}
 801584a:	b083      	sub	sp, #12
 801584c:	af00      	add	r7, sp, #0
 801584e:	4603      	mov	r3, r0
 8015850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015856:	2b00      	cmp	r3, #0
 8015858:	db0b      	blt.n	8015872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801585a:	79fb      	ldrb	r3, [r7, #7]
 801585c:	f003 021f 	and.w	r2, r3, #31
 8015860:	4907      	ldr	r1, [pc, #28]	; (8015880 <__NVIC_EnableIRQ+0x38>)
 8015862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015866:	095b      	lsrs	r3, r3, #5
 8015868:	2001      	movs	r0, #1
 801586a:	fa00 f202 	lsl.w	r2, r0, r2
 801586e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015872:	bf00      	nop
 8015874:	370c      	adds	r7, #12
 8015876:	46bd      	mov	sp, r7
 8015878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop
 8015880:	e000e100 	.word	0xe000e100

08015884 <__NVIC_DisableIRQ>:
{
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	4603      	mov	r3, r0
 801588c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015892:	2b00      	cmp	r3, #0
 8015894:	db12      	blt.n	80158bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015896:	79fb      	ldrb	r3, [r7, #7]
 8015898:	f003 021f 	and.w	r2, r3, #31
 801589c:	490a      	ldr	r1, [pc, #40]	; (80158c8 <__NVIC_DisableIRQ+0x44>)
 801589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158a2:	095b      	lsrs	r3, r3, #5
 80158a4:	2001      	movs	r0, #1
 80158a6:	fa00 f202 	lsl.w	r2, r0, r2
 80158aa:	3320      	adds	r3, #32
 80158ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80158b0:	f3bf 8f4f 	dsb	sy
}
 80158b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80158b6:	f3bf 8f6f 	isb	sy
}
 80158ba:	bf00      	nop
}
 80158bc:	bf00      	nop
 80158be:	370c      	adds	r7, #12
 80158c0:	46bd      	mov	sp, r7
 80158c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c6:	4770      	bx	lr
 80158c8:	e000e100 	.word	0xe000e100

080158cc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
        : color(0)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2200      	movs	r2, #0
 80158d8:	601a      	str	r2, [r3, #0]
    }
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4618      	mov	r0, r3
 80158de:	370c      	adds	r7, #12
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr

080158e8 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80158e8:	b480      	push	{r7}
 80158ea:	b083      	sub	sp, #12
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
        return color;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	681b      	ldr	r3, [r3, #0]
    }
 80158f4:	4618      	mov	r0, r3
 80158f6:	370c      	adds	r7, #12
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
    {
 8015908:	4a04      	ldr	r2, [pc, #16]	; (801591c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	601a      	str	r2, [r3, #0]
    }
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4618      	mov	r0, r3
 8015912:	370c      	adds	r7, #12
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr
 801591c:	080304e8 	.word	0x080304e8

08015920 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015920:	b580      	push	{r7, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
    }
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f7ff ffe9 	bl	8015900 <_ZN8touchgfx9DMA_QueueD1Ev>
 801592e:	2104      	movs	r1, #4
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f017 fcd6 	bl	802d2e2 <_ZdlPvj>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	3344      	adds	r3, #68	; 0x44
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	4798      	blx	r3
    }
 8015954:	bf00      	nop
 8015956:	3708      	adds	r7, #8
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}

0801595c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801595c:	b480      	push	{r7}
 801595e:	b083      	sub	sp, #12
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
    {
 8015964:	4a04      	ldr	r2, [pc, #16]	; (8015978 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	601a      	str	r2, [r3, #0]
    }
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	4618      	mov	r0, r3
 801596e:	370c      	adds	r7, #12
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr
 8015978:	08031390 	.word	0x08031390

0801597c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
    }
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f7ff ffe9 	bl	801595c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801598a:	210c      	movs	r1, #12
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f017 fca8 	bl	802d2e2 <_ZdlPvj>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80159a6:	4a09      	ldr	r2, [pc, #36]	; (80159cc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	601a      	str	r2, [r3, #0]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	683a      	ldr	r2, [r7, #0]
 80159b0:	605a      	str	r2, [r3, #4]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	2200      	movs	r2, #0
 80159b6:	721a      	strb	r2, [r3, #8]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2200      	movs	r2, #0
 80159bc:	725a      	strb	r2, [r3, #9]
    {
    }
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	4618      	mov	r0, r3
 80159c2:	370c      	adds	r7, #12
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr
 80159cc:	08031390 	.word	0x08031390

080159d0 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80159d0:	b480      	push	{r7}
 80159d2:	b083      	sub	sp, #12
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80159d8:	2301      	movs	r3, #1
    }
 80159da:	4618      	mov	r0, r3
 80159dc:	370c      	adds	r7, #12
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80159e6:	b580      	push	{r7, lr}
 80159e8:	b082      	sub	sp, #8
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80159ee:	687a      	ldr	r2, [r7, #4]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	3328      	adds	r3, #40	; 0x28
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	4610      	mov	r0, r2
 80159fa:	4798      	blx	r3
    }
 80159fc:	bf00      	nop
 80159fe:	3708      	adds	r7, #8
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	685a      	ldr	r2, [r3, #4]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	685b      	ldr	r3, [r3, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	3314      	adds	r3, #20
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	4610      	mov	r0, r2
 8015a1c:	4798      	blx	r3
    }
 8015a1e:	bf00      	nop
 8015a20:	3708      	adds	r7, #8
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b082      	sub	sp, #8
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8015a2e:	f7fa facd 	bl	800ffcc <_ZN8touchgfx3HAL11getInstanceEv>
 8015a32:	4603      	mov	r3, r0
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7ff ffe5 	bl	8015a04 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8015a3a:	bf00      	nop
 8015a3c:	3708      	adds	r7, #8
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b082      	sub	sp, #8
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	330c      	adds	r3, #12
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7ff ff3c 	bl	80158cc <_ZN8touchgfx9colortypeC1Ev>
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	4618      	mov	r0, r3
 8015a58:	3708      	adds	r7, #8
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}
	...

08015a60 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8015a60:	b5b0      	push	{r4, r5, r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015a68:	687a      	ldr	r2, [r7, #4]
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	330c      	adds	r3, #12
 8015a6e:	4619      	mov	r1, r3
 8015a70:	4610      	mov	r0, r2
 8015a72:	f7ff ff93 	bl	801599c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8015a76:	4a0e      	ldr	r2, [pc, #56]	; (8015ab0 <_ZN8STM32DMAC1Ev+0x50>)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	601a      	str	r2, [r3, #0]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f103 000c 	add.w	r0, r3, #12
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	3320      	adds	r3, #32
 8015a86:	2260      	movs	r2, #96	; 0x60
 8015a88:	4619      	mov	r1, r3
 8015a8a:	f002 fe03 	bl	8018694 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	3320      	adds	r3, #32
 8015a92:	245f      	movs	r4, #95	; 0x5f
 8015a94:	461d      	mov	r5, r3
 8015a96:	2c00      	cmp	r4, #0
 8015a98:	db05      	blt.n	8015aa6 <_ZN8STM32DMAC1Ev+0x46>
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f7ff ffd1 	bl	8015a42 <_ZN8touchgfx6BlitOpC1Ev>
 8015aa0:	3520      	adds	r5, #32
 8015aa2:	3c01      	subs	r4, #1
 8015aa4:	e7f7      	b.n	8015a96 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bdb0      	pop	{r4, r5, r7, pc}
 8015ab0:	08030498 	.word	0x08030498

08015ab4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	4a09      	ldr	r2, [pc, #36]	; (8015ae4 <_ZN8STM32DMAD1Ev+0x30>)
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015ac2:	205a      	movs	r0, #90	; 0x5a
 8015ac4:	f7ff fede 	bl	8015884 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	330c      	adds	r3, #12
 8015acc:	4618      	mov	r0, r3
 8015ace:	f000 fac3 	bl	8016058 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7ff ff41 	bl	801595c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	4618      	mov	r0, r3
 8015ade:	3708      	adds	r7, #8
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	08030498 	.word	0x08030498

08015ae8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b082      	sub	sp, #8
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
}
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7ff ffdf 	bl	8015ab4 <_ZN8STM32DMAD1Ev>
 8015af6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f017 fbf1 	bl	802d2e2 <_ZdlPvj>
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	4618      	mov	r0, r3
 8015b04:	3708      	adds	r7, #8
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
	...

08015b0c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015b14:	2300      	movs	r3, #0
 8015b16:	60fb      	str	r3, [r7, #12]
 8015b18:	4b10      	ldr	r3, [pc, #64]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b1c:	4a0f      	ldr	r2, [pc, #60]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015b22:	6313      	str	r3, [r2, #48]	; 0x30
 8015b24:	4b0d      	ldr	r3, [pc, #52]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015b2c:	60fb      	str	r3, [r7, #12]
 8015b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8015b30:	4b0a      	ldr	r3, [pc, #40]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b32:	691b      	ldr	r3, [r3, #16]
 8015b34:	4a09      	ldr	r2, [pc, #36]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015b3a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8015b3c:	4b07      	ldr	r3, [pc, #28]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b3e:	691b      	ldr	r3, [r3, #16]
 8015b40:	4a06      	ldr	r2, [pc, #24]	; (8015b5c <_ZN8STM32DMA10initializeEv+0x50>)
 8015b42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015b46:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015b48:	4b05      	ldr	r3, [pc, #20]	; (8015b60 <_ZN8STM32DMA10initializeEv+0x54>)
 8015b4a:	4a06      	ldr	r2, [pc, #24]	; (8015b64 <_ZN8STM32DMA10initializeEv+0x58>)
 8015b4c:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015b4e:	205a      	movs	r0, #90	; 0x5a
 8015b50:	f7ff fe7a 	bl	8015848 <__NVIC_EnableIRQ>
}
 8015b54:	bf00      	nop
 8015b56:	3710      	adds	r7, #16
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	40023800 	.word	0x40023800
 8015b60:	2000b040 	.word	0x2000b040
 8015b64:	08015a27 	.word	0x08015a27

08015b68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	460b      	mov	r3, r1
 8015b72:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015b74:	2300      	movs	r3, #0
 8015b76:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015b78:	78fb      	ldrb	r3, [r7, #3]
 8015b7a:	2b0b      	cmp	r3, #11
 8015b7c:	d826      	bhi.n	8015bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8015b7e:	a201      	add	r2, pc, #4	; (adr r2, 8015b84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b84:	08015bc1 	.word	0x08015bc1
 8015b88:	08015bbb 	.word	0x08015bbb
 8015b8c:	08015bb5 	.word	0x08015bb5
 8015b90:	08015bcd 	.word	0x08015bcd
 8015b94:	08015bcd 	.word	0x08015bcd
 8015b98:	08015bcd 	.word	0x08015bcd
 8015b9c:	08015bcd 	.word	0x08015bcd
 8015ba0:	08015bc7 	.word	0x08015bc7
 8015ba4:	08015bc7 	.word	0x08015bc7
 8015ba8:	08015bc7 	.word	0x08015bc7
 8015bac:	08015bc7 	.word	0x08015bc7
 8015bb0:	08015bc7 	.word	0x08015bc7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	60fb      	str	r3, [r7, #12]
        break;
 8015bb8:	e00e      	b.n	8015bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8015bba:	2301      	movs	r3, #1
 8015bbc:	60fb      	str	r3, [r7, #12]
        break;
 8015bbe:	e00b      	b.n	8015bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8015bc0:	2302      	movs	r3, #2
 8015bc2:	60fb      	str	r3, [r7, #12]
        break;
 8015bc4:	e008      	b.n	8015bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8015bc6:	2305      	movs	r3, #5
 8015bc8:	60fb      	str	r3, [r7, #12]
        break;
 8015bca:	e005      	b.n	8015bd8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015bcc:	4b05      	ldr	r3, [pc, #20]	; (8015be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8015bce:	4a06      	ldr	r2, [pc, #24]	; (8015be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8015bd0:	2166      	movs	r1, #102	; 0x66
 8015bd2:	4806      	ldr	r0, [pc, #24]	; (8015bec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8015bd4:	f018 f9a4 	bl	802df20 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	0802fb70 	.word	0x0802fb70
 8015be8:	0802fb8c 	.word	0x0802fb8c
 8015bec:	0802fbd8 	.word	0x0802fbd8

08015bf0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015c00:	78fb      	ldrb	r3, [r7, #3]
 8015c02:	2b0a      	cmp	r3, #10
 8015c04:	d821      	bhi.n	8015c4a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8015c06:	a201      	add	r2, pc, #4	; (adr r2, 8015c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c0c:	08015c45 	.word	0x08015c45
 8015c10:	08015c3f 	.word	0x08015c3f
 8015c14:	08015c39 	.word	0x08015c39
 8015c18:	08015c4b 	.word	0x08015c4b
 8015c1c:	08015c4b 	.word	0x08015c4b
 8015c20:	08015c4b 	.word	0x08015c4b
 8015c24:	08015c4b 	.word	0x08015c4b
 8015c28:	08015c3f 	.word	0x08015c3f
 8015c2c:	08015c3f 	.word	0x08015c3f
 8015c30:	08015c3f 	.word	0x08015c3f
 8015c34:	08015c3f 	.word	0x08015c3f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	60fb      	str	r3, [r7, #12]
        break;
 8015c3c:	e00b      	b.n	8015c56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8015c3e:	2301      	movs	r3, #1
 8015c40:	60fb      	str	r3, [r7, #12]
        break;
 8015c42:	e008      	b.n	8015c56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8015c44:	2302      	movs	r3, #2
 8015c46:	60fb      	str	r3, [r7, #12]
        break;
 8015c48:	e005      	b.n	8015c56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015c4a:	4b05      	ldr	r3, [pc, #20]	; (8015c60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8015c4c:	4a05      	ldr	r2, [pc, #20]	; (8015c64 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8015c4e:	2187      	movs	r1, #135	; 0x87
 8015c50:	4805      	ldr	r0, [pc, #20]	; (8015c68 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8015c52:	f018 f965 	bl	802df20 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015c56:	68fb      	ldr	r3, [r7, #12]
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	0802fb70 	.word	0x0802fb70
 8015c64:	0802fc04 	.word	0x0802fc04
 8015c68:	0802fbd8 	.word	0x0802fbd8

08015c6c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b083      	sub	sp, #12
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8015c74:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	370c      	adds	r7, #12
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015c84:	b590      	push	{r4, r7, lr}
 8015c86:	b089      	sub	sp, #36	; 0x24
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	7f5b      	ldrb	r3, [r3, #29]
 8015c92:	4619      	mov	r1, r3
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7ff ff67 	bl	8015b68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015c9a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	7f9b      	ldrb	r3, [r3, #30]
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f7ff ff60 	bl	8015b68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015ca8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	7f9b      	ldrb	r3, [r3, #30]
 8015cae:	4619      	mov	r1, r3
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f7ff ff9d 	bl	8015bf0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015cb6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	8b5b      	ldrh	r3, [r3, #26]
 8015cbc:	461a      	mov	r2, r3
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	8a9b      	ldrh	r3, [r3, #20]
 8015cc2:	1ad2      	subs	r2, r2, r3
 8015cc4:	4b99      	ldr	r3, [pc, #612]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	8b5b      	ldrh	r3, [r3, #26]
 8015ccc:	461a      	mov	r2, r3
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	8a9b      	ldrh	r3, [r3, #20]
 8015cd2:	1ad2      	subs	r2, r2, r3
 8015cd4:	4b95      	ldr	r3, [pc, #596]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cd6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	8b1b      	ldrh	r3, [r3, #24]
 8015cdc:	461a      	mov	r2, r3
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	8a9b      	ldrh	r3, [r3, #20]
 8015ce2:	1ad2      	subs	r2, r2, r3
 8015ce4:	4b91      	ldr	r3, [pc, #580]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ce6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015ce8:	4a90      	ldr	r2, [pc, #576]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	8adb      	ldrh	r3, [r3, #22]
 8015cf2:	461a      	mov	r2, r3
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	8a9b      	ldrh	r3, [r3, #20]
 8015cf8:	041b      	lsls	r3, r3, #16
 8015cfa:	431a      	orrs	r2, r3
 8015cfc:	4b8b      	ldr	r3, [pc, #556]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	691a      	ldr	r2, [r3, #16]
 8015d04:	4b89      	ldr	r3, [pc, #548]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	685a      	ldr	r2, [r3, #4]
 8015d0c:	4b87      	ldr	r3, [pc, #540]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d0e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d18:	d037      	beq.n	8015d8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8015d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d1e:	f200 80e8 	bhi.w	8015ef2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d26:	d014      	beq.n	8015d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8015d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d2c:	f200 80e1 	bhi.w	8015ef2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015d30:	2b80      	cmp	r3, #128	; 0x80
 8015d32:	d05b      	beq.n	8015dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8015d34:	2b80      	cmp	r3, #128	; 0x80
 8015d36:	f200 80dc 	bhi.w	8015ef2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015d3a:	2b40      	cmp	r3, #64	; 0x40
 8015d3c:	f000 80c4 	beq.w	8015ec8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015d40:	2b40      	cmp	r3, #64	; 0x40
 8015d42:	f200 80d6 	bhi.w	8015ef2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015d46:	2b04      	cmp	r3, #4
 8015d48:	d03b      	beq.n	8015dc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8015d4a:	2b20      	cmp	r3, #32
 8015d4c:	f000 80bc 	beq.w	8015ec8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015d50:	e0cf      	b.n	8015ef2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	7f1b      	ldrb	r3, [r3, #28]
 8015d56:	061b      	lsls	r3, r3, #24
 8015d58:	4a74      	ldr	r2, [pc, #464]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d5e:	f043 030a 	orr.w	r3, r3, #10
 8015d62:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	330c      	adds	r3, #12
 8015d68:	4c70      	ldr	r4, [pc, #448]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7ff fdbc 	bl	80158e8 <_ZNK8touchgfx9colortypecvmEv>
 8015d70:	4603      	mov	r3, r0
 8015d72:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015d74:	4a6d      	ldr	r2, [pc, #436]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	691a      	ldr	r2, [r3, #16]
 8015d7e:	4b6b      	ldr	r3, [pc, #428]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d80:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015d82:	4b6a      	ldr	r3, [pc, #424]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d84:	4a6a      	ldr	r2, [pc, #424]	; (8015f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015d86:	601a      	str	r2, [r3, #0]
        break;
 8015d88:	e0cc      	b.n	8015f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	7f1b      	ldrb	r3, [r3, #28]
 8015d8e:	061b      	lsls	r3, r3, #24
 8015d90:	4a66      	ldr	r2, [pc, #408]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d96:	f043 0309 	orr.w	r3, r3, #9
 8015d9a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	330c      	adds	r3, #12
 8015da0:	4c62      	ldr	r4, [pc, #392]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7ff fda0 	bl	80158e8 <_ZNK8touchgfx9colortypecvmEv>
 8015da8:	4603      	mov	r3, r0
 8015daa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015dac:	4a5f      	ldr	r2, [pc, #380]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	691a      	ldr	r2, [r3, #16]
 8015db6:	4b5d      	ldr	r3, [pc, #372]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015db8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015dba:	4b5c      	ldr	r3, [pc, #368]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dbc:	4a5c      	ldr	r2, [pc, #368]	; (8015f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015dbe:	601a      	str	r2, [r3, #0]
        break;
 8015dc0:	e0b0      	b.n	8015f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	7f1b      	ldrb	r3, [r3, #28]
 8015dc6:	061b      	lsls	r3, r3, #24
 8015dc8:	461a      	mov	r2, r3
 8015dca:	69bb      	ldr	r3, [r7, #24]
 8015dcc:	4313      	orrs	r3, r2
 8015dce:	4a57      	ldr	r2, [pc, #348]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015dd4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015dd6:	4a55      	ldr	r2, [pc, #340]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	691a      	ldr	r2, [r3, #16]
 8015de0:	4b52      	ldr	r3, [pc, #328]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015de2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015de4:	4b51      	ldr	r3, [pc, #324]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015de6:	4a52      	ldr	r2, [pc, #328]	; (8015f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015de8:	601a      	str	r2, [r3, #0]
        break;
 8015dea:	e09b      	b.n	8015f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8015dec:	2301      	movs	r3, #1
 8015dee:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	1d1a      	adds	r2, r3, #4
 8015dfa:	4b4c      	ldr	r3, [pc, #304]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dfc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	7f1b      	ldrb	r3, [r3, #28]
 8015e02:	061b      	lsls	r3, r3, #24
 8015e04:	461a      	mov	r2, r3
 8015e06:	69bb      	ldr	r3, [r7, #24]
 8015e08:	4313      	orrs	r3, r2
 8015e0a:	4a48      	ldr	r2, [pc, #288]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e10:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015e12:	4a46      	ldr	r2, [pc, #280]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	691a      	ldr	r2, [r3, #16]
 8015e1c:	4b43      	ldr	r3, [pc, #268]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e1e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	881b      	ldrh	r3, [r3, #0]
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d002      	beq.n	8015e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d00f      	beq.n	8015e4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8015e2e:	e024      	b.n	8015e7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015e30:	4b3e      	ldr	r3, [pc, #248]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e32:	69db      	ldr	r3, [r3, #28]
 8015e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e38:	f023 0310 	bic.w	r3, r3, #16
 8015e3c:	68fa      	ldr	r2, [r7, #12]
 8015e3e:	8852      	ldrh	r2, [r2, #2]
 8015e40:	3a01      	subs	r2, #1
 8015e42:	0212      	lsls	r2, r2, #8
 8015e44:	4611      	mov	r1, r2
 8015e46:	4a39      	ldr	r2, [pc, #228]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e48:	430b      	orrs	r3, r1
 8015e4a:	61d3      	str	r3, [r2, #28]
                break;
 8015e4c:	e01c      	b.n	8015e88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	7f1b      	ldrb	r3, [r3, #28]
 8015e52:	2bff      	cmp	r3, #255	; 0xff
 8015e54:	d101      	bne.n	8015e5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                  blend = false;
 8015e56:	2300      	movs	r3, #0
 8015e58:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015e5a:	4b34      	ldr	r3, [pc, #208]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e5c:	69db      	ldr	r3, [r3, #28]
 8015e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e62:	f023 0310 	bic.w	r3, r3, #16
 8015e66:	68fa      	ldr	r2, [r7, #12]
 8015e68:	8852      	ldrh	r2, [r2, #2]
 8015e6a:	3a01      	subs	r2, #1
 8015e6c:	0212      	lsls	r2, r2, #8
 8015e6e:	4313      	orrs	r3, r2
 8015e70:	4a2e      	ldr	r2, [pc, #184]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e72:	f043 0310 	orr.w	r3, r3, #16
 8015e76:	61d3      	str	r3, [r2, #28]
                break;
 8015e78:	e006      	b.n	8015e88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8015e7a:	4b2e      	ldr	r3, [pc, #184]	; (8015f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8015e7c:	4a2e      	ldr	r2, [pc, #184]	; (8015f38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8015e7e:	f240 1111 	movw	r1, #273	; 0x111
 8015e82:	482e      	ldr	r0, [pc, #184]	; (8015f3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8015e84:	f018 f84c 	bl	802df20 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8015e88:	4b28      	ldr	r3, [pc, #160]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e8a:	69db      	ldr	r3, [r3, #28]
 8015e8c:	4a27      	ldr	r2, [pc, #156]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e8e:	f043 0320 	orr.w	r3, r3, #32
 8015e92:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015e94:	4b25      	ldr	r3, [pc, #148]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e96:	69db      	ldr	r3, [r3, #28]
 8015e98:	f003 0320 	and.w	r3, r3, #32
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	bf14      	ite	ne
 8015ea0:	2301      	movne	r3, #1
 8015ea2:	2300      	moveq	r3, #0
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d000      	beq.n	8015eac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8015eaa:	e7f3      	b.n	8015e94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8015eac:	4b1f      	ldr	r3, [pc, #124]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eae:	2210      	movs	r2, #16
 8015eb0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8015eb2:	7ffb      	ldrb	r3, [r7, #31]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d003      	beq.n	8015ec0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015eb8:	4b1c      	ldr	r3, [pc, #112]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eba:	4a1d      	ldr	r2, [pc, #116]	; (8015f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015ebc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8015ebe:	e031      	b.n	8015f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015ec0:	4b1a      	ldr	r3, [pc, #104]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ec2:	4a1f      	ldr	r2, [pc, #124]	; (8015f40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8015ec4:	601a      	str	r2, [r3, #0]
      break;
 8015ec6:	e02d      	b.n	8015f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	7f1b      	ldrb	r3, [r3, #28]
 8015ecc:	061b      	lsls	r3, r3, #24
 8015ece:	461a      	mov	r2, r3
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	4313      	orrs	r3, r2
 8015ed4:	4a15      	ldr	r2, [pc, #84]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015eda:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015edc:	4a13      	ldr	r2, [pc, #76]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	691a      	ldr	r2, [r3, #16]
 8015ee6:	4b11      	ldr	r3, [pc, #68]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ee8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015eea:	4b10      	ldr	r3, [pc, #64]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eec:	4a10      	ldr	r2, [pc, #64]	; (8015f30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015eee:	601a      	str	r2, [r3, #0]
        break;
 8015ef0:	e018      	b.n	8015f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	7f1b      	ldrb	r3, [r3, #28]
 8015ef6:	061b      	lsls	r3, r3, #24
 8015ef8:	461a      	mov	r2, r3
 8015efa:	69bb      	ldr	r3, [r7, #24]
 8015efc:	4313      	orrs	r3, r2
 8015efe:	4a0b      	ldr	r2, [pc, #44]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f04:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	7f5a      	ldrb	r2, [r3, #29]
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	7f9b      	ldrb	r3, [r3, #30]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d003      	beq.n	8015f1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015f12:	4b06      	ldr	r3, [pc, #24]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f14:	4a0a      	ldr	r2, [pc, #40]	; (8015f40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8015f16:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8015f18:	e003      	b.n	8015f22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8015f1a:	4b04      	ldr	r3, [pc, #16]	; (8015f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f1c:	f240 2201 	movw	r2, #513	; 0x201
 8015f20:	601a      	str	r2, [r3, #0]
        break;
 8015f22:	bf00      	nop
    }
}
 8015f24:	bf00      	nop
 8015f26:	3724      	adds	r7, #36	; 0x24
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd90      	pop	{r4, r7, pc}
 8015f2c:	4002b000 	.word	0x4002b000
 8015f30:	00020201 	.word	0x00020201
 8015f34:	0802fc50 	.word	0x0802fc50
 8015f38:	0802fc6c 	.word	0x0802fc6c
 8015f3c:	0802fbd8 	.word	0x0802fbd8
 8015f40:	00010201 	.word	0x00010201

08015f44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8015f44:	b590      	push	{r4, r7, lr}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	7f9b      	ldrb	r3, [r3, #30]
 8015f52:	4619      	mov	r1, r3
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f7ff fe4b 	bl	8015bf0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015f5a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015f5c:	4a3b      	ldr	r2, [pc, #236]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	8adb      	ldrh	r3, [r3, #22]
 8015f66:	461a      	mov	r2, r3
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	8a9b      	ldrh	r3, [r3, #20]
 8015f6c:	041b      	lsls	r3, r3, #16
 8015f6e:	431a      	orrs	r2, r3
 8015f70:	4b36      	ldr	r3, [pc, #216]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	691a      	ldr	r2, [r3, #16]
 8015f78:	4b34      	ldr	r3, [pc, #208]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	8b5b      	ldrh	r3, [r3, #26]
 8015f80:	461a      	mov	r2, r3
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	8a9b      	ldrh	r3, [r3, #20]
 8015f86:	1ad2      	subs	r2, r2, r3
 8015f88:	4b30      	ldr	r3, [pc, #192]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f8a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	2b08      	cmp	r3, #8
 8015f92:	d12f      	bne.n	8015ff4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	8b5b      	ldrh	r3, [r3, #26]
 8015f98:	461a      	mov	r2, r3
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	8a9b      	ldrh	r3, [r3, #20]
 8015f9e:	1ad2      	subs	r2, r2, r3
 8015fa0:	4b2a      	ldr	r3, [pc, #168]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fa2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015fa4:	683b      	ldr	r3, [r7, #0]
 8015fa6:	8b5b      	ldrh	r3, [r3, #26]
 8015fa8:	461a      	mov	r2, r3
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	8a9b      	ldrh	r3, [r3, #20]
 8015fae:	1ad2      	subs	r2, r2, r3
 8015fb0:	4b26      	ldr	r3, [pc, #152]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fb2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015fb4:	4a25      	ldr	r2, [pc, #148]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	7f1b      	ldrb	r3, [r3, #28]
 8015fbe:	061b      	lsls	r3, r3, #24
 8015fc0:	4a22      	ldr	r2, [pc, #136]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015fc6:	f043 0309 	orr.w	r3, r3, #9
 8015fca:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	330c      	adds	r3, #12
 8015fd0:	4c1e      	ldr	r4, [pc, #120]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7ff fc88 	bl	80158e8 <_ZNK8touchgfx9colortypecvmEv>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	691a      	ldr	r2, [r3, #16]
 8015fe0:	4b1a      	ldr	r3, [pc, #104]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fe2:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	691a      	ldr	r2, [r3, #16]
 8015fe8:	4b18      	ldr	r3, [pc, #96]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fea:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8015fec:	4b17      	ldr	r3, [pc, #92]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fee:	4a18      	ldr	r2, [pc, #96]	; (8016050 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8015ff0:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8015ff2:	e027      	b.n	8016044 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015ff4:	4a15      	ldr	r2, [pc, #84]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8015ffa:	4b14      	ldr	r3, [pc, #80]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	330c      	adds	r3, #12
 8016004:	4618      	mov	r0, r3
 8016006:	f7ff fc6f 	bl	80158e8 <_ZNK8touchgfx9colortypecvmEv>
 801600a:	4603      	mov	r3, r0
 801600c:	0a1b      	lsrs	r3, r3, #8
 801600e:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	330c      	adds	r3, #12
 8016016:	4618      	mov	r0, r3
 8016018:	f7ff fc66 	bl	80158e8 <_ZNK8touchgfx9colortypecvmEv>
 801601c:	4603      	mov	r3, r0
 801601e:	095b      	lsrs	r3, r3, #5
 8016020:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016024:	431c      	orrs	r4, r3
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	330c      	adds	r3, #12
 801602a:	4618      	mov	r0, r3
 801602c:	f7ff fc5c 	bl	80158e8 <_ZNK8touchgfx9colortypecvmEv>
 8016030:	4603      	mov	r3, r0
 8016032:	08db      	lsrs	r3, r3, #3
 8016034:	f003 031f 	and.w	r3, r3, #31
 8016038:	4a04      	ldr	r2, [pc, #16]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801603a:	4323      	orrs	r3, r4
 801603c:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801603e:	4b03      	ldr	r3, [pc, #12]	; (801604c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8016040:	4a04      	ldr	r2, [pc, #16]	; (8016054 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8016042:	601a      	str	r2, [r3, #0]
}
 8016044:	bf00      	nop
 8016046:	3714      	adds	r7, #20
 8016048:	46bd      	mov	sp, r7
 801604a:	bd90      	pop	{r4, r7, pc}
 801604c:	4002b000 	.word	0x4002b000
 8016050:	00020201 	.word	0x00020201
 8016054:	00030201 	.word	0x00030201

08016058 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	4a05      	ldr	r2, [pc, #20]	; (8016078 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	601a      	str	r2, [r3, #0]
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	4618      	mov	r0, r3
 801606a:	f7ff fc49 	bl	8015900 <_ZN8touchgfx9DMA_QueueD1Ev>
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	4618      	mov	r0, r3
 8016072:	3708      	adds	r7, #8
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	080313e0 	.word	0x080313e0

0801607c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f7ff ffe7 	bl	8016058 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801608a:	2114      	movs	r1, #20
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f017 f928 	bl	802d2e2 <_ZdlPvj>
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	4618      	mov	r0, r3
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}

0801609c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
        texts = t;
 80160a4:	4a04      	ldr	r2, [pc, #16]	; (80160b8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	6013      	str	r3, [r2, #0]
    }
 80160aa:	bf00      	nop
 80160ac:	370c      	adds	r7, #12
 80160ae:	46bd      	mov	sp, r7
 80160b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b4:	4770      	bx	lr
 80160b6:	bf00      	nop
 80160b8:	20009804 	.word	0x20009804

080160bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80160bc:	b480      	push	{r7}
 80160be:	b085      	sub	sp, #20
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	607a      	str	r2, [r7, #4]
 80160c8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80160ca:	4a0b      	ldr	r2, [pc, #44]	; (80160f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	601a      	str	r2, [r3, #0]
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	68ba      	ldr	r2, [r7, #8]
 80160d4:	605a      	str	r2, [r3, #4]
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	687a      	ldr	r2, [r7, #4]
 80160da:	609a      	str	r2, [r3, #8]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	683a      	ldr	r2, [r7, #0]
 80160e0:	60da      	str	r2, [r3, #12]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	69ba      	ldr	r2, [r7, #24]
 80160e6:	611a      	str	r2, [r3, #16]
    {
    }
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	4618      	mov	r0, r3
 80160ec:	3714      	adds	r7, #20
 80160ee:	46bd      	mov	sp, r7
 80160f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f4:	4770      	bx	lr
 80160f6:	bf00      	nop
 80160f8:	080305d0 	.word	0x080305d0

080160fc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80160fc:	b480      	push	{r7}
 80160fe:	b083      	sub	sp, #12
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
    {
 8016104:	4a04      	ldr	r2, [pc, #16]	; (8016118 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	601a      	str	r2, [r3, #0]
    }
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	4618      	mov	r0, r3
 801610e:	370c      	adds	r7, #12
 8016110:	46bd      	mov	sp, r7
 8016112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016116:	4770      	bx	lr
 8016118:	080305d0 	.word	0x080305d0

0801611c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
    }
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f7ff ffe9 	bl	80160fc <_ZN8touchgfx7MVPHeapD1Ev>
 801612a:	2114      	movs	r1, #20
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f017 f8d8 	bl	802d2e2 <_ZdlPvj>
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	4618      	mov	r0, r3
 8016136:	3708      	adds	r7, #8
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}

0801613c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801613c:	b480      	push	{r7}
 801613e:	b083      	sub	sp, #12
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
    {
 8016144:	4a04      	ldr	r2, [pc, #16]	; (8016158 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	601a      	str	r2, [r3, #0]
    }
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	4618      	mov	r0, r3
 801614e:	370c      	adds	r7, #12
 8016150:	46bd      	mov	sp, r7
 8016152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016156:	4770      	bx	lr
 8016158:	08031c64 	.word	0x08031c64

0801615c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
    }
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f7ff ffe9 	bl	801613c <_ZN8touchgfx3LCDD1Ev>
 801616a:	2108      	movs	r1, #8
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f017 f8b8 	bl	802d2e2 <_ZdlPvj>
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	4618      	mov	r0, r3
 8016176:	3708      	adds	r7, #8
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}

0801617c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801617c:	b480      	push	{r7}
 801617e:	b083      	sub	sp, #12
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	2200      	movs	r2, #0
 8016188:	801a      	strh	r2, [r3, #0]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2200      	movs	r2, #0
 801618e:	805a      	strh	r2, [r3, #2]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2200      	movs	r2, #0
 8016194:	809a      	strh	r2, [r3, #4]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2200      	movs	r2, #0
 801619a:	80da      	strh	r2, [r3, #6]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2200      	movs	r2, #0
 80161a0:	811a      	strh	r2, [r3, #8]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2200      	movs	r2, #0
 80161a6:	815a      	strh	r2, [r3, #10]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2200      	movs	r2, #0
 80161ac:	819a      	strh	r2, [r3, #12]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2200      	movs	r2, #0
 80161b2:	739a      	strb	r2, [r3, #14]
        {
        }
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	4618      	mov	r0, r3
 80161b8:	370c      	adds	r7, #12
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr

080161c2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80161c2:	b580      	push	{r7, lr}
 80161c4:	b082      	sub	sp, #8
 80161c6:	af00      	add	r7, sp, #0
 80161c8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7ff ffd5 	bl	801617c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2200      	movs	r2, #0
 80161d6:	611a      	str	r2, [r3, #16]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2200      	movs	r2, #0
 80161dc:	829a      	strh	r2, [r3, #20]
    {
    }
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	4618      	mov	r0, r3
 80161e2:	3708      	adds	r7, #8
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b084      	sub	sp, #16
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
 80161f4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80161f6:	4a55      	ldr	r2, [pc, #340]	; (801634c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	601a      	str	r2, [r3, #0]
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	68ba      	ldr	r2, [r7, #8]
 8016200:	605a      	str	r2, [r3, #4]
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	687a      	ldr	r2, [r7, #4]
 8016206:	609a      	str	r2, [r3, #8]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	683a      	ldr	r2, [r7, #0]
 801620c:	60da      	str	r2, [r3, #12]
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2200      	movs	r2, #0
 8016212:	611a      	str	r2, [r3, #16]
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2200      	movs	r2, #0
 8016218:	615a      	str	r2, [r3, #20]
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2200      	movs	r2, #0
 801621e:	619a      	str	r2, [r3, #24]
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	331c      	adds	r3, #28
 8016224:	4618      	mov	r0, r3
 8016226:	f7ff ffcc 	bl	80161c2 <_ZN8touchgfx8GesturesC1Ev>
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2200      	movs	r2, #0
 801622e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	2200      	movs	r2, #0
 8016236:	639a      	str	r2, [r3, #56]	; 0x38
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	2200      	movs	r2, #0
 801623c:	63da      	str	r2, [r3, #60]	; 0x3c
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2200      	movs	r2, #0
 8016242:	641a      	str	r2, [r3, #64]	; 0x40
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	2200      	movs	r2, #0
 8016248:	645a      	str	r2, [r3, #68]	; 0x44
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2200      	movs	r2, #0
 801624e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2201      	movs	r2, #1
 8016256:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2200      	movs	r2, #0
 801625e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	2200      	movs	r2, #0
 8016266:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2200      	movs	r2, #0
 801626e:	64da      	str	r2, [r3, #76]	; 0x4c
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	3350      	adds	r3, #80	; 0x50
 8016274:	4618      	mov	r0, r3
 8016276:	f7fa fb34 	bl	80108e2 <_ZN8touchgfx4RectC1Ev>
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2200      	movs	r2, #0
 801627e:	659a      	str	r2, [r3, #88]	; 0x58
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2200      	movs	r2, #0
 8016284:	65da      	str	r2, [r3, #92]	; 0x5c
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2200      	movs	r2, #0
 801628a:	661a      	str	r2, [r3, #96]	; 0x60
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2201      	movs	r2, #1
 8016290:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	2200      	movs	r2, #0
 8016298:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2200      	movs	r2, #0
 80162a0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2201      	movs	r2, #1
 80162a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2200      	movs	r2, #0
 80162b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2200      	movs	r2, #0
 80162b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2200      	movs	r2, #0
 80162c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	2200      	movs	r2, #0
 80162d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	2200      	movs	r2, #0
 80162d8:	671a      	str	r2, [r3, #112]	; 0x70
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	2200      	movs	r2, #0
 80162e6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	2200      	movs	r2, #0
 80162ee:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2201      	movs	r2, #1
 80162f6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2201      	movs	r2, #1
 80162fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8016302:	4a13      	ldr	r2, [pc, #76]	; (8016350 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8016308:	4a12      	ldr	r2, [pc, #72]	; (8016354 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801630a:	8b3b      	ldrh	r3, [r7, #24]
 801630c:	8013      	strh	r3, [r2, #0]
 801630e:	4b11      	ldr	r3, [pc, #68]	; (8016354 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8016310:	881a      	ldrh	r2, [r3, #0]
 8016312:	4b11      	ldr	r3, [pc, #68]	; (8016358 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8016314:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8016316:	4a11      	ldr	r2, [pc, #68]	; (801635c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8016318:	8bbb      	ldrh	r3, [r7, #28]
 801631a:	8013      	strh	r3, [r2, #0]
 801631c:	4b0f      	ldr	r3, [pc, #60]	; (801635c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801631e:	881a      	ldrh	r2, [r3, #0]
 8016320:	4b0f      	ldr	r3, [pc, #60]	; (8016360 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8016322:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8016324:	4b0f      	ldr	r3, [pc, #60]	; (8016364 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8016326:	2200      	movs	r2, #0
 8016328:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801632a:	8b3a      	ldrh	r2, [r7, #24]
 801632c:	8bbb      	ldrh	r3, [r7, #28]
 801632e:	429a      	cmp	r2, r3
 8016330:	bf34      	ite	cc
 8016332:	2301      	movcc	r3, #1
 8016334:	2300      	movcs	r3, #0
 8016336:	b2db      	uxtb	r3, r3
 8016338:	461a      	mov	r2, r3
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	4618      	mov	r0, r3
 8016344:	3710      	adds	r7, #16
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}
 801634a:	bf00      	nop
 801634c:	08030e38 	.word	0x08030e38
 8016350:	200097a8 	.word	0x200097a8
 8016354:	2000979c 	.word	0x2000979c
 8016358:	200097a2 	.word	0x200097a2
 801635c:	2000979e 	.word	0x2000979e
 8016360:	200097a4 	.word	0x200097a4
 8016364:	200097a0 	.word	0x200097a0

08016368 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	4618      	mov	r0, r3
 8016376:	f7fa f813 	bl	80103a0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801637a:	bf00      	nop
 801637c:	3708      	adds	r7, #8
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}
	...

08016384 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016384:	b580      	push	{r7, lr}
 8016386:	b086      	sub	sp, #24
 8016388:	af02      	add	r7, sp, #8
 801638a:	60f8      	str	r0, [r7, #12]
 801638c:	60b9      	str	r1, [r7, #8]
 801638e:	607a      	str	r2, [r7, #4]
 8016390:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	9300      	str	r3, [sp, #0]
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	687a      	ldr	r2, [r7, #4]
 801639c:	68b9      	ldr	r1, [r7, #8]
 801639e:	f7ff fe8d 	bl	80160bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80163a2:	4a04      	ldr	r2, [pc, #16]	; (80163b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	601a      	str	r2, [r3, #0]
    {

    }
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	4618      	mov	r0, r3
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	080305bc 	.word	0x080305bc

080163b8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80163b8:	b580      	push	{r7, lr}
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	4801      	ldr	r0, [pc, #4]	; (80163c4 <__tcf_0+0xc>)
 80163be:	f000 f95f 	bl	8016680 <_ZN12FrontendHeapD1Ev>
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	20007b48 	.word	0x20007b48

080163c8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80163c8:	b580      	push	{r7, lr}
 80163ca:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80163cc:	4b12      	ldr	r3, [pc, #72]	; (8016418 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	f3bf 8f5b 	dmb	ish
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	f003 0301 	and.w	r3, r3, #1
 80163da:	2b00      	cmp	r3, #0
 80163dc:	bf0c      	ite	eq
 80163de:	2301      	moveq	r3, #1
 80163e0:	2300      	movne	r3, #0
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d013      	beq.n	8016410 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80163e8:	480b      	ldr	r0, [pc, #44]	; (8016418 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80163ea:	f016 ff7c 	bl	802d2e6 <__cxa_guard_acquire>
 80163ee:	4603      	mov	r3, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	bf14      	ite	ne
 80163f4:	2301      	movne	r3, #1
 80163f6:	2300      	moveq	r3, #0
 80163f8:	b2db      	uxtb	r3, r3
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d008      	beq.n	8016410 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80163fe:	4807      	ldr	r0, [pc, #28]	; (801641c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8016400:	f000 f868 	bl	80164d4 <_ZN12FrontendHeapC1Ev>
 8016404:	4804      	ldr	r0, [pc, #16]	; (8016418 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016406:	f016 ff7a 	bl	802d2fe <__cxa_guard_release>
 801640a:	4805      	ldr	r0, [pc, #20]	; (8016420 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 801640c:	f017 fda6 	bl	802df5c <atexit>
        return instance;
 8016410:	4b02      	ldr	r3, [pc, #8]	; (801641c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8016412:	4618      	mov	r0, r3
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	20008a78 	.word	0x20008a78
 801641c:	20007b48 	.word	0x20007b48
 8016420:	080163b9 	.word	0x080163b9

08016424 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016424:	b580      	push	{r7, lr}
 8016426:	b082      	sub	sp, #8
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	4a05      	ldr	r2, [pc, #20]	; (8016444 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	601a      	str	r2, [r3, #0]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	4618      	mov	r0, r3
 8016436:	f7ff fe61 	bl	80160fc <_ZN8touchgfx7MVPHeapD1Ev>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	4618      	mov	r0, r3
 801643e:	3708      	adds	r7, #8
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	080305bc 	.word	0x080305bc

08016448 <_ZN16FrontendHeapBaseD0Ev>:
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6878      	ldr	r0, [r7, #4]
 8016452:	f7ff ffe7 	bl	8016424 <_ZN16FrontendHeapBaseD1Ev>
 8016456:	2114      	movs	r1, #20
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f016 ff42 	bl	802d2e2 <_ZdlPvj>
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	4618      	mov	r0, r3
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016468:	b580      	push	{r7, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	4618      	mov	r0, r3
 8016474:	f000 fd04 	bl	8016e80 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016478:	4a03      	ldr	r2, [pc, #12]	; (8016488 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	601a      	str	r2, [r3, #0]
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	4618      	mov	r0, r3
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}
 8016488:	08030588 	.word	0x08030588

0801648c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	4618      	mov	r0, r3
 8016498:	f000 fcf2 	bl	8016e80 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801649c:	4a03      	ldr	r2, [pc, #12]	; (80164ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	601a      	str	r2, [r3, #0]
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	4618      	mov	r0, r3
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	08030554 	.word	0x08030554

080164b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	4618      	mov	r0, r3
 80164bc:	f000 fce0 	bl	8016e80 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80164c0:	4a03      	ldr	r2, [pc, #12]	; (80164d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	601a      	str	r2, [r3, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	4618      	mov	r0, r3
 80164ca:	3708      	adds	r7, #8
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}
 80164d0:	08030520 	.word	0x08030520

080164d4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80164d4:	b590      	push	{r4, r7, lr}
 80164d6:	b085      	sub	sp, #20
 80164d8:	af02      	add	r7, sp, #8
 80164da:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f103 0114 	add.w	r1, r3, #20
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	f503 645c 	add.w	r4, r3, #3520	; 0xdc0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
                     app(model, *this)
 80164f6:	9300      	str	r3, [sp, #0]
 80164f8:	4623      	mov	r3, r4
 80164fa:	f7ff ff43 	bl	8016384 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80164fe:	4a18      	ldr	r2, [pc, #96]	; (8016560 <_ZN12FrontendHeapC1Ev+0x8c>)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	601a      	str	r2, [r3, #0]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	3314      	adds	r3, #20
 8016508:	4618      	mov	r0, r3
 801650a:	f7ff ffad 	bl	8016468 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	332c      	adds	r3, #44	; 0x2c
 8016512:	4618      	mov	r0, r3
 8016514:	f7ff ffba 	bl	801648c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 801651e:	4618      	mov	r0, r3
 8016520:	f7ff ffc6 	bl	80164b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f603 50d4 	addw	r0, r3, #3540	; 0xdd4
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f603 732c 	addw	r3, r3, #3884	; 0xf2c
 8016530:	687a      	ldr	r2, [r7, #4]
 8016532:	4619      	mov	r1, r3
 8016534:	f7fe f8ac 	bl	8014690 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f603 732c 	addw	r3, r3, #3884	; 0xf2c
 801653e:	4618      	mov	r0, r3
 8016540:	f7fe f8bc 	bl	80146bc <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 801654c:	4619      	mov	r1, r3
 801654e:	4610      	mov	r0, r2
 8016550:	f7ff ff0a 	bl	8016368 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	4618      	mov	r0, r3
 8016558:	370c      	adds	r7, #12
 801655a:	46bd      	mov	sp, r7
 801655c:	bd90      	pop	{r4, r7, pc}
 801655e:	bf00      	nop
 8016560:	0803050c 	.word	0x0803050c

08016564 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8016564:	b580      	push	{r7, lr}
 8016566:	b086      	sub	sp, #24
 8016568:	af02      	add	r7, sp, #8
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	607a      	str	r2, [r7, #4]
 8016570:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8016572:	68f8      	ldr	r0, [r7, #12]
 8016574:	8bbb      	ldrh	r3, [r7, #28]
 8016576:	9301      	str	r3, [sp, #4]
 8016578:	8b3b      	ldrh	r3, [r7, #24]
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	68b9      	ldr	r1, [r7, #8]
 8016582:	f7ff fe31 	bl	80161e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8016586:	4a04      	ldr	r2, [pc, #16]	; (8016598 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	601a      	str	r2, [r3, #0]
    }
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	4618      	mov	r0, r3
 8016590:	3710      	adds	r7, #16
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	080305e0 	.word	0x080305e0

0801659c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801659c:	b580      	push	{r7, lr}
 801659e:	b086      	sub	sp, #24
 80165a0:	af02      	add	r7, sp, #8
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
 80165a8:	603b      	str	r3, [r7, #0]
 80165aa:	68f8      	ldr	r0, [r7, #12]
 80165ac:	8bbb      	ldrh	r3, [r7, #28]
 80165ae:	9301      	str	r3, [sp, #4]
 80165b0:	8b3b      	ldrh	r3, [r7, #24]
 80165b2:	9300      	str	r3, [sp, #0]
 80165b4:	683b      	ldr	r3, [r7, #0]
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	68b9      	ldr	r1, [r7, #8]
 80165ba:	f7ff ffd3 	bl	8016564 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80165be:	4a04      	ldr	r2, [pc, #16]	; (80165d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	601a      	str	r2, [r3, #0]
    }
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	4618      	mov	r0, r3
 80165c8:	3710      	adds	r7, #16
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	080303c8 	.word	0x080303c8

080165d4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80165d4:	b480      	push	{r7}
 80165d6:	b083      	sub	sp, #12
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	4a04      	ldr	r2, [pc, #16]	; (80165f0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	601a      	str	r2, [r3, #0]
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	4618      	mov	r0, r3
 80165e6:	370c      	adds	r7, #12
 80165e8:	46bd      	mov	sp, r7
 80165ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ee:	4770      	bx	lr
 80165f0:	080303b0 	.word	0x080303b0

080165f4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	4618      	mov	r0, r3
 8016600:	f7ff ffe8 	bl	80165d4 <_ZN8touchgfx15TouchControllerC1Ev>
 8016604:	4a03      	ldr	r2, [pc, #12]	; (8016614 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	601a      	str	r2, [r3, #0]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	4618      	mov	r0, r3
 801660e:	3708      	adds	r7, #8
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}
 8016614:	08030398 	.word	0x08030398

08016618 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 1024, 600);

void touchgfx_init()
{
 8016618:	b590      	push	{r4, r7, lr}
 801661a:	b085      	sub	sp, #20
 801661c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801661e:	f7fd fe0b 	bl	8014238 <_ZN14BitmapDatabase11getInstanceEv>
 8016622:	4604      	mov	r4, r0
 8016624:	f7fd fe12 	bl	801424c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016628:	4603      	mov	r3, r0
 801662a:	4619      	mov	r1, r3
 801662c:	2300      	movs	r3, #0
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	2300      	movs	r3, #0
 8016632:	2200      	movs	r2, #0
 8016634:	4620      	mov	r0, r4
 8016636:	f009 f947 	bl	801f8c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801663a:	4809      	ldr	r0, [pc, #36]	; (8016660 <touchgfx_init+0x48>)
 801663c:	f7ff fd2e 	bl	801609c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8016640:	2000      	movs	r0, #0
 8016642:	f7fd ff47 	bl	80144d4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8016646:	4807      	ldr	r0, [pc, #28]	; (8016664 <touchgfx_init+0x4c>)
 8016648:	f009 f880 	bl	801f74c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801664c:	f7ff febc 	bl	80163c8 <_ZN12FrontendHeap11getInstanceEv>
 8016650:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8016652:	4805      	ldr	r0, [pc, #20]	; (8016668 <touchgfx_init+0x50>)
 8016654:	f7fe ffd0 	bl	80155f8 <_ZN11TouchGFXHAL10initializeEv>
}
 8016658:	bf00      	nop
 801665a:	370c      	adds	r7, #12
 801665c:	46bd      	mov	sp, r7
 801665e:	bd90      	pop	{r4, r7, pc}
 8016660:	20009718 	.word	0x20009718
 8016664:	2000001c 	.word	0x2000001c
 8016668:	2000971c 	.word	0x2000971c

0801666c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 801666c:	b580      	push	{r7, lr}
 801666e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8016670:	4802      	ldr	r0, [pc, #8]	; (801667c <touchgfx_taskEntry+0x10>)
 8016672:	f001 f8e0 	bl	8017836 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8016676:	bf00      	nop
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	2000971c 	.word	0x2000971c

08016680 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	4a10      	ldr	r2, [pc, #64]	; (80166cc <_ZN12FrontendHeapD1Ev+0x4c>)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	601a      	str	r2, [r3, #0]
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 8016694:	4618      	mov	r0, r3
 8016696:	f7fd ffc5 	bl	8014624 <_ZN19FrontendApplicationD1Ev>
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 80166a0:	4618      	mov	r0, r3
 80166a2:	f000 f827 	bl	80166f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	332c      	adds	r3, #44	; 0x2c
 80166aa:	4618      	mov	r0, r3
 80166ac:	f000 f844 	bl	8016738 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	3314      	adds	r3, #20
 80166b4:	4618      	mov	r0, r3
 80166b6:	f000 f863 	bl	8016780 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	4618      	mov	r0, r3
 80166be:	f7ff feb1 	bl	8016424 <_ZN16FrontendHeapBaseD1Ev>
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	4618      	mov	r0, r3
 80166c6:	3708      	adds	r7, #8
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	0803050c 	.word	0x0803050c

080166d0 <_ZN12FrontendHeapD0Ev>:
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f7ff ffd1 	bl	8016680 <_ZN12FrontendHeapD1Ev>
 80166de:	f44f 6173 	mov.w	r1, #3888	; 0xf30
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f016 fdfd 	bl	802d2e2 <_ZdlPvj>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	4618      	mov	r0, r3
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
	...

080166f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b082      	sub	sp, #8
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
 80166fc:	4a05      	ldr	r2, [pc, #20]	; (8016714 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	601a      	str	r2, [r3, #0]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4618      	mov	r0, r3
 8016706:	f000 fbb9 	bl	8016e7c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	4618      	mov	r0, r3
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	08030520 	.word	0x08030520

08016718 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f7ff ffe7 	bl	80166f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016726:	2114      	movs	r1, #20
 8016728:	6878      	ldr	r0, [r7, #4]
 801672a:	f016 fdda 	bl	802d2e2 <_ZdlPvj>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	4618      	mov	r0, r3
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	4a05      	ldr	r2, [pc, #20]	; (8016758 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	601a      	str	r2, [r3, #0]
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	4618      	mov	r0, r3
 801674a:	f000 fb97 	bl	8016e7c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	4618      	mov	r0, r3
 8016752:	3708      	adds	r7, #8
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	08030554 	.word	0x08030554

0801675c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f7ff ffe7 	bl	8016738 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801676a:	f640 5194 	movw	r1, #3476	; 0xd94
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f016 fdb7 	bl	802d2e2 <_ZdlPvj>
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	4618      	mov	r0, r3
 8016778:	3708      	adds	r7, #8
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
	...

08016780 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	4a05      	ldr	r2, [pc, #20]	; (80167a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	4618      	mov	r0, r3
 8016792:	f000 fb73 	bl	8016e7c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	4618      	mov	r0, r3
 801679a:	3708      	adds	r7, #8
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	08030588 	.word	0x08030588

080167a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6878      	ldr	r0, [r7, #4]
 80167ae:	f7ff ffe7 	bl	8016780 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80167b2:	2118      	movs	r1, #24
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f016 fd94 	bl	802d2e2 <_ZdlPvj>
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	4618      	mov	r0, r3
 80167be:	3708      	adds	r7, #8
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}

080167c4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	4a05      	ldr	r2, [pc, #20]	; (80167e4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	601a      	str	r2, [r3, #0]
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ff fcb1 	bl	801613c <_ZN8touchgfx3LCDD1Ev>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4618      	mov	r0, r3
 80167de:	3708      	adds	r7, #8
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	08032f44 	.word	0x08032f44

080167e8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7ff ffe7 	bl	80167c4 <_ZN8touchgfx8LCD16bppD1Ev>
 80167f6:	2178      	movs	r1, #120	; 0x78
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f016 fd72 	bl	802d2e2 <_ZdlPvj>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	4618      	mov	r0, r3
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <_Z41__static_initialization_and_destruction_0ii>:
 8016808:	b580      	push	{r7, lr}
 801680a:	b084      	sub	sp, #16
 801680c:	af02      	add	r7, sp, #8
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2b01      	cmp	r3, #1
 8016816:	d119      	bne.n	801684c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801681e:	4293      	cmp	r3, r2
 8016820:	d114      	bne.n	801684c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8016822:	4818      	ldr	r0, [pc, #96]	; (8016884 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016824:	f7ff fee6 	bl	80165f4 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8016828:	4817      	ldr	r0, [pc, #92]	; (8016888 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801682a:	f7ff f919 	bl	8015a60 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801682e:	4817      	ldr	r0, [pc, #92]	; (801688c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016830:	f00c f910 	bl	8022a54 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 1024, 600);
 8016834:	f44f 7316 	mov.w	r3, #600	; 0x258
 8016838:	9301      	str	r3, [sp, #4]
 801683a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801683e:	9300      	str	r3, [sp, #0]
 8016840:	4b10      	ldr	r3, [pc, #64]	; (8016884 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016842:	4a12      	ldr	r2, [pc, #72]	; (801688c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016844:	4910      	ldr	r1, [pc, #64]	; (8016888 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016846:	4812      	ldr	r0, [pc, #72]	; (8016890 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016848:	f7ff fea8 	bl	801659c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d113      	bne.n	801687a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016858:	4293      	cmp	r3, r2
 801685a:	d10e      	bne.n	801687a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801685c:	480c      	ldr	r0, [pc, #48]	; (8016890 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801685e:	f7fe ff43 	bl	80156e8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8016862:	480c      	ldr	r0, [pc, #48]	; (8016894 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016864:	f7f9 f88e 	bl	800f984 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8016868:	4808      	ldr	r0, [pc, #32]	; (801688c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801686a:	f7ff ffab 	bl	80167c4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801686e:	4806      	ldr	r0, [pc, #24]	; (8016888 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016870:	f7ff f920 	bl	8015ab4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8016874:	4803      	ldr	r0, [pc, #12]	; (8016884 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016876:	f7fe fce3 	bl	8015240 <_ZN20STM32TouchControllerD1Ev>
}
 801687a:	bf00      	nop
 801687c:	3708      	adds	r7, #8
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	20008a7c 	.word	0x20008a7c
 8016888:	20008a80 	.word	0x20008a80
 801688c:	200096a0 	.word	0x200096a0
 8016890:	2000971c 	.word	0x2000971c
 8016894:	2000001c 	.word	0x2000001c

08016898 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80168a0:	2301      	movs	r3, #1
    }
 80168a2:	4618      	mov	r0, r3
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80168ae:	b480      	push	{r7}
 80168b0:	b083      	sub	sp, #12
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80168b6:	230c      	movs	r3, #12
    }
 80168b8:	4618      	mov	r0, r3
 80168ba:	370c      	adds	r7, #12
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr

080168c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	460b      	mov	r3, r1
 80168ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80168d0:	887a      	ldrh	r2, [r7, #2]
 80168d2:	4613      	mov	r3, r2
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	4413      	add	r3, r2
 80168d8:	009b      	lsls	r3, r3, #2
 80168da:	3308      	adds	r3, #8
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	4413      	add	r3, r2
    }
 80168e0:	4618      	mov	r0, r3
 80168e2:	370c      	adds	r7, #12
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr

080168ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80168ec:	b480      	push	{r7}
 80168ee:	b083      	sub	sp, #12
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	460b      	mov	r3, r1
 80168f6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80168f8:	887a      	ldrh	r2, [r7, #2]
 80168fa:	4613      	mov	r3, r2
 80168fc:	005b      	lsls	r3, r3, #1
 80168fe:	4413      	add	r3, r2
 8016900:	009b      	lsls	r3, r3, #2
 8016902:	3308      	adds	r3, #8
 8016904:	687a      	ldr	r2, [r7, #4]
 8016906:	4413      	add	r3, r2
    }
 8016908:	4618      	mov	r0, r3
 801690a:	370c      	adds	r7, #12
 801690c:	46bd      	mov	sp, r7
 801690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016912:	4770      	bx	lr

08016914 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016914:	b480      	push	{r7}
 8016916:	b083      	sub	sp, #12
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801691c:	2301      	movs	r3, #1
    }
 801691e:	4618      	mov	r0, r3
 8016920:	370c      	adds	r7, #12
 8016922:	46bd      	mov	sp, r7
 8016924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016928:	4770      	bx	lr

0801692a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801692a:	b480      	push	{r7}
 801692c:	b083      	sub	sp, #12
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016932:	f640 538c 	movw	r3, #3468	; 0xd8c
    }
 8016936:	4618      	mov	r0, r3
 8016938:	370c      	adds	r7, #12
 801693a:	46bd      	mov	sp, r7
 801693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016940:	4770      	bx	lr

08016942 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016942:	b480      	push	{r7}
 8016944:	b083      	sub	sp, #12
 8016946:	af00      	add	r7, sp, #0
 8016948:	6078      	str	r0, [r7, #4]
 801694a:	460b      	mov	r3, r1
 801694c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801694e:	887b      	ldrh	r3, [r7, #2]
 8016950:	f640 528c 	movw	r2, #3468	; 0xd8c
 8016954:	fb02 f303 	mul.w	r3, r2, r3
 8016958:	3308      	adds	r3, #8
 801695a:	687a      	ldr	r2, [r7, #4]
 801695c:	4413      	add	r3, r2
    }
 801695e:	4618      	mov	r0, r3
 8016960:	370c      	adds	r7, #12
 8016962:	46bd      	mov	sp, r7
 8016964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016968:	4770      	bx	lr

0801696a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801696a:	b480      	push	{r7}
 801696c:	b083      	sub	sp, #12
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
 8016972:	460b      	mov	r3, r1
 8016974:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016976:	887b      	ldrh	r3, [r7, #2]
 8016978:	f640 528c 	movw	r2, #3468	; 0xd8c
 801697c:	fb02 f303 	mul.w	r3, r2, r3
 8016980:	3308      	adds	r3, #8
 8016982:	687a      	ldr	r2, [r7, #4]
 8016984:	4413      	add	r3, r2
    }
 8016986:	4618      	mov	r0, r3
 8016988:	370c      	adds	r7, #12
 801698a:	46bd      	mov	sp, r7
 801698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016990:	4770      	bx	lr

08016992 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016992:	b480      	push	{r7}
 8016994:	b083      	sub	sp, #12
 8016996:	af00      	add	r7, sp, #0
 8016998:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801699a:	2301      	movs	r3, #1
    }
 801699c:	4618      	mov	r0, r3
 801699e:	370c      	adds	r7, #12
 80169a0:	46bd      	mov	sp, r7
 80169a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a6:	4770      	bx	lr

080169a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80169a8:	b480      	push	{r7}
 80169aa:	b083      	sub	sp, #12
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80169b0:	2310      	movs	r3, #16
    }
 80169b2:	4618      	mov	r0, r3
 80169b4:	370c      	adds	r7, #12
 80169b6:	46bd      	mov	sp, r7
 80169b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169bc:	4770      	bx	lr

080169be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80169be:	b480      	push	{r7}
 80169c0:	b083      	sub	sp, #12
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	6078      	str	r0, [r7, #4]
 80169c6:	460b      	mov	r3, r1
 80169c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80169ca:	887b      	ldrh	r3, [r7, #2]
 80169cc:	011b      	lsls	r3, r3, #4
 80169ce:	3308      	adds	r3, #8
 80169d0:	687a      	ldr	r2, [r7, #4]
 80169d2:	4413      	add	r3, r2
    }
 80169d4:	4618      	mov	r0, r3
 80169d6:	370c      	adds	r7, #12
 80169d8:	46bd      	mov	sp, r7
 80169da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169de:	4770      	bx	lr

080169e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80169e0:	b480      	push	{r7}
 80169e2:	b083      	sub	sp, #12
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
 80169e8:	460b      	mov	r3, r1
 80169ea:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80169ec:	887b      	ldrh	r3, [r7, #2]
 80169ee:	011b      	lsls	r3, r3, #4
 80169f0:	3308      	adds	r3, #8
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	4413      	add	r3, r2
    }
 80169f6:	4618      	mov	r0, r3
 80169f8:	370c      	adds	r7, #12
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr

08016a02 <_GLOBAL__sub_I_touchgfx_init>:
 8016a02:	b580      	push	{r7, lr}
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016a0a:	2001      	movs	r0, #1
 8016a0c:	f7ff fefc 	bl	8016808 <_Z41__static_initialization_and_destruction_0ii>
 8016a10:	bd80      	pop	{r7, pc}

08016a12 <_GLOBAL__sub_D_touchgfx_init>:
 8016a12:	b580      	push	{r7, lr}
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016a1a:	2000      	movs	r0, #0
 8016a1c:	f7ff fef4 	bl	8016808 <_Z41__static_initialization_and_destruction_0ii>
 8016a20:	bd80      	pop	{r7, pc}

08016a22 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8016a22:	b580      	push	{r7, lr}
 8016a24:	b082      	sub	sp, #8
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	3320      	adds	r3, #32
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	6878      	ldr	r0, [r7, #4]
 8016a34:	4798      	blx	r3
    }
 8016a36:	bf00      	nop
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8016a3e:	b480      	push	{r7}
 8016a40:	b083      	sub	sp, #12
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	b2da      	uxtb	r2, r3
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8016a56:	bf00      	nop
 8016a58:	370c      	adds	r7, #12
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr
	...

08016a64 <__NVIC_EnableIRQ>:
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	db0b      	blt.n	8016a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a76:	79fb      	ldrb	r3, [r7, #7]
 8016a78:	f003 021f 	and.w	r2, r3, #31
 8016a7c:	4907      	ldr	r1, [pc, #28]	; (8016a9c <__NVIC_EnableIRQ+0x38>)
 8016a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a82:	095b      	lsrs	r3, r3, #5
 8016a84:	2001      	movs	r0, #1
 8016a86:	fa00 f202 	lsl.w	r2, r0, r2
 8016a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016a8e:	bf00      	nop
 8016a90:	370c      	adds	r7, #12
 8016a92:	46bd      	mov	sp, r7
 8016a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop
 8016a9c:	e000e100 	.word	0xe000e100

08016aa0 <__NVIC_DisableIRQ>:
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	b083      	sub	sp, #12
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	db12      	blt.n	8016ad8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016ab2:	79fb      	ldrb	r3, [r7, #7]
 8016ab4:	f003 021f 	and.w	r2, r3, #31
 8016ab8:	490a      	ldr	r1, [pc, #40]	; (8016ae4 <__NVIC_DisableIRQ+0x44>)
 8016aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016abe:	095b      	lsrs	r3, r3, #5
 8016ac0:	2001      	movs	r0, #1
 8016ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8016ac6:	3320      	adds	r3, #32
 8016ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016acc:	f3bf 8f4f 	dsb	sy
}
 8016ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016ad2:	f3bf 8f6f 	isb	sy
}
 8016ad6:	bf00      	nop
}
 8016ad8:	bf00      	nop
 8016ada:	370c      	adds	r7, #12
 8016adc:	46bd      	mov	sp, r7
 8016ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae2:	4770      	bx	lr
 8016ae4:	e000e100 	.word	0xe000e100

08016ae8 <__NVIC_SetPriority>:
{
 8016ae8:	b480      	push	{r7}
 8016aea:	b083      	sub	sp, #12
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	4603      	mov	r3, r0
 8016af0:	6039      	str	r1, [r7, #0]
 8016af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	db0a      	blt.n	8016b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	b2da      	uxtb	r2, r3
 8016b00:	490c      	ldr	r1, [pc, #48]	; (8016b34 <__NVIC_SetPriority+0x4c>)
 8016b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b06:	0112      	lsls	r2, r2, #4
 8016b08:	b2d2      	uxtb	r2, r2
 8016b0a:	440b      	add	r3, r1
 8016b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016b10:	e00a      	b.n	8016b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	b2da      	uxtb	r2, r3
 8016b16:	4908      	ldr	r1, [pc, #32]	; (8016b38 <__NVIC_SetPriority+0x50>)
 8016b18:	79fb      	ldrb	r3, [r7, #7]
 8016b1a:	f003 030f 	and.w	r3, r3, #15
 8016b1e:	3b04      	subs	r3, #4
 8016b20:	0112      	lsls	r2, r2, #4
 8016b22:	b2d2      	uxtb	r2, r2
 8016b24:	440b      	add	r3, r1
 8016b26:	761a      	strb	r2, [r3, #24]
}
 8016b28:	bf00      	nop
 8016b2a:	370c      	adds	r7, #12
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b32:	4770      	bx	lr
 8016b34:	e000e100 	.word	0xe000e100
 8016b38:	e000ed00 	.word	0xe000ed00

08016b3c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016b3c:	b5b0      	push	{r4, r5, r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	4618      	mov	r0, r3
 8016b48:	f000 fe63 	bl	8017812 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8016b4c:	687d      	ldr	r5, [r7, #4]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	3360      	adds	r3, #96	; 0x60
 8016b54:	681c      	ldr	r4, [r3, #0]
 8016b56:	f005 fac5 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	4619      	mov	r1, r3
 8016b5e:	4628      	mov	r0, r5
 8016b60:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD012C000, (void*)0);
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	3384      	adds	r3, #132	; 0x84
 8016b6a:	681c      	ldr	r4, [r3, #0]
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	4a04      	ldr	r2, [pc, #16]	; (8016b80 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8016b70:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8016b74:	47a0      	blx	r4
}
 8016b76:	bf00      	nop
 8016b78:	3708      	adds	r7, #8
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8016b7e:	bf00      	nop
 8016b80:	d012c000 	.word	0xd012c000

08016b84 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b082      	sub	sp, #8
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016b8c:	2109      	movs	r1, #9
 8016b8e:	205a      	movs	r0, #90	; 0x5a
 8016b90:	f7ff ffaa 	bl	8016ae8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016b94:	2109      	movs	r1, #9
 8016b96:	2058      	movs	r0, #88	; 0x58
 8016b98:	f7ff ffa6 	bl	8016ae8 <__NVIC_SetPriority>
}
 8016b9c:	bf00      	nop
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016bac:	205a      	movs	r0, #90	; 0x5a
 8016bae:	f7ff ff59 	bl	8016a64 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016bb2:	2058      	movs	r0, #88	; 0x58
 8016bb4:	f7ff ff56 	bl	8016a64 <__NVIC_EnableIRQ>
}
 8016bb8:	bf00      	nop
 8016bba:	3708      	adds	r7, #8
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}

08016bc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016bc8:	205a      	movs	r0, #90	; 0x5a
 8016bca:	f7ff ff69 	bl	8016aa0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016bce:	2058      	movs	r0, #88	; 0x58
 8016bd0:	f7ff ff66 	bl	8016aa0 <__NVIC_DisableIRQ>
}
 8016bd4:	bf00      	nop
 8016bd6:	3708      	adds	r7, #8
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b083      	sub	sp, #12
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016be4:	4b11      	ldr	r3, [pc, #68]	; (8016c2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016be6:	68db      	ldr	r3, [r3, #12]
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	3b01      	subs	r3, #1
 8016bf2:	b29a      	uxth	r2, r3
 8016bf4:	4b0e      	ldr	r3, [pc, #56]	; (8016c30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016bf6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016bf8:	4b0c      	ldr	r3, [pc, #48]	; (8016c2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016bfa:	691b      	ldr	r3, [r3, #16]
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	3b01      	subs	r3, #1
 8016c06:	b29a      	uxth	r2, r3
 8016c08:	4b0a      	ldr	r3, [pc, #40]	; (8016c34 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016c0a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016c0c:	4b08      	ldr	r3, [pc, #32]	; (8016c30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016c0e:	881a      	ldrh	r2, [r3, #0]
 8016c10:	4b06      	ldr	r3, [pc, #24]	; (8016c2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016c14:	4b05      	ldr	r3, [pc, #20]	; (8016c2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c18:	4a04      	ldr	r2, [pc, #16]	; (8016c2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016c1a:	f043 0301 	orr.w	r3, r3, #1
 8016c1e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016c20:	bf00      	nop
 8016c22:	370c      	adds	r7, #12
 8016c24:	46bd      	mov	sp, r7
 8016c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2a:	4770      	bx	lr
 8016c2c:	40016800 	.word	0x40016800
 8016c30:	20009798 	.word	0x20009798
 8016c34:	2000979a 	.word	0x2000979a

08016c38 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f000 fdcc 	bl	80177e0 <_ZN8touchgfx3HAL10beginFrameEv>
 8016c48:	4603      	mov	r3, r0
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8016c52:	b580      	push	{r7, lr}
 8016c54:	b082      	sub	sp, #8
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 fdcb 	bl	80177f8 <_ZN8touchgfx3HAL8endFrameEv>

}
 8016c62:	bf00      	nop
 8016c64:	3708      	adds	r7, #8
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
	...

08016c6c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016c74:	4b03      	ldr	r3, [pc, #12]	; (8016c84 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	370c      	adds	r7, #12
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr
 8016c84:	40016884 	.word	0x40016884

08016c88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b083      	sub	sp, #12
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016c92:	4a06      	ldr	r2, [pc, #24]	; (8016cac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016c98:	4b05      	ldr	r3, [pc, #20]	; (8016cb0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016c9e:	bf00      	nop
 8016ca0:	370c      	adds	r7, #12
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
 8016caa:	bf00      	nop
 8016cac:	40016884 	.word	0x40016884
 8016cb0:	40016800 	.word	0x40016800

08016cb4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
 8016cbc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6839      	ldr	r1, [r7, #0]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fd56 	bl	8017774 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016cc8:	bf00      	nop
 8016cca:	3708      	adds	r7, #8
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b084      	sub	sp, #16
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	60f8      	str	r0, [r7, #12]
 8016cd8:	60b9      	str	r1, [r7, #8]
 8016cda:	607a      	str	r2, [r7, #4]
 8016cdc:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8016cde:	68f8      	ldr	r0, [r7, #12]
 8016ce0:	683b      	ldr	r3, [r7, #0]
 8016ce2:	687a      	ldr	r2, [r7, #4]
 8016ce4:	68b9      	ldr	r1, [r7, #8]
 8016ce6:	f000 feb0 	bl	8017a4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8016cea:	4603      	mov	r3, r0
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016cfc:	4b1a      	ldr	r3, [pc, #104]	; (8016d68 <HAL_LTDC_LineEventCallback+0x74>)
 8016cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d00:	4a1a      	ldr	r2, [pc, #104]	; (8016d6c <HAL_LTDC_LineEventCallback+0x78>)
 8016d02:	8812      	ldrh	r2, [r2, #0]
 8016d04:	4293      	cmp	r3, r2
 8016d06:	bf0c      	ite	eq
 8016d08:	2301      	moveq	r3, #1
 8016d0a:	2300      	movne	r3, #0
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d017      	beq.n	8016d42 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016d12:	4b17      	ldr	r3, [pc, #92]	; (8016d70 <HAL_LTDC_LineEventCallback+0x7c>)
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	4619      	mov	r1, r3
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f7f0 fb51 	bl	80073c0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8016d1e:	f7f9 f955 	bl	800ffcc <_ZN8touchgfx3HAL11getInstanceEv>
 8016d22:	4603      	mov	r3, r0
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7ff fe8a 	bl	8016a3e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016d2a:	f7fe fd65 	bl	80157f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8016d2e:	f7f9 f94d 	bl	800ffcc <_ZN8touchgfx3HAL11getInstanceEv>
 8016d32:	4603      	mov	r3, r0
 8016d34:	4618      	mov	r0, r3
 8016d36:	f001 fb7b 	bl	8018430 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	f7fe faa2 	bl	8015284 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8016d40:	e00e      	b.n	8016d60 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016d42:	4b0a      	ldr	r3, [pc, #40]	; (8016d6c <HAL_LTDC_LineEventCallback+0x78>)
 8016d44:	881b      	ldrh	r3, [r3, #0]
 8016d46:	4619      	mov	r1, r3
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7f0 fb39 	bl	80073c0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8016d4e:	2000      	movs	r0, #0
 8016d50:	f7fe faa3 	bl	801529a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016d54:	f7f9 f93a 	bl	800ffcc <_ZN8touchgfx3HAL11getInstanceEv>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7ff fe61 	bl	8016a22 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8016d60:	bf00      	nop
 8016d62:	3708      	adds	r7, #8
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	40016800 	.word	0x40016800
 8016d6c:	20009798 	.word	0x20009798
 8016d70:	2000979a 	.word	0x2000979a

08016d74 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016d74:	8880      	ldrh	r0, [r0, #4]
 8016d76:	4770      	bx	lr

08016d78 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016d78:	2300      	movs	r3, #0
 8016d7a:	8083      	strh	r3, [r0, #4]
 8016d7c:	4770      	bx	lr
	...

08016d80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d82:	6803      	ldr	r3, [r0, #0]
 8016d84:	4605      	mov	r5, r0
 8016d86:	460e      	mov	r6, r1
 8016d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d8a:	2100      	movs	r1, #0
 8016d8c:	4798      	blx	r3
 8016d8e:	682b      	ldr	r3, [r5, #0]
 8016d90:	4604      	mov	r4, r0
 8016d92:	6a1b      	ldr	r3, [r3, #32]
 8016d94:	4628      	mov	r0, r5
 8016d96:	4798      	blx	r3
 8016d98:	88ab      	ldrh	r3, [r5, #4]
 8016d9a:	1b34      	subs	r4, r6, r4
 8016d9c:	b2a4      	uxth	r4, r4
 8016d9e:	fbb4 f4f0 	udiv	r4, r4, r0
 8016da2:	42a3      	cmp	r3, r4
 8016da4:	d805      	bhi.n	8016db2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016da6:	4b0e      	ldr	r3, [pc, #56]	; (8016de0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016da8:	4a0e      	ldr	r2, [pc, #56]	; (8016de4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016daa:	211e      	movs	r1, #30
 8016dac:	480e      	ldr	r0, [pc, #56]	; (8016de8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016dae:	f017 f8b7 	bl	802df20 <__assert_func>
 8016db2:	682b      	ldr	r3, [r5, #0]
 8016db4:	2100      	movs	r1, #0
 8016db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016db8:	4628      	mov	r0, r5
 8016dba:	4798      	blx	r3
 8016dbc:	682b      	ldr	r3, [r5, #0]
 8016dbe:	4607      	mov	r7, r0
 8016dc0:	6a1b      	ldr	r3, [r3, #32]
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	4798      	blx	r3
 8016dc6:	1bf3      	subs	r3, r6, r7
 8016dc8:	b29b      	uxth	r3, r3
 8016dca:	fbb3 f2f0 	udiv	r2, r3, r0
 8016dce:	fb02 3010 	mls	r0, r2, r0, r3
 8016dd2:	b118      	cbz	r0, 8016ddc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016dd4:	4b05      	ldr	r3, [pc, #20]	; (8016dec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016dd6:	4a03      	ldr	r2, [pc, #12]	; (8016de4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016dd8:	211f      	movs	r1, #31
 8016dda:	e7e7      	b.n	8016dac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016ddc:	4620      	mov	r0, r4
 8016dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016de0:	080306a8 	.word	0x080306a8
 8016de4:	08030816 	.word	0x08030816
 8016de8:	080306bd 	.word	0x080306bd
 8016dec:	080306eb 	.word	0x080306eb

08016df0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016df0:	b538      	push	{r3, r4, r5, lr}
 8016df2:	6803      	ldr	r3, [r0, #0]
 8016df4:	6a1b      	ldr	r3, [r3, #32]
 8016df6:	460d      	mov	r5, r1
 8016df8:	4604      	mov	r4, r0
 8016dfa:	4798      	blx	r3
 8016dfc:	4285      	cmp	r5, r0
 8016dfe:	d905      	bls.n	8016e0c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016e00:	4b0c      	ldr	r3, [pc, #48]	; (8016e34 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016e02:	4a0d      	ldr	r2, [pc, #52]	; (8016e38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016e04:	2130      	movs	r1, #48	; 0x30
 8016e06:	480d      	ldr	r0, [pc, #52]	; (8016e3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016e08:	f017 f88a 	bl	802df20 <__assert_func>
 8016e0c:	6823      	ldr	r3, [r4, #0]
 8016e0e:	88a5      	ldrh	r5, [r4, #4]
 8016e10:	69db      	ldr	r3, [r3, #28]
 8016e12:	4620      	mov	r0, r4
 8016e14:	4798      	blx	r3
 8016e16:	4285      	cmp	r5, r0
 8016e18:	d303      	bcc.n	8016e22 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016e1a:	4b09      	ldr	r3, [pc, #36]	; (8016e40 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016e1c:	4a06      	ldr	r2, [pc, #24]	; (8016e38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016e1e:	2131      	movs	r1, #49	; 0x31
 8016e20:	e7f1      	b.n	8016e06 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016e22:	6823      	ldr	r3, [r4, #0]
 8016e24:	88a1      	ldrh	r1, [r4, #4]
 8016e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e28:	4620      	mov	r0, r4
 8016e2a:	4798      	blx	r3
 8016e2c:	88a3      	ldrh	r3, [r4, #4]
 8016e2e:	3301      	adds	r3, #1
 8016e30:	80a3      	strh	r3, [r4, #4]
 8016e32:	bd38      	pop	{r3, r4, r5, pc}
 8016e34:	08030765 	.word	0x08030765
 8016e38:	08030859 	.word	0x08030859
 8016e3c:	080306bd 	.word	0x080306bd
 8016e40:	0803077c 	.word	0x0803077c

08016e44 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016e44:	b570      	push	{r4, r5, r6, lr}
 8016e46:	6803      	ldr	r3, [r0, #0]
 8016e48:	6a1b      	ldr	r3, [r3, #32]
 8016e4a:	4616      	mov	r6, r2
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	460d      	mov	r5, r1
 8016e50:	4798      	blx	r3
 8016e52:	4286      	cmp	r6, r0
 8016e54:	d905      	bls.n	8016e62 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016e56:	4b06      	ldr	r3, [pc, #24]	; (8016e70 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016e58:	4a06      	ldr	r2, [pc, #24]	; (8016e74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016e5a:	4807      	ldr	r0, [pc, #28]	; (8016e78 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016e5c:	213a      	movs	r1, #58	; 0x3a
 8016e5e:	f017 f85f 	bl	802df20 <__assert_func>
 8016e62:	6823      	ldr	r3, [r4, #0]
 8016e64:	4629      	mov	r1, r5
 8016e66:	4620      	mov	r0, r4
 8016e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e6e:	4718      	bx	r3
 8016e70:	08030765 	.word	0x08030765
 8016e74:	080307cc 	.word	0x080307cc
 8016e78:	080306bd 	.word	0x080306bd

08016e7c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016e7c:	4770      	bx	lr
	...

08016e80 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016e80:	4a02      	ldr	r2, [pc, #8]	; (8016e8c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016e82:	6002      	str	r2, [r0, #0]
 8016e84:	2200      	movs	r2, #0
 8016e86:	8082      	strh	r2, [r0, #4]
 8016e88:	4770      	bx	lr
 8016e8a:	bf00      	nop
 8016e8c:	080307a0 	.word	0x080307a0

08016e90 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016e90:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016e92:	4770      	bx	lr

08016e94 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016e94:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016e98:	4770      	bx	lr

08016e9a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016e9a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016e9e:	4770      	bx	lr

08016ea0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016ea0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016ea4:	4770      	bx	lr

08016ea6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016ea6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016eaa:	4770      	bx	lr

08016eac <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016eac:	b510      	push	{r4, lr}
 8016eae:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016eb2:	600c      	str	r4, [r1, #0]
 8016eb4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016eb8:	6011      	str	r1, [r2, #0]
 8016eba:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016ebe:	801a      	strh	r2, [r3, #0]
 8016ec0:	9b02      	ldr	r3, [sp, #8]
 8016ec2:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016ec6:	801a      	strh	r2, [r3, #0]
 8016ec8:	bd10      	pop	{r4, pc}

08016eca <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016eca:	b510      	push	{r4, lr}
 8016ecc:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016ed0:	600c      	str	r4, [r1, #0]
 8016ed2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016ed6:	6011      	str	r1, [r2, #0]
 8016ed8:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016edc:	801a      	strh	r2, [r3, #0]
 8016ede:	bd10      	pop	{r4, pc}

08016ee0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016ee0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016ee4:	600b      	str	r3, [r1, #0]
 8016ee6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016eea:	6013      	str	r3, [r2, #0]
 8016eec:	4770      	bx	lr

08016eee <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016eee:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016ef2:	4770      	bx	lr

08016ef4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016ef4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016ef8:	4770      	bx	lr

08016efa <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8016efa:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016efe:	4770      	bx	lr

08016f00 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8016f00:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8016f04:	4770      	bx	lr

08016f06 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016f06:	b570      	push	{r4, r5, r6, lr}
 8016f08:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016f0c:	428d      	cmp	r5, r1
 8016f0e:	bfb8      	it	lt
 8016f10:	460d      	movlt	r5, r1
 8016f12:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016f16:	428d      	cmp	r5, r1
 8016f18:	4604      	mov	r4, r0
 8016f1a:	bfa8      	it	ge
 8016f1c:	460d      	movge	r5, r1
 8016f1e:	4616      	mov	r6, r2
 8016f20:	b99a      	cbnz	r2, 8016f4a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016f22:	6803      	ldr	r3, [r0, #0]
 8016f24:	4629      	mov	r1, r5
 8016f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016f2a:	4798      	blx	r3
 8016f2c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016f30:	b358      	cbz	r0, 8016f8a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016f32:	6803      	ldr	r3, [r0, #0]
 8016f34:	68db      	ldr	r3, [r3, #12]
 8016f36:	4798      	blx	r3
 8016f38:	b338      	cbz	r0, 8016f8a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016f3a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016f3e:	6803      	ldr	r3, [r0, #0]
 8016f40:	4621      	mov	r1, r4
 8016f42:	689b      	ldr	r3, [r3, #8]
 8016f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f48:	4718      	bx	r3
 8016f4a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	dd07      	ble.n	8016f62 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8016f52:	f005 f8c7 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 8016f56:	4621      	mov	r1, r4
 8016f58:	f005 f8fc 	bl	801c154 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016f62:	6823      	ldr	r3, [r4, #0]
 8016f64:	4620      	mov	r0, r4
 8016f66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016f6a:	4798      	blx	r3
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016f72:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8016f76:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8016f7a:	f005 f8b3 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 8016f7e:	4621      	mov	r1, r4
 8016f80:	f005 f8b6 	bl	801c0f0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016f84:	2301      	movs	r3, #1
 8016f86:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016f8a:	bd70      	pop	{r4, r5, r6, pc}

08016f8c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016f8c:	b510      	push	{r4, lr}
 8016f8e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016f92:	4299      	cmp	r1, r3
 8016f94:	bfb8      	it	lt
 8016f96:	4619      	movlt	r1, r3
 8016f98:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016f9c:	4299      	cmp	r1, r3
 8016f9e:	bfa8      	it	ge
 8016fa0:	4619      	movge	r1, r3
 8016fa2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016fa6:	428b      	cmp	r3, r1
 8016fa8:	4604      	mov	r4, r0
 8016faa:	d010      	beq.n	8016fce <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016fac:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8016fb0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8016fb4:	b158      	cbz	r0, 8016fce <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016fb6:	6803      	ldr	r3, [r0, #0]
 8016fb8:	68db      	ldr	r3, [r3, #12]
 8016fba:	4798      	blx	r3
 8016fbc:	b138      	cbz	r0, 8016fce <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016fbe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016fc2:	6803      	ldr	r3, [r0, #0]
 8016fc4:	4621      	mov	r1, r4
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fcc:	4718      	bx	r3
 8016fce:	bd10      	pop	{r4, pc}

08016fd0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd4:	4291      	cmp	r1, r2
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	460e      	mov	r6, r1
 8016fda:	4615      	mov	r5, r2
 8016fdc:	4698      	mov	r8, r3
 8016fde:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016fe2:	db05      	blt.n	8016ff0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8016fe4:	4b11      	ldr	r3, [pc, #68]	; (801702c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8016fe6:	4a12      	ldr	r2, [pc, #72]	; (8017030 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016fe8:	214b      	movs	r1, #75	; 0x4b
 8016fea:	4812      	ldr	r0, [pc, #72]	; (8017034 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8016fec:	f016 ff98 	bl	802df20 <__assert_func>
 8016ff0:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016ff4:	6803      	ldr	r3, [r0, #0]
 8016ff6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016ffe:	4798      	blx	r3
 8017000:	f1b8 0f00 	cmp.w	r8, #0
 8017004:	d10c      	bne.n	8017020 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017006:	1bad      	subs	r5, r5, r6
 8017008:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 801700c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8017010:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8017014:	42bb      	cmp	r3, r7
 8017016:	d806      	bhi.n	8017026 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017018:	4b07      	ldr	r3, [pc, #28]	; (8017038 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 801701a:	4a05      	ldr	r2, [pc, #20]	; (8017030 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 801701c:	2158      	movs	r1, #88	; 0x58
 801701e:	e7e4      	b.n	8016fea <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017020:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8017024:	e7f2      	b.n	801700c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801702a:	bf00      	nop
 801702c:	08030897 	.word	0x08030897
 8017030:	080309e4 	.word	0x080309e4
 8017034:	080308a1 	.word	0x080308a1
 8017038:	080308f8 	.word	0x080308f8

0801703c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 801703c:	b570      	push	{r4, r5, r6, lr}
 801703e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8017042:	4604      	mov	r4, r0
 8017044:	b3a3      	cbz	r3, 80170b0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017046:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 801704a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 801704e:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8017052:	3001      	adds	r0, #1
 8017054:	1ad2      	subs	r2, r2, r3
 8017056:	b212      	sxth	r2, r2
 8017058:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 801705c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017060:	2100      	movs	r1, #0
 8017062:	b280      	uxth	r0, r0
 8017064:	47a8      	blx	r5
 8017066:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	4401      	add	r1, r0
 801706e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017072:	4620      	mov	r0, r4
 8017074:	4798      	blx	r3
 8017076:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801707a:	429a      	cmp	r2, r3
 801707c:	db18      	blt.n	80170b0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 801707e:	2500      	movs	r5, #0
 8017080:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017084:	f005 f82e 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 8017088:	4621      	mov	r1, r4
 801708a:	f005 f863 	bl	801c154 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801708e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017092:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017096:	b158      	cbz	r0, 80170b0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017098:	6803      	ldr	r3, [r0, #0]
 801709a:	68db      	ldr	r3, [r3, #12]
 801709c:	4798      	blx	r3
 801709e:	b138      	cbz	r0, 80170b0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 80170a0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80170a4:	6803      	ldr	r3, [r0, #0]
 80170a6:	4621      	mov	r1, r4
 80170a8:	689b      	ldr	r3, [r3, #8]
 80170aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170ae:	4718      	bx	r3
 80170b0:	bd70      	pop	{r4, r5, r6, pc}

080170b2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80170b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170b4:	4604      	mov	r4, r0
 80170b6:	460d      	mov	r5, r1
 80170b8:	b1a9      	cbz	r1, 80170e6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80170ba:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 80170be:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 80170c2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 80170c6:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 80170ca:	ab01      	add	r3, sp, #4
 80170cc:	1a12      	subs	r2, r2, r0
 80170ce:	1b89      	subs	r1, r1, r6
 80170d0:	1a38      	subs	r0, r7, r0
 80170d2:	f006 f999 	bl	801d408 <_ZN8touchgfx6muldivElllRl>
 80170d6:	4629      	mov	r1, r5
 80170d8:	ab01      	add	r3, sp, #4
 80170da:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 80170de:	4430      	add	r0, r6
 80170e0:	f006 f992 	bl	801d408 <_ZN8touchgfx6muldivElllRl>
 80170e4:	b285      	uxth	r5, r0
 80170e6:	4628      	mov	r0, r5
 80170e8:	b003      	add	sp, #12
 80170ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170ec <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80170ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170f0:	4604      	mov	r4, r0
 80170f2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80170f6:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 80170fa:	460e      	mov	r6, r1
 80170fc:	4615      	mov	r5, r2
 80170fe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017102:	4619      	mov	r1, r3
 8017104:	463a      	mov	r2, r7
 8017106:	3058      	adds	r0, #88	; 0x58
 8017108:	4698      	mov	r8, r3
 801710a:	f7f9 fd07 	bl	8010b1c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801710e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017112:	4446      	add	r6, r8
 8017114:	42b3      	cmp	r3, r6
 8017116:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801711a:	bfb8      	it	lt
 801711c:	8126      	strhlt	r6, [r4, #8]
 801711e:	443d      	add	r5, r7
 8017120:	42ab      	cmp	r3, r5
 8017122:	bfb8      	it	lt
 8017124:	8165      	strhlt	r5, [r4, #10]
 8017126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801712a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801712a:	b510      	push	{r4, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	302c      	adds	r0, #44	; 0x2c
 8017130:	f003 fad0 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017134:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017138:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 801713c:	4620      	mov	r0, r4
 801713e:	f7f9 fced 	bl	8010b1c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017142:	bd10      	pop	{r4, pc}

08017144 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017146:	4604      	mov	r4, r0
 8017148:	4626      	mov	r6, r4
 801714a:	2500      	movs	r5, #0
 801714c:	f7f9 fbf0 	bl	8010930 <_ZN8touchgfx8DrawableC1Ev>
 8017150:	4b23      	ldr	r3, [pc, #140]	; (80171e0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017152:	62a5      	str	r5, [r4, #40]	; 0x28
 8017154:	f846 3b2c 	str.w	r3, [r6], #44
 8017158:	2226      	movs	r2, #38	; 0x26
 801715a:	4629      	mov	r1, r5
 801715c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017160:	4630      	mov	r0, r6
 8017162:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017166:	f017 f869 	bl	802e23c <memset>
 801716a:	4630      	mov	r0, r6
 801716c:	f7f9 fbe0 	bl	8010930 <_ZN8touchgfx8DrawableC1Ev>
 8017170:	a902      	add	r1, sp, #8
 8017172:	4b1c      	ldr	r3, [pc, #112]	; (80171e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017176:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 801717a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801717e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8017182:	4630      	mov	r0, r6
 8017184:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017188:	f003 faa4 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801718c:	4638      	mov	r0, r7
 801718e:	f7f9 fbcf 	bl	8010930 <_ZN8touchgfx8DrawableC1Ev>
 8017192:	4b15      	ldr	r3, [pc, #84]	; (80171e8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017194:	65a3      	str	r3, [r4, #88]	; 0x58
 8017196:	2364      	movs	r3, #100	; 0x64
 8017198:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 801719c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80171a0:	4b12      	ldr	r3, [pc, #72]	; (80171ec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 80171a2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80171a6:	4629      	mov	r1, r5
 80171a8:	4630      	mov	r0, r6
 80171aa:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 80171ae:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 80171b2:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 80171b6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80171ba:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 80171be:	f7f9 fc33 	bl	8010a28 <_ZN8touchgfx8Drawable4setXEs>
 80171c2:	4629      	mov	r1, r5
 80171c4:	4630      	mov	r0, r6
 80171c6:	f7f9 fc3e 	bl	8010a46 <_ZN8touchgfx8Drawable4setYEs>
 80171ca:	4631      	mov	r1, r6
 80171cc:	4620      	mov	r0, r4
 80171ce:	f000 f877 	bl	80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80171d2:	4620      	mov	r0, r4
 80171d4:	4639      	mov	r1, r7
 80171d6:	f000 f873 	bl	80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80171da:	4620      	mov	r0, r4
 80171dc:	b003      	add	sp, #12
 80171de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171e0:	0803091c 	.word	0x0803091c
 80171e4:	08031bfc 	.word	0x08031bfc
 80171e8:	08030b10 	.word	0x08030b10
 80171ec:	0801da6d 	.word	0x0801da6d

080171f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80171f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171f2:	2000      	movs	r0, #0
 80171f4:	b12b      	cbz	r3, 8017202 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80171f6:	b920      	cbnz	r0, 8017202 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80171f8:	1a5a      	subs	r2, r3, r1
 80171fa:	4250      	negs	r0, r2
 80171fc:	4150      	adcs	r0, r2
 80171fe:	699b      	ldr	r3, [r3, #24]
 8017200:	e7f8      	b.n	80171f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017202:	4770      	bx	lr

08017204 <_ZN8touchgfx9Container9removeAllEv>:
 8017204:	2200      	movs	r2, #0
 8017206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017208:	b123      	cbz	r3, 8017214 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801720a:	6999      	ldr	r1, [r3, #24]
 801720c:	6281      	str	r1, [r0, #40]	; 0x28
 801720e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017212:	e7f8      	b.n	8017206 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017214:	4770      	bx	lr

08017216 <_ZN8touchgfx9Container6unlinkEv>:
 8017216:	2300      	movs	r3, #0
 8017218:	6283      	str	r3, [r0, #40]	; 0x28
 801721a:	4770      	bx	lr

0801721c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801721c:	2200      	movs	r2, #0
 801721e:	8002      	strh	r2, [r0, #0]
 8017220:	8042      	strh	r2, [r0, #2]
 8017222:	8082      	strh	r2, [r0, #4]
 8017224:	80c2      	strh	r2, [r0, #6]
 8017226:	4770      	bx	lr

08017228 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017228:	b570      	push	{r4, r5, r6, lr}
 801722a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801722c:	460d      	mov	r5, r1
 801722e:	4616      	mov	r6, r2
 8017230:	b13c      	cbz	r4, 8017242 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	4620      	mov	r0, r4
 8017236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017238:	4632      	mov	r2, r6
 801723a:	4629      	mov	r1, r5
 801723c:	4798      	blx	r3
 801723e:	69a4      	ldr	r4, [r4, #24]
 8017240:	e7f6      	b.n	8017230 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017242:	bd70      	pop	{r4, r5, r6, pc}

08017244 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017248:	460d      	mov	r5, r1
 801724a:	b134      	cbz	r4, 801725a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801724c:	682b      	ldr	r3, [r5, #0]
 801724e:	4621      	mov	r1, r4
 8017250:	689b      	ldr	r3, [r3, #8]
 8017252:	4628      	mov	r0, r5
 8017254:	4798      	blx	r3
 8017256:	69a4      	ldr	r4, [r4, #24]
 8017258:	e7f7      	b.n	801724a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801725a:	bd38      	pop	{r3, r4, r5, pc}

0801725c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801725c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801725e:	b19b      	cbz	r3, 8017288 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017260:	428b      	cmp	r3, r1
 8017262:	d109      	bne.n	8017278 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017264:	699a      	ldr	r2, [r3, #24]
 8017266:	2100      	movs	r1, #0
 8017268:	6159      	str	r1, [r3, #20]
 801726a:	6282      	str	r2, [r0, #40]	; 0x28
 801726c:	b902      	cbnz	r2, 8017270 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801726e:	4770      	bx	lr
 8017270:	6199      	str	r1, [r3, #24]
 8017272:	4770      	bx	lr
 8017274:	4613      	mov	r3, r2
 8017276:	b13a      	cbz	r2, 8017288 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017278:	699a      	ldr	r2, [r3, #24]
 801727a:	428a      	cmp	r2, r1
 801727c:	d1fa      	bne.n	8017274 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801727e:	698a      	ldr	r2, [r1, #24]
 8017280:	619a      	str	r2, [r3, #24]
 8017282:	2300      	movs	r3, #0
 8017284:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017288:	4770      	bx	lr

0801728a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801728a:	b410      	push	{r4}
 801728c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801728e:	4604      	mov	r4, r0
 8017290:	b92b      	cbnz	r3, 801729e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017292:	6803      	ldr	r3, [r0, #0]
 8017294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801729a:	4611      	mov	r1, r2
 801729c:	4718      	bx	r3
 801729e:	b941      	cbnz	r1, 80172b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80172a0:	6193      	str	r3, [r2, #24]
 80172a2:	6282      	str	r2, [r0, #40]	; 0x28
 80172a4:	6154      	str	r4, [r2, #20]
 80172a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172aa:	4770      	bx	lr
 80172ac:	4603      	mov	r3, r0
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d0f9      	beq.n	80172a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80172b2:	4299      	cmp	r1, r3
 80172b4:	6998      	ldr	r0, [r3, #24]
 80172b6:	d1f9      	bne.n	80172ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80172b8:	6190      	str	r0, [r2, #24]
 80172ba:	618a      	str	r2, [r1, #24]
 80172bc:	e7f2      	b.n	80172a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80172c0:	4288      	cmp	r0, r1
 80172c2:	b508      	push	{r3, lr}
 80172c4:	d105      	bne.n	80172d2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80172c6:	4b11      	ldr	r3, [pc, #68]	; (801730c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80172c8:	4a11      	ldr	r2, [pc, #68]	; (8017310 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80172ca:	2123      	movs	r1, #35	; 0x23
 80172cc:	4811      	ldr	r0, [pc, #68]	; (8017314 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80172ce:	f016 fe27 	bl	802df20 <__assert_func>
 80172d2:	694b      	ldr	r3, [r1, #20]
 80172d4:	b11b      	cbz	r3, 80172de <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80172d6:	4b10      	ldr	r3, [pc, #64]	; (8017318 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80172d8:	4a0d      	ldr	r2, [pc, #52]	; (8017310 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80172da:	2124      	movs	r1, #36	; 0x24
 80172dc:	e7f6      	b.n	80172cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80172de:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80172e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80172e4:	b913      	cbnz	r3, 80172ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80172e6:	6281      	str	r1, [r0, #40]	; 0x28
 80172e8:	bd08      	pop	{r3, pc}
 80172ea:	4613      	mov	r3, r2
 80172ec:	699a      	ldr	r2, [r3, #24]
 80172ee:	b12a      	cbz	r2, 80172fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80172f0:	428b      	cmp	r3, r1
 80172f2:	d1fa      	bne.n	80172ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80172f4:	4b09      	ldr	r3, [pc, #36]	; (801731c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80172f6:	4a06      	ldr	r2, [pc, #24]	; (8017310 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80172f8:	2135      	movs	r1, #53	; 0x35
 80172fa:	e7e7      	b.n	80172cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80172fc:	428b      	cmp	r3, r1
 80172fe:	d103      	bne.n	8017308 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017300:	4b06      	ldr	r3, [pc, #24]	; (801731c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017302:	4a03      	ldr	r2, [pc, #12]	; (8017310 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017304:	2138      	movs	r1, #56	; 0x38
 8017306:	e7e1      	b.n	80172cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017308:	6199      	str	r1, [r3, #24]
 801730a:	e7ed      	b.n	80172e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801730c:	08030a3d 	.word	0x08030a3d
 8017310:	08030b94 	.word	0x08030b94
 8017314:	08030a69 	.word	0x08030a69
 8017318:	08030a9c 	.word	0x08030a9c
 801731c:	08030ad2 	.word	0x08030ad2

08017320 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017324:	461f      	mov	r7, r3
 8017326:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801732a:	460d      	mov	r5, r1
 801732c:	4616      	mov	r6, r2
 801732e:	b103      	cbz	r3, 8017332 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017330:	6038      	str	r0, [r7, #0]
 8017332:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017334:	b314      	cbz	r4, 801737c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017336:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801733a:	b1eb      	cbz	r3, 8017378 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801733c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017340:	428d      	cmp	r5, r1
 8017342:	db19      	blt.n	8017378 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017344:	8923      	ldrh	r3, [r4, #8]
 8017346:	b289      	uxth	r1, r1
 8017348:	440b      	add	r3, r1
 801734a:	b21b      	sxth	r3, r3
 801734c:	429d      	cmp	r5, r3
 801734e:	da13      	bge.n	8017378 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017350:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017354:	4296      	cmp	r6, r2
 8017356:	db0f      	blt.n	8017378 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017358:	8963      	ldrh	r3, [r4, #10]
 801735a:	b292      	uxth	r2, r2
 801735c:	4413      	add	r3, r2
 801735e:	b21b      	sxth	r3, r3
 8017360:	429e      	cmp	r6, r3
 8017362:	da09      	bge.n	8017378 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017364:	6823      	ldr	r3, [r4, #0]
 8017366:	1ab2      	subs	r2, r6, r2
 8017368:	1a69      	subs	r1, r5, r1
 801736a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801736e:	b212      	sxth	r2, r2
 8017370:	463b      	mov	r3, r7
 8017372:	b209      	sxth	r1, r1
 8017374:	4620      	mov	r0, r4
 8017376:	47c0      	blx	r8
 8017378:	69a4      	ldr	r4, [r4, #24]
 801737a:	e7db      	b.n	8017334 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017380 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017384:	4c6e      	ldr	r4, [pc, #440]	; (8017540 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017386:	b0a1      	sub	sp, #132	; 0x84
 8017388:	6824      	ldr	r4, [r4, #0]
 801738a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801738c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017390:	9303      	str	r3, [sp, #12]
 8017392:	2400      	movs	r4, #0
 8017394:	802c      	strh	r4, [r5, #0]
 8017396:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017398:	802c      	strh	r4, [r5, #0]
 801739a:	601c      	str	r4, [r3, #0]
 801739c:	4606      	mov	r6, r0
 801739e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80173a2:	f7ff ffbd 	bl	8017320 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80173a6:	f1b9 0f03 	cmp.w	r9, #3
 80173aa:	f340 80c2 	ble.w	8017532 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80173ae:	4631      	mov	r1, r6
 80173b0:	a80c      	add	r0, sp, #48	; 0x30
 80173b2:	f005 fef9 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173b6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80173ba:	9306      	str	r3, [sp, #24]
 80173bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80173c0:	9307      	str	r3, [sp, #28]
 80173c2:	9b03      	ldr	r3, [sp, #12]
 80173c4:	f8d3 a000 	ldr.w	sl, [r3]
 80173c8:	f1ba 0f00 	cmp.w	sl, #0
 80173cc:	f000 80b4 	beq.w	8017538 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80173d0:	4651      	mov	r1, sl
 80173d2:	a810      	add	r0, sp, #64	; 0x40
 80173d4:	f005 fee8 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173d8:	9b01      	ldr	r3, [sp, #4]
 80173da:	9a06      	ldr	r2, [sp, #24]
 80173dc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80173e0:	189d      	adds	r5, r3, r2
 80173e2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80173e6:	9a07      	ldr	r2, [sp, #28]
 80173e8:	2002      	movs	r0, #2
 80173ea:	fb91 f1f0 	sdiv	r1, r1, r0
 80173ee:	4419      	add	r1, r3
 80173f0:	1a6d      	subs	r5, r5, r1
 80173f2:	9b02      	ldr	r3, [sp, #8]
 80173f4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80173f8:	4413      	add	r3, r2
 80173fa:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80173fe:	fb92 f2f0 	sdiv	r2, r2, r0
 8017402:	440a      	add	r2, r1
 8017404:	1a9b      	subs	r3, r3, r2
 8017406:	435b      	muls	r3, r3
 8017408:	fb05 3505 	mla	r5, r5, r5, r3
 801740c:	4f4d      	ldr	r7, [pc, #308]	; (8017544 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 801740e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017410:	ac10      	add	r4, sp, #64	; 0x40
 8017412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017414:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017418:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801741a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801741c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017420:	f1b9 0f0c 	cmp.w	r9, #12
 8017424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017428:	f04f 0303 	mov.w	r3, #3
 801742c:	bfc8      	it	gt
 801742e:	4698      	movgt	r8, r3
 8017430:	f8cd 9000 	str.w	r9, [sp]
 8017434:	f04f 0400 	mov.w	r4, #0
 8017438:	bfdc      	itt	le
 801743a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801743e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017442:	1c63      	adds	r3, r4, #1
 8017444:	aa10      	add	r2, sp, #64	; 0x40
 8017446:	f004 0401 	and.w	r4, r4, #1
 801744a:	9308      	str	r3, [sp, #32]
 801744c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017450:	9b00      	ldr	r3, [sp, #0]
 8017452:	fb93 f3f8 	sdiv	r3, r3, r8
 8017456:	b29b      	uxth	r3, r3
 8017458:	3404      	adds	r4, #4
 801745a:	f04f 0b00 	mov.w	fp, #0
 801745e:	9304      	str	r3, [sp, #16]
 8017460:	9a04      	ldr	r2, [sp, #16]
 8017462:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017466:	fb13 f302 	smulbb	r3, r3, r2
 801746a:	9a01      	ldr	r2, [sp, #4]
 801746c:	b29b      	uxth	r3, r3
 801746e:	1899      	adds	r1, r3, r2
 8017470:	9305      	str	r3, [sp, #20]
 8017472:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017476:	b209      	sxth	r1, r1
 8017478:	4299      	cmp	r1, r3
 801747a:	db4d      	blt.n	8017518 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801747c:	8932      	ldrh	r2, [r6, #8]
 801747e:	4413      	add	r3, r2
 8017480:	b21b      	sxth	r3, r3
 8017482:	4299      	cmp	r1, r3
 8017484:	da48      	bge.n	8017518 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017486:	9b04      	ldr	r3, [sp, #16]
 8017488:	6827      	ldr	r7, [r4, #0]
 801748a:	fb17 f703 	smulbb	r7, r7, r3
 801748e:	9b02      	ldr	r3, [sp, #8]
 8017490:	b2bf      	uxth	r7, r7
 8017492:	18fa      	adds	r2, r7, r3
 8017494:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017498:	b212      	sxth	r2, r2
 801749a:	429a      	cmp	r2, r3
 801749c:	db3c      	blt.n	8017518 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801749e:	8970      	ldrh	r0, [r6, #10]
 80174a0:	4403      	add	r3, r0
 80174a2:	b21b      	sxth	r3, r3
 80174a4:	429a      	cmp	r2, r3
 80174a6:	da37      	bge.n	8017518 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174a8:	2300      	movs	r3, #0
 80174aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80174ac:	4630      	mov	r0, r6
 80174ae:	ab0b      	add	r3, sp, #44	; 0x2c
 80174b0:	f7ff ff36 	bl	8017320 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80174b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80174b6:	b37a      	cbz	r2, 8017518 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174b8:	4552      	cmp	r2, sl
 80174ba:	d02d      	beq.n	8017518 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174bc:	4611      	mov	r1, r2
 80174be:	a80e      	add	r0, sp, #56	; 0x38
 80174c0:	9209      	str	r2, [sp, #36]	; 0x24
 80174c2:	f005 fe71 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80174c6:	9a06      	ldr	r2, [sp, #24]
 80174c8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80174cc:	9b01      	ldr	r3, [sp, #4]
 80174ce:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80174d2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80174d6:	4413      	add	r3, r2
 80174d8:	f04f 0e02 	mov.w	lr, #2
 80174dc:	fb91 f1fe 	sdiv	r1, r1, lr
 80174e0:	4401      	add	r1, r0
 80174e2:	1a58      	subs	r0, r3, r1
 80174e4:	9a07      	ldr	r2, [sp, #28]
 80174e6:	9b02      	ldr	r3, [sp, #8]
 80174e8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80174ec:	fb9c fcfe 	sdiv	ip, ip, lr
 80174f0:	4413      	add	r3, r2
 80174f2:	448c      	add	ip, r1
 80174f4:	eba3 030c 	sub.w	r3, r3, ip
 80174f8:	435b      	muls	r3, r3
 80174fa:	fb00 3300 	mla	r3, r0, r0, r3
 80174fe:	42ab      	cmp	r3, r5
 8017500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017502:	d208      	bcs.n	8017516 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017504:	9803      	ldr	r0, [sp, #12]
 8017506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017508:	6001      	str	r1, [r0, #0]
 801750a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801750c:	9805      	ldr	r0, [sp, #20]
 801750e:	8008      	strh	r0, [r1, #0]
 8017510:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017512:	461d      	mov	r5, r3
 8017514:	800f      	strh	r7, [r1, #0]
 8017516:	4692      	mov	sl, r2
 8017518:	f10b 0b01 	add.w	fp, fp, #1
 801751c:	f1bb 0f04 	cmp.w	fp, #4
 8017520:	f104 0408 	add.w	r4, r4, #8
 8017524:	d19c      	bne.n	8017460 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017526:	9b00      	ldr	r3, [sp, #0]
 8017528:	9c08      	ldr	r4, [sp, #32]
 801752a:	444b      	add	r3, r9
 801752c:	4544      	cmp	r4, r8
 801752e:	9300      	str	r3, [sp, #0]
 8017530:	d187      	bne.n	8017442 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017532:	b021      	add	sp, #132	; 0x84
 8017534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017538:	f04f 35ff 	mov.w	r5, #4294967295
 801753c:	e766      	b.n	801740c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801753e:	bf00      	nop
 8017540:	200097a8 	.word	0x200097a8
 8017544:	0802fcac 	.word	0x0802fcac

08017548 <_ZN8touchgfx4RectaNERKS0_>:
 8017548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801754c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017550:	888c      	ldrh	r4, [r1, #4]
 8017552:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017556:	443c      	add	r4, r7
 8017558:	b2a4      	uxth	r4, r4
 801755a:	fa0f f884 	sxth.w	r8, r4
 801755e:	45c1      	cmp	r9, r8
 8017560:	da2f      	bge.n	80175c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017562:	8882      	ldrh	r2, [r0, #4]
 8017564:	444a      	add	r2, r9
 8017566:	b292      	uxth	r2, r2
 8017568:	fa0f fe82 	sxth.w	lr, r2
 801756c:	4577      	cmp	r7, lr
 801756e:	da28      	bge.n	80175c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017570:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017574:	88cb      	ldrh	r3, [r1, #6]
 8017576:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801757a:	442b      	add	r3, r5
 801757c:	b21b      	sxth	r3, r3
 801757e:	429e      	cmp	r6, r3
 8017580:	da1f      	bge.n	80175c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017582:	88c3      	ldrh	r3, [r0, #6]
 8017584:	4433      	add	r3, r6
 8017586:	b29b      	uxth	r3, r3
 8017588:	fa0f fc83 	sxth.w	ip, r3
 801758c:	4565      	cmp	r5, ip
 801758e:	da18      	bge.n	80175c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017590:	454f      	cmp	r7, r9
 8017592:	bfb8      	it	lt
 8017594:	464f      	movlt	r7, r9
 8017596:	42b5      	cmp	r5, r6
 8017598:	bfb8      	it	lt
 801759a:	4635      	movlt	r5, r6
 801759c:	45f0      	cmp	r8, lr
 801759e:	bfd8      	it	le
 80175a0:	4622      	movle	r2, r4
 80175a2:	1bd2      	subs	r2, r2, r7
 80175a4:	8082      	strh	r2, [r0, #4]
 80175a6:	884a      	ldrh	r2, [r1, #2]
 80175a8:	88c9      	ldrh	r1, [r1, #6]
 80175aa:	8007      	strh	r7, [r0, #0]
 80175ac:	440a      	add	r2, r1
 80175ae:	b292      	uxth	r2, r2
 80175b0:	b211      	sxth	r1, r2
 80175b2:	458c      	cmp	ip, r1
 80175b4:	bfa8      	it	ge
 80175b6:	4613      	movge	r3, r2
 80175b8:	1b5b      	subs	r3, r3, r5
 80175ba:	80c3      	strh	r3, [r0, #6]
 80175bc:	8045      	strh	r5, [r0, #2]
 80175be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175c2:	2300      	movs	r3, #0
 80175c4:	8003      	strh	r3, [r0, #0]
 80175c6:	8043      	strh	r3, [r0, #2]
 80175c8:	8083      	strh	r3, [r0, #4]
 80175ca:	80c3      	strh	r3, [r0, #6]
 80175cc:	e7f7      	b.n	80175be <_ZN8touchgfx4RectaNERKS0_+0x76>

080175ce <_ZNK8touchgfx4Rect7isEmptyEv>:
 80175ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	dd06      	ble.n	80175e4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80175d6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80175da:	2800      	cmp	r0, #0
 80175dc:	bfcc      	ite	gt
 80175de:	2000      	movgt	r0, #0
 80175e0:	2001      	movle	r0, #1
 80175e2:	4770      	bx	lr
 80175e4:	2001      	movs	r0, #1
 80175e6:	4770      	bx	lr

080175e8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80175e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ec:	2300      	movs	r3, #0
 80175ee:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80175f0:	8003      	strh	r3, [r0, #0]
 80175f2:	4604      	mov	r4, r0
 80175f4:	8043      	strh	r3, [r0, #2]
 80175f6:	8083      	strh	r3, [r0, #4]
 80175f8:	80c3      	strh	r3, [r0, #6]
 80175fa:	2d00      	cmp	r5, #0
 80175fc:	d040      	beq.n	8017680 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80175fe:	1d28      	adds	r0, r5, #4
 8017600:	f7ff ffe5 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8017604:	b988      	cbnz	r0, 801762a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017606:	4620      	mov	r0, r4
 8017608:	f7ff ffe1 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801760c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017610:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017614:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017618:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801761c:	b138      	cbz	r0, 801762e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801761e:	8022      	strh	r2, [r4, #0]
 8017620:	8063      	strh	r3, [r4, #2]
 8017622:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017626:	f8a4 c006 	strh.w	ip, [r4, #6]
 801762a:	69ad      	ldr	r5, [r5, #24]
 801762c:	e7e5      	b.n	80175fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801762e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017632:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017636:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801763a:	4290      	cmp	r0, r2
 801763c:	4607      	mov	r7, r0
 801763e:	bfa8      	it	ge
 8017640:	4617      	movge	r7, r2
 8017642:	4472      	add	r2, lr
 8017644:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017648:	8027      	strh	r7, [r4, #0]
 801764a:	4299      	cmp	r1, r3
 801764c:	460e      	mov	r6, r1
 801764e:	4440      	add	r0, r8
 8017650:	bfa8      	it	ge
 8017652:	461e      	movge	r6, r3
 8017654:	4471      	add	r1, lr
 8017656:	4463      	add	r3, ip
 8017658:	b200      	sxth	r0, r0
 801765a:	b212      	sxth	r2, r2
 801765c:	b209      	sxth	r1, r1
 801765e:	b21b      	sxth	r3, r3
 8017660:	4290      	cmp	r0, r2
 8017662:	bfac      	ite	ge
 8017664:	ebc7 0200 	rsbge	r2, r7, r0
 8017668:	ebc7 0202 	rsblt	r2, r7, r2
 801766c:	4299      	cmp	r1, r3
 801766e:	bfac      	ite	ge
 8017670:	ebc6 0301 	rsbge	r3, r6, r1
 8017674:	ebc6 0303 	rsblt	r3, r6, r3
 8017678:	8066      	strh	r6, [r4, #2]
 801767a:	80a2      	strh	r2, [r4, #4]
 801767c:	80e3      	strh	r3, [r4, #6]
 801767e:	e7d4      	b.n	801762a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017680:	4620      	mov	r0, r4
 8017682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017686 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017686:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801768a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801768e:	b383      	cbz	r3, 80176f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017690:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017692:	b374      	cbz	r4, 80176f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017694:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017698:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801769c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80176a0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80176a4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80176a8:	b303      	cbz	r3, 80176ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80176aa:	4668      	mov	r0, sp
 80176ac:	1d21      	adds	r1, r4, #4
 80176ae:	f8ad 5000 	strh.w	r5, [sp]
 80176b2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80176b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80176ba:	f8ad 8006 	strh.w	r8, [sp, #6]
 80176be:	f7ff ff43 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 80176c2:	4668      	mov	r0, sp
 80176c4:	f7ff ff83 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80176c8:	b980      	cbnz	r0, 80176ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80176ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80176ce:	88a2      	ldrh	r2, [r4, #4]
 80176d0:	1a9b      	subs	r3, r3, r2
 80176d2:	f8ad 3000 	strh.w	r3, [sp]
 80176d6:	88e2      	ldrh	r2, [r4, #6]
 80176d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80176dc:	1a9b      	subs	r3, r3, r2
 80176de:	f8ad 3002 	strh.w	r3, [sp, #2]
 80176e2:	6823      	ldr	r3, [r4, #0]
 80176e4:	4669      	mov	r1, sp
 80176e6:	689b      	ldr	r3, [r3, #8]
 80176e8:	4620      	mov	r0, r4
 80176ea:	4798      	blx	r3
 80176ec:	69a4      	ldr	r4, [r4, #24]
 80176ee:	2c00      	cmp	r4, #0
 80176f0:	d1d8      	bne.n	80176a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80176f2:	b002      	add	sp, #8
 80176f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80176f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176fa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80176fe:	460d      	mov	r5, r1
 8017700:	4616      	mov	r6, r2
 8017702:	b323      	cbz	r3, 801774e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017704:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017706:	b314      	cbz	r4, 801774e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017708:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801770c:	b1eb      	cbz	r3, 801774a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801770e:	6828      	ldr	r0, [r5, #0]
 8017710:	6869      	ldr	r1, [r5, #4]
 8017712:	466b      	mov	r3, sp
 8017714:	c303      	stmia	r3!, {r0, r1}
 8017716:	4668      	mov	r0, sp
 8017718:	1d21      	adds	r1, r4, #4
 801771a:	f7ff ff15 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801771e:	4668      	mov	r0, sp
 8017720:	f7ff ff55 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8017724:	b988      	cbnz	r0, 801774a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017726:	f8bd 3000 	ldrh.w	r3, [sp]
 801772a:	88a2      	ldrh	r2, [r4, #4]
 801772c:	1a9b      	subs	r3, r3, r2
 801772e:	f8ad 3000 	strh.w	r3, [sp]
 8017732:	88e2      	ldrh	r2, [r4, #6]
 8017734:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017738:	1a9b      	subs	r3, r3, r2
 801773a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	4632      	mov	r2, r6
 8017742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017744:	4669      	mov	r1, sp
 8017746:	4620      	mov	r0, r4
 8017748:	4798      	blx	r3
 801774a:	69a4      	ldr	r4, [r4, #24]
 801774c:	e7db      	b.n	8017706 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801774e:	b002      	add	sp, #8
 8017750:	bd70      	pop	{r4, r5, r6, pc}

08017752 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017752:	b513      	push	{r0, r1, r4, lr}
 8017754:	6803      	ldr	r3, [r0, #0]
 8017756:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801775a:	2300      	movs	r3, #0
 801775c:	e9cd 3300 	strd	r3, r3, [sp]
 8017760:	466b      	mov	r3, sp
 8017762:	47a0      	blx	r4
 8017764:	b002      	add	sp, #8
 8017766:	bd10      	pop	{r4, pc}

08017768 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017768:	2301      	movs	r3, #1
 801776a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801776e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017772:	4770      	bx	lr

08017774 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017774:	2301      	movs	r3, #1
 8017776:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801777a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801777e:	4770      	bx	lr

08017780 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017780:	6843      	ldr	r3, [r0, #4]
 8017782:	2201      	movs	r2, #1
 8017784:	725a      	strb	r2, [r3, #9]
 8017786:	6840      	ldr	r0, [r0, #4]
 8017788:	6803      	ldr	r3, [r0, #0]
 801778a:	691b      	ldr	r3, [r3, #16]
 801778c:	4718      	bx	r3

0801778e <_ZN8touchgfx3HAL8flushDMAEv>:
 801778e:	6840      	ldr	r0, [r0, #4]
 8017790:	6803      	ldr	r3, [r0, #0]
 8017792:	689b      	ldr	r3, [r3, #8]
 8017794:	4718      	bx	r3

08017796 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017796:	b530      	push	{r4, r5, lr}
 8017798:	b08b      	sub	sp, #44	; 0x2c
 801779a:	6804      	ldr	r4, [r0, #0]
 801779c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80177a0:	9509      	str	r5, [sp, #36]	; 0x24
 80177a2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80177a6:	9508      	str	r5, [sp, #32]
 80177a8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80177ac:	9507      	str	r5, [sp, #28]
 80177ae:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80177b2:	9506      	str	r5, [sp, #24]
 80177b4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80177b8:	9505      	str	r5, [sp, #20]
 80177ba:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80177be:	9504      	str	r5, [sp, #16]
 80177c0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80177c4:	9503      	str	r5, [sp, #12]
 80177c6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80177ca:	9502      	str	r5, [sp, #8]
 80177cc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80177d0:	e9cd 3500 	strd	r3, r5, [sp]
 80177d4:	4613      	mov	r3, r2
 80177d6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80177d8:	2200      	movs	r2, #0
 80177da:	47a0      	blx	r4
 80177dc:	b00b      	add	sp, #44	; 0x2c
 80177de:	bd30      	pop	{r4, r5, pc}

080177e0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80177e0:	4b04      	ldr	r3, [pc, #16]	; (80177f4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80177e2:	781b      	ldrb	r3, [r3, #0]
 80177e4:	b123      	cbz	r3, 80177f0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80177e6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80177ea:	f080 0001 	eor.w	r0, r0, #1
 80177ee:	4770      	bx	lr
 80177f0:	2001      	movs	r0, #1
 80177f2:	4770      	bx	lr
 80177f4:	200097a6 	.word	0x200097a6

080177f8 <_ZN8touchgfx3HAL8endFrameEv>:
 80177f8:	b510      	push	{r4, lr}
 80177fa:	4604      	mov	r4, r0
 80177fc:	6840      	ldr	r0, [r0, #4]
 80177fe:	6803      	ldr	r3, [r0, #0]
 8017800:	689b      	ldr	r3, [r3, #8]
 8017802:	4798      	blx	r3
 8017804:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017808:	b113      	cbz	r3, 8017810 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801780a:	2301      	movs	r3, #1
 801780c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017810:	bd10      	pop	{r4, pc}

08017812 <_ZN8touchgfx3HAL10initializeEv>:
 8017812:	b510      	push	{r4, lr}
 8017814:	4604      	mov	r4, r0
 8017816:	f7fd ff89 	bl	801572c <_ZN8touchgfx10OSWrappers10initializeEv>
 801781a:	6860      	ldr	r0, [r4, #4]
 801781c:	6803      	ldr	r3, [r0, #0]
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	4798      	blx	r3
 8017822:	68e0      	ldr	r0, [r4, #12]
 8017824:	6803      	ldr	r3, [r0, #0]
 8017826:	689b      	ldr	r3, [r3, #8]
 8017828:	4798      	blx	r3
 801782a:	6823      	ldr	r3, [r4, #0]
 801782c:	4620      	mov	r0, r4
 801782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017834:	4718      	bx	r3

08017836 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017836:	b508      	push	{r3, lr}
 8017838:	6803      	ldr	r3, [r0, #0]
 801783a:	4604      	mov	r4, r0
 801783c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801783e:	4798      	blx	r3
 8017840:	6823      	ldr	r3, [r4, #0]
 8017842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017844:	4620      	mov	r0, r4
 8017846:	4798      	blx	r3
 8017848:	f7fd ffe6 	bl	8015818 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801784c:	6823      	ldr	r3, [r4, #0]
 801784e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017850:	e7f8      	b.n	8017844 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017854 <_ZN8touchgfx3HAL4tickEv>:
 8017854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017856:	6803      	ldr	r3, [r0, #0]
 8017858:	4d5c      	ldr	r5, [pc, #368]	; (80179cc <_ZN8touchgfx3HAL4tickEv+0x178>)
 801785a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801785e:	4604      	mov	r4, r0
 8017860:	4798      	blx	r3
 8017862:	2800      	cmp	r0, #0
 8017864:	f000 8097 	beq.w	8017996 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017868:	2001      	movs	r0, #1
 801786a:	f7fd fd0b 	bl	8015284 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801786e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017872:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017876:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801787a:	2600      	movs	r6, #0
 801787c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017880:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017884:	b133      	cbz	r3, 8017894 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017886:	6823      	ldr	r3, [r4, #0]
 8017888:	4620      	mov	r0, r4
 801788a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801788e:	4798      	blx	r3
 8017890:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017894:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017898:	6862      	ldr	r2, [r4, #4]
 801789a:	f083 0301 	eor.w	r3, r3, #1
 801789e:	7253      	strb	r3, [r2, #9]
 80178a0:	2601      	movs	r6, #1
 80178a2:	702e      	strb	r6, [r5, #0]
 80178a4:	f004 fc1e 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 80178a8:	6803      	ldr	r3, [r0, #0]
 80178aa:	4631      	mov	r1, r6
 80178ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178ae:	4798      	blx	r3
 80178b0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80178b4:	b90b      	cbnz	r3, 80178ba <_ZN8touchgfx3HAL4tickEv+0x66>
 80178b6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80178ba:	f004 fc13 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 80178be:	6803      	ldr	r3, [r0, #0]
 80178c0:	695b      	ldr	r3, [r3, #20]
 80178c2:	4798      	blx	r3
 80178c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178c6:	6803      	ldr	r3, [r0, #0]
 80178c8:	691b      	ldr	r3, [r3, #16]
 80178ca:	4798      	blx	r3
 80178cc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80178d0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80178d4:	3b01      	subs	r3, #1
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80178dc:	b10a      	cbz	r2, 80178e2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d1eb      	bne.n	80178ba <_ZN8touchgfx3HAL4tickEv+0x66>
 80178e2:	4a3b      	ldr	r2, [pc, #236]	; (80179d0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80178e4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80178e8:	7813      	ldrb	r3, [r2, #0]
 80178ea:	3301      	adds	r3, #1
 80178ec:	b25b      	sxtb	r3, r3
 80178ee:	4299      	cmp	r1, r3
 80178f0:	7013      	strb	r3, [r2, #0]
 80178f2:	dc10      	bgt.n	8017916 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80178f4:	68e0      	ldr	r0, [r4, #12]
 80178f6:	2300      	movs	r3, #0
 80178f8:	7013      	strb	r3, [r2, #0]
 80178fa:	6803      	ldr	r3, [r0, #0]
 80178fc:	aa03      	add	r2, sp, #12
 80178fe:	68db      	ldr	r3, [r3, #12]
 8017900:	a902      	add	r1, sp, #8
 8017902:	4798      	blx	r3
 8017904:	6823      	ldr	r3, [r4, #0]
 8017906:	2800      	cmp	r0, #0
 8017908:	d051      	beq.n	80179ae <_ZN8touchgfx3HAL4tickEv+0x15a>
 801790a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801790e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017912:	4620      	mov	r0, r4
 8017914:	4798      	blx	r3
 8017916:	6960      	ldr	r0, [r4, #20]
 8017918:	2300      	movs	r3, #0
 801791a:	f88d 3007 	strb.w	r3, [sp, #7]
 801791e:	b158      	cbz	r0, 8017938 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	f10d 0107 	add.w	r1, sp, #7
 8017926:	68db      	ldr	r3, [r3, #12]
 8017928:	4798      	blx	r3
 801792a:	b128      	cbz	r0, 8017938 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801792c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801792e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017932:	6803      	ldr	r3, [r0, #0]
 8017934:	68db      	ldr	r3, [r3, #12]
 8017936:	4798      	blx	r3
 8017938:	f104 001c 	add.w	r0, r4, #28
 801793c:	f013 ff52 	bl	802b7e4 <_ZN8touchgfx8Gestures4tickEv>
 8017940:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017944:	b30b      	cbz	r3, 801798a <_ZN8touchgfx3HAL4tickEv+0x136>
 8017946:	6920      	ldr	r0, [r4, #16]
 8017948:	6803      	ldr	r3, [r0, #0]
 801794a:	691b      	ldr	r3, [r3, #16]
 801794c:	4798      	blx	r3
 801794e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017950:	4606      	mov	r6, r0
 8017952:	b903      	cbnz	r3, 8017956 <_ZN8touchgfx3HAL4tickEv+0x102>
 8017954:	6720      	str	r0, [r4, #112]	; 0x70
 8017956:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017958:	4a1e      	ldr	r2, [pc, #120]	; (80179d4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801795a:	1af3      	subs	r3, r6, r3
 801795c:	4293      	cmp	r3, r2
 801795e:	d914      	bls.n	801798a <_ZN8touchgfx3HAL4tickEv+0x136>
 8017960:	6920      	ldr	r0, [r4, #16]
 8017962:	6803      	ldr	r3, [r0, #0]
 8017964:	699b      	ldr	r3, [r3, #24]
 8017966:	4798      	blx	r3
 8017968:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801796a:	2264      	movs	r2, #100	; 0x64
 801796c:	1af3      	subs	r3, r6, r3
 801796e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017972:	fbb0 f0f3 	udiv	r0, r0, r3
 8017976:	2800      	cmp	r0, #0
 8017978:	dc1e      	bgt.n	80179b8 <_ZN8touchgfx3HAL4tickEv+0x164>
 801797a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801797e:	6920      	ldr	r0, [r4, #16]
 8017980:	6803      	ldr	r3, [r0, #0]
 8017982:	2100      	movs	r1, #0
 8017984:	69db      	ldr	r3, [r3, #28]
 8017986:	4798      	blx	r3
 8017988:	6726      	str	r6, [r4, #112]	; 0x70
 801798a:	f004 fbab 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 801798e:	6803      	ldr	r3, [r0, #0]
 8017990:	2100      	movs	r1, #0
 8017992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017994:	4798      	blx	r3
 8017996:	6823      	ldr	r3, [r4, #0]
 8017998:	4620      	mov	r0, r4
 801799a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801799e:	4798      	blx	r3
 80179a0:	2001      	movs	r0, #1
 80179a2:	f7fd fc7a 	bl	801529a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80179a6:	2300      	movs	r3, #0
 80179a8:	702b      	strb	r3, [r5, #0]
 80179aa:	b004      	add	sp, #16
 80179ac:	bd70      	pop	{r4, r5, r6, pc}
 80179ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80179b2:	4620      	mov	r0, r4
 80179b4:	4798      	blx	r3
 80179b6:	e7ae      	b.n	8017916 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80179b8:	2863      	cmp	r0, #99	; 0x63
 80179ba:	bfcb      	itete	gt
 80179bc:	2300      	movgt	r3, #0
 80179be:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80179c2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80179c6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80179ca:	e7d8      	b.n	801797e <_ZN8touchgfx3HAL4tickEv+0x12a>
 80179cc:	200097ac 	.word	0x200097ac
 80179d0:	200097ad 	.word	0x200097ad
 80179d4:	05f5e100 	.word	0x05f5e100

080179d8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80179d8:	f7fd beea 	b.w	80157b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080179dc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80179dc:	6581      	str	r1, [r0, #88]	; 0x58
 80179de:	301c      	adds	r0, #28
 80179e0:	f013 befe 	b.w	802b7e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080179e4 <_ZN8touchgfx3HAL5touchEll>:
 80179e4:	b530      	push	{r4, r5, lr}
 80179e6:	b087      	sub	sp, #28
 80179e8:	4604      	mov	r4, r0
 80179ea:	a804      	add	r0, sp, #16
 80179ec:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80179f0:	f004 f93e 	bl	801bc70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80179f4:	9b04      	ldr	r3, [sp, #16]
 80179f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80179fa:	a906      	add	r1, sp, #24
 80179fc:	9b05      	ldr	r3, [sp, #20]
 80179fe:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017a02:	a803      	add	r0, sp, #12
 8017a04:	f004 f986 	bl	801bd14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017a08:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017a0c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017a10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017a14:	f104 001c 	add.w	r0, r4, #28
 8017a18:	b189      	cbz	r1, 8017a3e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017a1a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017a1e:	9300      	str	r3, [sp, #0]
 8017a20:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017a24:	4613      	mov	r3, r2
 8017a26:	462a      	mov	r2, r5
 8017a28:	f013 feea 	bl	802b800 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017a2c:	b128      	cbz	r0, 8017a3a <_ZN8touchgfx3HAL5touchEll+0x56>
 8017a2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017a32:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017a34:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017a38:	6623      	str	r3, [r4, #96]	; 0x60
 8017a3a:	b007      	add	sp, #28
 8017a3c:	bd30      	pop	{r4, r5, pc}
 8017a3e:	f013 ff23 	bl	802b888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017a42:	2301      	movs	r3, #1
 8017a44:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017a48:	e7f1      	b.n	8017a2e <_ZN8touchgfx3HAL5touchEll+0x4a>

08017a4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017a4a:	b510      	push	{r4, lr}
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d046      	beq.n	8017ade <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a50:	ea81 0002 	eor.w	r0, r1, r2
 8017a54:	07c4      	lsls	r4, r0, #31
 8017a56:	d508      	bpl.n	8017a6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017a58:	440b      	add	r3, r1
 8017a5a:	3a01      	subs	r2, #1
 8017a5c:	428b      	cmp	r3, r1
 8017a5e:	d93e      	bls.n	8017ade <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a60:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017a64:	f801 0b01 	strb.w	r0, [r1], #1
 8017a68:	e7f8      	b.n	8017a5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017a6a:	07d0      	lsls	r0, r2, #31
 8017a6c:	bf42      	ittt	mi
 8017a6e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017a72:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017a76:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017a7a:	2b01      	cmp	r3, #1
 8017a7c:	d911      	bls.n	8017aa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a7e:	ea81 0402 	eor.w	r4, r1, r2
 8017a82:	07a4      	lsls	r4, r4, #30
 8017a84:	4610      	mov	r0, r2
 8017a86:	d022      	beq.n	8017ace <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017a88:	f023 0401 	bic.w	r4, r3, #1
 8017a8c:	440c      	add	r4, r1
 8017a8e:	428c      	cmp	r4, r1
 8017a90:	4602      	mov	r2, r0
 8017a92:	d904      	bls.n	8017a9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017a94:	8812      	ldrh	r2, [r2, #0]
 8017a96:	f821 2b02 	strh.w	r2, [r1], #2
 8017a9a:	3002      	adds	r0, #2
 8017a9c:	e7f7      	b.n	8017a8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017a9e:	f003 0301 	and.w	r3, r3, #1
 8017aa2:	f023 0003 	bic.w	r0, r3, #3
 8017aa6:	4408      	add	r0, r1
 8017aa8:	4288      	cmp	r0, r1
 8017aaa:	4614      	mov	r4, r2
 8017aac:	d904      	bls.n	8017ab8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017aae:	6824      	ldr	r4, [r4, #0]
 8017ab0:	f841 4b04 	str.w	r4, [r1], #4
 8017ab4:	3204      	adds	r2, #4
 8017ab6:	e7f7      	b.n	8017aa8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017ab8:	f003 0303 	and.w	r3, r3, #3
 8017abc:	440b      	add	r3, r1
 8017abe:	3a01      	subs	r2, #1
 8017ac0:	428b      	cmp	r3, r1
 8017ac2:	d90c      	bls.n	8017ade <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017ac4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017ac8:	f801 0b01 	strb.w	r0, [r1], #1
 8017acc:	e7f8      	b.n	8017ac0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017ace:	0790      	lsls	r0, r2, #30
 8017ad0:	d0e7      	beq.n	8017aa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017ad2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017ad6:	f821 0b02 	strh.w	r0, [r1], #2
 8017ada:	3b02      	subs	r3, #2
 8017adc:	e7e1      	b.n	8017aa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017ade:	2001      	movs	r0, #1
 8017ae0:	bd10      	pop	{r4, pc}

08017ae2 <_ZN8touchgfx3HAL7noTouchEv>:
 8017ae2:	b510      	push	{r4, lr}
 8017ae4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017ae8:	4604      	mov	r4, r0
 8017aea:	b153      	cbz	r3, 8017b02 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017aec:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017af0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017af4:	2101      	movs	r1, #1
 8017af6:	301c      	adds	r0, #28
 8017af8:	f013 fec6 	bl	802b888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017afc:	2300      	movs	r3, #0
 8017afe:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017b02:	bd10      	pop	{r4, pc}

08017b04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b08:	4604      	mov	r4, r0
 8017b0a:	6980      	ldr	r0, [r0, #24]
 8017b0c:	b085      	sub	sp, #20
 8017b0e:	460f      	mov	r7, r1
 8017b10:	4690      	mov	r8, r2
 8017b12:	4699      	mov	r9, r3
 8017b14:	b930      	cbnz	r0, 8017b24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017b16:	4b1c      	ldr	r3, [pc, #112]	; (8017b88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017b18:	4a1c      	ldr	r2, [pc, #112]	; (8017b8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017b1a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017b1e:	481c      	ldr	r0, [pc, #112]	; (8017b90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017b20:	f016 f9fe 	bl	802df20 <__assert_func>
 8017b24:	ad04      	add	r5, sp, #16
 8017b26:	2600      	movs	r6, #0
 8017b28:	f845 6d04 	str.w	r6, [r5, #-4]!
 8017b2c:	6806      	ldr	r6, [r0, #0]
 8017b2e:	9501      	str	r5, [sp, #4]
 8017b30:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017b34:	9500      	str	r5, [sp, #0]
 8017b36:	6835      	ldr	r5, [r6, #0]
 8017b38:	47a8      	blx	r5
 8017b3a:	4d16      	ldr	r5, [pc, #88]	; (8017b94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017b3c:	4606      	mov	r6, r0
 8017b3e:	f8a5 9000 	strh.w	r9, [r5]
 8017b42:	f7f8 fa4f 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8017b46:	6803      	ldr	r3, [r0, #0]
 8017b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b4a:	4798      	blx	r3
 8017b4c:	2801      	cmp	r0, #1
 8017b4e:	d012      	beq.n	8017b76 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017b50:	d306      	bcc.n	8017b60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017b52:	280d      	cmp	r0, #13
 8017b54:	d80b      	bhi.n	8017b6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017b56:	4b10      	ldr	r3, [pc, #64]	; (8017b98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017b58:	4a0c      	ldr	r2, [pc, #48]	; (8017b8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017b5a:	f240 1167 	movw	r1, #359	; 0x167
 8017b5e:	e7de      	b.n	8017b1e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017b60:	882b      	ldrh	r3, [r5, #0]
 8017b62:	fb08 7203 	mla	r2, r8, r3, r7
 8017b66:	9b03      	ldr	r3, [sp, #12]
 8017b68:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017b6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017b6e:	4630      	mov	r0, r6
 8017b70:	b005      	add	sp, #20
 8017b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b76:	882a      	ldrh	r2, [r5, #0]
 8017b78:	9b03      	ldr	r3, [sp, #12]
 8017b7a:	fb08 7202 	mla	r2, r8, r2, r7
 8017b7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b82:	1a9a      	subs	r2, r3, r2
 8017b84:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017b86:	e7f2      	b.n	8017b6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017b88:	08030d3c 	.word	0x08030d3c
 8017b8c:	080310cb 	.word	0x080310cb
 8017b90:	08030d81 	.word	0x08030d81
 8017b94:	200097a2 	.word	0x200097a2
 8017b98:	08030da7 	.word	0x08030da7

08017b9c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b9e:	b08b      	sub	sp, #44	; 0x2c
 8017ba0:	4617      	mov	r7, r2
 8017ba2:	4604      	mov	r4, r0
 8017ba4:	460e      	mov	r6, r1
 8017ba6:	461d      	mov	r5, r3
 8017ba8:	f7f8 fa1c 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8017bac:	6803      	ldr	r3, [r0, #0]
 8017bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bb0:	4798      	blx	r3
 8017bb2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017bb6:	9007      	str	r0, [sp, #28]
 8017bb8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017bbc:	4b0d      	ldr	r3, [pc, #52]	; (8017bf4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017bbe:	6822      	ldr	r2, [r4, #0]
 8017bc0:	881b      	ldrh	r3, [r3, #0]
 8017bc2:	9306      	str	r3, [sp, #24]
 8017bc4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017bc8:	9305      	str	r3, [sp, #20]
 8017bca:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017bce:	9304      	str	r3, [sp, #16]
 8017bd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017bd4:	9303      	str	r3, [sp, #12]
 8017bd6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017bda:	9302      	str	r3, [sp, #8]
 8017bdc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017be0:	e9cd 5300 	strd	r5, r3, [sp]
 8017be4:	4631      	mov	r1, r6
 8017be6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017be8:	463b      	mov	r3, r7
 8017bea:	2200      	movs	r2, #0
 8017bec:	4620      	mov	r0, r4
 8017bee:	47a8      	blx	r5
 8017bf0:	b00b      	add	sp, #44	; 0x2c
 8017bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bf4:	200097a2 	.word	0x200097a2

08017bf8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bfc:	4698      	mov	r8, r3
 8017bfe:	6803      	ldr	r3, [r0, #0]
 8017c00:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017c02:	4b15      	ldr	r3, [pc, #84]	; (8017c58 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017c04:	b08b      	sub	sp, #44	; 0x2c
 8017c06:	4617      	mov	r7, r2
 8017c08:	f8b3 9000 	ldrh.w	r9, [r3]
 8017c0c:	460e      	mov	r6, r1
 8017c0e:	4604      	mov	r4, r0
 8017c10:	f7f8 f9e8 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8017c14:	6803      	ldr	r3, [r0, #0]
 8017c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c18:	4798      	blx	r3
 8017c1a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017c1e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017c22:	2302      	movs	r3, #2
 8017c24:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017c28:	2301      	movs	r3, #1
 8017c2a:	9305      	str	r3, [sp, #20]
 8017c2c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017c30:	9304      	str	r3, [sp, #16]
 8017c32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017c36:	9303      	str	r3, [sp, #12]
 8017c38:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017c3c:	9302      	str	r3, [sp, #8]
 8017c3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017c42:	2200      	movs	r2, #0
 8017c44:	e9cd 8300 	strd	r8, r3, [sp]
 8017c48:	4631      	mov	r1, r6
 8017c4a:	463b      	mov	r3, r7
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	47a8      	blx	r5
 8017c50:	b00b      	add	sp, #44	; 0x2c
 8017c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c56:	bf00      	nop
 8017c58:	200097a2 	.word	0x200097a2

08017c5c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c60:	4698      	mov	r8, r3
 8017c62:	6803      	ldr	r3, [r0, #0]
 8017c64:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017c66:	4b11      	ldr	r3, [pc, #68]	; (8017cac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017c68:	b087      	sub	sp, #28
 8017c6a:	f8b3 9000 	ldrh.w	r9, [r3]
 8017c6e:	460e      	mov	r6, r1
 8017c70:	4617      	mov	r7, r2
 8017c72:	4604      	mov	r4, r0
 8017c74:	f7f8 f9b6 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8017c78:	6803      	ldr	r3, [r0, #0]
 8017c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c7c:	4798      	blx	r3
 8017c7e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017c82:	f8cd 900c 	str.w	r9, [sp, #12]
 8017c86:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017c8a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017c8e:	9302      	str	r3, [sp, #8]
 8017c90:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017c94:	9301      	str	r3, [sp, #4]
 8017c96:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017c9a:	9300      	str	r3, [sp, #0]
 8017c9c:	463a      	mov	r2, r7
 8017c9e:	4643      	mov	r3, r8
 8017ca0:	4631      	mov	r1, r6
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	47a8      	blx	r5
 8017ca6:	b007      	add	sp, #28
 8017ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cac:	200097a2 	.word	0x200097a2

08017cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb4:	4604      	mov	r4, r0
 8017cb6:	b08f      	sub	sp, #60	; 0x3c
 8017cb8:	4610      	mov	r0, r2
 8017cba:	460d      	mov	r5, r1
 8017cbc:	4691      	mov	r9, r2
 8017cbe:	461e      	mov	r6, r3
 8017cc0:	f007 fd5c 	bl	801f77c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	f000 809c 	beq.w	8017e02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8017cca:	6823      	ldr	r3, [r4, #0]
 8017ccc:	f8df b194 	ldr.w	fp, [pc, #404]	; 8017e64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8017cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cd2:	f8df a194 	ldr.w	sl, [pc, #404]	; 8017e68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017cd6:	4f60      	ldr	r7, [pc, #384]	; (8017e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017cd8:	4620      	mov	r0, r4
 8017cda:	4798      	blx	r3
 8017cdc:	6823      	ldr	r3, [r4, #0]
 8017cde:	4620      	mov	r0, r4
 8017ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ce2:	4798      	blx	r3
 8017ce4:	f8bb 3000 	ldrh.w	r3, [fp]
 8017ce8:	9301      	str	r3, [sp, #4]
 8017cea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017cee:	f8ba 3000 	ldrh.w	r3, [sl]
 8017cf2:	9302      	str	r3, [sp, #8]
 8017cf4:	883b      	ldrh	r3, [r7, #0]
 8017cf6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017cfa:	9303      	str	r3, [sp, #12]
 8017cfc:	4b57      	ldr	r3, [pc, #348]	; (8017e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017cfe:	9305      	str	r3, [sp, #20]
 8017d00:	881a      	ldrh	r2, [r3, #0]
 8017d02:	9204      	str	r2, [sp, #16]
 8017d04:	4640      	mov	r0, r8
 8017d06:	f007 fdf3 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017d0a:	8038      	strh	r0, [r7, #0]
 8017d0c:	4640      	mov	r0, r8
 8017d0e:	f007 fe29 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017d12:	9b05      	ldr	r3, [sp, #20]
 8017d14:	8018      	strh	r0, [r3, #0]
 8017d16:	4b52      	ldr	r3, [pc, #328]	; (8017e60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017d18:	781b      	ldrb	r3, [r3, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d174      	bne.n	8017e08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017d1e:	883b      	ldrh	r3, [r7, #0]
 8017d20:	f8ab 3000 	strh.w	r3, [fp]
 8017d24:	f8aa 0000 	strh.w	r0, [sl]
 8017d28:	4648      	mov	r0, r9
 8017d2a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017d2e:	f007 fd25 	bl	801f77c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017d32:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017d36:	2200      	movs	r2, #0
 8017d38:	4611      	mov	r1, r2
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017d40:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017d44:	f7f8 fe8e 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
 8017d48:	2301      	movs	r3, #1
 8017d4a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017d4e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017d52:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	dd5c      	ble.n	8017e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017d5a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	dd58      	ble.n	8017e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017d62:	462a      	mov	r2, r5
 8017d64:	ab0a      	add	r3, sp, #40	; 0x28
 8017d66:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017d6a:	6851      	ldr	r1, [r2, #4]
 8017d6c:	c303      	stmia	r3!, {r0, r1}
 8017d6e:	4631      	mov	r1, r6
 8017d70:	a80a      	add	r0, sp, #40	; 0x28
 8017d72:	f7ff fbe9 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 8017d76:	4b38      	ldr	r3, [pc, #224]	; (8017e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017d78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d7c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017d80:	2100      	movs	r1, #0
 8017d82:	aa0a      	add	r2, sp, #40	; 0x28
 8017d84:	4b35      	ldr	r3, [pc, #212]	; (8017e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017d86:	910c      	str	r1, [sp, #48]	; 0x30
 8017d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d90:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017d94:	ab08      	add	r3, sp, #32
 8017d96:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	a90c      	add	r1, sp, #48	; 0x30
 8017d9e:	f7ff fbd3 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 8017da2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d13c      	bne.n	8017e22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8017da8:	2000      	movs	r0, #0
 8017daa:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017dae:	2600      	movs	r6, #0
 8017db0:	682a      	ldr	r2, [r5, #0]
 8017db2:	696b      	ldr	r3, [r5, #20]
 8017db4:	616e      	str	r6, [r5, #20]
 8017db6:	9305      	str	r3, [sp, #20]
 8017db8:	6892      	ldr	r2, [r2, #8]
 8017dba:	a908      	add	r1, sp, #32
 8017dbc:	4628      	mov	r0, r5
 8017dbe:	4790      	blx	r2
 8017dc0:	9b05      	ldr	r3, [sp, #20]
 8017dc2:	616b      	str	r3, [r5, #20]
 8017dc4:	4652      	mov	r2, sl
 8017dc6:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017dca:	4649      	mov	r1, r9
 8017dcc:	4628      	mov	r0, r5
 8017dce:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017dd2:	f7f8 fe47 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
 8017dd6:	4b23      	ldr	r3, [pc, #140]	; (8017e64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017dd8:	9a01      	ldr	r2, [sp, #4]
 8017dda:	801a      	strh	r2, [r3, #0]
 8017ddc:	4b22      	ldr	r3, [pc, #136]	; (8017e68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017dde:	9a02      	ldr	r2, [sp, #8]
 8017de0:	801a      	strh	r2, [r3, #0]
 8017de2:	4b1d      	ldr	r3, [pc, #116]	; (8017e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017de4:	9a03      	ldr	r2, [sp, #12]
 8017de6:	801a      	strh	r2, [r3, #0]
 8017de8:	4b1c      	ldr	r3, [pc, #112]	; (8017e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017dea:	9a04      	ldr	r2, [sp, #16]
 8017dec:	801a      	strh	r2, [r3, #0]
 8017dee:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017df2:	6823      	ldr	r3, [r4, #0]
 8017df4:	4620      	mov	r0, r4
 8017df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017df8:	4798      	blx	r3
 8017dfa:	6823      	ldr	r3, [r4, #0]
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e00:	4798      	blx	r3
 8017e02:	b00f      	add	sp, #60	; 0x3c
 8017e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e08:	883b      	ldrh	r3, [r7, #0]
 8017e0a:	f8ab 0000 	strh.w	r0, [fp]
 8017e0e:	f8aa 3000 	strh.w	r3, [sl]
 8017e12:	e789      	b.n	8017d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8017e14:	462a      	mov	r2, r5
 8017e16:	ab0a      	add	r3, sp, #40	; 0x28
 8017e18:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017e1c:	6851      	ldr	r1, [r2, #4]
 8017e1e:	c303      	stmia	r3!, {r0, r1}
 8017e20:	e7a9      	b.n	8017d76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8017e22:	a807      	add	r0, sp, #28
 8017e24:	f007 fef6 	bl	801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e28:	4606      	mov	r6, r0
 8017e2a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017e2c:	6803      	ldr	r3, [r0, #0]
 8017e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e30:	4798      	blx	r3
 8017e32:	4286      	cmp	r6, r0
 8017e34:	d1b8      	bne.n	8017da8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8017e36:	f7f8 f8d5 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8017e3a:	6803      	ldr	r3, [r0, #0]
 8017e3c:	4606      	mov	r6, r0
 8017e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e40:	9305      	str	r3, [sp, #20]
 8017e42:	a807      	add	r0, sp, #28
 8017e44:	f007 fee6 	bl	801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e48:	9b05      	ldr	r3, [sp, #20]
 8017e4a:	4601      	mov	r1, r0
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	4798      	blx	r3
 8017e50:	f080 0001 	eor.w	r0, r0, #1
 8017e54:	b2c0      	uxtb	r0, r0
 8017e56:	e7a8      	b.n	8017daa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017e58:	2000979c 	.word	0x2000979c
 8017e5c:	2000979e 	.word	0x2000979e
 8017e60:	200097a0 	.word	0x200097a0
 8017e64:	200097a2 	.word	0x200097a2
 8017e68:	200097a4 	.word	0x200097a4

08017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017e6c:	b510      	push	{r4, lr}
 8017e6e:	4b07      	ldr	r3, [pc, #28]	; (8017e8c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	4604      	mov	r4, r0
 8017e74:	b13b      	cbz	r3, 8017e86 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017e76:	6803      	ldr	r3, [r0, #0]
 8017e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e7a:	4798      	blx	r3
 8017e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e7e:	4283      	cmp	r3, r0
 8017e80:	d101      	bne.n	8017e86 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017e82:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017e84:	bd10      	pop	{r4, pc}
 8017e86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017e88:	e7fc      	b.n	8017e84 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017e8a:	bf00      	nop
 8017e8c:	200097a6 	.word	0x200097a6

08017e90 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e94:	b088      	sub	sp, #32
 8017e96:	461d      	mov	r5, r3
 8017e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e9c:	2400      	movs	r4, #0
 8017e9e:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8017ea2:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8017ea6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8017eaa:	9403      	str	r4, [sp, #12]
 8017eac:	e9cd 3100 	strd	r3, r1, [sp]
 8017eb0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017eb4:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017eb8:	4692      	mov	sl, r2
 8017eba:	4606      	mov	r6, r0
 8017ebc:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017ec0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017ec4:	f88d 401c 	strb.w	r4, [sp, #28]
 8017ec8:	f7ff ffd0 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017ecc:	fb09 a505 	mla	r5, r9, r5, sl
 8017ed0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017ed4:	9504      	str	r5, [sp, #16]
 8017ed6:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017eda:	f88d 401e 	strb.w	r4, [sp, #30]
 8017ede:	f88d 401d 	strb.w	r4, [sp, #29]
 8017ee2:	f88d 401f 	strb.w	r4, [sp, #31]
 8017ee6:	f1b8 0f00 	cmp.w	r8, #0
 8017eea:	d000      	beq.n	8017eee <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8017eec:	b937      	cbnz	r7, 8017efc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8017eee:	4b0d      	ldr	r3, [pc, #52]	; (8017f24 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8017ef0:	4a0d      	ldr	r2, [pc, #52]	; (8017f28 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017ef2:	f240 210b 	movw	r1, #523	; 0x20b
 8017ef6:	480d      	ldr	r0, [pc, #52]	; (8017f2c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8017ef8:	f016 f812 	bl	802df20 <__assert_func>
 8017efc:	6833      	ldr	r3, [r6, #0]
 8017efe:	9c00      	ldr	r4, [sp, #0]
 8017f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f02:	4630      	mov	r0, r6
 8017f04:	4798      	blx	r3
 8017f06:	4220      	tst	r0, r4
 8017f08:	d104      	bne.n	8017f14 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8017f0a:	4b09      	ldr	r3, [pc, #36]	; (8017f30 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8017f0c:	4a06      	ldr	r2, [pc, #24]	; (8017f28 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017f0e:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8017f12:	e7f0      	b.n	8017ef6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8017f14:	6870      	ldr	r0, [r6, #4]
 8017f16:	6803      	ldr	r3, [r0, #0]
 8017f18:	4669      	mov	r1, sp
 8017f1a:	685b      	ldr	r3, [r3, #4]
 8017f1c:	4798      	blx	r3
 8017f1e:	b008      	add	sp, #32
 8017f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f24:	08030bcf 	.word	0x08030bcf
 8017f28:	08030f00 	.word	0x08030f00
 8017f2c:	08030d81 	.word	0x08030d81
 8017f30:	08030c07 	.word	0x08030c07

08017f34 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f38:	b089      	sub	sp, #36	; 0x24
 8017f3a:	2400      	movs	r4, #0
 8017f3c:	461d      	mov	r5, r3
 8017f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017f42:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8017f46:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8017f4a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8017f4e:	9403      	str	r4, [sp, #12]
 8017f50:	468a      	mov	sl, r1
 8017f52:	4693      	mov	fp, r2
 8017f54:	4606      	mov	r6, r0
 8017f56:	e9cd 3400 	strd	r3, r4, [sp]
 8017f5a:	f7ff ff87 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f5e:	fb09 b505 	mla	r5, r9, r5, fp
 8017f62:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017f66:	9504      	str	r5, [sp, #16]
 8017f68:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017f6c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017f70:	f8ad 4018 	strh.w	r4, [sp, #24]
 8017f74:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017f78:	f8cd a00c 	str.w	sl, [sp, #12]
 8017f7c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017f80:	f88d 401e 	strb.w	r4, [sp, #30]
 8017f84:	f88d 401f 	strb.w	r4, [sp, #31]
 8017f88:	f1b8 0f00 	cmp.w	r8, #0
 8017f8c:	d000      	beq.n	8017f90 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8017f8e:	b937      	cbnz	r7, 8017f9e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8017f90:	4b0d      	ldr	r3, [pc, #52]	; (8017fc8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8017f92:	4a0e      	ldr	r2, [pc, #56]	; (8017fcc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017f94:	f240 2121 	movw	r1, #545	; 0x221
 8017f98:	480d      	ldr	r0, [pc, #52]	; (8017fd0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8017f9a:	f015 ffc1 	bl	802df20 <__assert_func>
 8017f9e:	6833      	ldr	r3, [r6, #0]
 8017fa0:	9c00      	ldr	r4, [sp, #0]
 8017fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa4:	4630      	mov	r0, r6
 8017fa6:	4798      	blx	r3
 8017fa8:	4220      	tst	r0, r4
 8017faa:	d104      	bne.n	8017fb6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8017fac:	4b09      	ldr	r3, [pc, #36]	; (8017fd4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8017fae:	4a07      	ldr	r2, [pc, #28]	; (8017fcc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017fb0:	f240 2122 	movw	r1, #546	; 0x222
 8017fb4:	e7f0      	b.n	8017f98 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8017fb6:	6870      	ldr	r0, [r6, #4]
 8017fb8:	6803      	ldr	r3, [r0, #0]
 8017fba:	4669      	mov	r1, sp
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	4798      	blx	r3
 8017fc0:	b009      	add	sp, #36	; 0x24
 8017fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fc6:	bf00      	nop
 8017fc8:	08030c4c 	.word	0x08030c4c
 8017fcc:	08030f76 	.word	0x08030f76
 8017fd0:	08030d81 	.word	0x08030d81
 8017fd4:	08030c84 	.word	0x08030c84

08017fd8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017fd8:	b510      	push	{r4, lr}
 8017fda:	4b0b      	ldr	r3, [pc, #44]	; (8018008 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	4604      	mov	r4, r0
 8017fe0:	b95b      	cbnz	r3, 8017ffa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017fe2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017fe6:	2b02      	cmp	r3, #2
 8017fe8:	d007      	beq.n	8017ffa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017fea:	6840      	ldr	r0, [r0, #4]
 8017fec:	f000 fb5e 	bl	80186ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017ff0:	b118      	cbz	r0, 8017ffa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017ff2:	6862      	ldr	r2, [r4, #4]
 8017ff4:	7a53      	ldrb	r3, [r2, #9]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d0fc      	beq.n	8017ff4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017ffa:	f7fd fbcb 	bl	8015794 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017ffe:	4620      	mov	r0, r4
 8018000:	f7ff ff34 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018004:	bd10      	pop	{r4, pc}
 8018006:	bf00      	nop
 8018008:	200097a6 	.word	0x200097a6

0801800c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801800c:	b508      	push	{r3, lr}
 801800e:	290d      	cmp	r1, #13
 8018010:	d817      	bhi.n	8018042 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018012:	e8df f001 	tbb	[pc, r1]
 8018016:	090b      	.short	0x090b
 8018018:	0d0d0d07 	.word	0x0d0d0d07
 801801c:	1414140d 	.word	0x1414140d
 8018020:	0d0d1414 	.word	0x0d0d1414
 8018024:	2020      	movs	r0, #32
 8018026:	bd08      	pop	{r3, pc}
 8018028:	2018      	movs	r0, #24
 801802a:	e7fc      	b.n	8018026 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801802c:	2010      	movs	r0, #16
 801802e:	e7fa      	b.n	8018026 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018030:	4b05      	ldr	r3, [pc, #20]	; (8018048 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018032:	4a06      	ldr	r2, [pc, #24]	; (801804c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018034:	4806      	ldr	r0, [pc, #24]	; (8018050 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018036:	f240 2182 	movw	r1, #642	; 0x282
 801803a:	f015 ff71 	bl	802df20 <__assert_func>
 801803e:	2008      	movs	r0, #8
 8018040:	e7f1      	b.n	8018026 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018042:	2000      	movs	r0, #0
 8018044:	e7ef      	b.n	8018026 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018046:	bf00      	nop
 8018048:	08030dfd 	.word	0x08030dfd
 801804c:	080312a1 	.word	0x080312a1
 8018050:	08030d81 	.word	0x08030d81

08018054 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018054:	b570      	push	{r4, r5, r6, lr}
 8018056:	460d      	mov	r5, r1
 8018058:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801805c:	4616      	mov	r6, r2
 801805e:	461c      	mov	r4, r3
 8018060:	f7ff ffd4 	bl	801800c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018064:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018068:	10c0      	asrs	r0, r0, #3
 801806a:	fb06 5101 	mla	r1, r6, r1, r5
 801806e:	fb00 4001 	mla	r0, r0, r1, r4
 8018072:	bd70      	pop	{r4, r5, r6, pc}

08018074 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018078:	b08a      	sub	sp, #40	; 0x28
 801807a:	f04f 0c00 	mov.w	ip, #0
 801807e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8018082:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018086:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801808a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801808e:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018092:	f8cd c014 	str.w	ip, [sp, #20]
 8018096:	2d0b      	cmp	r5, #11
 8018098:	4604      	mov	r4, r0
 801809a:	469a      	mov	sl, r3
 801809c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80180a0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80180a4:	d12d      	bne.n	8018102 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 80180a6:	2080      	movs	r0, #128	; 0x80
 80180a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180ac:	9204      	str	r2, [sp, #16]
 80180ae:	4620      	mov	r0, r4
 80180b0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80180b4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80180b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80180bc:	f8ad 701c 	strh.w	r7, [sp, #28]
 80180c0:	f8ad 601e 	strh.w	r6, [sp, #30]
 80180c4:	f7ff fed2 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80180c8:	e9cd 9800 	strd	r9, r8, [sp]
 80180cc:	4603      	mov	r3, r0
 80180ce:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80180d2:	4651      	mov	r1, sl
 80180d4:	4620      	mov	r0, r4
 80180d6:	f7ff ffbd 	bl	8018054 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80180da:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80180de:	9006      	str	r0, [sp, #24]
 80180e0:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 80180e4:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80180e8:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 80180ec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80180f0:	b107      	cbz	r7, 80180f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 80180f2:	b9d6      	cbnz	r6, 801812a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 80180f4:	4b17      	ldr	r3, [pc, #92]	; (8018154 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 80180f6:	4a18      	ldr	r2, [pc, #96]	; (8018158 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80180f8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80180fc:	4817      	ldr	r0, [pc, #92]	; (801815c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 80180fe:	f015 ff0f 	bl	802df20 <__assert_func>
 8018102:	2d02      	cmp	r5, #2
 8018104:	d108      	bne.n	8018118 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018106:	2bff      	cmp	r3, #255	; 0xff
 8018108:	d104      	bne.n	8018114 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 801810a:	2800      	cmp	r0, #0
 801810c:	bf14      	ite	ne
 801810e:	2040      	movne	r0, #64	; 0x40
 8018110:	2020      	moveq	r0, #32
 8018112:	e7c9      	b.n	80180a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018114:	2040      	movs	r0, #64	; 0x40
 8018116:	e7c7      	b.n	80180a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018118:	2bff      	cmp	r3, #255	; 0xff
 801811a:	d104      	bne.n	8018126 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 801811c:	2800      	cmp	r0, #0
 801811e:	bf14      	ite	ne
 8018120:	2004      	movne	r0, #4
 8018122:	2001      	moveq	r0, #1
 8018124:	e7c0      	b.n	80180a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018126:	2004      	movs	r0, #4
 8018128:	e7be      	b.n	80180a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801812a:	6823      	ldr	r3, [r4, #0]
 801812c:	9d02      	ldr	r5, [sp, #8]
 801812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018130:	4620      	mov	r0, r4
 8018132:	4798      	blx	r3
 8018134:	4228      	tst	r0, r5
 8018136:	d104      	bne.n	8018142 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018138:	4b09      	ldr	r3, [pc, #36]	; (8018160 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 801813a:	4a07      	ldr	r2, [pc, #28]	; (8018158 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 801813c:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018140:	e7dc      	b.n	80180fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018142:	6860      	ldr	r0, [r4, #4]
 8018144:	6803      	ldr	r3, [r0, #0]
 8018146:	a902      	add	r1, sp, #8
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	4798      	blx	r3
 801814c:	b00a      	add	sp, #40	; 0x28
 801814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018152:	bf00      	nop
 8018154:	08030bcf 	.word	0x08030bcf
 8018158:	0803112f 	.word	0x0803112f
 801815c:	08030d81 	.word	0x08030d81
 8018160:	08030c07 	.word	0x08030c07

08018164 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018168:	b08b      	sub	sp, #44	; 0x2c
 801816a:	469b      	mov	fp, r3
 801816c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018170:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018174:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018178:	2fff      	cmp	r7, #255	; 0xff
 801817a:	bf14      	ite	ne
 801817c:	2308      	movne	r3, #8
 801817e:	2302      	moveq	r3, #2
 8018180:	2600      	movs	r6, #0
 8018182:	4604      	mov	r4, r0
 8018184:	4689      	mov	r9, r1
 8018186:	4692      	mov	sl, r2
 8018188:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801818c:	9605      	str	r6, [sp, #20]
 801818e:	f7ff fe6d 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018192:	e9cd 8500 	strd	r8, r5, [sp]
 8018196:	4603      	mov	r3, r0
 8018198:	465a      	mov	r2, fp
 801819a:	4651      	mov	r1, sl
 801819c:	4620      	mov	r0, r4
 801819e:	f7ff ff59 	bl	8018054 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80181a2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80181a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80181aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80181ae:	f8ad 301e 	strh.w	r3, [sp, #30]
 80181b2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80181b6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80181ba:	6823      	ldr	r3, [r4, #0]
 80181bc:	9006      	str	r0, [sp, #24]
 80181be:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80181c2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80181c6:	f8ad 6020 	strh.w	r6, [sp, #32]
 80181ca:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 80181ce:	f8cd 9014 	str.w	r9, [sp, #20]
 80181d2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80181d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181d8:	9d02      	ldr	r5, [sp, #8]
 80181da:	4620      	mov	r0, r4
 80181dc:	4798      	blx	r3
 80181de:	4228      	tst	r0, r5
 80181e0:	d106      	bne.n	80181f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 80181e2:	4b07      	ldr	r3, [pc, #28]	; (8018200 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 80181e4:	4a07      	ldr	r2, [pc, #28]	; (8018204 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 80181e6:	4808      	ldr	r0, [pc, #32]	; (8018208 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 80181e8:	f240 2137 	movw	r1, #567	; 0x237
 80181ec:	f015 fe98 	bl	802df20 <__assert_func>
 80181f0:	6860      	ldr	r0, [r4, #4]
 80181f2:	6803      	ldr	r3, [r0, #0]
 80181f4:	a902      	add	r1, sp, #8
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	4798      	blx	r3
 80181fa:	b00b      	add	sp, #44	; 0x2c
 80181fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018200:	08030c07 	.word	0x08030c07
 8018204:	08031206 	.word	0x08031206
 8018208:	08030d81 	.word	0x08030d81

0801820c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801820c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018210:	461f      	mov	r7, r3
 8018212:	4b0b      	ldr	r3, [pc, #44]	; (8018240 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018214:	460d      	mov	r5, r1
 8018216:	f8b3 8000 	ldrh.w	r8, [r3]
 801821a:	4616      	mov	r6, r2
 801821c:	4604      	mov	r4, r0
 801821e:	f7f7 fee1 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8018222:	6803      	ldr	r3, [r0, #0]
 8018224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018226:	4798      	blx	r3
 8018228:	463b      	mov	r3, r7
 801822a:	e9cd 8000 	strd	r8, r0, [sp]
 801822e:	4632      	mov	r2, r6
 8018230:	4629      	mov	r1, r5
 8018232:	4620      	mov	r0, r4
 8018234:	f7ff ff0e 	bl	8018054 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018238:	b002      	add	sp, #8
 801823a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801823e:	bf00      	nop
 8018240:	200097a2 	.word	0x200097a2

08018244 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018248:	b088      	sub	sp, #32
 801824a:	4698      	mov	r8, r3
 801824c:	2300      	movs	r3, #0
 801824e:	9303      	str	r3, [sp, #12]
 8018250:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018254:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018258:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801825c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018260:	e9cd 3100 	strd	r3, r1, [sp]
 8018264:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018268:	f8ad 3018 	strh.w	r3, [sp, #24]
 801826c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018270:	f88d 301c 	strb.w	r3, [sp, #28]
 8018274:	4617      	mov	r7, r2
 8018276:	4604      	mov	r4, r0
 8018278:	f8ad 5016 	strh.w	r5, [sp, #22]
 801827c:	f7ff fdf6 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018280:	4642      	mov	r2, r8
 8018282:	4603      	mov	r3, r0
 8018284:	4639      	mov	r1, r7
 8018286:	4620      	mov	r0, r4
 8018288:	f7ff ffc0 	bl	801820c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801828c:	4b18      	ldr	r3, [pc, #96]	; (80182f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 801828e:	9004      	str	r0, [sp, #16]
 8018290:	881b      	ldrh	r3, [r3, #0]
 8018292:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018296:	f7f7 fea5 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 801829a:	6803      	ldr	r3, [r0, #0]
 801829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801829e:	4798      	blx	r3
 80182a0:	f88d 001e 	strb.w	r0, [sp, #30]
 80182a4:	f88d 001d 	strb.w	r0, [sp, #29]
 80182a8:	b106      	cbz	r6, 80182ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 80182aa:	b935      	cbnz	r5, 80182ba <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 80182ac:	4b11      	ldr	r3, [pc, #68]	; (80182f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 80182ae:	4a12      	ldr	r2, [pc, #72]	; (80182f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80182b0:	f240 11f1 	movw	r1, #497	; 0x1f1
 80182b4:	4811      	ldr	r0, [pc, #68]	; (80182fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 80182b6:	f015 fe33 	bl	802df20 <__assert_func>
 80182ba:	6823      	ldr	r3, [r4, #0]
 80182bc:	9d00      	ldr	r5, [sp, #0]
 80182be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182c0:	4620      	mov	r0, r4
 80182c2:	4798      	blx	r3
 80182c4:	4228      	tst	r0, r5
 80182c6:	d104      	bne.n	80182d2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 80182c8:	4b0d      	ldr	r3, [pc, #52]	; (8018300 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 80182ca:	4a0b      	ldr	r2, [pc, #44]	; (80182f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80182cc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80182d0:	e7f0      	b.n	80182b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 80182d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80182d4:	9303      	str	r3, [sp, #12]
 80182d6:	6860      	ldr	r0, [r4, #4]
 80182d8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80182dc:	f88d 301f 	strb.w	r3, [sp, #31]
 80182e0:	6803      	ldr	r3, [r0, #0]
 80182e2:	4669      	mov	r1, sp
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	4798      	blx	r3
 80182e8:	b008      	add	sp, #32
 80182ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ee:	bf00      	nop
 80182f0:	200097a2 	.word	0x200097a2
 80182f4:	08030bcf 	.word	0x08030bcf
 80182f8:	08030fdb 	.word	0x08030fdb
 80182fc:	08030d81 	.word	0x08030d81
 8018300:	08030c07 	.word	0x08030c07

08018304 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018306:	b08b      	sub	sp, #44	; 0x2c
 8018308:	466b      	mov	r3, sp
 801830a:	e883 0006 	stmia.w	r3, {r1, r2}
 801830e:	4b21      	ldr	r3, [pc, #132]	; (8018394 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018310:	781b      	ldrb	r3, [r3, #0]
 8018312:	4604      	mov	r4, r0
 8018314:	b933      	cbnz	r3, 8018324 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018316:	4b20      	ldr	r3, [pc, #128]	; (8018398 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018318:	4a20      	ldr	r2, [pc, #128]	; (801839c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801831a:	4821      	ldr	r0, [pc, #132]	; (80183a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801831c:	f44f 7112 	mov.w	r1, #584	; 0x248
 8018320:	f015 fdfe 	bl	802df20 <__assert_func>
 8018324:	2301      	movs	r3, #1
 8018326:	9302      	str	r3, [sp, #8]
 8018328:	6803      	ldr	r3, [r0, #0]
 801832a:	f8bd 6000 	ldrh.w	r6, [sp]
 801832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018330:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018334:	2500      	movs	r5, #0
 8018336:	9505      	str	r5, [sp, #20]
 8018338:	4798      	blx	r3
 801833a:	463a      	mov	r2, r7
 801833c:	4631      	mov	r1, r6
 801833e:	4603      	mov	r3, r0
 8018340:	4620      	mov	r0, r4
 8018342:	f7ff ff63 	bl	801820c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018346:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018348:	9306      	str	r3, [sp, #24]
 801834a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801834e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018352:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018356:	f8ad 301e 	strh.w	r3, [sp, #30]
 801835a:	4b12      	ldr	r3, [pc, #72]	; (80183a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 801835c:	9003      	str	r0, [sp, #12]
 801835e:	881b      	ldrh	r3, [r3, #0]
 8018360:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018364:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018368:	f7f7 fe3c 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 801836c:	6803      	ldr	r3, [r0, #0]
 801836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018370:	4798      	blx	r3
 8018372:	23ff      	movs	r3, #255	; 0xff
 8018374:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018378:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801837c:	6860      	ldr	r0, [r4, #4]
 801837e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018382:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8018386:	6803      	ldr	r3, [r0, #0]
 8018388:	a902      	add	r1, sp, #8
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	4798      	blx	r3
 801838e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018390:	b00b      	add	sp, #44	; 0x2c
 8018392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018394:	200097a7 	.word	0x200097a7
 8018398:	08030cce 	.word	0x08030cce
 801839c:	08031085 	.word	0x08031085
 80183a0:	08030d81 	.word	0x08030d81
 80183a4:	200097a2 	.word	0x200097a2

080183a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80183a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183ac:	b08a      	sub	sp, #40	; 0x28
 80183ae:	466d      	mov	r5, sp
 80183b0:	e885 0006 	stmia.w	r5, {r1, r2}
 80183b4:	461d      	mov	r5, r3
 80183b6:	2301      	movs	r3, #1
 80183b8:	9302      	str	r3, [sp, #8]
 80183ba:	6803      	ldr	r3, [r0, #0]
 80183bc:	f8bd 7000 	ldrh.w	r7, [sp]
 80183c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183c2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80183c6:	2600      	movs	r6, #0
 80183c8:	9605      	str	r6, [sp, #20]
 80183ca:	4604      	mov	r4, r0
 80183cc:	4798      	blx	r3
 80183ce:	4642      	mov	r2, r8
 80183d0:	4639      	mov	r1, r7
 80183d2:	4603      	mov	r3, r0
 80183d4:	4620      	mov	r0, r4
 80183d6:	f7ff ff19 	bl	801820c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80183da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80183de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80183e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80183e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80183ea:	4b10      	ldr	r3, [pc, #64]	; (801842c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 80183ec:	9003      	str	r0, [sp, #12]
 80183ee:	881b      	ldrh	r3, [r3, #0]
 80183f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80183f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80183fa:	9506      	str	r5, [sp, #24]
 80183fc:	f7f7 fdf2 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 8018400:	6803      	ldr	r3, [r0, #0]
 8018402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018404:	4798      	blx	r3
 8018406:	23ff      	movs	r3, #255	; 0xff
 8018408:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801840c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018410:	6860      	ldr	r0, [r4, #4]
 8018412:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018416:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 801841a:	6803      	ldr	r3, [r0, #0]
 801841c:	a902      	add	r1, sp, #8
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	4798      	blx	r3
 8018422:	4628      	mov	r0, r5
 8018424:	b00a      	add	sp, #40	; 0x28
 8018426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801842a:	bf00      	nop
 801842c:	200097a2 	.word	0x200097a2

08018430 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018430:	b570      	push	{r4, r5, r6, lr}
 8018432:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018436:	4604      	mov	r4, r0
 8018438:	b19b      	cbz	r3, 8018462 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801843a:	2002      	movs	r0, #2
 801843c:	f7fc ff38 	bl	80152b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018440:	2300      	movs	r3, #0
 8018442:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018446:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801844a:	6823      	ldr	r3, [r4, #0]
 801844c:	4620      	mov	r0, r4
 801844e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8018452:	f7ff fd0b 	bl	8017e6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018456:	462b      	mov	r3, r5
 8018458:	4601      	mov	r1, r0
 801845a:	4620      	mov	r0, r4
 801845c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018460:	4718      	bx	r3
 8018462:	bd70      	pop	{r4, r5, r6, pc}

08018464 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018464:	4770      	bx	lr

08018466 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018466:	4770      	bx	lr

08018468 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8018468:	2000      	movs	r0, #0
 801846a:	4770      	bx	lr

0801846c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801846c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018470:	1a13      	subs	r3, r2, r0
 8018472:	4258      	negs	r0, r3
 8018474:	4158      	adcs	r0, r3
 8018476:	4770      	bx	lr

08018478 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018478:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801847c:	1a9b      	subs	r3, r3, r2
 801847e:	2b00      	cmp	r3, #0
 8018480:	bfdc      	itt	le
 8018482:	6882      	ldrle	r2, [r0, #8]
 8018484:	189b      	addle	r3, r3, r2
 8018486:	2b01      	cmp	r3, #1
 8018488:	bfcc      	ite	gt
 801848a:	2000      	movgt	r0, #0
 801848c:	2001      	movle	r0, #1
 801848e:	4770      	bx	lr

08018490 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018490:	6902      	ldr	r2, [r0, #16]
 8018492:	6840      	ldr	r0, [r0, #4]
 8018494:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018498:	4770      	bx	lr

0801849a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801849a:	6803      	ldr	r3, [r0, #0]
 801849c:	691b      	ldr	r3, [r3, #16]
 801849e:	4718      	bx	r3

080184a0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80184a0:	4770      	bx	lr

080184a2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80184a2:	4770      	bx	lr

080184a4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80184a4:	b570      	push	{r4, r5, r6, lr}
 80184a6:	2301      	movs	r3, #1
 80184a8:	7203      	strb	r3, [r0, #8]
 80184aa:	4604      	mov	r4, r0
 80184ac:	6840      	ldr	r0, [r0, #4]
 80184ae:	6803      	ldr	r3, [r0, #0]
 80184b0:	699b      	ldr	r3, [r3, #24]
 80184b2:	4798      	blx	r3
 80184b4:	6803      	ldr	r3, [r0, #0]
 80184b6:	2b40      	cmp	r3, #64	; 0x40
 80184b8:	4605      	mov	r5, r0
 80184ba:	d039      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184bc:	d815      	bhi.n	80184ea <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80184be:	2b04      	cmp	r3, #4
 80184c0:	d022      	beq.n	8018508 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80184c2:	d808      	bhi.n	80184d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80184c4:	2b01      	cmp	r3, #1
 80184c6:	d033      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184c8:	2b02      	cmp	r3, #2
 80184ca:	d108      	bne.n	80184de <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80184cc:	6823      	ldr	r3, [r4, #0]
 80184ce:	4620      	mov	r0, r4
 80184d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184d2:	4798      	blx	r3
 80184d4:	e025      	b.n	8018522 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80184d6:	2b08      	cmp	r3, #8
 80184d8:	d01e      	beq.n	8018518 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80184da:	2b20      	cmp	r3, #32
 80184dc:	d028      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184de:	4b17      	ldr	r3, [pc, #92]	; (801853c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80184e0:	4a17      	ldr	r2, [pc, #92]	; (8018540 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80184e2:	4818      	ldr	r0, [pc, #96]	; (8018544 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80184e4:	218b      	movs	r1, #139	; 0x8b
 80184e6:	f015 fd1b 	bl	802df20 <__assert_func>
 80184ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184ee:	d01f      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184f0:	d804      	bhi.n	80184fc <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80184f2:	2b80      	cmp	r3, #128	; 0x80
 80184f4:	d01c      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80184fa:	e7ef      	b.n	80184dc <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80184fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018500:	d016      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018506:	e7e0      	b.n	80184ca <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	7f01      	ldrb	r1, [r0, #28]
 801850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801850e:	4620      	mov	r0, r4
 8018510:	4798      	blx	r3
 8018512:	6823      	ldr	r3, [r4, #0]
 8018514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018516:	e006      	b.n	8018526 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018518:	6823      	ldr	r3, [r4, #0]
 801851a:	7f01      	ldrb	r1, [r0, #28]
 801851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801851e:	4620      	mov	r0, r4
 8018520:	4798      	blx	r3
 8018522:	6823      	ldr	r3, [r4, #0]
 8018524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018526:	4629      	mov	r1, r5
 8018528:	4620      	mov	r0, r4
 801852a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801852e:	4718      	bx	r3
 8018530:	6823      	ldr	r3, [r4, #0]
 8018532:	4620      	mov	r0, r4
 8018534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018536:	4798      	blx	r3
 8018538:	e7eb      	b.n	8018512 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801853a:	bf00      	nop
 801853c:	080312ea 	.word	0x080312ea
 8018540:	080313fc 	.word	0x080313fc
 8018544:	0803130f 	.word	0x0803130f

08018548 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018548:	b570      	push	{r4, r5, r6, lr}
 801854a:	4604      	mov	r4, r0
 801854c:	460e      	mov	r6, r1
 801854e:	6860      	ldr	r0, [r4, #4]
 8018550:	6803      	ldr	r3, [r0, #0]
 8018552:	685b      	ldr	r3, [r3, #4]
 8018554:	4798      	blx	r3
 8018556:	2800      	cmp	r0, #0
 8018558:	d1f9      	bne.n	801854e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801855a:	4d0d      	ldr	r5, [pc, #52]	; (8018590 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801855c:	6828      	ldr	r0, [r5, #0]
 801855e:	6803      	ldr	r3, [r0, #0]
 8018560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018562:	4798      	blx	r3
 8018564:	f7fd f930 	bl	80157c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018568:	6828      	ldr	r0, [r5, #0]
 801856a:	2101      	movs	r1, #1
 801856c:	f7ff ff7a 	bl	8018464 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018570:	6860      	ldr	r0, [r4, #4]
 8018572:	6803      	ldr	r3, [r0, #0]
 8018574:	4631      	mov	r1, r6
 8018576:	689b      	ldr	r3, [r3, #8]
 8018578:	4798      	blx	r3
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	4620      	mov	r0, r4
 801857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018580:	4798      	blx	r3
 8018582:	6828      	ldr	r0, [r5, #0]
 8018584:	6803      	ldr	r3, [r0, #0]
 8018586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801858a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801858c:	4718      	bx	r3
 801858e:	bf00      	nop
 8018590:	200097a8 	.word	0x200097a8

08018594 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018594:	b508      	push	{r3, lr}
 8018596:	f7fd f8fd 	bl	8015794 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801859a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801859e:	f7fd b907 	b.w	80157b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080185a2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80185a2:	b510      	push	{r4, lr}
 80185a4:	4604      	mov	r4, r0
 80185a6:	6840      	ldr	r0, [r0, #4]
 80185a8:	6803      	ldr	r3, [r0, #0]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4798      	blx	r3
 80185ae:	b948      	cbnz	r0, 80185c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80185b0:	7a63      	ldrb	r3, [r4, #9]
 80185b2:	b13b      	cbz	r3, 80185c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80185b4:	7a23      	ldrb	r3, [r4, #8]
 80185b6:	b92b      	cbnz	r3, 80185c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80185b8:	6823      	ldr	r3, [r4, #0]
 80185ba:	4620      	mov	r0, r4
 80185bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185c2:	4718      	bx	r3
 80185c4:	bd10      	pop	{r4, pc}
	...

080185c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80185c8:	b570      	push	{r4, r5, r6, lr}
 80185ca:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80185ce:	1a9b      	subs	r3, r3, r2
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	4606      	mov	r6, r0
 80185d4:	bfdc      	itt	le
 80185d6:	6880      	ldrle	r0, [r0, #8]
 80185d8:	181b      	addle	r3, r3, r0
 80185da:	2b01      	cmp	r3, #1
 80185dc:	dd13      	ble.n	8018606 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80185de:	6874      	ldr	r4, [r6, #4]
 80185e0:	460d      	mov	r5, r1
 80185e2:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80185e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80185ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80185f2:	68f3      	ldr	r3, [r6, #12]
 80185f4:	68b2      	ldr	r2, [r6, #8]
 80185f6:	f3bf 8f5b 	dmb	ish
 80185fa:	3301      	adds	r3, #1
 80185fc:	429a      	cmp	r2, r3
 80185fe:	bfd8      	it	le
 8018600:	1a9b      	suble	r3, r3, r2
 8018602:	60f3      	str	r3, [r6, #12]
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	4b03      	ldr	r3, [pc, #12]	; (8018614 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8018608:	4a03      	ldr	r2, [pc, #12]	; (8018618 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801860a:	4804      	ldr	r0, [pc, #16]	; (801861c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801860c:	2139      	movs	r1, #57	; 0x39
 801860e:	f015 fc87 	bl	802df20 <__assert_func>
 8018612:	bf00      	nop
 8018614:	08031335 	.word	0x08031335
 8018618:	0803142c 	.word	0x0803142c
 801861c:	0803130f 	.word	0x0803130f

08018620 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018620:	b510      	push	{r4, lr}
 8018622:	6803      	ldr	r3, [r0, #0]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	4604      	mov	r4, r0
 8018628:	4798      	blx	r3
 801862a:	b128      	cbz	r0, 8018638 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801862c:	4b07      	ldr	r3, [pc, #28]	; (801864c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801862e:	4a08      	ldr	r2, [pc, #32]	; (8018650 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018630:	4808      	ldr	r0, [pc, #32]	; (8018654 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018632:	213f      	movs	r1, #63	; 0x3f
 8018634:	f015 fc74 	bl	802df20 <__assert_func>
 8018638:	6923      	ldr	r3, [r4, #16]
 801863a:	68a2      	ldr	r2, [r4, #8]
 801863c:	f3bf 8f5b 	dmb	ish
 8018640:	3301      	adds	r3, #1
 8018642:	429a      	cmp	r2, r3
 8018644:	bfd8      	it	le
 8018646:	1a9b      	suble	r3, r3, r2
 8018648:	6123      	str	r3, [r4, #16]
 801864a:	bd10      	pop	{r4, pc}
 801864c:	08031358 	.word	0x08031358
 8018650:	0803147a 	.word	0x0803147a
 8018654:	0803130f 	.word	0x0803130f

08018658 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018658:	b570      	push	{r4, r5, r6, lr}
 801865a:	4604      	mov	r4, r0
 801865c:	6840      	ldr	r0, [r0, #4]
 801865e:	6803      	ldr	r3, [r0, #0]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	4798      	blx	r3
 8018664:	4605      	mov	r5, r0
 8018666:	b930      	cbnz	r0, 8018676 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018668:	7a23      	ldrb	r3, [r4, #8]
 801866a:	b123      	cbz	r3, 8018676 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801866c:	6860      	ldr	r0, [r4, #4]
 801866e:	6803      	ldr	r3, [r0, #0]
 8018670:	695b      	ldr	r3, [r3, #20]
 8018672:	4798      	blx	r3
 8018674:	7225      	strb	r5, [r4, #8]
 8018676:	6860      	ldr	r0, [r4, #4]
 8018678:	6803      	ldr	r3, [r0, #0]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4798      	blx	r3
 801867e:	b928      	cbnz	r0, 801868c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018680:	6823      	ldr	r3, [r4, #0]
 8018682:	4620      	mov	r0, r4
 8018684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801868a:	4718      	bx	r3
 801868c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018690:	f7fd b8a6 	b.w	80157e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018694 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018694:	b510      	push	{r4, lr}
 8018696:	4c04      	ldr	r4, [pc, #16]	; (80186a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018698:	6082      	str	r2, [r0, #8]
 801869a:	2200      	movs	r2, #0
 801869c:	e9c0 4100 	strd	r4, r1, [r0]
 80186a0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80186a4:	bd10      	pop	{r4, pc}
 80186a6:	bf00      	nop
 80186a8:	080313e0 	.word	0x080313e0

080186ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80186ac:	6840      	ldr	r0, [r0, #4]
 80186ae:	6803      	ldr	r3, [r0, #0]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	4718      	bx	r3

080186b4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80186b4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80186b8:	4770      	bx	lr

080186ba <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80186ba:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80186be:	4770      	bx	lr

080186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80186c0:	b507      	push	{r0, r1, r2, lr}
 80186c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80186c6:	ab01      	add	r3, sp, #4
 80186c8:	6809      	ldr	r1, [r1, #0]
 80186ca:	6800      	ldr	r0, [r0, #0]
 80186cc:	f004 fe9c 	bl	801d408 <_ZN8touchgfx6muldivElllRl>
 80186d0:	b003      	add	sp, #12
 80186d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080186d8 <_ZN8touchgfx7CWRUtil4sineEi>:
 80186d8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80186dc:	fb90 f3f2 	sdiv	r3, r0, r2
 80186e0:	fb03 0312 	mls	r3, r3, r2, r0
 80186e4:	4413      	add	r3, r2
 80186e6:	fb93 f0f2 	sdiv	r0, r3, r2
 80186ea:	fb02 3010 	mls	r0, r2, r0, r3
 80186ee:	285a      	cmp	r0, #90	; 0x5a
 80186f0:	4b09      	ldr	r3, [pc, #36]	; (8018718 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80186f2:	dc02      	bgt.n	80186fa <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80186f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80186f8:	4770      	bx	lr
 80186fa:	28b4      	cmp	r0, #180	; 0xb4
 80186fc:	dc02      	bgt.n	8018704 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80186fe:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018702:	e7f7      	b.n	80186f4 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8018704:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8018708:	bfd4      	ite	le
 801870a:	38b4      	suble	r0, #180	; 0xb4
 801870c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018710:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018714:	4240      	negs	r0, r0
 8018716:	4770      	bx	lr
 8018718:	080314aa 	.word	0x080314aa

0801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801871c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8018720:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018722:	fb90 f3f2 	sdiv	r3, r0, r2
 8018726:	fb03 0012 	mls	r0, r3, r2, r0
 801872a:	4410      	add	r0, r2
 801872c:	fb90 f4f2 	sdiv	r4, r0, r2
 8018730:	fb02 0414 	mls	r4, r2, r4, r0
 8018734:	f004 061f 	and.w	r6, r4, #31
 8018738:	1164      	asrs	r4, r4, #5
 801873a:	4620      	mov	r0, r4
 801873c:	f7ff ffcc 	bl	80186d8 <_ZN8touchgfx7CWRUtil4sineEi>
 8018740:	4605      	mov	r5, r0
 8018742:	b90e      	cbnz	r6, 8018748 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8018744:	b002      	add	sp, #8
 8018746:	bd70      	pop	{r4, r5, r6, pc}
 8018748:	1c60      	adds	r0, r4, #1
 801874a:	f7ff ffc5 	bl	80186d8 <_ZN8touchgfx7CWRUtil4sineEi>
 801874e:	ab01      	add	r3, sp, #4
 8018750:	2220      	movs	r2, #32
 8018752:	4631      	mov	r1, r6
 8018754:	1b40      	subs	r0, r0, r5
 8018756:	f004 fe57 	bl	801d408 <_ZN8touchgfx6muldivElllRl>
 801875a:	4428      	add	r0, r5
 801875c:	e7f2      	b.n	8018744 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

0801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801875e:	b508      	push	{r3, lr}
 8018760:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018764:	f7ff ffda 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018768:	bd08      	pop	{r3, pc}
	...

0801876c <_ZN8touchgfx6CircleC1Ev>:
 801876c:	b510      	push	{r4, lr}
 801876e:	4604      	mov	r4, r0
 8018770:	f000 fcde 	bl	8019130 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018774:	4b08      	ldr	r3, [pc, #32]	; (8018798 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8018776:	6023      	str	r3, [r4, #0]
 8018778:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801877c:	2300      	movs	r3, #0
 801877e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8018782:	f24b 4205 	movw	r2, #46085	; 0xb405
 8018786:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801878a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801878e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8018792:	60a3      	str	r3, [r4, #8]
 8018794:	4620      	mov	r0, r4
 8018796:	bd10      	pop	{r4, pc}
 8018798:	08031568 	.word	0x08031568

0801879c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801879c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80187a0:	4606      	mov	r6, r0
 80187a2:	6810      	ldr	r0, [r2, #0]
 80187a4:	4698      	mov	r8, r3
 80187a6:	4691      	mov	r9, r2
 80187a8:	460f      	mov	r7, r1
 80187aa:	f7ff ffb7 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80187ae:	a902      	add	r1, sp, #8
 80187b0:	2402      	movs	r4, #2
 80187b2:	f841 0d08 	str.w	r0, [r1, #-8]!
 80187b6:	4640      	mov	r0, r8
 80187b8:	f7ff ff82 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187bc:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80187be:	fb90 f0f4 	sdiv	r0, r0, r4
 80187c2:	4405      	add	r5, r0
 80187c4:	f8d9 0000 	ldr.w	r0, [r9]
 80187c8:	f7ff ffc9 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80187cc:	a902      	add	r1, sp, #8
 80187ce:	f841 0d04 	str.w	r0, [r1, #-4]!
 80187d2:	4640      	mov	r0, r8
 80187d4:	f7ff ff74 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187d8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80187da:	fb90 f0f4 	sdiv	r0, r0, r4
 80187de:	4629      	mov	r1, r5
 80187e0:	1a12      	subs	r2, r2, r0
 80187e2:	4638      	mov	r0, r7
 80187e4:	f013 facd 	bl	802bd82 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80187e8:	b003      	add	sp, #12
 80187ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080187ee <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 80187ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80187f2:	9e08      	ldr	r6, [sp, #32]
 80187f4:	6830      	ldr	r0, [r6, #0]
 80187f6:	4698      	mov	r8, r3
 80187f8:	4615      	mov	r5, r2
 80187fa:	460f      	mov	r7, r1
 80187fc:	f7ff ff8e 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018800:	a902      	add	r1, sp, #8
 8018802:	2402      	movs	r4, #2
 8018804:	f841 0d08 	str.w	r0, [r1, #-8]!
 8018808:	9809      	ldr	r0, [sp, #36]	; 0x24
 801880a:	f7ff ff59 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801880e:	682d      	ldr	r5, [r5, #0]
 8018810:	fb90 f0f4 	sdiv	r0, r0, r4
 8018814:	4405      	add	r5, r0
 8018816:	6830      	ldr	r0, [r6, #0]
 8018818:	f7ff ffa1 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801881c:	a902      	add	r1, sp, #8
 801881e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8018822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018824:	f7ff ff4c 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018828:	f8d8 2000 	ldr.w	r2, [r8]
 801882c:	fb90 f0f4 	sdiv	r0, r0, r4
 8018830:	4629      	mov	r1, r5
 8018832:	1a12      	subs	r2, r2, r0
 8018834:	4638      	mov	r0, r7
 8018836:	f013 fa33 	bl	802bca0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801883a:	b002      	add	sp, #8
 801883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018840 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8018840:	b513      	push	{r0, r1, r4, lr}
 8018842:	e9cd 2300 	strd	r2, r3, [sp]
 8018846:	f100 0334 	add.w	r3, r0, #52	; 0x34
 801884a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801884e:	f7ff ffce 	bl	80187ee <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018852:	b002      	add	sp, #8
 8018854:	bd10      	pop	{r4, pc}

08018856 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018858:	680e      	ldr	r6, [r1, #0]
 801885a:	681f      	ldr	r7, [r3, #0]
 801885c:	9807      	ldr	r0, [sp, #28]
 801885e:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8018862:	42be      	cmp	r6, r7
 8018864:	bfb8      	it	lt
 8018866:	601e      	strlt	r6, [r3, #0]
 8018868:	680b      	ldr	r3, [r1, #0]
 801886a:	6829      	ldr	r1, [r5, #0]
 801886c:	428b      	cmp	r3, r1
 801886e:	bfc8      	it	gt
 8018870:	602b      	strgt	r3, [r5, #0]
 8018872:	6813      	ldr	r3, [r2, #0]
 8018874:	6821      	ldr	r1, [r4, #0]
 8018876:	428b      	cmp	r3, r1
 8018878:	bfb8      	it	lt
 801887a:	6023      	strlt	r3, [r4, #0]
 801887c:	6813      	ldr	r3, [r2, #0]
 801887e:	6802      	ldr	r2, [r0, #0]
 8018880:	4293      	cmp	r3, r2
 8018882:	bfc8      	it	gt
 8018884:	6003      	strgt	r3, [r0, #0]
 8018886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018888 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801888c:	4606      	mov	r6, r0
 801888e:	b089      	sub	sp, #36	; 0x24
 8018890:	6808      	ldr	r0, [r1, #0]
 8018892:	4690      	mov	r8, r2
 8018894:	461f      	mov	r7, r3
 8018896:	4689      	mov	r9, r1
 8018898:	f7ff ff40 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801889c:	ad08      	add	r5, sp, #32
 801889e:	2402      	movs	r4, #2
 80188a0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80188a4:	4640      	mov	r0, r8
 80188a6:	4629      	mov	r1, r5
 80188a8:	f7ff ff0a 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80188ac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80188ae:	fb90 f0f4 	sdiv	r0, r0, r4
 80188b2:	4418      	add	r0, r3
 80188b4:	9005      	str	r0, [sp, #20]
 80188b6:	f8d9 0000 	ldr.w	r0, [r9]
 80188ba:	f7ff ff50 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80188be:	4629      	mov	r1, r5
 80188c0:	9007      	str	r0, [sp, #28]
 80188c2:	4640      	mov	r0, r8
 80188c4:	f7ff fefc 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80188c8:	fb90 f0f4 	sdiv	r0, r0, r4
 80188cc:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80188ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80188d0:	aa08      	add	r2, sp, #32
 80188d2:	1a24      	subs	r4, r4, r0
 80188d4:	f842 4d08 	str.w	r4, [r2, #-8]!
 80188d8:	9302      	str	r3, [sp, #8]
 80188da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80188dc:	9301      	str	r3, [sp, #4]
 80188de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188e0:	9300      	str	r3, [sp, #0]
 80188e2:	a905      	add	r1, sp, #20
 80188e4:	463b      	mov	r3, r7
 80188e6:	4630      	mov	r0, r6
 80188e8:	f7ff ffb5 	bl	8018856 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80188ec:	b009      	add	sp, #36	; 0x24
 80188ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080188f2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80188f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f6:	4291      	cmp	r1, r2
 80188f8:	b08d      	sub	sp, #52	; 0x34
 80188fa:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80188fe:	bfc8      	it	gt
 8018900:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8018904:	461e      	mov	r6, r3
 8018906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801890a:	1a9b      	subs	r3, r3, r2
 801890c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018910:	bfa2      	ittt	ge
 8018912:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018916:	2200      	movge	r2, #0
 8018918:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 801891c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801891e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018920:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018924:	ad0c      	add	r5, sp, #48	; 0x30
 8018926:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 801892a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801892e:	f845 3d04 	str.w	r3, [r5, #-4]!
 8018932:	a907      	add	r1, sp, #28
 8018934:	4633      	mov	r3, r6
 8018936:	462a      	mov	r2, r5
 8018938:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801893c:	9700      	str	r7, [sp, #0]
 801893e:	4604      	mov	r4, r0
 8018940:	f7ff ffa2 	bl	8018888 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018944:	9b07      	ldr	r3, [sp, #28]
 8018946:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 801894a:	f103 0120 	add.w	r1, r3, #32
 801894e:	fb91 f3f0 	sdiv	r3, r1, r0
 8018952:	fb00 1313 	mls	r3, r0, r3, r1
 8018956:	1ac3      	subs	r3, r0, r3
 8018958:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801895c:	fb93 f2f0 	sdiv	r2, r3, r0
 8018960:	fb00 3312 	mls	r3, r0, r2, r3
 8018964:	440b      	add	r3, r1
 8018966:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 801896a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801896c:	9906      	ldr	r1, [sp, #24]
 801896e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018970:	4291      	cmp	r1, r2
 8018972:	db11      	blt.n	8018998 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8018974:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018976:	9700      	str	r7, [sp, #0]
 8018978:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801897c:	930b      	str	r3, [sp, #44]	; 0x2c
 801897e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018982:	4633      	mov	r3, r6
 8018984:	462a      	mov	r2, r5
 8018986:	4651      	mov	r1, sl
 8018988:	4620      	mov	r0, r4
 801898a:	f7ff ff7d 	bl	8018888 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801898e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018990:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8018994:	9309      	str	r3, [sp, #36]	; 0x24
 8018996:	e7e8      	b.n	801896a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8018998:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 801899c:	4291      	cmp	r1, r2
 801899e:	dd0c      	ble.n	80189ba <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 80189a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80189a2:	9700      	str	r7, [sp, #0]
 80189a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80189a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80189aa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80189ae:	4633      	mov	r3, r6
 80189b0:	462a      	mov	r2, r5
 80189b2:	a906      	add	r1, sp, #24
 80189b4:	4620      	mov	r0, r4
 80189b6:	f7ff ff67 	bl	8018888 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80189ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80189bc:	2b00      	cmp	r3, #0
 80189be:	f040 8097 	bne.w	8018af0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 80189c2:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 80189c6:	1a52      	subs	r2, r2, r1
 80189c8:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 80189cc:	da0a      	bge.n	80189e4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 80189ce:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80189d2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80189d6:	9700      	str	r7, [sp, #0]
 80189d8:	4633      	mov	r3, r6
 80189da:	462a      	mov	r2, r5
 80189dc:	a90a      	add	r1, sp, #40	; 0x28
 80189de:	4620      	mov	r0, r4
 80189e0:	f7ff ff52 	bl	8018888 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80189e4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80189e8:	2bb3      	cmp	r3, #179	; 0xb3
 80189ea:	d87e      	bhi.n	8018aea <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80189ec:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 80189f0:	1a1b      	subs	r3, r3, r0
 80189f2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80189f6:	da78      	bge.n	8018aea <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80189f8:	f7ff fe90 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80189fc:	ad0c      	add	r5, sp, #48	; 0x30
 80189fe:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8018a02:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018a06:	4658      	mov	r0, fp
 8018a08:	4629      	mov	r1, r5
 8018a0a:	f7ff fe59 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018a10:	18c3      	adds	r3, r0, r3
 8018a12:	9807      	ldr	r0, [sp, #28]
 8018a14:	9305      	str	r3, [sp, #20]
 8018a16:	f7ff fea2 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018a1a:	4629      	mov	r1, r5
 8018a1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a1e:	4658      	mov	r0, fp
 8018a20:	f7ff fe4e 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a26:	9a05      	ldr	r2, [sp, #20]
 8018a28:	9700      	str	r7, [sp, #0]
 8018a2a:	1a1b      	subs	r3, r3, r0
 8018a2c:	f04f 0a02 	mov.w	sl, #2
 8018a30:	9304      	str	r3, [sp, #16]
 8018a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a34:	fb93 f3fa 	sdiv	r3, r3, sl
 8018a38:	1ad2      	subs	r2, r2, r3
 8018a3a:	920a      	str	r2, [sp, #40]	; 0x28
 8018a3c:	9a04      	ldr	r2, [sp, #16]
 8018a3e:	1ad3      	subs	r3, r2, r3
 8018a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a42:	462a      	mov	r2, r5
 8018a44:	4633      	mov	r3, r6
 8018a46:	a90a      	add	r1, sp, #40	; 0x28
 8018a48:	4620      	mov	r0, r4
 8018a4a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a4e:	f7ff ff02 	bl	8018856 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a52:	9a05      	ldr	r2, [sp, #20]
 8018a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a56:	fb93 f3fa 	sdiv	r3, r3, sl
 8018a5a:	189a      	adds	r2, r3, r2
 8018a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8018a5e:	9a04      	ldr	r2, [sp, #16]
 8018a60:	9700      	str	r7, [sp, #0]
 8018a62:	4413      	add	r3, r2
 8018a64:	a90a      	add	r1, sp, #40	; 0x28
 8018a66:	462a      	mov	r2, r5
 8018a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	4633      	mov	r3, r6
 8018a6e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a72:	f7ff fef0 	bl	8018856 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a76:	9806      	ldr	r0, [sp, #24]
 8018a78:	f7ff fe50 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018a7c:	4629      	mov	r1, r5
 8018a7e:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a80:	4658      	mov	r0, fp
 8018a82:	f7ff fe1d 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018a88:	18c3      	adds	r3, r0, r3
 8018a8a:	9806      	ldr	r0, [sp, #24]
 8018a8c:	9304      	str	r3, [sp, #16]
 8018a8e:	f7ff fe66 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018a92:	4629      	mov	r1, r5
 8018a94:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a96:	4658      	mov	r0, fp
 8018a98:	f7ff fe12 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a9e:	9a04      	ldr	r2, [sp, #16]
 8018aa0:	9700      	str	r7, [sp, #0]
 8018aa2:	eba3 0b00 	sub.w	fp, r3, r0
 8018aa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018aa8:	fb93 f3fa 	sdiv	r3, r3, sl
 8018aac:	1ad2      	subs	r2, r2, r3
 8018aae:	ebab 0303 	sub.w	r3, fp, r3
 8018ab2:	920a      	str	r2, [sp, #40]	; 0x28
 8018ab4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ab6:	462a      	mov	r2, r5
 8018ab8:	4633      	mov	r3, r6
 8018aba:	a90a      	add	r1, sp, #40	; 0x28
 8018abc:	4620      	mov	r0, r4
 8018abe:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018ac2:	f7ff fec8 	bl	8018856 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018ac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018ac8:	fb93 fafa 	sdiv	sl, r3, sl
 8018acc:	9b04      	ldr	r3, [sp, #16]
 8018ace:	9700      	str	r7, [sp, #0]
 8018ad0:	4453      	add	r3, sl
 8018ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8018ad4:	eb0a 030b 	add.w	r3, sl, fp
 8018ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ada:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018ade:	4633      	mov	r3, r6
 8018ae0:	462a      	mov	r2, r5
 8018ae2:	a90a      	add	r1, sp, #40	; 0x28
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f7ff feb6 	bl	8018856 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018aea:	b00d      	add	sp, #52	; 0x34
 8018aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018af0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018af2:	9700      	str	r7, [sp, #0]
 8018af4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018afa:	462a      	mov	r2, r5
 8018afc:	4633      	mov	r3, r6
 8018afe:	a907      	add	r1, sp, #28
 8018b00:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018b04:	4620      	mov	r0, r4
 8018b06:	f7ff febf 	bl	8018888 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018b0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018b0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018b0e:	9700      	str	r7, [sp, #0]
 8018b10:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b16:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018b1a:	4633      	mov	r3, r6
 8018b1c:	462a      	mov	r2, r5
 8018b1e:	a906      	add	r1, sp, #24
 8018b20:	e75d      	b.n	80189de <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08018b22 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8018b22:	b530      	push	{r4, r5, lr}
 8018b24:	4604      	mov	r4, r0
 8018b26:	4608      	mov	r0, r1
 8018b28:	4611      	mov	r1, r2
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018b30:	b089      	sub	sp, #36	; 0x24
 8018b32:	015b      	lsls	r3, r3, #5
 8018b34:	9304      	str	r3, [sp, #16]
 8018b36:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018b3a:	2500      	movs	r5, #0
 8018b3c:	015b      	lsls	r3, r3, #5
 8018b3e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8018b42:	ab07      	add	r3, sp, #28
 8018b44:	9302      	str	r3, [sp, #8]
 8018b46:	ab06      	add	r3, sp, #24
 8018b48:	9301      	str	r3, [sp, #4]
 8018b4a:	ab05      	add	r3, sp, #20
 8018b4c:	9300      	str	r3, [sp, #0]
 8018b4e:	ab04      	add	r3, sp, #16
 8018b50:	9505      	str	r5, [sp, #20]
 8018b52:	f7ff fece 	bl	80188f2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8018b56:	2520      	movs	r5, #32
 8018b58:	9a04      	ldr	r2, [sp, #16]
 8018b5a:	9805      	ldr	r0, [sp, #20]
 8018b5c:	fb92 f2f5 	sdiv	r2, r2, r5
 8018b60:	fb90 f0f5 	sdiv	r0, r0, r5
 8018b64:	b292      	uxth	r2, r2
 8018b66:	3002      	adds	r0, #2
 8018b68:	1a80      	subs	r0, r0, r2
 8018b6a:	9b06      	ldr	r3, [sp, #24]
 8018b6c:	9907      	ldr	r1, [sp, #28]
 8018b6e:	fb93 f3f5 	sdiv	r3, r3, r5
 8018b72:	fb91 f1f5 	sdiv	r1, r1, r5
 8018b76:	b29b      	uxth	r3, r3
 8018b78:	3102      	adds	r1, #2
 8018b7a:	1ac9      	subs	r1, r1, r3
 8018b7c:	3a01      	subs	r2, #1
 8018b7e:	3b01      	subs	r3, #1
 8018b80:	80a0      	strh	r0, [r4, #4]
 8018b82:	4620      	mov	r0, r4
 8018b84:	8022      	strh	r2, [r4, #0]
 8018b86:	8063      	strh	r3, [r4, #2]
 8018b88:	80e1      	strh	r1, [r4, #6]
 8018b8a:	b009      	add	sp, #36	; 0x24
 8018b8c:	bd30      	pop	{r4, r5, pc}

08018b8e <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8018b8e:	b510      	push	{r4, lr}
 8018b90:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8018b94:	4604      	mov	r4, r0
 8018b96:	f7ff ffc4 	bl	8018b22 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018b9a:	4620      	mov	r0, r4
 8018b9c:	bd10      	pop	{r4, pc}

08018b9e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8018b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ba0:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8018ba4:	4606      	mov	r6, r0
 8018ba6:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8018baa:	6813      	ldr	r3, [r2, #0]
 8018bac:	42a5      	cmp	r5, r4
 8018bae:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8018bb2:	da2b      	bge.n	8018c0c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8018bb4:	42a3      	cmp	r3, r4
 8018bb6:	dd14      	ble.n	8018be2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8018bb8:	b168      	cbz	r0, 8018bd6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018bba:	4267      	negs	r7, r4
 8018bbc:	fb97 f2f0 	sdiv	r2, r7, r0
 8018bc0:	fb00 7212 	mls	r2, r0, r2, r7
 8018bc4:	1a82      	subs	r2, r0, r2
 8018bc6:	fb92 f7f0 	sdiv	r7, r2, r0
 8018bca:	fb00 2017 	mls	r0, r0, r7, r2
 8018bce:	1a24      	subs	r4, r4, r0
 8018bd0:	42ac      	cmp	r4, r5
 8018bd2:	bfb8      	it	lt
 8018bd4:	462c      	movlt	r4, r5
 8018bd6:	4630      	mov	r0, r6
 8018bd8:	4622      	mov	r2, r4
 8018bda:	f7ff ffa2 	bl	8018b22 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018bde:	4630      	mov	r0, r6
 8018be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018be2:	42ab      	cmp	r3, r5
 8018be4:	dd0e      	ble.n	8018c04 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018be6:	b168      	cbz	r0, 8018c04 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018be8:	425f      	negs	r7, r3
 8018bea:	fb97 f2f0 	sdiv	r2, r7, r0
 8018bee:	fb00 7212 	mls	r2, r0, r2, r7
 8018bf2:	1a82      	subs	r2, r0, r2
 8018bf4:	fb92 f7f0 	sdiv	r7, r2, r0
 8018bf8:	fb00 2017 	mls	r0, r0, r7, r2
 8018bfc:	1a1b      	subs	r3, r3, r0
 8018bfe:	42ab      	cmp	r3, r5
 8018c00:	bfb8      	it	lt
 8018c02:	462b      	movlt	r3, r5
 8018c04:	4622      	mov	r2, r4
 8018c06:	461c      	mov	r4, r3
 8018c08:	4613      	mov	r3, r2
 8018c0a:	e7e4      	b.n	8018bd6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018c0c:	42a3      	cmp	r3, r4
 8018c0e:	da10      	bge.n	8018c32 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8018c10:	b148      	cbz	r0, 8018c26 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8018c12:	fb94 f2f0 	sdiv	r2, r4, r0
 8018c16:	fb00 4212 	mls	r2, r0, r2, r4
 8018c1a:	1a82      	subs	r2, r0, r2
 8018c1c:	fb92 f7f0 	sdiv	r7, r2, r0
 8018c20:	fb00 2017 	mls	r0, r0, r7, r2
 8018c24:	4404      	add	r4, r0
 8018c26:	42a5      	cmp	r5, r4
 8018c28:	bfa8      	it	ge
 8018c2a:	4625      	movge	r5, r4
 8018c2c:	461c      	mov	r4, r3
 8018c2e:	462b      	mov	r3, r5
 8018c30:	e7d1      	b.n	8018bd6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018c32:	42ab      	cmp	r3, r5
 8018c34:	dacf      	bge.n	8018bd6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d0cd      	beq.n	8018bd6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018c3a:	fb93 f2f0 	sdiv	r2, r3, r0
 8018c3e:	fb00 3212 	mls	r2, r0, r2, r3
 8018c42:	1a82      	subs	r2, r0, r2
 8018c44:	fb92 f7f0 	sdiv	r7, r2, r0
 8018c48:	fb00 2017 	mls	r0, r0, r7, r2
 8018c4c:	4403      	add	r3, r0
 8018c4e:	42ab      	cmp	r3, r5
 8018c50:	bfa8      	it	ge
 8018c52:	462b      	movge	r3, r5
 8018c54:	e7bf      	b.n	8018bd6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08018c56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8018c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018c5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018c5e:	b0ba      	sub	sp, #232	; 0xe8
 8018c60:	429a      	cmp	r2, r3
 8018c62:	9303      	str	r3, [sp, #12]
 8018c64:	9204      	str	r2, [sp, #16]
 8018c66:	bfb8      	it	lt
 8018c68:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8018c6c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018c70:	1a9b      	subs	r3, r3, r2
 8018c72:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018c76:	bfa2      	ittt	ge
 8018c78:	2200      	movge	r2, #0
 8018c7a:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018c7e:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8018c82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018c84:	4604      	mov	r4, r0
 8018c86:	460f      	mov	r7, r1
 8018c88:	ae0a      	add	r6, sp, #40	; 0x28
 8018c8a:	2a00      	cmp	r2, #0
 8018c8c:	d131      	bne.n	8018cf2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8018c8e:	463a      	mov	r2, r7
 8018c90:	4621      	mov	r1, r4
 8018c92:	a80b      	add	r0, sp, #44	; 0x2c
 8018c94:	f012 feaa 	bl	802b9ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018c98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018c9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c9c:	9205      	str	r2, [sp, #20]
 8018c9e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018ca2:	9306      	str	r3, [sp, #24]
 8018ca4:	dc6d      	bgt.n	8018d82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12c>
 8018ca6:	9b03      	ldr	r3, [sp, #12]
 8018ca8:	9307      	str	r3, [sp, #28]
 8018caa:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018cae:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8018cb2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8018cb8:	aa07      	add	r2, sp, #28
 8018cba:	4633      	mov	r3, r6
 8018cbc:	a90b      	add	r1, sp, #44	; 0x2c
 8018cbe:	4620      	mov	r0, r4
 8018cc0:	016d      	lsls	r5, r5, #5
 8018cc2:	f7ff fd6b 	bl	801879c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018cc6:	9f07      	ldr	r7, [sp, #28]
 8018cc8:	2d00      	cmp	r5, #0
 8018cca:	d163      	bne.n	8018d94 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
 8018ccc:	3720      	adds	r7, #32
 8018cce:	9a04      	ldr	r2, [sp, #16]
 8018cd0:	9b06      	ldr	r3, [sp, #24]
 8018cd2:	4639      	mov	r1, r7
 8018cd4:	4291      	cmp	r1, r2
 8018cd6:	442f      	add	r7, r5
 8018cd8:	dc69      	bgt.n	8018dae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x158>
 8018cda:	9a05      	ldr	r2, [sp, #20]
 8018cdc:	9107      	str	r1, [sp, #28]
 8018cde:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8018ce4:	aa07      	add	r2, sp, #28
 8018ce6:	4633      	mov	r3, r6
 8018ce8:	a90b      	add	r1, sp, #44	; 0x2c
 8018cea:	4620      	mov	r0, r4
 8018cec:	f7ff fda8 	bl	8018840 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018cf0:	e7ed      	b.n	8018cce <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018cf2:	f9b1 c000 	ldrsh.w	ip, [r1]
 8018cf6:	88bd      	ldrh	r5, [r7, #4]
 8018cf8:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8018cfc:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8018d00:	4465      	add	r5, ip
 8018d02:	b22d      	sxth	r5, r5
 8018d04:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8018d08:	2d00      	cmp	r5, #0
 8018d0a:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8018d0e:	bfb8      	it	lt
 8018d10:	426d      	neglt	r5, r5
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	bfb8      	it	lt
 8018d16:	425b      	neglt	r3, r3
 8018d18:	429d      	cmp	r5, r3
 8018d1a:	bfb8      	it	lt
 8018d1c:	461d      	movlt	r5, r3
 8018d1e:	88fb      	ldrh	r3, [r7, #6]
 8018d20:	4403      	add	r3, r0
 8018d22:	b21b      	sxth	r3, r3
 8018d24:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8018d2e:	bfb8      	it	lt
 8018d30:	425b      	neglt	r3, r3
 8018d32:	2900      	cmp	r1, #0
 8018d34:	bfb8      	it	lt
 8018d36:	4249      	neglt	r1, r1
 8018d38:	428b      	cmp	r3, r1
 8018d3a:	bfb8      	it	lt
 8018d3c:	460b      	movlt	r3, r1
 8018d3e:	115b      	asrs	r3, r3, #5
 8018d40:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8018d44:	116d      	asrs	r5, r5, #5
 8018d46:	3301      	adds	r3, #1
 8018d48:	435b      	muls	r3, r3
 8018d4a:	3501      	adds	r5, #1
 8018d4c:	fb05 3505 	mla	r5, r5, r5, r3
 8018d50:	3001      	adds	r0, #1
 8018d52:	2302      	movs	r3, #2
 8018d54:	fb92 f2f3 	sdiv	r2, r2, r3
 8018d58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018d5a:	1040      	asrs	r0, r0, #1
 8018d5c:	1a9a      	subs	r2, r3, r2
 8018d5e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018d62:	920a      	str	r2, [sp, #40]	; 0x28
 8018d64:	f7ff fcb8 	bl	80186d8 <_ZN8touchgfx7CWRUtil4sineEi>
 8018d68:	a90b      	add	r1, sp, #44	; 0x2c
 8018d6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	f7ff fca7 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d72:	2320      	movs	r3, #32
 8018d74:	fb90 f0f3 	sdiv	r0, r0, r3
 8018d78:	4340      	muls	r0, r0
 8018d7a:	42a8      	cmp	r0, r5
 8018d7c:	dd87      	ble.n	8018c8e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8018d7e:	2401      	movs	r4, #1
 8018d80:	e037      	b.n	8018df2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19c>
 8018d82:	2102      	movs	r1, #2
 8018d84:	fb93 f3f1 	sdiv	r3, r3, r1
 8018d88:	4413      	add	r3, r2
 8018d8a:	9306      	str	r3, [sp, #24]
 8018d8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8018d90:	9305      	str	r3, [sp, #20]
 8018d92:	e788      	b.n	8018ca6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8018d94:	f107 0320 	add.w	r3, r7, #32
 8018d98:	fb93 f7f5 	sdiv	r7, r3, r5
 8018d9c:	fb05 3717 	mls	r7, r5, r7, r3
 8018da0:	1bea      	subs	r2, r5, r7
 8018da2:	fb92 f7f5 	sdiv	r7, r2, r5
 8018da6:	fb05 2717 	mls	r7, r5, r7, r2
 8018daa:	441f      	add	r7, r3
 8018dac:	e78f      	b.n	8018cce <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018dae:	9907      	ldr	r1, [sp, #28]
 8018db0:	428a      	cmp	r2, r1
 8018db2:	dd09      	ble.n	8018dc8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 8018db4:	9a05      	ldr	r2, [sp, #20]
 8018db6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018dba:	930a      	str	r3, [sp, #40]	; 0x28
 8018dbc:	aa04      	add	r2, sp, #16
 8018dbe:	4633      	mov	r3, r6
 8018dc0:	a90b      	add	r1, sp, #44	; 0x2c
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f7ff fd3c 	bl	8018840 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018dc8:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8018dcc:	9a06      	ldr	r2, [sp, #24]
 8018dce:	1ac3      	subs	r3, r0, r3
 8018dd0:	b99a      	cbnz	r2, 8018dfa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a4>
 8018dd2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018dd6:	da04      	bge.n	8018de2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018dd8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8018ddc:	a80b      	add	r0, sp, #44	; 0x2c
 8018dde:	f012 ff5f 	bl	802bca0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018de2:	21ff      	movs	r1, #255	; 0xff
 8018de4:	a80b      	add	r0, sp, #44	; 0x2c
 8018de6:	f013 f8d0 	bl	802bf8a <_ZN8touchgfx6Canvas6renderEh>
 8018dea:	4604      	mov	r4, r0
 8018dec:	a80b      	add	r0, sp, #44	; 0x2c
 8018dee:	f013 f90b 	bl	802c008 <_ZN8touchgfx6CanvasD1Ev>
 8018df2:	4620      	mov	r0, r4
 8018df4:	b03a      	add	sp, #232	; 0xe8
 8018df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dfa:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8018dfe:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018e02:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8018e06:	da2b      	bge.n	8018e60 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018e08:	f7ff fc88 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018e0c:	4631      	mov	r1, r6
 8018e0e:	900a      	str	r0, [sp, #40]	; 0x28
 8018e10:	a805      	add	r0, sp, #20
 8018e12:	f7ff fc55 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018e18:	4418      	add	r0, r3
 8018e1a:	9008      	str	r0, [sp, #32]
 8018e1c:	9804      	ldr	r0, [sp, #16]
 8018e1e:	f7ff fc9e 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018e22:	4631      	mov	r1, r6
 8018e24:	900a      	str	r0, [sp, #40]	; 0x28
 8018e26:	a805      	add	r0, sp, #20
 8018e28:	f7ff fc4a 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e2e:	1a18      	subs	r0, r3, r0
 8018e30:	9b04      	ldr	r3, [sp, #16]
 8018e32:	9009      	str	r0, [sp, #36]	; 0x24
 8018e34:	443b      	add	r3, r7
 8018e36:	930a      	str	r3, [sp, #40]	; 0x28
 8018e38:	f10d 0818 	add.w	r8, sp, #24
 8018e3c:	9b04      	ldr	r3, [sp, #16]
 8018e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e40:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8018e44:	4293      	cmp	r3, r2
 8018e46:	dd0b      	ble.n	8018e60 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018e48:	ab09      	add	r3, sp, #36	; 0x24
 8018e4a:	e9cd 6800 	strd	r6, r8, [sp]
 8018e4e:	aa08      	add	r2, sp, #32
 8018e50:	a90b      	add	r1, sp, #44	; 0x2c
 8018e52:	4620      	mov	r0, r4
 8018e54:	f7ff fccb 	bl	80187ee <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e5a:	443b      	add	r3, r7
 8018e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8018e5e:	e7ed      	b.n	8018e3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e6>
 8018e60:	9a04      	ldr	r2, [sp, #16]
 8018e62:	9b07      	ldr	r3, [sp, #28]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	dd0a      	ble.n	8018e7e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x228>
 8018e68:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018e6c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e70:	930a      	str	r3, [sp, #40]	; 0x28
 8018e72:	aa04      	add	r2, sp, #16
 8018e74:	4633      	mov	r3, r6
 8018e76:	a90b      	add	r1, sp, #44	; 0x2c
 8018e78:	4620      	mov	r0, r4
 8018e7a:	f7ff fce1 	bl	8018840 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018e7e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018e82:	9b03      	ldr	r3, [sp, #12]
 8018e84:	4642      	mov	r2, r8
 8018e86:	429a      	cmp	r2, r3
 8018e88:	eba8 0805 	sub.w	r8, r8, r5
 8018e8c:	db0c      	blt.n	8018ea8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x252>
 8018e8e:	9207      	str	r2, [sp, #28]
 8018e90:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018e94:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e98:	930a      	str	r3, [sp, #40]	; 0x28
 8018e9a:	aa07      	add	r2, sp, #28
 8018e9c:	4633      	mov	r3, r6
 8018e9e:	a90b      	add	r1, sp, #44	; 0x2c
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	f7ff fccd 	bl	8018840 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018ea6:	e7ec      	b.n	8018e82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8018ea8:	9a07      	ldr	r2, [sp, #28]
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	da0a      	bge.n	8018ec4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x26e>
 8018eae:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018eb2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8018eb8:	aa03      	add	r2, sp, #12
 8018eba:	4633      	mov	r3, r6
 8018ebc:	a90b      	add	r1, sp, #44	; 0x2c
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	f7ff fcbe 	bl	8018840 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018ec4:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8018ec8:	1a1b      	subs	r3, r3, r0
 8018eca:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018ece:	da88      	bge.n	8018de2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018ed0:	f7ff fc24 	bl	801871c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018ed4:	4631      	mov	r1, r6
 8018ed6:	900a      	str	r0, [sp, #40]	; 0x28
 8018ed8:	a805      	add	r0, sp, #20
 8018eda:	f7ff fbf1 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ede:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018ee0:	4418      	add	r0, r3
 8018ee2:	9008      	str	r0, [sp, #32]
 8018ee4:	9803      	ldr	r0, [sp, #12]
 8018ee6:	f7ff fc3a 	bl	801875e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018eea:	4631      	mov	r1, r6
 8018eec:	900a      	str	r0, [sp, #40]	; 0x28
 8018eee:	a805      	add	r0, sp, #20
 8018ef0:	f7ff fbe6 	bl	80186c0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018ef6:	1a18      	subs	r0, r3, r0
 8018ef8:	9b03      	ldr	r3, [sp, #12]
 8018efa:	9009      	str	r0, [sp, #36]	; 0x24
 8018efc:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8018f00:	443b      	add	r3, r7
 8018f02:	930a      	str	r3, [sp, #40]	; 0x28
 8018f04:	ad06      	add	r5, sp, #24
 8018f06:	9a03      	ldr	r2, [sp, #12]
 8018f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	f77f af69 	ble.w	8018de2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018f10:	ab09      	add	r3, sp, #36	; 0x24
 8018f12:	e9cd 6500 	strd	r6, r5, [sp]
 8018f16:	aa08      	add	r2, sp, #32
 8018f18:	a90b      	add	r1, sp, #44	; 0x2c
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	f7ff fc67 	bl	80187ee <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f22:	443b      	add	r3, r7
 8018f24:	930a      	str	r3, [sp, #40]	; 0x28
 8018f26:	e7ee      	b.n	8018f06 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b0>

08018f28 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8018f28:	6281      	str	r1, [r0, #40]	; 0x28
 8018f2a:	4770      	bx	lr

08018f2c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8018f2c:	b510      	push	{r4, lr}
 8018f2e:	2200      	movs	r2, #0
 8018f30:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018f34:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8018f38:	8002      	strh	r2, [r0, #0]
 8018f3a:	8042      	strh	r2, [r0, #2]
 8018f3c:	8084      	strh	r4, [r0, #4]
 8018f3e:	80c1      	strh	r1, [r0, #6]
 8018f40:	bd10      	pop	{r4, pc}

08018f42 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018f42:	2200      	movs	r2, #0
 8018f44:	8002      	strh	r2, [r0, #0]
 8018f46:	8042      	strh	r2, [r0, #2]
 8018f48:	8082      	strh	r2, [r0, #4]
 8018f4a:	80c2      	strh	r2, [r0, #6]
 8018f4c:	4770      	bx	lr
	...

08018f50 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8018f50:	b508      	push	{r3, lr}
 8018f52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018f54:	b928      	cbnz	r0, 8018f62 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8018f56:	4b03      	ldr	r3, [pc, #12]	; (8018f64 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8018f58:	4a03      	ldr	r2, [pc, #12]	; (8018f68 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8018f5a:	4804      	ldr	r0, [pc, #16]	; (8018f6c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8018f5c:	2126      	movs	r1, #38	; 0x26
 8018f5e:	f014 ffdf 	bl	802df20 <__assert_func>
 8018f62:	bd08      	pop	{r3, pc}
 8018f64:	080315dc 	.word	0x080315dc
 8018f68:	080316bc 	.word	0x080316bc
 8018f6c:	08031603 	.word	0x08031603

08018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018f70:	b510      	push	{r4, lr}
 8018f72:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018f76:	888a      	ldrh	r2, [r1, #4]
 8018f78:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018f7c:	4422      	add	r2, r4
 8018f7e:	b212      	sxth	r2, r2
 8018f80:	4293      	cmp	r3, r2
 8018f82:	da15      	bge.n	8018fb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f84:	8882      	ldrh	r2, [r0, #4]
 8018f86:	4413      	add	r3, r2
 8018f88:	b21b      	sxth	r3, r3
 8018f8a:	429c      	cmp	r4, r3
 8018f8c:	da10      	bge.n	8018fb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f8e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018f92:	88c9      	ldrh	r1, [r1, #6]
 8018f94:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018f98:	4419      	add	r1, r3
 8018f9a:	b209      	sxth	r1, r1
 8018f9c:	428a      	cmp	r2, r1
 8018f9e:	da07      	bge.n	8018fb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018fa0:	88c0      	ldrh	r0, [r0, #6]
 8018fa2:	4410      	add	r0, r2
 8018fa4:	b200      	sxth	r0, r0
 8018fa6:	4283      	cmp	r3, r0
 8018fa8:	bfac      	ite	ge
 8018faa:	2000      	movge	r0, #0
 8018fac:	2001      	movlt	r0, #1
 8018fae:	bd10      	pop	{r4, pc}
 8018fb0:	2000      	movs	r0, #0
 8018fb2:	e7fc      	b.n	8018fae <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018fb4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	4604      	mov	r4, r0
 8018fba:	b08b      	sub	sp, #44	; 0x2c
 8018fbc:	6808      	ldr	r0, [r1, #0]
 8018fbe:	6849      	ldr	r1, [r1, #4]
 8018fc0:	ab04      	add	r3, sp, #16
 8018fc2:	c303      	stmia	r3!, {r0, r1}
 8018fc4:	4b37      	ldr	r3, [pc, #220]	; (80190a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	2b01      	cmp	r3, #1
 8018fca:	6823      	ldr	r3, [r4, #0]
 8018fcc:	4621      	mov	r1, r4
 8018fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fd0:	a806      	add	r0, sp, #24
 8018fd2:	bf1f      	itttt	ne
 8018fd4:	f10d 090e 	addne.w	r9, sp, #14
 8018fd8:	ae05      	addne	r6, sp, #20
 8018fda:	f10d 0516 	addne.w	r5, sp, #22
 8018fde:	f10d 0812 	addne.w	r8, sp, #18
 8018fe2:	bf01      	itttt	eq
 8018fe4:	f10d 0916 	addeq.w	r9, sp, #22
 8018fe8:	f10d 060e 	addeq.w	r6, sp, #14
 8018fec:	ad05      	addeq	r5, sp, #20
 8018fee:	f10d 0810 	addeq.w	r8, sp, #16
 8018ff2:	4798      	blx	r3
 8018ff4:	f04f 0a00 	mov.w	sl, #0
 8018ff8:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8018ffc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8019000:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019004:	2b00      	cmp	r3, #0
 8019006:	d042      	beq.n	801908e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8019008:	4293      	cmp	r3, r2
 801900a:	bfa8      	it	ge
 801900c:	4613      	movge	r3, r2
 801900e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019012:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019016:	2f00      	cmp	r7, #0
 8019018:	dd21      	ble.n	801905e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 801901a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801901e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8019022:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019026:	f9b9 3000 	ldrsh.w	r3, [r9]
 801902a:	f8ad 0020 	strh.w	r0, [sp, #32]
 801902e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8019032:	a808      	add	r0, sp, #32
 8019034:	a906      	add	r1, sp, #24
 8019036:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801903a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801903e:	f7ff ff97 	bl	8018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019042:	9001      	str	r0, [sp, #4]
 8019044:	b1d0      	cbz	r0, 801907c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8019046:	6822      	ldr	r2, [r4, #0]
 8019048:	a908      	add	r1, sp, #32
 801904a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801904c:	4620      	mov	r0, r4
 801904e:	4790      	blx	r2
 8019050:	b9a0      	cbnz	r0, 801907c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8019052:	9b01      	ldr	r3, [sp, #4]
 8019054:	107f      	asrs	r7, r7, #1
 8019056:	f8ad 700e 	strh.w	r7, [sp, #14]
 801905a:	469a      	mov	sl, r3
 801905c:	e7d9      	b.n	8019012 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801905e:	d10d      	bne.n	801907c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8019060:	2301      	movs	r3, #1
 8019062:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019066:	f8b8 2000 	ldrh.w	r2, [r8]
 801906a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801906e:	440a      	add	r2, r1
 8019070:	f8a8 2000 	strh.w	r2, [r8]
 8019074:	882b      	ldrh	r3, [r5, #0]
 8019076:	1a5b      	subs	r3, r3, r1
 8019078:	802b      	strh	r3, [r5, #0]
 801907a:	e7bf      	b.n	8018ffc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801907c:	f1ba 0f00 	cmp.w	sl, #0
 8019080:	d0f1      	beq.n	8019066 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8019082:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8019086:	455b      	cmp	r3, fp
 8019088:	bf08      	it	eq
 801908a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801908c:	e7eb      	b.n	8019066 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801908e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019092:	429a      	cmp	r2, r3
 8019094:	bf04      	itt	eq
 8019096:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801909a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801909c:	b00b      	add	sp, #44	; 0x2c
 801909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190a2:	bf00      	nop
 80190a4:	200097a0 	.word	0x200097a0

080190a8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80190a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190aa:	6803      	ldr	r3, [r0, #0]
 80190ac:	b085      	sub	sp, #20
 80190ae:	4604      	mov	r4, r0
 80190b0:	4601      	mov	r1, r0
 80190b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190b4:	4668      	mov	r0, sp
 80190b6:	4798      	blx	r3
 80190b8:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 80190bc:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 80190c0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80190c4:	2300      	movs	r3, #0
 80190c6:	a902      	add	r1, sp, #8
 80190c8:	4668      	mov	r0, sp
 80190ca:	9302      	str	r3, [sp, #8]
 80190cc:	f8ad 500e 	strh.w	r5, [sp, #14]
 80190d0:	f7ff ff4e 	bl	8018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80190d4:	b340      	cbz	r0, 8019128 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 80190d6:	f9bd 2000 	ldrsh.w	r2, [sp]
 80190da:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 80190de:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80190e2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80190e6:	443a      	add	r2, r7
 80190e8:	b292      	uxth	r2, r2
 80190ea:	b217      	sxth	r7, r2
 80190ec:	42be      	cmp	r6, r7
 80190ee:	bfd8      	it	le
 80190f0:	b2b2      	uxthle	r2, r6
 80190f2:	1a12      	subs	r2, r2, r0
 80190f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80190f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80190fc:	f8ad 0000 	strh.w	r0, [sp]
 8019100:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8019104:	4413      	add	r3, r2
 8019106:	b29b      	uxth	r3, r3
 8019108:	b21a      	sxth	r2, r3
 801910a:	4295      	cmp	r5, r2
 801910c:	bfd8      	it	le
 801910e:	b2ab      	uxthle	r3, r5
 8019110:	1a5b      	subs	r3, r3, r1
 8019112:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019116:	f8ad 1002 	strh.w	r1, [sp, #2]
 801911a:	6823      	ldr	r3, [r4, #0]
 801911c:	4669      	mov	r1, sp
 801911e:	691b      	ldr	r3, [r3, #16]
 8019120:	4620      	mov	r0, r4
 8019122:	4798      	blx	r3
 8019124:	b005      	add	sp, #20
 8019126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019128:	e9cd 0000 	strd	r0, r0, [sp]
 801912c:	e7f5      	b.n	801911a <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08019130 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019130:	2200      	movs	r2, #0
 8019132:	8082      	strh	r2, [r0, #4]
 8019134:	80c2      	strh	r2, [r0, #6]
 8019136:	8102      	strh	r2, [r0, #8]
 8019138:	8142      	strh	r2, [r0, #10]
 801913a:	8182      	strh	r2, [r0, #12]
 801913c:	81c2      	strh	r2, [r0, #14]
 801913e:	8202      	strh	r2, [r0, #16]
 8019140:	8242      	strh	r2, [r0, #18]
 8019142:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019146:	61c2      	str	r2, [r0, #28]
 8019148:	8402      	strh	r2, [r0, #32]
 801914a:	8442      	strh	r2, [r0, #34]	; 0x22
 801914c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019150:	2101      	movs	r1, #1
 8019152:	6282      	str	r2, [r0, #40]	; 0x28
 8019154:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019158:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801915c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801915e:	4903      	ldr	r1, [pc, #12]	; (801916c <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8019160:	6001      	str	r1, [r0, #0]
 8019162:	22ff      	movs	r2, #255	; 0xff
 8019164:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019168:	4770      	bx	lr
 801916a:	bf00      	nop
 801916c:	08031648 	.word	0x08031648

08019170 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8019170:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019174:	4770      	bx	lr

08019176 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8019176:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801917a:	4770      	bx	lr

0801917c <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 801917c:	6802      	ldr	r2, [r0, #0]
 801917e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019182:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019184:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019188:	4710      	bx	r2

0801918a <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 801918a:	6802      	ldr	r2, [r0, #0]
 801918c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019190:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019192:	eef0 0a40 	vmov.f32	s1, s0
 8019196:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801919a:	4710      	bx	r2

0801919c <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 801919c:	6802      	ldr	r2, [r0, #0]
 801919e:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80191a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80191a4:	eeb0 1a40 	vmov.f32	s2, s0
 80191a8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80191ac:	4710      	bx	r2

080191ae <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 80191ae:	6802      	ldr	r2, [r0, #0]
 80191b0:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80191b4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80191b6:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80191ba:	4710      	bx	r2

080191bc <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 80191bc:	6802      	ldr	r2, [r0, #0]
 80191be:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80191c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80191c4:	eef0 0a40 	vmov.f32	s1, s0
 80191c8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80191cc:	4710      	bx	r2

080191ce <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 80191ce:	6802      	ldr	r2, [r0, #0]
 80191d0:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80191d4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80191d6:	eeb0 1a40 	vmov.f32	s2, s0
 80191da:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80191de:	4710      	bx	r2

080191e0 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 80191e0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80191e4:	4770      	bx	lr

080191e6 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 80191e6:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 80191ea:	4770      	bx	lr

080191ec <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 80191ec:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 80191f0:	4770      	bx	lr

080191f2 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 80191f2:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 80191f6:	4770      	bx	lr

080191f8 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 80191f8:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 80191fc:	4770      	bx	lr

080191fe <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 80191fe:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8019202:	4770      	bx	lr

08019204 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8019204:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8019208:	4770      	bx	lr

0801920a <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 801920a:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 801920e:	4770      	bx	lr

08019210 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8019210:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8019214:	4770      	bx	lr

08019216 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8019216:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 801921a:	4770      	bx	lr

0801921c <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 801921c:	ee07 2a90 	vmov	s15, r2
 8019220:	6803      	ldr	r3, [r0, #0]
 8019222:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019226:	ee07 1a90 	vmov	s15, r1
 801922a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801922e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019232:	4718      	bx	r3

08019234 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8019234:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8019238:	4770      	bx	lr

0801923a <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 801923a:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801923e:	4770      	bx	lr

08019240 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8019240:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 8019244:	4770      	bx	lr

08019246 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8019246:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 801924a:	4770      	bx	lr

0801924c <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 801924c:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8019250:	4770      	bx	lr

08019252 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8019252:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8019256:	4770      	bx	lr

08019258 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8019258:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 801925c:	4770      	bx	lr

0801925e <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 801925e:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8019262:	4770      	bx	lr

08019264 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8019264:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8019268:	4770      	bx	lr

0801926a <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 801926a:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 801926e:	4770      	bx	lr

08019270 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8019270:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8019274:	4770      	bx	lr

08019276 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8019276:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 801927a:	4770      	bx	lr

0801927c <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 801927c:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8019280:	4770      	bx	lr

08019282 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8019282:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8019286:	4770      	bx	lr

08019288 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8019288:	2200      	movs	r2, #0
 801928a:	8002      	strh	r2, [r0, #0]
 801928c:	8042      	strh	r2, [r0, #2]
 801928e:	8082      	strh	r2, [r0, #4]
 8019290:	80c2      	strh	r2, [r0, #6]
 8019292:	4770      	bx	lr

08019294 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	2500      	movs	r5, #0
 8019298:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801929c:	2301      	movs	r3, #1
 801929e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80192a2:	4b1f      	ldr	r3, [pc, #124]	; (8019320 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80192a4:	8085      	strh	r5, [r0, #4]
 80192a6:	80c5      	strh	r5, [r0, #6]
 80192a8:	8105      	strh	r5, [r0, #8]
 80192aa:	8145      	strh	r5, [r0, #10]
 80192ac:	8185      	strh	r5, [r0, #12]
 80192ae:	81c5      	strh	r5, [r0, #14]
 80192b0:	8205      	strh	r5, [r0, #16]
 80192b2:	8245      	strh	r5, [r0, #18]
 80192b4:	61c5      	str	r5, [r0, #28]
 80192b6:	8405      	strh	r5, [r0, #32]
 80192b8:	8445      	strh	r5, [r0, #34]	; 0x22
 80192ba:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80192be:	6003      	str	r3, [r0, #0]
 80192c0:	880b      	ldrh	r3, [r1, #0]
 80192c2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80192c4:	23ff      	movs	r3, #255	; 0xff
 80192c6:	4604      	mov	r4, r0
 80192c8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80192cc:	f001 fa02 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80192d0:	4b14      	ldr	r3, [pc, #80]	; (8019324 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80192d2:	6023      	str	r3, [r4, #0]
 80192d4:	2300      	movs	r3, #0
 80192d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80192da:	4913      	ldr	r1, [pc, #76]	; (8019328 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 80192dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80192de:	6323      	str	r3, [r4, #48]	; 0x30
 80192e0:	6363      	str	r3, [r4, #52]	; 0x34
 80192e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80192e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80192e6:	6463      	str	r3, [r4, #68]	; 0x44
 80192e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80192ea:	6523      	str	r3, [r4, #80]	; 0x50
 80192ec:	6563      	str	r3, [r4, #84]	; 0x54
 80192ee:	65e3      	str	r3, [r4, #92]	; 0x5c
 80192f0:	6623      	str	r3, [r4, #96]	; 0x60
 80192f2:	66a3      	str	r3, [r4, #104]	; 0x68
 80192f4:	66e3      	str	r3, [r4, #108]	; 0x6c
 80192f6:	6763      	str	r3, [r4, #116]	; 0x74
 80192f8:	67a3      	str	r3, [r4, #120]	; 0x78
 80192fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80192fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8019302:	230c      	movs	r3, #12
 8019304:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8019308:	6422      	str	r2, [r4, #64]	; 0x40
 801930a:	64e1      	str	r1, [r4, #76]	; 0x4c
 801930c:	65a1      	str	r1, [r4, #88]	; 0x58
 801930e:	6662      	str	r2, [r4, #100]	; 0x64
 8019310:	6722      	str	r2, [r4, #112]	; 0x70
 8019312:	67e2      	str	r2, [r4, #124]	; 0x7c
 8019314:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8019318:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 801931c:	4620      	mov	r0, r4
 801931e:	bd38      	pop	{r3, r4, r5, pc}
 8019320:	08031bfc 	.word	0x08031bfc
 8019324:	08031714 	.word	0x08031714
 8019328:	447a0000 	.word	0x447a0000

0801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 801932c:	b570      	push	{r4, r5, r6, lr}
 801932e:	ed2d 8b04 	vpush	{d8-d9}
 8019332:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8019336:	add0      	add	r5, sp, #832	; 0x340
 8019338:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801933a:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801933e:	4604      	mov	r4, r0
 8019340:	4628      	mov	r0, r5
 8019342:	f006 fad5 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019346:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019348:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 801934c:	4606      	mov	r6, r0
 801934e:	4628      	mov	r0, r5
 8019350:	f006 fb08 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019354:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019358:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801935c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801935e:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8019362:	9312      	str	r3, [sp, #72]	; 0x48
 8019364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019368:	1c72      	adds	r2, r6, #1
 801936a:	3001      	adds	r0, #1
 801936c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8019370:	ee07 2a90 	vmov	s15, r2
 8019374:	ee06 0a90 	vmov	s13, r0
 8019378:	ee36 6a47 	vsub.f32	s12, s12, s14
 801937c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019380:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019384:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019388:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801938c:	9316      	str	r3, [sp, #88]	; 0x58
 801938e:	931a      	str	r3, [sp, #104]	; 0x68
 8019390:	931e      	str	r3, [sp, #120]	; 0x78
 8019392:	2300      	movs	r3, #0
 8019394:	9320      	str	r3, [sp, #128]	; 0x80
 8019396:	9321      	str	r3, [sp, #132]	; 0x84
 8019398:	9322      	str	r3, [sp, #136]	; 0x88
 801939a:	9324      	str	r3, [sp, #144]	; 0x90
 801939c:	9325      	str	r3, [sp, #148]	; 0x94
 801939e:	9326      	str	r3, [sp, #152]	; 0x98
 80193a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80193a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80193a4:	932a      	str	r3, [sp, #168]	; 0xa8
 80193a6:	932c      	str	r3, [sp, #176]	; 0xb0
 80193a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80193aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80193ac:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80193b0:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 80193b4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 80193b8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 80193bc:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 80193c0:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 80193c4:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 80193c8:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 80193cc:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 80193d0:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80193d4:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80193d8:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 80193dc:	a830      	add	r0, sp, #192	; 0xc0
 80193de:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 80193e2:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80193e6:	f005 f935 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193ea:	eeb1 0a49 	vneg.f32	s0, s18
 80193ee:	a830      	add	r0, sp, #192	; 0xc0
 80193f0:	f005 fa04 	bl	801e7fc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80193f4:	eeb1 0a68 	vneg.f32	s0, s17
 80193f8:	f005 fa0e 	bl	801e818 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80193fc:	eeb1 0a48 	vneg.f32	s0, s16
 8019400:	f005 fa19 	bl	801e836 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8019404:	a840      	add	r0, sp, #256	; 0x100
 8019406:	f005 f925 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 801940a:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 801940e:	a840      	add	r0, sp, #256	; 0x100
 8019410:	f005 f978 	bl	801e704 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8019414:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8019418:	f005 f99e 	bl	801e758 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 801941c:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8019420:	f005 f9c3 	bl	801e7aa <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8019424:	a850      	add	r0, sp, #320	; 0x140
 8019426:	f005 f915 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 801942a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801942e:	a850      	add	r0, sp, #320	; 0x140
 8019430:	f005 fa10 	bl	801e854 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8019434:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019438:	f005 fa18 	bl	801e86c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801943c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019440:	f005 fa21 	bl	801e886 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8019444:	a860      	add	r0, sp, #384	; 0x180
 8019446:	f005 f905 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 801944a:	eeb0 0a49 	vmov.f32	s0, s18
 801944e:	a860      	add	r0, sp, #384	; 0x180
 8019450:	f005 f9d4 	bl	801e7fc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019454:	eeb0 0a68 	vmov.f32	s0, s17
 8019458:	f005 f9de 	bl	801e818 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801945c:	eeb0 0a48 	vmov.f32	s0, s16
 8019460:	f005 f9e9 	bl	801e836 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8019464:	aa50      	add	r2, sp, #320	; 0x140
 8019466:	a960      	add	r1, sp, #384	; 0x180
 8019468:	a8b0      	add	r0, sp, #704	; 0x2c0
 801946a:	f005 f90d 	bl	801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801946e:	4628      	mov	r0, r5
 8019470:	aa40      	add	r2, sp, #256	; 0x100
 8019472:	a9b0      	add	r1, sp, #704	; 0x2c0
 8019474:	f005 f908 	bl	801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019478:	4629      	mov	r1, r5
 801947a:	aa30      	add	r2, sp, #192	; 0xc0
 801947c:	a870      	add	r0, sp, #448	; 0x1c0
 801947e:	f005 f903 	bl	801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019482:	a880      	add	r0, sp, #512	; 0x200
 8019484:	f005 f8e6 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019488:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801948c:	a880      	add	r0, sp, #512	; 0x200
 801948e:	eeb1 0a40 	vneg.f32	s0, s0
 8019492:	f005 f9b3 	bl	801e7fc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019496:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801949a:	a880      	add	r0, sp, #512	; 0x200
 801949c:	eeb1 0a40 	vneg.f32	s0, s0
 80194a0:	f005 f9ba 	bl	801e818 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80194a4:	a890      	add	r0, sp, #576	; 0x240
 80194a6:	f005 f8d5 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 80194aa:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 80194ae:	a890      	add	r0, sp, #576	; 0x240
 80194b0:	f005 f918 	bl	801e6e4 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 80194b4:	a8a0      	add	r0, sp, #640	; 0x280
 80194b6:	f005 f8cd 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 80194ba:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 80194be:	a8a0      	add	r0, sp, #640	; 0x280
 80194c0:	f005 f99c 	bl	801e7fc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80194c4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 80194c8:	f005 f9a6 	bl	801e818 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80194cc:	aa90      	add	r2, sp, #576	; 0x240
 80194ce:	a9a0      	add	r1, sp, #640	; 0x280
 80194d0:	a8b0      	add	r0, sp, #704	; 0x2c0
 80194d2:	f005 f8d9 	bl	801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80194d6:	4628      	mov	r0, r5
 80194d8:	aa80      	add	r2, sp, #512	; 0x200
 80194da:	a9b0      	add	r1, sp, #704	; 0x2c0
 80194dc:	f005 f8d4 	bl	801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80194e0:	4629      	mov	r1, r5
 80194e2:	aa70      	add	r2, sp, #448	; 0x1c0
 80194e4:	4668      	mov	r0, sp
 80194e6:	466d      	mov	r5, sp
 80194e8:	f005 f8ce 	bl	801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80194ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194ee:	ae70      	add	r6, sp, #448	; 0x1c0
 80194f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80194f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80194f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80194fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80194fe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8019502:	2500      	movs	r5, #0
 8019504:	0129      	lsls	r1, r5, #4
 8019506:	ab20      	add	r3, sp, #128	; 0x80
 8019508:	185e      	adds	r6, r3, r1
 801950a:	ab10      	add	r3, sp, #64	; 0x40
 801950c:	4419      	add	r1, r3
 801950e:	a870      	add	r0, sp, #448	; 0x1c0
 8019510:	f005 f870 	bl	801e5f4 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8019514:	3501      	adds	r5, #1
 8019516:	2d04      	cmp	r5, #4
 8019518:	ed86 0a00 	vstr	s0, [r6]
 801951c:	edc6 0a01 	vstr	s1, [r6, #4]
 8019520:	ed86 1a02 	vstr	s2, [r6, #8]
 8019524:	edc6 1a03 	vstr	s3, [r6, #12]
 8019528:	d1ec      	bne.n	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 801952a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 801952e:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8019532:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8019536:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801953a:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 801953e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019542:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8019546:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 801954a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801954e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019552:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8019556:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801955a:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 801955e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019562:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8019566:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801956a:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801956e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 8019572:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019576:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801957a:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801957e:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 8019582:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8019586:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801958a:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801958e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019592:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8019596:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 801959a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801959e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80195a2:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 80195a6:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 80195aa:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 80195ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80195b2:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 80195b6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80195ba:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80195be:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 80195c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80195ca:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 80195ce:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 80195d2:	ecbd 8b04 	vpop	{d8-d9}
 80195d6:	bd70      	pop	{r4, r5, r6, pc}

080195d8 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	4604      	mov	r4, r0
 80195dc:	f001 f87a 	bl	801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80195e0:	4620      	mov	r0, r4
 80195e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195e6:	f7ff bea1 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195ea <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80195ea:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 80195ee:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 80195f2:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 80195f6:	f7ff be99 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195fa <_ZN8touchgfx13TextureMapper8setScaleEf>:
 80195fa:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 80195fe:	f7ff be95 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019602 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8019602:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8019606:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 801960a:	f7ff be8f 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801960e <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801960e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019612:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801961a:	bfd8      	it	le
 801961c:	eeb0 0a67 	vmovle.f32	s0, s15
 8019620:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 8019624:	f7ff be82 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019628 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8019628:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 801962c:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 8019630:	f7ff be7c 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019634 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8019634:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8019638:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801963c:	f7ff be76 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019640 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8019640:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8019644:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8019648:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 801964c:	f7ff be6e 	b.w	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019650 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8019650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019654:	ed2d 8b04 	vpush	{d8-d9}
 8019658:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 801965c:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 8019660:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 8019664:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 8019668:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801966c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019670:	bf54      	ite	pl
 8019672:	eeb0 0a69 	vmovpl.f32	s0, s19
 8019676:	eeb0 0a48 	vmovmi.f32	s0, s16
 801967a:	eeb4 9ac0 	vcmpe.f32	s18, s0
 801967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019682:	bfd8      	it	le
 8019684:	eeb0 0a49 	vmovle.f32	s0, s18
 8019688:	eef4 8ac0 	vcmpe.f32	s17, s0
 801968c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019690:	bfd8      	it	le
 8019692:	eeb0 0a68 	vmovle.f32	s0, s17
 8019696:	460c      	mov	r4, r1
 8019698:	4607      	mov	r7, r0
 801969a:	f013 fecd 	bl	802d438 <floorf>
 801969e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80196a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a6:	bf58      	it	pl
 80196a8:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 80196ac:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80196b0:	bf56      	itet	pl
 80196b2:	ee10 3a10 	vmovpl	r3, s0
 80196b6:	2600      	movmi	r6, #0
 80196b8:	b21e      	sxthpl	r6, r3
 80196ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196be:	bfd8      	it	le
 80196c0:	eeb0 8a69 	vmovle.f32	s16, s19
 80196c4:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80196c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196cc:	bf58      	it	pl
 80196ce:	eeb0 8a49 	vmovpl.f32	s16, s18
 80196d2:	eef4 8ac8 	vcmpe.f32	s17, s16
 80196d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196da:	bf54      	ite	pl
 80196dc:	eeb0 0a68 	vmovpl.f32	s0, s17
 80196e0:	eeb0 0a48 	vmovmi.f32	s0, s16
 80196e4:	f013 fe26 	bl	802d334 <ceilf>
 80196e8:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80196ec:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 80196f0:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80196f4:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 80196f8:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 80196fc:	ee07 8a90 	vmov	s15, r8
 8019700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019704:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801970c:	bfd8      	it	le
 801970e:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8019712:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019716:	bfdc      	itt	le
 8019718:	ee10 3a10 	vmovle	r3, s0
 801971c:	fa0f f883 	sxthle.w	r8, r3
 8019720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019724:	bf54      	ite	pl
 8019726:	eeb0 0a69 	vmovpl.f32	s0, s19
 801972a:	eeb0 0a48 	vmovmi.f32	s0, s16
 801972e:	eeb4 9ac0 	vcmpe.f32	s18, s0
 8019732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019736:	bfd8      	it	le
 8019738:	eeb0 0a49 	vmovle.f32	s0, s18
 801973c:	eef4 8ac0 	vcmpe.f32	s17, s0
 8019740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019744:	bfd8      	it	le
 8019746:	eeb0 0a68 	vmovle.f32	s0, s17
 801974a:	f013 fe75 	bl	802d438 <floorf>
 801974e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019756:	bf58      	it	pl
 8019758:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 801975c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019760:	bf56      	itet	pl
 8019762:	ee10 3a10 	vmovpl	r3, s0
 8019766:	2500      	movmi	r5, #0
 8019768:	b21d      	sxthpl	r5, r3
 801976a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801976e:	bfd8      	it	le
 8019770:	eeb0 8a69 	vmovle.f32	s16, s19
 8019774:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8019778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801977c:	bf58      	it	pl
 801977e:	eeb0 8a49 	vmovpl.f32	s16, s18
 8019782:	eef4 8ac8 	vcmpe.f32	s17, s16
 8019786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801978a:	bf54      	ite	pl
 801978c:	eeb0 0a68 	vmovpl.f32	s0, s17
 8019790:	eeb0 0a48 	vmovmi.f32	s0, s16
 8019794:	f013 fdce 	bl	802d334 <ceilf>
 8019798:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801979c:	803e      	strh	r6, [r7, #0]
 801979e:	ee07 3a90 	vmov	s15, r3
 80197a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197a6:	807d      	strh	r5, [r7, #2]
 80197a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80197ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b0:	bfd8      	it	le
 80197b2:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 80197b6:	eba8 0606 	sub.w	r6, r8, r6
 80197ba:	bfdc      	itt	le
 80197bc:	ee10 3a10 	vmovle	r3, s0
 80197c0:	b21b      	sxthle	r3, r3
 80197c2:	1b5d      	subs	r5, r3, r5
 80197c4:	80be      	strh	r6, [r7, #4]
 80197c6:	80fd      	strh	r5, [r7, #6]
 80197c8:	ecbd 8b04 	vpop	{d8-d9}
 80197cc:	4638      	mov	r0, r7
 80197ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080197d2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 80197d2:	b510      	push	{r4, lr}
 80197d4:	ed2d 8b04 	vpush	{d8-d9}
 80197d8:	4604      	mov	r4, r0
 80197da:	b084      	sub	sp, #16
 80197dc:	4601      	mov	r1, r0
 80197de:	4668      	mov	r0, sp
 80197e0:	eeb0 8a40 	vmov.f32	s16, s0
 80197e4:	eef0 8a60 	vmov.f32	s17, s1
 80197e8:	eeb0 9a41 	vmov.f32	s18, s2
 80197ec:	f7ff ff30 	bl	8019650 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80197f0:	6823      	ldr	r3, [r4, #0]
 80197f2:	4669      	mov	r1, sp
 80197f4:	4620      	mov	r0, r4
 80197f6:	691b      	ldr	r3, [r3, #16]
 80197f8:	4798      	blx	r3
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	eeb0 1a49 	vmov.f32	s2, s18
 8019800:	eef0 0a68 	vmov.f32	s1, s17
 8019804:	eeb0 0a48 	vmov.f32	s0, s16
 8019808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801980a:	4620      	mov	r0, r4
 801980c:	4798      	blx	r3
 801980e:	4621      	mov	r1, r4
 8019810:	a802      	add	r0, sp, #8
 8019812:	f7ff ff1d 	bl	8019650 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8019816:	6823      	ldr	r3, [r4, #0]
 8019818:	a902      	add	r1, sp, #8
 801981a:	691b      	ldr	r3, [r3, #16]
 801981c:	4620      	mov	r0, r4
 801981e:	4798      	blx	r3
 8019820:	b004      	add	sp, #16
 8019822:	ecbd 8b04 	vpop	{d8-d9}
 8019826:	bd10      	pop	{r4, pc}

08019828 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8019828:	b510      	push	{r4, lr}
 801982a:	ed2d 8b02 	vpush	{d8}
 801982e:	4604      	mov	r4, r0
 8019830:	b084      	sub	sp, #16
 8019832:	4601      	mov	r1, r0
 8019834:	4668      	mov	r0, sp
 8019836:	eeb0 8a40 	vmov.f32	s16, s0
 801983a:	f7ff ff09 	bl	8019650 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801983e:	6823      	ldr	r3, [r4, #0]
 8019840:	4669      	mov	r1, sp
 8019842:	4620      	mov	r0, r4
 8019844:	691b      	ldr	r3, [r3, #16]
 8019846:	4798      	blx	r3
 8019848:	6823      	ldr	r3, [r4, #0]
 801984a:	eeb0 0a48 	vmov.f32	s0, s16
 801984e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019852:	4620      	mov	r0, r4
 8019854:	4798      	blx	r3
 8019856:	4621      	mov	r1, r4
 8019858:	a802      	add	r0, sp, #8
 801985a:	f7ff fef9 	bl	8019650 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801985e:	6823      	ldr	r3, [r4, #0]
 8019860:	a902      	add	r1, sp, #8
 8019862:	691b      	ldr	r3, [r3, #16]
 8019864:	4620      	mov	r0, r4
 8019866:	4798      	blx	r3
 8019868:	b004      	add	sp, #16
 801986a:	ecbd 8b02 	vpop	{d8}
 801986e:	bd10      	pop	{r4, pc}

08019870 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8019870:	4603      	mov	r3, r0
 8019872:	3026      	adds	r0, #38	; 0x26
 8019874:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019878:	b90b      	cbnz	r3, 801987e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801987a:	f003 bd3a 	b.w	801d2f2 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801987e:	f003 bd48 	b.w	801d312 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08019884 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8019884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019888:	ed2d 8b04 	vpush	{d8-d9}
 801988c:	4604      	mov	r4, r0
 801988e:	469b      	mov	fp, r3
 8019890:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8019894:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019898:	f9b1 6000 	ldrsh.w	r6, [r1]
 801989c:	8888      	ldrh	r0, [r1, #4]
 801989e:	b0b3      	sub	sp, #204	; 0xcc
 80198a0:	4430      	add	r0, r6
 80198a2:	b280      	uxth	r0, r0
 80198a4:	9206      	str	r2, [sp, #24]
 80198a6:	fa0f fe80 	sxth.w	lr, r0
 80198aa:	2200      	movs	r2, #0
 80198ac:	4596      	cmp	lr, r2
 80198ae:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 80198b2:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 80198b6:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 80198ba:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 80198bc:	9211      	str	r2, [sp, #68]	; 0x44
 80198be:	f340 8129 	ble.w	8019b14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80198c2:	45b4      	cmp	ip, r6
 80198c4:	f340 8126 	ble.w	8019b14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80198c8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80198cc:	88ca      	ldrh	r2, [r1, #6]
 80198ce:	442a      	add	r2, r5
 80198d0:	b292      	uxth	r2, r2
 80198d2:	b211      	sxth	r1, r2
 80198d4:	2900      	cmp	r1, #0
 80198d6:	f340 811d 	ble.w	8019b14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80198da:	42ab      	cmp	r3, r5
 80198dc:	f340 811a 	ble.w	8019b14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80198e0:	45f4      	cmp	ip, lr
 80198e2:	bfb8      	it	lt
 80198e4:	fa1f f08c 	uxthlt.w	r0, ip
 80198e8:	428b      	cmp	r3, r1
 80198ea:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80198ee:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80198f2:	bfb8      	it	lt
 80198f4:	b29a      	uxthlt	r2, r3
 80198f6:	1b80      	subs	r0, r0, r6
 80198f8:	1b52      	subs	r2, r2, r5
 80198fa:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80198fe:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8019902:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8019906:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801990a:	ab11      	add	r3, sp, #68	; 0x44
 801990c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019910:	6822      	ldr	r2, [r4, #0]
 8019912:	9307      	str	r3, [sp, #28]
 8019914:	ad13      	add	r5, sp, #76	; 0x4c
 8019916:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019918:	e885 0003 	stmia.w	r5, {r0, r1}
 801991c:	4629      	mov	r1, r5
 801991e:	4620      	mov	r0, r4
 8019920:	4790      	blx	r2
 8019922:	4621      	mov	r1, r4
 8019924:	a815      	add	r0, sp, #84	; 0x54
 8019926:	f003 fc3f 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801992a:	a815      	add	r0, sp, #84	; 0x54
 801992c:	f002 fa20 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019930:	9b07      	ldr	r3, [sp, #28]
 8019932:	1d26      	adds	r6, r4, #4
 8019934:	4618      	mov	r0, r3
 8019936:	4631      	mov	r1, r6
 8019938:	f002 fa5e 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801993c:	4628      	mov	r0, r5
 801993e:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8019942:	f002 fa15 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019946:	4628      	mov	r0, r5
 8019948:	f006 f8da 	bl	801fb00 <_ZNK8touchgfx6Bitmap7getDataEv>
 801994c:	9007      	str	r0, [sp, #28]
 801994e:	2800      	cmp	r0, #0
 8019950:	f000 80db 	beq.w	8019b0a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8019954:	f8db 2000 	ldr.w	r2, [fp]
 8019958:	9209      	str	r2, [sp, #36]	; 0x24
 801995a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801995e:	920a      	str	r2, [sp, #40]	; 0x28
 8019960:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019964:	920b      	str	r2, [sp, #44]	; 0x2c
 8019966:	f8db 200c 	ldr.w	r2, [fp, #12]
 801996a:	920c      	str	r2, [sp, #48]	; 0x30
 801996c:	f8da 2000 	ldr.w	r2, [sl]
 8019970:	920d      	str	r2, [sp, #52]	; 0x34
 8019972:	f8da 2004 	ldr.w	r2, [sl, #4]
 8019976:	920e      	str	r2, [sp, #56]	; 0x38
 8019978:	f8da 2008 	ldr.w	r2, [sl, #8]
 801997c:	920f      	str	r2, [sp, #60]	; 0x3c
 801997e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8019982:	9210      	str	r2, [sp, #64]	; 0x40
 8019984:	a90d      	add	r1, sp, #52	; 0x34
 8019986:	4632      	mov	r2, r6
 8019988:	a809      	add	r0, sp, #36	; 0x24
 801998a:	f002 fa19 	bl	801bdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801998e:	4632      	mov	r2, r6
 8019990:	a90e      	add	r1, sp, #56	; 0x38
 8019992:	a80a      	add	r0, sp, #40	; 0x28
 8019994:	f002 fa14 	bl	801bdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019998:	4632      	mov	r2, r6
 801999a:	a90f      	add	r1, sp, #60	; 0x3c
 801999c:	a80b      	add	r0, sp, #44	; 0x2c
 801999e:	f002 fa0f 	bl	801bdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80199a2:	4632      	mov	r2, r6
 80199a4:	a910      	add	r1, sp, #64	; 0x40
 80199a6:	a80c      	add	r0, sp, #48	; 0x30
 80199a8:	f002 fa0a 	bl	801bdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80199ac:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80199b0:	edd7 4a00 	vldr	s9, [r7]
 80199b4:	edd7 5a01 	vldr	s11, [r7, #4]
 80199b8:	ed98 4a00 	vldr	s8, [r8]
 80199bc:	ed98 5a01 	vldr	s10, [r8, #4]
 80199c0:	ed99 9a00 	vldr	s18, [r9]
 80199c4:	ed99 8a01 	vldr	s16, [r9, #4]
 80199c8:	edd9 8a02 	vldr	s17, [r9, #8]
 80199cc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80199d0:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80199d4:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 80199d8:	eef0 6a67 	vmov.f32	s13, s15
 80199dc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80199e0:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 80199e4:	eeb0 7a67 	vmov.f32	s14, s15
 80199e8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80199ec:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 80199f0:	eeb0 6a67 	vmov.f32	s12, s15
 80199f4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80199f8:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80199fc:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 8019a00:	ee16 6a10 	vmov	r6, s12
 8019a04:	eeb0 6a67 	vmov.f32	s12, s15
 8019a08:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019a0c:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8019a10:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8019a14:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8019a18:	68ff      	ldr	r7, [r7, #12]
 8019a1a:	9624      	str	r6, [sp, #144]	; 0x90
 8019a1c:	ee16 0a10 	vmov	r0, s12
 8019a20:	eeb0 6a67 	vmov.f32	s12, s15
 8019a24:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019a28:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8019a2c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8019a30:	ee16 1a10 	vmov	r1, s12
 8019a34:	eeb0 6a67 	vmov.f32	s12, s15
 8019a38:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019a3c:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8019a40:	ee16 2a10 	vmov	r2, s12
 8019a44:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8019a48:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8019a4c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8019a50:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8019a54:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019a58:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8019a5c:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8019a60:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8019a64:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8019a68:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 8019a6c:	922d      	str	r2, [sp, #180]	; 0xb4
 8019a6e:	4a2b      	ldr	r2, [pc, #172]	; (8019b1c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8019a70:	9b06      	ldr	r3, [sp, #24]
 8019a72:	8812      	ldrh	r2, [r2, #0]
 8019a74:	9317      	str	r3, [sp, #92]	; 0x5c
 8019a76:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8019a7a:	9b07      	ldr	r3, [sp, #28]
 8019a7c:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8019a80:	4628      	mov	r0, r5
 8019a82:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8019a86:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8019a8a:	9218      	str	r2, [sp, #96]	; 0x60
 8019a8c:	9319      	str	r3, [sp, #100]	; 0x64
 8019a8e:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8019a92:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8019a96:	9731      	str	r7, [sp, #196]	; 0xc4
 8019a98:	f006 f864 	bl	801fb64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019a9c:	901a      	str	r0, [sp, #104]	; 0x68
 8019a9e:	4628      	mov	r0, r5
 8019aa0:	f005 ff26 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019aa4:	901b      	str	r0, [sp, #108]	; 0x6c
 8019aa6:	4628      	mov	r0, r5
 8019aa8:	f005 ff5c 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019aac:	901c      	str	r0, [sp, #112]	; 0x70
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f005 ff1e 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ab4:	eeb4 9a48 	vcmp.f32	s18, s16
 8019ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019abc:	901d      	str	r0, [sp, #116]	; 0x74
 8019abe:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8019ac2:	d107      	bne.n	8019ad4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8019ac4:	eeb4 8a68 	vcmp.f32	s16, s17
 8019ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ad0:	bf08      	it	eq
 8019ad2:	461e      	moveq	r6, r3
 8019ad4:	4b12      	ldr	r3, [pc, #72]	; (8019b20 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019adc:	b10a      	cbz	r2, 8019ae2 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8019ade:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8019ae0:	b905      	cbnz	r5, 8019ae4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8019ae2:	689d      	ldr	r5, [r3, #8]
 8019ae4:	682b      	ldr	r3, [r5, #0]
 8019ae6:	4620      	mov	r0, r4
 8019ae8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8019aea:	f7ff fec1 	bl	8019870 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8019aee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019af2:	9604      	str	r6, [sp, #16]
 8019af4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019af8:	ab13      	add	r3, sp, #76	; 0x4c
 8019afa:	9301      	str	r3, [sp, #4]
 8019afc:	ab15      	add	r3, sp, #84	; 0x54
 8019afe:	9300      	str	r3, [sp, #0]
 8019b00:	aa1e      	add	r2, sp, #120	; 0x78
 8019b02:	ab19      	add	r3, sp, #100	; 0x64
 8019b04:	a917      	add	r1, sp, #92	; 0x5c
 8019b06:	4628      	mov	r0, r5
 8019b08:	47b8      	blx	r7
 8019b0a:	b033      	add	sp, #204	; 0xcc
 8019b0c:	ecbd 8b04 	vpop	{d8-d9}
 8019b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b14:	2300      	movs	r3, #0
 8019b16:	9312      	str	r3, [sp, #72]	; 0x48
 8019b18:	e6f7      	b.n	801990a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8019b1a:	bf00      	nop
 8019b1c:	200097a2 	.word	0x200097a2
 8019b20:	200097a8 	.word	0x200097a8

08019b24 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8019b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b28:	ed2d 8b02 	vpush	{d8}
 8019b2c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019b30:	b098      	sub	sp, #96	; 0x60
 8019b32:	4604      	mov	r4, r0
 8019b34:	4688      	mov	r8, r1
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d077      	beq.n	8019c2a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8019b3a:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019b3e:	4628      	mov	r0, r5
 8019b40:	f005 fed6 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019b44:	ee07 0a90 	vmov	s15, r0
 8019b48:	4628      	mov	r0, r5
 8019b4a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8019b4e:	f005 ff09 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019b52:	4b4e      	ldr	r3, [pc, #312]	; (8019c8c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8019b54:	781b      	ldrb	r3, [r3, #0]
 8019b56:	ee07 0a90 	vmov	s15, r0
 8019b5a:	2b01      	cmp	r3, #1
 8019b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019b60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019b64:	d066      	beq.n	8019c34 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8019b66:	eeb0 6a47 	vmov.f32	s12, s14
 8019b6a:	ee17 3a10 	vmov	r3, s14
 8019b6e:	eeb0 4a48 	vmov.f32	s8, s16
 8019b72:	eeb0 7a48 	vmov.f32	s14, s16
 8019b76:	eef0 4a67 	vmov.f32	s9, s15
 8019b7a:	eeb0 8a67 	vmov.f32	s16, s15
 8019b7e:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8019b82:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8019b86:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8019b8a:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 8019b8e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8019b92:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8019b96:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8019b98:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8019b9a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8019b9c:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8019ba0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8019ba4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019ba8:	ee73 1a65 	vsub.f32	s3, s6, s11
 8019bac:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8019bb0:	ee32 1a45 	vsub.f32	s2, s4, s10
 8019bb4:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8019bb8:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8019bbc:	eee1 6a21 	vfma.f32	s13, s2, s3
 8019bc0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8019bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc8:	dd3d      	ble.n	8019c46 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8019bca:	ed8d 5a04 	vstr	s10, [sp, #16]
 8019bce:	ed8d 2a05 	vstr	s4, [sp, #20]
 8019bd2:	edcd 2a06 	vstr	s5, [sp, #24]
 8019bd6:	f8cd c01c 	str.w	ip, [sp, #28]
 8019bda:	edcd 5a08 	vstr	s11, [sp, #32]
 8019bde:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8019be2:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8019be6:	970b      	str	r7, [sp, #44]	; 0x2c
 8019be8:	960c      	str	r6, [sp, #48]	; 0x30
 8019bea:	950d      	str	r5, [sp, #52]	; 0x34
 8019bec:	920e      	str	r2, [sp, #56]	; 0x38
 8019bee:	900f      	str	r0, [sp, #60]	; 0x3c
 8019bf0:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8019bf4:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8019bf8:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8019bfc:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8019c00:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8019c04:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8019c08:	9316      	str	r3, [sp, #88]	; 0x58
 8019c0a:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8019c0e:	ab14      	add	r3, sp, #80	; 0x50
 8019c10:	9303      	str	r3, [sp, #12]
 8019c12:	ab10      	add	r3, sp, #64	; 0x40
 8019c14:	9302      	str	r3, [sp, #8]
 8019c16:	ab0c      	add	r3, sp, #48	; 0x30
 8019c18:	9301      	str	r3, [sp, #4]
 8019c1a:	ab08      	add	r3, sp, #32
 8019c1c:	9300      	str	r3, [sp, #0]
 8019c1e:	2200      	movs	r2, #0
 8019c20:	ab04      	add	r3, sp, #16
 8019c22:	4641      	mov	r1, r8
 8019c24:	4620      	mov	r0, r4
 8019c26:	f7ff fe2d 	bl	8019884 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8019c2a:	b018      	add	sp, #96	; 0x60
 8019c2c:	ecbd 8b02 	vpop	{d8}
 8019c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c34:	eeb0 6a48 	vmov.f32	s12, s16
 8019c38:	eef0 4a47 	vmov.f32	s9, s14
 8019c3c:	ee17 3a90 	vmov	r3, s15
 8019c40:	eeb0 4a67 	vmov.f32	s8, s15
 8019c44:	e79b      	b.n	8019b7e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8019c46:	ed8d 5a05 	vstr	s10, [sp, #20]
 8019c4a:	ed8d 2a04 	vstr	s4, [sp, #16]
 8019c4e:	f8cd c018 	str.w	ip, [sp, #24]
 8019c52:	edcd 2a07 	vstr	s5, [sp, #28]
 8019c56:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8019c5a:	ed8d 3a08 	vstr	s6, [sp, #32]
 8019c5e:	970a      	str	r7, [sp, #40]	; 0x28
 8019c60:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8019c64:	960d      	str	r6, [sp, #52]	; 0x34
 8019c66:	950c      	str	r5, [sp, #48]	; 0x30
 8019c68:	900e      	str	r0, [sp, #56]	; 0x38
 8019c6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8019c6c:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8019c70:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8019c74:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8019c78:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8019c7c:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8019c80:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8019c84:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8019c88:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c8a:	e7c0      	b.n	8019c0e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8019c8c:	200097a0 	.word	0x200097a0

08019c90 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8019c90:	2200      	movs	r2, #0
 8019c92:	8002      	strh	r2, [r0, #0]
 8019c94:	8042      	strh	r2, [r0, #2]
 8019c96:	8082      	strh	r2, [r0, #4]
 8019c98:	80c2      	strh	r2, [r0, #6]
 8019c9a:	4770      	bx	lr

08019c9c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8019c9c:	b570      	push	{r4, r5, r6, lr}
 8019c9e:	6803      	ldr	r3, [r0, #0]
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ca4:	4615      	mov	r5, r2
 8019ca6:	4798      	blx	r3
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	4629      	mov	r1, r5
 8019cac:	4620      	mov	r0, r4
 8019cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cb4:	4718      	bx	r3
	...

08019cb8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8019cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019cba:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cc0:	4299      	cmp	r1, r3
 8019cc2:	d029      	beq.n	8019d18 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8019cc4:	4b15      	ldr	r3, [pc, #84]	; (8019d1c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	b92b      	cbnz	r3, 8019cd6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8019cca:	4b15      	ldr	r3, [pc, #84]	; (8019d20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8019ccc:	4a15      	ldr	r2, [pc, #84]	; (8019d24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019cce:	21ae      	movs	r1, #174	; 0xae
 8019cd0:	4815      	ldr	r0, [pc, #84]	; (8019d28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8019cd2:	f014 f925 	bl	802df20 <__assert_func>
 8019cd6:	4a15      	ldr	r2, [pc, #84]	; (8019d2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8019cd8:	8812      	ldrh	r2, [r2, #0]
 8019cda:	428a      	cmp	r2, r1
 8019cdc:	d803      	bhi.n	8019ce6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8019cde:	4b14      	ldr	r3, [pc, #80]	; (8019d30 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8019ce0:	4a10      	ldr	r2, [pc, #64]	; (8019d24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019ce2:	21af      	movs	r1, #175	; 0xaf
 8019ce4:	e7f4      	b.n	8019cd0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8019ce6:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019cea:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019cee:	4b11      	ldr	r3, [pc, #68]	; (8019d34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8019cf0:	7854      	ldrb	r4, [r2, #1]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019cf8:	682b      	ldr	r3, [r5, #0]
 8019cfa:	69de      	ldr	r6, [r3, #28]
 8019cfc:	4b0e      	ldr	r3, [pc, #56]	; (8019d38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8019cfe:	6818      	ldr	r0, [r3, #0]
 8019d00:	f7fa fc3e 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8019d04:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019d08:	2300      	movs	r3, #0
 8019d0a:	4602      	mov	r2, r0
 8019d0c:	9300      	str	r3, [sp, #0]
 8019d0e:	4621      	mov	r1, r4
 8019d10:	4628      	mov	r0, r5
 8019d12:	47b0      	blx	r6
 8019d14:	b002      	add	sp, #8
 8019d16:	bd70      	pop	{r4, r5, r6, pc}
 8019d18:	2000      	movs	r0, #0
 8019d1a:	e7fb      	b.n	8019d14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019d1c:	200097f8 	.word	0x200097f8
 8019d20:	0803181c 	.word	0x0803181c
 8019d24:	08031954 	.word	0x08031954
 8019d28:	0803185e 	.word	0x0803185e
 8019d2c:	200097fc 	.word	0x200097fc
 8019d30:	08031887 	.word	0x08031887
 8019d34:	20009800 	.word	0x20009800
 8019d38:	20009804 	.word	0x20009804

08019d3c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019d3c:	b570      	push	{r4, r5, r6, lr}
 8019d3e:	6803      	ldr	r3, [r0, #0]
 8019d40:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019d42:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019d44:	4b11      	ldr	r3, [pc, #68]	; (8019d8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	4604      	mov	r4, r0
 8019d4a:	b28d      	uxth	r5, r1
 8019d4c:	b92b      	cbnz	r3, 8019d5a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019d4e:	4b10      	ldr	r3, [pc, #64]	; (8019d90 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019d50:	4a10      	ldr	r2, [pc, #64]	; (8019d94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019d52:	21ae      	movs	r1, #174	; 0xae
 8019d54:	4810      	ldr	r0, [pc, #64]	; (8019d98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019d56:	f014 f8e3 	bl	802df20 <__assert_func>
 8019d5a:	4910      	ldr	r1, [pc, #64]	; (8019d9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019d5c:	8809      	ldrh	r1, [r1, #0]
 8019d5e:	4291      	cmp	r1, r2
 8019d60:	d803      	bhi.n	8019d6a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019d62:	4b0f      	ldr	r3, [pc, #60]	; (8019da0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019d64:	4a0b      	ldr	r2, [pc, #44]	; (8019d94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019d66:	21af      	movs	r1, #175	; 0xaf
 8019d68:	e7f4      	b.n	8019d54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019d6a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019d6e:	4b0d      	ldr	r3, [pc, #52]	; (8019da4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019d76:	6803      	ldr	r3, [r0, #0]
 8019d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d7a:	4798      	blx	r3
 8019d7c:	1a29      	subs	r1, r5, r0
 8019d7e:	4633      	mov	r3, r6
 8019d80:	4620      	mov	r0, r4
 8019d82:	b209      	sxth	r1, r1
 8019d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d88:	4718      	bx	r3
 8019d8a:	bf00      	nop
 8019d8c:	200097f8 	.word	0x200097f8
 8019d90:	0803181c 	.word	0x0803181c
 8019d94:	08031954 	.word	0x08031954
 8019d98:	0803185e 	.word	0x0803185e
 8019d9c:	200097fc 	.word	0x200097fc
 8019da0:	08031887 	.word	0x08031887
 8019da4:	20009800 	.word	0x20009800

08019da8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019db2:	4293      	cmp	r3, r2
 8019db4:	b08c      	sub	sp, #48	; 0x30
 8019db6:	4604      	mov	r4, r0
 8019db8:	4688      	mov	r8, r1
 8019dba:	d05f      	beq.n	8019e7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019dbc:	4e31      	ldr	r6, [pc, #196]	; (8019e84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8019dbe:	6832      	ldr	r2, [r6, #0]
 8019dc0:	b92a      	cbnz	r2, 8019dce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8019dc2:	4b31      	ldr	r3, [pc, #196]	; (8019e88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019dc4:	4a31      	ldr	r2, [pc, #196]	; (8019e8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019dc6:	21ae      	movs	r1, #174	; 0xae
 8019dc8:	4831      	ldr	r0, [pc, #196]	; (8019e90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019dca:	f014 f8a9 	bl	802df20 <__assert_func>
 8019dce:	4d31      	ldr	r5, [pc, #196]	; (8019e94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8019dd0:	8829      	ldrh	r1, [r5, #0]
 8019dd2:	4299      	cmp	r1, r3
 8019dd4:	d803      	bhi.n	8019dde <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019dd6:	4b30      	ldr	r3, [pc, #192]	; (8019e98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019dd8:	4a2c      	ldr	r2, [pc, #176]	; (8019e8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019dda:	21af      	movs	r1, #175	; 0xaf
 8019ddc:	e7f4      	b.n	8019dc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019dde:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019de2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019de6:	4b2d      	ldr	r3, [pc, #180]	; (8019e9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019dee:	2a00      	cmp	r2, #0
 8019df0:	d044      	beq.n	8019e7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019df2:	784b      	ldrb	r3, [r1, #1]
 8019df4:	9207      	str	r2, [sp, #28]
 8019df6:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019dfa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019dfe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019e02:	4b27      	ldr	r3, [pc, #156]	; (8019ea0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019e04:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019e0e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019e12:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019e16:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8019e1a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019e1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019e20:	f88d a020 	strb.w	sl, [sp, #32]
 8019e24:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8019e28:	9009      	str	r0, [sp, #36]	; 0x24
 8019e2a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019e2e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019e32:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8019e36:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019e3a:	b10a      	cbz	r2, 8019e40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019e3c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019e3e:	b907      	cbnz	r7, 8019e42 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019e40:	689f      	ldr	r7, [r3, #8]
 8019e42:	f10d 0914 	add.w	r9, sp, #20
 8019e46:	4621      	mov	r1, r4
 8019e48:	4648      	mov	r0, r9
 8019e4a:	f003 f9ad 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e4e:	6833      	ldr	r3, [r6, #0]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d0b6      	beq.n	8019dc2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019e54:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019e56:	882b      	ldrh	r3, [r5, #0]
 8019e58:	428b      	cmp	r3, r1
 8019e5a:	d9bc      	bls.n	8019dd6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019e5c:	4b11      	ldr	r3, [pc, #68]	; (8019ea4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019e5e:	6818      	ldr	r0, [r3, #0]
 8019e60:	f7fa fb8e 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8019e64:	2300      	movs	r3, #0
 8019e66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019e6a:	ab07      	add	r3, sp, #28
 8019e6c:	9001      	str	r0, [sp, #4]
 8019e6e:	9300      	str	r3, [sp, #0]
 8019e70:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019e74:	4643      	mov	r3, r8
 8019e76:	4638      	mov	r0, r7
 8019e78:	f7fa fb13 	bl	80144a2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019e7c:	b00c      	add	sp, #48	; 0x30
 8019e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e82:	bf00      	nop
 8019e84:	200097f8 	.word	0x200097f8
 8019e88:	0803181c 	.word	0x0803181c
 8019e8c:	08031954 	.word	0x08031954
 8019e90:	0803185e 	.word	0x0803185e
 8019e94:	200097fc 	.word	0x200097fc
 8019e98:	08031887 	.word	0x08031887
 8019e9c:	20009800 	.word	0x20009800
 8019ea0:	200097a8 	.word	0x200097a8
 8019ea4:	20009804 	.word	0x20009804

08019ea8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019ea8:	b40e      	push	{r1, r2, r3}
 8019eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019eb4:	4293      	cmp	r3, r2
 8019eb6:	b09c      	sub	sp, #112	; 0x70
 8019eb8:	4604      	mov	r4, r0
 8019eba:	d06b      	beq.n	8019f94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8019ebc:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8019fa8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8019ec0:	aa26      	add	r2, sp, #152	; 0x98
 8019ec2:	9202      	str	r2, [sp, #8]
 8019ec4:	f8da 2000 	ldr.w	r2, [sl]
 8019ec8:	b92a      	cbnz	r2, 8019ed6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8019eca:	4b33      	ldr	r3, [pc, #204]	; (8019f98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8019ecc:	4a33      	ldr	r2, [pc, #204]	; (8019f9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019ece:	21ae      	movs	r1, #174	; 0xae
 8019ed0:	4833      	ldr	r0, [pc, #204]	; (8019fa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8019ed2:	f014 f825 	bl	802df20 <__assert_func>
 8019ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8019fac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8019eda:	f8b8 1000 	ldrh.w	r1, [r8]
 8019ede:	4299      	cmp	r1, r3
 8019ee0:	d803      	bhi.n	8019eea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019ee2:	4b30      	ldr	r3, [pc, #192]	; (8019fa4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019ee4:	4a2d      	ldr	r2, [pc, #180]	; (8019f9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019ee6:	21af      	movs	r1, #175	; 0xaf
 8019ee8:	e7f2      	b.n	8019ed0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8019eea:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8019fb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8019eee:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8019ef6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019efa:	682b      	ldr	r3, [r5, #0]
 8019efc:	4628      	mov	r0, r5
 8019efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f00:	4798      	blx	r3
 8019f02:	4606      	mov	r6, r0
 8019f04:	b207      	sxth	r7, r0
 8019f06:	a803      	add	r0, sp, #12
 8019f08:	f003 fddd 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 8019f0c:	682b      	ldr	r3, [r5, #0]
 8019f0e:	4628      	mov	r0, r5
 8019f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f12:	4798      	blx	r3
 8019f14:	682b      	ldr	r3, [r5, #0]
 8019f16:	4683      	mov	fp, r0
 8019f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f1a:	4628      	mov	r0, r5
 8019f1c:	4798      	blx	r3
 8019f1e:	465b      	mov	r3, fp
 8019f20:	9000      	str	r0, [sp, #0]
 8019f22:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019f24:	9a02      	ldr	r2, [sp, #8]
 8019f26:	a803      	add	r0, sp, #12
 8019f28:	f003 fe20 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019f2c:	f8da 3000 	ldr.w	r3, [sl]
 8019f30:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d0c8      	beq.n	8019eca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019f38:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019f3a:	f8b8 0000 	ldrh.w	r0, [r8]
 8019f3e:	4290      	cmp	r0, r2
 8019f40:	d9cf      	bls.n	8019ee2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8019f42:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019f46:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019f4a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8019f4e:	786a      	ldrb	r2, [r5, #1]
 8019f50:	8925      	ldrh	r5, [r4, #8]
 8019f52:	f8d9 3000 	ldr.w	r3, [r9]
 8019f56:	eba5 050c 	sub.w	r5, r5, ip
 8019f5a:	b22d      	sxth	r5, r5
 8019f5c:	9500      	str	r5, [sp, #0]
 8019f5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019f62:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019f66:	a803      	add	r0, sp, #12
 8019f68:	f001 fc1e 	bl	801b7a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019f6c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019f70:	18b9      	adds	r1, r7, r2
 8019f72:	2900      	cmp	r1, #0
 8019f74:	b203      	sxth	r3, r0
 8019f76:	dd0b      	ble.n	8019f90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019f78:	3b01      	subs	r3, #1
 8019f7a:	fb13 f302 	smulbb	r3, r3, r2
 8019f7e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019f82:	b21f      	sxth	r7, r3
 8019f84:	4638      	mov	r0, r7
 8019f86:	b01c      	add	sp, #112	; 0x70
 8019f88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f8c:	b003      	add	sp, #12
 8019f8e:	4770      	bx	lr
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	dcf7      	bgt.n	8019f84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019f94:	2700      	movs	r7, #0
 8019f96:	e7f5      	b.n	8019f84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019f98:	0803181c 	.word	0x0803181c
 8019f9c:	08031954 	.word	0x08031954
 8019fa0:	0803185e 	.word	0x0803185e
 8019fa4:	08031887 	.word	0x08031887
 8019fa8:	200097f8 	.word	0x200097f8
 8019fac:	200097fc 	.word	0x200097fc
 8019fb0:	20009800 	.word	0x20009800

08019fb4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019fb4:	b570      	push	{r4, r5, r6, lr}
 8019fb6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fbc:	4299      	cmp	r1, r3
 8019fbe:	4604      	mov	r4, r0
 8019fc0:	d01e      	beq.n	801a000 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8019fc2:	6803      	ldr	r3, [r0, #0]
 8019fc4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019fc6:	4b0f      	ldr	r3, [pc, #60]	; (801a004 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	b92b      	cbnz	r3, 8019fd8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8019fcc:	4b0e      	ldr	r3, [pc, #56]	; (801a008 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8019fce:	4a0f      	ldr	r2, [pc, #60]	; (801a00c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019fd0:	21ae      	movs	r1, #174	; 0xae
 8019fd2:	480f      	ldr	r0, [pc, #60]	; (801a010 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8019fd4:	f013 ffa4 	bl	802df20 <__assert_func>
 8019fd8:	4b0e      	ldr	r3, [pc, #56]	; (801a014 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019fda:	881b      	ldrh	r3, [r3, #0]
 8019fdc:	428b      	cmp	r3, r1
 8019fde:	d803      	bhi.n	8019fe8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019fe0:	4b0d      	ldr	r3, [pc, #52]	; (801a018 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019fe2:	4a0a      	ldr	r2, [pc, #40]	; (801a00c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019fe4:	21af      	movs	r1, #175	; 0xaf
 8019fe6:	e7f4      	b.n	8019fd2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019fe8:	4b0c      	ldr	r3, [pc, #48]	; (801a01c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8019fea:	6818      	ldr	r0, [r3, #0]
 8019fec:	f7fa fac8 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	4601      	mov	r1, r0
 8019ff4:	46ac      	mov	ip, r5
 8019ff6:	4620      	mov	r0, r4
 8019ff8:	461a      	mov	r2, r3
 8019ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ffe:	4760      	bx	ip
 801a000:	2000      	movs	r0, #0
 801a002:	bd70      	pop	{r4, r5, r6, pc}
 801a004:	200097f8 	.word	0x200097f8
 801a008:	0803181c 	.word	0x0803181c
 801a00c:	08031954 	.word	0x08031954
 801a010:	0803185e 	.word	0x0803185e
 801a014:	200097fc 	.word	0x200097fc
 801a018:	08031887 	.word	0x08031887
 801a01c:	20009804 	.word	0x20009804

0801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801a020:	b538      	push	{r3, r4, r5, lr}
 801a022:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a028:	429a      	cmp	r2, r3
 801a02a:	4604      	mov	r4, r0
 801a02c:	d014      	beq.n	801a058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801a02e:	6803      	ldr	r3, [r0, #0]
 801a030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a032:	4798      	blx	r3
 801a034:	6823      	ldr	r3, [r4, #0]
 801a036:	4605      	mov	r5, r0
 801a038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a03a:	4620      	mov	r0, r4
 801a03c:	4798      	blx	r3
 801a03e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a042:	b22d      	sxth	r5, r5
 801a044:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801a048:	4601      	mov	r1, r0
 801a04a:	bf06      	itte	eq
 801a04c:	4602      	moveq	r2, r0
 801a04e:	4629      	moveq	r1, r5
 801a050:	462a      	movne	r2, r5
 801a052:	4620      	mov	r0, r4
 801a054:	f7f6 fd62 	bl	8010b1c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a058:	bd38      	pop	{r3, r4, r5, pc}

0801a05a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801a05a:	888a      	ldrh	r2, [r1, #4]
 801a05c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a05e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a062:	b922      	cbnz	r2, 801a06e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801a064:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a068:	b90b      	cbnz	r3, 801a06e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801a06a:	f7ff bfd9 	b.w	801a020 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801a06e:	4770      	bx	lr

0801a070 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 801a070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a074:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a07a:	429a      	cmp	r2, r3
 801a07c:	4604      	mov	r4, r0
 801a07e:	d054      	beq.n	801a12a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xba>
 801a080:	4b42      	ldr	r3, [pc, #264]	; (801a18c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x11c>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	b92b      	cbnz	r3, 801a092 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x22>
 801a086:	4b42      	ldr	r3, [pc, #264]	; (801a190 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x120>)
 801a088:	4a42      	ldr	r2, [pc, #264]	; (801a194 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 801a08a:	21ae      	movs	r1, #174	; 0xae
 801a08c:	4842      	ldr	r0, [pc, #264]	; (801a198 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x128>)
 801a08e:	f013 ff47 	bl	802df20 <__assert_func>
 801a092:	4942      	ldr	r1, [pc, #264]	; (801a19c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x12c>)
 801a094:	8809      	ldrh	r1, [r1, #0]
 801a096:	4291      	cmp	r1, r2
 801a098:	d803      	bhi.n	801a0a2 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x32>
 801a09a:	4b41      	ldr	r3, [pc, #260]	; (801a1a0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x130>)
 801a09c:	4a3d      	ldr	r2, [pc, #244]	; (801a194 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 801a09e:	21af      	movs	r1, #175	; 0xaf
 801a0a0:	e7f4      	b.n	801a08c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x1c>
 801a0a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801a0a6:	f893 9001 	ldrb.w	r9, [r3, #1]
 801a0aa:	6803      	ldr	r3, [r0, #0]
 801a0ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a0ae:	4798      	blx	r3
 801a0b0:	6823      	ldr	r3, [r4, #0]
 801a0b2:	4680      	mov	r8, r0
 801a0b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	4798      	blx	r3
 801a0ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a0be:	f009 0903 	and.w	r9, r9, #3
 801a0c2:	4605      	mov	r5, r0
 801a0c4:	b287      	uxth	r7, r0
 801a0c6:	fa0f f688 	sxth.w	r6, r8
 801a0ca:	b1cb      	cbz	r3, 801a100 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 801a0cc:	2b02      	cmp	r3, #2
 801a0ce:	d12e      	bne.n	801a12e <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 801a0d0:	f1b9 0f02 	cmp.w	r9, #2
 801a0d4:	d017      	beq.n	801a106 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a0d6:	8920      	ldrh	r0, [r4, #8]
 801a0d8:	88a1      	ldrh	r1, [r4, #4]
 801a0da:	6822      	ldr	r2, [r4, #0]
 801a0dc:	f1b9 0f01 	cmp.w	r9, #1
 801a0e0:	bf13      	iteet	ne
 801a0e2:	1840      	addne	r0, r0, r1
 801a0e4:	2302      	moveq	r3, #2
 801a0e6:	eba0 0008 	subeq.w	r0, r0, r8
 801a0ea:	eba0 0108 	subne.w	r1, r0, r8
 801a0ee:	bf04      	itt	eq
 801a0f0:	fb90 f3f3 	sdiveq	r3, r0, r3
 801a0f4:	18c9      	addeq	r1, r1, r3
 801a0f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a0f8:	b209      	sxth	r1, r1
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	4790      	blx	r2
 801a0fe:	e002      	b.n	801a106 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a100:	f1b9 0f00 	cmp.w	r9, #0
 801a104:	d1e7      	bne.n	801a0d6 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x66>
 801a106:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a10a:	2b02      	cmp	r3, #2
 801a10c:	d108      	bne.n	801a120 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb0>
 801a10e:	88e3      	ldrh	r3, [r4, #6]
 801a110:	8961      	ldrh	r1, [r4, #10]
 801a112:	4419      	add	r1, r3
 801a114:	6823      	ldr	r3, [r4, #0]
 801a116:	1bc9      	subs	r1, r1, r7
 801a118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a11a:	b209      	sxth	r1, r1
 801a11c:	4620      	mov	r0, r4
 801a11e:	4798      	blx	r3
 801a120:	462a      	mov	r2, r5
 801a122:	4631      	mov	r1, r6
 801a124:	4620      	mov	r0, r4
 801a126:	f7f6 fcf9 	bl	8010b1c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a12e:	2b01      	cmp	r3, #1
 801a130:	d112      	bne.n	801a158 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe8>
 801a132:	f1b9 0f00 	cmp.w	r9, #0
 801a136:	d114      	bne.n	801a162 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a138:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a13c:	2b01      	cmp	r3, #1
 801a13e:	d108      	bne.n	801a152 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe2>
 801a140:	88a3      	ldrh	r3, [r4, #4]
 801a142:	8921      	ldrh	r1, [r4, #8]
 801a144:	4419      	add	r1, r3
 801a146:	6823      	ldr	r3, [r4, #0]
 801a148:	1bc9      	subs	r1, r1, r7
 801a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a14c:	b209      	sxth	r1, r1
 801a14e:	4620      	mov	r0, r4
 801a150:	4798      	blx	r3
 801a152:	4632      	mov	r2, r6
 801a154:	4629      	mov	r1, r5
 801a156:	e7e5      	b.n	801a124 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb4>
 801a158:	2b03      	cmp	r3, #3
 801a15a:	d102      	bne.n	801a162 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a15c:	f1b9 0f02 	cmp.w	r9, #2
 801a160:	d0ea      	beq.n	801a138 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a162:	8963      	ldrh	r3, [r4, #10]
 801a164:	88e1      	ldrh	r1, [r4, #6]
 801a166:	6822      	ldr	r2, [r4, #0]
 801a168:	f1b9 0f01 	cmp.w	r9, #1
 801a16c:	bf0b      	itete	eq
 801a16e:	2002      	moveq	r0, #2
 801a170:	185b      	addne	r3, r3, r1
 801a172:	eba3 0308 	subeq.w	r3, r3, r8
 801a176:	eba3 0108 	subne.w	r1, r3, r8
 801a17a:	bf04      	itt	eq
 801a17c:	fb93 f0f0 	sdiveq	r0, r3, r0
 801a180:	1809      	addeq	r1, r1, r0
 801a182:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a184:	b209      	sxth	r1, r1
 801a186:	4620      	mov	r0, r4
 801a188:	4790      	blx	r2
 801a18a:	e7d5      	b.n	801a138 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a18c:	200097f8 	.word	0x200097f8
 801a190:	0803181c 	.word	0x0803181c
 801a194:	08031954 	.word	0x08031954
 801a198:	0803185e 	.word	0x0803185e
 801a19c:	200097fc 	.word	0x200097fc
 801a1a0:	08031887 	.word	0x08031887

0801a1a4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	8083      	strh	r3, [r0, #4]
 801a1a8:	80c3      	strh	r3, [r0, #6]
 801a1aa:	8003      	strh	r3, [r0, #0]
 801a1ac:	8043      	strh	r3, [r0, #2]
 801a1ae:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a1b2:	2bff      	cmp	r3, #255	; 0xff
 801a1b4:	bf01      	itttt	eq
 801a1b6:	890b      	ldrheq	r3, [r1, #8]
 801a1b8:	8083      	strheq	r3, [r0, #4]
 801a1ba:	894b      	ldrheq	r3, [r1, #10]
 801a1bc:	80c3      	strheq	r3, [r0, #6]
 801a1be:	4770      	bx	lr

0801a1c0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1c2:	4604      	mov	r4, r0
 801a1c4:	6808      	ldr	r0, [r1, #0]
 801a1c6:	6849      	ldr	r1, [r1, #4]
 801a1c8:	466b      	mov	r3, sp
 801a1ca:	c303      	stmia	r3!, {r0, r1}
 801a1cc:	6823      	ldr	r3, [r4, #0]
 801a1ce:	4669      	mov	r1, sp
 801a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	4798      	blx	r3
 801a1d6:	4b08      	ldr	r3, [pc, #32]	; (801a1f8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a1de:	b10a      	cbz	r2, 801a1e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a1e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a1e2:	b900      	cbnz	r0, 801a1e6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a1e4:	6898      	ldr	r0, [r3, #8]
 801a1e6:	6803      	ldr	r3, [r0, #0]
 801a1e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a1ea:	699d      	ldr	r5, [r3, #24]
 801a1ec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a1f0:	4669      	mov	r1, sp
 801a1f2:	47a8      	blx	r5
 801a1f4:	b003      	add	sp, #12
 801a1f6:	bd30      	pop	{r4, r5, pc}
 801a1f8:	200097a8 	.word	0x200097a8

0801a1fc <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801a1fc:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801a200:	600b      	str	r3, [r1, #0]
 801a202:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801a206:	6013      	str	r3, [r2, #0]
 801a208:	4770      	bx	lr

0801a20a <_ZN8touchgfx5Gauge8setWidthEs>:
 801a20a:	8101      	strh	r1, [r0, #8]
 801a20c:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801a210:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801a214:	4770      	bx	lr

0801a216 <_ZN8touchgfx5Gauge9setHeightEs>:
 801a216:	8141      	strh	r1, [r0, #10]
 801a218:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801a21c:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801a220:	4770      	bx	lr

0801a222 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801a222:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801a226:	4770      	bx	lr

0801a228 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801a228:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801a22c:	4770      	bx	lr

0801a22e <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801a22e:	4770      	bx	lr

0801a230 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801a230:	b538      	push	{r3, r4, r5, lr}
 801a232:	4604      	mov	r4, r0
 801a234:	460d      	mov	r5, r1
 801a236:	f7fc fe60 	bl	8016efa <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801a23a:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801a23e:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 801a242:	bd38      	pop	{r3, r4, r5, pc}

0801a244 <_ZN8touchgfx5GaugeC1Ev>:
 801a244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a246:	4604      	mov	r4, r0
 801a248:	4626      	mov	r6, r4
 801a24a:	f7fc ff7b 	bl	8017144 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801a24e:	4b18      	ldr	r3, [pc, #96]	; (801a2b0 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801a250:	f846 3bb4 	str.w	r3, [r6], #180
 801a254:	a902      	add	r1, sp, #8
 801a256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a25a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801a25e:	4630      	mov	r0, r6
 801a260:	f7ff f818 	bl	8019294 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801a264:	2500      	movs	r5, #0
 801a266:	2301      	movs	r3, #1
 801a268:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801a26c:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801a270:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801a274:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801a278:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801a27c:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801a280:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801a284:	4638      	mov	r0, r7
 801a286:	f7fe fa71 	bl	801876c <_ZN8touchgfx6CircleC1Ev>
 801a28a:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801a28e:	4620      	mov	r0, r4
 801a290:	f7fc ffe4 	bl	801725c <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801a294:	4639      	mov	r1, r7
 801a296:	4620      	mov	r0, r4
 801a298:	f7fd f812 	bl	80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a29c:	4620      	mov	r0, r4
 801a29e:	4631      	mov	r1, r6
 801a2a0:	f7fd f80e 	bl	80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801a2aa:	b003      	add	sp, #12
 801a2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2ae:	bf00      	nop
 801a2b0:	08031a34 	.word	0x08031a34

0801a2b4 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a2b4:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801a2b8:	4770      	bx	lr

0801a2ba <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a2ba:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801a2be:	4770      	bx	lr

0801a2c0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801a2c0:	b538      	push	{r3, r4, r5, lr}
 801a2c2:	8902      	ldrh	r2, [r0, #8]
 801a2c4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a2c8:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801a2cc:	4604      	mov	r4, r0
 801a2ce:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	4611      	mov	r1, r2
 801a2d6:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801a2da:	4628      	mov	r0, r5
 801a2dc:	f7f6 fbc2 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
 801a2e0:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801a2e4:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a2e8:	1a9b      	subs	r3, r3, r2
 801a2ea:	ee07 3a90 	vmov	s15, r3
 801a2ee:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801a2f2:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801a2f6:	1a9b      	subs	r3, r3, r2
 801a2f8:	ee07 3a10 	vmov	s14, r3
 801a2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a300:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a304:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801a308:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801a30c:	4628      	mov	r0, r5
 801a30e:	f7ff f80d 	bl	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a312:	4b16      	ldr	r3, [pc, #88]	; (801a36c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801a314:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801a318:	4628      	mov	r0, r5
 801a31a:	f7ff f807 	bl	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a31e:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a322:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801a326:	ee07 3a90 	vmov	s15, r3
 801a32a:	ee07 2a10 	vmov	s14, r2
 801a32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a336:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801a33a:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801a33e:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801a342:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801a346:	4628      	mov	r0, r5
 801a348:	f7fe fff0 	bl	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a34c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801a350:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801a354:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801a358:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801a35c:	4628      	mov	r0, r5
 801a35e:	f7fe ffe5 	bl	801932c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a362:	2301      	movs	r3, #1
 801a364:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a368:	bd38      	pop	{r3, r4, r5, pc}
 801a36a:	bf00      	nop
 801a36c:	43960000 	.word	0x43960000

0801a370 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801a370:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a372:	4604      	mov	r4, r0
 801a374:	a802      	add	r0, sp, #8
 801a376:	4616      	mov	r6, r2
 801a378:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801a37c:	461d      	mov	r5, r3
 801a37e:	4601      	mov	r1, r0
 801a380:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a384:	f7ff f928 	bl	80195d8 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801a388:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801a38c:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801a390:	4620      	mov	r0, r4
 801a392:	f7ff ff95 	bl	801a2c0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a396:	b002      	add	sp, #8
 801a398:	bd70      	pop	{r4, r5, r6, pc}

0801a39a <_ZN8touchgfx5Gauge9setCenterEii>:
 801a39a:	b570      	push	{r4, r5, r6, lr}
 801a39c:	4606      	mov	r6, r0
 801a39e:	460d      	mov	r5, r1
 801a3a0:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801a3a4:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801a3a8:	4614      	mov	r4, r2
 801a3aa:	f7ff ff89 	bl	801a2c0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a3ae:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801a3b2:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801a3b6:	1aa4      	subs	r4, r4, r2
 801a3b8:	1a6d      	subs	r5, r5, r1
 801a3ba:	0164      	lsls	r4, r4, #5
 801a3bc:	016d      	lsls	r5, r5, #5
 801a3be:	3410      	adds	r4, #16
 801a3c0:	3510      	adds	r5, #16
 801a3c2:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801a3c6:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 801a3ca:	bd70      	pop	{r4, r5, r6, pc}

0801a3cc <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801a3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a3d0:	0149      	lsls	r1, r1, #5
 801a3d2:	4299      	cmp	r1, r3
 801a3d4:	4604      	mov	r4, r0
 801a3d6:	9101      	str	r1, [sp, #4]
 801a3d8:	d00b      	beq.n	801a3f2 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801a3da:	4601      	mov	r1, r0
 801a3dc:	aa01      	add	r2, sp, #4
 801a3de:	a802      	add	r0, sp, #8
 801a3e0:	f7fe fbdd 	bl	8018b9e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801a3e4:	9b01      	ldr	r3, [sp, #4]
 801a3e6:	6423      	str	r3, [r4, #64]	; 0x40
 801a3e8:	6823      	ldr	r3, [r4, #0]
 801a3ea:	a902      	add	r1, sp, #8
 801a3ec:	691b      	ldr	r3, [r3, #16]
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	4798      	blx	r3
 801a3f2:	b004      	add	sp, #16
 801a3f4:	bd10      	pop	{r4, pc}
	...

0801a3f8 <_ZN8touchgfx5Gauge8setValueEi>:
 801a3f8:	b570      	push	{r4, r5, r6, lr}
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	f7fc fdc6 	bl	8016f8c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801a400:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801a404:	429a      	cmp	r2, r3
 801a406:	bfac      	ite	ge
 801a408:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801a40c:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801a410:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a414:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801a418:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a41c:	1ac9      	subs	r1, r1, r3
 801a41e:	2900      	cmp	r1, #0
 801a420:	bfb8      	it	lt
 801a422:	4249      	neglt	r1, r1
 801a424:	b289      	uxth	r1, r1
 801a426:	4620      	mov	r0, r4
 801a428:	f7fc fe43 	bl	80170b2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801a42c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a430:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801a434:	eddf 6a19 	vldr	s13, [pc, #100]	; 801a49c <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801a438:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a4a0 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801a43c:	429a      	cmp	r2, r3
 801a43e:	4605      	mov	r5, r0
 801a440:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801a444:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a448:	da15      	bge.n	801a476 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801a44a:	1b5b      	subs	r3, r3, r5
 801a44c:	ee07 3a90 	vmov	s15, r3
 801a450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a454:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a458:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a45c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a460:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a464:	f7ff f9b5 	bl	80197d2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a468:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a46c:	1b49      	subs	r1, r1, r5
 801a46e:	4630      	mov	r0, r6
 801a470:	f7ff ffac 	bl	801a3cc <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801a474:	bd70      	pop	{r4, r5, r6, pc}
 801a476:	442b      	add	r3, r5
 801a478:	ee07 3a90 	vmov	s15, r3
 801a47c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a480:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a484:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a488:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a48c:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a490:	f7ff f99f 	bl	80197d2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a494:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a498:	4429      	add	r1, r5
 801a49a:	e7e8      	b.n	801a46e <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801a49c:	43340000 	.word	0x43340000
 801a4a0:	40490fdb 	.word	0x40490fdb

0801a4a4 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801a4a4:	4291      	cmp	r1, r2
 801a4a6:	b510      	push	{r4, lr}
 801a4a8:	4604      	mov	r4, r0
 801a4aa:	d105      	bne.n	801a4b8 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801a4ac:	4b0b      	ldr	r3, [pc, #44]	; (801a4dc <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801a4ae:	4a0c      	ldr	r2, [pc, #48]	; (801a4e0 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 801a4b0:	480c      	ldr	r0, [pc, #48]	; (801a4e4 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 801a4b2:	215e      	movs	r1, #94	; 0x5e
 801a4b4:	f013 fd34 	bl	802df20 <__assert_func>
 801a4b8:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801a4bc:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801a4c0:	0149      	lsls	r1, r1, #5
 801a4c2:	0152      	lsls	r2, r2, #5
 801a4c4:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 801a4c8:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801a4cc:	f7fc fd12 	bl	8016ef4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801a4d0:	4601      	mov	r1, r0
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4d8:	f7ff bf8e 	b.w	801a3f8 <_ZN8touchgfx5Gauge8setValueEi>
 801a4dc:	080319e8 	.word	0x080319e8
 801a4e0:	08031b10 	.word	0x08031b10
 801a4e4:	080319ff 	.word	0x080319ff

0801a4e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801a4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a4ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4f0:	4299      	cmp	r1, r3
 801a4f2:	4606      	mov	r6, r0
 801a4f4:	d02a      	beq.n	801a54c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801a4f6:	4b16      	ldr	r3, [pc, #88]	; (801a550 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	b92b      	cbnz	r3, 801a508 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801a4fc:	4b15      	ldr	r3, [pc, #84]	; (801a554 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801a4fe:	4a16      	ldr	r2, [pc, #88]	; (801a558 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a500:	21ae      	movs	r1, #174	; 0xae
 801a502:	4816      	ldr	r0, [pc, #88]	; (801a55c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801a504:	f013 fd0c 	bl	802df20 <__assert_func>
 801a508:	4a15      	ldr	r2, [pc, #84]	; (801a560 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801a50a:	8812      	ldrh	r2, [r2, #0]
 801a50c:	428a      	cmp	r2, r1
 801a50e:	d803      	bhi.n	801a518 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801a510:	4b14      	ldr	r3, [pc, #80]	; (801a564 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801a512:	4a11      	ldr	r2, [pc, #68]	; (801a558 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a514:	21af      	movs	r1, #175	; 0xaf
 801a516:	e7f4      	b.n	801a502 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801a518:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a51c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a520:	4b11      	ldr	r3, [pc, #68]	; (801a568 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801a522:	7854      	ldrb	r4, [r2, #1]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a52a:	682b      	ldr	r3, [r5, #0]
 801a52c:	69df      	ldr	r7, [r3, #28]
 801a52e:	4b0f      	ldr	r3, [pc, #60]	; (801a56c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801a530:	6818      	ldr	r0, [r3, #0]
 801a532:	f7fa f825 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801a536:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a53a:	2300      	movs	r3, #0
 801a53c:	9300      	str	r3, [sp, #0]
 801a53e:	4602      	mov	r2, r0
 801a540:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801a542:	4621      	mov	r1, r4
 801a544:	4628      	mov	r0, r5
 801a546:	47b8      	blx	r7
 801a548:	b003      	add	sp, #12
 801a54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a54c:	2000      	movs	r0, #0
 801a54e:	e7fb      	b.n	801a548 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801a550:	200097f8 	.word	0x200097f8
 801a554:	0803181c 	.word	0x0803181c
 801a558:	08031bc4 	.word	0x08031bc4
 801a55c:	0803185e 	.word	0x0803185e
 801a560:	200097fc 	.word	0x200097fc
 801a564:	08031887 	.word	0x08031887
 801a568:	20009800 	.word	0x20009800
 801a56c:	20009804 	.word	0x20009804

0801a570 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801a570:	b570      	push	{r4, r5, r6, lr}
 801a572:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a578:	4299      	cmp	r1, r3
 801a57a:	4604      	mov	r4, r0
 801a57c:	d01e      	beq.n	801a5bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801a57e:	6803      	ldr	r3, [r0, #0]
 801a580:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a582:	4b0f      	ldr	r3, [pc, #60]	; (801a5c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	b92b      	cbnz	r3, 801a594 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801a588:	4b0e      	ldr	r3, [pc, #56]	; (801a5c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801a58a:	4a0f      	ldr	r2, [pc, #60]	; (801a5c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a58c:	21ae      	movs	r1, #174	; 0xae
 801a58e:	480f      	ldr	r0, [pc, #60]	; (801a5cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801a590:	f013 fcc6 	bl	802df20 <__assert_func>
 801a594:	4b0e      	ldr	r3, [pc, #56]	; (801a5d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801a596:	881b      	ldrh	r3, [r3, #0]
 801a598:	428b      	cmp	r3, r1
 801a59a:	d803      	bhi.n	801a5a4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801a59c:	4b0d      	ldr	r3, [pc, #52]	; (801a5d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801a59e:	4a0a      	ldr	r2, [pc, #40]	; (801a5c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a5a0:	21af      	movs	r1, #175	; 0xaf
 801a5a2:	e7f4      	b.n	801a58e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801a5a4:	4b0c      	ldr	r3, [pc, #48]	; (801a5d8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801a5a6:	6818      	ldr	r0, [r3, #0]
 801a5a8:	f7f9 ffea 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801a5ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a5ae:	4601      	mov	r1, r0
 801a5b0:	46ac      	mov	ip, r5
 801a5b2:	4620      	mov	r0, r4
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5ba:	4760      	bx	ip
 801a5bc:	2000      	movs	r0, #0
 801a5be:	bd70      	pop	{r4, r5, r6, pc}
 801a5c0:	200097f8 	.word	0x200097f8
 801a5c4:	0803181c 	.word	0x0803181c
 801a5c8:	08031bc4 	.word	0x08031bc4
 801a5cc:	0803185e 	.word	0x0803185e
 801a5d0:	200097fc 	.word	0x200097fc
 801a5d4:	08031887 	.word	0x08031887
 801a5d8:	20009804 	.word	0x20009804

0801a5dc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	b08c      	sub	sp, #48	; 0x30
 801a5ea:	4604      	mov	r4, r0
 801a5ec:	460e      	mov	r6, r1
 801a5ee:	d05d      	beq.n	801a6ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a5f0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801a6d0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801a5f4:	f8d8 2000 	ldr.w	r2, [r8]
 801a5f8:	b92a      	cbnz	r2, 801a606 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801a5fa:	4b2e      	ldr	r3, [pc, #184]	; (801a6b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801a5fc:	4a2e      	ldr	r2, [pc, #184]	; (801a6b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a5fe:	21ae      	movs	r1, #174	; 0xae
 801a600:	482e      	ldr	r0, [pc, #184]	; (801a6bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801a602:	f013 fc8d 	bl	802df20 <__assert_func>
 801a606:	4f2e      	ldr	r7, [pc, #184]	; (801a6c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801a608:	8839      	ldrh	r1, [r7, #0]
 801a60a:	4299      	cmp	r1, r3
 801a60c:	d803      	bhi.n	801a616 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801a60e:	4b2d      	ldr	r3, [pc, #180]	; (801a6c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801a610:	4a29      	ldr	r2, [pc, #164]	; (801a6b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a612:	21af      	movs	r1, #175	; 0xaf
 801a614:	e7f4      	b.n	801a600 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801a616:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a61a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a61e:	4b2a      	ldr	r3, [pc, #168]	; (801a6c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a626:	2a00      	cmp	r2, #0
 801a628:	d040      	beq.n	801a6ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a62a:	784b      	ldrb	r3, [r1, #1]
 801a62c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801a630:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a634:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801a638:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801a63c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801a640:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a642:	9207      	str	r2, [sp, #28]
 801a644:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a648:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a64c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a650:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a654:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a658:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a65c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a660:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a664:	f88d a020 	strb.w	sl, [sp, #32]
 801a668:	9009      	str	r0, [sp, #36]	; 0x24
 801a66a:	f7f5 fcbb 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 801a66e:	ad05      	add	r5, sp, #20
 801a670:	4681      	mov	r9, r0
 801a672:	4621      	mov	r1, r4
 801a674:	4628      	mov	r0, r5
 801a676:	f002 fd97 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a67a:	f8d8 3000 	ldr.w	r3, [r8]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d0bb      	beq.n	801a5fa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801a682:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a684:	883b      	ldrh	r3, [r7, #0]
 801a686:	428b      	cmp	r3, r1
 801a688:	d9c1      	bls.n	801a60e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801a68a:	4b10      	ldr	r3, [pc, #64]	; (801a6cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801a68c:	6818      	ldr	r0, [r3, #0]
 801a68e:	f7f9 ff77 	bl	8014580 <_ZNK8touchgfx5Texts7getTextEt>
 801a692:	2300      	movs	r3, #0
 801a694:	9303      	str	r3, [sp, #12]
 801a696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a698:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801a69c:	ab07      	add	r3, sp, #28
 801a69e:	9300      	str	r3, [sp, #0]
 801a6a0:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a6a4:	4633      	mov	r3, r6
 801a6a6:	4648      	mov	r0, r9
 801a6a8:	f7f9 fefb 	bl	80144a2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a6ac:	b00c      	add	sp, #48	; 0x30
 801a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6b2:	bf00      	nop
 801a6b4:	0803181c 	.word	0x0803181c
 801a6b8:	08031bc4 	.word	0x08031bc4
 801a6bc:	0803185e 	.word	0x0803185e
 801a6c0:	200097fc 	.word	0x200097fc
 801a6c4:	08031887 	.word	0x08031887
 801a6c8:	20009800 	.word	0x20009800
 801a6cc:	20009804 	.word	0x20009804
 801a6d0:	200097f8 	.word	0x200097f8

0801a6d4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a6d4:	b570      	push	{r4, r5, r6, lr}
 801a6d6:	880b      	ldrh	r3, [r1, #0]
 801a6d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a6da:	4604      	mov	r4, r0
 801a6dc:	4608      	mov	r0, r1
 801a6de:	460d      	mov	r5, r1
 801a6e0:	f005 f906 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a6e4:	4606      	mov	r6, r0
 801a6e6:	4628      	mov	r0, r5
 801a6e8:	f005 f93c 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a6ec:	6823      	ldr	r3, [r4, #0]
 801a6ee:	4605      	mov	r5, r0
 801a6f0:	b231      	sxth	r1, r6
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6f6:	4798      	blx	r3
 801a6f8:	6823      	ldr	r3, [r4, #0]
 801a6fa:	b229      	sxth	r1, r5
 801a6fc:	4620      	mov	r0, r4
 801a6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a704:	4718      	bx	r3

0801a706 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a706:	b510      	push	{r4, lr}
 801a708:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a70c:	2bff      	cmp	r3, #255	; 0xff
 801a70e:	4604      	mov	r4, r0
 801a710:	d006      	beq.n	801a720 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a712:	2300      	movs	r3, #0
 801a714:	8003      	strh	r3, [r0, #0]
 801a716:	8043      	strh	r3, [r0, #2]
 801a718:	8083      	strh	r3, [r0, #4]
 801a71a:	80c3      	strh	r3, [r0, #6]
 801a71c:	4620      	mov	r0, r4
 801a71e:	bd10      	pop	{r4, pc}
 801a720:	3126      	adds	r1, #38	; 0x26
 801a722:	f005 f959 	bl	801f9d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a726:	e7f9      	b.n	801a71c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a728 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a72c:	4604      	mov	r4, r0
 801a72e:	b088      	sub	sp, #32
 801a730:	f854 3b26 	ldr.w	r3, [r4], #38
 801a734:	2500      	movs	r5, #0
 801a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a738:	460f      	mov	r7, r1
 801a73a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a73e:	a904      	add	r1, sp, #16
 801a740:	4606      	mov	r6, r0
 801a742:	4798      	blx	r3
 801a744:	4620      	mov	r0, r4
 801a746:	f005 f8d3 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a74a:	4680      	mov	r8, r0
 801a74c:	4620      	mov	r0, r4
 801a74e:	f005 f909 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a752:	9506      	str	r5, [sp, #24]
 801a754:	ad06      	add	r5, sp, #24
 801a756:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a75a:	4639      	mov	r1, r7
 801a75c:	4628      	mov	r0, r5
 801a75e:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a762:	f7fc fef1 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801a766:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	dd19      	ble.n	801a7a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a76e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a772:	2b00      	cmp	r3, #0
 801a774:	dd15      	ble.n	801a7a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a776:	4b0c      	ldr	r3, [pc, #48]	; (801a7a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a77e:	b10a      	cbz	r2, 801a784 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a780:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a782:	b900      	cbnz	r0, 801a786 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a784:	6898      	ldr	r0, [r3, #8]
 801a786:	6801      	ldr	r1, [r0, #0]
 801a788:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a78c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a790:	2701      	movs	r7, #1
 801a792:	9702      	str	r7, [sp, #8]
 801a794:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a798:	e9cd 5600 	strd	r5, r6, [sp]
 801a79c:	688d      	ldr	r5, [r1, #8]
 801a79e:	4621      	mov	r1, r4
 801a7a0:	47a8      	blx	r5
 801a7a2:	b008      	add	sp, #32
 801a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7a8:	200097a8 	.word	0x200097a8

0801a7ac <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a7ac:	b510      	push	{r4, lr}
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7b2:	460c      	mov	r4, r1
 801a7b4:	4798      	blx	r3
 801a7b6:	1b03      	subs	r3, r0, r4
 801a7b8:	4258      	negs	r0, r3
 801a7ba:	4158      	adcs	r0, r3
 801a7bc:	bd10      	pop	{r4, pc}
	...

0801a7c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a7c0:	4b01      	ldr	r3, [pc, #4]	; (801a7c8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a7c2:	6019      	str	r1, [r3, #0]
 801a7c4:	4770      	bx	lr
 801a7c6:	bf00      	nop
 801a7c8:	200097b0 	.word	0x200097b0

0801a7cc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7d0:	4696      	mov	lr, r2
 801a7d2:	4605      	mov	r5, r0
 801a7d4:	4614      	mov	r4, r2
 801a7d6:	460e      	mov	r6, r1
 801a7d8:	461f      	mov	r7, r3
 801a7da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a7de:	b097      	sub	sp, #92	; 0x5c
 801a7e0:	f10d 0c1c 	add.w	ip, sp, #28
 801a7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7e8:	f8de 3000 	ldr.w	r3, [lr]
 801a7ec:	f8cc 3000 	str.w	r3, [ip]
 801a7f0:	f104 0e14 	add.w	lr, r4, #20
 801a7f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a7f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a7fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a800:	f8de 3000 	ldr.w	r3, [lr]
 801a804:	f8cc 3000 	str.w	r3, [ip]
 801a808:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a80c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a810:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a814:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a818:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a81c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a820:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a824:	f8de 3000 	ldr.w	r3, [lr]
 801a828:	f8cc 3000 	str.w	r3, [ip]
 801a82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a82e:	682b      	ldr	r3, [r5, #0]
 801a830:	9201      	str	r2, [sp, #4]
 801a832:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a836:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a838:	9200      	str	r2, [sp, #0]
 801a83a:	f8cd 8008 	str.w	r8, [sp, #8]
 801a83e:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801a842:	aa07      	add	r2, sp, #28
 801a844:	463b      	mov	r3, r7
 801a846:	4631      	mov	r1, r6
 801a848:	4628      	mov	r0, r5
 801a84a:	47d8      	blx	fp
 801a84c:	46a6      	mov	lr, r4
 801a84e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a852:	f10d 0c1c 	add.w	ip, sp, #28
 801a856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a85a:	f8de 3000 	ldr.w	r3, [lr]
 801a85e:	f8cc 3000 	str.w	r3, [ip]
 801a862:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a866:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a86a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a86e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a872:	343c      	adds	r4, #60	; 0x3c
 801a874:	f8de 3000 	ldr.w	r3, [lr]
 801a878:	f8cc 3000 	str.w	r3, [ip]
 801a87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a87e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a886:	6823      	ldr	r3, [r4, #0]
 801a888:	f8cc 3000 	str.w	r3, [ip]
 801a88c:	682b      	ldr	r3, [r5, #0]
 801a88e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a892:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a894:	9201      	str	r2, [sp, #4]
 801a896:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a898:	9200      	str	r2, [sp, #0]
 801a89a:	f8cd 8008 	str.w	r8, [sp, #8]
 801a89e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801a8a0:	aa07      	add	r2, sp, #28
 801a8a2:	463b      	mov	r3, r7
 801a8a4:	4631      	mov	r1, r6
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	47a0      	blx	r4
 801a8aa:	b017      	add	sp, #92	; 0x5c
 801a8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8b0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a8b0:	2000      	movs	r0, #0
 801a8b2:	4770      	bx	lr

0801a8b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8b8:	b08d      	sub	sp, #52	; 0x34
 801a8ba:	4688      	mov	r8, r1
 801a8bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a8be:	f8d3 c000 	ldr.w	ip, [r3]
 801a8c2:	680f      	ldr	r7, [r1, #0]
 801a8c4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a8c8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a8cc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a8d0:	edd3 6a07 	vldr	s13, [r3, #28]
 801a8d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a8d6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a8da:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a8de:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a8e2:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a8e6:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a8ea:	eba7 070c 	sub.w	r7, r7, ip
 801a8ee:	42bc      	cmp	r4, r7
 801a8f0:	bfa8      	it	ge
 801a8f2:	463c      	movge	r4, r7
 801a8f4:	ee07 4a90 	vmov	s15, r4
 801a8f8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a8fc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a900:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a904:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a908:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a90c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a910:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a914:	eb09 0e0c 	add.w	lr, r9, ip
 801a918:	4571      	cmp	r1, lr
 801a91a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a91e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a922:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a926:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a92a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a92e:	f340 808d 	ble.w	801aa4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801a932:	eba1 060e 	sub.w	r6, r1, lr
 801a936:	fb96 f5f4 	sdiv	r5, r6, r4
 801a93a:	ee07 5a10 	vmov	s14, r5
 801a93e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a942:	2d00      	cmp	r5, #0
 801a944:	fb04 6615 	mls	r6, r4, r5, r6
 801a948:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a94c:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a950:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a954:	dd13      	ble.n	801a97e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801a956:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a95a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a95e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a966:	bf18      	it	ne
 801a968:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a96c:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a970:	bf08      	it	eq
 801a972:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a976:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a97a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a97e:	fb05 f204 	mul.w	r2, r5, r4
 801a982:	1abf      	subs	r7, r7, r2
 801a984:	4494      	add	ip, r2
 801a986:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a98a:	4411      	add	r1, r2
 801a98c:	eb09 020c 	add.w	r2, r9, ip
 801a990:	443a      	add	r2, r7
 801a992:	b209      	sxth	r1, r1
 801a994:	428a      	cmp	r2, r1
 801a996:	bfc4      	itt	gt
 801a998:	eba1 0209 	subgt.w	r2, r1, r9
 801a99c:	eba2 070c 	subgt.w	r7, r2, ip
 801a9a0:	2f00      	cmp	r7, #0
 801a9a2:	dd50      	ble.n	801aa46 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801a9a4:	fb97 f1f4 	sdiv	r1, r7, r4
 801a9a8:	fb04 7211 	mls	r2, r4, r1, r7
 801a9ac:	b90a      	cbnz	r2, 801a9b2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801a9ae:	3901      	subs	r1, #1
 801a9b0:	4622      	mov	r2, r4
 801a9b2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a9b6:	6840      	ldr	r0, [r0, #4]
 801a9b8:	900b      	str	r0, [sp, #44]	; 0x2c
 801a9ba:	f8d0 a000 	ldr.w	sl, [r0]
 801a9be:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a9c0:	9008      	str	r0, [sp, #32]
 801a9c2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a9c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a9c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a9cc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a9d0:	695b      	ldr	r3, [r3, #20]
 801a9d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a9d4:	445b      	add	r3, fp
 801a9d6:	eef0 6a42 	vmov.f32	s13, s4
 801a9da:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a9de:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a9e2:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a9e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9ea:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a9ee:	9307      	str	r3, [sp, #28]
 801a9f0:	ee17 7a90 	vmov	r7, s15
 801a9f4:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a9f8:	eeb0 7a61 	vmov.f32	s14, s3
 801a9fc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801aa00:	ee16 3a90 	vmov	r3, s13
 801aa04:	fb97 f7f4 	sdiv	r7, r7, r4
 801aa08:	ee17 ca90 	vmov	ip, s15
 801aa0c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801aa10:	fb9c fcf4 	sdiv	ip, ip, r4
 801aa14:	fb0c 3306 	mla	r3, ip, r6, r3
 801aa18:	9302      	str	r3, [sp, #8]
 801aa1a:	ee17 3a10 	vmov	r3, s14
 801aa1e:	44b6      	add	lr, r6
 801aa20:	fb04 e505 	mla	r5, r4, r5, lr
 801aa24:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801aa28:	fb07 3706 	mla	r7, r7, r6, r3
 801aa2c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801aa30:	e9cd 4700 	strd	r4, r7, [sp]
 801aa34:	2900      	cmp	r1, #0
 801aa36:	bfcc      	ite	gt
 801aa38:	46a1      	movgt	r9, r4
 801aa3a:	4691      	movle	r9, r2
 801aa3c:	eba9 0306 	sub.w	r3, r9, r6
 801aa40:	f8da 4008 	ldr.w	r4, [sl, #8]
 801aa44:	47a0      	blx	r4
 801aa46:	b00d      	add	sp, #52	; 0x34
 801aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4c:	2500      	movs	r5, #0
 801aa4e:	462e      	mov	r6, r5
 801aa50:	e799      	b.n	801a986 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801aa54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa58:	b0db      	sub	sp, #364	; 0x16c
 801aa5a:	461d      	mov	r5, r3
 801aa5c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801aa60:	930a      	str	r3, [sp, #40]	; 0x28
 801aa62:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801aa66:	930b      	str	r3, [sp, #44]	; 0x2c
 801aa68:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801aa6c:	9310      	str	r3, [sp, #64]	; 0x40
 801aa6e:	6803      	ldr	r3, [r0, #0]
 801aa70:	910f      	str	r1, [sp, #60]	; 0x3c
 801aa72:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801aa74:	9009      	str	r0, [sp, #36]	; 0x24
 801aa76:	4614      	mov	r4, r2
 801aa78:	4629      	mov	r1, r5
 801aa7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801aa7e:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801aa82:	47b8      	blx	r7
 801aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa86:	6058      	str	r0, [r3, #4]
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	f000 83a1 	beq.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa8e:	682b      	ldr	r3, [r5, #0]
 801aa90:	9314      	str	r3, [sp, #80]	; 0x50
 801aa92:	686b      	ldr	r3, [r5, #4]
 801aa94:	9315      	str	r3, [sp, #84]	; 0x54
 801aa96:	4bc4      	ldr	r3, [pc, #784]	; (801ada8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801aa98:	ed94 7a02 	vldr	s14, [r4, #8]
 801aa9c:	7819      	ldrb	r1, [r3, #0]
 801aa9e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801aaa2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801aaa6:	2900      	cmp	r1, #0
 801aaa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aaac:	bf16      	itet	ne
 801aaae:	4619      	movne	r1, r3
 801aab0:	4611      	moveq	r1, r2
 801aab2:	4613      	movne	r3, r2
 801aab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aab8:	9116      	str	r1, [sp, #88]	; 0x58
 801aaba:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801aabe:	f240 8387 	bls.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aac2:	ed94 7a07 	vldr	s14, [r4, #28]
 801aac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aace:	f240 837f 	bls.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aad2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801aad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aade:	f240 8377 	bls.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aae2:	6822      	ldr	r2, [r4, #0]
 801aae4:	4bb1      	ldr	r3, [pc, #708]	; (801adac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801aae6:	429a      	cmp	r2, r3
 801aae8:	f2c0 8372 	blt.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aaec:	49b0      	ldr	r1, [pc, #704]	; (801adb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801aaee:	6963      	ldr	r3, [r4, #20]
 801aaf0:	428a      	cmp	r2, r1
 801aaf2:	f300 836d 	bgt.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aaf6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801aafa:	48ae      	ldr	r0, [pc, #696]	; (801adb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801aafc:	33ff      	adds	r3, #255	; 0xff
 801aafe:	4283      	cmp	r3, r0
 801ab00:	f200 8366 	bhi.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ab04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ab06:	4dac      	ldr	r5, [pc, #688]	; (801adb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801ab08:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801ab0c:	33ff      	adds	r3, #255	; 0xff
 801ab0e:	42ab      	cmp	r3, r5
 801ab10:	f200 835e 	bhi.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ab14:	6862      	ldr	r2, [r4, #4]
 801ab16:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801ab1a:	33ff      	adds	r3, #255	; 0xff
 801ab1c:	4283      	cmp	r3, r0
 801ab1e:	f200 8357 	bhi.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ab22:	69a1      	ldr	r1, [r4, #24]
 801ab24:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801ab28:	33ff      	adds	r3, #255	; 0xff
 801ab2a:	4283      	cmp	r3, r0
 801ab2c:	f200 8350 	bhi.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ab30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ab32:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801ab36:	30ff      	adds	r0, #255	; 0xff
 801ab38:	42a8      	cmp	r0, r5
 801ab3a:	f200 8349 	bhi.w	801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ab3e:	428a      	cmp	r2, r1
 801ab40:	f280 8110 	bge.w	801ad64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801ab44:	429a      	cmp	r2, r3
 801ab46:	f300 8119 	bgt.w	801ad7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801ab4a:	4299      	cmp	r1, r3
 801ab4c:	f280 811d 	bge.w	801ad8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801ab50:	2502      	movs	r5, #2
 801ab52:	2701      	movs	r7, #1
 801ab54:	46a9      	mov	r9, r5
 801ab56:	46b8      	mov	r8, r7
 801ab58:	f04f 0a00 	mov.w	sl, #0
 801ab5c:	4621      	mov	r1, r4
 801ab5e:	a849      	add	r0, sp, #292	; 0x124
 801ab60:	f003 fed6 	bl	801e910 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801ab64:	4622      	mov	r2, r4
 801ab66:	4653      	mov	r3, sl
 801ab68:	a949      	add	r1, sp, #292	; 0x124
 801ab6a:	f8cd 9000 	str.w	r9, [sp]
 801ab6e:	a819      	add	r0, sp, #100	; 0x64
 801ab70:	f003 fffe 	bl	801eb70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ab74:	4622      	mov	r2, r4
 801ab76:	4653      	mov	r3, sl
 801ab78:	a949      	add	r1, sp, #292	; 0x124
 801ab7a:	f8cd 8000 	str.w	r8, [sp]
 801ab7e:	a829      	add	r0, sp, #164	; 0xa4
 801ab80:	f003 fff6 	bl	801eb70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ab84:	4643      	mov	r3, r8
 801ab86:	4622      	mov	r2, r4
 801ab88:	a949      	add	r1, sp, #292	; 0x124
 801ab8a:	f8cd 9000 	str.w	r9, [sp]
 801ab8e:	a839      	add	r0, sp, #228	; 0xe4
 801ab90:	f003 ffee 	bl	801eb70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ab94:	42af      	cmp	r7, r5
 801ab96:	bfb5      	itete	lt
 801ab98:	2300      	movlt	r3, #0
 801ab9a:	2301      	movge	r3, #1
 801ab9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ab9e:	930e      	strge	r3, [sp, #56]	; 0x38
 801aba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aba2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aba6:	af12      	add	r7, sp, #72	; 0x48
 801aba8:	bfb9      	ittee	lt
 801abaa:	ad29      	addlt	r5, sp, #164	; 0xa4
 801abac:	ac19      	addlt	r4, sp, #100	; 0x64
 801abae:	ad19      	addge	r5, sp, #100	; 0x64
 801abb0:	ac29      	addge	r4, sp, #164	; 0xa4
 801abb2:	e887 0003 	stmia.w	r7, {r0, r1}
 801abb6:	b928      	cbnz	r0, 801abc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801abb8:	4b80      	ldr	r3, [pc, #512]	; (801adbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801abba:	6818      	ldr	r0, [r3, #0]
 801abbc:	6803      	ldr	r3, [r0, #0]
 801abbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abc0:	4798      	blx	r3
 801abc2:	6038      	str	r0, [r7, #0]
 801abc4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801abc6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801abca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801abce:	930c      	str	r3, [sp, #48]	; 0x30
 801abd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801abd2:	6963      	ldr	r3, [r4, #20]
 801abd4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801abd6:	440b      	add	r3, r1
 801abd8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801abdc:	4408      	add	r0, r1
 801abde:	b200      	sxth	r0, r0
 801abe0:	4283      	cmp	r3, r0
 801abe2:	900d      	str	r0, [sp, #52]	; 0x34
 801abe4:	f280 80dd 	bge.w	801ada2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801abe8:	428b      	cmp	r3, r1
 801abea:	da08      	bge.n	801abfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801abec:	2a00      	cmp	r2, #0
 801abee:	dd06      	ble.n	801abfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801abf0:	1acb      	subs	r3, r1, r3
 801abf2:	429a      	cmp	r2, r3
 801abf4:	f2c0 80e4 	blt.w	801adc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	f300 80e2 	bgt.w	801adc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801abfe:	6967      	ldr	r7, [r4, #20]
 801ac00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac02:	443b      	add	r3, r7
 801ac04:	461f      	mov	r7, r3
 801ac06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac08:	1bdf      	subs	r7, r3, r7
 801ac0a:	4297      	cmp	r7, r2
 801ac0c:	bfa8      	it	ge
 801ac0e:	4617      	movge	r7, r2
 801ac10:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ac14:	2f00      	cmp	r7, #0
 801ac16:	f340 8166 	ble.w	801aee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801ac1a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ac1c:	6829      	ldr	r1, [r5, #0]
 801ac1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac22:	f9bb 3000 	ldrsh.w	r3, [fp]
 801ac26:	6820      	ldr	r0, [r4, #0]
 801ac28:	4411      	add	r1, r2
 801ac2a:	4299      	cmp	r1, r3
 801ac2c:	dd1a      	ble.n	801ac64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801ac2e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ac32:	440b      	add	r3, r1
 801ac34:	4402      	add	r2, r0
 801ac36:	b21b      	sxth	r3, r3
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	dc13      	bgt.n	801ac64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801ac3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	9206      	str	r2, [sp, #24]
 801ac44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ac46:	9205      	str	r2, [sp, #20]
 801ac48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac4a:	9500      	str	r5, [sp, #0]
 801ac4c:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ac50:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ac52:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ac54:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ac58:	a912      	add	r1, sp, #72	; 0x48
 801ac5a:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801ac5e:	aa49      	add	r2, sp, #292	; 0x124
 801ac60:	4623      	mov	r3, r4
 801ac62:	47c8      	blx	r9
 801ac64:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ac68:	441a      	add	r2, r3
 801ac6a:	6963      	ldr	r3, [r4, #20]
 801ac6c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801ac70:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801ac74:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801ac78:	68a1      	ldr	r1, [r4, #8]
 801ac7a:	ed94 6a08 	vldr	s12, [r4, #32]
 801ac7e:	6022      	str	r2, [r4, #0]
 801ac80:	3301      	adds	r3, #1
 801ac82:	6163      	str	r3, [r4, #20]
 801ac84:	69a3      	ldr	r3, [r4, #24]
 801ac86:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ac8a:	3b01      	subs	r3, #1
 801ac8c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801ac90:	61a3      	str	r3, [r4, #24]
 801ac92:	6923      	ldr	r3, [r4, #16]
 801ac94:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ac9c:	edd4 6a07 	vldr	s13, [r4, #28]
 801aca0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aca4:	440b      	add	r3, r1
 801aca6:	68e1      	ldr	r1, [r4, #12]
 801aca8:	6123      	str	r3, [r4, #16]
 801acaa:	ee76 6a86 	vadd.f32	s13, s13, s12
 801acae:	428b      	cmp	r3, r1
 801acb0:	edc4 6a07 	vstr	s13, [r4, #28]
 801acb4:	db15      	blt.n	801ace2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801acb6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801acba:	ee76 6a26 	vadd.f32	s13, s12, s13
 801acbe:	3201      	adds	r2, #1
 801acc0:	edc4 6a07 	vstr	s13, [r4, #28]
 801acc4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801acc8:	6022      	str	r2, [r4, #0]
 801acca:	ee36 7a87 	vadd.f32	s14, s13, s14
 801acce:	1a5b      	subs	r3, r3, r1
 801acd0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801acd4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801acd8:	6123      	str	r3, [r4, #16]
 801acda:	ee77 7a27 	vadd.f32	s15, s14, s15
 801acde:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ace2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ace6:	441a      	add	r2, r3
 801ace8:	696b      	ldr	r3, [r5, #20]
 801acea:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801acee:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801acf2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801acf6:	68a9      	ldr	r1, [r5, #8]
 801acf8:	ed95 6a08 	vldr	s12, [r5, #32]
 801acfc:	602a      	str	r2, [r5, #0]
 801acfe:	3301      	adds	r3, #1
 801ad00:	616b      	str	r3, [r5, #20]
 801ad02:	69ab      	ldr	r3, [r5, #24]
 801ad04:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ad08:	3b01      	subs	r3, #1
 801ad0a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ad0e:	61ab      	str	r3, [r5, #24]
 801ad10:	692b      	ldr	r3, [r5, #16]
 801ad12:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad1a:	edd5 6a07 	vldr	s13, [r5, #28]
 801ad1e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ad22:	440b      	add	r3, r1
 801ad24:	68e9      	ldr	r1, [r5, #12]
 801ad26:	612b      	str	r3, [r5, #16]
 801ad28:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ad2c:	428b      	cmp	r3, r1
 801ad2e:	edc5 6a07 	vstr	s13, [r5, #28]
 801ad32:	db15      	blt.n	801ad60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801ad34:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ad38:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ad3c:	3201      	adds	r2, #1
 801ad3e:	edc5 6a07 	vstr	s13, [r5, #28]
 801ad42:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ad46:	602a      	str	r2, [r5, #0]
 801ad48:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ad4c:	1a5b      	subs	r3, r3, r1
 801ad4e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ad52:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ad56:	612b      	str	r3, [r5, #16]
 801ad58:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ad5c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ad60:	3f01      	subs	r7, #1
 801ad62:	e757      	b.n	801ac14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801ad64:	4299      	cmp	r1, r3
 801ad66:	dc13      	bgt.n	801ad90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	da14      	bge.n	801ad96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801ad6c:	2502      	movs	r5, #2
 801ad6e:	2703      	movs	r7, #3
 801ad70:	46a9      	mov	r9, r5
 801ad72:	f04f 0800 	mov.w	r8, #0
 801ad76:	f04f 0a01 	mov.w	sl, #1
 801ad7a:	e6ef      	b.n	801ab5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ad7c:	2501      	movs	r5, #1
 801ad7e:	2700      	movs	r7, #0
 801ad80:	46a9      	mov	r9, r5
 801ad82:	46b8      	mov	r8, r7
 801ad84:	f04f 0a02 	mov.w	sl, #2
 801ad88:	e6e8      	b.n	801ab5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ad8a:	2501      	movs	r5, #1
 801ad8c:	2702      	movs	r7, #2
 801ad8e:	e6e1      	b.n	801ab54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801ad90:	2500      	movs	r5, #0
 801ad92:	2701      	movs	r7, #1
 801ad94:	e7f4      	b.n	801ad80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801ad96:	2702      	movs	r7, #2
 801ad98:	2503      	movs	r5, #3
 801ad9a:	f04f 0900 	mov.w	r9, #0
 801ad9e:	46b8      	mov	r8, r7
 801ada0:	e7e9      	b.n	801ad76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801ada2:	4613      	mov	r3, r2
 801ada4:	e728      	b.n	801abf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801ada6:	bf00      	nop
 801ada8:	200097a0 	.word	0x200097a0
 801adac:	fffd8f01 	.word	0xfffd8f01
 801adb0:	00027100 	.word	0x00027100
 801adb4:	0004e1ff 	.word	0x0004e1ff
 801adb8:	0004e1fe 	.word	0x0004e1fe
 801adbc:	200097a8 	.word	0x200097a8
 801adc0:	4613      	mov	r3, r2
 801adc2:	992b      	ldr	r1, [sp, #172]	; 0xac
 801adc4:	9111      	str	r1, [sp, #68]	; 0x44
 801adc6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801adca:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801adce:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801add0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801add4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801add8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801addc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801ade0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801ade4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ade8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801adec:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801adf0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801adf4:	469e      	mov	lr, r3
 801adf6:	469c      	mov	ip, r3
 801adf8:	f04f 0900 	mov.w	r9, #0
 801adfc:	f1bc 0f00 	cmp.w	ip, #0
 801ae00:	d147      	bne.n	801ae92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801ae02:	eb03 0c07 	add.w	ip, r3, r7
 801ae06:	1ad7      	subs	r7, r2, r3
 801ae08:	f1b9 0f00 	cmp.w	r9, #0
 801ae0c:	d009      	beq.n	801ae22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801ae0e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801ae12:	9029      	str	r0, [sp, #164]	; 0xa4
 801ae14:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801ae18:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801ae1c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801ae20:	912d      	str	r1, [sp, #180]	; 0xb4
 801ae22:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ae24:	9111      	str	r1, [sp, #68]	; 0x44
 801ae26:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ae2a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ae2e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ae32:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ae36:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ae3a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ae3e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ae42:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ae46:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ae4a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ae4e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ae52:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ae56:	f04f 0800 	mov.w	r8, #0
 801ae5a:	f1be 0f00 	cmp.w	lr, #0
 801ae5e:	d031      	beq.n	801aec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ae60:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ae62:	4431      	add	r1, r6
 801ae64:	4549      	cmp	r1, r9
 801ae66:	4450      	add	r0, sl
 801ae68:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ae6c:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ae70:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ae74:	db08      	blt.n	801ae88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ae76:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ae7a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ae7e:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ae82:	3001      	adds	r0, #1
 801ae84:	eba1 0109 	sub.w	r1, r1, r9
 801ae88:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ae8c:	f04f 0801 	mov.w	r8, #1
 801ae90:	e7e3      	b.n	801ae5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ae92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ae94:	4431      	add	r1, r6
 801ae96:	4541      	cmp	r1, r8
 801ae98:	4450      	add	r0, sl
 801ae9a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ae9e:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aea2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801aea6:	db08      	blt.n	801aeba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801aea8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801aeac:	ee37 7a25 	vadd.f32	s14, s14, s11
 801aeb0:	ee77 7a86 	vadd.f32	s15, s15, s12
 801aeb4:	3001      	adds	r0, #1
 801aeb6:	eba1 0108 	sub.w	r1, r1, r8
 801aeba:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aebe:	f04f 0901 	mov.w	r9, #1
 801aec2:	e79b      	b.n	801adfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801aec4:	449c      	add	ip, r3
 801aec6:	1aff      	subs	r7, r7, r3
 801aec8:	f1b8 0f00 	cmp.w	r8, #0
 801aecc:	d009      	beq.n	801aee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801aece:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801aed2:	9019      	str	r0, [sp, #100]	; 0x64
 801aed4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801aed8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801aedc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801aee0:	911d      	str	r1, [sp, #116]	; 0x74
 801aee2:	1ad2      	subs	r2, r2, r3
 801aee4:	e68b      	b.n	801abfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aee8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	f000 80d1 	beq.w	801b092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801aef0:	ad19      	add	r5, sp, #100	; 0x64
 801aef2:	ac39      	add	r4, sp, #228	; 0xe4
 801aef4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aef6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aefa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aefe:	930c      	str	r3, [sp, #48]	; 0x30
 801af00:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af02:	6963      	ldr	r3, [r4, #20]
 801af04:	440b      	add	r3, r1
 801af06:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801af0a:	4408      	add	r0, r1
 801af0c:	b200      	sxth	r0, r0
 801af0e:	4283      	cmp	r3, r0
 801af10:	900d      	str	r0, [sp, #52]	; 0x34
 801af12:	f280 80c1 	bge.w	801b098 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801af16:	428b      	cmp	r3, r1
 801af18:	da08      	bge.n	801af2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801af1a:	2a00      	cmp	r2, #0
 801af1c:	dd06      	ble.n	801af2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801af1e:	1acb      	subs	r3, r1, r3
 801af20:	429a      	cmp	r2, r3
 801af22:	f2c0 80bb 	blt.w	801b09c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801af26:	2b00      	cmp	r3, #0
 801af28:	f300 80b9 	bgt.w	801b09e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801af2c:	6967      	ldr	r7, [r4, #20]
 801af2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af30:	443b      	add	r3, r7
 801af32:	461f      	mov	r7, r3
 801af34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af36:	1bdf      	subs	r7, r3, r7
 801af38:	4297      	cmp	r7, r2
 801af3a:	bfa8      	it	ge
 801af3c:	4617      	movge	r7, r2
 801af3e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801af42:	2f00      	cmp	r7, #0
 801af44:	f340 813c 	ble.w	801b1c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801af48:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801af4a:	6829      	ldr	r1, [r5, #0]
 801af4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af50:	f9bb 3000 	ldrsh.w	r3, [fp]
 801af54:	6820      	ldr	r0, [r4, #0]
 801af56:	4411      	add	r1, r2
 801af58:	4299      	cmp	r1, r3
 801af5a:	dd1a      	ble.n	801af92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801af5c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801af60:	440b      	add	r3, r1
 801af62:	4402      	add	r2, r0
 801af64:	b21b      	sxth	r3, r3
 801af66:	429a      	cmp	r2, r3
 801af68:	dc13      	bgt.n	801af92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801af6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	9206      	str	r2, [sp, #24]
 801af72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af74:	9205      	str	r2, [sp, #20]
 801af76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af78:	9500      	str	r5, [sp, #0]
 801af7a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801af7e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801af80:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af82:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801af86:	a912      	add	r1, sp, #72	; 0x48
 801af88:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801af8c:	aa49      	add	r2, sp, #292	; 0x124
 801af8e:	4623      	mov	r3, r4
 801af90:	47c8      	blx	r9
 801af92:	e9d4 2300 	ldrd	r2, r3, [r4]
 801af96:	441a      	add	r2, r3
 801af98:	6963      	ldr	r3, [r4, #20]
 801af9a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801af9e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801afa2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801afa6:	68a1      	ldr	r1, [r4, #8]
 801afa8:	ed94 6a08 	vldr	s12, [r4, #32]
 801afac:	6022      	str	r2, [r4, #0]
 801afae:	3301      	adds	r3, #1
 801afb0:	6163      	str	r3, [r4, #20]
 801afb2:	69a3      	ldr	r3, [r4, #24]
 801afb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801afb8:	3b01      	subs	r3, #1
 801afba:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801afbe:	61a3      	str	r3, [r4, #24]
 801afc0:	6923      	ldr	r3, [r4, #16]
 801afc2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801afc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801afca:	edd4 6a07 	vldr	s13, [r4, #28]
 801afce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801afd2:	440b      	add	r3, r1
 801afd4:	68e1      	ldr	r1, [r4, #12]
 801afd6:	6123      	str	r3, [r4, #16]
 801afd8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801afdc:	428b      	cmp	r3, r1
 801afde:	edc4 6a07 	vstr	s13, [r4, #28]
 801afe2:	db15      	blt.n	801b010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801afe4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801afe8:	ee76 6a26 	vadd.f32	s13, s12, s13
 801afec:	3201      	adds	r2, #1
 801afee:	edc4 6a07 	vstr	s13, [r4, #28]
 801aff2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801aff6:	6022      	str	r2, [r4, #0]
 801aff8:	ee36 7a87 	vadd.f32	s14, s13, s14
 801affc:	1a5b      	subs	r3, r3, r1
 801affe:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b002:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801b006:	6123      	str	r3, [r4, #16]
 801b008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b00c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b010:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b014:	441a      	add	r2, r3
 801b016:	696b      	ldr	r3, [r5, #20]
 801b018:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801b01c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801b020:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801b024:	68a9      	ldr	r1, [r5, #8]
 801b026:	ed95 6a08 	vldr	s12, [r5, #32]
 801b02a:	602a      	str	r2, [r5, #0]
 801b02c:	3301      	adds	r3, #1
 801b02e:	616b      	str	r3, [r5, #20]
 801b030:	69ab      	ldr	r3, [r5, #24]
 801b032:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b036:	3b01      	subs	r3, #1
 801b038:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801b03c:	61ab      	str	r3, [r5, #24]
 801b03e:	692b      	ldr	r3, [r5, #16]
 801b040:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b048:	edd5 6a07 	vldr	s13, [r5, #28]
 801b04c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b050:	440b      	add	r3, r1
 801b052:	68e9      	ldr	r1, [r5, #12]
 801b054:	612b      	str	r3, [r5, #16]
 801b056:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b05a:	428b      	cmp	r3, r1
 801b05c:	edc5 6a07 	vstr	s13, [r5, #28]
 801b060:	db15      	blt.n	801b08e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801b062:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b066:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b06a:	3201      	adds	r2, #1
 801b06c:	edc5 6a07 	vstr	s13, [r5, #28]
 801b070:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801b074:	602a      	str	r2, [r5, #0]
 801b076:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b07a:	1a5b      	subs	r3, r3, r1
 801b07c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b080:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801b084:	612b      	str	r3, [r5, #16]
 801b086:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b08a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b08e:	3f01      	subs	r7, #1
 801b090:	e757      	b.n	801af42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801b092:	ad39      	add	r5, sp, #228	; 0xe4
 801b094:	ac19      	add	r4, sp, #100	; 0x64
 801b096:	e72d      	b.n	801aef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801b098:	4613      	mov	r3, r2
 801b09a:	e744      	b.n	801af26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801b09c:	4613      	mov	r3, r2
 801b09e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801b0a2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801b0a4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801b0a8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801b0ac:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801b0b0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801b0b4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801b0b8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801b0bc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801b0c0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801b0c2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801b0c6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801b0ca:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801b0ce:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801b0d2:	960e      	str	r6, [sp, #56]	; 0x38
 801b0d4:	469e      	mov	lr, r3
 801b0d6:	461f      	mov	r7, r3
 801b0d8:	f04f 0900 	mov.w	r9, #0
 801b0dc:	2f00      	cmp	r7, #0
 801b0de:	d146      	bne.n	801b16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801b0e0:	449c      	add	ip, r3
 801b0e2:	1ad7      	subs	r7, r2, r3
 801b0e4:	f1b9 0f00 	cmp.w	r9, #0
 801b0e8:	d009      	beq.n	801b0fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801b0ea:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801b0ee:	9039      	str	r0, [sp, #228]	; 0xe4
 801b0f0:	913d      	str	r1, [sp, #244]	; 0xf4
 801b0f2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801b0f6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801b0fa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801b0fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b100:	910e      	str	r1, [sp, #56]	; 0x38
 801b102:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801b106:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801b10a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801b10e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801b112:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801b116:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801b11a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b11e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801b122:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801b126:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801b12a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801b12e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801b132:	f04f 0800 	mov.w	r8, #0
 801b136:	f1be 0f00 	cmp.w	lr, #0
 801b13a:	d030      	beq.n	801b19e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801b13c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b13e:	4431      	add	r1, r6
 801b140:	4549      	cmp	r1, r9
 801b142:	4450      	add	r0, sl
 801b144:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b148:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b14c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b150:	db08      	blt.n	801b164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801b152:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b156:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b15a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b15e:	3001      	adds	r0, #1
 801b160:	eba1 0109 	sub.w	r1, r1, r9
 801b164:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b168:	f04f 0801 	mov.w	r8, #1
 801b16c:	e7e3      	b.n	801b136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801b16e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b170:	4431      	add	r1, r6
 801b172:	4541      	cmp	r1, r8
 801b174:	4450      	add	r0, sl
 801b176:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b17a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b17e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b182:	db08      	blt.n	801b196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801b184:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b188:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b18c:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b190:	3001      	adds	r0, #1
 801b192:	eba1 0108 	sub.w	r1, r1, r8
 801b196:	3f01      	subs	r7, #1
 801b198:	f04f 0901 	mov.w	r9, #1
 801b19c:	e79e      	b.n	801b0dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801b19e:	449c      	add	ip, r3
 801b1a0:	1aff      	subs	r7, r7, r3
 801b1a2:	f1b8 0f00 	cmp.w	r8, #0
 801b1a6:	d009      	beq.n	801b1bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801b1a8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801b1ac:	9019      	str	r0, [sp, #100]	; 0x64
 801b1ae:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801b1b2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801b1b6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801b1ba:	911d      	str	r1, [sp, #116]	; 0x74
 801b1bc:	1ad2      	subs	r2, r2, r3
 801b1be:	e6b5      	b.n	801af2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b1c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	b923      	cbnz	r3, 801b1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b1c6:	4b04      	ldr	r3, [pc, #16]	; (801b1d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801b1c8:	6818      	ldr	r0, [r3, #0]
 801b1ca:	6803      	ldr	r3, [r0, #0]
 801b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1ce:	4798      	blx	r3
 801b1d0:	b05b      	add	sp, #364	; 0x16c
 801b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1d6:	bf00      	nop
 801b1d8:	200097a8 	.word	0x200097a8

0801b1dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b1dc:	b570      	push	{r4, r5, r6, lr}
 801b1de:	4604      	mov	r4, r0
 801b1e0:	2500      	movs	r5, #0
 801b1e2:	7223      	strb	r3, [r4, #8]
 801b1e4:	9804      	ldr	r0, [sp, #16]
 801b1e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b1ea:	8025      	strh	r5, [r4, #0]
 801b1ec:	6061      	str	r1, [r4, #4]
 801b1ee:	7263      	strb	r3, [r4, #9]
 801b1f0:	60e0      	str	r0, [r4, #12]
 801b1f2:	8222      	strh	r2, [r4, #16]
 801b1f4:	8265      	strh	r5, [r4, #18]
 801b1f6:	82a5      	strh	r5, [r4, #20]
 801b1f8:	82e5      	strh	r5, [r4, #22]
 801b1fa:	8325      	strh	r5, [r4, #24]
 801b1fc:	8365      	strh	r5, [r4, #26]
 801b1fe:	83a5      	strh	r5, [r4, #28]
 801b200:	77a5      	strb	r5, [r4, #30]
 801b202:	6803      	ldr	r3, [r0, #0]
 801b204:	695b      	ldr	r3, [r3, #20]
 801b206:	4798      	blx	r3
 801b208:	4606      	mov	r6, r0
 801b20a:	b1f8      	cbz	r0, 801b24c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b20c:	68e0      	ldr	r0, [r4, #12]
 801b20e:	6803      	ldr	r3, [r0, #0]
 801b210:	4631      	mov	r1, r6
 801b212:	68db      	ldr	r3, [r3, #12]
 801b214:	4798      	blx	r3
 801b216:	7b43      	ldrb	r3, [r0, #13]
 801b218:	7a82      	ldrb	r2, [r0, #10]
 801b21a:	005b      	lsls	r3, r3, #1
 801b21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b220:	4313      	orrs	r3, r2
 801b222:	83a3      	strh	r3, [r4, #28]
 801b224:	7a63      	ldrb	r3, [r4, #9]
 801b226:	2b04      	cmp	r3, #4
 801b228:	4605      	mov	r5, r0
 801b22a:	d10f      	bne.n	801b24c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b22c:	68e0      	ldr	r0, [r4, #12]
 801b22e:	6803      	ldr	r3, [r0, #0]
 801b230:	462a      	mov	r2, r5
 801b232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b234:	4631      	mov	r1, r6
 801b236:	4798      	blx	r3
 801b238:	7b6b      	ldrb	r3, [r5, #13]
 801b23a:	005b      	lsls	r3, r3, #1
 801b23c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b240:	7aab      	ldrb	r3, [r5, #10]
 801b242:	4313      	orrs	r3, r2
 801b244:	4418      	add	r0, r3
 801b246:	8ba3      	ldrh	r3, [r4, #28]
 801b248:	4418      	add	r0, r3
 801b24a:	83a0      	strh	r0, [r4, #28]
 801b24c:	4620      	mov	r0, r4
 801b24e:	bd70      	pop	{r4, r5, r6, pc}

0801b250 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b254:	2400      	movs	r4, #0
 801b256:	b085      	sub	sp, #20
 801b258:	4681      	mov	r9, r0
 801b25a:	4688      	mov	r8, r1
 801b25c:	4692      	mov	sl, r2
 801b25e:	469b      	mov	fp, r3
 801b260:	4627      	mov	r7, r4
 801b262:	4625      	mov	r5, r4
 801b264:	4626      	mov	r6, r4
 801b266:	4554      	cmp	r4, sl
 801b268:	da2a      	bge.n	801b2c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b26a:	2300      	movs	r3, #0
 801b26c:	9303      	str	r3, [sp, #12]
 801b26e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b272:	429d      	cmp	r5, r3
 801b274:	d004      	beq.n	801b280 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801b276:	f242 030b 	movw	r3, #8203	; 0x200b
 801b27a:	429d      	cmp	r5, r3
 801b27c:	bf18      	it	ne
 801b27e:	462f      	movne	r7, r5
 801b280:	ab03      	add	r3, sp, #12
 801b282:	4642      	mov	r2, r8
 801b284:	4659      	mov	r1, fp
 801b286:	4648      	mov	r0, r9
 801b288:	f002 ff70 	bl	801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b28c:	4605      	mov	r5, r0
 801b28e:	b1b8      	cbz	r0, 801b2c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b290:	280a      	cmp	r0, #10
 801b292:	d015      	beq.n	801b2c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b294:	9a03      	ldr	r2, [sp, #12]
 801b296:	b18a      	cbz	r2, 801b2bc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801b298:	7b50      	ldrb	r0, [r2, #13]
 801b29a:	7a93      	ldrb	r3, [r2, #10]
 801b29c:	8895      	ldrh	r5, [r2, #4]
 801b29e:	0040      	lsls	r0, r0, #1
 801b2a0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b2a4:	4303      	orrs	r3, r0
 801b2a6:	9301      	str	r3, [sp, #4]
 801b2a8:	f8d8 3000 	ldr.w	r3, [r8]
 801b2ac:	4639      	mov	r1, r7
 801b2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2b0:	4640      	mov	r0, r8
 801b2b2:	4798      	blx	r3
 801b2b4:	9b01      	ldr	r3, [sp, #4]
 801b2b6:	4418      	add	r0, r3
 801b2b8:	4406      	add	r6, r0
 801b2ba:	b2b6      	uxth	r6, r6
 801b2bc:	3401      	adds	r4, #1
 801b2be:	e7d2      	b.n	801b266 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801b2c0:	4630      	mov	r0, r6
 801b2c2:	b005      	add	sp, #20
 801b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b2c8:	2a02      	cmp	r2, #2
 801b2ca:	b530      	push	{r4, r5, lr}
 801b2cc:	d011      	beq.n	801b2f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b2ce:	2a03      	cmp	r2, #3
 801b2d0:	d01c      	beq.n	801b30c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b2d2:	2a01      	cmp	r2, #1
 801b2d4:	d10c      	bne.n	801b2f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b2d6:	888b      	ldrh	r3, [r1, #4]
 801b2d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b2dc:	8801      	ldrh	r1, [r0, #0]
 801b2de:	8844      	ldrh	r4, [r0, #2]
 801b2e0:	8004      	strh	r4, [r0, #0]
 801b2e2:	1a9b      	subs	r3, r3, r2
 801b2e4:	1a5b      	subs	r3, r3, r1
 801b2e6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b2ea:	8043      	strh	r3, [r0, #2]
 801b2ec:	8081      	strh	r1, [r0, #4]
 801b2ee:	80c2      	strh	r2, [r0, #6]
 801b2f0:	bd30      	pop	{r4, r5, pc}
 801b2f2:	88cb      	ldrh	r3, [r1, #6]
 801b2f4:	88c2      	ldrh	r2, [r0, #6]
 801b2f6:	1a9b      	subs	r3, r3, r2
 801b2f8:	8842      	ldrh	r2, [r0, #2]
 801b2fa:	1a9b      	subs	r3, r3, r2
 801b2fc:	888a      	ldrh	r2, [r1, #4]
 801b2fe:	8881      	ldrh	r1, [r0, #4]
 801b300:	8043      	strh	r3, [r0, #2]
 801b302:	1a52      	subs	r2, r2, r1
 801b304:	8801      	ldrh	r1, [r0, #0]
 801b306:	1a52      	subs	r2, r2, r1
 801b308:	8002      	strh	r2, [r0, #0]
 801b30a:	e7f1      	b.n	801b2f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b30c:	88cb      	ldrh	r3, [r1, #6]
 801b30e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b312:	8841      	ldrh	r1, [r0, #2]
 801b314:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b318:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b31c:	8045      	strh	r5, [r0, #2]
 801b31e:	1a9b      	subs	r3, r3, r2
 801b320:	1a5b      	subs	r3, r3, r1
 801b322:	8003      	strh	r3, [r0, #0]
 801b324:	8082      	strh	r2, [r0, #4]
 801b326:	80c4      	strh	r4, [r0, #6]
 801b328:	e7e2      	b.n	801b2f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801b32a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b32a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b32e:	b09f      	sub	sp, #124	; 0x7c
 801b330:	9116      	str	r1, [sp, #88]	; 0x58
 801b332:	9317      	str	r3, [sp, #92]	; 0x5c
 801b334:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b336:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b338:	8809      	ldrh	r1, [r1, #0]
 801b33a:	889b      	ldrh	r3, [r3, #4]
 801b33c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801b340:	9212      	str	r2, [sp, #72]	; 0x48
 801b342:	440b      	add	r3, r1
 801b344:	b21b      	sxth	r3, r3
 801b346:	9310      	str	r3, [sp, #64]	; 0x40
 801b348:	f8d8 3000 	ldr.w	r3, [r8]
 801b34c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801b350:	7a59      	ldrb	r1, [r3, #9]
 801b352:	7a1b      	ldrb	r3, [r3, #8]
 801b354:	9315      	str	r3, [sp, #84]	; 0x54
 801b356:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b358:	9011      	str	r0, [sp, #68]	; 0x44
 801b35a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b35e:	9114      	str	r1, [sp, #80]	; 0x50
 801b360:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b364:	2a00      	cmp	r2, #0
 801b366:	d067      	beq.n	801b438 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801b368:	f898 3010 	ldrb.w	r3, [r8, #16]
 801b36c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b36e:	2b04      	cmp	r3, #4
 801b370:	bf14      	ite	ne
 801b372:	2301      	movne	r3, #1
 801b374:	2302      	moveq	r3, #2
 801b376:	4413      	add	r3, r2
 801b378:	f04f 0900 	mov.w	r9, #0
 801b37c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b37e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b382:	464c      	mov	r4, r9
 801b384:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b388:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801b38c:	4293      	cmp	r3, r2
 801b38e:	f280 808c 	bge.w	801b4aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b392:	2300      	movs	r3, #0
 801b394:	931c      	str	r3, [sp, #112]	; 0x70
 801b396:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b39a:	429c      	cmp	r4, r3
 801b39c:	d006      	beq.n	801b3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801b39e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3a0:	f242 020b 	movw	r2, #8203	; 0x200b
 801b3a4:	4294      	cmp	r4, r2
 801b3a6:	bf18      	it	ne
 801b3a8:	4623      	movne	r3, r4
 801b3aa:	930d      	str	r3, [sp, #52]	; 0x34
 801b3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3ae:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b3b0:	f8d8 2000 	ldr.w	r2, [r8]
 801b3b4:	428b      	cmp	r3, r1
 801b3b6:	db41      	blt.n	801b43c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801b3b8:	6813      	ldr	r3, [r2, #0]
 801b3ba:	4610      	mov	r0, r2
 801b3bc:	695b      	ldr	r3, [r3, #20]
 801b3be:	4798      	blx	r3
 801b3c0:	4604      	mov	r4, r0
 801b3c2:	f8d8 0000 	ldr.w	r0, [r8]
 801b3c6:	6803      	ldr	r3, [r0, #0]
 801b3c8:	aa1d      	add	r2, sp, #116	; 0x74
 801b3ca:	689e      	ldr	r6, [r3, #8]
 801b3cc:	4621      	mov	r1, r4
 801b3ce:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b3d2:	47b0      	blx	r6
 801b3d4:	901c      	str	r0, [sp, #112]	; 0x70
 801b3d6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b3da:	429c      	cmp	r4, r3
 801b3dc:	f000 80e9 	beq.w	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b3e0:	f242 030b 	movw	r3, #8203	; 0x200b
 801b3e4:	429c      	cmp	r4, r3
 801b3e6:	f000 80e4 	beq.w	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b3ea:	2c00      	cmp	r4, #0
 801b3ec:	f000 80f6 	beq.w	801b5dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b3f0:	2c0a      	cmp	r4, #10
 801b3f2:	d060      	beq.n	801b4b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b3f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b3f6:	b36a      	cbz	r2, 801b454 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801b3f8:	8894      	ldrh	r4, [r2, #4]
 801b3fa:	f1bb 0f00 	cmp.w	fp, #0
 801b3fe:	d03b      	beq.n	801b478 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801b400:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b404:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b408:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b40c:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b410:	f1bb 0f01 	cmp.w	fp, #1
 801b414:	ea49 0903 	orr.w	r9, r9, r3
 801b418:	d134      	bne.n	801b484 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801b41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b41c:	eba5 0509 	sub.w	r5, r5, r9
 801b420:	2b00      	cmp	r3, #0
 801b422:	d14f      	bne.n	801b4c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b426:	eb09 0305 	add.w	r3, r9, r5
 801b42a:	4413      	add	r3, r2
 801b42c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b42e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b432:	4293      	cmp	r3, r2
 801b434:	da51      	bge.n	801b4da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b436:	e038      	b.n	801b4aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b438:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b43a:	e79d      	b.n	801b378 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801b43c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b440:	9301      	str	r3, [sp, #4]
 801b442:	ab1d      	add	r3, sp, #116	; 0x74
 801b444:	9300      	str	r3, [sp, #0]
 801b446:	4659      	mov	r1, fp
 801b448:	ab1c      	add	r3, sp, #112	; 0x70
 801b44a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b44c:	f002 fee6 	bl	801e21c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b450:	4604      	mov	r4, r0
 801b452:	e7c0      	b.n	801b3d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b454:	f8d8 0000 	ldr.w	r0, [r8]
 801b458:	6803      	ldr	r3, [r0, #0]
 801b45a:	691b      	ldr	r3, [r3, #16]
 801b45c:	4798      	blx	r3
 801b45e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b462:	4298      	cmp	r0, r3
 801b464:	f000 80a5 	beq.w	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b468:	f242 030b 	movw	r3, #8203	; 0x200b
 801b46c:	4298      	cmp	r0, r3
 801b46e:	f000 80a0 	beq.w	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b472:	f1bb 0f00 	cmp.w	fp, #0
 801b476:	d100      	bne.n	801b47a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b478:	444d      	add	r5, r9
 801b47a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b47c:	2a00      	cmp	r2, #0
 801b47e:	d1bf      	bne.n	801b400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b480:	4691      	mov	r9, r2
 801b482:	e096      	b.n	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b486:	2b00      	cmp	r3, #0
 801b488:	f000 80aa 	beq.w	801b5e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801b48c:	f1bb 0f00 	cmp.w	fp, #0
 801b490:	d118      	bne.n	801b4c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b492:	f8d8 0000 	ldr.w	r0, [r8]
 801b496:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b498:	6803      	ldr	r3, [r0, #0]
 801b49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b49c:	4798      	blx	r3
 801b49e:	4405      	add	r5, r0
 801b4a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b4a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b4a4:	1aeb      	subs	r3, r5, r3
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	dd17      	ble.n	801b4da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b4aa:	2c00      	cmp	r4, #0
 801b4ac:	f000 8096 	beq.w	801b5dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b4b0:	2c0a      	cmp	r4, #10
 801b4b2:	f040 8084 	bne.w	801b5be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801b4b6:	240a      	movs	r4, #10
 801b4b8:	fab4 f084 	clz	r0, r4
 801b4bc:	0940      	lsrs	r0, r0, #5
 801b4be:	b01f      	add	sp, #124	; 0x7c
 801b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4c4:	f8d8 0000 	ldr.w	r0, [r8]
 801b4c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b4ca:	6803      	ldr	r3, [r0, #0]
 801b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4ce:	4798      	blx	r3
 801b4d0:	f1bb 0f01 	cmp.w	fp, #1
 801b4d4:	eba5 0500 	sub.w	r5, r5, r0
 801b4d8:	d0a4      	beq.n	801b424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b4da:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b4dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b4de:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b4e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b4e6:	7b43      	ldrb	r3, [r0, #13]
 801b4e8:	015b      	lsls	r3, r3, #5
 801b4ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b4ee:	7983      	ldrb	r3, [r0, #6]
 801b4f0:	4429      	add	r1, r5
 801b4f2:	4313      	orrs	r3, r2
 801b4f4:	440b      	add	r3, r1
 801b4f6:	42b3      	cmp	r3, r6
 801b4f8:	db5b      	blt.n	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b4fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4fc:	4299      	cmp	r1, r3
 801b4fe:	da58      	bge.n	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b500:	f8d8 0000 	ldr.w	r0, [r8]
 801b504:	6803      	ldr	r3, [r0, #0]
 801b506:	42ae      	cmp	r6, r5
 801b508:	bfc8      	it	gt
 801b50a:	1b76      	subgt	r6, r6, r5
 801b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b50e:	bfcc      	ite	gt
 801b510:	b2b6      	uxthgt	r6, r6
 801b512:	2600      	movle	r6, #0
 801b514:	4798      	blx	r3
 801b516:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b518:	7b5a      	ldrb	r2, [r3, #13]
 801b51a:	00d1      	lsls	r1, r2, #3
 801b51c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b520:	7a19      	ldrb	r1, [r3, #8]
 801b522:	4339      	orrs	r1, r7
 801b524:	0657      	lsls	r7, r2, #25
 801b526:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b528:	bf44      	itt	mi
 801b52a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b52e:	b209      	sxthmi	r1, r1
 801b530:	19c7      	adds	r7, r0, r7
 801b532:	1a7f      	subs	r7, r7, r1
 801b534:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b536:	b2bf      	uxth	r7, r7
 801b538:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b53c:	fa0f fa87 	sxth.w	sl, r7
 801b540:	4551      	cmp	r1, sl
 801b542:	dd3a      	ble.n	801b5ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801b544:	0112      	lsls	r2, r2, #4
 801b546:	79d8      	ldrb	r0, [r3, #7]
 801b548:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b54c:	4302      	orrs	r2, r0
 801b54e:	4492      	add	sl, r2
 801b550:	4551      	cmp	r1, sl
 801b552:	dc2e      	bgt.n	801b5b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b554:	1bcf      	subs	r7, r1, r7
 801b556:	b2bf      	uxth	r7, r7
 801b558:	468a      	mov	sl, r1
 801b55a:	9319      	str	r3, [sp, #100]	; 0x64
 801b55c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b55e:	f8d8 0000 	ldr.w	r0, [r8]
 801b562:	681a      	ldr	r2, [r3, #0]
 801b564:	6801      	ldr	r1, [r0, #0]
 801b566:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b568:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b56a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b56c:	9218      	str	r2, [sp, #96]	; 0x60
 801b56e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b570:	4788      	blx	r1
 801b572:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b576:	910b      	str	r1, [sp, #44]	; 0x2c
 801b578:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b57c:	910a      	str	r1, [sp, #40]	; 0x28
 801b57e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b582:	9109      	str	r1, [sp, #36]	; 0x24
 801b584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b586:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b58a:	9305      	str	r3, [sp, #20]
 801b58c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b58e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b590:	9206      	str	r2, [sp, #24]
 801b592:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b596:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b59a:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b59e:	442e      	add	r6, r5
 801b5a0:	b236      	sxth	r6, r6
 801b5a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b5a4:	9600      	str	r6, [sp, #0]
 801b5a6:	681a      	ldr	r2, [r3, #0]
 801b5a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b5aa:	685b      	ldr	r3, [r3, #4]
 801b5ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b5b0:	47b0      	blx	r6
 801b5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	930e      	str	r3, [sp, #56]	; 0x38
 801b5b8:	e6e6      	b.n	801b388 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b5ba:	2700      	movs	r7, #0
 801b5bc:	e7cd      	b.n	801b55a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801b5be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b5c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b5c2:	3501      	adds	r5, #1
 801b5c4:	429d      	cmp	r5, r3
 801b5c6:	f6bf af77 	bge.w	801b4b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b5ca:	4659      	mov	r1, fp
 801b5cc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b5ce:	f7f8 feb7 	bl	8014340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b5d2:	4604      	mov	r4, r0
 801b5d4:	b110      	cbz	r0, 801b5dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b5d6:	280a      	cmp	r0, #10
 801b5d8:	d1f2      	bne.n	801b5c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b5da:	e76c      	b.n	801b4b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b5dc:	2400      	movs	r4, #0
 801b5de:	e76b      	b.n	801b4b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b5e0:	f1bb 0f00 	cmp.w	fp, #0
 801b5e4:	f43f af5c 	beq.w	801b4a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b5e8:	e777      	b.n	801b4da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b5ea:	b530      	push	{r4, r5, lr}
 801b5ec:	8a44      	ldrh	r4, [r0, #18]
 801b5ee:	8ac5      	ldrh	r5, [r0, #22]
 801b5f0:	82c3      	strh	r3, [r0, #22]
 801b5f2:	442c      	add	r4, r5
 801b5f4:	1ae4      	subs	r4, r4, r3
 801b5f6:	8244      	strh	r4, [r0, #18]
 801b5f8:	8b03      	ldrh	r3, [r0, #24]
 801b5fa:	8a84      	ldrh	r4, [r0, #20]
 801b5fc:	4422      	add	r2, r4
 801b5fe:	440c      	add	r4, r1
 801b600:	1a59      	subs	r1, r3, r1
 801b602:	8342      	strh	r2, [r0, #26]
 801b604:	8284      	strh	r4, [r0, #20]
 801b606:	8301      	strh	r1, [r0, #24]
 801b608:	bd30      	pop	{r4, r5, pc}

0801b60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b60a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b60e:	7a43      	ldrb	r3, [r0, #9]
 801b610:	1eda      	subs	r2, r3, #3
 801b612:	b087      	sub	sp, #28
 801b614:	4604      	mov	r4, r0
 801b616:	b2d2      	uxtb	r2, r2
 801b618:	460f      	mov	r7, r1
 801b61a:	2900      	cmp	r1, #0
 801b61c:	d036      	beq.n	801b68c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b61e:	2a01      	cmp	r2, #1
 801b620:	d932      	bls.n	801b688 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b622:	1e58      	subs	r0, r3, #1
 801b624:	f1d0 0b00 	rsbs	fp, r0, #0
 801b628:	eb4b 0b00 	adc.w	fp, fp, r0
 801b62c:	1e99      	subs	r1, r3, #2
 801b62e:	424b      	negs	r3, r1
 801b630:	414b      	adcs	r3, r1
 801b632:	9303      	str	r3, [sp, #12]
 801b634:	2300      	movs	r3, #0
 801b636:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b63a:	2500      	movs	r5, #0
 801b63c:	8265      	strh	r5, [r4, #18]
 801b63e:	82a5      	strh	r5, [r4, #20]
 801b640:	46a9      	mov	r9, r5
 801b642:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b646:	2300      	movs	r3, #0
 801b648:	9305      	str	r3, [sp, #20]
 801b64a:	8823      	ldrh	r3, [r4, #0]
 801b64c:	2b20      	cmp	r3, #32
 801b64e:	d02b      	beq.n	801b6a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b650:	eba3 020a 	sub.w	r2, r3, sl
 801b654:	4256      	negs	r6, r2
 801b656:	4156      	adcs	r6, r2
 801b658:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b65c:	4293      	cmp	r3, r2
 801b65e:	d004      	beq.n	801b66a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b660:	4553      	cmp	r3, sl
 801b662:	bf16      	itet	ne
 801b664:	4699      	movne	r9, r3
 801b666:	2601      	moveq	r6, #1
 801b668:	2600      	movne	r6, #0
 801b66a:	ab05      	add	r3, sp, #20
 801b66c:	68e2      	ldr	r2, [r4, #12]
 801b66e:	7a21      	ldrb	r1, [r4, #8]
 801b670:	6860      	ldr	r0, [r4, #4]
 801b672:	f002 fd7b 	bl	801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b676:	8020      	strh	r0, [r4, #0]
 801b678:	b9c8      	cbnz	r0, 801b6ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b67a:	8b22      	ldrh	r2, [r4, #24]
 801b67c:	2300      	movs	r3, #0
 801b67e:	4611      	mov	r1, r2
 801b680:	4620      	mov	r0, r4
 801b682:	f7ff ffb2 	bl	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b686:	e066      	b.n	801b756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b688:	468b      	mov	fp, r1
 801b68a:	e7cf      	b.n	801b62c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b68c:	3b01      	subs	r3, #1
 801b68e:	2a01      	cmp	r2, #1
 801b690:	bf8c      	ite	hi
 801b692:	2200      	movhi	r2, #0
 801b694:	2201      	movls	r2, #1
 801b696:	2b01      	cmp	r3, #1
 801b698:	bf8c      	ite	hi
 801b69a:	2300      	movhi	r3, #0
 801b69c:	2301      	movls	r3, #1
 801b69e:	9202      	str	r2, [sp, #8]
 801b6a0:	9301      	str	r3, [sp, #4]
 801b6a2:	9103      	str	r1, [sp, #12]
 801b6a4:	468b      	mov	fp, r1
 801b6a6:	e7c8      	b.n	801b63a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b6a8:	4699      	mov	r9, r3
 801b6aa:	2601      	movs	r6, #1
 801b6ac:	e7dd      	b.n	801b66a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b6ae:	8ae3      	ldrh	r3, [r4, #22]
 801b6b0:	280a      	cmp	r0, #10
 801b6b2:	f103 0301 	add.w	r3, r3, #1
 801b6b6:	82e3      	strh	r3, [r4, #22]
 801b6b8:	d0df      	beq.n	801b67a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b6ba:	9a05      	ldr	r2, [sp, #20]
 801b6bc:	bb42      	cbnz	r2, 801b710 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b6be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b6c2:	4298      	cmp	r0, r3
 801b6c4:	d001      	beq.n	801b6ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b6c6:	4550      	cmp	r0, sl
 801b6c8:	d1bd      	bne.n	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6ca:	8823      	ldrh	r3, [r4, #0]
 801b6cc:	8b21      	ldrh	r1, [r4, #24]
 801b6ce:	2b20      	cmp	r3, #32
 801b6d0:	d001      	beq.n	801b6d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b6d2:	4553      	cmp	r3, sl
 801b6d4:	d131      	bne.n	801b73a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b6d6:	2e00      	cmp	r6, #0
 801b6d8:	bf0a      	itet	eq
 801b6da:	460d      	moveq	r5, r1
 801b6dc:	4630      	movne	r0, r6
 801b6de:	2001      	moveq	r0, #1
 801b6e0:	440a      	add	r2, r1
 801b6e2:	8aa3      	ldrh	r3, [r4, #20]
 801b6e4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b6e8:	b292      	uxth	r2, r2
 801b6ea:	8322      	strh	r2, [r4, #24]
 801b6ec:	4413      	add	r3, r2
 801b6ee:	2f00      	cmp	r7, #0
 801b6f0:	d03a      	beq.n	801b768 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b6f2:	f1bb 0f00 	cmp.w	fp, #0
 801b6f6:	d102      	bne.n	801b6fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b6f8:	9903      	ldr	r1, [sp, #12]
 801b6fa:	b301      	cbz	r1, 801b73e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b6fc:	b1f8      	cbz	r0, 801b73e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b6fe:	8ba1      	ldrh	r1, [r4, #28]
 801b700:	4419      	add	r1, r3
 801b702:	458c      	cmp	ip, r1
 801b704:	da2a      	bge.n	801b75c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b706:	8a61      	ldrh	r1, [r4, #18]
 801b708:	b341      	cbz	r1, 801b75c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b70a:	4563      	cmp	r3, ip
 801b70c:	dd9b      	ble.n	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b70e:	e01c      	b.n	801b74a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b710:	8893      	ldrh	r3, [r2, #4]
 801b712:	8023      	strh	r3, [r4, #0]
 801b714:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b718:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b71c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b720:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b724:	ea48 0800 	orr.w	r8, r8, r0
 801b728:	68e0      	ldr	r0, [r4, #12]
 801b72a:	6803      	ldr	r3, [r0, #0]
 801b72c:	4649      	mov	r1, r9
 801b72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b730:	4798      	blx	r3
 801b732:	eb08 0200 	add.w	r2, r8, r0
 801b736:	b292      	uxth	r2, r2
 801b738:	e7c7      	b.n	801b6ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b73a:	2000      	movs	r0, #0
 801b73c:	e7d0      	b.n	801b6e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b73e:	4563      	cmp	r3, ip
 801b740:	dd81      	ble.n	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b742:	8a63      	ldrh	r3, [r4, #18]
 801b744:	2b00      	cmp	r3, #0
 801b746:	f43f af7e 	beq.w	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b74a:	2301      	movs	r3, #1
 801b74c:	77a3      	strb	r3, [r4, #30]
 801b74e:	8ba2      	ldrh	r2, [r4, #28]
 801b750:	8b63      	ldrh	r3, [r4, #26]
 801b752:	4413      	add	r3, r2
 801b754:	8363      	strh	r3, [r4, #26]
 801b756:	b007      	add	sp, #28
 801b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b75c:	2300      	movs	r3, #0
 801b75e:	4611      	mov	r1, r2
 801b760:	4620      	mov	r0, r4
 801b762:	f7ff ff42 	bl	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b766:	e76e      	b.n	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b768:	4563      	cmp	r3, ip
 801b76a:	dd14      	ble.n	801b796 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b76c:	9b02      	ldr	r3, [sp, #8]
 801b76e:	b113      	cbz	r3, 801b776 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b770:	2301      	movs	r3, #1
 801b772:	460a      	mov	r2, r1
 801b774:	e783      	b.n	801b67e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b776:	9b01      	ldr	r3, [sp, #4]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	f43f af64 	beq.w	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b77e:	2800      	cmp	r0, #0
 801b780:	f47f af61 	bne.w	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b784:	b116      	cbz	r6, 801b78c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b786:	2301      	movs	r3, #1
 801b788:	462a      	mov	r2, r5
 801b78a:	e779      	b.n	801b680 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b78c:	8a63      	ldrh	r3, [r4, #18]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	f43f af59 	beq.w	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b794:	e7df      	b.n	801b756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b796:	2800      	cmp	r0, #0
 801b798:	f47f af55 	bne.w	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b79c:	2e00      	cmp	r6, #0
 801b79e:	f43f af52 	beq.w	801b646 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	462a      	mov	r2, r5
 801b7a6:	e7db      	b.n	801b760 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b7a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b7a8:	b530      	push	{r4, r5, lr}
 801b7aa:	4605      	mov	r5, r0
 801b7ac:	b08b      	sub	sp, #44	; 0x2c
 801b7ae:	b191      	cbz	r1, 801b7d6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b7b0:	e9cd 3100 	strd	r3, r1, [sp]
 801b7b4:	4613      	mov	r3, r2
 801b7b6:	4601      	mov	r1, r0
 801b7b8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b7bc:	a802      	add	r0, sp, #8
 801b7be:	f7ff fd0d 	bl	801b1dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b7c2:	2401      	movs	r4, #1
 801b7c4:	2100      	movs	r1, #0
 801b7c6:	a802      	add	r0, sp, #8
 801b7c8:	f7ff ff1f 	bl	801b60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b7cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b7d0:	b163      	cbz	r3, 801b7ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b7d2:	3401      	adds	r4, #1
 801b7d4:	e7f6      	b.n	801b7c4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b7d6:	f002 fdc3 	bl	801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b7da:	2401      	movs	r4, #1
 801b7dc:	280a      	cmp	r0, #10
 801b7de:	4628      	mov	r0, r5
 801b7e0:	bf08      	it	eq
 801b7e2:	3401      	addeq	r4, #1
 801b7e4:	f002 fdbc 	bl	801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b7e8:	2800      	cmp	r0, #0
 801b7ea:	d1f7      	bne.n	801b7dc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b7ec:	b2a0      	uxth	r0, r4
 801b7ee:	b00b      	add	sp, #44	; 0x2c
 801b7f0:	bd30      	pop	{r4, r5, pc}

0801b7f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b7f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f6:	b0e5      	sub	sp, #404	; 0x194
 801b7f8:	4689      	mov	r9, r1
 801b7fa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801b7fe:	900a      	str	r0, [sp, #40]	; 0x28
 801b800:	461c      	mov	r4, r3
 801b802:	f1ba 0f00 	cmp.w	sl, #0
 801b806:	f000 80b4 	beq.w	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	f000 80b0 	beq.w	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b812:	7ba3      	ldrb	r3, [r4, #14]
 801b814:	2b00      	cmp	r3, #0
 801b816:	f000 80ac 	beq.w	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b81a:	6810      	ldr	r0, [r2, #0]
 801b81c:	6851      	ldr	r1, [r2, #4]
 801b81e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b822:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b826:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801b82a:	4643      	mov	r3, r8
 801b82c:	c303      	stmia	r3!, {r0, r1}
 801b82e:	2500      	movs	r5, #0
 801b830:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b834:	79a2      	ldrb	r2, [r4, #6]
 801b836:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b83a:	a90f      	add	r1, sp, #60	; 0x3c
 801b83c:	4640      	mov	r0, r8
 801b83e:	950f      	str	r5, [sp, #60]	; 0x3c
 801b840:	f7ff fd42 	bl	801b2c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b844:	a90f      	add	r1, sp, #60	; 0x3c
 801b846:	4608      	mov	r0, r1
 801b848:	79a2      	ldrb	r2, [r4, #6]
 801b84a:	af19      	add	r7, sp, #100	; 0x64
 801b84c:	f7ff fd3c 	bl	801b2c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b850:	4638      	mov	r0, r7
 801b852:	f002 f938 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 801b856:	6820      	ldr	r0, [r4, #0]
 801b858:	6803      	ldr	r3, [r0, #0]
 801b85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b85c:	4798      	blx	r3
 801b85e:	4606      	mov	r6, r0
 801b860:	6820      	ldr	r0, [r4, #0]
 801b862:	6803      	ldr	r3, [r0, #0]
 801b864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b866:	4798      	blx	r3
 801b868:	4633      	mov	r3, r6
 801b86a:	9000      	str	r0, [sp, #0]
 801b86c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b86e:	4651      	mov	r1, sl
 801b870:	4638      	mov	r0, r7
 801b872:	f002 f97b 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b876:	6820      	ldr	r0, [r4, #0]
 801b878:	7923      	ldrb	r3, [r4, #4]
 801b87a:	9308      	str	r3, [sp, #32]
 801b87c:	6803      	ldr	r3, [r0, #0]
 801b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b880:	4798      	blx	r3
 801b882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b886:	181e      	adds	r6, r3, r0
 801b888:	42ae      	cmp	r6, r5
 801b88a:	dd06      	ble.n	801b89a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b88c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b890:	4282      	cmp	r2, r0
 801b892:	bfa4      	itt	ge
 801b894:	189d      	addge	r5, r3, r2
 801b896:	fb95 f5f6 	sdivge	r5, r5, r6
 801b89a:	a832      	add	r0, sp, #200	; 0xc8
 801b89c:	f002 f913 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 801b8a0:	7c23      	ldrb	r3, [r4, #16]
 801b8a2:	b17b      	cbz	r3, 801b8c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b8a4:	6820      	ldr	r0, [r4, #0]
 801b8a6:	6803      	ldr	r3, [r0, #0]
 801b8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8aa:	4798      	blx	r3
 801b8ac:	4683      	mov	fp, r0
 801b8ae:	6820      	ldr	r0, [r4, #0]
 801b8b0:	6803      	ldr	r3, [r0, #0]
 801b8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8b4:	4798      	blx	r3
 801b8b6:	465b      	mov	r3, fp
 801b8b8:	9000      	str	r0, [sp, #0]
 801b8ba:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b8bc:	4651      	mov	r1, sl
 801b8be:	a832      	add	r0, sp, #200	; 0xc8
 801b8c0:	f002 f954 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8c4:	7be1      	ldrb	r1, [r4, #15]
 801b8c6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b8ca:	7963      	ldrb	r3, [r4, #5]
 801b8cc:	1a52      	subs	r2, r2, r1
 801b8ce:	7c21      	ldrb	r1, [r4, #16]
 801b8d0:	9101      	str	r1, [sp, #4]
 801b8d2:	6821      	ldr	r1, [r4, #0]
 801b8d4:	9100      	str	r1, [sp, #0]
 801b8d6:	b292      	uxth	r2, r2
 801b8d8:	a932      	add	r1, sp, #200	; 0xc8
 801b8da:	a811      	add	r0, sp, #68	; 0x44
 801b8dc:	f7ff fc7e 	bl	801b1dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b8e0:	7c23      	ldrb	r3, [r4, #16]
 801b8e2:	b9bb      	cbnz	r3, 801b914 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b8e4:	fa1f fa86 	uxth.w	sl, r6
 801b8e8:	2d00      	cmp	r5, #0
 801b8ea:	dd45      	ble.n	801b978 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b8ec:	4638      	mov	r0, r7
 801b8ee:	f002 fd37 	bl	801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b8f2:	2800      	cmp	r0, #0
 801b8f4:	d03d      	beq.n	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b8f6:	280a      	cmp	r0, #10
 801b8f8:	d1f6      	bne.n	801b8e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b8fa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b8fe:	4453      	add	r3, sl
 801b900:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b904:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b908:	eba3 030a 	sub.w	r3, r3, sl
 801b90c:	3d01      	subs	r5, #1
 801b90e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b912:	e7e9      	b.n	801b8e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b914:	0073      	lsls	r3, r6, #1
 801b916:	9309      	str	r3, [sp, #36]	; 0x24
 801b918:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801b91c:	fa1f fa86 	uxth.w	sl, r6
 801b920:	2d00      	cmp	r5, #0
 801b922:	dd29      	ble.n	801b978 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b924:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b92a:	428b      	cmp	r3, r1
 801b92c:	bfd4      	ite	le
 801b92e:	2100      	movle	r1, #0
 801b930:	2101      	movgt	r1, #1
 801b932:	a811      	add	r0, sp, #68	; 0x44
 801b934:	f7ff fe69 	bl	801b60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b938:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b93c:	3b01      	subs	r3, #1
 801b93e:	b29b      	uxth	r3, r3
 801b940:	455b      	cmp	r3, fp
 801b942:	930b      	str	r3, [sp, #44]	; 0x2c
 801b944:	d005      	beq.n	801b952 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b946:	7961      	ldrb	r1, [r4, #5]
 801b948:	4638      	mov	r0, r7
 801b94a:	f7f8 fcf9 	bl	8014340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b950:	e7f4      	b.n	801b93c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b952:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b956:	4453      	add	r3, sl
 801b958:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b95c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b960:	eba3 030a 	sub.w	r3, r3, sl
 801b964:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b968:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b96c:	3d01      	subs	r5, #1
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d1d6      	bne.n	801b920 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b972:	b065      	add	sp, #404	; 0x194
 801b974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b978:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b97c:	ad4b      	add	r5, sp, #300	; 0x12c
 801b97e:	f04f 0b00 	mov.w	fp, #0
 801b982:	7c23      	ldrb	r3, [r4, #16]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d067      	beq.n	801ba58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b988:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b98c:	458a      	cmp	sl, r1
 801b98e:	bfd4      	ite	le
 801b990:	2100      	movle	r1, #0
 801b992:	2101      	movgt	r1, #1
 801b994:	a811      	add	r0, sp, #68	; 0x44
 801b996:	f7ff fe38 	bl	801b60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b99a:	9b08      	ldr	r3, [sp, #32]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d056      	beq.n	801ba4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b9a0:	7c23      	ldrb	r3, [r4, #16]
 801b9a2:	9309      	str	r3, [sp, #36]	; 0x24
 801b9a4:	2264      	movs	r2, #100	; 0x64
 801b9a6:	4639      	mov	r1, r7
 801b9a8:	4628      	mov	r0, r5
 801b9aa:	f012 fc39 	bl	802e220 <memcpy>
 801b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d059      	beq.n	801ba68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801b9b4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b9b8:	7922      	ldrb	r2, [r4, #4]
 801b9ba:	2a01      	cmp	r2, #1
 801b9bc:	d13d      	bne.n	801ba3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b9be:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801b9c2:	1ac0      	subs	r0, r0, r3
 801b9c4:	2302      	movs	r3, #2
 801b9c6:	fb90 f0f3 	sdiv	r0, r0, r3
 801b9ca:	b200      	sxth	r0, r0
 801b9cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b9d0:	4418      	add	r0, r3
 801b9d2:	7c23      	ldrb	r3, [r4, #16]
 801b9d4:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d03a      	beq.n	801ba52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b9dc:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801b9e0:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801b9e4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b9e8:	9500      	str	r5, [sp, #0]
 801b9ea:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b9ee:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b9f2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b9f6:	464a      	mov	r2, r9
 801b9f8:	2100      	movs	r1, #0
 801b9fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b9fc:	f7ff fc95 	bl	801b32a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801ba00:	2800      	cmp	r0, #0
 801ba02:	d1b6      	bne.n	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ba04:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ba08:	b2b2      	uxth	r2, r6
 801ba0a:	4611      	mov	r1, r2
 801ba0c:	4413      	add	r3, r2
 801ba0e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ba12:	1a52      	subs	r2, r2, r1
 801ba14:	7c21      	ldrb	r1, [r4, #16]
 801ba16:	b21b      	sxth	r3, r3
 801ba18:	b212      	sxth	r2, r2
 801ba1a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ba1e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801ba22:	b109      	cbz	r1, 801ba28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801ba24:	42b2      	cmp	r2, r6
 801ba26:	dba4      	blt.n	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ba28:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801ba2c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801ba30:	440a      	add	r2, r1
 801ba32:	b212      	sxth	r2, r2
 801ba34:	4293      	cmp	r3, r2
 801ba36:	dda4      	ble.n	801b982 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801ba38:	e79b      	b.n	801b972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ba3a:	2a02      	cmp	r2, #2
 801ba3c:	d105      	bne.n	801ba4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801ba3e:	7be2      	ldrb	r2, [r4, #15]
 801ba40:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801ba44:	1a80      	subs	r0, r0, r2
 801ba46:	1ac0      	subs	r0, r0, r3
 801ba48:	e7bf      	b.n	801b9ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801ba4a:	2000      	movs	r0, #0
 801ba4c:	e7be      	b.n	801b9cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801ba4e:	7be0      	ldrb	r0, [r4, #15]
 801ba50:	e7bc      	b.n	801b9cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801ba52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ba56:	e7c3      	b.n	801b9e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801ba58:	9b08      	ldr	r3, [sp, #32]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d0f7      	beq.n	801ba4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801ba5e:	2264      	movs	r2, #100	; 0x64
 801ba60:	4639      	mov	r1, r7
 801ba62:	4628      	mov	r0, r5
 801ba64:	f012 fbdc 	bl	802e220 <memcpy>
 801ba68:	2300      	movs	r3, #0
 801ba6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ba6e:	6821      	ldr	r1, [r4, #0]
 801ba70:	4628      	mov	r0, r5
 801ba72:	f7ff fbed 	bl	801b250 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ba76:	b203      	sxth	r3, r0
 801ba78:	e79e      	b.n	801b9b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801ba7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ba7a:	b510      	push	{r4, lr}
 801ba7c:	2b02      	cmp	r3, #2
 801ba7e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ba82:	d00b      	beq.n	801ba9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801ba84:	2b03      	cmp	r3, #3
 801ba86:	d00e      	beq.n	801baa6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801ba88:	2b01      	cmp	r3, #1
 801ba8a:	d001      	beq.n	801ba90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801ba8c:	1860      	adds	r0, r4, r1
 801ba8e:	bd10      	pop	{r4, pc}
 801ba90:	8880      	ldrh	r0, [r0, #4]
 801ba92:	4420      	add	r0, r4
 801ba94:	b200      	sxth	r0, r0
 801ba96:	1a80      	subs	r0, r0, r2
 801ba98:	3801      	subs	r0, #1
 801ba9a:	e7f8      	b.n	801ba8e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801ba9c:	8880      	ldrh	r0, [r0, #4]
 801ba9e:	4420      	add	r0, r4
 801baa0:	b200      	sxth	r0, r0
 801baa2:	1a40      	subs	r0, r0, r1
 801baa4:	e7f8      	b.n	801ba98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801baa6:	18a0      	adds	r0, r4, r2
 801baa8:	e7f1      	b.n	801ba8e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801baaa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801baaa:	b510      	push	{r4, lr}
 801baac:	2b02      	cmp	r3, #2
 801baae:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801bab2:	d006      	beq.n	801bac2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801bab4:	2b03      	cmp	r3, #3
 801bab6:	d00a      	beq.n	801bace <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801bab8:	2b01      	cmp	r3, #1
 801baba:	bf14      	ite	ne
 801babc:	18a0      	addne	r0, r4, r2
 801babe:	1860      	addeq	r0, r4, r1
 801bac0:	bd10      	pop	{r4, pc}
 801bac2:	88c0      	ldrh	r0, [r0, #6]
 801bac4:	4420      	add	r0, r4
 801bac6:	b200      	sxth	r0, r0
 801bac8:	1a80      	subs	r0, r0, r2
 801baca:	3801      	subs	r0, #1
 801bacc:	e7f8      	b.n	801bac0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801bace:	88c0      	ldrh	r0, [r0, #6]
 801bad0:	4420      	add	r0, r4
 801bad2:	b200      	sxth	r0, r0
 801bad4:	1a40      	subs	r0, r0, r1
 801bad6:	e7f8      	b.n	801baca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801bad8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801bad8:	4b01      	ldr	r3, [pc, #4]	; (801bae0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801bada:	2200      	movs	r2, #0
 801badc:	601a      	str	r2, [r3, #0]
 801bade:	4770      	bx	lr
 801bae0:	200097b0 	.word	0x200097b0

0801bae4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801bae4:	4603      	mov	r3, r0
 801bae6:	b1c8      	cbz	r0, 801bb1c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801bae8:	0c02      	lsrs	r2, r0, #16
 801baea:	0412      	lsls	r2, r2, #16
 801baec:	b9a2      	cbnz	r2, 801bb18 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801baee:	0403      	lsls	r3, r0, #16
 801baf0:	2010      	movs	r0, #16
 801baf2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801baf6:	bf04      	itt	eq
 801baf8:	021b      	lsleq	r3, r3, #8
 801bafa:	3008      	addeq	r0, #8
 801bafc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bb00:	bf04      	itt	eq
 801bb02:	011b      	lsleq	r3, r3, #4
 801bb04:	3004      	addeq	r0, #4
 801bb06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bb0a:	bf04      	itt	eq
 801bb0c:	009b      	lsleq	r3, r3, #2
 801bb0e:	3002      	addeq	r0, #2
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	db04      	blt.n	801bb1e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801bb14:	3001      	adds	r0, #1
 801bb16:	4770      	bx	lr
 801bb18:	2000      	movs	r0, #0
 801bb1a:	e7ea      	b.n	801baf2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801bb1c:	2020      	movs	r0, #32
 801bb1e:	4770      	bx	lr

0801bb20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb24:	b087      	sub	sp, #28
 801bb26:	4681      	mov	r9, r0
 801bb28:	4698      	mov	r8, r3
 801bb2a:	4610      	mov	r0, r2
 801bb2c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801bb30:	460d      	mov	r5, r1
 801bb32:	b981      	cbnz	r1, 801bb56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801bb34:	b14b      	cbz	r3, 801bb4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801bb36:	460b      	mov	r3, r1
 801bb38:	e9cd 4700 	strd	r4, r7, [sp]
 801bb3c:	464a      	mov	r2, r9
 801bb3e:	4641      	mov	r1, r8
 801bb40:	f7ff ffee 	bl	801bb20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bb44:	b007      	add	sp, #28
 801bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb4a:	f04f 33ff 	mov.w	r3, #4294967295
 801bb4e:	603b      	str	r3, [r7, #0]
 801bb50:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801bb54:	e7f6      	b.n	801bb44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801bb56:	fa32 fa01 	lsrs.w	sl, r2, r1
 801bb5a:	d107      	bne.n	801bb6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801bb5c:	fb09 f602 	mul.w	r6, r9, r2
 801bb60:	fbb6 f0f4 	udiv	r0, r6, r4
 801bb64:	fb04 6610 	mls	r6, r4, r0, r6
 801bb68:	603e      	str	r6, [r7, #0]
 801bb6a:	e7eb      	b.n	801bb44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801bb6c:	2601      	movs	r6, #1
 801bb6e:	408e      	lsls	r6, r1
 801bb70:	3e01      	subs	r6, #1
 801bb72:	4016      	ands	r6, r2
 801bb74:	fa09 fb01 	lsl.w	fp, r9, r1
 801bb78:	4630      	mov	r0, r6
 801bb7a:	fbbb f3f4 	udiv	r3, fp, r4
 801bb7e:	9302      	str	r3, [sp, #8]
 801bb80:	fb0a f303 	mul.w	r3, sl, r3
 801bb84:	9303      	str	r3, [sp, #12]
 801bb86:	f7ff ffad 	bl	801bae4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bb8a:	464a      	mov	r2, r9
 801bb8c:	460b      	mov	r3, r1
 801bb8e:	e9cd 4700 	strd	r4, r7, [sp]
 801bb92:	4601      	mov	r1, r0
 801bb94:	4630      	mov	r0, r6
 801bb96:	f7ff ffc3 	bl	801bb20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bb9a:	9b02      	ldr	r3, [sp, #8]
 801bb9c:	fb04 bb13 	mls	fp, r4, r3, fp
 801bba0:	4606      	mov	r6, r0
 801bba2:	4658      	mov	r0, fp
 801bba4:	eb05 0108 	add.w	r1, r5, r8
 801bba8:	f7ff ff9c 	bl	801bae4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bbac:	ab05      	add	r3, sp, #20
 801bbae:	e9cd 4300 	strd	r4, r3, [sp]
 801bbb2:	465a      	mov	r2, fp
 801bbb4:	4603      	mov	r3, r0
 801bbb6:	4650      	mov	r0, sl
 801bbb8:	f7ff ffb2 	bl	801bb20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bbbc:	6839      	ldr	r1, [r7, #0]
 801bbbe:	9a05      	ldr	r2, [sp, #20]
 801bbc0:	9b03      	ldr	r3, [sp, #12]
 801bbc2:	4411      	add	r1, r2
 801bbc4:	fbb1 f2f4 	udiv	r2, r1, r4
 801bbc8:	18d3      	adds	r3, r2, r3
 801bbca:	441e      	add	r6, r3
 801bbcc:	fb04 1412 	mls	r4, r4, r2, r1
 801bbd0:	4430      	add	r0, r6
 801bbd2:	603c      	str	r4, [r7, #0]
 801bbd4:	e7b6      	b.n	801bb44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801bbd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801bbd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbda:	b085      	sub	sp, #20
 801bbdc:	f1b0 0900 	subs.w	r9, r0, #0
 801bbe0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bbe2:	461d      	mov	r5, r3
 801bbe4:	bfbf      	itttt	lt
 801bbe6:	6823      	ldrlt	r3, [r4, #0]
 801bbe8:	425b      	neglt	r3, r3
 801bbea:	f1c9 0900 	rsblt	r9, r9, #0
 801bbee:	6023      	strlt	r3, [r4, #0]
 801bbf0:	bfb4      	ite	lt
 801bbf2:	f04f 36ff 	movlt.w	r6, #4294967295
 801bbf6:	2601      	movge	r6, #1
 801bbf8:	2a00      	cmp	r2, #0
 801bbfa:	4617      	mov	r7, r2
 801bbfc:	da04      	bge.n	801bc08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801bbfe:	6823      	ldr	r3, [r4, #0]
 801bc00:	425b      	negs	r3, r3
 801bc02:	4257      	negs	r7, r2
 801bc04:	4276      	negs	r6, r6
 801bc06:	6023      	str	r3, [r4, #0]
 801bc08:	2d00      	cmp	r5, #0
 801bc0a:	4638      	mov	r0, r7
 801bc0c:	bfba      	itte	lt
 801bc0e:	426d      	neglt	r5, r5
 801bc10:	f04f 38ff 	movlt.w	r8, #4294967295
 801bc14:	f04f 0801 	movge.w	r8, #1
 801bc18:	f7ff ff64 	bl	801bae4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bc1c:	ab03      	add	r3, sp, #12
 801bc1e:	e9cd 5300 	strd	r5, r3, [sp]
 801bc22:	463a      	mov	r2, r7
 801bc24:	4603      	mov	r3, r0
 801bc26:	4648      	mov	r0, r9
 801bc28:	f7ff ff7a 	bl	801bb20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bc2c:	6823      	ldr	r3, [r4, #0]
 801bc2e:	9a03      	ldr	r2, [sp, #12]
 801bc30:	4546      	cmp	r6, r8
 801bc32:	441a      	add	r2, r3
 801bc34:	fb92 f3f5 	sdiv	r3, r2, r5
 801bc38:	4418      	add	r0, r3
 801bc3a:	bf18      	it	ne
 801bc3c:	4240      	negne	r0, r0
 801bc3e:	fb05 2313 	mls	r3, r5, r3, r2
 801bc42:	1c72      	adds	r2, r6, #1
 801bc44:	6023      	str	r3, [r4, #0]
 801bc46:	d105      	bne.n	801bc54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	f1c3 0200 	rsb	r2, r3, #0
 801bc4e:	db0b      	blt.n	801bc68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801bc50:	6022      	str	r2, [r4, #0]
 801bc52:	e006      	b.n	801bc62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bc54:	2e01      	cmp	r6, #1
 801bc56:	d104      	bne.n	801bc62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	da02      	bge.n	801bc62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bc5c:	442b      	add	r3, r5
 801bc5e:	3801      	subs	r0, #1
 801bc60:	6023      	str	r3, [r4, #0]
 801bc62:	b005      	add	sp, #20
 801bc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc68:	3801      	subs	r0, #1
 801bc6a:	1b52      	subs	r2, r2, r5
 801bc6c:	e7f0      	b.n	801bc50 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801bc70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bc70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bc74:	4c1c      	ldr	r4, [pc, #112]	; (801bce8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801bc76:	6807      	ldr	r7, [r0, #0]
 801bc78:	69a3      	ldr	r3, [r4, #24]
 801bc7a:	4605      	mov	r5, r0
 801bc7c:	b92b      	cbnz	r3, 801bc8a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801bc7e:	6840      	ldr	r0, [r0, #4]
 801bc80:	e9c5 7000 	strd	r7, r0, [r5]
 801bc84:	b004      	add	sp, #16
 801bc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc8a:	68a2      	ldr	r2, [r4, #8]
 801bc8c:	6820      	ldr	r0, [r4, #0]
 801bc8e:	ae04      	add	r6, sp, #16
 801bc90:	f04f 0802 	mov.w	r8, #2
 801bc94:	fb93 f1f8 	sdiv	r1, r3, r8
 801bc98:	440a      	add	r2, r1
 801bc9a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bc9e:	69e1      	ldr	r1, [r4, #28]
 801bca0:	9600      	str	r6, [sp, #0]
 801bca2:	463a      	mov	r2, r7
 801bca4:	f7ff ff97 	bl	801bbd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bca8:	69a3      	ldr	r3, [r4, #24]
 801bcaa:	686a      	ldr	r2, [r5, #4]
 801bcac:	6a21      	ldr	r1, [r4, #32]
 801bcae:	9600      	str	r6, [sp, #0]
 801bcb0:	4607      	mov	r7, r0
 801bcb2:	6860      	ldr	r0, [r4, #4]
 801bcb4:	f7ff ff8f 	bl	801bbd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bcb8:	6962      	ldr	r2, [r4, #20]
 801bcba:	69a3      	ldr	r3, [r4, #24]
 801bcbc:	fb93 f8f8 	sdiv	r8, r3, r8
 801bcc0:	4442      	add	r2, r8
 801bcc2:	9203      	str	r2, [sp, #12]
 801bcc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bcc6:	682a      	ldr	r2, [r5, #0]
 801bcc8:	9600      	str	r6, [sp, #0]
 801bcca:	4407      	add	r7, r0
 801bccc:	68e0      	ldr	r0, [r4, #12]
 801bcce:	f7ff ff82 	bl	801bbd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bcd2:	9600      	str	r6, [sp, #0]
 801bcd4:	4680      	mov	r8, r0
 801bcd6:	69a3      	ldr	r3, [r4, #24]
 801bcd8:	686a      	ldr	r2, [r5, #4]
 801bcda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bcdc:	6920      	ldr	r0, [r4, #16]
 801bcde:	f7ff ff7a 	bl	801bbd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bce2:	4440      	add	r0, r8
 801bce4:	e7cc      	b.n	801bc80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801bce6:	bf00      	nop
 801bce8:	200097b4 	.word	0x200097b4

0801bcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bcec:	4b07      	ldr	r3, [pc, #28]	; (801bd0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801bcee:	781b      	ldrb	r3, [r3, #0]
 801bcf0:	2b01      	cmp	r3, #1
 801bcf2:	d109      	bne.n	801bd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801bcf4:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bcf8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bcfc:	8003      	strh	r3, [r0, #0]
 801bcfe:	4b04      	ldr	r3, [pc, #16]	; (801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bd00:	881b      	ldrh	r3, [r3, #0]
 801bd02:	3b01      	subs	r3, #1
 801bd04:	1a9b      	subs	r3, r3, r2
 801bd06:	800b      	strh	r3, [r1, #0]
 801bd08:	4770      	bx	lr
 801bd0a:	bf00      	nop
 801bd0c:	200097a0 	.word	0x200097a0
 801bd10:	200097a4 	.word	0x200097a4

0801bd14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801bd14:	b510      	push	{r4, lr}
 801bd16:	4b07      	ldr	r3, [pc, #28]	; (801bd34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801bd18:	781b      	ldrb	r3, [r3, #0]
 801bd1a:	2b01      	cmp	r3, #1
 801bd1c:	d108      	bne.n	801bd30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801bd1e:	4b06      	ldr	r3, [pc, #24]	; (801bd38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801bd20:	880c      	ldrh	r4, [r1, #0]
 801bd22:	881b      	ldrh	r3, [r3, #0]
 801bd24:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bd28:	3b01      	subs	r3, #1
 801bd2a:	1b1b      	subs	r3, r3, r4
 801bd2c:	8003      	strh	r3, [r0, #0]
 801bd2e:	800a      	strh	r2, [r1, #0]
 801bd30:	bd10      	pop	{r4, pc}
 801bd32:	bf00      	nop
 801bd34:	200097a0 	.word	0x200097a0
 801bd38:	200097a4 	.word	0x200097a4

0801bd3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801bd3c:	b510      	push	{r4, lr}
 801bd3e:	4b0a      	ldr	r3, [pc, #40]	; (801bd68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	2b01      	cmp	r3, #1
 801bd44:	d10e      	bne.n	801bd64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801bd46:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801bd4a:	8843      	ldrh	r3, [r0, #2]
 801bd4c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bd50:	8044      	strh	r4, [r0, #2]
 801bd52:	18ca      	adds	r2, r1, r3
 801bd54:	4b05      	ldr	r3, [pc, #20]	; (801bd6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801bd56:	881b      	ldrh	r3, [r3, #0]
 801bd58:	1a9b      	subs	r3, r3, r2
 801bd5a:	8003      	strh	r3, [r0, #0]
 801bd5c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bd60:	80c3      	strh	r3, [r0, #6]
 801bd62:	8081      	strh	r1, [r0, #4]
 801bd64:	bd10      	pop	{r4, pc}
 801bd66:	bf00      	nop
 801bd68:	200097a0 	.word	0x200097a0
 801bd6c:	200097a4 	.word	0x200097a4

0801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801bd70:	4b08      	ldr	r3, [pc, #32]	; (801bd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801bd72:	781b      	ldrb	r3, [r3, #0]
 801bd74:	2b01      	cmp	r3, #1
 801bd76:	d10c      	bne.n	801bd92 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801bd78:	8803      	ldrh	r3, [r0, #0]
 801bd7a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801bd7e:	8842      	ldrh	r2, [r0, #2]
 801bd80:	8002      	strh	r2, [r0, #0]
 801bd82:	185a      	adds	r2, r3, r1
 801bd84:	4b04      	ldr	r3, [pc, #16]	; (801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801bd86:	881b      	ldrh	r3, [r3, #0]
 801bd88:	1a9b      	subs	r3, r3, r2
 801bd8a:	8043      	strh	r3, [r0, #2]
 801bd8c:	88c3      	ldrh	r3, [r0, #6]
 801bd8e:	8083      	strh	r3, [r0, #4]
 801bd90:	80c1      	strh	r1, [r0, #6]
 801bd92:	4770      	bx	lr
 801bd94:	200097a0 	.word	0x200097a0
 801bd98:	200097a4 	.word	0x200097a4

0801bd9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801bd9c:	b510      	push	{r4, lr}
 801bd9e:	4b07      	ldr	r3, [pc, #28]	; (801bdbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	2b01      	cmp	r3, #1
 801bda4:	d108      	bne.n	801bdb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801bda6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bdaa:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bdae:	8003      	strh	r3, [r0, #0]
 801bdb0:	8893      	ldrh	r3, [r2, #4]
 801bdb2:	3b01      	subs	r3, #1
 801bdb4:	1b1b      	subs	r3, r3, r4
 801bdb6:	800b      	strh	r3, [r1, #0]
 801bdb8:	bd10      	pop	{r4, pc}
 801bdba:	bf00      	nop
 801bdbc:	200097a0 	.word	0x200097a0

0801bdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801bdc0:	4b0b      	ldr	r3, [pc, #44]	; (801bdf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	2b01      	cmp	r3, #1
 801bdc6:	d111      	bne.n	801bdec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801bdc8:	680b      	ldr	r3, [r1, #0]
 801bdca:	ed90 7a00 	vldr	s14, [r0]
 801bdce:	6003      	str	r3, [r0, #0]
 801bdd0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801bdd4:	eddf 6a07 	vldr	s13, [pc, #28]	; 801bdf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801bdd8:	ee07 3a90 	vmov	s15, r3
 801bddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bde0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bde4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bde8:	edc1 7a00 	vstr	s15, [r1]
 801bdec:	4770      	bx	lr
 801bdee:	bf00      	nop
 801bdf0:	200097a0 	.word	0x200097a0
 801bdf4:	38d1b717 	.word	0x38d1b717

0801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bdf8:	b510      	push	{r4, lr}
 801bdfa:	4b0a      	ldr	r3, [pc, #40]	; (801be24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bdfc:	781b      	ldrb	r3, [r3, #0]
 801bdfe:	2b01      	cmp	r3, #1
 801be00:	460a      	mov	r2, r1
 801be02:	d10d      	bne.n	801be20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801be04:	8881      	ldrh	r1, [r0, #4]
 801be06:	8803      	ldrh	r3, [r0, #0]
 801be08:	440b      	add	r3, r1
 801be0a:	4601      	mov	r1, r0
 801be0c:	3b01      	subs	r3, #1
 801be0e:	f821 3b02 	strh.w	r3, [r1], #2
 801be12:	f7ff ffc3 	bl	801bd9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801be16:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801be1a:	88c2      	ldrh	r2, [r0, #6]
 801be1c:	8082      	strh	r2, [r0, #4]
 801be1e:	80c3      	strh	r3, [r0, #6]
 801be20:	bd10      	pop	{r4, pc}
 801be22:	bf00      	nop
 801be24:	200097a0 	.word	0x200097a0

0801be28 <_ZN8touchgfx11Application13requestRedrawEv>:
 801be28:	4b06      	ldr	r3, [pc, #24]	; (801be44 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801be2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be2e:	4b06      	ldr	r3, [pc, #24]	; (801be48 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801be30:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801be34:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be38:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801be3c:	2100      	movs	r1, #0
 801be3e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801be42:	4770      	bx	lr
 801be44:	2000979c 	.word	0x2000979c
 801be48:	2000979e 	.word	0x2000979e

0801be4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801be4c:	4b03      	ldr	r3, [pc, #12]	; (801be5c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801be4e:	6818      	ldr	r0, [r3, #0]
 801be50:	b110      	cbz	r0, 801be58 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801be52:	6803      	ldr	r3, [r0, #0]
 801be54:	699b      	ldr	r3, [r3, #24]
 801be56:	4718      	bx	r3
 801be58:	4770      	bx	lr
 801be5a:	bf00      	nop
 801be5c:	200097e4 	.word	0x200097e4

0801be60 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801be60:	4770      	bx	lr
	...

0801be64 <_ZN8touchgfx11Application4drawEv>:
 801be64:	b507      	push	{r0, r1, r2, lr}
 801be66:	4b09      	ldr	r3, [pc, #36]	; (801be8c <_ZN8touchgfx11Application4drawEv+0x28>)
 801be68:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be6c:	4b08      	ldr	r3, [pc, #32]	; (801be90 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801be6e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be72:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be76:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be7a:	6803      	ldr	r3, [r0, #0]
 801be7c:	2100      	movs	r1, #0
 801be7e:	9100      	str	r1, [sp, #0]
 801be80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801be82:	4669      	mov	r1, sp
 801be84:	4798      	blx	r3
 801be86:	b003      	add	sp, #12
 801be88:	f85d fb04 	ldr.w	pc, [sp], #4
 801be8c:	2000979c 	.word	0x2000979c
 801be90:	2000979e 	.word	0x2000979e

0801be94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801be94:	4b03      	ldr	r3, [pc, #12]	; (801bea4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801be96:	6818      	ldr	r0, [r3, #0]
 801be98:	b110      	cbz	r0, 801bea0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801be9a:	6803      	ldr	r3, [r0, #0]
 801be9c:	69db      	ldr	r3, [r3, #28]
 801be9e:	4718      	bx	r3
 801bea0:	4770      	bx	lr
 801bea2:	bf00      	nop
 801bea4:	200097e4 	.word	0x200097e4

0801bea8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bea8:	4b03      	ldr	r3, [pc, #12]	; (801beb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801beaa:	6818      	ldr	r0, [r3, #0]
 801beac:	b110      	cbz	r0, 801beb4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801beae:	6803      	ldr	r3, [r0, #0]
 801beb0:	6a1b      	ldr	r3, [r3, #32]
 801beb2:	4718      	bx	r3
 801beb4:	4770      	bx	lr
 801beb6:	bf00      	nop
 801beb8:	200097e4 	.word	0x200097e4

0801bebc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bebc:	4b03      	ldr	r3, [pc, #12]	; (801becc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bebe:	6818      	ldr	r0, [r3, #0]
 801bec0:	b110      	cbz	r0, 801bec8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bec2:	6803      	ldr	r3, [r0, #0]
 801bec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bec6:	4718      	bx	r3
 801bec8:	4770      	bx	lr
 801beca:	bf00      	nop
 801becc:	200097e4 	.word	0x200097e4

0801bed0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801bed0:	b570      	push	{r4, r5, r6, lr}
 801bed2:	4d38      	ldr	r5, [pc, #224]	; (801bfb4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801bed4:	4604      	mov	r4, r0
 801bed6:	6828      	ldr	r0, [r5, #0]
 801bed8:	b140      	cbz	r0, 801beec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801beda:	7a03      	ldrb	r3, [r0, #8]
 801bedc:	b933      	cbnz	r3, 801beec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bede:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801bee2:	6803      	ldr	r3, [r0, #0]
 801bee4:	689b      	ldr	r3, [r3, #8]
 801bee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801beea:	4718      	bx	r3
 801beec:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801bef0:	b97b      	cbnz	r3, 801bf12 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bef2:	b170      	cbz	r0, 801bf12 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bef4:	7a03      	ldrb	r3, [r0, #8]
 801bef6:	b163      	cbz	r3, 801bf12 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bef8:	4b2f      	ldr	r3, [pc, #188]	; (801bfb8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801befa:	6818      	ldr	r0, [r3, #0]
 801befc:	b110      	cbz	r0, 801bf04 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801befe:	6803      	ldr	r3, [r0, #0]
 801bf00:	691b      	ldr	r3, [r3, #16]
 801bf02:	4798      	blx	r3
 801bf04:	6828      	ldr	r0, [r5, #0]
 801bf06:	6803      	ldr	r3, [r0, #0]
 801bf08:	68db      	ldr	r3, [r3, #12]
 801bf0a:	4798      	blx	r3
 801bf0c:	2301      	movs	r3, #1
 801bf0e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801bf12:	2500      	movs	r5, #0
 801bf14:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801bf18:	42a8      	cmp	r0, r5
 801bf1a:	dd0c      	ble.n	801bf36 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801bf1c:	1963      	adds	r3, r4, r5
 801bf1e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801bf22:	b132      	cbz	r2, 801bf32 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801bf24:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801bf28:	4413      	add	r3, r2
 801bf2a:	6858      	ldr	r0, [r3, #4]
 801bf2c:	6803      	ldr	r3, [r0, #0]
 801bf2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bf30:	4798      	blx	r3
 801bf32:	3501      	adds	r5, #1
 801bf34:	e7ee      	b.n	801bf14 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801bf36:	2300      	movs	r3, #0
 801bf38:	461a      	mov	r2, r3
 801bf3a:	4298      	cmp	r0, r3
 801bf3c:	d10f      	bne.n	801bf5e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801bf3e:	1d25      	adds	r5, r4, #4
 801bf40:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801bf44:	4291      	cmp	r1, r2
 801bf46:	dd2d      	ble.n	801bfa4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801bf48:	1e48      	subs	r0, r1, #1
 801bf4a:	b280      	uxth	r0, r0
 801bf4c:	4288      	cmp	r0, r1
 801bf4e:	d31a      	bcc.n	801bf86 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801bf50:	4b1a      	ldr	r3, [pc, #104]	; (801bfbc <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801bf52:	4a1b      	ldr	r2, [pc, #108]	; (801bfc0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801bf54:	481b      	ldr	r0, [pc, #108]	; (801bfc4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801bf56:	f240 11a9 	movw	r1, #425	; 0x1a9
 801bf5a:	f011 ffe1 	bl	802df20 <__assert_func>
 801bf5e:	18e1      	adds	r1, r4, r3
 801bf60:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801bf64:	b16d      	cbz	r5, 801bf82 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801bf66:	429a      	cmp	r2, r3
 801bf68:	d00a      	beq.n	801bf80 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801bf6a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801bf6e:	4431      	add	r1, r6
 801bf70:	684e      	ldr	r6, [r1, #4]
 801bf72:	b291      	uxth	r1, r2
 801bf74:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bf78:	604e      	str	r6, [r1, #4]
 801bf7a:	18a1      	adds	r1, r4, r2
 801bf7c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801bf80:	3201      	adds	r2, #1
 801bf82:	3301      	adds	r3, #1
 801bf84:	e7d9      	b.n	801bf3a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801bf86:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801bf8a:	3304      	adds	r3, #4
 801bf8c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801bf90:	428b      	cmp	r3, r1
 801bf92:	d004      	beq.n	801bf9e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801bf94:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801bf98:	f843 6c04 	str.w	r6, [r3, #-4]
 801bf9c:	e7f8      	b.n	801bf90 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801bf9e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801bfa2:	e7cd      	b.n	801bf40 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801bfa4:	4b04      	ldr	r3, [pc, #16]	; (801bfb8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801bfa6:	6818      	ldr	r0, [r3, #0]
 801bfa8:	b110      	cbz	r0, 801bfb0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801bfaa:	6803      	ldr	r3, [r0, #0]
 801bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfae:	e79a      	b.n	801bee6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bfb0:	bd70      	pop	{r4, r5, r6, pc}
 801bfb2:	bf00      	nop
 801bfb4:	200097e8 	.word	0x200097e8
 801bfb8:	200097e4 	.word	0x200097e4
 801bfbc:	08031ce0 	.word	0x08031ce0
 801bfc0:	08031f39 	.word	0x08031f39
 801bfc4:	08031cee 	.word	0x08031cee

0801bfc8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bfc8:	b570      	push	{r4, r5, r6, lr}
 801bfca:	4606      	mov	r6, r0
 801bfcc:	460c      	mov	r4, r1
 801bfce:	b929      	cbnz	r1, 801bfdc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801bfd0:	4b0c      	ldr	r3, [pc, #48]	; (801c004 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801bfd2:	4a0d      	ldr	r2, [pc, #52]	; (801c008 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801bfd4:	480d      	ldr	r0, [pc, #52]	; (801c00c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801bfd6:	2167      	movs	r1, #103	; 0x67
 801bfd8:	f011 ffa2 	bl	802df20 <__assert_func>
 801bfdc:	4d0c      	ldr	r5, [pc, #48]	; (801c010 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801bfde:	2300      	movs	r3, #0
 801bfe0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801bfe4:	6828      	ldr	r0, [r5, #0]
 801bfe6:	b110      	cbz	r0, 801bfee <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801bfe8:	6803      	ldr	r3, [r0, #0]
 801bfea:	695b      	ldr	r3, [r3, #20]
 801bfec:	4798      	blx	r3
 801bfee:	602c      	str	r4, [r5, #0]
 801bff0:	6823      	ldr	r3, [r4, #0]
 801bff2:	4620      	mov	r0, r4
 801bff4:	68db      	ldr	r3, [r3, #12]
 801bff6:	4798      	blx	r3
 801bff8:	6833      	ldr	r3, [r6, #0]
 801bffa:	4630      	mov	r0, r6
 801bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c002:	4718      	bx	r3
 801c004:	08031cac 	.word	0x08031cac
 801c008:	08031db4 	.word	0x08031db4
 801c00c:	08031cb6 	.word	0x08031cb6
 801c010:	200097e4 	.word	0x200097e4

0801c014 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c014:	b570      	push	{r4, r5, r6, lr}
 801c016:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c01a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c01e:	42ac      	cmp	r4, r5
 801c020:	db18      	blt.n	801c054 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c022:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c026:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c02a:	429a      	cmp	r2, r3
 801c02c:	db12      	blt.n	801c054 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c02e:	8886      	ldrh	r6, [r0, #4]
 801c030:	4435      	add	r5, r6
 801c032:	888e      	ldrh	r6, [r1, #4]
 801c034:	4434      	add	r4, r6
 801c036:	b22d      	sxth	r5, r5
 801c038:	b224      	sxth	r4, r4
 801c03a:	42a5      	cmp	r5, r4
 801c03c:	db0a      	blt.n	801c054 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c03e:	88c0      	ldrh	r0, [r0, #6]
 801c040:	4418      	add	r0, r3
 801c042:	88cb      	ldrh	r3, [r1, #6]
 801c044:	441a      	add	r2, r3
 801c046:	b200      	sxth	r0, r0
 801c048:	b212      	sxth	r2, r2
 801c04a:	4290      	cmp	r0, r2
 801c04c:	bfb4      	ite	lt
 801c04e:	2000      	movlt	r0, #0
 801c050:	2001      	movge	r0, #1
 801c052:	bd70      	pop	{r4, r5, r6, pc}
 801c054:	2000      	movs	r0, #0
 801c056:	e7fc      	b.n	801c052 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801c058 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c05a:	4604      	mov	r4, r0
 801c05c:	4608      	mov	r0, r1
 801c05e:	460d      	mov	r5, r1
 801c060:	f7fb fab5 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c064:	b978      	cbnz	r0, 801c086 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801c066:	4620      	mov	r0, r4
 801c068:	f7fb fab1 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c06c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801c070:	b150      	cbz	r0, 801c088 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801c072:	8026      	strh	r6, [r4, #0]
 801c074:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c078:	8063      	strh	r3, [r4, #2]
 801c07a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801c07e:	80a3      	strh	r3, [r4, #4]
 801c080:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c084:	80e3      	strh	r3, [r4, #6]
 801c086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c088:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c08c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c090:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c094:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801c098:	88ed      	ldrh	r5, [r5, #6]
 801c09a:	42b1      	cmp	r1, r6
 801c09c:	460f      	mov	r7, r1
 801c09e:	bfa8      	it	ge
 801c0a0:	4637      	movge	r7, r6
 801c0a2:	4293      	cmp	r3, r2
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	4466      	add	r6, ip
 801c0a8:	bfa8      	it	ge
 801c0aa:	4610      	movge	r0, r2
 801c0ac:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c0b0:	8027      	strh	r7, [r4, #0]
 801c0b2:	442a      	add	r2, r5
 801c0b4:	88e5      	ldrh	r5, [r4, #6]
 801c0b6:	8060      	strh	r0, [r4, #2]
 801c0b8:	4461      	add	r1, ip
 801c0ba:	442b      	add	r3, r5
 801c0bc:	b236      	sxth	r6, r6
 801c0be:	b209      	sxth	r1, r1
 801c0c0:	b212      	sxth	r2, r2
 801c0c2:	b21b      	sxth	r3, r3
 801c0c4:	428e      	cmp	r6, r1
 801c0c6:	bfac      	ite	ge
 801c0c8:	ebc7 0106 	rsbge	r1, r7, r6
 801c0cc:	ebc7 0101 	rsblt	r1, r7, r1
 801c0d0:	429a      	cmp	r2, r3
 801c0d2:	bfac      	ite	ge
 801c0d4:	ebc0 0202 	rsbge	r2, r0, r2
 801c0d8:	ebc0 0203 	rsblt	r2, r0, r3
 801c0dc:	80a1      	strh	r1, [r4, #4]
 801c0de:	80e2      	strh	r2, [r4, #6]
 801c0e0:	e7d1      	b.n	801c086 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c0e4 <_ZN8touchgfx11Application11getInstanceEv>:
 801c0e4:	4b01      	ldr	r3, [pc, #4]	; (801c0ec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c0e6:	6818      	ldr	r0, [r3, #0]
 801c0e8:	4770      	bx	lr
 801c0ea:	bf00      	nop
 801c0ec:	200097f4 	.word	0x200097f4

0801c0f0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801c0f0:	b570      	push	{r4, r5, r6, lr}
 801c0f2:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801c0f6:	1d04      	adds	r4, r0, #4
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	b295      	uxth	r5, r2
 801c0fc:	42ab      	cmp	r3, r5
 801c0fe:	d90f      	bls.n	801c120 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801c100:	f854 6b04 	ldr.w	r6, [r4], #4
 801c104:	428e      	cmp	r6, r1
 801c106:	4615      	mov	r5, r2
 801c108:	f102 0201 	add.w	r2, r2, #1
 801c10c:	d1f5      	bne.n	801c0fa <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801c10e:	4428      	add	r0, r5
 801c110:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801c114:	2bff      	cmp	r3, #255	; 0xff
 801c116:	d002      	beq.n	801c11e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c118:	3301      	adds	r3, #1
 801c11a:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801c11e:	bd70      	pop	{r4, r5, r6, pc}
 801c120:	2b20      	cmp	r3, #32
 801c122:	d106      	bne.n	801c132 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801c124:	4b08      	ldr	r3, [pc, #32]	; (801c148 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801c126:	4a09      	ldr	r2, [pc, #36]	; (801c14c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801c128:	4809      	ldr	r0, [pc, #36]	; (801c150 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801c12a:	f240 215f 	movw	r1, #607	; 0x25f
 801c12e:	f011 fef7 	bl	802df20 <__assert_func>
 801c132:	18c2      	adds	r2, r0, r3
 801c134:	2401      	movs	r4, #1
 801c136:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801c13a:	191a      	adds	r2, r3, r4
 801c13c:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801c140:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c144:	6041      	str	r1, [r0, #4]
 801c146:	e7ea      	b.n	801c11e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c148:	08031d17 	.word	0x08031d17
 801c14c:	08031df8 	.word	0x08031df8
 801c150:	08031cb6 	.word	0x08031cb6

0801c154 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801c154:	b570      	push	{r4, r5, r6, lr}
 801c156:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801c15a:	1d04      	adds	r4, r0, #4
 801c15c:	2300      	movs	r3, #0
 801c15e:	b29a      	uxth	r2, r3
 801c160:	4296      	cmp	r6, r2
 801c162:	d90a      	bls.n	801c17a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801c164:	f854 2b04 	ldr.w	r2, [r4], #4
 801c168:	428a      	cmp	r2, r1
 801c16a:	d107      	bne.n	801c17c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c16c:	18c5      	adds	r5, r0, r3
 801c16e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801c172:	b11a      	cbz	r2, 801c17c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c174:	3a01      	subs	r2, #1
 801c176:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801c17a:	bd70      	pop	{r4, r5, r6, pc}
 801c17c:	3301      	adds	r3, #1
 801c17e:	e7ee      	b.n	801c15e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801c180 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c180:	2300      	movs	r3, #0
 801c182:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c186:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c18a:	30a8      	adds	r0, #168	; 0xa8
 801c18c:	f802 3b01 	strb.w	r3, [r2], #1
 801c190:	4282      	cmp	r2, r0
 801c192:	d1fb      	bne.n	801c18c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c194:	4770      	bx	lr

0801c196 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c196:	4603      	mov	r3, r0
 801c198:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c19c:	2200      	movs	r2, #0
 801c19e:	801a      	strh	r2, [r3, #0]
 801c1a0:	805a      	strh	r2, [r3, #2]
 801c1a2:	809a      	strh	r2, [r3, #4]
 801c1a4:	80da      	strh	r2, [r3, #6]
 801c1a6:	3308      	adds	r3, #8
 801c1a8:	428b      	cmp	r3, r1
 801c1aa:	d1f8      	bne.n	801c19e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c1ac:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c1b0:	4770      	bx	lr
	...

0801c1b4 <_ZN8touchgfx11ApplicationC1Ev>:
 801c1b4:	b570      	push	{r4, r5, r6, lr}
 801c1b6:	4b1a      	ldr	r3, [pc, #104]	; (801c220 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c1b8:	6003      	str	r3, [r0, #0]
 801c1ba:	2500      	movs	r5, #0
 801c1bc:	4604      	mov	r4, r0
 801c1be:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801c1c2:	30a8      	adds	r0, #168	; 0xa8
 801c1c4:	f7ff ffe7 	bl	801c196 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c1c8:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c1cc:	f7ff ffe3 	bl	801c196 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c1d0:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801c1d4:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801c1d8:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801c1dc:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801c1e0:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801c1e4:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801c1e8:	490e      	ldr	r1, [pc, #56]	; (801c224 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c1ea:	480f      	ldr	r0, [pc, #60]	; (801c228 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c1ec:	4e0f      	ldr	r6, [pc, #60]	; (801c22c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c1ee:	f00f faa5 	bl	802b73c <CRC_Lock>
 801c1f2:	4b0f      	ldr	r3, [pc, #60]	; (801c230 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c1f4:	b158      	cbz	r0, 801c20e <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801c1f6:	801d      	strh	r5, [r3, #0]
 801c1f8:	4a0e      	ldr	r2, [pc, #56]	; (801c234 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	6013      	str	r3, [r2, #0]
 801c1fe:	4a0e      	ldr	r2, [pc, #56]	; (801c238 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c200:	6033      	str	r3, [r6, #0]
 801c202:	4620      	mov	r0, r4
 801c204:	6013      	str	r3, [r2, #0]
 801c206:	f7ff ffbb 	bl	801c180 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c20a:	4620      	mov	r0, r4
 801c20c:	bd70      	pop	{r4, r5, r6, pc}
 801c20e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c212:	2002      	movs	r0, #2
 801c214:	801a      	strh	r2, [r3, #0]
 801c216:	6030      	str	r0, [r6, #0]
 801c218:	f001 faae 	bl	801d778 <_ZN8touchgfx6Screen4drawEv>
 801c21c:	e7ec      	b.n	801c1f8 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801c21e:	bf00      	nop
 801c220:	08031d78 	.word	0x08031d78
 801c224:	b5e8b5cd 	.word	0xb5e8b5cd
 801c228:	f407a5c2 	.word	0xf407a5c2
 801c22c:	200097e4 	.word	0x200097e4
 801c230:	20000020 	.word	0x20000020
 801c234:	200097f4 	.word	0x200097f4
 801c238:	200097e8 	.word	0x200097e8

0801c23c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c23c:	b510      	push	{r4, lr}
 801c23e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801c242:	428b      	cmp	r3, r1
 801c244:	d806      	bhi.n	801c254 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801c246:	4b0b      	ldr	r3, [pc, #44]	; (801c274 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801c248:	4a0b      	ldr	r2, [pc, #44]	; (801c278 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801c24a:	480c      	ldr	r0, [pc, #48]	; (801c27c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801c24c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801c250:	f011 fe66 	bl	802df20 <__assert_func>
 801c254:	3b01      	subs	r3, #1
 801c256:	b29b      	uxth	r3, r3
 801c258:	428b      	cmp	r3, r1
 801c25a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801c25e:	d908      	bls.n	801c272 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801c260:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801c264:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801c268:	681a      	ldr	r2, [r3, #0]
 801c26a:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801c26e:	685a      	ldr	r2, [r3, #4]
 801c270:	6062      	str	r2, [r4, #4]
 801c272:	bd10      	pop	{r4, pc}
 801c274:	08031ce0 	.word	0x08031ce0
 801c278:	08031e3d 	.word	0x08031e3d
 801c27c:	08031cee 	.word	0x08031cee

0801c280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c282:	466b      	mov	r3, sp
 801c284:	e883 0006 	stmia.w	r3, {r1, r2}
 801c288:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c28c:	2a07      	cmp	r2, #7
 801c28e:	4604      	mov	r4, r0
 801c290:	d906      	bls.n	801c2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c292:	4b09      	ldr	r3, [pc, #36]	; (801c2b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c294:	4a09      	ldr	r2, [pc, #36]	; (801c2bc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c296:	480a      	ldr	r0, [pc, #40]	; (801c2c0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c298:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801c29c:	f011 fe40 	bl	802df20 <__assert_func>
 801c2a0:	1c51      	adds	r1, r2, #1
 801c2a2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c2a6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c2aa:	cb03      	ldmia	r3!, {r0, r1}
 801c2ac:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c2b0:	6069      	str	r1, [r5, #4]
 801c2b2:	b003      	add	sp, #12
 801c2b4:	bd30      	pop	{r4, r5, pc}
 801c2b6:	bf00      	nop
 801c2b8:	08031d3f 	.word	0x08031d3f
 801c2bc:	08031ed3 	.word	0x08031ed3
 801c2c0:	08031cee 	.word	0x08031cee

0801c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2c8:	b08d      	sub	sp, #52	; 0x34
 801c2ca:	ac08      	add	r4, sp, #32
 801c2cc:	4683      	mov	fp, r0
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	e884 0006 	stmia.w	r4, {r1, r2}
 801c2d4:	f7fb f97b 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2d8:	2800      	cmp	r0, #0
 801c2da:	d16a      	bne.n	801c3b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c2dc:	9402      	str	r4, [sp, #8]
 801c2de:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c2e2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c2e6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801c2ea:	2400      	movs	r4, #0
 801c2ec:	9301      	str	r3, [sp, #4]
 801c2ee:	36a0      	adds	r6, #160	; 0xa0
 801c2f0:	42a5      	cmp	r5, r4
 801c2f2:	d00d      	beq.n	801c310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801c2f4:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801c2f8:	9802      	ldr	r0, [sp, #8]
 801c2fa:	f7ff fe8b 	bl	801c014 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c2fe:	b128      	cbz	r0, 801c30c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801c300:	1e69      	subs	r1, r5, #1
 801c302:	1b09      	subs	r1, r1, r4
 801c304:	b289      	uxth	r1, r1
 801c306:	9801      	ldr	r0, [sp, #4]
 801c308:	f7ff ff98 	bl	801c23c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c30c:	3401      	adds	r4, #1
 801c30e:	e7ef      	b.n	801c2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c310:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c314:	9703      	str	r7, [sp, #12]
 801c316:	1e7b      	subs	r3, r7, #1
 801c318:	9300      	str	r3, [sp, #0]
 801c31a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801c31e:	2400      	movs	r4, #0
 801c320:	4655      	mov	r5, sl
 801c322:	9704      	str	r7, [sp, #16]
 801c324:	4626      	mov	r6, r4
 801c326:	9b04      	ldr	r3, [sp, #16]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d078      	beq.n	801c41e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801c32c:	9902      	ldr	r1, [sp, #8]
 801c32e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c332:	f7fc fe1d 	bl	8018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c336:	b360      	cbz	r0, 801c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c338:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c33c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801c340:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801c344:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801c348:	45e6      	cmp	lr, ip
 801c34a:	db35      	blt.n	801c3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c34c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c350:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c354:	4472      	add	r2, lr
 801c356:	4463      	add	r3, ip
 801c358:	b212      	sxth	r2, r2
 801c35a:	b21b      	sxth	r3, r3
 801c35c:	429a      	cmp	r2, r3
 801c35e:	dc2b      	bgt.n	801c3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c360:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c364:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c368:	fa1f f288 	uxth.w	r2, r8
 801c36c:	4413      	add	r3, r2
 801c36e:	b29b      	uxth	r3, r3
 801c370:	45c1      	cmp	r9, r8
 801c372:	fa0f fe83 	sxth.w	lr, r3
 801c376:	fa1f fc89 	uxth.w	ip, r9
 801c37a:	db0f      	blt.n	801c39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801c37c:	eba3 030c 	sub.w	r3, r3, ip
 801c380:	1ac9      	subs	r1, r1, r3
 801c382:	b209      	sxth	r1, r1
 801c384:	2900      	cmp	r1, #0
 801c386:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c38a:	dd12      	ble.n	801c3b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c38c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801c390:	4604      	mov	r4, r0
 801c392:	9b04      	ldr	r3, [sp, #16]
 801c394:	3b01      	subs	r3, #1
 801c396:	9304      	str	r3, [sp, #16]
 801c398:	3d08      	subs	r5, #8
 801c39a:	e7c4      	b.n	801c326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801c39c:	4461      	add	r1, ip
 801c39e:	b209      	sxth	r1, r1
 801c3a0:	4571      	cmp	r1, lr
 801c3a2:	dc3a      	bgt.n	801c41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c3a4:	eba2 020c 	sub.w	r2, r2, ip
 801c3a8:	b212      	sxth	r2, r2
 801c3aa:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c3ae:	2a00      	cmp	r2, #0
 801c3b0:	dcee      	bgt.n	801c390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c3b2:	b00d      	add	sp, #52	; 0x34
 801c3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3b8:	45c1      	cmp	r9, r8
 801c3ba:	db2e      	blt.n	801c41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c3bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801c3c0:	4499      	add	r9, r3
 801c3c2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c3c6:	4498      	add	r8, r3
 801c3c8:	fa0f f989 	sxth.w	r9, r9
 801c3cc:	fa0f f888 	sxth.w	r8, r8
 801c3d0:	45c1      	cmp	r9, r8
 801c3d2:	dc22      	bgt.n	801c41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c3d4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c3d8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c3dc:	fa1f f28c 	uxth.w	r2, ip
 801c3e0:	4413      	add	r3, r2
 801c3e2:	b29b      	uxth	r3, r3
 801c3e4:	45e6      	cmp	lr, ip
 801c3e6:	fa1f f88e 	uxth.w	r8, lr
 801c3ea:	fa0f f983 	sxth.w	r9, r3
 801c3ee:	db0a      	blt.n	801c406 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801c3f0:	eba3 0308 	sub.w	r3, r3, r8
 801c3f4:	1ac9      	subs	r1, r1, r3
 801c3f6:	b209      	sxth	r1, r1
 801c3f8:	2900      	cmp	r1, #0
 801c3fa:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801c3fe:	ddd8      	ble.n	801c3b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c400:	f8ad 9020 	strh.w	r9, [sp, #32]
 801c404:	e7c4      	b.n	801c390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c406:	4441      	add	r1, r8
 801c408:	b209      	sxth	r1, r1
 801c40a:	4549      	cmp	r1, r9
 801c40c:	dc05      	bgt.n	801c41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c40e:	eba2 0208 	sub.w	r2, r2, r8
 801c412:	b212      	sxth	r2, r2
 801c414:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c418:	e7c9      	b.n	801c3ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c41a:	4606      	mov	r6, r0
 801c41c:	e7b9      	b.n	801c392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c41e:	2c00      	cmp	r4, #0
 801c420:	f47f af7d 	bne.w	801c31e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801c424:	2e00      	cmp	r6, #0
 801c426:	f000 81dd 	beq.w	801c7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c42a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801c42e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801c432:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c436:	b2b9      	uxth	r1, r7
 801c438:	9104      	str	r1, [sp, #16]
 801c43a:	9804      	ldr	r0, [sp, #16]
 801c43c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c440:	4401      	add	r1, r0
 801c442:	b2b3      	uxth	r3, r6
 801c444:	b289      	uxth	r1, r1
 801c446:	441a      	add	r2, r3
 801c448:	9105      	str	r1, [sp, #20]
 801c44a:	b292      	uxth	r2, r2
 801c44c:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801c450:	fa0f f882 	sxth.w	r8, r2
 801c454:	4655      	mov	r5, sl
 801c456:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c45a:	9b03      	ldr	r3, [sp, #12]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d054      	beq.n	801c50a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801c460:	9902      	ldr	r1, [sp, #8]
 801c462:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c466:	f7fc fd83 	bl	8018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c46e:	b1d8      	cbz	r0, 801c4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c470:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801c474:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801c478:	4576      	cmp	r6, lr
 801c47a:	dc26      	bgt.n	801c4ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c47c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801c480:	44f4      	add	ip, lr
 801c482:	fa0f fc8c 	sxth.w	ip, ip
 801c486:	45e0      	cmp	r8, ip
 801c488:	db1f      	blt.n	801c4ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c48a:	428f      	cmp	r7, r1
 801c48c:	fa1f fc81 	uxth.w	ip, r1
 801c490:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801c494:	dc0f      	bgt.n	801c4b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c496:	9805      	ldr	r0, [sp, #20]
 801c498:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801c49c:	eba0 0c0c 	sub.w	ip, r0, ip
 801c4a0:	eba1 010c 	sub.w	r1, r1, ip
 801c4a4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	9903      	ldr	r1, [sp, #12]
 801c4ac:	3901      	subs	r1, #1
 801c4ae:	9103      	str	r1, [sp, #12]
 801c4b0:	3d08      	subs	r5, #8
 801c4b2:	4604      	mov	r4, r0
 801c4b4:	e7cf      	b.n	801c456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801c4b6:	4461      	add	r1, ip
 801c4b8:	b209      	sxth	r1, r1
 801c4ba:	4549      	cmp	r1, r9
 801c4bc:	dcf5      	bgt.n	801c4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c4be:	9904      	ldr	r1, [sp, #16]
 801c4c0:	eba1 0c0c 	sub.w	ip, r1, ip
 801c4c4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801c4c8:	e7ee      	b.n	801c4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c4ca:	428f      	cmp	r7, r1
 801c4cc:	dced      	bgt.n	801c4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c4ce:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801c4d2:	4461      	add	r1, ip
 801c4d4:	b209      	sxth	r1, r1
 801c4d6:	4589      	cmp	r9, r1
 801c4d8:	dbe7      	blt.n	801c4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c4da:	4576      	cmp	r6, lr
 801c4dc:	fa1f fc8e 	uxth.w	ip, lr
 801c4e0:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801c4e4:	dc08      	bgt.n	801c4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801c4e6:	eba2 0c0c 	sub.w	ip, r2, ip
 801c4ea:	eba1 010c 	sub.w	r1, r1, ip
 801c4ee:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801c4f2:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801c4f6:	e7d7      	b.n	801c4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c4f8:	4461      	add	r1, ip
 801c4fa:	b209      	sxth	r1, r1
 801c4fc:	4588      	cmp	r8, r1
 801c4fe:	dbd4      	blt.n	801c4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c500:	eba3 0c0c 	sub.w	ip, r3, ip
 801c504:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801c508:	e7ce      	b.n	801c4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c50a:	2c00      	cmp	r4, #0
 801c50c:	f000 816a 	beq.w	801c7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c510:	9b00      	ldr	r3, [sp, #0]
 801c512:	3301      	adds	r3, #1
 801c514:	f000 8166 	beq.w	801c7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c518:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801c51c:	4621      	mov	r1, r4
 801c51e:	9802      	ldr	r0, [sp, #8]
 801c520:	f7ff fd78 	bl	801c014 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c524:	b120      	cbz	r0, 801c530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801c526:	f8bd 1000 	ldrh.w	r1, [sp]
 801c52a:	9801      	ldr	r0, [sp, #4]
 801c52c:	f7ff fe86 	bl	801c23c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c530:	9902      	ldr	r1, [sp, #8]
 801c532:	4620      	mov	r0, r4
 801c534:	f7fc fd1c 	bl	8018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c538:	2800      	cmp	r0, #0
 801c53a:	f000 809b 	beq.w	801c674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801c53e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c542:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801c546:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801c54a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801c54e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c552:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801c556:	fa1f f288 	uxth.w	r2, r8
 801c55a:	19d5      	adds	r5, r2, r7
 801c55c:	fa1f f985 	uxth.w	r9, r5
 801c560:	fa0f f589 	sxth.w	r5, r9
 801c564:	b2a1      	uxth	r1, r4
 801c566:	440b      	add	r3, r1
 801c568:	9503      	str	r5, [sp, #12]
 801c56a:	45a0      	cmp	r8, r4
 801c56c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c570:	9507      	str	r5, [sp, #28]
 801c572:	b29b      	uxth	r3, r3
 801c574:	f340 809d 	ble.w	801c6b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c578:	1a52      	subs	r2, r2, r1
 801c57a:	b292      	uxth	r2, r2
 801c57c:	4584      	cmp	ip, r0
 801c57e:	fa0f fe83 	sxth.w	lr, r3
 801c582:	b215      	sxth	r5, r2
 801c584:	dd2f      	ble.n	801c5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801c586:	9e00      	ldr	r6, [sp, #0]
 801c588:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c58c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801c590:	9e03      	ldr	r6, [sp, #12]
 801c592:	eba6 060e 	sub.w	r6, r6, lr
 801c596:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801c59a:	fa1f fc8c 	uxth.w	ip, ip
 801c59e:	b280      	uxth	r0, r0
 801c5a0:	ebac 0300 	sub.w	r3, ip, r0
 801c5a4:	448c      	add	ip, r1
 801c5a6:	4470      	add	r0, lr
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	fa0f fc8c 	sxth.w	ip, ip
 801c5ae:	b200      	sxth	r0, r0
 801c5b0:	b21c      	sxth	r4, r3
 801c5b2:	ebac 0000 	sub.w	r0, ip, r0
 801c5b6:	4366      	muls	r6, r4
 801c5b8:	4368      	muls	r0, r5
 801c5ba:	4286      	cmp	r6, r0
 801c5bc:	db09      	blt.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801c5be:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801c5c2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801c5c6:	4417      	add	r7, r2
 801c5c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c5cc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c5d0:	e685      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c5d2:	440b      	add	r3, r1
 801c5d4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c5d8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801c5dc:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801c5e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c5e4:	e67b      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c5e6:	9e03      	ldr	r6, [sp, #12]
 801c5e8:	45b6      	cmp	lr, r6
 801c5ea:	da28      	bge.n	801c63e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801c5ec:	9b00      	ldr	r3, [sp, #0]
 801c5ee:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c5f2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801c5f6:	eb04 030c 	add.w	r3, r4, ip
 801c5fa:	fa1f f883 	uxth.w	r8, r3
 801c5fe:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801c602:	4403      	add	r3, r0
 801c604:	eba3 0308 	sub.w	r3, r3, r8
 801c608:	b29b      	uxth	r3, r3
 801c60a:	fa0f f988 	sxth.w	r9, r8
 801c60e:	eba0 000c 	sub.w	r0, r0, ip
 801c612:	fa0f f883 	sxth.w	r8, r3
 801c616:	eba6 060e 	sub.w	r6, r6, lr
 801c61a:	4368      	muls	r0, r5
 801c61c:	fb08 f606 	mul.w	r6, r8, r6
 801c620:	42b0      	cmp	r0, r6
 801c622:	dc06      	bgt.n	801c632 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801c624:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801c628:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801c62c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801c630:	e7c9      	b.n	801c5c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801c632:	4423      	add	r3, r4
 801c634:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801c638:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c63c:	e64f      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c63e:	9807      	ldr	r0, [sp, #28]
 801c640:	eba3 0309 	sub.w	r3, r3, r9
 801c644:	b29b      	uxth	r3, r3
 801c646:	2806      	cmp	r0, #6
 801c648:	fa0f fc83 	sxth.w	ip, r3
 801c64c:	d818      	bhi.n	801c680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801c64e:	4652      	mov	r2, sl
 801c650:	ab0a      	add	r3, sp, #40	; 0x28
 801c652:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801c656:	6851      	ldr	r1, [r2, #4]
 801c658:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801c65c:	c303      	stmia	r3!, {r0, r1}
 801c65e:	9b03      	ldr	r3, [sp, #12]
 801c660:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801c664:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801c668:	ab0a      	add	r3, sp, #40	; 0x28
 801c66a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c66e:	9801      	ldr	r0, [sp, #4]
 801c670:	f7ff fe06 	bl	801c280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c674:	9b00      	ldr	r3, [sp, #0]
 801c676:	3b01      	subs	r3, #1
 801c678:	9300      	str	r3, [sp, #0]
 801c67a:	f1aa 0a08 	sub.w	sl, sl, #8
 801c67e:	e747      	b.n	801c510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c680:	9800      	ldr	r0, [sp, #0]
 801c682:	45ac      	cmp	ip, r5
 801c684:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c688:	db0c      	blt.n	801c6a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801c68a:	4417      	add	r7, r2
 801c68c:	b2bf      	uxth	r7, r7
 801c68e:	4458      	add	r0, fp
 801c690:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c694:	440f      	add	r7, r1
 801c696:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c69a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801c69e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801c6a2:	e61c      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c6a4:	4458      	add	r0, fp
 801c6a6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801c6aa:	443b      	add	r3, r7
 801c6ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c6b0:	e615      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c6b2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801c6b6:	fa1f f18c 	uxth.w	r1, ip
 801c6ba:	eb01 0e05 	add.w	lr, r1, r5
 801c6be:	b282      	uxth	r2, r0
 801c6c0:	fa1f fe8e 	uxth.w	lr, lr
 801c6c4:	9204      	str	r2, [sp, #16]
 801c6c6:	fa0f f28e 	sxth.w	r2, lr
 801c6ca:	9205      	str	r2, [sp, #20]
 801c6cc:	9e04      	ldr	r6, [sp, #16]
 801c6ce:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801c6d2:	4432      	add	r2, r6
 801c6d4:	b292      	uxth	r2, r2
 801c6d6:	4584      	cmp	ip, r0
 801c6d8:	9206      	str	r2, [sp, #24]
 801c6da:	da26      	bge.n	801c72a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801c6dc:	eba3 0309 	sub.w	r3, r3, r9
 801c6e0:	eba2 020e 	sub.w	r2, r2, lr
 801c6e4:	b29b      	uxth	r3, r3
 801c6e6:	b292      	uxth	r2, r2
 801c6e8:	fa0f fa83 	sxth.w	sl, r3
 801c6ec:	b211      	sxth	r1, r2
 801c6ee:	eba0 000c 	sub.w	r0, r0, ip
 801c6f2:	eba4 0408 	sub.w	r4, r4, r8
 801c6f6:	fb0a f000 	mul.w	r0, sl, r0
 801c6fa:	434c      	muls	r4, r1
 801c6fc:	42a0      	cmp	r0, r4
 801c6fe:	9800      	ldr	r0, [sp, #0]
 801c700:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c704:	dc06      	bgt.n	801c714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801c706:	4458      	add	r0, fp
 801c708:	9a05      	ldr	r2, [sp, #20]
 801c70a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801c70e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801c712:	e7ca      	b.n	801c6aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c714:	eb0b 0300 	add.w	r3, fp, r0
 801c718:	9903      	ldr	r1, [sp, #12]
 801c71a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801c71e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801c722:	442a      	add	r2, r5
 801c724:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c728:	e5d9      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c72a:	9e04      	ldr	r6, [sp, #16]
 801c72c:	9a03      	ldr	r2, [sp, #12]
 801c72e:	1b89      	subs	r1, r1, r6
 801c730:	b21e      	sxth	r6, r3
 801c732:	b289      	uxth	r1, r1
 801c734:	4296      	cmp	r6, r2
 801c736:	fa0f fc81 	sxth.w	ip, r1
 801c73a:	dd26      	ble.n	801c78a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801c73c:	eba3 0309 	sub.w	r3, r3, r9
 801c740:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801c744:	9e05      	ldr	r6, [sp, #20]
 801c746:	b29b      	uxth	r3, r3
 801c748:	eba6 0902 	sub.w	r9, r6, r2
 801c74c:	b218      	sxth	r0, r3
 801c74e:	eba4 0408 	sub.w	r4, r4, r8
 801c752:	fb0c f404 	mul.w	r4, ip, r4
 801c756:	fb00 f909 	mul.w	r9, r0, r9
 801c75a:	9a00      	ldr	r2, [sp, #0]
 801c75c:	454c      	cmp	r4, r9
 801c75e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c762:	db03      	blt.n	801c76c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801c764:	445a      	add	r2, fp
 801c766:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801c76a:	e79e      	b.n	801c6aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c76c:	eb0b 0302 	add.w	r3, fp, r2
 801c770:	9a03      	ldr	r2, [sp, #12]
 801c772:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801c776:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801c77a:	4429      	add	r1, r5
 801c77c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801c780:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c784:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c788:	e5a9      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c78a:	9b06      	ldr	r3, [sp, #24]
 801c78c:	9c07      	ldr	r4, [sp, #28]
 801c78e:	eba3 020e 	sub.w	r2, r3, lr
 801c792:	b292      	uxth	r2, r2
 801c794:	2c06      	cmp	r4, #6
 801c796:	b213      	sxth	r3, r2
 801c798:	d80d      	bhi.n	801c7b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801c79a:	4651      	mov	r1, sl
 801c79c:	aa0a      	add	r2, sp, #40	; 0x28
 801c79e:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801c7a2:	6849      	ldr	r1, [r1, #4]
 801c7a4:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801c7a8:	9b05      	ldr	r3, [sp, #20]
 801c7aa:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801c7ae:	c203      	stmia	r2!, {r0, r1}
 801c7b0:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801c7b4:	e758      	b.n	801c668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801c7b6:	9c00      	ldr	r4, [sp, #0]
 801c7b8:	4563      	cmp	r3, ip
 801c7ba:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c7be:	db0d      	blt.n	801c7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801c7c0:	4429      	add	r1, r5
 801c7c2:	9a04      	ldr	r2, [sp, #16]
 801c7c4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c7c8:	b289      	uxth	r1, r1
 801c7ca:	445c      	add	r4, fp
 801c7cc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c7d0:	4411      	add	r1, r2
 801c7d2:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801c7d6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801c7da:	e580      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c7dc:	445c      	add	r4, fp
 801c7de:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801c7e2:	e79e      	b.n	801c722 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801c7e4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c7e8:	2f07      	cmp	r7, #7
 801c7ea:	d806      	bhi.n	801c7fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801c7ec:	ab08      	add	r3, sp, #32
 801c7ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c7f2:	9801      	ldr	r0, [sp, #4]
 801c7f4:	f7ff fd44 	bl	801c280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c7f8:	e5db      	b.n	801c3b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c7fa:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c7fe:	f107 39ff 	add.w	r9, r7, #4294967295
 801c802:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c806:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801c80a:	f04f 35ff 	mov.w	r5, #4294967295
 801c80e:	2400      	movs	r4, #0
 801c810:	9304      	str	r3, [sp, #16]
 801c812:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801c816:	9300      	str	r3, [sp, #0]
 801c818:	f109 32ff 	add.w	r2, r9, #4294967295
 801c81c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801c820:	9303      	str	r3, [sp, #12]
 801c822:	4690      	mov	r8, r2
 801c824:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c828:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c82c:	bf14      	ite	ne
 801c82e:	9904      	ldrne	r1, [sp, #16]
 801c830:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801c834:	6818      	ldr	r0, [r3, #0]
 801c836:	9206      	str	r2, [sp, #24]
 801c838:	bf18      	it	ne
 801c83a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801c83e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801c842:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c846:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801c84a:	9305      	str	r3, [sp, #20]
 801c84c:	fb16 f601 	smulbb	r6, r6, r1
 801c850:	6859      	ldr	r1, [r3, #4]
 801c852:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c856:	4671      	mov	r1, lr
 801c858:	a80a      	add	r0, sp, #40	; 0x28
 801c85a:	f7ff fbfd 	bl	801c058 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c85e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801c862:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c866:	9b03      	ldr	r3, [sp, #12]
 801c868:	9a00      	ldr	r2, [sp, #0]
 801c86a:	fb11 f100 	smulbb	r1, r1, r0
 801c86e:	fb02 6603 	mla	r6, r2, r3, r6
 801c872:	1b8e      	subs	r6, r1, r6
 801c874:	2008      	movs	r0, #8
 801c876:	fb91 f1f0 	sdiv	r1, r1, r0
 801c87a:	42b1      	cmp	r1, r6
 801c87c:	dc21      	bgt.n	801c8c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801c87e:	4556      	cmp	r6, sl
 801c880:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801c884:	da03      	bge.n	801c88e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801c886:	b1e6      	cbz	r6, 801c8c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801c888:	46b2      	mov	sl, r6
 801c88a:	4645      	mov	r5, r8
 801c88c:	464c      	mov	r4, r9
 801c88e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c892:	f118 0f02 	cmn.w	r8, #2
 801c896:	d1c7      	bne.n	801c828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801c898:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c89c:	f1a7 0708 	sub.w	r7, r7, #8
 801c8a0:	4691      	mov	r9, r2
 801c8a2:	d1b6      	bne.n	801c812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801c8a4:	9b01      	ldr	r3, [sp, #4]
 801c8a6:	b2a6      	uxth	r6, r4
 801c8a8:	00e4      	lsls	r4, r4, #3
 801c8aa:	1918      	adds	r0, r3, r4
 801c8ac:	1c6b      	adds	r3, r5, #1
 801c8ae:	d10b      	bne.n	801c8c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801c8b0:	4601      	mov	r1, r0
 801c8b2:	9802      	ldr	r0, [sp, #8]
 801c8b4:	f7ff fbd0 	bl	801c058 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c8b8:	4631      	mov	r1, r6
 801c8ba:	9801      	ldr	r0, [sp, #4]
 801c8bc:	f7ff fcbe 	bl	801c23c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c8c0:	e50d      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c8c2:	4645      	mov	r5, r8
 801c8c4:	464c      	mov	r4, r9
 801c8c6:	e7ed      	b.n	801c8a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801c8c8:	9b01      	ldr	r3, [sp, #4]
 801c8ca:	00ed      	lsls	r5, r5, #3
 801c8cc:	1959      	adds	r1, r3, r5
 801c8ce:	f7ff fbc3 	bl	801c058 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c8d2:	9b02      	ldr	r3, [sp, #8]
 801c8d4:	cb03      	ldmia	r3!, {r0, r1}
 801c8d6:	445d      	add	r5, fp
 801c8d8:	445c      	add	r4, fp
 801c8da:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801c8de:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801c8e2:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801c8e6:	9b02      	ldr	r3, [sp, #8]
 801c8e8:	6861      	ldr	r1, [r4, #4]
 801c8ea:	c303      	stmia	r3!, {r0, r1}
 801c8ec:	e7e4      	b.n	801c8b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801c8f0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c8f0:	b530      	push	{r4, r5, lr}
 801c8f2:	4b1d      	ldr	r3, [pc, #116]	; (801c968 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c8f4:	b085      	sub	sp, #20
 801c8f6:	460c      	mov	r4, r1
 801c8f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c8fc:	4b1b      	ldr	r3, [pc, #108]	; (801c96c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c8fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c902:	2100      	movs	r1, #0
 801c904:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c908:	9100      	str	r1, [sp, #0]
 801c90a:	4605      	mov	r5, r0
 801c90c:	6861      	ldr	r1, [r4, #4]
 801c90e:	6820      	ldr	r0, [r4, #0]
 801c910:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c914:	ab02      	add	r3, sp, #8
 801c916:	c303      	stmia	r3!, {r0, r1}
 801c918:	4669      	mov	r1, sp
 801c91a:	a802      	add	r0, sp, #8
 801c91c:	f7fa fe14 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801c920:	ab02      	add	r3, sp, #8
 801c922:	cb03      	ldmia	r3!, {r0, r1}
 801c924:	4b12      	ldr	r3, [pc, #72]	; (801c970 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c926:	6020      	str	r0, [r4, #0]
 801c928:	6818      	ldr	r0, [r3, #0]
 801c92a:	6061      	str	r1, [r4, #4]
 801c92c:	b138      	cbz	r0, 801c93e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c92e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801c932:	b133      	cbz	r3, 801c942 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c934:	6821      	ldr	r1, [r4, #0]
 801c936:	6862      	ldr	r2, [r4, #4]
 801c938:	4628      	mov	r0, r5
 801c93a:	f7ff fcc3 	bl	801c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c93e:	b005      	add	sp, #20
 801c940:	bd30      	pop	{r4, r5, pc}
 801c942:	6803      	ldr	r3, [r0, #0]
 801c944:	4621      	mov	r1, r4
 801c946:	689b      	ldr	r3, [r3, #8]
 801c948:	4798      	blx	r3
 801c94a:	4b0a      	ldr	r3, [pc, #40]	; (801c974 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c94c:	6818      	ldr	r0, [r3, #0]
 801c94e:	b118      	cbz	r0, 801c958 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c950:	6803      	ldr	r3, [r0, #0]
 801c952:	4621      	mov	r1, r4
 801c954:	689b      	ldr	r3, [r3, #8]
 801c956:	4798      	blx	r3
 801c958:	4b07      	ldr	r3, [pc, #28]	; (801c978 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c95a:	6818      	ldr	r0, [r3, #0]
 801c95c:	6803      	ldr	r3, [r0, #0]
 801c95e:	4621      	mov	r1, r4
 801c960:	69db      	ldr	r3, [r3, #28]
 801c962:	4798      	blx	r3
 801c964:	e7eb      	b.n	801c93e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c966:	bf00      	nop
 801c968:	2000979c 	.word	0x2000979c
 801c96c:	2000979e 	.word	0x2000979e
 801c970:	200097e4 	.word	0x200097e4
 801c974:	200097e0 	.word	0x200097e0
 801c978:	200097a8 	.word	0x200097a8

0801c97c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c980:	4604      	mov	r4, r0
 801c982:	b09b      	sub	sp, #108	; 0x6c
 801c984:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801c988:	b129      	cbz	r1, 801c996 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c98a:	2300      	movs	r3, #0
 801c98c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c990:	b01b      	add	sp, #108	; 0x6c
 801c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c996:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801c99a:	4630      	mov	r0, r6
 801c99c:	f7fa fe17 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9a0:	4605      	mov	r5, r0
 801c9a2:	b940      	cbnz	r0, 801c9b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c9a4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c9a8:	4620      	mov	r0, r4
 801c9aa:	f7ff fc8b 	bl	801c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c9ae:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801c9b2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c9b6:	4ba7      	ldr	r3, [pc, #668]	; (801cc54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	b33b      	cbz	r3, 801ca0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c9bc:	4da6      	ldr	r5, [pc, #664]	; (801cc58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c9be:	4628      	mov	r0, r5
 801c9c0:	f7fa fe05 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9c4:	4606      	mov	r6, r0
 801c9c6:	bb08      	cbnz	r0, 801ca0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c9c8:	4628      	mov	r0, r5
 801c9ca:	f7ff f9b7 	bl	801bd3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c9ce:	6829      	ldr	r1, [r5, #0]
 801c9d0:	686a      	ldr	r2, [r5, #4]
 801c9d2:	4620      	mov	r0, r4
 801c9d4:	f7ff fc76 	bl	801c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c9d8:	802e      	strh	r6, [r5, #0]
 801c9da:	806e      	strh	r6, [r5, #2]
 801c9dc:	80ae      	strh	r6, [r5, #4]
 801c9de:	80ee      	strh	r6, [r5, #6]
 801c9e0:	4f9e      	ldr	r7, [pc, #632]	; (801cc5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c9e2:	a809      	add	r0, sp, #36	; 0x24
 801c9e4:	f7ff fbd7 	bl	801c196 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c9e8:	883d      	ldrh	r5, [r7, #0]
 801c9ea:	462e      	mov	r6, r5
 801c9ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c9f0:	42b3      	cmp	r3, r6
 801c9f2:	d910      	bls.n	801ca16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c9f4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c9f8:	a809      	add	r0, sp, #36	; 0x24
 801c9fa:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c9fe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ca02:	3601      	adds	r6, #1
 801ca04:	f7ff fc3c 	bl	801c280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ca08:	b2b6      	uxth	r6, r6
 801ca0a:	e7ef      	b.n	801c9ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ca0c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d1e5      	bne.n	801c9e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801ca14:	e7bc      	b.n	801c990 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ca16:	462e      	mov	r6, r5
 801ca18:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ca1c:	42b3      	cmp	r3, r6
 801ca1e:	d90b      	bls.n	801ca38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801ca20:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ca24:	4620      	mov	r0, r4
 801ca26:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ca2a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ca2e:	3601      	adds	r6, #1
 801ca30:	f7ff fc48 	bl	801c2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ca34:	b2b6      	uxth	r6, r6
 801ca36:	e7ef      	b.n	801ca18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801ca38:	4a89      	ldr	r2, [pc, #548]	; (801cc60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801ca3a:	6813      	ldr	r3, [r2, #0]
 801ca3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ca40:	2b01      	cmp	r3, #1
 801ca42:	4690      	mov	r8, r2
 801ca44:	f040 8094 	bne.w	801cb70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801ca48:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ca4c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ca50:	33aa      	adds	r3, #170	; 0xaa
 801ca52:	f04f 0900 	mov.w	r9, #0
 801ca56:	42a8      	cmp	r0, r5
 801ca58:	f103 0308 	add.w	r3, r3, #8
 801ca5c:	dd0a      	ble.n	801ca74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801ca5e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ca62:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801ca66:	440a      	add	r2, r1
 801ca68:	b212      	sxth	r2, r2
 801ca6a:	4591      	cmp	r9, r2
 801ca6c:	bfb8      	it	lt
 801ca6e:	4691      	movlt	r9, r2
 801ca70:	3501      	adds	r5, #1
 801ca72:	e7f0      	b.n	801ca56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801ca74:	4b7b      	ldr	r3, [pc, #492]	; (801cc64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801ca76:	4e7c      	ldr	r6, [pc, #496]	; (801cc68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ca78:	881d      	ldrh	r5, [r3, #0]
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ca80:	2d0f      	cmp	r5, #15
 801ca82:	bf8c      	ite	hi
 801ca84:	08ed      	lsrhi	r5, r5, #3
 801ca86:	2501      	movls	r5, #1
 801ca88:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ca8c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801ca90:	f8d8 0000 	ldr.w	r0, [r8]
 801ca94:	440b      	add	r3, r1
 801ca96:	b21b      	sxth	r3, r3
 801ca98:	4599      	cmp	r9, r3
 801ca9a:	6802      	ldr	r2, [r0, #0]
 801ca9c:	dd4b      	ble.n	801cb36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801ca9e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801caa2:	4798      	blx	r3
 801caa4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801caa8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801caac:	4413      	add	r3, r2
 801caae:	b21b      	sxth	r3, r3
 801cab0:	195a      	adds	r2, r3, r5
 801cab2:	4290      	cmp	r0, r2
 801cab4:	da07      	bge.n	801cac6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801cab6:	4581      	cmp	r9, r0
 801cab8:	dd05      	ble.n	801cac6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801caba:	4298      	cmp	r0, r3
 801cabc:	da33      	bge.n	801cb26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	dd31      	ble.n	801cb26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801cac2:	4648      	mov	r0, r9
 801cac4:	e004      	b.n	801cad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801cac6:	4298      	cmp	r0, r3
 801cac8:	dbfb      	blt.n	801cac2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801caca:	4548      	cmp	r0, r9
 801cacc:	bfa8      	it	ge
 801cace:	4648      	movge	r0, r9
 801cad0:	f9b6 2000 	ldrsh.w	r2, [r6]
 801cad4:	f8b7 a000 	ldrh.w	sl, [r7]
 801cad8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cadc:	2100      	movs	r1, #0
 801cade:	1ac0      	subs	r0, r0, r3
 801cae0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cae4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cae8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801caec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801caf0:	4553      	cmp	r3, sl
 801caf2:	d9c9      	bls.n	801ca88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801caf4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801caf8:	ab07      	add	r3, sp, #28
 801cafa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cafe:	6851      	ldr	r1, [r2, #4]
 801cb00:	c303      	stmia	r3!, {r0, r1}
 801cb02:	a807      	add	r0, sp, #28
 801cb04:	a905      	add	r1, sp, #20
 801cb06:	f7fa fd1f 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801cb0a:	a807      	add	r0, sp, #28
 801cb0c:	f7fa fd5f 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb10:	b920      	cbnz	r0, 801cb1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801cb12:	6823      	ldr	r3, [r4, #0]
 801cb14:	a907      	add	r1, sp, #28
 801cb16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb18:	4620      	mov	r0, r4
 801cb1a:	4798      	blx	r3
 801cb1c:	f10a 0a01 	add.w	sl, sl, #1
 801cb20:	fa1f fa8a 	uxth.w	sl, sl
 801cb24:	e7e2      	b.n	801caec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801cb26:	f8d8 0000 	ldr.w	r0, [r8]
 801cb2a:	6803      	ldr	r3, [r0, #0]
 801cb2c:	2101      	movs	r1, #1
 801cb2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cb32:	4798      	blx	r3
 801cb34:	e7a8      	b.n	801ca88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801cb36:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801cb38:	4798      	blx	r3
 801cb3a:	4b4c      	ldr	r3, [pc, #304]	; (801cc6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801cb3c:	781b      	ldrb	r3, [r3, #0]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	f43f af26 	beq.w	801c990 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801cb44:	2300      	movs	r3, #0
 801cb46:	883d      	ldrh	r5, [r7, #0]
 801cb48:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801cb4c:	34ea      	adds	r4, #234	; 0xea
 801cb4e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801cb52:	42ab      	cmp	r3, r5
 801cb54:	f67f af1c 	bls.w	801c990 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801cb58:	ab1a      	add	r3, sp, #104	; 0x68
 801cb5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cb5e:	3b44      	subs	r3, #68	; 0x44
 801cb60:	e893 0006 	ldmia.w	r3, {r1, r2}
 801cb64:	4620      	mov	r0, r4
 801cb66:	3501      	adds	r5, #1
 801cb68:	f7ff fb8a 	bl	801c280 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801cb6c:	b2ad      	uxth	r5, r5
 801cb6e:	e7ee      	b.n	801cb4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801cb70:	2b02      	cmp	r3, #2
 801cb72:	f040 813e 	bne.w	801cdf2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801cb76:	4b3e      	ldr	r3, [pc, #248]	; (801cc70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>)
 801cb78:	781b      	ldrb	r3, [r3, #0]
 801cb7a:	2b01      	cmp	r3, #1
 801cb7c:	d02c      	beq.n	801cbd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801cb7e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801cb82:	883a      	ldrh	r2, [r7, #0]
 801cb84:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801cb88:	3201      	adds	r2, #1
 801cb8a:	b292      	uxth	r2, r2
 801cb8c:	2900      	cmp	r1, #0
 801cb8e:	d0d4      	beq.n	801cb3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cb90:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801cb94:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801cb98:	441d      	add	r5, r3
 801cb9a:	b22d      	sxth	r5, r5
 801cb9c:	4610      	mov	r0, r2
 801cb9e:	f04f 0a00 	mov.w	sl, #0
 801cba2:	b283      	uxth	r3, r0
 801cba4:	4299      	cmp	r1, r3
 801cba6:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801cbaa:	f240 80c5 	bls.w	801cd38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3bc>
 801cbae:	4426      	add	r6, r4
 801cbb0:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801cbb4:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801cbb8:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801cbbc:	4573      	cmp	r3, lr
 801cbbe:	4684      	mov	ip, r0
 801cbc0:	f340 80a7 	ble.w	801cd12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 801cbc4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801cbc8:	4475      	add	r5, lr
 801cbca:	b22d      	sxth	r5, r5
 801cbcc:	429d      	cmp	r5, r3
 801cbce:	bfa8      	it	ge
 801cbd0:	461d      	movge	r5, r3
 801cbd2:	3001      	adds	r0, #1
 801cbd4:	46e2      	mov	sl, ip
 801cbd6:	e7e4      	b.n	801cba2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801cbd8:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801cbdc:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801cbe0:	f1bb 0f00 	cmp.w	fp, #0
 801cbe4:	d0a9      	beq.n	801cb3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cbe6:	883b      	ldrh	r3, [r7, #0]
 801cbe8:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801cbec:	3301      	adds	r3, #1
 801cbee:	b29b      	uxth	r3, r3
 801cbf0:	2600      	movs	r6, #0
 801cbf2:	b299      	uxth	r1, r3
 801cbf4:	458b      	cmp	fp, r1
 801cbf6:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801cbfa:	d93b      	bls.n	801cc74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>
 801cbfc:	4425      	add	r5, r4
 801cbfe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801cc02:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801cc06:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801cc0a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801cc0e:	4408      	add	r0, r1
 801cc10:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801cc14:	4471      	add	r1, lr
 801cc16:	b200      	sxth	r0, r0
 801cc18:	b209      	sxth	r1, r1
 801cc1a:	4288      	cmp	r0, r1
 801cc1c:	469c      	mov	ip, r3
 801cc1e:	da06      	bge.n	801cc2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 801cc20:	4586      	cmp	lr, r0
 801cc22:	4672      	mov	r2, lr
 801cc24:	bfb8      	it	lt
 801cc26:	4602      	movlt	r2, r0
 801cc28:	3301      	adds	r3, #1
 801cc2a:	4666      	mov	r6, ip
 801cc2c:	e7e1      	b.n	801cbf2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801cc2e:	d10b      	bne.n	801cc48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2cc>
 801cc30:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801cc34:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801cc38:	458c      	cmp	ip, r1
 801cc3a:	bfb4      	ite	lt
 801cc3c:	469c      	movlt	ip, r3
 801cc3e:	46b4      	movge	ip, r6
 801cc40:	4572      	cmp	r2, lr
 801cc42:	bfb8      	it	lt
 801cc44:	4672      	movlt	r2, lr
 801cc46:	e7ef      	b.n	801cc28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cc48:	428a      	cmp	r2, r1
 801cc4a:	bfb8      	it	lt
 801cc4c:	460a      	movlt	r2, r1
 801cc4e:	46b4      	mov	ip, r6
 801cc50:	e7ea      	b.n	801cc28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cc52:	bf00      	nop
 801cc54:	200097e0 	.word	0x200097e0
 801cc58:	200097ec 	.word	0x200097ec
 801cc5c:	20000020 	.word	0x20000020
 801cc60:	200097a8 	.word	0x200097a8
 801cc64:	2000979e 	.word	0x2000979e
 801cc68:	2000979c 	.word	0x2000979c
 801cc6c:	200097a6 	.word	0x200097a6
 801cc70:	200097a0 	.word	0x200097a0
 801cc74:	1961      	adds	r1, r4, r5
 801cc76:	ab07      	add	r3, sp, #28
 801cc78:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801cc7c:	6849      	ldr	r1, [r1, #4]
 801cc7e:	c303      	stmia	r3!, {r0, r1}
 801cc80:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cc84:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cc88:	2b13      	cmp	r3, #19
 801cc8a:	bfd8      	it	le
 801cc8c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801cc90:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cc94:	440b      	add	r3, r1
 801cc96:	1a9b      	subs	r3, r3, r2
 801cc98:	a807      	add	r0, sp, #28
 801cc9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cc9e:	f7ff f867 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cca2:	a807      	add	r0, sp, #28
 801cca4:	f7fa fc93 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	d197      	bne.n	801cbdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801ccac:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ccb0:	f8d8 0000 	ldr.w	r0, [r8]
 801ccb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ccb8:	f8d0 e000 	ldr.w	lr, [r0]
 801ccbc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ccc0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ccc4:	f1bc 0f14 	cmp.w	ip, #20
 801ccc8:	bfa8      	it	ge
 801ccca:	f04f 0c14 	movge.w	ip, #20
 801ccce:	fa1f fc8c 	uxth.w	ip, ip
 801ccd2:	f8cd c000 	str.w	ip, [sp]
 801ccd6:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801ccda:	47d0      	blx	sl
 801ccdc:	4682      	mov	sl, r0
 801ccde:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cce2:	a807      	add	r0, sp, #28
 801cce4:	f7ff f82a 	bl	801bd3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cce8:	6823      	ldr	r3, [r4, #0]
 801ccea:	4425      	add	r5, r4
 801ccec:	4620      	mov	r0, r4
 801ccee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ccf0:	a907      	add	r1, sp, #28
 801ccf2:	4798      	blx	r3
 801ccf4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801ccf8:	eba0 000a 	sub.w	r0, r0, sl
 801ccfc:	b200      	sxth	r0, r0
 801ccfe:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801cd02:	2800      	cmp	r0, #0
 801cd04:	f47f af6a 	bne.w	801cbdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cd08:	b2b1      	uxth	r1, r6
 801cd0a:	4648      	mov	r0, r9
 801cd0c:	f7ff fa96 	bl	801c23c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cd10:	e764      	b.n	801cbdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cd12:	d10c      	bne.n	801cd2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b2>
 801cd14:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801cd18:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801cd1c:	45b4      	cmp	ip, r6
 801cd1e:	bfb4      	ite	lt
 801cd20:	4684      	movlt	ip, r0
 801cd22:	46d4      	movge	ip, sl
 801cd24:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801cd28:	4433      	add	r3, r6
 801cd2a:	b21b      	sxth	r3, r3
 801cd2c:	e74e      	b.n	801cbcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801cd2e:	4575      	cmp	r5, lr
 801cd30:	bfa8      	it	ge
 801cd32:	4675      	movge	r5, lr
 801cd34:	46d4      	mov	ip, sl
 801cd36:	e74c      	b.n	801cbd2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801cd38:	eb0b 0006 	add.w	r0, fp, r6
 801cd3c:	4426      	add	r6, r4
 801cd3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801cd42:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801cd46:	f1b9 0f13 	cmp.w	r9, #19
 801cd4a:	bfde      	ittt	le
 801cd4c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801cd50:	444d      	addle	r5, r9
 801cd52:	b22d      	sxthle	r5, r5
 801cd54:	f7fa fc3b 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd58:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801cd5c:	2800      	cmp	r0, #0
 801cd5e:	f47f af15 	bne.w	801cb8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801cd62:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801cd66:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cd6a:	eba5 050c 	sub.w	r5, r5, ip
 801cd6e:	fa1f f28c 	uxth.w	r2, ip
 801cd72:	fa1f f989 	uxth.w	r9, r9
 801cd76:	eb02 0009 	add.w	r0, r2, r9
 801cd7a:	2d14      	cmp	r5, #20
 801cd7c:	bfa8      	it	ge
 801cd7e:	2514      	movge	r5, #20
 801cd80:	b200      	sxth	r0, r0
 801cd82:	fa1f fe85 	uxth.w	lr, r5
 801cd86:	eba0 000c 	sub.w	r0, r0, ip
 801cd8a:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801cd8e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801cd92:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cd96:	4586      	cmp	lr, r0
 801cd98:	f8d8 0000 	ldr.w	r0, [r8]
 801cd9c:	f8ad c01e 	strh.w	ip, [sp, #30]
 801cda0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cda4:	bfb8      	it	lt
 801cda6:	46f1      	movlt	r9, lr
 801cda8:	6805      	ldr	r5, [r0, #0]
 801cdaa:	f8cd 9000 	str.w	r9, [sp]
 801cdae:	b29b      	uxth	r3, r3
 801cdb0:	b289      	uxth	r1, r1
 801cdb2:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801cdb6:	47a8      	blx	r5
 801cdb8:	6823      	ldr	r3, [r4, #0]
 801cdba:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cdc0:	a907      	add	r1, sp, #28
 801cdc2:	4620      	mov	r0, r4
 801cdc4:	4798      	blx	r3
 801cdc6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cdca:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801cdce:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801cdd2:	1a5b      	subs	r3, r3, r1
 801cdd4:	440a      	add	r2, r1
 801cdd6:	b21b      	sxth	r3, r3
 801cdd8:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801cddc:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	f47f aece 	bne.w	801cb82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801cde6:	fa1f f18a 	uxth.w	r1, sl
 801cdea:	4658      	mov	r0, fp
 801cdec:	f7ff fa26 	bl	801c23c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cdf0:	e6c7      	b.n	801cb82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801cdf2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cdf6:	42ab      	cmp	r3, r5
 801cdf8:	f67f ae9f 	bls.w	801cb3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cdfc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ce00:	ab07      	add	r3, sp, #28
 801ce02:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ce06:	6851      	ldr	r1, [r2, #4]
 801ce08:	c303      	stmia	r3!, {r0, r1}
 801ce0a:	a807      	add	r0, sp, #28
 801ce0c:	f7fa fbdf 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801ce10:	b920      	cbnz	r0, 801ce1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4a0>
 801ce12:	6823      	ldr	r3, [r4, #0]
 801ce14:	a907      	add	r1, sp, #28
 801ce16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce18:	4620      	mov	r0, r4
 801ce1a:	4798      	blx	r3
 801ce1c:	3501      	adds	r5, #1
 801ce1e:	b2ad      	uxth	r5, r5
 801ce20:	e7e7      	b.n	801cdf2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801ce22:	bf00      	nop

0801ce24 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ce24:	4b03      	ldr	r3, [pc, #12]	; (801ce34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ce26:	2200      	movs	r2, #0
 801ce28:	801a      	strh	r2, [r3, #0]
 801ce2a:	805a      	strh	r2, [r3, #2]
 801ce2c:	809a      	strh	r2, [r3, #4]
 801ce2e:	80da      	strh	r2, [r3, #6]
 801ce30:	4770      	bx	lr
 801ce32:	bf00      	nop
 801ce34:	200097ec 	.word	0x200097ec

0801ce38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ce38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce3c:	4606      	mov	r6, r0
 801ce3e:	b09d      	sub	sp, #116	; 0x74
 801ce40:	a803      	add	r0, sp, #12
 801ce42:	4614      	mov	r4, r2
 801ce44:	468a      	mov	sl, r1
 801ce46:	461d      	mov	r5, r3
 801ce48:	f000 fe3d 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 801ce4c:	6833      	ldr	r3, [r6, #0]
 801ce4e:	4630      	mov	r0, r6
 801ce50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce52:	4798      	blx	r3
 801ce54:	6833      	ldr	r3, [r6, #0]
 801ce56:	4607      	mov	r7, r0
 801ce58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce5a:	4630      	mov	r0, r6
 801ce5c:	4798      	blx	r3
 801ce5e:	462a      	mov	r2, r5
 801ce60:	9000      	str	r0, [sp, #0]
 801ce62:	4621      	mov	r1, r4
 801ce64:	463b      	mov	r3, r7
 801ce66:	a803      	add	r0, sp, #12
 801ce68:	f000 fe80 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ce6c:	2500      	movs	r5, #0
 801ce6e:	462c      	mov	r4, r5
 801ce70:	46a9      	mov	r9, r5
 801ce72:	46a8      	mov	r8, r5
 801ce74:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ce78:	2300      	movs	r3, #0
 801ce7a:	9302      	str	r3, [sp, #8]
 801ce7c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ce80:	429c      	cmp	r4, r3
 801ce82:	d002      	beq.n	801ce8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ce84:	455c      	cmp	r4, fp
 801ce86:	bf18      	it	ne
 801ce88:	4625      	movne	r5, r4
 801ce8a:	ab02      	add	r3, sp, #8
 801ce8c:	4632      	mov	r2, r6
 801ce8e:	4651      	mov	r1, sl
 801ce90:	a803      	add	r0, sp, #12
 801ce92:	f001 f96b 	bl	801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ce96:	4604      	mov	r4, r0
 801ce98:	b108      	cbz	r0, 801ce9e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ce9a:	280a      	cmp	r0, #10
 801ce9c:	d10a      	bne.n	801ceb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ce9e:	45c1      	cmp	r9, r8
 801cea0:	bf38      	it	cc
 801cea2:	46c1      	movcc	r9, r8
 801cea4:	f04f 0800 	mov.w	r8, #0
 801cea8:	2c00      	cmp	r4, #0
 801ceaa:	d1e5      	bne.n	801ce78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ceac:	4648      	mov	r0, r9
 801ceae:	b01d      	add	sp, #116	; 0x74
 801ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceb4:	9a02      	ldr	r2, [sp, #8]
 801ceb6:	2a00      	cmp	r2, #0
 801ceb8:	d0de      	beq.n	801ce78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ceba:	7b57      	ldrb	r7, [r2, #13]
 801cebc:	6833      	ldr	r3, [r6, #0]
 801cebe:	8894      	ldrh	r4, [r2, #4]
 801cec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cec2:	007f      	lsls	r7, r7, #1
 801cec4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801cec8:	7a97      	ldrb	r7, [r2, #10]
 801ceca:	4629      	mov	r1, r5
 801cecc:	4307      	orrs	r7, r0
 801cece:	4630      	mov	r0, r6
 801ced0:	4798      	blx	r3
 801ced2:	4438      	add	r0, r7
 801ced4:	4480      	add	r8, r0
 801ced6:	fa1f f888 	uxth.w	r8, r8
 801ceda:	e7e5      	b.n	801cea8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801cedc <_ZNK8touchgfx4Font12getCharWidthEt>:
 801cedc:	b508      	push	{r3, lr}
 801cede:	6803      	ldr	r3, [r0, #0]
 801cee0:	68db      	ldr	r3, [r3, #12]
 801cee2:	4798      	blx	r3
 801cee4:	b128      	cbz	r0, 801cef2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801cee6:	7b43      	ldrb	r3, [r0, #13]
 801cee8:	7a80      	ldrb	r0, [r0, #10]
 801ceea:	005b      	lsls	r3, r3, #1
 801ceec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cef0:	4318      	orrs	r0, r3
 801cef2:	bd08      	pop	{r3, pc}

0801cef4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801cef4:	b40e      	push	{r1, r2, r3}
 801cef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cef8:	b09e      	sub	sp, #120	; 0x78
 801cefa:	ab23      	add	r3, sp, #140	; 0x8c
 801cefc:	4605      	mov	r5, r0
 801cefe:	f853 4b04 	ldr.w	r4, [r3], #4
 801cf02:	9303      	str	r3, [sp, #12]
 801cf04:	a805      	add	r0, sp, #20
 801cf06:	f000 fdde 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 801cf0a:	682b      	ldr	r3, [r5, #0]
 801cf0c:	4628      	mov	r0, r5
 801cf0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf10:	4798      	blx	r3
 801cf12:	682b      	ldr	r3, [r5, #0]
 801cf14:	4606      	mov	r6, r0
 801cf16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf18:	4628      	mov	r0, r5
 801cf1a:	4798      	blx	r3
 801cf1c:	4633      	mov	r3, r6
 801cf1e:	ae1e      	add	r6, sp, #120	; 0x78
 801cf20:	4621      	mov	r1, r4
 801cf22:	9000      	str	r0, [sp, #0]
 801cf24:	9a03      	ldr	r2, [sp, #12]
 801cf26:	2400      	movs	r4, #0
 801cf28:	a805      	add	r0, sp, #20
 801cf2a:	f000 fe1f 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cf2e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801cf32:	462a      	mov	r2, r5
 801cf34:	4633      	mov	r3, r6
 801cf36:	4621      	mov	r1, r4
 801cf38:	a805      	add	r0, sp, #20
 801cf3a:	f001 f917 	bl	801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cf3e:	b1f0      	cbz	r0, 801cf7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801cf40:	280a      	cmp	r0, #10
 801cf42:	d018      	beq.n	801cf76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801cf44:	9f04      	ldr	r7, [sp, #16]
 801cf46:	b1b7      	cbz	r7, 801cf76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801cf48:	7b78      	ldrb	r0, [r7, #13]
 801cf4a:	7a3b      	ldrb	r3, [r7, #8]
 801cf4c:	88aa      	ldrh	r2, [r5, #4]
 801cf4e:	00c1      	lsls	r1, r0, #3
 801cf50:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cf54:	4319      	orrs	r1, r3
 801cf56:	0643      	lsls	r3, r0, #25
 801cf58:	bf44      	itt	mi
 801cf5a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801cf5e:	b219      	sxthmi	r1, r3
 801cf60:	0100      	lsls	r0, r0, #4
 801cf62:	79fb      	ldrb	r3, [r7, #7]
 801cf64:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cf68:	4303      	orrs	r3, r0
 801cf6a:	4413      	add	r3, r2
 801cf6c:	1a5b      	subs	r3, r3, r1
 801cf6e:	b29b      	uxth	r3, r3
 801cf70:	42a3      	cmp	r3, r4
 801cf72:	bfc8      	it	gt
 801cf74:	b21c      	sxthgt	r4, r3
 801cf76:	4633      	mov	r3, r6
 801cf78:	462a      	mov	r2, r5
 801cf7a:	2100      	movs	r1, #0
 801cf7c:	e7dc      	b.n	801cf38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cf7e:	b2a0      	uxth	r0, r4
 801cf80:	b01e      	add	sp, #120	; 0x78
 801cf82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cf86:	b003      	add	sp, #12
 801cf88:	4770      	bx	lr

0801cf8a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cf8a:	b40e      	push	{r1, r2, r3}
 801cf8c:	b570      	push	{r4, r5, r6, lr}
 801cf8e:	b09d      	sub	sp, #116	; 0x74
 801cf90:	ab21      	add	r3, sp, #132	; 0x84
 801cf92:	4604      	mov	r4, r0
 801cf94:	f853 5b04 	ldr.w	r5, [r3], #4
 801cf98:	9302      	str	r3, [sp, #8]
 801cf9a:	a803      	add	r0, sp, #12
 801cf9c:	f000 fd93 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 801cfa0:	6823      	ldr	r3, [r4, #0]
 801cfa2:	4620      	mov	r0, r4
 801cfa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfa6:	4798      	blx	r3
 801cfa8:	6823      	ldr	r3, [r4, #0]
 801cfaa:	4606      	mov	r6, r0
 801cfac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cfae:	4620      	mov	r0, r4
 801cfb0:	4798      	blx	r3
 801cfb2:	4633      	mov	r3, r6
 801cfb4:	9000      	str	r0, [sp, #0]
 801cfb6:	9a02      	ldr	r2, [sp, #8]
 801cfb8:	4629      	mov	r1, r5
 801cfba:	a803      	add	r0, sp, #12
 801cfbc:	f000 fdd6 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cfc0:	a803      	add	r0, sp, #12
 801cfc2:	f001 f9cd 	bl	801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cfc6:	2401      	movs	r4, #1
 801cfc8:	b2a3      	uxth	r3, r4
 801cfca:	b140      	cbz	r0, 801cfde <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801cfcc:	280a      	cmp	r0, #10
 801cfce:	bf08      	it	eq
 801cfd0:	3301      	addeq	r3, #1
 801cfd2:	a803      	add	r0, sp, #12
 801cfd4:	bf08      	it	eq
 801cfd6:	b21c      	sxtheq	r4, r3
 801cfd8:	f001 f9c2 	bl	801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cfdc:	e7f4      	b.n	801cfc8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cfde:	4618      	mov	r0, r3
 801cfe0:	b01d      	add	sp, #116	; 0x74
 801cfe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cfe6:	b003      	add	sp, #12
 801cfe8:	4770      	bx	lr

0801cfea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cfea:	b40e      	push	{r1, r2, r3}
 801cfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cfee:	b09e      	sub	sp, #120	; 0x78
 801cff0:	ab23      	add	r3, sp, #140	; 0x8c
 801cff2:	4604      	mov	r4, r0
 801cff4:	f853 5b04 	ldr.w	r5, [r3], #4
 801cff8:	9303      	str	r3, [sp, #12]
 801cffa:	a805      	add	r0, sp, #20
 801cffc:	f000 fd63 	bl	801dac6 <_ZN8touchgfx12TextProviderC1Ev>
 801d000:	6823      	ldr	r3, [r4, #0]
 801d002:	4620      	mov	r0, r4
 801d004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d006:	4798      	blx	r3
 801d008:	6823      	ldr	r3, [r4, #0]
 801d00a:	4606      	mov	r6, r0
 801d00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d00e:	4620      	mov	r0, r4
 801d010:	4798      	blx	r3
 801d012:	4633      	mov	r3, r6
 801d014:	4629      	mov	r1, r5
 801d016:	9000      	str	r0, [sp, #0]
 801d018:	9a03      	ldr	r2, [sp, #12]
 801d01a:	a805      	add	r0, sp, #20
 801d01c:	ad1e      	add	r5, sp, #120	; 0x78
 801d01e:	f000 fda5 	bl	801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d022:	2100      	movs	r1, #0
 801d024:	f845 1d68 	str.w	r1, [r5, #-104]!
 801d028:	4622      	mov	r2, r4
 801d02a:	462b      	mov	r3, r5
 801d02c:	a805      	add	r0, sp, #20
 801d02e:	f001 f89d 	bl	801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d032:	26ff      	movs	r6, #255	; 0xff
 801d034:	b1d8      	cbz	r0, 801d06e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801d036:	280a      	cmp	r0, #10
 801d038:	d012      	beq.n	801d060 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801d03a:	9804      	ldr	r0, [sp, #16]
 801d03c:	b180      	cbz	r0, 801d060 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801d03e:	7b47      	ldrb	r7, [r0, #13]
 801d040:	7922      	ldrb	r2, [r4, #4]
 801d042:	00fb      	lsls	r3, r7, #3
 801d044:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d048:	7a03      	ldrb	r3, [r0, #8]
 801d04a:	430b      	orrs	r3, r1
 801d04c:	0679      	lsls	r1, r7, #25
 801d04e:	bf44      	itt	mi
 801d050:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d054:	b21b      	sxthmi	r3, r3
 801d056:	1ad3      	subs	r3, r2, r3
 801d058:	b2db      	uxtb	r3, r3
 801d05a:	429e      	cmp	r6, r3
 801d05c:	bf28      	it	cs
 801d05e:	461e      	movcs	r6, r3
 801d060:	462b      	mov	r3, r5
 801d062:	4622      	mov	r2, r4
 801d064:	2100      	movs	r1, #0
 801d066:	a805      	add	r0, sp, #20
 801d068:	f001 f880 	bl	801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d06c:	e7e2      	b.n	801d034 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801d06e:	4630      	mov	r0, r6
 801d070:	b01e      	add	sp, #120	; 0x78
 801d072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d076:	b003      	add	sp, #12
 801d078:	4770      	bx	lr

0801d07a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801d07a:	b513      	push	{r0, r1, r4, lr}
 801d07c:	6803      	ldr	r3, [r0, #0]
 801d07e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d082:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d086:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d08a:	2400      	movs	r4, #0
 801d08c:	9400      	str	r4, [sp, #0]
 801d08e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d092:	691b      	ldr	r3, [r3, #16]
 801d094:	4669      	mov	r1, sp
 801d096:	4798      	blx	r3
 801d098:	b002      	add	sp, #8
 801d09a:	bd10      	pop	{r4, pc}

0801d09c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801d09c:	b538      	push	{r3, r4, r5, lr}
 801d09e:	680b      	ldr	r3, [r1, #0]
 801d0a0:	460c      	mov	r4, r1
 801d0a2:	68db      	ldr	r3, [r3, #12]
 801d0a4:	4605      	mov	r5, r0
 801d0a6:	4798      	blx	r3
 801d0a8:	6823      	ldr	r3, [r4, #0]
 801d0aa:	4620      	mov	r0, r4
 801d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0ae:	4629      	mov	r1, r5
 801d0b0:	4798      	blx	r3
 801d0b2:	4628      	mov	r0, r5
 801d0b4:	bd38      	pop	{r3, r4, r5, pc}

0801d0b6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801d0b6:	b410      	push	{r4}
 801d0b8:	880a      	ldrh	r2, [r1, #0]
 801d0ba:	8884      	ldrh	r4, [r0, #4]
 801d0bc:	4422      	add	r2, r4
 801d0be:	800a      	strh	r2, [r1, #0]
 801d0c0:	88c4      	ldrh	r4, [r0, #6]
 801d0c2:	884a      	ldrh	r2, [r1, #2]
 801d0c4:	4422      	add	r2, r4
 801d0c6:	804a      	strh	r2, [r1, #2]
 801d0c8:	6940      	ldr	r0, [r0, #20]
 801d0ca:	b120      	cbz	r0, 801d0d6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801d0cc:	6803      	ldr	r3, [r0, #0]
 801d0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0d4:	4718      	bx	r3
 801d0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0da:	4770      	bx	lr

0801d0dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d0dc:	b570      	push	{r4, r5, r6, lr}
 801d0de:	8882      	ldrh	r2, [r0, #4]
 801d0e0:	880b      	ldrh	r3, [r1, #0]
 801d0e2:	4413      	add	r3, r2
 801d0e4:	800b      	strh	r3, [r1, #0]
 801d0e6:	88c2      	ldrh	r2, [r0, #6]
 801d0e8:	884b      	ldrh	r3, [r1, #2]
 801d0ea:	460c      	mov	r4, r1
 801d0ec:	4413      	add	r3, r2
 801d0ee:	804b      	strh	r3, [r1, #2]
 801d0f0:	4605      	mov	r5, r0
 801d0f2:	1d01      	adds	r1, r0, #4
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	f7fa fa27 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801d0fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	dd0b      	ble.n	801d11a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d102:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d106:	2b00      	cmp	r3, #0
 801d108:	dd07      	ble.n	801d11a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d10a:	6968      	ldr	r0, [r5, #20]
 801d10c:	b128      	cbz	r0, 801d11a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d10e:	6803      	ldr	r3, [r0, #0]
 801d110:	4621      	mov	r1, r4
 801d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d118:	4718      	bx	r3
 801d11a:	bd70      	pop	{r4, r5, r6, pc}

0801d11c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d11c:	b570      	push	{r4, r5, r6, lr}
 801d11e:	8882      	ldrh	r2, [r0, #4]
 801d120:	880b      	ldrh	r3, [r1, #0]
 801d122:	4413      	add	r3, r2
 801d124:	800b      	strh	r3, [r1, #0]
 801d126:	88c2      	ldrh	r2, [r0, #6]
 801d128:	884b      	ldrh	r3, [r1, #2]
 801d12a:	460c      	mov	r4, r1
 801d12c:	4413      	add	r3, r2
 801d12e:	804b      	strh	r3, [r1, #2]
 801d130:	4605      	mov	r5, r0
 801d132:	1d01      	adds	r1, r0, #4
 801d134:	4620      	mov	r0, r4
 801d136:	f7fa fa07 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801d13a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d13e:	2b00      	cmp	r3, #0
 801d140:	dd15      	ble.n	801d16e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d142:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d146:	2b00      	cmp	r3, #0
 801d148:	dd11      	ble.n	801d16e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d14a:	6968      	ldr	r0, [r5, #20]
 801d14c:	b128      	cbz	r0, 801d15a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801d14e:	6803      	ldr	r3, [r0, #0]
 801d150:	691b      	ldr	r3, [r3, #16]
 801d152:	4621      	mov	r1, r4
 801d154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d158:	4718      	bx	r3
 801d15a:	4b05      	ldr	r3, [pc, #20]	; (801d170 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	3304      	adds	r3, #4
 801d160:	429d      	cmp	r5, r3
 801d162:	d104      	bne.n	801d16e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d164:	f7fe ffbe 	bl	801c0e4 <_ZN8touchgfx11Application11getInstanceEv>
 801d168:	6803      	ldr	r3, [r0, #0]
 801d16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d16c:	e7f1      	b.n	801d152 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801d16e:	bd70      	pop	{r4, r5, r6, pc}
 801d170:	200097e4 	.word	0x200097e4

0801d174 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801d174:	b570      	push	{r4, r5, r6, lr}
 801d176:	4604      	mov	r4, r0
 801d178:	4616      	mov	r6, r2
 801d17a:	460d      	mov	r5, r1
 801d17c:	b901      	cbnz	r1, 801d180 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801d17e:	b192      	cbz	r2, 801d1a6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801d180:	6823      	ldr	r3, [r4, #0]
 801d182:	4620      	mov	r0, r4
 801d184:	695b      	ldr	r3, [r3, #20]
 801d186:	4798      	blx	r3
 801d188:	88e2      	ldrh	r2, [r4, #6]
 801d18a:	88a1      	ldrh	r1, [r4, #4]
 801d18c:	4432      	add	r2, r6
 801d18e:	4429      	add	r1, r5
 801d190:	4620      	mov	r0, r4
 801d192:	b212      	sxth	r2, r2
 801d194:	b209      	sxth	r1, r1
 801d196:	f7f3 fc65 	bl	8010a64 <_ZN8touchgfx8Drawable5setXYEss>
 801d19a:	6823      	ldr	r3, [r4, #0]
 801d19c:	4620      	mov	r0, r4
 801d19e:	695b      	ldr	r3, [r3, #20]
 801d1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d1a4:	4718      	bx	r3
 801d1a6:	bd70      	pop	{r4, r5, r6, pc}

0801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d1a8:	b510      	push	{r4, lr}
 801d1aa:	4604      	mov	r4, r0
 801d1ac:	4608      	mov	r0, r1
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	8023      	strh	r3, [r4, #0]
 801d1b2:	8063      	strh	r3, [r4, #2]
 801d1b4:	6803      	ldr	r3, [r0, #0]
 801d1b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d1ba:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d1be:	80a1      	strh	r1, [r4, #4]
 801d1c0:	80e2      	strh	r2, [r4, #6]
 801d1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1c4:	4621      	mov	r1, r4
 801d1c6:	4798      	blx	r3
 801d1c8:	4620      	mov	r0, r4
 801d1ca:	bd10      	pop	{r4, pc}

0801d1cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801d1cc:	b530      	push	{r4, r5, lr}
 801d1ce:	8083      	strh	r3, [r0, #4]
 801d1d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d1d4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801d1d8:	7183      	strb	r3, [r0, #6]
 801d1da:	79c3      	ldrb	r3, [r0, #7]
 801d1dc:	6101      	str	r1, [r0, #16]
 801d1de:	f365 0306 	bfi	r3, r5, #0, #7
 801d1e2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801d1e6:	8282      	strh	r2, [r0, #20]
 801d1e8:	f365 13c7 	bfi	r3, r5, #7, #1
 801d1ec:	71c3      	strb	r3, [r0, #7]
 801d1ee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801d1f2:	7203      	strb	r3, [r0, #8]
 801d1f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801d1f8:	7243      	strb	r3, [r0, #9]
 801d1fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d1fe:	8143      	strh	r3, [r0, #10]
 801d200:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d204:	8183      	strh	r3, [r0, #12]
 801d206:	4b01      	ldr	r3, [pc, #4]	; (801d20c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801d208:	6003      	str	r3, [r0, #0]
 801d20a:	bd30      	pop	{r4, r5, pc}
 801d20c:	0803203c 	.word	0x0803203c

0801d210 <_ZNK8touchgfx9ConstFont4findEt>:
 801d210:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d212:	6904      	ldr	r4, [r0, #16]
 801d214:	b3bc      	cbz	r4, 801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d216:	88a3      	ldrh	r3, [r4, #4]
 801d218:	8a82      	ldrh	r2, [r0, #20]
 801d21a:	1acb      	subs	r3, r1, r3
 801d21c:	f102 32ff 	add.w	r2, r2, #4294967295
 801d220:	d431      	bmi.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d222:	4293      	cmp	r3, r2
 801d224:	dd0c      	ble.n	801d240 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801d226:	230e      	movs	r3, #14
 801d228:	fb03 4302 	mla	r3, r3, r2, r4
 801d22c:	889b      	ldrh	r3, [r3, #4]
 801d22e:	1a5b      	subs	r3, r3, r1
 801d230:	1ad3      	subs	r3, r2, r3
 801d232:	429a      	cmp	r2, r3
 801d234:	db27      	blt.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d236:	2b00      	cmp	r3, #0
 801d238:	bfbc      	itt	lt
 801d23a:	2302      	movlt	r3, #2
 801d23c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801d240:	2500      	movs	r5, #0
 801d242:	260e      	movs	r6, #14
 801d244:	4295      	cmp	r5, r2
 801d246:	dc1e      	bgt.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d248:	fb06 4003 	mla	r0, r6, r3, r4
 801d24c:	8887      	ldrh	r7, [r0, #4]
 801d24e:	42b9      	cmp	r1, r7
 801d250:	d01a      	beq.n	801d288 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801d252:	d20d      	bcs.n	801d270 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801d254:	1e5a      	subs	r2, r3, #1
 801d256:	4295      	cmp	r5, r2
 801d258:	dc15      	bgt.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d25a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801d25e:	1a5b      	subs	r3, r3, r1
 801d260:	1ad3      	subs	r3, r2, r3
 801d262:	429a      	cmp	r2, r3
 801d264:	db0f      	blt.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d266:	429d      	cmp	r5, r3
 801d268:	ddec      	ble.n	801d244 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d26a:	1953      	adds	r3, r2, r5
 801d26c:	105b      	asrs	r3, r3, #1
 801d26e:	e7e9      	b.n	801d244 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d270:	1c5d      	adds	r5, r3, #1
 801d272:	42aa      	cmp	r2, r5
 801d274:	db07      	blt.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d276:	8a43      	ldrh	r3, [r0, #18]
 801d278:	1acb      	subs	r3, r1, r3
 801d27a:	442b      	add	r3, r5
 801d27c:	429d      	cmp	r5, r3
 801d27e:	dc02      	bgt.n	801d286 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d280:	429a      	cmp	r2, r3
 801d282:	dadf      	bge.n	801d244 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d284:	e7f1      	b.n	801d26a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d286:	2000      	movs	r0, #0
 801d288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d28a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d28c:	4604      	mov	r4, r0
 801d28e:	4617      	mov	r7, r2
 801d290:	461e      	mov	r6, r3
 801d292:	b911      	cbnz	r1, 801d29a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d294:	2500      	movs	r5, #0
 801d296:	4628      	mov	r0, r5
 801d298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d29a:	290a      	cmp	r1, #10
 801d29c:	d0fa      	beq.n	801d294 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d29e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d2a2:	4291      	cmp	r1, r2
 801d2a4:	d0f6      	beq.n	801d294 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d2a6:	f242 020b 	movw	r2, #8203	; 0x200b
 801d2aa:	4291      	cmp	r1, r2
 801d2ac:	d0f2      	beq.n	801d294 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d2ae:	f7ff ffaf 	bl	801d210 <_ZNK8touchgfx9ConstFont4findEt>
 801d2b2:	4605      	mov	r5, r0
 801d2b4:	b950      	cbnz	r0, 801d2cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d2b6:	6823      	ldr	r3, [r4, #0]
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	691b      	ldr	r3, [r3, #16]
 801d2bc:	4798      	blx	r3
 801d2be:	4601      	mov	r1, r0
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	f7ff ffa5 	bl	801d210 <_ZNK8touchgfx9ConstFont4findEt>
 801d2c6:	4605      	mov	r5, r0
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	d0e3      	beq.n	801d294 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d2cc:	6823      	ldr	r3, [r4, #0]
 801d2ce:	4629      	mov	r1, r5
 801d2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2d2:	4620      	mov	r0, r4
 801d2d4:	4798      	blx	r3
 801d2d6:	6038      	str	r0, [r7, #0]
 801d2d8:	6823      	ldr	r3, [r4, #0]
 801d2da:	4620      	mov	r0, r4
 801d2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d2de:	4798      	blx	r3
 801d2e0:	7030      	strb	r0, [r6, #0]
 801d2e2:	e7d8      	b.n	801d296 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d2e4 <_ZN8touchgfx6memsetEPvhm>:
 801d2e4:	4402      	add	r2, r0
 801d2e6:	4290      	cmp	r0, r2
 801d2e8:	d002      	beq.n	801d2f0 <_ZN8touchgfx6memsetEPvhm+0xc>
 801d2ea:	f800 1b01 	strb.w	r1, [r0], #1
 801d2ee:	e7fa      	b.n	801d2e6 <_ZN8touchgfx6memsetEPvhm+0x2>
 801d2f0:	4770      	bx	lr

0801d2f2 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801d2f2:	b538      	push	{r3, r4, r5, lr}
 801d2f4:	4605      	mov	r5, r0
 801d2f6:	f002 fc8d 	bl	801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d2fa:	4604      	mov	r4, r0
 801d2fc:	4628      	mov	r0, r5
 801d2fe:	f002 fbc5 	bl	801fa8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d302:	2800      	cmp	r0, #0
 801d304:	bf14      	ite	ne
 801d306:	2002      	movne	r0, #2
 801d308:	2000      	moveq	r0, #0
 801d30a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d30e:	b280      	uxth	r0, r0
 801d310:	bd38      	pop	{r3, r4, r5, pc}

0801d312 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801d312:	b538      	push	{r3, r4, r5, lr}
 801d314:	4605      	mov	r5, r0
 801d316:	f002 fc7d 	bl	801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d31a:	4604      	mov	r4, r0
 801d31c:	4628      	mov	r0, r5
 801d31e:	f002 fbb5 	bl	801fa8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d322:	2800      	cmp	r0, #0
 801d324:	bf14      	ite	ne
 801d326:	2002      	movne	r0, #2
 801d328:	2000      	moveq	r0, #0
 801d32a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d32e:	f040 0001 	orr.w	r0, r0, #1
 801d332:	b280      	uxth	r0, r0
 801d334:	bd38      	pop	{r3, r4, r5, pc}

0801d336 <_ZN8touchgfx4clzuEm>:
 801d336:	4603      	mov	r3, r0
 801d338:	b1c8      	cbz	r0, 801d36e <_ZN8touchgfx4clzuEm+0x38>
 801d33a:	0c02      	lsrs	r2, r0, #16
 801d33c:	0412      	lsls	r2, r2, #16
 801d33e:	b9a2      	cbnz	r2, 801d36a <_ZN8touchgfx4clzuEm+0x34>
 801d340:	0403      	lsls	r3, r0, #16
 801d342:	2010      	movs	r0, #16
 801d344:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d348:	bf04      	itt	eq
 801d34a:	021b      	lsleq	r3, r3, #8
 801d34c:	3008      	addeq	r0, #8
 801d34e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d352:	bf04      	itt	eq
 801d354:	011b      	lsleq	r3, r3, #4
 801d356:	3004      	addeq	r0, #4
 801d358:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d35c:	bf04      	itt	eq
 801d35e:	009b      	lsleq	r3, r3, #2
 801d360:	3002      	addeq	r0, #2
 801d362:	2b00      	cmp	r3, #0
 801d364:	db04      	blt.n	801d370 <_ZN8touchgfx4clzuEm+0x3a>
 801d366:	3001      	adds	r0, #1
 801d368:	4770      	bx	lr
 801d36a:	2000      	movs	r0, #0
 801d36c:	e7ea      	b.n	801d344 <_ZN8touchgfx4clzuEm+0xe>
 801d36e:	2020      	movs	r0, #32
 801d370:	4770      	bx	lr

0801d372 <_ZN8touchgfx7muldivuEmmmRm>:
 801d372:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d376:	4680      	mov	r8, r0
 801d378:	460f      	mov	r7, r1
 801d37a:	4615      	mov	r5, r2
 801d37c:	461e      	mov	r6, r3
 801d37e:	f7ff ffda 	bl	801d336 <_ZN8touchgfx4clzuEm>
 801d382:	b998      	cbnz	r0, 801d3ac <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801d384:	4608      	mov	r0, r1
 801d386:	f7ff ffd6 	bl	801d336 <_ZN8touchgfx4clzuEm>
 801d38a:	2800      	cmp	r0, #0
 801d38c:	dd08      	ble.n	801d3a0 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801d38e:	4633      	mov	r3, r6
 801d390:	462a      	mov	r2, r5
 801d392:	4641      	mov	r1, r8
 801d394:	4638      	mov	r0, r7
 801d396:	f7ff ffec 	bl	801d372 <_ZN8touchgfx7muldivuEmmmRm>
 801d39a:	b003      	add	sp, #12
 801d39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3a0:	f04f 33ff 	mov.w	r3, #4294967295
 801d3a4:	6033      	str	r3, [r6, #0]
 801d3a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d3aa:	e7f6      	b.n	801d39a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d3ac:	fa31 f900 	lsrs.w	r9, r1, r0
 801d3b0:	fb01 f308 	mul.w	r3, r1, r8
 801d3b4:	d105      	bne.n	801d3c2 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801d3b6:	fbb3 f0f5 	udiv	r0, r3, r5
 801d3ba:	fb05 3510 	mls	r5, r5, r0, r3
 801d3be:	6035      	str	r5, [r6, #0]
 801d3c0:	e7eb      	b.n	801d39a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d3c2:	2301      	movs	r3, #1
 801d3c4:	fa08 fb00 	lsl.w	fp, r8, r0
 801d3c8:	fa03 f000 	lsl.w	r0, r3, r0
 801d3cc:	3801      	subs	r0, #1
 801d3ce:	462a      	mov	r2, r5
 801d3d0:	4633      	mov	r3, r6
 801d3d2:	4641      	mov	r1, r8
 801d3d4:	4038      	ands	r0, r7
 801d3d6:	f7ff ffcc 	bl	801d372 <_ZN8touchgfx7muldivuEmmmRm>
 801d3da:	fbbb faf5 	udiv	sl, fp, r5
 801d3de:	462a      	mov	r2, r5
 801d3e0:	4607      	mov	r7, r0
 801d3e2:	ab01      	add	r3, sp, #4
 801d3e4:	fb05 b11a 	mls	r1, r5, sl, fp
 801d3e8:	4648      	mov	r0, r9
 801d3ea:	f7ff ffc2 	bl	801d372 <_ZN8touchgfx7muldivuEmmmRm>
 801d3ee:	9b01      	ldr	r3, [sp, #4]
 801d3f0:	6832      	ldr	r2, [r6, #0]
 801d3f2:	fb09 f40a 	mul.w	r4, r9, sl
 801d3f6:	441a      	add	r2, r3
 801d3f8:	fbb2 f3f5 	udiv	r3, r2, r5
 801d3fc:	441c      	add	r4, r3
 801d3fe:	443c      	add	r4, r7
 801d400:	4420      	add	r0, r4
 801d402:	fb05 2513 	mls	r5, r5, r3, r2
 801d406:	e7da      	b.n	801d3be <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801d408 <_ZN8touchgfx6muldivElllRl>:
 801d408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d40a:	2800      	cmp	r0, #0
 801d40c:	bfba      	itte	lt
 801d40e:	4240      	neglt	r0, r0
 801d410:	f04f 34ff 	movlt.w	r4, #4294967295
 801d414:	2401      	movge	r4, #1
 801d416:	2900      	cmp	r1, #0
 801d418:	bfbc      	itt	lt
 801d41a:	4249      	neglt	r1, r1
 801d41c:	4264      	neglt	r4, r4
 801d41e:	2a00      	cmp	r2, #0
 801d420:	bfb6      	itet	lt
 801d422:	4265      	neglt	r5, r4
 801d424:	4625      	movge	r5, r4
 801d426:	4252      	neglt	r2, r2
 801d428:	4288      	cmp	r0, r1
 801d42a:	461e      	mov	r6, r3
 801d42c:	bfc2      	ittt	gt
 801d42e:	4603      	movgt	r3, r0
 801d430:	4608      	movgt	r0, r1
 801d432:	4619      	movgt	r1, r3
 801d434:	ab01      	add	r3, sp, #4
 801d436:	f7ff ff9c 	bl	801d372 <_ZN8touchgfx7muldivuEmmmRm>
 801d43a:	9b01      	ldr	r3, [sp, #4]
 801d43c:	4368      	muls	r0, r5
 801d43e:	435c      	muls	r4, r3
 801d440:	6034      	str	r4, [r6, #0]
 801d442:	b002      	add	sp, #8
 801d444:	bd70      	pop	{r4, r5, r6, pc}

0801d446 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801d446:	2000      	movs	r0, #0
 801d448:	4770      	bx	lr

0801d44a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801d44a:	2001      	movs	r0, #1
 801d44c:	4770      	bx	lr

0801d44e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d44e:	2002      	movs	r0, #2
 801d450:	4770      	bx	lr

0801d452 <_ZN8touchgfx12GestureEventD1Ev>:
 801d452:	4770      	bx	lr

0801d454 <_ZN8touchgfx9DragEventD1Ev>:
 801d454:	4770      	bx	lr

0801d456 <_ZN8touchgfx10ClickEventD1Ev>:
 801d456:	4770      	bx	lr

0801d458 <_ZN8touchgfx10ClickEventD0Ev>:
 801d458:	b510      	push	{r4, lr}
 801d45a:	210c      	movs	r1, #12
 801d45c:	4604      	mov	r4, r0
 801d45e:	f00f ff40 	bl	802d2e2 <_ZdlPvj>
 801d462:	4620      	mov	r0, r4
 801d464:	bd10      	pop	{r4, pc}

0801d466 <_ZN8touchgfx9DragEventD0Ev>:
 801d466:	b510      	push	{r4, lr}
 801d468:	2110      	movs	r1, #16
 801d46a:	4604      	mov	r4, r0
 801d46c:	f00f ff39 	bl	802d2e2 <_ZdlPvj>
 801d470:	4620      	mov	r0, r4
 801d472:	bd10      	pop	{r4, pc}

0801d474 <_ZN8touchgfx12GestureEventD0Ev>:
 801d474:	b510      	push	{r4, lr}
 801d476:	210c      	movs	r1, #12
 801d478:	4604      	mov	r4, r0
 801d47a:	f00f ff32 	bl	802d2e2 <_ZdlPvj>
 801d47e:	4620      	mov	r0, r4
 801d480:	bd10      	pop	{r4, pc}
	...

0801d484 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d484:	b530      	push	{r4, r5, lr}
 801d486:	460d      	mov	r5, r1
 801d488:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d48a:	b087      	sub	sp, #28
 801d48c:	4604      	mov	r4, r0
 801d48e:	b301      	cbz	r1, 801d4d2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d490:	a801      	add	r0, sp, #4
 801d492:	f7ff fe89 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d496:	892a      	ldrh	r2, [r5, #8]
 801d498:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d49c:	7928      	ldrb	r0, [r5, #4]
 801d49e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d4a2:	f88d 0010 	strb.w	r0, [sp, #16]
 801d4a6:	1ad2      	subs	r2, r2, r3
 801d4a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d4aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d4ac:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d4b0:	441a      	add	r2, r3
 801d4b2:	896b      	ldrh	r3, [r5, #10]
 801d4b4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d4b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d4bc:	1b5b      	subs	r3, r3, r5
 801d4be:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d4c0:	442b      	add	r3, r5
 801d4c2:	4d05      	ldr	r5, [pc, #20]	; (801d4d8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d4c4:	9503      	str	r5, [sp, #12]
 801d4c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d4ca:	6803      	ldr	r3, [r0, #0]
 801d4cc:	a903      	add	r1, sp, #12
 801d4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d4d0:	4798      	blx	r3
 801d4d2:	b007      	add	sp, #28
 801d4d4:	bd30      	pop	{r4, r5, pc}
 801d4d6:	bf00      	nop
 801d4d8:	080320bc 	.word	0x080320bc

0801d4dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d4e2:	b08a      	sub	sp, #40	; 0x28
 801d4e4:	4604      	mov	r4, r0
 801d4e6:	460d      	mov	r5, r1
 801d4e8:	b113      	cbz	r3, 801d4f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d4ea:	790b      	ldrb	r3, [r1, #4]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d044      	beq.n	801d57a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d4f0:	f104 0804 	add.w	r8, r4, #4
 801d4f4:	4641      	mov	r1, r8
 801d4f6:	a803      	add	r0, sp, #12
 801d4f8:	f7ff fe56 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4fc:	792b      	ldrb	r3, [r5, #4]
 801d4fe:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d502:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d506:	b983      	cbnz	r3, 801d52a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d508:	892a      	ldrh	r2, [r5, #8]
 801d50a:	88e9      	ldrh	r1, [r5, #6]
 801d50c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d510:	1b92      	subs	r2, r2, r6
 801d512:	1bc9      	subs	r1, r1, r7
 801d514:	9301      	str	r3, [sp, #4]
 801d516:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d51a:	9300      	str	r3, [sp, #0]
 801d51c:	b212      	sxth	r2, r2
 801d51e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d522:	b209      	sxth	r1, r1
 801d524:	4640      	mov	r0, r8
 801d526:	f7f9 ff2b 	bl	8017380 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d52a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d52c:	b329      	cbz	r1, 801d57a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d52e:	a805      	add	r0, sp, #20
 801d530:	f7ff fe3a 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d534:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d538:	792b      	ldrb	r3, [r5, #4]
 801d53a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d53c:	f88d 3020 	strb.w	r3, [sp, #32]
 801d540:	1abf      	subs	r7, r7, r2
 801d542:	88ea      	ldrh	r2, [r5, #6]
 801d544:	4417      	add	r7, r2
 801d546:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d548:	4417      	add	r7, r2
 801d54a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d54e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d552:	1ab6      	subs	r6, r6, r2
 801d554:	892a      	ldrh	r2, [r5, #8]
 801d556:	4416      	add	r6, r2
 801d558:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d55a:	4416      	add	r6, r2
 801d55c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d560:	4a07      	ldr	r2, [pc, #28]	; (801d580 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d562:	9207      	str	r2, [sp, #28]
 801d564:	2600      	movs	r6, #0
 801d566:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d56a:	6803      	ldr	r3, [r0, #0]
 801d56c:	a907      	add	r1, sp, #28
 801d56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d570:	4798      	blx	r3
 801d572:	792b      	ldrb	r3, [r5, #4]
 801d574:	b10b      	cbz	r3, 801d57a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d576:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d57a:	b00a      	add	sp, #40	; 0x28
 801d57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d580:	08032094 	.word	0x08032094

0801d584 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d588:	460c      	mov	r4, r1
 801d58a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d58c:	b088      	sub	sp, #32
 801d58e:	4605      	mov	r5, r0
 801d590:	2900      	cmp	r1, #0
 801d592:	d06d      	beq.n	801d670 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d594:	4668      	mov	r0, sp
 801d596:	f7ff fe07 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d59a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d59c:	88e3      	ldrh	r3, [r4, #6]
 801d59e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d5a2:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d5a6:	440b      	add	r3, r1
 801d5a8:	b21b      	sxth	r3, r3
 801d5aa:	4543      	cmp	r3, r8
 801d5ac:	db31      	blt.n	801d612 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d5ae:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d5b2:	44c4      	add	ip, r8
 801d5b4:	fa0f fc8c 	sxth.w	ip, ip
 801d5b8:	4563      	cmp	r3, ip
 801d5ba:	da2a      	bge.n	801d612 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d5bc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d5be:	8926      	ldrh	r6, [r4, #8]
 801d5c0:	4416      	add	r6, r2
 801d5c2:	b236      	sxth	r6, r6
 801d5c4:	42be      	cmp	r6, r7
 801d5c6:	db24      	blt.n	801d612 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d5c8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d5cc:	4438      	add	r0, r7
 801d5ce:	b200      	sxth	r0, r0
 801d5d0:	4286      	cmp	r6, r0
 801d5d2:	da1e      	bge.n	801d612 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d5d4:	8963      	ldrh	r3, [r4, #10]
 801d5d6:	4419      	add	r1, r3
 801d5d8:	b209      	sxth	r1, r1
 801d5da:	4541      	cmp	r1, r8
 801d5dc:	db08      	blt.n	801d5f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d5de:	4561      	cmp	r1, ip
 801d5e0:	da06      	bge.n	801d5f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d5e2:	89a3      	ldrh	r3, [r4, #12]
 801d5e4:	441a      	add	r2, r3
 801d5e6:	b212      	sxth	r2, r2
 801d5e8:	42ba      	cmp	r2, r7
 801d5ea:	db01      	blt.n	801d5f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d5ec:	4282      	cmp	r2, r0
 801d5ee:	db10      	blt.n	801d612 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d5f0:	4b21      	ldr	r3, [pc, #132]	; (801d678 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d5f2:	9304      	str	r3, [sp, #16]
 801d5f4:	2302      	movs	r3, #2
 801d5f6:	f88d 3014 	strb.w	r3, [sp, #20]
 801d5fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d602:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d606:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d60a:	6803      	ldr	r3, [r0, #0]
 801d60c:	a904      	add	r1, sp, #16
 801d60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d610:	4798      	blx	r3
 801d612:	1d29      	adds	r1, r5, #4
 801d614:	a802      	add	r0, sp, #8
 801d616:	f7ff fdc7 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d61a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d61e:	88e0      	ldrh	r0, [r4, #6]
 801d620:	7921      	ldrb	r1, [r4, #4]
 801d622:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d626:	8922      	ldrh	r2, [r4, #8]
 801d628:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d62a:	f88d 1014 	strb.w	r1, [sp, #20]
 801d62e:	eba3 0808 	sub.w	r8, r3, r8
 801d632:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d636:	1bdf      	subs	r7, r3, r7
 801d638:	b2bb      	uxth	r3, r7
 801d63a:	fa1f f888 	uxth.w	r8, r8
 801d63e:	8967      	ldrh	r7, [r4, #10]
 801d640:	89a4      	ldrh	r4, [r4, #12]
 801d642:	4440      	add	r0, r8
 801d644:	4460      	add	r0, ip
 801d646:	441a      	add	r2, r3
 801d648:	44b8      	add	r8, r7
 801d64a:	4423      	add	r3, r4
 801d64c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d650:	4433      	add	r3, r6
 801d652:	4432      	add	r2, r6
 801d654:	44e0      	add	r8, ip
 801d656:	4c09      	ldr	r4, [pc, #36]	; (801d67c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d658:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d65a:	9404      	str	r4, [sp, #16]
 801d65c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d660:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d664:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d668:	6803      	ldr	r3, [r0, #0]
 801d66a:	a904      	add	r1, sp, #16
 801d66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d66e:	4798      	blx	r3
 801d670:	b008      	add	sp, #32
 801d672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d676:	bf00      	nop
 801d678:	08032094 	.word	0x08032094
 801d67c:	080320a8 	.word	0x080320a8

0801d680 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d682:	4604      	mov	r4, r0
 801d684:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d688:	3201      	adds	r2, #1
 801d68a:	d112      	bne.n	801d6b2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d68c:	6803      	ldr	r3, [r0, #0]
 801d68e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d692:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d696:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d69a:	2500      	movs	r5, #0
 801d69c:	9500      	str	r5, [sp, #0]
 801d69e:	466d      	mov	r5, sp
 801d6a0:	4629      	mov	r1, r5
 801d6a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6a8:	4798      	blx	r3
 801d6aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d6ae:	e884 0003 	stmia.w	r4, {r0, r1}
 801d6b2:	4620      	mov	r0, r4
 801d6b4:	b003      	add	sp, #12
 801d6b6:	bd30      	pop	{r4, r5, pc}

0801d6b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d6b8:	b513      	push	{r0, r1, r4, lr}
 801d6ba:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d6be:	3301      	adds	r3, #1
 801d6c0:	4604      	mov	r4, r0
 801d6c2:	d109      	bne.n	801d6d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d6c4:	4601      	mov	r1, r0
 801d6c6:	4668      	mov	r0, sp
 801d6c8:	f7ff fd6e 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d6cc:	f8bd 3000 	ldrh.w	r3, [sp]
 801d6d0:	8423      	strh	r3, [r4, #32]
 801d6d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d6d6:	8463      	strh	r3, [r4, #34]	; 0x22
 801d6d8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d6dc:	b002      	add	sp, #8
 801d6de:	bd10      	pop	{r4, pc}

0801d6e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d6e0:	b513      	push	{r0, r1, r4, lr}
 801d6e2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d6e6:	3301      	adds	r3, #1
 801d6e8:	4604      	mov	r4, r0
 801d6ea:	d109      	bne.n	801d700 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d6ec:	4601      	mov	r1, r0
 801d6ee:	4668      	mov	r0, sp
 801d6f0:	f7ff fd5a 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d6f4:	f8bd 3000 	ldrh.w	r3, [sp]
 801d6f8:	8423      	strh	r3, [r4, #32]
 801d6fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d6fe:	8463      	strh	r3, [r4, #34]	; 0x22
 801d700:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d704:	b002      	add	sp, #8
 801d706:	bd10      	pop	{r4, pc}

0801d708 <_ZN8touchgfx6ScreenC1Ev>:
 801d708:	b570      	push	{r4, r5, r6, lr}
 801d70a:	4605      	mov	r5, r0
 801d70c:	4b16      	ldr	r3, [pc, #88]	; (801d768 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d70e:	f845 3b04 	str.w	r3, [r5], #4
 801d712:	2300      	movs	r3, #0
 801d714:	8103      	strh	r3, [r0, #8]
 801d716:	8143      	strh	r3, [r0, #10]
 801d718:	8183      	strh	r3, [r0, #12]
 801d71a:	81c3      	strh	r3, [r0, #14]
 801d71c:	8203      	strh	r3, [r0, #16]
 801d71e:	8243      	strh	r3, [r0, #18]
 801d720:	8283      	strh	r3, [r0, #20]
 801d722:	82c3      	strh	r3, [r0, #22]
 801d724:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d728:	6203      	str	r3, [r0, #32]
 801d72a:	8483      	strh	r3, [r0, #36]	; 0x24
 801d72c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d72e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d732:	4a0e      	ldr	r2, [pc, #56]	; (801d76c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d734:	6343      	str	r3, [r0, #52]	; 0x34
 801d736:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d73a:	4b0d      	ldr	r3, [pc, #52]	; (801d770 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d73c:	6042      	str	r2, [r0, #4]
 801d73e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d742:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d744:	4a0b      	ldr	r2, [pc, #44]	; (801d774 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d746:	4604      	mov	r4, r0
 801d748:	2101      	movs	r1, #1
 801d74a:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d74e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d752:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d756:	4628      	mov	r0, r5
 801d758:	4798      	blx	r3
 801d75a:	6863      	ldr	r3, [r4, #4]
 801d75c:	4628      	mov	r0, r5
 801d75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d760:	4631      	mov	r1, r6
 801d762:	4798      	blx	r3
 801d764:	4620      	mov	r0, r4
 801d766:	bd70      	pop	{r4, r5, r6, pc}
 801d768:	080320d0 	.word	0x080320d0
 801d76c:	08030b10 	.word	0x08030b10
 801d770:	2000979e 	.word	0x2000979e
 801d774:	2000979c 	.word	0x2000979c

0801d778 <_ZN8touchgfx6Screen4drawEv>:
 801d778:	b507      	push	{r0, r1, r2, lr}
 801d77a:	4b09      	ldr	r3, [pc, #36]	; (801d7a0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d77c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d780:	4b08      	ldr	r3, [pc, #32]	; (801d7a4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d782:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d786:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d78a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d78e:	6803      	ldr	r3, [r0, #0]
 801d790:	2100      	movs	r1, #0
 801d792:	9100      	str	r1, [sp, #0]
 801d794:	689b      	ldr	r3, [r3, #8]
 801d796:	4669      	mov	r1, sp
 801d798:	4798      	blx	r3
 801d79a:	b003      	add	sp, #12
 801d79c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d7a0:	2000979c 	.word	0x2000979c
 801d7a4:	2000979e 	.word	0x2000979e

0801d7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	b089      	sub	sp, #36	; 0x24
 801d7b4:	4680      	mov	r8, r0
 801d7b6:	460c      	mov	r4, r1
 801d7b8:	4615      	mov	r5, r2
 801d7ba:	dd0e      	ble.n	801d7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d7bc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	dd0a      	ble.n	801d7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d7c4:	4628      	mov	r0, r5
 801d7c6:	f7ff ff5b 	bl	801d680 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d7ca:	4621      	mov	r1, r4
 801d7cc:	f7fb fbd0 	bl	8018f70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d7d0:	69eb      	ldr	r3, [r5, #28]
 801d7d2:	b928      	cbnz	r0, 801d7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d7d4:	461d      	mov	r5, r3
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d1f4      	bne.n	801d7c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d7da:	b009      	add	sp, #36	; 0x24
 801d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e0:	ae04      	add	r6, sp, #16
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	f000 80b5 	beq.w	801d952 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d7e8:	682b      	ldr	r3, [r5, #0]
 801d7ea:	4629      	mov	r1, r5
 801d7ec:	68db      	ldr	r3, [r3, #12]
 801d7ee:	a802      	add	r0, sp, #8
 801d7f0:	4798      	blx	r3
 801d7f2:	4628      	mov	r0, r5
 801d7f4:	f7ff ff60 	bl	801d6b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d7f8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d7fc:	4407      	add	r7, r0
 801d7fe:	4628      	mov	r0, r5
 801d800:	f7ff ff6e 	bl	801d6e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d804:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d808:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d80c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d810:	4418      	add	r0, r3
 801d812:	4621      	mov	r1, r4
 801d814:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d818:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d81c:	b23f      	sxth	r7, r7
 801d81e:	4630      	mov	r0, r6
 801d820:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d824:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d828:	f7f9 fe8e 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801d82c:	4628      	mov	r0, r5
 801d82e:	f7ff ff27 	bl	801d680 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d832:	4602      	mov	r2, r0
 801d834:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d838:	ab06      	add	r3, sp, #24
 801d83a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d83e:	4611      	mov	r1, r2
 801d840:	4618      	mov	r0, r3
 801d842:	f7f9 fe81 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801d846:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d84a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d84e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d852:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d856:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d85a:	4299      	cmp	r1, r3
 801d85c:	d10b      	bne.n	801d876 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d85e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d862:	4552      	cmp	r2, sl
 801d864:	d107      	bne.n	801d876 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d866:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d86a:	455a      	cmp	r2, fp
 801d86c:	d103      	bne.n	801d876 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d86e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d872:	454a      	cmp	r2, r9
 801d874:	d06d      	beq.n	801d952 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d876:	f1bb 0f00 	cmp.w	fp, #0
 801d87a:	dd65      	ble.n	801d948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d87c:	f1b9 0f00 	cmp.w	r9, #0
 801d880:	dd62      	ble.n	801d948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d882:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d886:	fa1f f08a 	uxth.w	r0, sl
 801d88a:	4552      	cmp	r2, sl
 801d88c:	9000      	str	r0, [sp, #0]
 801d88e:	da12      	bge.n	801d8b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d890:	9301      	str	r3, [sp, #4]
 801d892:	9b00      	ldr	r3, [sp, #0]
 801d894:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d898:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d89c:	1a9a      	subs	r2, r3, r2
 801d89e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d8a2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d8a6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d8aa:	69ea      	ldr	r2, [r5, #28]
 801d8ac:	4631      	mov	r1, r6
 801d8ae:	4640      	mov	r0, r8
 801d8b0:	f7ff ff7a 	bl	801d7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d8b4:	9b01      	ldr	r3, [sp, #4]
 801d8b6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d8ba:	429a      	cmp	r2, r3
 801d8bc:	b29f      	uxth	r7, r3
 801d8be:	da0d      	bge.n	801d8dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d8c0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d8c4:	1aba      	subs	r2, r7, r2
 801d8c6:	f8ad a012 	strh.w	sl, [sp, #18]
 801d8ca:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d8ce:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d8d2:	69ea      	ldr	r2, [r5, #28]
 801d8d4:	4631      	mov	r1, r6
 801d8d6:	4640      	mov	r0, r8
 801d8d8:	f7ff ff66 	bl	801d7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d8dc:	8822      	ldrh	r2, [r4, #0]
 801d8de:	88a3      	ldrh	r3, [r4, #4]
 801d8e0:	445f      	add	r7, fp
 801d8e2:	4413      	add	r3, r2
 801d8e4:	b29b      	uxth	r3, r3
 801d8e6:	b2bf      	uxth	r7, r7
 801d8e8:	b23a      	sxth	r2, r7
 801d8ea:	b219      	sxth	r1, r3
 801d8ec:	4291      	cmp	r1, r2
 801d8ee:	dd0d      	ble.n	801d90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d8f0:	1bdb      	subs	r3, r3, r7
 801d8f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d8f6:	f8ad a012 	strh.w	sl, [sp, #18]
 801d8fa:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d8fe:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d902:	69ea      	ldr	r2, [r5, #28]
 801d904:	4631      	mov	r1, r6
 801d906:	4640      	mov	r0, r8
 801d908:	f7ff ff4e 	bl	801d7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d90c:	88e2      	ldrh	r2, [r4, #6]
 801d90e:	8863      	ldrh	r3, [r4, #2]
 801d910:	4413      	add	r3, r2
 801d912:	9a00      	ldr	r2, [sp, #0]
 801d914:	444a      	add	r2, r9
 801d916:	b29b      	uxth	r3, r3
 801d918:	fa1f f982 	uxth.w	r9, r2
 801d91c:	fa0f f289 	sxth.w	r2, r9
 801d920:	b219      	sxth	r1, r3
 801d922:	428a      	cmp	r2, r1
 801d924:	da15      	bge.n	801d952 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d926:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d92a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d92e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d932:	eba3 0309 	sub.w	r3, r3, r9
 801d936:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d93a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d93e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d942:	69ea      	ldr	r2, [r5, #28]
 801d944:	4631      	mov	r1, r6
 801d946:	e001      	b.n	801d94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d948:	69ea      	ldr	r2, [r5, #28]
 801d94a:	4621      	mov	r1, r4
 801d94c:	4640      	mov	r0, r8
 801d94e:	f7ff ff2b 	bl	801d7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d952:	4628      	mov	r0, r5
 801d954:	f7ff fe94 	bl	801d680 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d958:	6861      	ldr	r1, [r4, #4]
 801d95a:	4602      	mov	r2, r0
 801d95c:	6820      	ldr	r0, [r4, #0]
 801d95e:	4633      	mov	r3, r6
 801d960:	c303      	stmia	r3!, {r0, r1}
 801d962:	4611      	mov	r1, r2
 801d964:	4630      	mov	r0, r6
 801d966:	f7f9 fdef 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801d96a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	f77f af33 	ble.w	801d7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d974:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	f77f af2e 	ble.w	801d7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d97e:	4628      	mov	r0, r5
 801d980:	f7ff fe9a 	bl	801d6b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d984:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d988:	1a18      	subs	r0, r3, r0
 801d98a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d98e:	4628      	mov	r0, r5
 801d990:	f7ff fea6 	bl	801d6e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d994:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d998:	1a18      	subs	r0, r3, r0
 801d99a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d99e:	682b      	ldr	r3, [r5, #0]
 801d9a0:	4631      	mov	r1, r6
 801d9a2:	689b      	ldr	r3, [r3, #8]
 801d9a4:	4628      	mov	r0, r5
 801d9a6:	4798      	blx	r3
 801d9a8:	e717      	b.n	801d7da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d9aa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d9aa:	b570      	push	{r4, r5, r6, lr}
 801d9ac:	460c      	mov	r4, r1
 801d9ae:	b086      	sub	sp, #24
 801d9b0:	1d06      	adds	r6, r0, #4
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	4631      	mov	r1, r6
 801d9b6:	4605      	mov	r5, r0
 801d9b8:	a802      	add	r0, sp, #8
 801d9ba:	9301      	str	r3, [sp, #4]
 801d9bc:	f7ff fbf4 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d9c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d9c4:	8822      	ldrh	r2, [r4, #0]
 801d9c6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d9ca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d9ce:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d9d2:	1ad2      	subs	r2, r2, r3
 801d9d4:	8863      	ldrh	r3, [r4, #2]
 801d9d6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d9da:	1a5b      	subs	r3, r3, r1
 801d9dc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d9e0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d9e4:	aa01      	add	r2, sp, #4
 801d9e6:	a904      	add	r1, sp, #16
 801d9e8:	4630      	mov	r0, r6
 801d9ea:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d9ee:	f7f9 fe83 	bl	80176f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d9f2:	9a01      	ldr	r2, [sp, #4]
 801d9f4:	b11a      	cbz	r2, 801d9fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d9f6:	4621      	mov	r1, r4
 801d9f8:	4628      	mov	r0, r5
 801d9fa:	f7ff fed5 	bl	801d7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d9fe:	b006      	add	sp, #24
 801da00:	bd70      	pop	{r4, r5, r6, pc}

0801da02 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801da02:	b530      	push	{r4, r5, lr}
 801da04:	4602      	mov	r2, r0
 801da06:	4604      	mov	r4, r0
 801da08:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801da0c:	b085      	sub	sp, #20
 801da0e:	460d      	mov	r5, r1
 801da10:	6851      	ldr	r1, [r2, #4]
 801da12:	466b      	mov	r3, sp
 801da14:	c303      	stmia	r3!, {r0, r1}
 801da16:	4629      	mov	r1, r5
 801da18:	4668      	mov	r0, sp
 801da1a:	f7f9 fd95 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 801da1e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801da22:	b12b      	cbz	r3, 801da30 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801da24:	4669      	mov	r1, sp
 801da26:	4620      	mov	r0, r4
 801da28:	f7ff ffbf 	bl	801d9aa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801da2c:	b005      	add	sp, #20
 801da2e:	bd30      	pop	{r4, r5, pc}
 801da30:	3404      	adds	r4, #4
 801da32:	4621      	mov	r1, r4
 801da34:	a802      	add	r0, sp, #8
 801da36:	f7ff fbb7 	bl	801d1a8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801da3a:	f8bd 3000 	ldrh.w	r3, [sp]
 801da3e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801da42:	1a9b      	subs	r3, r3, r2
 801da44:	f8ad 3000 	strh.w	r3, [sp]
 801da48:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801da4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801da50:	4669      	mov	r1, sp
 801da52:	1a9b      	subs	r3, r3, r2
 801da54:	4620      	mov	r0, r4
 801da56:	f8ad 3002 	strh.w	r3, [sp, #2]
 801da5a:	f7f9 fe14 	bl	8017686 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801da5e:	e7e5      	b.n	801da2c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801da60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801da60:	680a      	ldr	r2, [r1, #0]
 801da62:	460b      	mov	r3, r1
 801da64:	6992      	ldr	r2, [r2, #24]
 801da66:	1d01      	adds	r1, r0, #4
 801da68:	4618      	mov	r0, r3
 801da6a:	4710      	bx	r2

0801da6c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801da6c:	4298      	cmp	r0, r3
 801da6e:	d200      	bcs.n	801da72 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801da70:	b913      	cbnz	r3, 801da78 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801da72:	440a      	add	r2, r1
 801da74:	b210      	sxth	r0, r2
 801da76:	4770      	bx	lr
 801da78:	ee07 2a90 	vmov	s15, r2
 801da7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801da80:	ee07 0a90 	vmov	s15, r0
 801da84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da88:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da8c:	ee07 3a10 	vmov	s14, r3
 801da90:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801da94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801da98:	ee07 1a90 	vmov	s15, r1
 801da9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801daa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801daa4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801daa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dab0:	bfcc      	ite	gt
 801dab2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801dab6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801daba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dabe:	ee17 3a90 	vmov	r3, s15
 801dac2:	b218      	sxth	r0, r3
 801dac4:	4770      	bx	lr

0801dac6 <_ZN8touchgfx12TextProviderC1Ev>:
 801dac6:	b538      	push	{r3, r4, r5, lr}
 801dac8:	2500      	movs	r5, #0
 801daca:	2302      	movs	r3, #2
 801dacc:	4604      	mov	r4, r0
 801dace:	e9c0 5500 	strd	r5, r5, [r0]
 801dad2:	7403      	strb	r3, [r0, #16]
 801dad4:	6145      	str	r5, [r0, #20]
 801dad6:	7605      	strb	r5, [r0, #24]
 801dad8:	83c5      	strh	r5, [r0, #30]
 801dada:	8405      	strh	r5, [r0, #32]
 801dadc:	86c5      	strh	r5, [r0, #54]	; 0x36
 801dade:	8705      	strh	r5, [r0, #56]	; 0x38
 801dae0:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801dae2:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801dae6:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801daea:	220e      	movs	r2, #14
 801daec:	4629      	mov	r1, r5
 801daee:	304c      	adds	r0, #76	; 0x4c
 801daf0:	f010 fba4 	bl	802e23c <memset>
 801daf4:	2301      	movs	r3, #1
 801daf6:	4620      	mov	r0, r4
 801daf8:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801dafc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801db00:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801db04:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801db08:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801db0c:	f7f6 fcbe 	bl	801448c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801db10:	4620      	mov	r0, r4
 801db12:	bd38      	pop	{r3, r4, r5, pc}

0801db14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801db14:	b530      	push	{r4, r5, lr}
 801db16:	2500      	movs	r5, #0
 801db18:	2401      	movs	r4, #1
 801db1a:	6843      	ldr	r3, [r0, #4]
 801db1c:	b913      	cbnz	r3, 801db24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801db1e:	6803      	ldr	r3, [r0, #0]
 801db20:	b313      	cbz	r3, 801db68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801db22:	6043      	str	r3, [r0, #4]
 801db24:	7e03      	ldrb	r3, [r0, #24]
 801db26:	b143      	cbz	r3, 801db3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801db28:	6943      	ldr	r3, [r0, #20]
 801db2a:	b12b      	cbz	r3, 801db38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801db2c:	881a      	ldrh	r2, [r3, #0]
 801db2e:	b11a      	cbz	r2, 801db38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801db30:	1c9a      	adds	r2, r3, #2
 801db32:	6142      	str	r2, [r0, #20]
 801db34:	8818      	ldrh	r0, [r3, #0]
 801db36:	bd30      	pop	{r4, r5, pc}
 801db38:	7605      	strb	r5, [r0, #24]
 801db3a:	6843      	ldr	r3, [r0, #4]
 801db3c:	8819      	ldrh	r1, [r3, #0]
 801db3e:	b199      	cbz	r1, 801db68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801db40:	1c9a      	adds	r2, r3, #2
 801db42:	2902      	cmp	r1, #2
 801db44:	6042      	str	r2, [r0, #4]
 801db46:	d1f5      	bne.n	801db34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801db48:	7c03      	ldrb	r3, [r0, #16]
 801db4a:	2b01      	cmp	r3, #1
 801db4c:	d8e5      	bhi.n	801db1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801db4e:	1c5a      	adds	r2, r3, #1
 801db50:	3302      	adds	r3, #2
 801db52:	7402      	strb	r2, [r0, #16]
 801db54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801db58:	6143      	str	r3, [r0, #20]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d0dd      	beq.n	801db1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801db5e:	881b      	ldrh	r3, [r3, #0]
 801db60:	2b00      	cmp	r3, #0
 801db62:	d0da      	beq.n	801db1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801db64:	7604      	strb	r4, [r0, #24]
 801db66:	e7d8      	b.n	801db1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801db68:	2000      	movs	r0, #0
 801db6a:	e7e4      	b.n	801db36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801db6c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801db6c:	b430      	push	{r4, r5}
 801db6e:	6815      	ldr	r5, [r2, #0]
 801db70:	6085      	str	r5, [r0, #8]
 801db72:	6852      	ldr	r2, [r2, #4]
 801db74:	60c2      	str	r2, [r0, #12]
 801db76:	6443      	str	r3, [r0, #68]	; 0x44
 801db78:	2200      	movs	r2, #0
 801db7a:	9b02      	ldr	r3, [sp, #8]
 801db7c:	7402      	strb	r2, [r0, #16]
 801db7e:	6001      	str	r1, [r0, #0]
 801db80:	6483      	str	r3, [r0, #72]	; 0x48
 801db82:	6042      	str	r2, [r0, #4]
 801db84:	6142      	str	r2, [r0, #20]
 801db86:	7602      	strb	r2, [r0, #24]
 801db88:	8702      	strh	r2, [r0, #56]	; 0x38
 801db8a:	8402      	strh	r2, [r0, #32]
 801db8c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801db90:	bc30      	pop	{r4, r5}
 801db92:	f7f6 bc7b 	b.w	801448c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801db96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801db96:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db98:	4605      	mov	r5, r0
 801db9a:	4608      	mov	r0, r1
 801db9c:	b1e9      	cbz	r1, 801dbda <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801db9e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801dba2:	460b      	mov	r3, r1
 801dba4:	f101 0708 	add.w	r7, r1, #8
 801dba8:	4622      	mov	r2, r4
 801dbaa:	6818      	ldr	r0, [r3, #0]
 801dbac:	6859      	ldr	r1, [r3, #4]
 801dbae:	4626      	mov	r6, r4
 801dbb0:	c603      	stmia	r6!, {r0, r1}
 801dbb2:	3308      	adds	r3, #8
 801dbb4:	42bb      	cmp	r3, r7
 801dbb6:	4634      	mov	r4, r6
 801dbb8:	d1f7      	bne.n	801dbaa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801dbba:	6818      	ldr	r0, [r3, #0]
 801dbbc:	6030      	str	r0, [r6, #0]
 801dbbe:	889b      	ldrh	r3, [r3, #4]
 801dbc0:	80b3      	strh	r3, [r6, #4]
 801dbc2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801dbc6:	015b      	lsls	r3, r3, #5
 801dbc8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dbcc:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801dbd0:	430b      	orrs	r3, r1
 801dbd2:	425b      	negs	r3, r3
 801dbd4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801dbd8:	4610      	mov	r0, r2
 801dbda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dbdc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801dbdc:	b538      	push	{r3, r4, r5, lr}
 801dbde:	460c      	mov	r4, r1
 801dbe0:	6811      	ldr	r1, [r2, #0]
 801dbe2:	4610      	mov	r0, r2
 801dbe4:	68cd      	ldr	r5, [r1, #12]
 801dbe6:	4619      	mov	r1, r3
 801dbe8:	47a8      	blx	r5
 801dbea:	2800      	cmp	r0, #0
 801dbec:	bf08      	it	eq
 801dbee:	4620      	moveq	r0, r4
 801dbf0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801dbf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	4615      	mov	r5, r2
 801dbfa:	4608      	mov	r0, r1
 801dbfc:	b93a      	cbnz	r2, 801dc0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801dbfe:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801dc02:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801dc06:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801dc0a:	4628      	mov	r0, r5
 801dc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc0e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801dc12:	8893      	ldrh	r3, [r2, #4]
 801dc14:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801dc18:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801dc1c:	79ee      	ldrb	r6, [r5, #7]
 801dc1e:	4316      	orrs	r6, r2
 801dc20:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801dc24:	189a      	adds	r2, r3, r2
 801dc26:	b291      	uxth	r1, r2
 801dc28:	291d      	cmp	r1, #29
 801dc2a:	b2b7      	uxth	r7, r6
 801dc2c:	f200 8083 	bhi.w	801dd36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801dc30:	2201      	movs	r2, #1
 801dc32:	408a      	lsls	r2, r1
 801dc34:	4978      	ldr	r1, [pc, #480]	; (801de18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801dc36:	420a      	tst	r2, r1
 801dc38:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801dc3c:	d12d      	bne.n	801dc9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801dc3e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801dc42:	d078      	beq.n	801dd36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801dc44:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801dc48:	462b      	mov	r3, r5
 801dc4a:	f105 0e08 	add.w	lr, r5, #8
 801dc4e:	4615      	mov	r5, r2
 801dc50:	6818      	ldr	r0, [r3, #0]
 801dc52:	6859      	ldr	r1, [r3, #4]
 801dc54:	4694      	mov	ip, r2
 801dc56:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801dc5a:	3308      	adds	r3, #8
 801dc5c:	4573      	cmp	r3, lr
 801dc5e:	4662      	mov	r2, ip
 801dc60:	d1f6      	bne.n	801dc50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801dc62:	6818      	ldr	r0, [r3, #0]
 801dc64:	f8cc 0000 	str.w	r0, [ip]
 801dc68:	889b      	ldrh	r3, [r3, #4]
 801dc6a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801dc6e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801dc72:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801dc76:	b2b3      	uxth	r3, r6
 801dc78:	1aca      	subs	r2, r1, r3
 801dc7a:	b292      	uxth	r2, r2
 801dc7c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801dc80:	10d2      	asrs	r2, r2, #3
 801dc82:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801dc86:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801dc8a:	4302      	orrs	r2, r0
 801dc8c:	1bcf      	subs	r7, r1, r7
 801dc8e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801dc92:	1afb      	subs	r3, r7, r3
 801dc94:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dc98:	e7b7      	b.n	801dc0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dc9a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dc9c:	b92b      	cbnz	r3, 801dcaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801dc9e:	4b5f      	ldr	r3, [pc, #380]	; (801de1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801dca0:	4a5f      	ldr	r2, [pc, #380]	; (801de20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801dca2:	4860      	ldr	r0, [pc, #384]	; (801de24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801dca4:	21c0      	movs	r1, #192	; 0xc0
 801dca6:	f010 f93b 	bl	802df20 <__assert_func>
 801dcaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dcac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dcb0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801dcb2:	f640 6333 	movw	r3, #3635	; 0xe33
 801dcb6:	4299      	cmp	r1, r3
 801dcb8:	d110      	bne.n	801dcdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801dcba:	6803      	ldr	r3, [r0, #0]
 801dcbc:	68db      	ldr	r3, [r3, #12]
 801dcbe:	4798      	blx	r3
 801dcc0:	7b41      	ldrb	r1, [r0, #13]
 801dcc2:	00cb      	lsls	r3, r1, #3
 801dcc4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dcc8:	7a03      	ldrb	r3, [r0, #8]
 801dcca:	0648      	lsls	r0, r1, #25
 801dccc:	ea43 0302 	orr.w	r3, r3, r2
 801dcd0:	bf44      	itt	mi
 801dcd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dcd6:	b21b      	sxthmi	r3, r3
 801dcd8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dcdc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801dce0:	443b      	add	r3, r7
 801dce2:	4433      	add	r3, r6
 801dce4:	b29b      	uxth	r3, r3
 801dce6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801dcea:	462a      	mov	r2, r5
 801dcec:	f105 0c08 	add.w	ip, r5, #8
 801dcf0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dcf4:	4635      	mov	r5, r6
 801dcf6:	6810      	ldr	r0, [r2, #0]
 801dcf8:	6851      	ldr	r1, [r2, #4]
 801dcfa:	4637      	mov	r7, r6
 801dcfc:	c703      	stmia	r7!, {r0, r1}
 801dcfe:	3208      	adds	r2, #8
 801dd00:	4562      	cmp	r2, ip
 801dd02:	463e      	mov	r6, r7
 801dd04:	d1f7      	bne.n	801dcf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801dd06:	6810      	ldr	r0, [r2, #0]
 801dd08:	6038      	str	r0, [r7, #0]
 801dd0a:	8892      	ldrh	r2, [r2, #4]
 801dd0c:	80ba      	strh	r2, [r7, #4]
 801dd0e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dd12:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dd16:	10db      	asrs	r3, r3, #3
 801dd18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dd1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dd20:	4313      	orrs	r3, r2
 801dd22:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dd26:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801dd2a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801dd2e:	1a9b      	subs	r3, r3, r2
 801dd30:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801dd34:	e769      	b.n	801dc0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dd36:	f023 0204 	bic.w	r2, r3, #4
 801dd3a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801dd3e:	428a      	cmp	r2, r1
 801dd40:	d003      	beq.n	801dd4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801dd42:	f640 621d 	movw	r2, #3613	; 0xe1d
 801dd46:	4293      	cmp	r3, r2
 801dd48:	d120      	bne.n	801dd8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801dd4a:	3b01      	subs	r3, #1
 801dd4c:	4602      	mov	r2, r0
 801dd4e:	b29b      	uxth	r3, r3
 801dd50:	4629      	mov	r1, r5
 801dd52:	4620      	mov	r0, r4
 801dd54:	f7ff ff42 	bl	801dbdc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dd58:	7b41      	ldrb	r1, [r0, #13]
 801dd5a:	00cb      	lsls	r3, r1, #3
 801dd5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd60:	7a03      	ldrb	r3, [r0, #8]
 801dd62:	0649      	lsls	r1, r1, #25
 801dd64:	ea43 0302 	orr.w	r3, r3, r2
 801dd68:	bf44      	itt	mi
 801dd6a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd6e:	b21b      	sxthmi	r3, r3
 801dd70:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dd74:	7b6b      	ldrb	r3, [r5, #13]
 801dd76:	7aaa      	ldrb	r2, [r5, #10]
 801dd78:	005b      	lsls	r3, r3, #1
 801dd7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd7e:	4313      	orrs	r3, r2
 801dd80:	115a      	asrs	r2, r3, #5
 801dd82:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801dd86:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dd8a:	e036      	b.n	801ddfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801dd8c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801dd90:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801dd94:	7a2a      	ldrb	r2, [r5, #8]
 801dd96:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801dd9a:	ea42 0201 	orr.w	r2, r2, r1
 801dd9e:	bf1c      	itt	ne
 801dda0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801dda4:	b212      	sxthne	r2, r2
 801dda6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ddaa:	f640 6109 	movw	r1, #3593	; 0xe09
 801ddae:	f023 0210 	bic.w	r2, r3, #16
 801ddb2:	428a      	cmp	r2, r1
 801ddb4:	d003      	beq.n	801ddbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801ddb6:	f640 6213 	movw	r2, #3603	; 0xe13
 801ddba:	4293      	cmp	r3, r2
 801ddbc:	d12a      	bne.n	801de14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801ddbe:	7b6e      	ldrb	r6, [r5, #13]
 801ddc0:	0076      	lsls	r6, r6, #1
 801ddc2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ddc6:	7aae      	ldrb	r6, [r5, #10]
 801ddc8:	4316      	orrs	r6, r2
 801ddca:	f640 6213 	movw	r2, #3603	; 0xe13
 801ddce:	4293      	cmp	r3, r2
 801ddd0:	bf18      	it	ne
 801ddd2:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ddd6:	4602      	mov	r2, r0
 801ddd8:	bf14      	ite	ne
 801ddda:	b29b      	uxthne	r3, r3
 801dddc:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801dde0:	4629      	mov	r1, r5
 801dde2:	4620      	mov	r0, r4
 801dde4:	f7ff fefa 	bl	801dbdc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dde8:	7b43      	ldrb	r3, [r0, #13]
 801ddea:	7a82      	ldrb	r2, [r0, #10]
 801ddec:	005b      	lsls	r3, r3, #1
 801ddee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ddf2:	4313      	orrs	r3, r2
 801ddf4:	1af6      	subs	r6, r6, r3
 801ddf6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801ddfa:	7b69      	ldrb	r1, [r5, #13]
 801ddfc:	00cb      	lsls	r3, r1, #3
 801ddfe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801de02:	7a2b      	ldrb	r3, [r5, #8]
 801de04:	4313      	orrs	r3, r2
 801de06:	064a      	lsls	r2, r1, #25
 801de08:	bf44      	itt	mi
 801de0a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801de0e:	b21b      	sxthmi	r3, r3
 801de10:	1bdb      	subs	r3, r3, r7
 801de12:	e73f      	b.n	801dc94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801de14:	2300      	movs	r3, #0
 801de16:	e7b6      	b.n	801dd86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801de18:	3fc00079 	.word	0x3fc00079
 801de1c:	080320fc 	.word	0x080320fc
 801de20:	0803236e 	.word	0x0803236e
 801de24:	08032105 	.word	0x08032105

0801de28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801de28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de2c:	4604      	mov	r4, r0
 801de2e:	b942      	cbnz	r2, 801de42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801de30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801de34:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801de38:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801de3c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801de40:	e046      	b.n	801ded0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801de42:	7b51      	ldrb	r1, [r2, #13]
 801de44:	8893      	ldrh	r3, [r2, #4]
 801de46:	010f      	lsls	r7, r1, #4
 801de48:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801de4c:	79d7      	ldrb	r7, [r2, #7]
 801de4e:	4307      	orrs	r7, r0
 801de50:	2f04      	cmp	r7, #4
 801de52:	b2bd      	uxth	r5, r7
 801de54:	bfcc      	ite	gt
 801de56:	08bf      	lsrgt	r7, r7, #2
 801de58:	2701      	movle	r7, #1
 801de5a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801de5e:	f200 80ab 	bhi.w	801dfb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801de62:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801de66:	4283      	cmp	r3, r0
 801de68:	d216      	bcs.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de6a:	f240 605b 	movw	r0, #1627	; 0x65b
 801de6e:	4283      	cmp	r3, r0
 801de70:	d859      	bhi.n	801df26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801de72:	f240 6057 	movw	r0, #1623	; 0x657
 801de76:	4283      	cmp	r3, r0
 801de78:	d20e      	bcs.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de7a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801de7e:	d24a      	bcs.n	801df16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801de80:	f240 604e 	movw	r0, #1614	; 0x64e
 801de84:	4283      	cmp	r3, r0
 801de86:	d207      	bcs.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de88:	f240 601a 	movw	r0, #1562	; 0x61a
 801de8c:	4283      	cmp	r3, r0
 801de8e:	d02a      	beq.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801de90:	d821      	bhi.n	801ded6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801de92:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801de96:	d35b      	bcc.n	801df50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801de98:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801de9c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dea0:	f040 80d0 	bne.w	801e044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801dea4:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801dea8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801deac:	f040 80ca 	bne.w	801e044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801deb0:	00cb      	lsls	r3, r1, #3
 801deb2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801deb6:	7a13      	ldrb	r3, [r2, #8]
 801deb8:	0649      	lsls	r1, r1, #25
 801deba:	ea43 0300 	orr.w	r3, r3, r0
 801debe:	bf44      	itt	mi
 801dec0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dec4:	b21b      	sxthmi	r3, r3
 801dec6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801deca:	1b5d      	subs	r5, r3, r5
 801decc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ded0:	4610      	mov	r0, r2
 801ded2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ded6:	f240 604b 	movw	r0, #1611	; 0x64b
 801deda:	4283      	cmp	r3, r0
 801dedc:	d338      	bcc.n	801df50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801dede:	f240 604c 	movw	r0, #1612	; 0x64c
 801dee2:	4283      	cmp	r3, r0
 801dee4:	d9d8      	bls.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dee6:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801deea:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801deee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801def2:	f040 80f1 	bne.w	801e0d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801def6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801defa:	f040 80ed 	bne.w	801e0d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801defe:	00cb      	lsls	r3, r1, #3
 801df00:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801df04:	7a13      	ldrb	r3, [r2, #8]
 801df06:	064e      	lsls	r6, r1, #25
 801df08:	ea43 0300 	orr.w	r3, r3, r0
 801df0c:	bf44      	itt	mi
 801df0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801df12:	b21b      	sxthmi	r3, r3
 801df14:	e7d9      	b.n	801deca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801df16:	f240 6054 	movw	r0, #1620	; 0x654
 801df1a:	4283      	cmp	r3, r0
 801df1c:	d8e3      	bhi.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df1e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801df22:	d9e0      	bls.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df24:	e7b8      	b.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df26:	f240 6074 	movw	r0, #1652	; 0x674
 801df2a:	4283      	cmp	r3, r0
 801df2c:	d0b4      	beq.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df2e:	d82d      	bhi.n	801df8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801df30:	f240 605e 	movw	r0, #1630	; 0x65e
 801df34:	4283      	cmp	r3, r0
 801df36:	d804      	bhi.n	801df42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801df38:	f240 605d 	movw	r0, #1629	; 0x65d
 801df3c:	4283      	cmp	r3, r0
 801df3e:	d3d2      	bcc.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df40:	e7aa      	b.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df42:	f240 605f 	movw	r0, #1631	; 0x65f
 801df46:	4283      	cmp	r3, r0
 801df48:	d0cd      	beq.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df4a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801df4e:	d0a3      	beq.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df50:	00cb      	lsls	r3, r1, #3
 801df52:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801df56:	7a13      	ldrb	r3, [r2, #8]
 801df58:	0649      	lsls	r1, r1, #25
 801df5a:	ea43 0300 	orr.w	r3, r3, r0
 801df5e:	bf44      	itt	mi
 801df60:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801df64:	b21b      	sxthmi	r3, r3
 801df66:	1b5d      	subs	r5, r3, r5
 801df68:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801df6c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801df70:	7b53      	ldrb	r3, [r2, #13]
 801df72:	015b      	lsls	r3, r3, #5
 801df74:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801df78:	7993      	ldrb	r3, [r2, #6]
 801df7a:	430b      	orrs	r3, r1
 801df7c:	005b      	lsls	r3, r3, #1
 801df7e:	2105      	movs	r1, #5
 801df80:	fb93 f3f1 	sdiv	r3, r3, r1
 801df84:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801df88:	440b      	add	r3, r1
 801df8a:	e757      	b.n	801de3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801df8c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801df90:	4283      	cmp	r3, r0
 801df92:	d809      	bhi.n	801dfa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801df94:	f240 60df 	movw	r0, #1759	; 0x6df
 801df98:	4283      	cmp	r3, r0
 801df9a:	f4bf af7d 	bcs.w	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df9e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801dfa2:	2b05      	cmp	r3, #5
 801dfa4:	d8d4      	bhi.n	801df50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801dfa6:	e777      	b.n	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dfa8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801dfac:	4283      	cmp	r3, r0
 801dfae:	d09a      	beq.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dfb0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801dfb4:	4283      	cmp	r3, r0
 801dfb6:	e7ca      	b.n	801df4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801dfb8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801dfbc:	d22b      	bcs.n	801e016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801dfbe:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801dfc2:	4283      	cmp	r3, r0
 801dfc4:	d28f      	bcs.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dfc6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801dfca:	4283      	cmp	r3, r0
 801dfcc:	d816      	bhi.n	801dffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801dfce:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801dfd2:	4283      	cmp	r3, r0
 801dfd4:	f4bf af60 	bcs.w	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dfd8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801dfdc:	4283      	cmp	r3, r0
 801dfde:	d80a      	bhi.n	801dff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801dfe0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801dfe4:	4283      	cmp	r3, r0
 801dfe6:	f4bf af57 	bcs.w	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dfea:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801dfee:	4283      	cmp	r3, r0
 801dff0:	f43f af79 	beq.w	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dff4:	e7ac      	b.n	801df50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801dff6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801dffa:	e7f8      	b.n	801dfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801dffc:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801e000:	4283      	cmp	r3, r0
 801e002:	d802      	bhi.n	801e00a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801e004:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e008:	e798      	b.n	801df3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801e00a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801e00e:	4283      	cmp	r3, r0
 801e010:	f47f af42 	bne.w	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e014:	e767      	b.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e016:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801e01a:	4283      	cmp	r3, r0
 801e01c:	f43f af63 	beq.w	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e020:	d802      	bhi.n	801e028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801e022:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801e026:	e7f2      	b.n	801e00e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801e028:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801e02c:	4283      	cmp	r3, r0
 801e02e:	d805      	bhi.n	801e03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801e030:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801e034:	4283      	cmp	r3, r0
 801e036:	f4ff af2f 	bcc.w	801de98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e03a:	e754      	b.n	801dee6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e03c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801e040:	4283      	cmp	r3, r0
 801e042:	e7af      	b.n	801dfa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801e044:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e048:	4617      	mov	r7, r2
 801e04a:	f102 0808 	add.w	r8, r2, #8
 801e04e:	4666      	mov	r6, ip
 801e050:	6838      	ldr	r0, [r7, #0]
 801e052:	6879      	ldr	r1, [r7, #4]
 801e054:	46e6      	mov	lr, ip
 801e056:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801e05a:	3708      	adds	r7, #8
 801e05c:	4547      	cmp	r7, r8
 801e05e:	46f4      	mov	ip, lr
 801e060:	d1f6      	bne.n	801e050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801e062:	6838      	ldr	r0, [r7, #0]
 801e064:	f8ce 0000 	str.w	r0, [lr]
 801e068:	88b9      	ldrh	r1, [r7, #4]
 801e06a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e06e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e072:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e076:	d009      	beq.n	801e08c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801e078:	7b51      	ldrb	r1, [r2, #13]
 801e07a:	7992      	ldrb	r2, [r2, #6]
 801e07c:	0149      	lsls	r1, r1, #5
 801e07e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e082:	4311      	orrs	r1, r2
 801e084:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e088:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e08c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e090:	d00d      	beq.n	801e0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801e092:	442b      	add	r3, r5
 801e094:	b29b      	uxth	r3, r3
 801e096:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e09a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e09e:	10db      	asrs	r3, r3, #3
 801e0a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e0a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e0a8:	4313      	orrs	r3, r2
 801e0aa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e0ae:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e0b2:	00cb      	lsls	r3, r1, #3
 801e0b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e0b8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e0bc:	064f      	lsls	r7, r1, #25
 801e0be:	ea43 0302 	orr.w	r3, r3, r2
 801e0c2:	bf44      	itt	mi
 801e0c4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e0c8:	b21b      	sxthmi	r3, r3
 801e0ca:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e0ce:	1b5d      	subs	r5, r3, r5
 801e0d0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e0d4:	4632      	mov	r2, r6
 801e0d6:	e6fb      	b.n	801ded0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e0d8:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801e0dc:	4694      	mov	ip, r2
 801e0de:	f102 0908 	add.w	r9, r2, #8
 801e0e2:	4676      	mov	r6, lr
 801e0e4:	f8dc 0000 	ldr.w	r0, [ip]
 801e0e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e0ec:	46f0      	mov	r8, lr
 801e0ee:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e0f2:	f10c 0c08 	add.w	ip, ip, #8
 801e0f6:	45cc      	cmp	ip, r9
 801e0f8:	46c6      	mov	lr, r8
 801e0fa:	d1f3      	bne.n	801e0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801e0fc:	f8dc 0000 	ldr.w	r0, [ip]
 801e100:	f8c8 0000 	str.w	r0, [r8]
 801e104:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801e108:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e10c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e110:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e114:	d009      	beq.n	801e12a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801e116:	7b51      	ldrb	r1, [r2, #13]
 801e118:	7992      	ldrb	r2, [r2, #6]
 801e11a:	0149      	lsls	r1, r1, #5
 801e11c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e120:	4311      	orrs	r1, r2
 801e122:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e126:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e12a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e12e:	d00d      	beq.n	801e14c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e130:	1bdb      	subs	r3, r3, r7
 801e132:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e136:	b29b      	uxth	r3, r3
 801e138:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e13c:	10db      	asrs	r3, r3, #3
 801e13e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e146:	4313      	orrs	r3, r2
 801e148:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e14c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e150:	00cb      	lsls	r3, r1, #3
 801e152:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e156:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e15a:	0648      	lsls	r0, r1, #25
 801e15c:	ea43 0302 	orr.w	r3, r3, r2
 801e160:	bf44      	itt	mi
 801e162:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e166:	b21b      	sxthmi	r3, r3
 801e168:	e7b1      	b.n	801e0ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801e16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e170:	461e      	mov	r6, r3
 801e172:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e174:	4604      	mov	r4, r0
 801e176:	4617      	mov	r7, r2
 801e178:	b92b      	cbnz	r3, 801e186 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801e17a:	4b25      	ldr	r3, [pc, #148]	; (801e210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801e17c:	4a25      	ldr	r2, [pc, #148]	; (801e214 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801e17e:	4826      	ldr	r0, [pc, #152]	; (801e218 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801e180:	21c0      	movs	r1, #192	; 0xc0
 801e182:	f00f fecd 	bl	802df20 <__assert_func>
 801e186:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e188:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e18c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e190:	f7f6 f8d6 	bl	8014340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e194:	4605      	mov	r5, r0
 801e196:	b918      	cbnz	r0, 801e1a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801e198:	6030      	str	r0, [r6, #0]
 801e19a:	4628      	mov	r0, r5
 801e19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1a0:	683b      	ldr	r3, [r7, #0]
 801e1a2:	4601      	mov	r1, r0
 801e1a4:	68db      	ldr	r3, [r3, #12]
 801e1a6:	4638      	mov	r0, r7
 801e1a8:	4798      	blx	r3
 801e1aa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e1ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e1b2:	4602      	mov	r2, r0
 801e1b4:	6030      	str	r0, [r6, #0]
 801e1b6:	d213      	bcs.n	801e1e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801e1b8:	4643      	mov	r3, r8
 801e1ba:	4639      	mov	r1, r7
 801e1bc:	4620      	mov	r0, r4
 801e1be:	f7ff fe33 	bl	801de28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e1c2:	6030      	str	r0, [r6, #0]
 801e1c4:	6833      	ldr	r3, [r6, #0]
 801e1c6:	b143      	cbz	r3, 801e1da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801e1c8:	7b5a      	ldrb	r2, [r3, #13]
 801e1ca:	7a9b      	ldrb	r3, [r3, #10]
 801e1cc:	0052      	lsls	r2, r2, #1
 801e1ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e1d2:	4313      	orrs	r3, r2
 801e1d4:	bf0c      	ite	eq
 801e1d6:	2301      	moveq	r3, #1
 801e1d8:	2300      	movne	r3, #0
 801e1da:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e1de:	e7dc      	b.n	801e19a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801e1e0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e1e4:	b29b      	uxth	r3, r3
 801e1e6:	2b7f      	cmp	r3, #127	; 0x7f
 801e1e8:	d804      	bhi.n	801e1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801e1ea:	4639      	mov	r1, r7
 801e1ec:	4620      	mov	r0, r4
 801e1ee:	f7ff fd01 	bl	801dbf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e1f2:	e7e6      	b.n	801e1c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e1f4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d0e3      	beq.n	801e1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e1fc:	f640 1302 	movw	r3, #2306	; 0x902
 801e200:	429d      	cmp	r5, r3
 801e202:	d1df      	bne.n	801e1c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e204:	4601      	mov	r1, r0
 801e206:	4620      	mov	r0, r4
 801e208:	f7ff fcc5 	bl	801db96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e20c:	e7d9      	b.n	801e1c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e20e:	bf00      	nop
 801e210:	080320fc 	.word	0x080320fc
 801e214:	0803236e 	.word	0x0803236e
 801e218:	08032105 	.word	0x08032105

0801e21c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e220:	461e      	mov	r6, r3
 801e222:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e224:	4604      	mov	r4, r0
 801e226:	4617      	mov	r7, r2
 801e228:	b92b      	cbnz	r3, 801e236 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801e22a:	4b26      	ldr	r3, [pc, #152]	; (801e2c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801e22c:	4a26      	ldr	r2, [pc, #152]	; (801e2c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801e22e:	4827      	ldr	r0, [pc, #156]	; (801e2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801e230:	21c0      	movs	r1, #192	; 0xc0
 801e232:	f00f fe75 	bl	802df20 <__assert_func>
 801e236:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e238:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e23c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e240:	f7f6 f87e 	bl	8014340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e244:	4605      	mov	r5, r0
 801e246:	b918      	cbnz	r0, 801e250 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801e248:	6030      	str	r0, [r6, #0]
 801e24a:	4628      	mov	r0, r5
 801e24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e250:	683b      	ldr	r3, [r7, #0]
 801e252:	4601      	mov	r1, r0
 801e254:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e258:	4638      	mov	r0, r7
 801e25a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e25e:	47c8      	blx	r9
 801e260:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e268:	4602      	mov	r2, r0
 801e26a:	6030      	str	r0, [r6, #0]
 801e26c:	d213      	bcs.n	801e296 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801e26e:	4643      	mov	r3, r8
 801e270:	4639      	mov	r1, r7
 801e272:	4620      	mov	r0, r4
 801e274:	f7ff fdd8 	bl	801de28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e278:	6030      	str	r0, [r6, #0]
 801e27a:	6833      	ldr	r3, [r6, #0]
 801e27c:	b143      	cbz	r3, 801e290 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801e27e:	7b5a      	ldrb	r2, [r3, #13]
 801e280:	7a9b      	ldrb	r3, [r3, #10]
 801e282:	0052      	lsls	r2, r2, #1
 801e284:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e288:	4313      	orrs	r3, r2
 801e28a:	bf0c      	ite	eq
 801e28c:	2301      	moveq	r3, #1
 801e28e:	2300      	movne	r3, #0
 801e290:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e294:	e7d9      	b.n	801e24a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801e296:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e29a:	b29b      	uxth	r3, r3
 801e29c:	2b7f      	cmp	r3, #127	; 0x7f
 801e29e:	d804      	bhi.n	801e2aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801e2a0:	4639      	mov	r1, r7
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	f7ff fca6 	bl	801dbf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e2a8:	e7e6      	b.n	801e278 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e2aa:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d0e3      	beq.n	801e27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e2b2:	f640 1302 	movw	r3, #2306	; 0x902
 801e2b6:	429d      	cmp	r5, r3
 801e2b8:	d1df      	bne.n	801e27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e2ba:	4601      	mov	r1, r0
 801e2bc:	4620      	mov	r0, r4
 801e2be:	f7ff fc6a 	bl	801db96 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e2c2:	e7d9      	b.n	801e278 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e2c4:	080320fc 	.word	0x080320fc
 801e2c8:	0803236e 	.word	0x0803236e
 801e2cc:	08032105 	.word	0x08032105

0801e2d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e2d0:	b510      	push	{r4, lr}
 801e2d2:	4604      	mov	r4, r0
 801e2d4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801e2d8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e2da:	b9d9      	cbnz	r1, 801e314 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801e2dc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e2de:	2b0a      	cmp	r3, #10
 801e2e0:	d037      	beq.n	801e352 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e2e2:	4620      	mov	r0, r4
 801e2e4:	f7ff fc16 	bl	801db14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e2e8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e2ea:	2b09      	cmp	r3, #9
 801e2ec:	d906      	bls.n	801e2fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801e2ee:	4b19      	ldr	r3, [pc, #100]	; (801e354 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801e2f0:	4a19      	ldr	r2, [pc, #100]	; (801e358 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801e2f2:	481a      	ldr	r0, [pc, #104]	; (801e35c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801e2f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 801e2f8:	f00f fe12 	bl	802df20 <__assert_func>
 801e2fc:	1c5a      	adds	r2, r3, #1
 801e2fe:	8722      	strh	r2, [r4, #56]	; 0x38
 801e300:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e302:	4413      	add	r3, r2
 801e304:	b29b      	uxth	r3, r3
 801e306:	2b09      	cmp	r3, #9
 801e308:	bf88      	it	hi
 801e30a:	3b0a      	subhi	r3, #10
 801e30c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e310:	8458      	strh	r0, [r3, #34]	; 0x22
 801e312:	e7e3      	b.n	801e2dc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801e314:	2b0a      	cmp	r3, #10
 801e316:	d01c      	beq.n	801e352 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e318:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e31a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e31e:	3901      	subs	r1, #1
 801e320:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801e322:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801e326:	1c51      	adds	r1, r2, #1
 801e328:	b289      	uxth	r1, r1
 801e32a:	2901      	cmp	r1, #1
 801e32c:	bf8a      	itet	hi
 801e32e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e332:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801e334:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801e336:	2b09      	cmp	r3, #9
 801e338:	d8d9      	bhi.n	801e2ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801e33a:	1c5a      	adds	r2, r3, #1
 801e33c:	8722      	strh	r2, [r4, #56]	; 0x38
 801e33e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e340:	4413      	add	r3, r2
 801e342:	b29b      	uxth	r3, r3
 801e344:	2b09      	cmp	r3, #9
 801e346:	bf88      	it	hi
 801e348:	3b0a      	subhi	r3, #10
 801e34a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e34e:	8458      	strh	r0, [r3, #34]	; 0x22
 801e350:	e7c0      	b.n	801e2d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e352:	bd10      	pop	{r4, pc}
 801e354:	08032131 	.word	0x08032131
 801e358:	080324c4 	.word	0x080324c4
 801e35c:	08032105 	.word	0x08032105

0801e360 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e360:	b538      	push	{r3, r4, r5, lr}
 801e362:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801e364:	4604      	mov	r4, r0
 801e366:	b92a      	cbnz	r2, 801e374 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801e368:	4b13      	ldr	r3, [pc, #76]	; (801e3b8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801e36a:	4a14      	ldr	r2, [pc, #80]	; (801e3bc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801e36c:	4814      	ldr	r0, [pc, #80]	; (801e3c0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801e36e:	21d5      	movs	r1, #213	; 0xd5
 801e370:	f00f fdd6 	bl	802df20 <__assert_func>
 801e374:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e376:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801e37a:	3a01      	subs	r2, #1
 801e37c:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801e37e:	8702      	strh	r2, [r0, #56]	; 0x38
 801e380:	1c5a      	adds	r2, r3, #1
 801e382:	b292      	uxth	r2, r2
 801e384:	2a09      	cmp	r2, #9
 801e386:	bf86      	itte	hi
 801e388:	3b09      	subhi	r3, #9
 801e38a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801e38c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801e38e:	f7ff ff9f 	bl	801e2d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e392:	8c23      	ldrh	r3, [r4, #32]
 801e394:	2b01      	cmp	r3, #1
 801e396:	bf9c      	itt	ls
 801e398:	3301      	addls	r3, #1
 801e39a:	8423      	strhls	r3, [r4, #32]
 801e39c:	8be3      	ldrh	r3, [r4, #30]
 801e39e:	b90b      	cbnz	r3, 801e3a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801e3a0:	2302      	movs	r3, #2
 801e3a2:	83e3      	strh	r3, [r4, #30]
 801e3a4:	8be3      	ldrh	r3, [r4, #30]
 801e3a6:	3b01      	subs	r3, #1
 801e3a8:	b29b      	uxth	r3, r3
 801e3aa:	83e3      	strh	r3, [r4, #30]
 801e3ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e3b0:	4628      	mov	r0, r5
 801e3b2:	8365      	strh	r5, [r4, #26]
 801e3b4:	bd38      	pop	{r3, r4, r5, pc}
 801e3b6:	bf00      	nop
 801e3b8:	080320fc 	.word	0x080320fc
 801e3bc:	08032419 	.word	0x08032419
 801e3c0:	08032105 	.word	0x08032105

0801e3c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e3c4:	b538      	push	{r3, r4, r5, lr}
 801e3c6:	428a      	cmp	r2, r1
 801e3c8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801e3ca:	d90c      	bls.n	801e3e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801e3cc:	b92c      	cbnz	r4, 801e3da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801e3ce:	4b1c      	ldr	r3, [pc, #112]	; (801e440 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801e3d0:	4a1c      	ldr	r2, [pc, #112]	; (801e444 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801e3d2:	21e1      	movs	r1, #225	; 0xe1
 801e3d4:	481c      	ldr	r0, [pc, #112]	; (801e448 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801e3d6:	f00f fda3 	bl	802df20 <__assert_func>
 801e3da:	3c01      	subs	r4, #1
 801e3dc:	8704      	strh	r4, [r0, #56]	; 0x38
 801e3de:	4b1b      	ldr	r3, [pc, #108]	; (801e44c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801e3e0:	4a1b      	ldr	r2, [pc, #108]	; (801e450 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801e3e2:	21c5      	movs	r1, #197	; 0xc5
 801e3e4:	e7f6      	b.n	801e3d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e3e6:	428c      	cmp	r4, r1
 801e3e8:	d203      	bcs.n	801e3f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801e3ea:	4b1a      	ldr	r3, [pc, #104]	; (801e454 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801e3ec:	4a1a      	ldr	r2, [pc, #104]	; (801e458 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801e3ee:	21cb      	movs	r1, #203	; 0xcb
 801e3f0:	e7f0      	b.n	801e3d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e3f2:	1a64      	subs	r4, r4, r1
 801e3f4:	8704      	strh	r4, [r0, #56]	; 0x38
 801e3f6:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801e3f8:	4421      	add	r1, r4
 801e3fa:	b289      	uxth	r1, r1
 801e3fc:	2909      	cmp	r1, #9
 801e3fe:	bf88      	it	hi
 801e400:	390a      	subhi	r1, #10
 801e402:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e404:	250a      	movs	r5, #10
 801e406:	b1ba      	cbz	r2, 801e438 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801e408:	3a01      	subs	r2, #1
 801e40a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801e40c:	b292      	uxth	r2, r2
 801e40e:	2909      	cmp	r1, #9
 801e410:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e414:	d903      	bls.n	801e41e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801e416:	4b11      	ldr	r3, [pc, #68]	; (801e45c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801e418:	4a11      	ldr	r2, [pc, #68]	; (801e460 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801e41a:	21e6      	movs	r1, #230	; 0xe6
 801e41c:	e7da      	b.n	801e3d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e41e:	3101      	adds	r1, #1
 801e420:	8701      	strh	r1, [r0, #56]	; 0x38
 801e422:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e424:	b901      	cbnz	r1, 801e428 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801e426:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e428:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e42a:	3901      	subs	r1, #1
 801e42c:	b289      	uxth	r1, r1
 801e42e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e430:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e434:	844c      	strh	r4, [r1, #34]	; 0x22
 801e436:	e7e6      	b.n	801e406 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801e438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e43c:	f7ff bf48 	b.w	801e2d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e440:	080320fc 	.word	0x080320fc
 801e444:	080321f2 	.word	0x080321f2
 801e448:	08032105 	.word	0x08032105
 801e44c:	0803213d 	.word	0x0803213d
 801e450:	0803229c 	.word	0x0803229c
 801e454:	0803214b 	.word	0x0803214b
 801e458:	08032573 	.word	0x08032573
 801e45c:	08032157 	.word	0x08032157
 801e460:	0803216a 	.word	0x0803216a

0801e464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e464:	3a01      	subs	r2, #1
 801e466:	b570      	push	{r4, r5, r6, lr}
 801e468:	b292      	uxth	r2, r2
 801e46a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801e46e:	42b2      	cmp	r2, r6
 801e470:	d019      	beq.n	801e4a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801e472:	8c04      	ldrh	r4, [r0, #32]
 801e474:	f831 5b02 	ldrh.w	r5, [r1], #2
 801e478:	4294      	cmp	r4, r2
 801e47a:	d805      	bhi.n	801e488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801e47c:	4b19      	ldr	r3, [pc, #100]	; (801e4e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e47e:	4a1a      	ldr	r2, [pc, #104]	; (801e4e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801e480:	481a      	ldr	r0, [pc, #104]	; (801e4ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801e482:	21c5      	movs	r1, #197	; 0xc5
 801e484:	f00f fd4c 	bl	802df20 <__assert_func>
 801e488:	8bc4      	ldrh	r4, [r0, #30]
 801e48a:	4414      	add	r4, r2
 801e48c:	b2a4      	uxth	r4, r4
 801e48e:	2c01      	cmp	r4, #1
 801e490:	bf88      	it	hi
 801e492:	3c02      	subhi	r4, #2
 801e494:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e498:	3a01      	subs	r2, #1
 801e49a:	8b64      	ldrh	r4, [r4, #26]
 801e49c:	42ac      	cmp	r4, r5
 801e49e:	b292      	uxth	r2, r2
 801e4a0:	d0e5      	beq.n	801e46e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	bd70      	pop	{r4, r5, r6, pc}
 801e4a6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e4aa:	2400      	movs	r4, #0
 801e4ac:	4413      	add	r3, r2
 801e4ae:	b2a2      	uxth	r2, r4
 801e4b0:	429a      	cmp	r2, r3
 801e4b2:	da14      	bge.n	801e4de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e4b4:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801e4b6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e4ba:	4296      	cmp	r6, r2
 801e4bc:	d802      	bhi.n	801e4c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e4be:	4b09      	ldr	r3, [pc, #36]	; (801e4e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e4c0:	4a0b      	ldr	r2, [pc, #44]	; (801e4f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e4c2:	e7dd      	b.n	801e480 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e4c4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e4c6:	4432      	add	r2, r6
 801e4c8:	b292      	uxth	r2, r2
 801e4ca:	2a09      	cmp	r2, #9
 801e4cc:	bf88      	it	hi
 801e4ce:	3a0a      	subhi	r2, #10
 801e4d0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e4d4:	3401      	adds	r4, #1
 801e4d6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e4d8:	42aa      	cmp	r2, r5
 801e4da:	d0e8      	beq.n	801e4ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e4dc:	e7e1      	b.n	801e4a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e4de:	2001      	movs	r0, #1
 801e4e0:	e7e0      	b.n	801e4a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e4e2:	bf00      	nop
 801e4e4:	0803213d 	.word	0x0803213d
 801e4e8:	080325f7 	.word	0x080325f7
 801e4ec:	08032105 	.word	0x08032105
 801e4f0:	0803229c 	.word	0x0803229c

0801e4f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4f8:	4605      	mov	r5, r0
 801e4fa:	4616      	mov	r6, r2
 801e4fc:	1c8c      	adds	r4, r1, #2
 801e4fe:	8809      	ldrh	r1, [r1, #0]
 801e500:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e504:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e508:	42b3      	cmp	r3, r6
 801e50a:	d124      	bne.n	801e556 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e50c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e510:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e514:	f001 070f 	and.w	r7, r1, #15
 801e518:	f8cd 8000 	str.w	r8, [sp]
 801e51c:	464b      	mov	r3, r9
 801e51e:	4652      	mov	r2, sl
 801e520:	4621      	mov	r1, r4
 801e522:	4628      	mov	r0, r5
 801e524:	f7ff ff9e 	bl	801e464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e528:	4683      	mov	fp, r0
 801e52a:	b168      	cbz	r0, 801e548 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e52c:	eb0a 0109 	add.w	r1, sl, r9
 801e530:	4441      	add	r1, r8
 801e532:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e536:	463a      	mov	r2, r7
 801e538:	4649      	mov	r1, r9
 801e53a:	4628      	mov	r0, r5
 801e53c:	f7ff ff42 	bl	801e3c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e540:	4658      	mov	r0, fp
 801e542:	b003      	add	sp, #12
 801e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e548:	eb07 010a 	add.w	r1, r7, sl
 801e54c:	4449      	add	r1, r9
 801e54e:	4441      	add	r1, r8
 801e550:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e554:	e7d2      	b.n	801e4fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e556:	f04f 0b00 	mov.w	fp, #0
 801e55a:	e7f1      	b.n	801e540 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e55c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e55c:	b570      	push	{r4, r5, r6, lr}
 801e55e:	8810      	ldrh	r0, [r2, #0]
 801e560:	4298      	cmp	r0, r3
 801e562:	d817      	bhi.n	801e594 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e564:	1e48      	subs	r0, r1, #1
 801e566:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e56a:	4298      	cmp	r0, r3
 801e56c:	d312      	bcc.n	801e594 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e56e:	2400      	movs	r4, #0
 801e570:	428c      	cmp	r4, r1
 801e572:	d20f      	bcs.n	801e594 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e574:	1860      	adds	r0, r4, r1
 801e576:	1040      	asrs	r0, r0, #1
 801e578:	0085      	lsls	r5, r0, #2
 801e57a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e57e:	42b3      	cmp	r3, r6
 801e580:	d902      	bls.n	801e588 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e582:	3001      	adds	r0, #1
 801e584:	b284      	uxth	r4, r0
 801e586:	e7f3      	b.n	801e570 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e588:	d201      	bcs.n	801e58e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e58a:	b281      	uxth	r1, r0
 801e58c:	e7f0      	b.n	801e570 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e58e:	442a      	add	r2, r5
 801e590:	8850      	ldrh	r0, [r2, #2]
 801e592:	bd70      	pop	{r4, r5, r6, pc}
 801e594:	2000      	movs	r0, #0
 801e596:	e7fc      	b.n	801e592 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e598 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e59c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e59e:	886f      	ldrh	r7, [r5, #2]
 801e5a0:	4604      	mov	r4, r0
 801e5a2:	087f      	lsrs	r7, r7, #1
 801e5a4:	260b      	movs	r6, #11
 801e5a6:	3e01      	subs	r6, #1
 801e5a8:	d01b      	beq.n	801e5e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e5aa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e5ac:	b92b      	cbnz	r3, 801e5ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e5ae:	4b0e      	ldr	r3, [pc, #56]	; (801e5e8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e5b0:	4a0e      	ldr	r2, [pc, #56]	; (801e5ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e5b2:	480f      	ldr	r0, [pc, #60]	; (801e5f0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e5b4:	21c0      	movs	r1, #192	; 0xc0
 801e5b6:	f00f fcb3 	bl	802df20 <__assert_func>
 801e5ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e5bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e5c0:	462a      	mov	r2, r5
 801e5c2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e5c6:	4639      	mov	r1, r7
 801e5c8:	4643      	mov	r3, r8
 801e5ca:	4620      	mov	r0, r4
 801e5cc:	f7ff ffc6 	bl	801e55c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e5d0:	b138      	cbz	r0, 801e5e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e5d2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e5d6:	4642      	mov	r2, r8
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f7ff ff8b 	bl	801e4f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e5de:	2800      	cmp	r0, #0
 801e5e0:	d1e1      	bne.n	801e5a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5e6:	bf00      	nop
 801e5e8:	080320fc 	.word	0x080320fc
 801e5ec:	0803236e 	.word	0x0803236e
 801e5f0:	08032105 	.word	0x08032105

0801e5f4 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5f6:	b08d      	sub	sp, #52	; 0x34
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	9304      	str	r3, [sp, #16]
 801e5fc:	9305      	str	r3, [sp, #20]
 801e5fe:	9306      	str	r3, [sp, #24]
 801e600:	aa04      	add	r2, sp, #16
 801e602:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e606:	9307      	str	r3, [sp, #28]
 801e608:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801e60c:	4613      	mov	r3, r2
 801e60e:	f101 0710 	add.w	r7, r1, #16
 801e612:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e650 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801e616:	460c      	mov	r4, r1
 801e618:	4605      	mov	r5, r0
 801e61a:	ecb4 7a01 	vldmia	r4!, {s14}
 801e61e:	ecf5 6a01 	vldmia	r5!, {s13}
 801e622:	42bc      	cmp	r4, r7
 801e624:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e628:	d1f7      	bne.n	801e61a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801e62a:	3010      	adds	r0, #16
 801e62c:	42b0      	cmp	r0, r6
 801e62e:	ece2 7a01 	vstmia	r2!, {s15}
 801e632:	d1ee      	bne.n	801e612 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801e634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e636:	ac0c      	add	r4, sp, #48	; 0x30
 801e638:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e63c:	ed9d 0a08 	vldr	s0, [sp, #32]
 801e640:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801e644:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801e648:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801e64c:	b00d      	add	sp, #52	; 0x34
 801e64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e650:	00000000 	.word	0x00000000

0801e654 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801e654:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801e684 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801e658:	2300      	movs	r3, #0
 801e65a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e65e:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801e662:	2200      	movs	r2, #0
 801e664:	4293      	cmp	r3, r2
 801e666:	f102 0201 	add.w	r2, r2, #1
 801e66a:	bf14      	ite	ne
 801e66c:	eef0 6a47 	vmovne.f32	s13, s14
 801e670:	eef0 6a67 	vmoveq.f32	s13, s15
 801e674:	2a04      	cmp	r2, #4
 801e676:	ece1 6a01 	vstmia	r1!, {s13}
 801e67a:	d1f3      	bne.n	801e664 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801e67c:	3301      	adds	r3, #1
 801e67e:	2b04      	cmp	r3, #4
 801e680:	d1ed      	bne.n	801e65e <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801e682:	4770      	bx	lr
 801e684:	00000000 	.word	0x00000000

0801e688 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801e688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e68c:	460c      	mov	r4, r1
 801e68e:	4605      	mov	r5, r0
 801e690:	4690      	mov	r8, r2
 801e692:	f7ff ffdf 	bl	801e654 <_ZN8touchgfx9Matrix4x4C1Ev>
 801e696:	4628      	mov	r0, r5
 801e698:	4621      	mov	r1, r4
 801e69a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801e69e:	2300      	movs	r3, #0
 801e6a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e6e0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801e6a4:	eb08 0603 	add.w	r6, r8, r3
 801e6a8:	460f      	mov	r7, r1
 801e6aa:	2400      	movs	r4, #0
 801e6ac:	4632      	mov	r2, r6
 801e6ae:	ecf7 6a01 	vldmia	r7!, {s13}
 801e6b2:	ed92 7a00 	vldr	s14, [r2]
 801e6b6:	3401      	adds	r4, #1
 801e6b8:	2c04      	cmp	r4, #4
 801e6ba:	f106 0610 	add.w	r6, r6, #16
 801e6be:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e6c2:	d1f3      	bne.n	801e6ac <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801e6c4:	18c2      	adds	r2, r0, r3
 801e6c6:	3304      	adds	r3, #4
 801e6c8:	2b10      	cmp	r3, #16
 801e6ca:	edc2 7a00 	vstr	s15, [r2]
 801e6ce:	d1e7      	bne.n	801e6a0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801e6d0:	3110      	adds	r1, #16
 801e6d2:	4561      	cmp	r1, ip
 801e6d4:	f100 0010 	add.w	r0, r0, #16
 801e6d8:	d1e1      	bne.n	801e69e <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801e6da:	4628      	mov	r0, r5
 801e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6e0:	00000000 	.word	0x00000000

0801e6e4 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801e6e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e6e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801e6ec:	f100 0320 	add.w	r3, r0, #32
 801e6f0:	3030      	adds	r0, #48	; 0x30
 801e6f2:	ecf3 7a01 	vldmia	r3!, {s15}
 801e6f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e6fa:	4283      	cmp	r3, r0
 801e6fc:	edc3 7a03 	vstr	s15, [r3, #12]
 801e700:	d1f7      	bne.n	801e6f2 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801e702:	4770      	bx	lr

0801e704 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801e704:	b510      	push	{r4, lr}
 801e706:	ed2d 8b02 	vpush	{d8}
 801e70a:	4604      	mov	r4, r0
 801e70c:	eef0 8a40 	vmov.f32	s17, s0
 801e710:	f00e fed4 	bl	802d4bc <sinf>
 801e714:	eeb0 8a40 	vmov.f32	s16, s0
 801e718:	eeb0 0a68 	vmov.f32	s0, s17
 801e71c:	f00e fe4c 	bl	802d3b8 <cosf>
 801e720:	f104 0310 	add.w	r3, r4, #16
 801e724:	f104 0220 	add.w	r2, r4, #32
 801e728:	eeb1 6a48 	vneg.f32	s12, s16
 801e72c:	edd3 7a04 	vldr	s15, [r3, #16]
 801e730:	edd3 6a00 	vldr	s13, [r3]
 801e734:	ee26 7a27 	vmul.f32	s14, s12, s15
 801e738:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e73c:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e740:	eee6 7a88 	vfma.f32	s15, s13, s16
 801e744:	eca3 7a01 	vstmia	r3!, {s14}
 801e748:	429a      	cmp	r2, r3
 801e74a:	edc3 7a03 	vstr	s15, [r3, #12]
 801e74e:	d1ed      	bne.n	801e72c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801e750:	ecbd 8b02 	vpop	{d8}
 801e754:	4620      	mov	r0, r4
 801e756:	bd10      	pop	{r4, pc}

0801e758 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801e758:	b510      	push	{r4, lr}
 801e75a:	ed2d 8b02 	vpush	{d8}
 801e75e:	4604      	mov	r4, r0
 801e760:	eef0 8a40 	vmov.f32	s17, s0
 801e764:	f00e feaa 	bl	802d4bc <sinf>
 801e768:	eeb0 8a40 	vmov.f32	s16, s0
 801e76c:	eeb0 0a68 	vmov.f32	s0, s17
 801e770:	f00e fe22 	bl	802d3b8 <cosf>
 801e774:	4623      	mov	r3, r4
 801e776:	f104 0210 	add.w	r2, r4, #16
 801e77a:	eeb1 6a48 	vneg.f32	s12, s16
 801e77e:	edd3 7a08 	vldr	s15, [r3, #32]
 801e782:	edd3 6a00 	vldr	s13, [r3]
 801e786:	ee27 7a88 	vmul.f32	s14, s15, s16
 801e78a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e78e:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e792:	eee6 7a26 	vfma.f32	s15, s12, s13
 801e796:	eca3 7a01 	vstmia	r3!, {s14}
 801e79a:	429a      	cmp	r2, r3
 801e79c:	edc3 7a07 	vstr	s15, [r3, #28]
 801e7a0:	d1ed      	bne.n	801e77e <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801e7a2:	ecbd 8b02 	vpop	{d8}
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	bd10      	pop	{r4, pc}

0801e7aa <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801e7aa:	b510      	push	{r4, lr}
 801e7ac:	ed2d 8b02 	vpush	{d8}
 801e7b0:	4604      	mov	r4, r0
 801e7b2:	eef0 8a40 	vmov.f32	s17, s0
 801e7b6:	f00e fe81 	bl	802d4bc <sinf>
 801e7ba:	eeb0 8a40 	vmov.f32	s16, s0
 801e7be:	eeb0 0a68 	vmov.f32	s0, s17
 801e7c2:	f00e fdf9 	bl	802d3b8 <cosf>
 801e7c6:	4623      	mov	r3, r4
 801e7c8:	f104 0210 	add.w	r2, r4, #16
 801e7cc:	eeb1 6a48 	vneg.f32	s12, s16
 801e7d0:	edd3 7a04 	vldr	s15, [r3, #16]
 801e7d4:	edd3 6a00 	vldr	s13, [r3]
 801e7d8:	ee26 7a27 	vmul.f32	s14, s12, s15
 801e7dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e7e0:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e7e4:	eee6 7a88 	vfma.f32	s15, s13, s16
 801e7e8:	eca3 7a01 	vstmia	r3!, {s14}
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	edc3 7a03 	vstr	s15, [r3, #12]
 801e7f2:	d1ed      	bne.n	801e7d0 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801e7f4:	ecbd 8b02 	vpop	{d8}
 801e7f8:	4620      	mov	r0, r4
 801e7fa:	bd10      	pop	{r4, pc}

0801e7fc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801e7fc:	4603      	mov	r3, r0
 801e7fe:	f100 0210 	add.w	r2, r0, #16
 801e802:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801e806:	edd3 7a00 	vldr	s15, [r3]
 801e80a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e80e:	ece3 7a01 	vstmia	r3!, {s15}
 801e812:	4293      	cmp	r3, r2
 801e814:	d1f5      	bne.n	801e802 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801e816:	4770      	bx	lr

0801e818 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801e818:	f100 0310 	add.w	r3, r0, #16
 801e81c:	f100 0220 	add.w	r2, r0, #32
 801e820:	ed93 7a08 	vldr	s14, [r3, #32]
 801e824:	edd3 7a00 	vldr	s15, [r3]
 801e828:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e82c:	ece3 7a01 	vstmia	r3!, {s15}
 801e830:	4293      	cmp	r3, r2
 801e832:	d1f5      	bne.n	801e820 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801e834:	4770      	bx	lr

0801e836 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801e836:	f100 0320 	add.w	r3, r0, #32
 801e83a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801e83e:	ed93 7a04 	vldr	s14, [r3, #16]
 801e842:	edd3 7a00 	vldr	s15, [r3]
 801e846:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e84a:	ece3 7a01 	vstmia	r3!, {s15}
 801e84e:	4293      	cmp	r3, r2
 801e850:	d1f5      	bne.n	801e83e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801e852:	4770      	bx	lr

0801e854 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801e854:	4603      	mov	r3, r0
 801e856:	f100 0210 	add.w	r2, r0, #16
 801e85a:	edd3 7a00 	vldr	s15, [r3]
 801e85e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e862:	ece3 7a01 	vstmia	r3!, {s15}
 801e866:	4293      	cmp	r3, r2
 801e868:	d1f7      	bne.n	801e85a <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801e86a:	4770      	bx	lr

0801e86c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801e86c:	f100 0310 	add.w	r3, r0, #16
 801e870:	f100 0220 	add.w	r2, r0, #32
 801e874:	edd3 7a00 	vldr	s15, [r3]
 801e878:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e87c:	ece3 7a01 	vstmia	r3!, {s15}
 801e880:	4293      	cmp	r3, r2
 801e882:	d1f7      	bne.n	801e874 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801e884:	4770      	bx	lr

0801e886 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801e886:	f100 0320 	add.w	r3, r0, #32
 801e88a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801e88e:	edd3 7a00 	vldr	s15, [r3]
 801e892:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e896:	ece3 7a01 	vstmia	r3!, {s15}
 801e89a:	4293      	cmp	r3, r2
 801e89c:	d1f7      	bne.n	801e88e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801e89e:	4770      	bx	lr

0801e8a0 <_ZN8touchgfx8ceil28_4El>:
 801e8a0:	f110 030f 	adds.w	r3, r0, #15
 801e8a4:	d401      	bmi.n	801e8aa <_ZN8touchgfx8ceil28_4El+0xa>
 801e8a6:	1118      	asrs	r0, r3, #4
 801e8a8:	4770      	bx	lr
 801e8aa:	f1c0 0001 	rsb	r0, r0, #1
 801e8ae:	f010 000f 	ands.w	r0, r0, #15
 801e8b2:	bf18      	it	ne
 801e8b4:	2001      	movne	r0, #1
 801e8b6:	2210      	movs	r2, #16
 801e8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 801e8bc:	1a18      	subs	r0, r3, r0
 801e8be:	4770      	bx	lr

0801e8c0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801e8c0:	2900      	cmp	r1, #0
 801e8c2:	b538      	push	{r3, r4, r5, lr}
 801e8c4:	dc05      	bgt.n	801e8d2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801e8c6:	4b0f      	ldr	r3, [pc, #60]	; (801e904 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801e8c8:	4a0f      	ldr	r2, [pc, #60]	; (801e908 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801e8ca:	4810      	ldr	r0, [pc, #64]	; (801e90c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801e8cc:	21f7      	movs	r1, #247	; 0xf7
 801e8ce:	f00f fb27 	bl	802df20 <__assert_func>
 801e8d2:	2800      	cmp	r0, #0
 801e8d4:	db06      	blt.n	801e8e4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801e8d6:	fb90 f4f1 	sdiv	r4, r0, r1
 801e8da:	6014      	str	r4, [r2, #0]
 801e8dc:	fb01 0114 	mls	r1, r1, r4, r0
 801e8e0:	6019      	str	r1, [r3, #0]
 801e8e2:	bd38      	pop	{r3, r4, r5, pc}
 801e8e4:	4240      	negs	r0, r0
 801e8e6:	fb90 f4f1 	sdiv	r4, r0, r1
 801e8ea:	4265      	negs	r5, r4
 801e8ec:	fb01 0014 	mls	r0, r1, r4, r0
 801e8f0:	6015      	str	r5, [r2, #0]
 801e8f2:	6018      	str	r0, [r3, #0]
 801e8f4:	2800      	cmp	r0, #0
 801e8f6:	d0f4      	beq.n	801e8e2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801e8f8:	6810      	ldr	r0, [r2, #0]
 801e8fa:	3801      	subs	r0, #1
 801e8fc:	6010      	str	r0, [r2, #0]
 801e8fe:	6818      	ldr	r0, [r3, #0]
 801e900:	1a09      	subs	r1, r1, r0
 801e902:	e7ed      	b.n	801e8e0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801e904:	080326c8 	.word	0x080326c8
 801e908:	08032707 	.word	0x08032707
 801e90c:	080326d8 	.word	0x080326d8

0801e910 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e910:	b570      	push	{r4, r5, r6, lr}
 801e912:	694a      	ldr	r2, [r1, #20]
 801e914:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e916:	684b      	ldr	r3, [r1, #4]
 801e918:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e91a:	1b54      	subs	r4, r2, r5
 801e91c:	f000 8106 	beq.w	801eb2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e920:	1b9b      	subs	r3, r3, r6
 801e922:	d003      	beq.n	801e92c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e924:	4363      	muls	r3, r4
 801e926:	2210      	movs	r2, #16
 801e928:	fb93 f3f2 	sdiv	r3, r3, r2
 801e92c:	680c      	ldr	r4, [r1, #0]
 801e92e:	698a      	ldr	r2, [r1, #24]
 801e930:	1b65      	subs	r5, r4, r5
 801e932:	f000 80fd 	beq.w	801eb30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e936:	1b92      	subs	r2, r2, r6
 801e938:	d003      	beq.n	801e942 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e93a:	436a      	muls	r2, r5
 801e93c:	2410      	movs	r4, #16
 801e93e:	fb92 f2f4 	sdiv	r2, r2, r4
 801e942:	1a9b      	subs	r3, r3, r2
 801e944:	ee07 3a90 	vmov	s15, r3
 801e948:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801eb6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e954:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e958:	460a      	mov	r2, r1
 801e95a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e95e:	4603      	mov	r3, r0
 801e960:	f100 040c 	add.w	r4, r0, #12
 801e964:	eeb1 6a43 	vneg.f32	s12, s6
 801e968:	edd2 7a02 	vldr	s15, [r2, #8]
 801e96c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e970:	3214      	adds	r2, #20
 801e972:	ece3 6a01 	vstmia	r3!, {s13}
 801e976:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e97a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e97e:	429c      	cmp	r4, r3
 801e980:	edc3 7a02 	vstr	s15, [r3, #8]
 801e984:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e98c:	edc3 7a05 	vstr	s15, [r3, #20]
 801e990:	d1ea      	bne.n	801e968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e992:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e994:	698b      	ldr	r3, [r1, #24]
 801e996:	edd0 4a02 	vldr	s9, [r0, #8]
 801e99a:	edd0 3a00 	vldr	s7, [r0]
 801e99e:	edd0 6a01 	vldr	s13, [r0, #4]
 801e9a2:	ed90 5a05 	vldr	s10, [r0, #20]
 801e9a6:	ed90 2a03 	vldr	s4, [r0, #12]
 801e9aa:	edd0 5a04 	vldr	s11, [r0, #16]
 801e9ae:	ed90 1a07 	vldr	s2, [r0, #28]
 801e9b2:	edd0 2a06 	vldr	s5, [r0, #24]
 801e9b6:	1a9b      	subs	r3, r3, r2
 801e9b8:	ee07 3a90 	vmov	s15, r3
 801e9bc:	684b      	ldr	r3, [r1, #4]
 801e9be:	1a9b      	subs	r3, r3, r2
 801e9c0:	ee07 3a10 	vmov	s14, r3
 801e9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e9c8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e9cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e9d0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e9d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e9d8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e9dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e9e0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e9e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e9e8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e9ec:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e9f0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e9f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e9f6:	694a      	ldr	r2, [r1, #20]
 801e9f8:	1b13      	subs	r3, r2, r4
 801e9fa:	ee07 3a10 	vmov	s14, r3
 801e9fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea02:	680b      	ldr	r3, [r1, #0]
 801ea04:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea08:	1b1b      	subs	r3, r3, r4
 801ea0a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ea0e:	ee07 3a10 	vmov	s14, r3
 801ea12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea16:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea1a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ea1e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ea22:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ea26:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ea28:	698b      	ldr	r3, [r1, #24]
 801ea2a:	1a9b      	subs	r3, r3, r2
 801ea2c:	ee06 3a90 	vmov	s13, r3
 801ea30:	684b      	ldr	r3, [r1, #4]
 801ea32:	1a9b      	subs	r3, r3, r2
 801ea34:	ee07 3a10 	vmov	s14, r3
 801ea38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ea3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea40:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ea44:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea48:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ea4c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ea50:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ea54:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801ea58:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ea5a:	694a      	ldr	r2, [r1, #20]
 801ea5c:	1b13      	subs	r3, r2, r4
 801ea5e:	ee07 3a10 	vmov	s14, r3
 801ea62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea66:	680b      	ldr	r3, [r1, #0]
 801ea68:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea6c:	1b1b      	subs	r3, r3, r4
 801ea6e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ea72:	ee07 3a10 	vmov	s14, r3
 801ea76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea7e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ea82:	edd0 5a08 	vldr	s11, [r0, #32]
 801ea86:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ea8a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ea8e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801ea92:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ea94:	698b      	ldr	r3, [r1, #24]
 801ea96:	1a9b      	subs	r3, r3, r2
 801ea98:	ee07 3a10 	vmov	s14, r3
 801ea9c:	684b      	ldr	r3, [r1, #4]
 801ea9e:	1a9b      	subs	r3, r3, r2
 801eaa0:	ee01 3a90 	vmov	s3, r3
 801eaa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eaa8:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801eaac:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eab0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801eab4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801eab8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801eabc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801eac0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801eac4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801eac8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801eaca:	694a      	ldr	r2, [r1, #20]
 801eacc:	1b13      	subs	r3, r2, r4
 801eace:	ee03 3a10 	vmov	s6, r3
 801ead2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ead6:	680b      	ldr	r3, [r1, #0]
 801ead8:	ee23 3a04 	vmul.f32	s6, s6, s8
 801eadc:	1b1b      	subs	r3, r3, r4
 801eade:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801eae2:	ee03 3a10 	vmov	s6, r3
 801eae6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801eaea:	ee23 4a04 	vmul.f32	s8, s6, s8
 801eaee:	eee1 5a04 	vfma.f32	s11, s2, s8
 801eaf2:	ee25 6a86 	vmul.f32	s12, s11, s12
 801eaf6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801eafa:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801eafe:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801eb02:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801eb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb0a:	dd13      	ble.n	801eb34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801eb0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eb10:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801eb14:	63c3      	str	r3, [r0, #60]	; 0x3c
 801eb16:	eee3 7a87 	vfma.f32	s15, s7, s14
 801eb1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb22:	dd15      	ble.n	801eb50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801eb24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eb28:	6403      	str	r3, [r0, #64]	; 0x40
 801eb2a:	bd70      	pop	{r4, r5, r6, pc}
 801eb2c:	4623      	mov	r3, r4
 801eb2e:	e6fd      	b.n	801e92c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801eb30:	462a      	mov	r2, r5
 801eb32:	e706      	b.n	801e942 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801eb34:	d502      	bpl.n	801eb3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801eb36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801eb3a:	e7e9      	b.n	801eb10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801eb3c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801eb40:	eea3 2a85 	vfma.f32	s4, s7, s10
 801eb44:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801eb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb4c:	dade      	bge.n	801eb0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801eb4e:	e7f2      	b.n	801eb36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801eb50:	d502      	bpl.n	801eb58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801eb52:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801eb56:	e7e7      	b.n	801eb28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801eb58:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801eb5c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801eb60:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801eb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb68:	dadc      	bge.n	801eb24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801eb6a:	e7f2      	b.n	801eb52 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801eb6c:	3d800000 	.word	0x3d800000

0801eb70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801eb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb74:	f04f 0814 	mov.w	r8, #20
 801eb78:	fb08 f903 	mul.w	r9, r8, r3
 801eb7c:	eb02 0a09 	add.w	sl, r2, r9
 801eb80:	4604      	mov	r4, r0
 801eb82:	f8da 0004 	ldr.w	r0, [sl, #4]
 801eb86:	4617      	mov	r7, r2
 801eb88:	460d      	mov	r5, r1
 801eb8a:	461e      	mov	r6, r3
 801eb8c:	f7ff fe88 	bl	801e8a0 <_ZN8touchgfx8ceil28_4El>
 801eb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb92:	6160      	str	r0, [r4, #20]
 801eb94:	fb08 f803 	mul.w	r8, r8, r3
 801eb98:	eb07 0b08 	add.w	fp, r7, r8
 801eb9c:	9001      	str	r0, [sp, #4]
 801eb9e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801eba2:	f7ff fe7d 	bl	801e8a0 <_ZN8touchgfx8ceil28_4El>
 801eba6:	9a01      	ldr	r2, [sp, #4]
 801eba8:	1a80      	subs	r0, r0, r2
 801ebaa:	61a0      	str	r0, [r4, #24]
 801ebac:	2800      	cmp	r0, #0
 801ebae:	f000 8088 	beq.w	801ecc2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801ebb2:	f857 3009 	ldr.w	r3, [r7, r9]
 801ebb6:	f857 c008 	ldr.w	ip, [r7, r8]
 801ebba:	f8da 1004 	ldr.w	r1, [sl, #4]
 801ebbe:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ebc2:	ebac 0c03 	sub.w	ip, ip, r3
 801ebc6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801ebca:	fb0b f202 	mul.w	r2, fp, r2
 801ebce:	fb0c 2211 	mls	r2, ip, r1, r2
 801ebd2:	1a40      	subs	r0, r0, r1
 801ebd4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801ebd8:	fb00 2003 	mla	r0, r0, r3, r2
 801ebdc:	3801      	subs	r0, #1
 801ebde:	f104 0310 	add.w	r3, r4, #16
 801ebe2:	4622      	mov	r2, r4
 801ebe4:	4641      	mov	r1, r8
 801ebe6:	4440      	add	r0, r8
 801ebe8:	f7ff fe6a 	bl	801e8c0 <_ZN8touchgfx11floorDivModEllRlS0_>
 801ebec:	f104 0308 	add.w	r3, r4, #8
 801ebf0:	1d22      	adds	r2, r4, #4
 801ebf2:	4641      	mov	r1, r8
 801ebf4:	4658      	mov	r0, fp
 801ebf6:	f7ff fe63 	bl	801e8c0 <_ZN8touchgfx11floorDivModEllRlS0_>
 801ebfa:	f8c4 800c 	str.w	r8, [r4, #12]
 801ebfe:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ec02:	6962      	ldr	r2, [r4, #20]
 801ec04:	eddf 6a31 	vldr	s13, [pc, #196]	; 801eccc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801ec08:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ec0c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ec10:	ee07 3a10 	vmov	s14, r3
 801ec14:	6822      	ldr	r2, [r4, #0]
 801ec16:	f857 3009 	ldr.w	r3, [r7, r9]
 801ec1a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ec1e:	ee07 3a90 	vmov	s15, r3
 801ec22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ec26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec2a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801ec2e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ec32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ec36:	edd3 6a00 	vldr	s13, [r3]
 801ec3a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ec3e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ec42:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ec46:	edc4 6a07 	vstr	s13, [r4, #28]
 801ec4a:	edd4 6a01 	vldr	s13, [r4, #4]
 801ec4e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801ec52:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ec56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ec5a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ec5e:	ed84 6a08 	vstr	s12, [r4, #32]
 801ec62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ec64:	6262      	str	r2, [r4, #36]	; 0x24
 801ec66:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801ec6a:	ed93 6a03 	vldr	s12, [r3, #12]
 801ec6e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ec72:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ec76:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ec7a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801ec7e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ec82:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801ec86:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ec8a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801ec8e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ec90:	6322      	str	r2, [r4, #48]	; 0x30
 801ec92:	ed93 6a06 	vldr	s12, [r3, #24]
 801ec96:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801ec9a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ec9e:	eeb0 7a46 	vmov.f32	s14, s12
 801eca2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801eca6:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ecaa:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801ecae:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801ecb2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801ecb6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ecba:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801ecbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801ecc0:	63e3      	str	r3, [r4, #60]	; 0x3c
 801ecc2:	4620      	mov	r0, r4
 801ecc4:	b003      	add	sp, #12
 801ecc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecca:	bf00      	nop
 801eccc:	3d800000 	.word	0x3d800000

0801ecd0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801ecd0:	4602      	mov	r2, r0
 801ecd2:	b148      	cbz	r0, 801ece8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	b298      	uxth	r0, r3
 801ecd8:	3301      	adds	r3, #1
 801ecda:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ecde:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801ece2:	2900      	cmp	r1, #0
 801ece4:	d1f7      	bne.n	801ecd6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801ece6:	4770      	bx	lr
 801ece8:	4770      	bx	lr

0801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801ecea:	b530      	push	{r4, r5, lr}
 801ecec:	4604      	mov	r4, r0
 801ecee:	b159      	cbz	r1, 801ed08 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801ecf0:	b148      	cbz	r0, 801ed06 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	b298      	uxth	r0, r3
 801ecf6:	4282      	cmp	r2, r0
 801ecf8:	d905      	bls.n	801ed06 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ecfa:	5ccd      	ldrb	r5, [r1, r3]
 801ecfc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801ed00:	3301      	adds	r3, #1
 801ed02:	2d00      	cmp	r5, #0
 801ed04:	d1f6      	bne.n	801ecf4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801ed06:	bd30      	pop	{r4, r5, pc}
 801ed08:	4608      	mov	r0, r1
 801ed0a:	e7fc      	b.n	801ed06 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801ed0c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801ed0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed0e:	b08b      	sub	sp, #44	; 0x2c
 801ed10:	468c      	mov	ip, r1
 801ed12:	2100      	movs	r1, #0
 801ed14:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ed18:	ae01      	add	r6, sp, #4
 801ed1a:	211f      	movs	r1, #31
 801ed1c:	fbb0 f7f3 	udiv	r7, r0, r3
 801ed20:	fb03 0517 	mls	r5, r3, r7, r0
 801ed24:	b2ec      	uxtb	r4, r5
 801ed26:	2d09      	cmp	r5, #9
 801ed28:	bfd4      	ite	le
 801ed2a:	3430      	addle	r4, #48	; 0x30
 801ed2c:	3457      	addgt	r4, #87	; 0x57
 801ed2e:	b2e4      	uxtb	r4, r4
 801ed30:	558c      	strb	r4, [r1, r6]
 801ed32:	4638      	mov	r0, r7
 801ed34:	1e4c      	subs	r4, r1, #1
 801ed36:	b92f      	cbnz	r7, 801ed44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801ed38:	4431      	add	r1, r6
 801ed3a:	4660      	mov	r0, ip
 801ed3c:	f7ff ffd5 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ed40:	b00b      	add	sp, #44	; 0x2c
 801ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed44:	4621      	mov	r1, r4
 801ed46:	e7e9      	b.n	801ed1c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801ed48 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801ed48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed4a:	4607      	mov	r7, r0
 801ed4c:	b08b      	sub	sp, #44	; 0x2c
 801ed4e:	4608      	mov	r0, r1
 801ed50:	b341      	cbz	r1, 801eda4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ed52:	1e99      	subs	r1, r3, #2
 801ed54:	2922      	cmp	r1, #34	; 0x22
 801ed56:	d825      	bhi.n	801eda4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ed58:	2100      	movs	r1, #0
 801ed5a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ed5e:	463c      	mov	r4, r7
 801ed60:	261f      	movs	r6, #31
 801ed62:	f10d 0c04 	add.w	ip, sp, #4
 801ed66:	fb94 fef3 	sdiv	lr, r4, r3
 801ed6a:	fb03 441e 	mls	r4, r3, lr, r4
 801ed6e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801ed72:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801ed76:	b2ec      	uxtb	r4, r5
 801ed78:	2d09      	cmp	r5, #9
 801ed7a:	bfd4      	ite	le
 801ed7c:	3430      	addle	r4, #48	; 0x30
 801ed7e:	3457      	addgt	r4, #87	; 0x57
 801ed80:	b2e4      	uxtb	r4, r4
 801ed82:	f80c 4006 	strb.w	r4, [ip, r6]
 801ed86:	4674      	mov	r4, lr
 801ed88:	1e71      	subs	r1, r6, #1
 801ed8a:	b96c      	cbnz	r4, 801eda8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801ed8c:	2f00      	cmp	r7, #0
 801ed8e:	da05      	bge.n	801ed9c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801ed90:	ab0a      	add	r3, sp, #40	; 0x28
 801ed92:	4419      	add	r1, r3
 801ed94:	232d      	movs	r3, #45	; 0x2d
 801ed96:	f801 3c24 	strb.w	r3, [r1, #-36]
 801ed9a:	1eb1      	subs	r1, r6, #2
 801ed9c:	3101      	adds	r1, #1
 801ed9e:	4461      	add	r1, ip
 801eda0:	f7ff ffa3 	bl	801ecea <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801eda4:	b00b      	add	sp, #44	; 0x2c
 801eda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eda8:	460e      	mov	r6, r1
 801edaa:	e7dc      	b.n	801ed66 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801edac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edb0:	4691      	mov	r9, r2
 801edb2:	b085      	sub	sp, #20
 801edb4:	6802      	ldr	r2, [r0, #0]
 801edb6:	9201      	str	r2, [sp, #4]
 801edb8:	4688      	mov	r8, r1
 801edba:	4683      	mov	fp, r0
 801edbc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801edc0:	9103      	str	r1, [sp, #12]
 801edc2:	4610      	mov	r0, r2
 801edc4:	461c      	mov	r4, r3
 801edc6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801edca:	9302      	str	r3, [sp, #8]
 801edcc:	f7ff ff80 	bl	801ecd0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801edd0:	f1b8 0f00 	cmp.w	r8, #0
 801edd4:	bf0c      	ite	eq
 801edd6:	4684      	moveq	ip, r0
 801edd8:	f100 0c01 	addne.w	ip, r0, #1
 801eddc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801ede0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801ede4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ede6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ede8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801edec:	9903      	ldr	r1, [sp, #12]
 801edee:	fa1f fc8c 	uxth.w	ip, ip
 801edf2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801edf6:	d041      	beq.n	801ee7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801edf8:	d834      	bhi.n	801ee64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801edfa:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801edfe:	d059      	beq.n	801eeb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801ee00:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801ee04:	d03a      	beq.n	801ee7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ee06:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801ee0a:	d034      	beq.n	801ee76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ee0c:	2400      	movs	r4, #0
 801ee0e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ee12:	3a01      	subs	r2, #1
 801ee14:	b169      	cbz	r1, 801ee32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ee16:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ee18:	458c      	cmp	ip, r1
 801ee1a:	da09      	bge.n	801ee30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ee1c:	eba1 010c 	sub.w	r1, r1, ip
 801ee20:	b289      	uxth	r1, r1
 801ee22:	b933      	cbnz	r3, 801ee32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ee24:	2e00      	cmp	r6, #0
 801ee26:	d051      	beq.n	801eecc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	d04f      	beq.n	801eecc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ee2c:	440c      	add	r4, r1
 801ee2e:	b2a4      	uxth	r4, r4
 801ee30:	2100      	movs	r1, #0
 801ee32:	682b      	ldr	r3, [r5, #0]
 801ee34:	4293      	cmp	r3, r2
 801ee36:	da07      	bge.n	801ee48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ee38:	f1b8 0f00 	cmp.w	r8, #0
 801ee3c:	d004      	beq.n	801ee48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ee3e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ee42:	682b      	ldr	r3, [r5, #0]
 801ee44:	3301      	adds	r3, #1
 801ee46:	602b      	str	r3, [r5, #0]
 801ee48:	2730      	movs	r7, #48	; 0x30
 801ee4a:	2c00      	cmp	r4, #0
 801ee4c:	d04e      	beq.n	801eeec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ee4e:	682e      	ldr	r6, [r5, #0]
 801ee50:	3c01      	subs	r4, #1
 801ee52:	42b2      	cmp	r2, r6
 801ee54:	b2a4      	uxth	r4, r4
 801ee56:	dd49      	ble.n	801eeec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ee58:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ee5c:	682b      	ldr	r3, [r5, #0]
 801ee5e:	3301      	adds	r3, #1
 801ee60:	602b      	str	r3, [r5, #0]
 801ee62:	e7f2      	b.n	801ee4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ee64:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ee68:	d01d      	beq.n	801eea6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ee6a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ee6e:	d002      	beq.n	801ee76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ee70:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801ee74:	e7c9      	b.n	801ee0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ee76:	4684      	mov	ip, r0
 801ee78:	f04f 0800 	mov.w	r8, #0
 801ee7c:	2c00      	cmp	r4, #0
 801ee7e:	d0c6      	beq.n	801ee0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ee80:	b947      	cbnz	r7, 801ee94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ee82:	2801      	cmp	r0, #1
 801ee84:	d106      	bne.n	801ee94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ee86:	8814      	ldrh	r4, [r2, #0]
 801ee88:	2c30      	cmp	r4, #48	; 0x30
 801ee8a:	bf02      	ittt	eq
 801ee8c:	3202      	addeq	r2, #2
 801ee8e:	f8cb 2000 	streq.w	r2, [fp]
 801ee92:	4638      	moveq	r0, r7
 801ee94:	45bc      	cmp	ip, r7
 801ee96:	da14      	bge.n	801eec2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ee98:	b2bf      	uxth	r7, r7
 801ee9a:	eba7 040c 	sub.w	r4, r7, ip
 801ee9e:	b2a4      	uxth	r4, r4
 801eea0:	46bc      	mov	ip, r7
 801eea2:	2600      	movs	r6, #0
 801eea4:	e7b3      	b.n	801ee0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801eea6:	4684      	mov	ip, r0
 801eea8:	b16c      	cbz	r4, 801eec6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801eeaa:	42b8      	cmp	r0, r7
 801eeac:	dd00      	ble.n	801eeb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801eeae:	b2b8      	uxth	r0, r7
 801eeb0:	2400      	movs	r4, #0
 801eeb2:	e003      	b.n	801eebc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801eeb4:	f04f 0c01 	mov.w	ip, #1
 801eeb8:	2400      	movs	r4, #0
 801eeba:	4660      	mov	r0, ip
 801eebc:	4626      	mov	r6, r4
 801eebe:	46a0      	mov	r8, r4
 801eec0:	e7a5      	b.n	801ee0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801eec2:	2400      	movs	r4, #0
 801eec4:	e7ed      	b.n	801eea2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801eec6:	4626      	mov	r6, r4
 801eec8:	46a0      	mov	r8, r4
 801eeca:	e7a0      	b.n	801ee0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801eecc:	2900      	cmp	r1, #0
 801eece:	d0b0      	beq.n	801ee32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801eed0:	2720      	movs	r7, #32
 801eed2:	682e      	ldr	r6, [r5, #0]
 801eed4:	2900      	cmp	r1, #0
 801eed6:	d0ac      	beq.n	801ee32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801eed8:	3901      	subs	r1, #1
 801eeda:	4296      	cmp	r6, r2
 801eedc:	b289      	uxth	r1, r1
 801eede:	daa7      	bge.n	801ee30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801eee0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801eee4:	682b      	ldr	r3, [r5, #0]
 801eee6:	3301      	adds	r3, #1
 801eee8:	602b      	str	r3, [r5, #0]
 801eeea:	e7f2      	b.n	801eed2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801eeec:	b188      	cbz	r0, 801ef12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801eeee:	682b      	ldr	r3, [r5, #0]
 801eef0:	3801      	subs	r0, #1
 801eef2:	429a      	cmp	r2, r3
 801eef4:	b280      	uxth	r0, r0
 801eef6:	dd0c      	ble.n	801ef12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801eef8:	f8db 3000 	ldr.w	r3, [fp]
 801eefc:	1c9c      	adds	r4, r3, #2
 801eefe:	f8cb 4000 	str.w	r4, [fp]
 801ef02:	881c      	ldrh	r4, [r3, #0]
 801ef04:	682b      	ldr	r3, [r5, #0]
 801ef06:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801ef0a:	682b      	ldr	r3, [r5, #0]
 801ef0c:	3301      	adds	r3, #1
 801ef0e:	602b      	str	r3, [r5, #0]
 801ef10:	e7ec      	b.n	801eeec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ef12:	2620      	movs	r6, #32
 801ef14:	b151      	cbz	r1, 801ef2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ef16:	6828      	ldr	r0, [r5, #0]
 801ef18:	3901      	subs	r1, #1
 801ef1a:	4282      	cmp	r2, r0
 801ef1c:	b289      	uxth	r1, r1
 801ef1e:	dd05      	ble.n	801ef2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ef20:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801ef24:	682b      	ldr	r3, [r5, #0]
 801ef26:	3301      	adds	r3, #1
 801ef28:	602b      	str	r3, [r5, #0]
 801ef2a:	e7f3      	b.n	801ef14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801ef2c:	b005      	add	sp, #20
 801ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ef32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef36:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ef3a:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801ef3e:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801ef42:	2400      	movs	r4, #0
 801ef44:	8014      	strh	r4, [r2, #0]
 801ef46:	701c      	strb	r4, [r3, #0]
 801ef48:	f888 4000 	strb.w	r4, [r8]
 801ef4c:	f88c 4000 	strb.w	r4, [ip]
 801ef50:	f88e 4000 	strb.w	r4, [lr]
 801ef54:	703c      	strb	r4, [r7, #0]
 801ef56:	6804      	ldr	r4, [r0, #0]
 801ef58:	b1a4      	cbz	r4, 801ef84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801ef5a:	8824      	ldrh	r4, [r4, #0]
 801ef5c:	f04f 0901 	mov.w	r9, #1
 801ef60:	b314      	cbz	r4, 801efa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ef62:	2c2b      	cmp	r4, #43	; 0x2b
 801ef64:	d001      	beq.n	801ef6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801ef66:	2c20      	cmp	r4, #32
 801ef68:	d110      	bne.n	801ef8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801ef6a:	8014      	strh	r4, [r2, #0]
 801ef6c:	6804      	ldr	r4, [r0, #0]
 801ef6e:	b10c      	cbz	r4, 801ef74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801ef70:	3402      	adds	r4, #2
 801ef72:	6004      	str	r4, [r0, #0]
 801ef74:	680c      	ldr	r4, [r1, #0]
 801ef76:	b10c      	cbz	r4, 801ef7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801ef78:	3401      	adds	r4, #1
 801ef7a:	600c      	str	r4, [r1, #0]
 801ef7c:	6804      	ldr	r4, [r0, #0]
 801ef7e:	b17c      	cbz	r4, 801efa0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801ef80:	8824      	ldrh	r4, [r4, #0]
 801ef82:	e7ed      	b.n	801ef60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ef84:	680c      	ldr	r4, [r1, #0]
 801ef86:	b17c      	cbz	r4, 801efa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ef88:	7824      	ldrb	r4, [r4, #0]
 801ef8a:	e7e7      	b.n	801ef5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801ef8c:	2c2d      	cmp	r4, #45	; 0x2d
 801ef8e:	d102      	bne.n	801ef96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801ef90:	f883 9000 	strb.w	r9, [r3]
 801ef94:	e7ea      	b.n	801ef6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ef96:	2c23      	cmp	r4, #35	; 0x23
 801ef98:	d107      	bne.n	801efaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801ef9a:	f888 9000 	strb.w	r9, [r8]
 801ef9e:	e7e5      	b.n	801ef6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801efa0:	680c      	ldr	r4, [r1, #0]
 801efa2:	b10c      	cbz	r4, 801efa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801efa4:	7824      	ldrb	r4, [r4, #0]
 801efa6:	e7db      	b.n	801ef60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801efa8:	2400      	movs	r4, #0
 801efaa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801efae:	2b09      	cmp	r3, #9
 801efb0:	d901      	bls.n	801efb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801efb2:	2c2a      	cmp	r4, #42	; 0x2a
 801efb4:	d122      	bne.n	801effc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801efb6:	2301      	movs	r3, #1
 801efb8:	2c30      	cmp	r4, #48	; 0x30
 801efba:	f88e 3000 	strb.w	r3, [lr]
 801efbe:	d10d      	bne.n	801efdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801efc0:	f88c 3000 	strb.w	r3, [ip]
 801efc4:	6803      	ldr	r3, [r0, #0]
 801efc6:	b10b      	cbz	r3, 801efcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801efc8:	3302      	adds	r3, #2
 801efca:	6003      	str	r3, [r0, #0]
 801efcc:	680b      	ldr	r3, [r1, #0]
 801efce:	b10b      	cbz	r3, 801efd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801efd0:	3301      	adds	r3, #1
 801efd2:	600b      	str	r3, [r1, #0]
 801efd4:	6803      	ldr	r3, [r0, #0]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d02f      	beq.n	801f03a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801efda:	881c      	ldrh	r4, [r3, #0]
 801efdc:	2c2a      	cmp	r4, #42	; 0x2a
 801efde:	d135      	bne.n	801f04c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801efe0:	f04f 33ff 	mov.w	r3, #4294967295
 801efe4:	6033      	str	r3, [r6, #0]
 801efe6:	6803      	ldr	r3, [r0, #0]
 801efe8:	b10b      	cbz	r3, 801efee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801efea:	3302      	adds	r3, #2
 801efec:	6003      	str	r3, [r0, #0]
 801efee:	680b      	ldr	r3, [r1, #0]
 801eff0:	b10b      	cbz	r3, 801eff6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801eff2:	3301      	adds	r3, #1
 801eff4:	600b      	str	r3, [r1, #0]
 801eff6:	6803      	ldr	r3, [r0, #0]
 801eff8:	b31b      	cbz	r3, 801f042 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801effa:	881c      	ldrh	r4, [r3, #0]
 801effc:	2c2e      	cmp	r4, #46	; 0x2e
 801effe:	d11a      	bne.n	801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f000:	2301      	movs	r3, #1
 801f002:	703b      	strb	r3, [r7, #0]
 801f004:	6803      	ldr	r3, [r0, #0]
 801f006:	b10b      	cbz	r3, 801f00c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801f008:	3302      	adds	r3, #2
 801f00a:	6003      	str	r3, [r0, #0]
 801f00c:	680b      	ldr	r3, [r1, #0]
 801f00e:	b10b      	cbz	r3, 801f014 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801f010:	3301      	adds	r3, #1
 801f012:	600b      	str	r3, [r1, #0]
 801f014:	6803      	ldr	r3, [r0, #0]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d036      	beq.n	801f088 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801f01a:	881b      	ldrh	r3, [r3, #0]
 801f01c:	2b2a      	cmp	r3, #42	; 0x2a
 801f01e:	d137      	bne.n	801f090 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f020:	f04f 33ff 	mov.w	r3, #4294967295
 801f024:	602b      	str	r3, [r5, #0]
 801f026:	6803      	ldr	r3, [r0, #0]
 801f028:	b10b      	cbz	r3, 801f02e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801f02a:	3302      	adds	r3, #2
 801f02c:	6003      	str	r3, [r0, #0]
 801f02e:	680b      	ldr	r3, [r1, #0]
 801f030:	b10b      	cbz	r3, 801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f032:	3301      	adds	r3, #1
 801f034:	600b      	str	r3, [r1, #0]
 801f036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f03a:	680c      	ldr	r4, [r1, #0]
 801f03c:	b134      	cbz	r4, 801f04c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801f03e:	7824      	ldrb	r4, [r4, #0]
 801f040:	e7cc      	b.n	801efdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801f042:	680b      	ldr	r3, [r1, #0]
 801f044:	2b00      	cmp	r3, #0
 801f046:	d0f6      	beq.n	801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f048:	781c      	ldrb	r4, [r3, #0]
 801f04a:	e7d7      	b.n	801effc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f04c:	2300      	movs	r3, #0
 801f04e:	6033      	str	r3, [r6, #0]
 801f050:	220a      	movs	r2, #10
 801f052:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f056:	fa1f f38c 	uxth.w	r3, ip
 801f05a:	2b09      	cmp	r3, #9
 801f05c:	d8ce      	bhi.n	801effc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f05e:	6833      	ldr	r3, [r6, #0]
 801f060:	fb02 c303 	mla	r3, r2, r3, ip
 801f064:	6033      	str	r3, [r6, #0]
 801f066:	6803      	ldr	r3, [r0, #0]
 801f068:	b10b      	cbz	r3, 801f06e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801f06a:	3302      	adds	r3, #2
 801f06c:	6003      	str	r3, [r0, #0]
 801f06e:	680b      	ldr	r3, [r1, #0]
 801f070:	b10b      	cbz	r3, 801f076 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801f072:	3301      	adds	r3, #1
 801f074:	600b      	str	r3, [r1, #0]
 801f076:	6803      	ldr	r3, [r0, #0]
 801f078:	b10b      	cbz	r3, 801f07e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801f07a:	881c      	ldrh	r4, [r3, #0]
 801f07c:	e7e9      	b.n	801f052 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f07e:	680c      	ldr	r4, [r1, #0]
 801f080:	2c00      	cmp	r4, #0
 801f082:	d0e6      	beq.n	801f052 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f084:	7824      	ldrb	r4, [r4, #0]
 801f086:	e7e4      	b.n	801f052 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f088:	680b      	ldr	r3, [r1, #0]
 801f08a:	b10b      	cbz	r3, 801f090 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f08c:	781b      	ldrb	r3, [r3, #0]
 801f08e:	e7c5      	b.n	801f01c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801f090:	2200      	movs	r2, #0
 801f092:	602a      	str	r2, [r5, #0]
 801f094:	240a      	movs	r4, #10
 801f096:	3b30      	subs	r3, #48	; 0x30
 801f098:	b29e      	uxth	r6, r3
 801f09a:	2e09      	cmp	r6, #9
 801f09c:	682a      	ldr	r2, [r5, #0]
 801f09e:	d813      	bhi.n	801f0c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801f0a0:	fb04 3302 	mla	r3, r4, r2, r3
 801f0a4:	602b      	str	r3, [r5, #0]
 801f0a6:	6803      	ldr	r3, [r0, #0]
 801f0a8:	b10b      	cbz	r3, 801f0ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801f0aa:	3302      	adds	r3, #2
 801f0ac:	6003      	str	r3, [r0, #0]
 801f0ae:	680b      	ldr	r3, [r1, #0]
 801f0b0:	b10b      	cbz	r3, 801f0b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801f0b2:	3301      	adds	r3, #1
 801f0b4:	600b      	str	r3, [r1, #0]
 801f0b6:	6803      	ldr	r3, [r0, #0]
 801f0b8:	b10b      	cbz	r3, 801f0be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801f0ba:	881b      	ldrh	r3, [r3, #0]
 801f0bc:	e7eb      	b.n	801f096 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f0be:	680b      	ldr	r3, [r1, #0]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d0e8      	beq.n	801f096 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f0c4:	781b      	ldrb	r3, [r3, #0]
 801f0c6:	e7e6      	b.n	801f096 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f0c8:	2a06      	cmp	r2, #6
 801f0ca:	bfa8      	it	ge
 801f0cc:	2206      	movge	r2, #6
 801f0ce:	602a      	str	r2, [r5, #0]
 801f0d0:	e7b1      	b.n	801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801f0d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801f0d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d6:	b0a3      	sub	sp, #140	; 0x8c
 801f0d8:	2600      	movs	r6, #0
 801f0da:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801f0de:	4607      	mov	r7, r0
 801f0e0:	4688      	mov	r8, r1
 801f0e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f0e6:	4631      	mov	r1, r6
 801f0e8:	2242      	movs	r2, #66	; 0x42
 801f0ea:	4648      	mov	r0, r9
 801f0ec:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f0ee:	960d      	str	r6, [sp, #52]	; 0x34
 801f0f0:	f00f f8a4 	bl	802e23c <memset>
 801f0f4:	b15f      	cbz	r7, 801f10e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801f0f6:	f108 3aff 	add.w	sl, r8, #4294967295
 801f0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0fe:	b152      	cbz	r2, 801f116 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801f100:	8812      	ldrh	r2, [r2, #0]
 801f102:	b10a      	cbz	r2, 801f108 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f104:	459a      	cmp	sl, r3
 801f106:	dc2e      	bgt.n	801f166 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801f108:	2200      	movs	r2, #0
 801f10a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f10e:	4638      	mov	r0, r7
 801f110:	b023      	add	sp, #140	; 0x8c
 801f112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f116:	9a08      	ldr	r2, [sp, #32]
 801f118:	2a00      	cmp	r2, #0
 801f11a:	d0f5      	beq.n	801f108 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f11c:	7812      	ldrb	r2, [r2, #0]
 801f11e:	e7f0      	b.n	801f102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801f120:	2d00      	cmp	r5, #0
 801f122:	d0ea      	beq.n	801f0fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f124:	782a      	ldrb	r2, [r5, #0]
 801f126:	b142      	cbz	r2, 801f13a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801f128:	2a25      	cmp	r2, #37	; 0x25
 801f12a:	d001      	beq.n	801f130 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801f12c:	459a      	cmp	sl, r3
 801f12e:	dc08      	bgt.n	801f142 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801f130:	f1bb 0f00 	cmp.w	fp, #0
 801f134:	d121      	bne.n	801f17a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801f136:	2d00      	cmp	r5, #0
 801f138:	d0df      	beq.n	801f0fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f13a:	782a      	ldrb	r2, [r5, #0]
 801f13c:	f04f 0b00 	mov.w	fp, #0
 801f140:	e01d      	b.n	801f17e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801f142:	f1bb 0f00 	cmp.w	fp, #0
 801f146:	d078      	beq.n	801f23a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801f148:	f8bb 2000 	ldrh.w	r2, [fp]
 801f14c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f150:	f1bb 0f00 	cmp.w	fp, #0
 801f154:	d002      	beq.n	801f15c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801f156:	f10b 0202 	add.w	r2, fp, #2
 801f15a:	9209      	str	r2, [sp, #36]	; 0x24
 801f15c:	b10d      	cbz	r5, 801f162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801f15e:	3501      	adds	r5, #1
 801f160:	9508      	str	r5, [sp, #32]
 801f162:	3301      	adds	r3, #1
 801f164:	930d      	str	r3, [sp, #52]	; 0x34
 801f166:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801f16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f16c:	f1bb 0f00 	cmp.w	fp, #0
 801f170:	d0d6      	beq.n	801f120 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801f172:	f8bb 2000 	ldrh.w	r2, [fp]
 801f176:	2a00      	cmp	r2, #0
 801f178:	d1d6      	bne.n	801f128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801f17a:	f8bb 2000 	ldrh.w	r2, [fp]
 801f17e:	2a00      	cmp	r2, #0
 801f180:	d0bb      	beq.n	801f0fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f182:	459a      	cmp	sl, r3
 801f184:	ddb9      	ble.n	801f0fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f186:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801f18a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801f18e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801f192:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801f196:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801f19a:	960e      	str	r6, [sp, #56]	; 0x38
 801f19c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801f1a0:	960f      	str	r6, [sp, #60]	; 0x3c
 801f1a2:	f1bb 0f00 	cmp.w	fp, #0
 801f1a6:	d002      	beq.n	801f1ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801f1a8:	f10b 0302 	add.w	r3, fp, #2
 801f1ac:	9309      	str	r3, [sp, #36]	; 0x24
 801f1ae:	b10d      	cbz	r5, 801f1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801f1b0:	1c6b      	adds	r3, r5, #1
 801f1b2:	9308      	str	r3, [sp, #32]
 801f1b4:	ab0f      	add	r3, sp, #60	; 0x3c
 801f1b6:	9305      	str	r3, [sp, #20]
 801f1b8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f1bc:	9304      	str	r3, [sp, #16]
 801f1be:	ab0e      	add	r3, sp, #56	; 0x38
 801f1c0:	9303      	str	r3, [sp, #12]
 801f1c2:	ab0c      	add	r3, sp, #48	; 0x30
 801f1c4:	9302      	str	r3, [sp, #8]
 801f1c6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f1ca:	9301      	str	r3, [sp, #4]
 801f1cc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f1d0:	9300      	str	r3, [sp, #0]
 801f1d2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801f1d6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f1da:	a908      	add	r1, sp, #32
 801f1dc:	a809      	add	r0, sp, #36	; 0x24
 801f1de:	f7ff fea8 	bl	801ef32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	bfbe      	ittt	lt
 801f1e8:	6823      	ldrlt	r3, [r4, #0]
 801f1ea:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f1ee:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f1f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f1f2:	bfb8      	it	lt
 801f1f4:	3404      	addlt	r4, #4
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	bfb8      	it	lt
 801f1fa:	6823      	ldrlt	r3, [r4, #0]
 801f1fc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f200:	bfbe      	ittt	lt
 801f202:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f206:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801f208:	3404      	addlt	r4, #4
 801f20a:	b1d9      	cbz	r1, 801f244 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801f20c:	880b      	ldrh	r3, [r1, #0]
 801f20e:	2b69      	cmp	r3, #105	; 0x69
 801f210:	d01f      	beq.n	801f252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f212:	d82f      	bhi.n	801f274 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801f214:	2b58      	cmp	r3, #88	; 0x58
 801f216:	d01c      	beq.n	801f252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f218:	d818      	bhi.n	801f24c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801f21a:	2b25      	cmp	r3, #37	; 0x25
 801f21c:	d034      	beq.n	801f288 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801f21e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801f222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f224:	f1bb 0f00 	cmp.w	fp, #0
 801f228:	f000 80b8 	beq.w	801f39c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801f22c:	f8bb 5000 	ldrh.w	r5, [fp]
 801f230:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801f234:	3301      	adds	r3, #1
 801f236:	930d      	str	r3, [sp, #52]	; 0x34
 801f238:	e029      	b.n	801f28e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f23a:	b10d      	cbz	r5, 801f240 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801f23c:	782a      	ldrb	r2, [r5, #0]
 801f23e:	e785      	b.n	801f14c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f240:	462a      	mov	r2, r5
 801f242:	e783      	b.n	801f14c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f244:	2a00      	cmp	r2, #0
 801f246:	d0ea      	beq.n	801f21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f248:	7813      	ldrb	r3, [r2, #0]
 801f24a:	e7e0      	b.n	801f20e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801f24c:	3b63      	subs	r3, #99	; 0x63
 801f24e:	2b01      	cmp	r3, #1
 801f250:	d8e5      	bhi.n	801f21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f252:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f256:	b329      	cbz	r1, 801f2a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801f258:	880b      	ldrh	r3, [r1, #0]
 801f25a:	2b69      	cmp	r3, #105	; 0x69
 801f25c:	d063      	beq.n	801f326 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f25e:	d825      	bhi.n	801f2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801f260:	2b63      	cmp	r3, #99	; 0x63
 801f262:	d038      	beq.n	801f2d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801f264:	2b64      	cmp	r3, #100	; 0x64
 801f266:	d05e      	beq.n	801f326 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f268:	2b58      	cmp	r3, #88	; 0x58
 801f26a:	d07b      	beq.n	801f364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801f26c:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801f270:	4625      	mov	r5, r4
 801f272:	e036      	b.n	801f2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f274:	2b73      	cmp	r3, #115	; 0x73
 801f276:	d0ec      	beq.n	801f252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f278:	d802      	bhi.n	801f280 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801f27a:	2b6f      	cmp	r3, #111	; 0x6f
 801f27c:	d1cf      	bne.n	801f21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f27e:	e7e8      	b.n	801f252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f280:	2b75      	cmp	r3, #117	; 0x75
 801f282:	d0e6      	beq.n	801f252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f284:	2b78      	cmp	r3, #120	; 0x78
 801f286:	e7f9      	b.n	801f27c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801f288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f28a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801f28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f290:	b10b      	cbz	r3, 801f296 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801f292:	3302      	adds	r3, #2
 801f294:	9309      	str	r3, [sp, #36]	; 0x24
 801f296:	9b08      	ldr	r3, [sp, #32]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	f43f af2e 	beq.w	801f0fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f29e:	3301      	adds	r3, #1
 801f2a0:	9308      	str	r3, [sp, #32]
 801f2a2:	e72a      	b.n	801f0fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f2a4:	2a00      	cmp	r2, #0
 801f2a6:	d0e1      	beq.n	801f26c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f2a8:	7813      	ldrb	r3, [r2, #0]
 801f2aa:	e7d6      	b.n	801f25a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801f2ac:	2b73      	cmp	r3, #115	; 0x73
 801f2ae:	d036      	beq.n	801f31e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801f2b0:	d807      	bhi.n	801f2c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801f2b2:	2b6f      	cmp	r3, #111	; 0x6f
 801f2b4:	d1da      	bne.n	801f26c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f2b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f2b8:	1d25      	adds	r5, r4, #4
 801f2ba:	eba8 0202 	sub.w	r2, r8, r2
 801f2be:	2308      	movs	r3, #8
 801f2c0:	e04a      	b.n	801f358 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f2c2:	2b75      	cmp	r3, #117	; 0x75
 801f2c4:	d043      	beq.n	801f34e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801f2c6:	2b78      	cmp	r3, #120	; 0x78
 801f2c8:	d1d0      	bne.n	801f26c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f2ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f2cc:	1d25      	adds	r5, r4, #4
 801f2ce:	eba8 0202 	sub.w	r2, r8, r2
 801f2d2:	2310      	movs	r3, #16
 801f2d4:	e040      	b.n	801f358 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f2d6:	7823      	ldrb	r3, [r4, #0]
 801f2d8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801f2dc:	1d25      	adds	r5, r4, #4
 801f2de:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801f2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2e4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	d052      	beq.n	801f392 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801f2ec:	881a      	ldrh	r2, [r3, #0]
 801f2ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801f2f2:	a80d      	add	r0, sp, #52	; 0x34
 801f2f4:	9005      	str	r0, [sp, #20]
 801f2f6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801f2fa:	9004      	str	r0, [sp, #16]
 801f2fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f2fe:	9003      	str	r0, [sp, #12]
 801f300:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801f304:	9002      	str	r0, [sp, #8]
 801f306:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f308:	9001      	str	r0, [sp, #4]
 801f30a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801f30e:	9000      	str	r0, [sp, #0]
 801f310:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801f314:	a810      	add	r0, sp, #64	; 0x40
 801f316:	f7ff fd49 	bl	801edac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f31a:	462c      	mov	r4, r5
 801f31c:	e7b7      	b.n	801f28e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f31e:	6823      	ldr	r3, [r4, #0]
 801f320:	1d25      	adds	r5, r4, #4
 801f322:	9310      	str	r3, [sp, #64]	; 0x40
 801f324:	e7dd      	b.n	801f2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f328:	6820      	ldr	r0, [r4, #0]
 801f32a:	eba8 0202 	sub.w	r2, r8, r2
 801f32e:	230a      	movs	r3, #10
 801f330:	b292      	uxth	r2, r2
 801f332:	4649      	mov	r1, r9
 801f334:	f7ff fd08 	bl	801ed48 <_ZN8touchgfx7Unicode4itoaElPtti>
 801f338:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f33c:	2b2d      	cmp	r3, #45	; 0x2d
 801f33e:	f104 0504 	add.w	r5, r4, #4
 801f342:	d1ce      	bne.n	801f2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f344:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f34a:	3302      	adds	r3, #2
 801f34c:	e7e9      	b.n	801f322 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801f34e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f350:	1d25      	adds	r5, r4, #4
 801f352:	eba8 0202 	sub.w	r2, r8, r2
 801f356:	230a      	movs	r3, #10
 801f358:	b292      	uxth	r2, r2
 801f35a:	4649      	mov	r1, r9
 801f35c:	6820      	ldr	r0, [r4, #0]
 801f35e:	f7ff fcd5 	bl	801ed0c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f362:	e7be      	b.n	801f2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f366:	6820      	ldr	r0, [r4, #0]
 801f368:	eba8 0202 	sub.w	r2, r8, r2
 801f36c:	b292      	uxth	r2, r2
 801f36e:	2310      	movs	r3, #16
 801f370:	4649      	mov	r1, r9
 801f372:	f7ff fccb 	bl	801ed0c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f376:	1d25      	adds	r5, r4, #4
 801f378:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801f37c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f380:	2b00      	cmp	r3, #0
 801f382:	d0ae      	beq.n	801f2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f384:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801f388:	2919      	cmp	r1, #25
 801f38a:	d8f7      	bhi.n	801f37c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f38c:	3b20      	subs	r3, #32
 801f38e:	8013      	strh	r3, [r2, #0]
 801f390:	e7f4      	b.n	801f37c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f392:	9a08      	ldr	r2, [sp, #32]
 801f394:	2a00      	cmp	r2, #0
 801f396:	d0aa      	beq.n	801f2ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f398:	7812      	ldrb	r2, [r2, #0]
 801f39a:	e7a8      	b.n	801f2ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f39c:	2d00      	cmp	r5, #0
 801f39e:	f43f af47 	beq.w	801f230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801f3a2:	782d      	ldrb	r5, [r5, #0]
 801f3a4:	e744      	b.n	801f230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801f3a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801f3a6:	b507      	push	{r0, r1, r2, lr}
 801f3a8:	9300      	str	r3, [sp, #0]
 801f3aa:	4613      	mov	r3, r2
 801f3ac:	2200      	movs	r2, #0
 801f3ae:	f7ff fe90 	bl	801f0d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801f3b2:	b003      	add	sp, #12
 801f3b4:	f85d fb04 	ldr.w	pc, [sp], #4

0801f3b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801f3b8:	b40c      	push	{r2, r3}
 801f3ba:	b507      	push	{r0, r1, r2, lr}
 801f3bc:	ab04      	add	r3, sp, #16
 801f3be:	f853 2b04 	ldr.w	r2, [r3], #4
 801f3c2:	9301      	str	r3, [sp, #4]
 801f3c4:	f7ff ffef 	bl	801f3a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801f3c8:	b003      	add	sp, #12
 801f3ca:	f85d eb04 	ldr.w	lr, [sp], #4
 801f3ce:	b002      	add	sp, #8
 801f3d0:	4770      	bx	lr
	...

0801f3d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3d8:	b0c3      	sub	sp, #268	; 0x10c
 801f3da:	2600      	movs	r6, #0
 801f3dc:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801f3e0:	4607      	mov	r7, r0
 801f3e2:	4689      	mov	r9, r1
 801f3e4:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f3e8:	4631      	mov	r1, r6
 801f3ea:	22c8      	movs	r2, #200	; 0xc8
 801f3ec:	4640      	mov	r0, r8
 801f3ee:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801f3f2:	960c      	str	r6, [sp, #48]	; 0x30
 801f3f4:	f00e ff22 	bl	802e23c <memset>
 801f3f8:	b16f      	cbz	r7, 801f416 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 801f3fa:	f04f 0b0a 	mov.w	fp, #10
 801f3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f402:	b162      	cbz	r2, 801f41e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 801f404:	8812      	ldrh	r2, [r2, #0]
 801f406:	b11a      	cbz	r2, 801f410 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f408:	f109 31ff 	add.w	r1, r9, #4294967295
 801f40c:	4299      	cmp	r1, r3
 801f40e:	dc26      	bgt.n	801f45e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801f410:	2200      	movs	r2, #0
 801f412:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f416:	4638      	mov	r0, r7
 801f418:	b043      	add	sp, #268	; 0x10c
 801f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f41e:	9a08      	ldr	r2, [sp, #32]
 801f420:	2a00      	cmp	r2, #0
 801f422:	d0f5      	beq.n	801f410 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f424:	7812      	ldrb	r2, [r2, #0]
 801f426:	e7ee      	b.n	801f406 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 801f428:	2c00      	cmp	r4, #0
 801f42a:	d0e8      	beq.n	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f42c:	7822      	ldrb	r2, [r4, #0]
 801f42e:	b132      	cbz	r2, 801f43e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801f430:	2a25      	cmp	r2, #37	; 0x25
 801f432:	d001      	beq.n	801f438 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 801f434:	4299      	cmp	r1, r3
 801f436:	dc05      	bgt.n	801f444 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 801f438:	b9cd      	cbnz	r5, 801f46e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 801f43a:	2c00      	cmp	r4, #0
 801f43c:	d0df      	beq.n	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f43e:	7822      	ldrb	r2, [r4, #0]
 801f440:	2500      	movs	r5, #0
 801f442:	e015      	b.n	801f470 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 801f444:	2d00      	cmp	r5, #0
 801f446:	d073      	beq.n	801f530 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 801f448:	882a      	ldrh	r2, [r5, #0]
 801f44a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f44e:	b10d      	cbz	r5, 801f454 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801f450:	3502      	adds	r5, #2
 801f452:	9509      	str	r5, [sp, #36]	; 0x24
 801f454:	b10c      	cbz	r4, 801f45a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 801f456:	3401      	adds	r4, #1
 801f458:	9408      	str	r4, [sp, #32]
 801f45a:	3301      	adds	r3, #1
 801f45c:	930c      	str	r3, [sp, #48]	; 0x30
 801f45e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801f462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f464:	2d00      	cmp	r5, #0
 801f466:	d0df      	beq.n	801f428 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 801f468:	882a      	ldrh	r2, [r5, #0]
 801f46a:	2a00      	cmp	r2, #0
 801f46c:	d1e0      	bne.n	801f430 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801f46e:	882a      	ldrh	r2, [r5, #0]
 801f470:	2a00      	cmp	r2, #0
 801f472:	d0c4      	beq.n	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f474:	4299      	cmp	r1, r3
 801f476:	ddc2      	ble.n	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f478:	2300      	movs	r3, #0
 801f47a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f47e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f486:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801f48a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801f48e:	930d      	str	r3, [sp, #52]	; 0x34
 801f490:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f494:	930e      	str	r3, [sp, #56]	; 0x38
 801f496:	b10d      	cbz	r5, 801f49c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 801f498:	1cab      	adds	r3, r5, #2
 801f49a:	9309      	str	r3, [sp, #36]	; 0x24
 801f49c:	b10c      	cbz	r4, 801f4a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801f49e:	1c63      	adds	r3, r4, #1
 801f4a0:	9308      	str	r3, [sp, #32]
 801f4a2:	ab0e      	add	r3, sp, #56	; 0x38
 801f4a4:	9305      	str	r3, [sp, #20]
 801f4a6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f4aa:	9304      	str	r3, [sp, #16]
 801f4ac:	ab0d      	add	r3, sp, #52	; 0x34
 801f4ae:	9303      	str	r3, [sp, #12]
 801f4b0:	ab0b      	add	r3, sp, #44	; 0x2c
 801f4b2:	9302      	str	r3, [sp, #8]
 801f4b4:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801f4b8:	9301      	str	r3, [sp, #4]
 801f4ba:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801f4be:	9300      	str	r3, [sp, #0]
 801f4c0:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801f4c4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801f4c8:	a908      	add	r1, sp, #32
 801f4ca:	a809      	add	r0, sp, #36	; 0x24
 801f4cc:	f7ff fd31 	bl	801ef32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f4d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4d2:	2b00      	cmp	r3, #0
 801f4d4:	da0b      	bge.n	801f4ee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 801f4d6:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f4da:	edd3 7a00 	vldr	s15, [r3]
 801f4de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f4e2:	3601      	adds	r6, #1
 801f4e4:	ee17 3a90 	vmov	r3, s15
 801f4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4ec:	930d      	str	r3, [sp, #52]	; 0x34
 801f4ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	da0b      	bge.n	801f50c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 801f4f4:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f4f8:	edd3 7a00 	vldr	s15, [r3]
 801f4fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f500:	3601      	adds	r6, #1
 801f502:	ee17 3a90 	vmov	r3, s15
 801f506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f50a:	930e      	str	r3, [sp, #56]	; 0x38
 801f50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f50e:	b1a3      	cbz	r3, 801f53a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801f510:	881a      	ldrh	r2, [r3, #0]
 801f512:	2a25      	cmp	r2, #37	; 0x25
 801f514:	d016      	beq.n	801f544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 801f516:	2a66      	cmp	r2, #102	; 0x66
 801f518:	d01a      	beq.n	801f550 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801f51a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801f51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f520:	2d00      	cmp	r5, #0
 801f522:	f000 80fd 	beq.w	801f720 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34c>
 801f526:	882c      	ldrh	r4, [r5, #0]
 801f528:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801f52c:	3301      	adds	r3, #1
 801f52e:	e00d      	b.n	801f54c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801f530:	b10c      	cbz	r4, 801f536 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801f532:	7822      	ldrb	r2, [r4, #0]
 801f534:	e789      	b.n	801f44a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f536:	4622      	mov	r2, r4
 801f538:	e787      	b.n	801f44a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f53a:	9b08      	ldr	r3, [sp, #32]
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d0ec      	beq.n	801f51a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801f540:	781a      	ldrb	r2, [r3, #0]
 801f542:	e7e6      	b.n	801f512 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 801f544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f546:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f54a:	3302      	adds	r3, #2
 801f54c:	930c      	str	r3, [sp, #48]	; 0x30
 801f54e:	e04b      	b.n	801f5e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x214>
 801f550:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f554:	ed93 7a00 	vldr	s14, [r3]
 801f558:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f55c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801f560:	3601      	adds	r6, #1
 801f562:	b923      	cbnz	r3, 801f56e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 801f564:	2301      	movs	r3, #1
 801f566:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f56a:	2306      	movs	r3, #6
 801f56c:	930e      	str	r3, [sp, #56]	; 0x38
 801f56e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801f572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f576:	bf48      	it	mi
 801f578:	eeb1 7a47 	vnegmi.f32	s14, s14
 801f57c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f580:	ee77 6a67 	vsub.f32	s13, s14, s15
 801f584:	bf48      	it	mi
 801f586:	232d      	movmi	r3, #45	; 0x2d
 801f588:	eef4 6a47 	vcmp.f32	s13, s14
 801f58c:	bf48      	it	mi
 801f58e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f596:	d132      	bne.n	801f5fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f598:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f59c:	eef4 7a47 	vcmp.f32	s15, s14
 801f5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5a4:	d12b      	bne.n	801f5fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f5a6:	4b61      	ldr	r3, [pc, #388]	; (801f72c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>)
 801f5a8:	9310      	str	r3, [sp, #64]	; 0x40
 801f5aa:	2366      	movs	r3, #102	; 0x66
 801f5ac:	9311      	str	r3, [sp, #68]	; 0x44
 801f5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5b0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	f000 80ad 	beq.w	801f714 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x340>
 801f5ba:	881a      	ldrh	r2, [r3, #0]
 801f5bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f5c0:	a80c      	add	r0, sp, #48	; 0x30
 801f5c2:	9005      	str	r0, [sp, #20]
 801f5c4:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801f5c8:	9004      	str	r0, [sp, #16]
 801f5ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f5cc:	9003      	str	r0, [sp, #12]
 801f5ce:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801f5d2:	9002      	str	r0, [sp, #8]
 801f5d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f5d6:	9001      	str	r0, [sp, #4]
 801f5d8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801f5dc:	9000      	str	r0, [sp, #0]
 801f5de:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801f5e2:	a80f      	add	r0, sp, #60	; 0x3c
 801f5e4:	f7ff fbe2 	bl	801edac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5ea:	b10b      	cbz	r3, 801f5f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801f5ec:	3302      	adds	r3, #2
 801f5ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f5f0:	9b08      	ldr	r3, [sp, #32]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	f43f af03 	beq.w	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f5f8:	3301      	adds	r3, #1
 801f5fa:	9308      	str	r3, [sp, #32]
 801f5fc:	e6ff      	b.n	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f5fe:	eeb4 7a47 	vcmp.f32	s14, s14
 801f602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f606:	d10b      	bne.n	801f620 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24c>
 801f608:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f60a:	eddf 7a49 	vldr	s15, [pc, #292]	; 801f730 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>
 801f60e:	2300      	movs	r3, #0
 801f610:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801f614:	4283      	cmp	r3, r0
 801f616:	da07      	bge.n	801f628 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x254>
 801f618:	eec7 7a86 	vdiv.f32	s15, s15, s12
 801f61c:	3301      	adds	r3, #1
 801f61e:	e7f9      	b.n	801f614 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x240>
 801f620:	4b44      	ldr	r3, [pc, #272]	; (801f734 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x360>)
 801f622:	9310      	str	r3, [sp, #64]	; 0x40
 801f624:	236e      	movs	r3, #110	; 0x6e
 801f626:	e7c1      	b.n	801f5ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d8>
 801f628:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f62c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f630:	eeb0 7a67 	vmov.f32	s14, s15
 801f634:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f63c:	da27      	bge.n	801f68e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ba>
 801f63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f640:	2100      	movs	r1, #0
 801f642:	eba9 0202 	sub.w	r2, r9, r2
 801f646:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801f64a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f652:	b28c      	uxth	r4, r1
 801f654:	db21      	blt.n	801f69a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f656:	1a53      	subs	r3, r2, r1
 801f658:	2b00      	cmp	r3, #0
 801f65a:	dd1e      	ble.n	801f69a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f65c:	2963      	cmp	r1, #99	; 0x63
 801f65e:	d01b      	beq.n	801f698 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801f660:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f664:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f668:	ee17 3a10 	vmov	r3, s14
 801f66c:	2b09      	cmp	r3, #9
 801f66e:	bfa8      	it	ge
 801f670:	2309      	movge	r3, #9
 801f672:	ee07 3a10 	vmov	s14, r3
 801f676:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f67a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801f67e:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801f682:	eee7 7a66 	vfms.f32	s15, s14, s13
 801f686:	3101      	adds	r1, #1
 801f688:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801f68c:	e7dd      	b.n	801f64a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x276>
 801f68e:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f692:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801f696:	e7cd      	b.n	801f634 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x260>
 801f698:	460c      	mov	r4, r1
 801f69a:	2a63      	cmp	r2, #99	; 0x63
 801f69c:	bfd4      	ite	le
 801f69e:	ebc4 0202 	rsble	r2, r4, r2
 801f6a2:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801f6a6:	2a00      	cmp	r2, #0
 801f6a8:	dd2f      	ble.n	801f70a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801f6aa:	4603      	mov	r3, r0
 801f6ac:	2501      	movs	r5, #1
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	dd0d      	ble.n	801f6ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fa>
 801f6b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f6b6:	3b01      	subs	r3, #1
 801f6b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f6bc:	ee17 1a10 	vmov	r1, s14
 801f6c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f6c4:	fb0b 1505 	mla	r5, fp, r5, r1
 801f6c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f6cc:	e7ef      	b.n	801f6ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2da>
 801f6ce:	2800      	cmp	r0, #0
 801f6d0:	f100 33ff 	add.w	r3, r0, #4294967295
 801f6d4:	bfac      	ite	ge
 801f6d6:	1a18      	subge	r0, r3, r0
 801f6d8:	4618      	movlt	r0, r3
 801f6da:	0064      	lsls	r4, r4, #1
 801f6dc:	900e      	str	r0, [sp, #56]	; 0x38
 801f6de:	230a      	movs	r3, #10
 801f6e0:	b292      	uxth	r2, r2
 801f6e2:	eb08 0104 	add.w	r1, r8, r4
 801f6e6:	4628      	mov	r0, r5
 801f6e8:	f7ff fb2e 	bl	801ed48 <_ZN8touchgfx7Unicode4itoaElPtti>
 801f6ec:	2d01      	cmp	r5, #1
 801f6ee:	dc0a      	bgt.n	801f706 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801f6f0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	bf0c      	ite	eq
 801f6f8:	2300      	moveq	r3, #0
 801f6fa:	232e      	movne	r3, #46	; 0x2e
 801f6fc:	aa42      	add	r2, sp, #264	; 0x108
 801f6fe:	4414      	add	r4, r2
 801f700:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801f704:	e753      	b.n	801f5ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801f706:	232e      	movs	r3, #46	; 0x2e
 801f708:	e7f8      	b.n	801f6fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x328>
 801f70a:	ab42      	add	r3, sp, #264	; 0x108
 801f70c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801f710:	2300      	movs	r3, #0
 801f712:	e7f5      	b.n	801f700 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 801f714:	9a08      	ldr	r2, [sp, #32]
 801f716:	2a00      	cmp	r2, #0
 801f718:	f43f af50 	beq.w	801f5bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801f71c:	7812      	ldrb	r2, [r2, #0]
 801f71e:	e74d      	b.n	801f5bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801f720:	2c00      	cmp	r4, #0
 801f722:	f43f af01 	beq.w	801f528 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801f726:	7824      	ldrb	r4, [r4, #0]
 801f728:	e6fe      	b.n	801f528 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801f72a:	bf00      	nop
 801f72c:	006e0069 	.word	0x006e0069
 801f730:	3f000002 	.word	0x3f000002
 801f734:	0061006e 	.word	0x0061006e

0801f738 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801f738:	b507      	push	{r0, r1, r2, lr}
 801f73a:	9300      	str	r3, [sp, #0]
 801f73c:	4613      	mov	r3, r2
 801f73e:	2200      	movs	r2, #0
 801f740:	f7ff fe48 	bl	801f3d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801f744:	b003      	add	sp, #12
 801f746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f74c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f74c:	4b01      	ldr	r3, [pc, #4]	; (801f754 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f74e:	6018      	str	r0, [r3, #0]
 801f750:	4770      	bx	lr
 801f752:	bf00      	nop
 801f754:	20009808 	.word	0x20009808

0801f758 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f758:	4b06      	ldr	r3, [pc, #24]	; (801f774 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f75a:	881a      	ldrh	r2, [r3, #0]
 801f75c:	4282      	cmp	r2, r0
 801f75e:	d807      	bhi.n	801f770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f760:	4b05      	ldr	r3, [pc, #20]	; (801f778 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f762:	881b      	ldrh	r3, [r3, #0]
 801f764:	4413      	add	r3, r2
 801f766:	4298      	cmp	r0, r3
 801f768:	bfac      	ite	ge
 801f76a:	2000      	movge	r0, #0
 801f76c:	2001      	movlt	r0, #1
 801f76e:	4770      	bx	lr
 801f770:	2000      	movs	r0, #0
 801f772:	4770      	bx	lr
 801f774:	20009828 	.word	0x20009828
 801f778:	2000982c 	.word	0x2000982c

0801f77c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f77c:	b508      	push	{r3, lr}
 801f77e:	4601      	mov	r1, r0
 801f780:	f7ff ffea 	bl	801f758 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f784:	b118      	cbz	r0, 801f78e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f786:	4b02      	ldr	r3, [pc, #8]	; (801f790 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f78e:	bd08      	pop	{r3, pc}
 801f790:	2000980c 	.word	0x2000980c

0801f794 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f798:	4d28      	ldr	r5, [pc, #160]	; (801f83c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f79a:	682b      	ldr	r3, [r5, #0]
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d04a      	beq.n	801f836 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801f7a0:	4a27      	ldr	r2, [pc, #156]	; (801f840 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f7a2:	4e28      	ldr	r6, [pc, #160]	; (801f844 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f7a4:	8810      	ldrh	r0, [r2, #0]
 801f7a6:	f8b6 8000 	ldrh.w	r8, [r6]
 801f7aa:	4c27      	ldr	r4, [pc, #156]	; (801f848 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f7ac:	4f27      	ldr	r7, [pc, #156]	; (801f84c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f7ae:	4440      	add	r0, r8
 801f7b0:	1c41      	adds	r1, r0, #1
 801f7b2:	f021 0101 	bic.w	r1, r1, #1
 801f7b6:	0409      	lsls	r1, r1, #16
 801f7b8:	0c09      	lsrs	r1, r1, #16
 801f7ba:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801f7be:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801f7c2:	eb03 020e 	add.w	r2, r3, lr
 801f7c6:	eb0e 010c 	add.w	r1, lr, ip
 801f7ca:	6022      	str	r2, [r4, #0]
 801f7cc:	185a      	adds	r2, r3, r1
 801f7ce:	603a      	str	r2, [r7, #0]
 801f7d0:	220e      	movs	r2, #14
 801f7d2:	fb02 f208 	mul.w	r2, r2, r8
 801f7d6:	3203      	adds	r2, #3
 801f7d8:	f022 0203 	bic.w	r2, r2, #3
 801f7dc:	4411      	add	r1, r2
 801f7de:	440b      	add	r3, r1
 801f7e0:	491b      	ldr	r1, [pc, #108]	; (801f850 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801f7e2:	600b      	str	r3, [r1, #0]
 801f7e4:	491b      	ldr	r1, [pc, #108]	; (801f854 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	800b      	strh	r3, [r1, #0]
 801f7ea:	491b      	ldr	r1, [pc, #108]	; (801f858 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801f7ec:	6809      	ldr	r1, [r1, #0]
 801f7ee:	eba1 010e 	sub.w	r1, r1, lr
 801f7f2:	eba1 010c 	sub.w	r1, r1, ip
 801f7f6:	1a8a      	subs	r2, r1, r2
 801f7f8:	4918      	ldr	r1, [pc, #96]	; (801f85c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801f7fa:	600a      	str	r2, [r1, #0]
 801f7fc:	4a18      	ldr	r2, [pc, #96]	; (801f860 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801f7fe:	469c      	mov	ip, r3
 801f800:	8013      	strh	r3, [r2, #0]
 801f802:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f806:	4283      	cmp	r3, r0
 801f808:	d10d      	bne.n	801f826 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801f80a:	8835      	ldrh	r5, [r6, #0]
 801f80c:	6838      	ldr	r0, [r7, #0]
 801f80e:	2300      	movs	r3, #0
 801f810:	240e      	movs	r4, #14
 801f812:	429d      	cmp	r5, r3
 801f814:	d90f      	bls.n	801f836 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801f816:	fb04 0203 	mla	r2, r4, r3, r0
 801f81a:	3301      	adds	r3, #1
 801f81c:	7b11      	ldrb	r1, [r2, #12]
 801f81e:	f36f 1145 	bfc	r1, #5, #1
 801f822:	7311      	strb	r1, [r2, #12]
 801f824:	e7f5      	b.n	801f812 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801f826:	682a      	ldr	r2, [r5, #0]
 801f828:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f82c:	6822      	ldr	r2, [r4, #0]
 801f82e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801f832:	3301      	adds	r3, #1
 801f834:	e7e7      	b.n	801f806 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801f836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f83a:	bf00      	nop
 801f83c:	2000980c 	.word	0x2000980c
 801f840:	20009828 	.word	0x20009828
 801f844:	2000982c 	.word	0x2000982c
 801f848:	20009820 	.word	0x20009820
 801f84c:	20009810 	.word	0x20009810
 801f850:	20009818 	.word	0x20009818
 801f854:	2000982a 	.word	0x2000982a
 801f858:	20009814 	.word	0x20009814
 801f85c:	20009824 	.word	0x20009824
 801f860:	2000981c 	.word	0x2000981c

0801f864 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f864:	b510      	push	{r4, lr}
 801f866:	4b10      	ldr	r3, [pc, #64]	; (801f8a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	b9db      	cbnz	r3, 801f8a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801f86c:	b1d1      	cbz	r1, 801f8a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801f86e:	4b0f      	ldr	r3, [pc, #60]	; (801f8ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801f870:	801a      	strh	r2, [r3, #0]
 801f872:	4b0f      	ldr	r3, [pc, #60]	; (801f8b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801f874:	881b      	ldrh	r3, [r3, #0]
 801f876:	b292      	uxth	r2, r2
 801f878:	240e      	movs	r4, #14
 801f87a:	4413      	add	r3, r2
 801f87c:	4362      	muls	r2, r4
 801f87e:	2406      	movs	r4, #6
 801f880:	fb04 2203 	mla	r2, r4, r3, r2
 801f884:	428a      	cmp	r2, r1
 801f886:	d305      	bcc.n	801f894 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801f888:	4b0a      	ldr	r3, [pc, #40]	; (801f8b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801f88a:	4a0b      	ldr	r2, [pc, #44]	; (801f8b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801f88c:	480b      	ldr	r0, [pc, #44]	; (801f8bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801f88e:	2135      	movs	r1, #53	; 0x35
 801f890:	f00e fb46 	bl	802df20 <__assert_func>
 801f894:	4b0a      	ldr	r3, [pc, #40]	; (801f8c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801f896:	6019      	str	r1, [r3, #0]
 801f898:	4b0a      	ldr	r3, [pc, #40]	; (801f8c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801f89a:	6018      	str	r0, [r3, #0]
 801f89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8a0:	f7ff bf78 	b.w	801f794 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f8a4:	bd10      	pop	{r4, pc}
 801f8a6:	bf00      	nop
 801f8a8:	20009818 	.word	0x20009818
 801f8ac:	2000982c 	.word	0x2000982c
 801f8b0:	20009828 	.word	0x20009828
 801f8b4:	080327a5 	.word	0x080327a5
 801f8b8:	0803283a 	.word	0x0803283a
 801f8bc:	08032780 	.word	0x08032780
 801f8c0:	20009814 	.word	0x20009814
 801f8c4:	2000980c 	.word	0x2000980c

0801f8c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f8c8:	b470      	push	{r4, r5, r6}
 801f8ca:	4c07      	ldr	r4, [pc, #28]	; (801f8e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f8cc:	6826      	ldr	r6, [r4, #0]
 801f8ce:	4605      	mov	r5, r0
 801f8d0:	4610      	mov	r0, r2
 801f8d2:	9a03      	ldr	r2, [sp, #12]
 801f8d4:	b936      	cbnz	r6, 801f8e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f8d6:	6025      	str	r5, [r4, #0]
 801f8d8:	4c04      	ldr	r4, [pc, #16]	; (801f8ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f8da:	8021      	strh	r1, [r4, #0]
 801f8dc:	bc70      	pop	{r4, r5, r6}
 801f8de:	4619      	mov	r1, r3
 801f8e0:	f7ff bfc0 	b.w	801f864 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f8e4:	bc70      	pop	{r4, r5, r6}
 801f8e6:	4770      	bx	lr
 801f8e8:	20009830 	.word	0x20009830
 801f8ec:	20009828 	.word	0x20009828

0801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f8f0:	b508      	push	{r3, lr}
 801f8f2:	4b14      	ldr	r3, [pc, #80]	; (801f944 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f8f4:	6819      	ldr	r1, [r3, #0]
 801f8f6:	b931      	cbnz	r1, 801f906 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801f8f8:	4b13      	ldr	r3, [pc, #76]	; (801f948 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f8fa:	4a14      	ldr	r2, [pc, #80]	; (801f94c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f8fc:	4814      	ldr	r0, [pc, #80]	; (801f950 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f8fe:	f240 4185 	movw	r1, #1157	; 0x485
 801f902:	f00e fb0d 	bl	802df20 <__assert_func>
 801f906:	4a13      	ldr	r2, [pc, #76]	; (801f954 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f908:	8803      	ldrh	r3, [r0, #0]
 801f90a:	8812      	ldrh	r2, [r2, #0]
 801f90c:	4293      	cmp	r3, r2
 801f90e:	d204      	bcs.n	801f91a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801f910:	2214      	movs	r2, #20
 801f912:	fb02 1303 	mla	r3, r2, r3, r1
 801f916:	8918      	ldrh	r0, [r3, #8]
 801f918:	bd08      	pop	{r3, pc}
 801f91a:	490f      	ldr	r1, [pc, #60]	; (801f958 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801f91c:	8809      	ldrh	r1, [r1, #0]
 801f91e:	4411      	add	r1, r2
 801f920:	428b      	cmp	r3, r1
 801f922:	da06      	bge.n	801f932 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801f924:	1a9b      	subs	r3, r3, r2
 801f926:	4a0d      	ldr	r2, [pc, #52]	; (801f95c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801f928:	6812      	ldr	r2, [r2, #0]
 801f92a:	210e      	movs	r1, #14
 801f92c:	fb01 2303 	mla	r3, r1, r3, r2
 801f930:	e7f1      	b.n	801f916 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801f932:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f936:	4293      	cmp	r3, r2
 801f938:	bf0a      	itet	eq
 801f93a:	4b09      	ldreq	r3, [pc, #36]	; (801f960 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801f93c:	2000      	movne	r0, #0
 801f93e:	8818      	ldrheq	r0, [r3, #0]
 801f940:	e7ea      	b.n	801f918 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801f942:	bf00      	nop
 801f944:	20009830 	.word	0x20009830
 801f948:	080327fe 	.word	0x080327fe
 801f94c:	080328e7 	.word	0x080328e7
 801f950:	08032780 	.word	0x08032780
 801f954:	20009828 	.word	0x20009828
 801f958:	2000982c 	.word	0x2000982c
 801f95c:	20009810 	.word	0x20009810
 801f960:	2000979c 	.word	0x2000979c

0801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f964:	b508      	push	{r3, lr}
 801f966:	4b14      	ldr	r3, [pc, #80]	; (801f9b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f968:	6819      	ldr	r1, [r3, #0]
 801f96a:	b931      	cbnz	r1, 801f97a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801f96c:	4b13      	ldr	r3, [pc, #76]	; (801f9bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f96e:	4a14      	ldr	r2, [pc, #80]	; (801f9c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f970:	4814      	ldr	r0, [pc, #80]	; (801f9c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f972:	f240 4199 	movw	r1, #1177	; 0x499
 801f976:	f00e fad3 	bl	802df20 <__assert_func>
 801f97a:	4a13      	ldr	r2, [pc, #76]	; (801f9c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f97c:	8803      	ldrh	r3, [r0, #0]
 801f97e:	8812      	ldrh	r2, [r2, #0]
 801f980:	4293      	cmp	r3, r2
 801f982:	d204      	bcs.n	801f98e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801f984:	2214      	movs	r2, #20
 801f986:	fb02 1303 	mla	r3, r2, r3, r1
 801f98a:	8958      	ldrh	r0, [r3, #10]
 801f98c:	bd08      	pop	{r3, pc}
 801f98e:	490f      	ldr	r1, [pc, #60]	; (801f9cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801f990:	8809      	ldrh	r1, [r1, #0]
 801f992:	4411      	add	r1, r2
 801f994:	428b      	cmp	r3, r1
 801f996:	da06      	bge.n	801f9a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801f998:	1a9b      	subs	r3, r3, r2
 801f99a:	4a0d      	ldr	r2, [pc, #52]	; (801f9d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801f99c:	6812      	ldr	r2, [r2, #0]
 801f99e:	210e      	movs	r1, #14
 801f9a0:	fb01 2303 	mla	r3, r1, r3, r2
 801f9a4:	e7f1      	b.n	801f98a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801f9a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f9aa:	4293      	cmp	r3, r2
 801f9ac:	bf0a      	itet	eq
 801f9ae:	4b09      	ldreq	r3, [pc, #36]	; (801f9d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801f9b0:	2000      	movne	r0, #0
 801f9b2:	8818      	ldrheq	r0, [r3, #0]
 801f9b4:	e7ea      	b.n	801f98c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801f9b6:	bf00      	nop
 801f9b8:	20009830 	.word	0x20009830
 801f9bc:	080327fe 	.word	0x080327fe
 801f9c0:	08032913 	.word	0x08032913
 801f9c4:	08032780 	.word	0x08032780
 801f9c8:	20009828 	.word	0x20009828
 801f9cc:	2000982c 	.word	0x2000982c
 801f9d0:	20009810 	.word	0x20009810
 801f9d4:	2000979e 	.word	0x2000979e

0801f9d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f9d8:	b510      	push	{r4, lr}
 801f9da:	4b23      	ldr	r3, [pc, #140]	; (801fa68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f9dc:	681c      	ldr	r4, [r3, #0]
 801f9de:	b934      	cbnz	r4, 801f9ee <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801f9e0:	4b22      	ldr	r3, [pc, #136]	; (801fa6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f9e2:	4a23      	ldr	r2, [pc, #140]	; (801fa70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801f9e4:	4823      	ldr	r0, [pc, #140]	; (801fa74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801f9e6:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801f9ea:	f00e fa99 	bl	802df20 <__assert_func>
 801f9ee:	4a22      	ldr	r2, [pc, #136]	; (801fa78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801f9f0:	880b      	ldrh	r3, [r1, #0]
 801f9f2:	8812      	ldrh	r2, [r2, #0]
 801f9f4:	4293      	cmp	r3, r2
 801f9f6:	d211      	bcs.n	801fa1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801f9f8:	2214      	movs	r2, #20
 801f9fa:	fb02 4303 	mla	r3, r2, r3, r4
 801f9fe:	8a1a      	ldrh	r2, [r3, #16]
 801fa00:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801fa04:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801fa08:	8a5b      	ldrh	r3, [r3, #18]
 801fa0a:	8004      	strh	r4, [r0, #0]
 801fa0c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fa10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fa14:	8041      	strh	r1, [r0, #2]
 801fa16:	8082      	strh	r2, [r0, #4]
 801fa18:	80c3      	strh	r3, [r0, #6]
 801fa1a:	e00e      	b.n	801fa3a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801fa1c:	4917      	ldr	r1, [pc, #92]	; (801fa7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801fa1e:	8809      	ldrh	r1, [r1, #0]
 801fa20:	4411      	add	r1, r2
 801fa22:	428b      	cmp	r3, r1
 801fa24:	da0a      	bge.n	801fa3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801fa26:	1a9b      	subs	r3, r3, r2
 801fa28:	4a15      	ldr	r2, [pc, #84]	; (801fa80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801fa2a:	6812      	ldr	r2, [r2, #0]
 801fa2c:	210e      	movs	r1, #14
 801fa2e:	fb01 2303 	mla	r3, r1, r3, r2
 801fa32:	681a      	ldr	r2, [r3, #0]
 801fa34:	6002      	str	r2, [r0, #0]
 801fa36:	685a      	ldr	r2, [r3, #4]
 801fa38:	6042      	str	r2, [r0, #4]
 801fa3a:	bd10      	pop	{r4, pc}
 801fa3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fa40:	4293      	cmp	r3, r2
 801fa42:	d10b      	bne.n	801fa5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801fa44:	4b0f      	ldr	r3, [pc, #60]	; (801fa84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801fa46:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fa4a:	4b0f      	ldr	r3, [pc, #60]	; (801fa88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801fa4c:	8081      	strh	r1, [r0, #4]
 801fa4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fa52:	80c2      	strh	r2, [r0, #6]
 801fa54:	2300      	movs	r3, #0
 801fa56:	8003      	strh	r3, [r0, #0]
 801fa58:	8043      	strh	r3, [r0, #2]
 801fa5a:	e7ee      	b.n	801fa3a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	8003      	strh	r3, [r0, #0]
 801fa60:	8043      	strh	r3, [r0, #2]
 801fa62:	8083      	strh	r3, [r0, #4]
 801fa64:	e7d8      	b.n	801fa18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801fa66:	bf00      	nop
 801fa68:	20009830 	.word	0x20009830
 801fa6c:	080327fe 	.word	0x080327fe
 801fa70:	08032880 	.word	0x08032880
 801fa74:	08032780 	.word	0x08032780
 801fa78:	20009828 	.word	0x20009828
 801fa7c:	2000982c 	.word	0x2000982c
 801fa80:	20009810 	.word	0x20009810
 801fa84:	2000979c 	.word	0x2000979c
 801fa88:	2000979e 	.word	0x2000979e

0801fa8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801fa8c:	4b18      	ldr	r3, [pc, #96]	; (801faf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	b34b      	cbz	r3, 801fae6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fa92:	4a18      	ldr	r2, [pc, #96]	; (801faf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801fa94:	8800      	ldrh	r0, [r0, #0]
 801fa96:	8812      	ldrh	r2, [r2, #0]
 801fa98:	4290      	cmp	r0, r2
 801fa9a:	d211      	bcs.n	801fac0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801fa9c:	2214      	movs	r2, #20
 801fa9e:	fb02 3300 	mla	r3, r2, r0, r3
 801faa2:	8a1a      	ldrh	r2, [r3, #16]
 801faa4:	8919      	ldrh	r1, [r3, #8]
 801faa6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801faaa:	428a      	cmp	r2, r1
 801faac:	db1d      	blt.n	801faea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801faae:	8a58      	ldrh	r0, [r3, #18]
 801fab0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801fab4:	895b      	ldrh	r3, [r3, #10]
 801fab6:	4298      	cmp	r0, r3
 801fab8:	bfac      	ite	ge
 801faba:	2000      	movge	r0, #0
 801fabc:	2001      	movlt	r0, #1
 801fabe:	4770      	bx	lr
 801fac0:	4b0d      	ldr	r3, [pc, #52]	; (801faf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801fac2:	881b      	ldrh	r3, [r3, #0]
 801fac4:	4413      	add	r3, r2
 801fac6:	4298      	cmp	r0, r3
 801fac8:	da0d      	bge.n	801fae6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801faca:	4b0c      	ldr	r3, [pc, #48]	; (801fafc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801facc:	681b      	ldr	r3, [r3, #0]
 801face:	1a80      	subs	r0, r0, r2
 801fad0:	220e      	movs	r2, #14
 801fad2:	fb02 3300 	mla	r3, r2, r0, r3
 801fad6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fada:	891a      	ldrh	r2, [r3, #8]
 801fadc:	4291      	cmp	r1, r2
 801fade:	db04      	blt.n	801faea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801fae0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801fae4:	e7e6      	b.n	801fab4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801fae6:	2000      	movs	r0, #0
 801fae8:	4770      	bx	lr
 801faea:	2001      	movs	r0, #1
 801faec:	4770      	bx	lr
 801faee:	bf00      	nop
 801faf0:	20009830 	.word	0x20009830
 801faf4:	20009828 	.word	0x20009828
 801faf8:	2000982c 	.word	0x2000982c
 801fafc:	20009810 	.word	0x20009810

0801fb00 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fb00:	b508      	push	{r3, lr}
 801fb02:	4b12      	ldr	r3, [pc, #72]	; (801fb4c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fb04:	6819      	ldr	r1, [r3, #0]
 801fb06:	b931      	cbnz	r1, 801fb16 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fb08:	4b11      	ldr	r3, [pc, #68]	; (801fb50 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fb0a:	4a12      	ldr	r2, [pc, #72]	; (801fb54 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fb0c:	4812      	ldr	r0, [pc, #72]	; (801fb58 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fb0e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801fb12:	f00e fa05 	bl	802df20 <__assert_func>
 801fb16:	8803      	ldrh	r3, [r0, #0]
 801fb18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fb1c:	4293      	cmp	r3, r2
 801fb1e:	d012      	beq.n	801fb46 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fb20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fb24:	4293      	cmp	r3, r2
 801fb26:	d103      	bne.n	801fb30 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801fb28:	4b0c      	ldr	r3, [pc, #48]	; (801fb5c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801fb2e:	bd08      	pop	{r3, pc}
 801fb30:	4a0b      	ldr	r2, [pc, #44]	; (801fb60 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801fb32:	6812      	ldr	r2, [r2, #0]
 801fb34:	b11a      	cbz	r2, 801fb3e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801fb36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fb3a:	2800      	cmp	r0, #0
 801fb3c:	d1f7      	bne.n	801fb2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fb3e:	2214      	movs	r2, #20
 801fb40:	4353      	muls	r3, r2
 801fb42:	58c8      	ldr	r0, [r1, r3]
 801fb44:	e7f3      	b.n	801fb2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fb46:	2000      	movs	r0, #0
 801fb48:	e7f1      	b.n	801fb2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fb4a:	bf00      	nop
 801fb4c:	20009830 	.word	0x20009830
 801fb50:	080327fe 	.word	0x080327fe
 801fb54:	080328b6 	.word	0x080328b6
 801fb58:	08032780 	.word	0x08032780
 801fb5c:	200097a8 	.word	0x200097a8
 801fb60:	2000980c 	.word	0x2000980c

0801fb64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801fb64:	8802      	ldrh	r2, [r0, #0]
 801fb66:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801fb6a:	429a      	cmp	r2, r3
 801fb6c:	d845      	bhi.n	801fbfa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fb6e:	4b24      	ldr	r3, [pc, #144]	; (801fc00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fb70:	8818      	ldrh	r0, [r3, #0]
 801fb72:	4282      	cmp	r2, r0
 801fb74:	d221      	bcs.n	801fbba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801fb76:	4b23      	ldr	r3, [pc, #140]	; (801fc04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801fb78:	6819      	ldr	r1, [r3, #0]
 801fb7a:	2314      	movs	r3, #20
 801fb7c:	fb03 1302 	mla	r3, r3, r2, r1
 801fb80:	6858      	ldr	r0, [r3, #4]
 801fb82:	2800      	cmp	r0, #0
 801fb84:	d03a      	beq.n	801fbfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fb86:	4920      	ldr	r1, [pc, #128]	; (801fc08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fb88:	6809      	ldr	r1, [r1, #0]
 801fb8a:	2900      	cmp	r1, #0
 801fb8c:	d036      	beq.n	801fbfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fb8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fb92:	2900      	cmp	r1, #0
 801fb94:	d032      	beq.n	801fbfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fb96:	891a      	ldrh	r2, [r3, #8]
 801fb98:	8958      	ldrh	r0, [r3, #10]
 801fb9a:	4350      	muls	r0, r2
 801fb9c:	7c5a      	ldrb	r2, [r3, #17]
 801fb9e:	7cdb      	ldrb	r3, [r3, #19]
 801fba0:	0952      	lsrs	r2, r2, #5
 801fba2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fba6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fbaa:	2b0b      	cmp	r3, #11
 801fbac:	bf18      	it	ne
 801fbae:	0040      	lslne	r0, r0, #1
 801fbb0:	3003      	adds	r0, #3
 801fbb2:	f020 0003 	bic.w	r0, r0, #3
 801fbb6:	4408      	add	r0, r1
 801fbb8:	4770      	bx	lr
 801fbba:	4b14      	ldr	r3, [pc, #80]	; (801fc0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801fbbc:	881b      	ldrh	r3, [r3, #0]
 801fbbe:	4403      	add	r3, r0
 801fbc0:	429a      	cmp	r2, r3
 801fbc2:	da1a      	bge.n	801fbfa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fbc4:	4b12      	ldr	r3, [pc, #72]	; (801fc10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	1a10      	subs	r0, r2, r0
 801fbca:	210e      	movs	r1, #14
 801fbcc:	fb01 3000 	mla	r0, r1, r0, r3
 801fbd0:	7b03      	ldrb	r3, [r0, #12]
 801fbd2:	f003 031f 	and.w	r3, r3, #31
 801fbd6:	2b0b      	cmp	r3, #11
 801fbd8:	d10b      	bne.n	801fbf2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fbda:	8903      	ldrh	r3, [r0, #8]
 801fbdc:	8940      	ldrh	r0, [r0, #10]
 801fbde:	4358      	muls	r0, r3
 801fbe0:	4b09      	ldr	r3, [pc, #36]	; (801fc08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fbe2:	6819      	ldr	r1, [r3, #0]
 801fbe4:	3003      	adds	r0, #3
 801fbe6:	f020 0303 	bic.w	r3, r0, #3
 801fbea:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fbee:	4418      	add	r0, r3
 801fbf0:	4770      	bx	lr
 801fbf2:	2b0d      	cmp	r3, #13
 801fbf4:	d101      	bne.n	801fbfa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fbf6:	300d      	adds	r0, #13
 801fbf8:	4770      	bx	lr
 801fbfa:	2000      	movs	r0, #0
 801fbfc:	4770      	bx	lr
 801fbfe:	bf00      	nop
 801fc00:	20009828 	.word	0x20009828
 801fc04:	20009830 	.word	0x20009830
 801fc08:	2000980c 	.word	0x2000980c
 801fc0c:	2000982c 	.word	0x2000982c
 801fc10:	20009810 	.word	0x20009810

0801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fc14:	b510      	push	{r4, lr}
 801fc16:	4b17      	ldr	r3, [pc, #92]	; (801fc74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801fc18:	6819      	ldr	r1, [r3, #0]
 801fc1a:	8803      	ldrh	r3, [r0, #0]
 801fc1c:	b1e9      	cbz	r1, 801fc5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801fc1e:	4a16      	ldr	r2, [pc, #88]	; (801fc78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801fc20:	8812      	ldrh	r2, [r2, #0]
 801fc22:	429a      	cmp	r2, r3
 801fc24:	d90a      	bls.n	801fc3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801fc26:	2214      	movs	r2, #20
 801fc28:	fb02 1303 	mla	r3, r2, r3, r1
 801fc2c:	7c58      	ldrb	r0, [r3, #17]
 801fc2e:	0942      	lsrs	r2, r0, #5
 801fc30:	7cd8      	ldrb	r0, [r3, #19]
 801fc32:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801fc36:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801fc3a:	bd10      	pop	{r4, pc}
 801fc3c:	490f      	ldr	r1, [pc, #60]	; (801fc7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801fc3e:	8809      	ldrh	r1, [r1, #0]
 801fc40:	4411      	add	r1, r2
 801fc42:	428b      	cmp	r3, r1
 801fc44:	da09      	bge.n	801fc5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801fc46:	1a9b      	subs	r3, r3, r2
 801fc48:	4a0d      	ldr	r2, [pc, #52]	; (801fc80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801fc4a:	6812      	ldr	r2, [r2, #0]
 801fc4c:	210e      	movs	r1, #14
 801fc4e:	fb01 2303 	mla	r3, r1, r3, r2
 801fc52:	7b18      	ldrb	r0, [r3, #12]
 801fc54:	f000 001f 	and.w	r0, r0, #31
 801fc58:	e7ef      	b.n	801fc3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fc5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fc5e:	4293      	cmp	r3, r2
 801fc60:	d106      	bne.n	801fc70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801fc62:	f7f0 f9bf 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 801fc66:	6803      	ldr	r3, [r0, #0]
 801fc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc6e:	4718      	bx	r3
 801fc70:	2000      	movs	r0, #0
 801fc72:	e7e2      	b.n	801fc3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fc74:	20009830 	.word	0x20009830
 801fc78:	20009828 	.word	0x20009828
 801fc7c:	2000982c 	.word	0x2000982c
 801fc80:	20009810 	.word	0x20009810

0801fc84 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801fc84:	2010      	movs	r0, #16
 801fc86:	4770      	bx	lr

0801fc88 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801fc88:	2000      	movs	r0, #0
 801fc8a:	4770      	bx	lr

0801fc8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801fc8c:	2bff      	cmp	r3, #255	; 0xff
 801fc8e:	d050      	beq.n	801fd32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801fc90:	2a0b      	cmp	r2, #11
 801fc92:	d04a      	beq.n	801fd2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fc94:	d80e      	bhi.n	801fcb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801fc96:	2a03      	cmp	r2, #3
 801fc98:	d03f      	beq.n	801fd1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801fc9a:	d804      	bhi.n	801fca6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801fc9c:	2a01      	cmp	r2, #1
 801fc9e:	d03e      	beq.n	801fd1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801fca0:	d93f      	bls.n	801fd22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801fca2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801fca4:	4770      	bx	lr
 801fca6:	2a09      	cmp	r2, #9
 801fca8:	d03f      	beq.n	801fd2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fcaa:	d83c      	bhi.n	801fd26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fcac:	2a08      	cmp	r2, #8
 801fcae:	d03a      	beq.n	801fd26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fcb0:	2000      	movs	r0, #0
 801fcb2:	4770      	bx	lr
 801fcb4:	2a2f      	cmp	r2, #47	; 0x2f
 801fcb6:	d024      	beq.n	801fd02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801fcb8:	d80d      	bhi.n	801fcd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801fcba:	2a2d      	cmp	r2, #45	; 0x2d
 801fcbc:	d014      	beq.n	801fce8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801fcbe:	d826      	bhi.n	801fd0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fcc0:	2a2c      	cmp	r2, #44	; 0x2c
 801fcc2:	d1f5      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcc4:	684b      	ldr	r3, [r1, #4]
 801fcc6:	781b      	ldrb	r3, [r3, #0]
 801fcc8:	2b01      	cmp	r3, #1
 801fcca:	d018      	beq.n	801fcfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801fccc:	d323      	bcc.n	801fd16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801fcce:	2b02      	cmp	r3, #2
 801fcd0:	d1ee      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcd2:	6880      	ldr	r0, [r0, #8]
 801fcd4:	4770      	bx	lr
 801fcd6:	2a31      	cmp	r2, #49	; 0x31
 801fcd8:	d004      	beq.n	801fce4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801fcda:	d328      	bcc.n	801fd2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801fcdc:	2a32      	cmp	r2, #50	; 0x32
 801fcde:	d026      	beq.n	801fd2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801fce0:	2a33      	cmp	r2, #51	; 0x33
 801fce2:	d1e5      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fce4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801fce6:	4770      	bx	lr
 801fce8:	684b      	ldr	r3, [r1, #4]
 801fcea:	781b      	ldrb	r3, [r3, #0]
 801fcec:	2b01      	cmp	r3, #1
 801fcee:	d004      	beq.n	801fcfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801fcf0:	d30b      	bcc.n	801fd0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fcf2:	2b02      	cmp	r3, #2
 801fcf4:	d1dc      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcf6:	6900      	ldr	r0, [r0, #16]
 801fcf8:	4770      	bx	lr
 801fcfa:	6a00      	ldr	r0, [r0, #32]
 801fcfc:	4770      	bx	lr
 801fcfe:	6980      	ldr	r0, [r0, #24]
 801fd00:	4770      	bx	lr
 801fd02:	684b      	ldr	r3, [r1, #4]
 801fd04:	781b      	ldrb	r3, [r3, #0]
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d1d2      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801fd0c:	4770      	bx	lr
 801fd0e:	684b      	ldr	r3, [r1, #4]
 801fd10:	781b      	ldrb	r3, [r3, #0]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d1cc      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd16:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801fd18:	4770      	bx	lr
 801fd1a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801fd1c:	4770      	bx	lr
 801fd1e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801fd20:	4770      	bx	lr
 801fd22:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fd24:	4770      	bx	lr
 801fd26:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801fd28:	4770      	bx	lr
 801fd2a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801fd2c:	4770      	bx	lr
 801fd2e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801fd30:	4770      	bx	lr
 801fd32:	2a0b      	cmp	r2, #11
 801fd34:	d049      	beq.n	801fdca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801fd36:	d80e      	bhi.n	801fd56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801fd38:	2a03      	cmp	r2, #3
 801fd3a:	d040      	beq.n	801fdbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801fd3c:	d804      	bhi.n	801fd48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801fd3e:	2a01      	cmp	r2, #1
 801fd40:	d03f      	beq.n	801fdc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801fd42:	d940      	bls.n	801fdc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801fd44:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801fd46:	4770      	bx	lr
 801fd48:	2a09      	cmp	r2, #9
 801fd4a:	d03e      	beq.n	801fdca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801fd4c:	d801      	bhi.n	801fd52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801fd4e:	2a08      	cmp	r2, #8
 801fd50:	d1ae      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd52:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801fd54:	4770      	bx	lr
 801fd56:	2a2f      	cmp	r2, #47	; 0x2f
 801fd58:	d024      	beq.n	801fda4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801fd5a:	d80d      	bhi.n	801fd78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801fd5c:	2a2d      	cmp	r2, #45	; 0x2d
 801fd5e:	d014      	beq.n	801fd8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801fd60:	d826      	bhi.n	801fdb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801fd62:	2a2c      	cmp	r2, #44	; 0x2c
 801fd64:	d1a4      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd66:	684b      	ldr	r3, [r1, #4]
 801fd68:	781b      	ldrb	r3, [r3, #0]
 801fd6a:	2b01      	cmp	r3, #1
 801fd6c:	d018      	beq.n	801fda0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801fd6e:	d324      	bcc.n	801fdba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801fd70:	2b02      	cmp	r3, #2
 801fd72:	d19d      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd74:	68c0      	ldr	r0, [r0, #12]
 801fd76:	4770      	bx	lr
 801fd78:	2a31      	cmp	r2, #49	; 0x31
 801fd7a:	d004      	beq.n	801fd86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801fd7c:	d327      	bcc.n	801fdce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801fd7e:	2a32      	cmp	r2, #50	; 0x32
 801fd80:	d025      	beq.n	801fdce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801fd82:	2a33      	cmp	r2, #51	; 0x33
 801fd84:	d194      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd86:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801fd88:	4770      	bx	lr
 801fd8a:	684b      	ldr	r3, [r1, #4]
 801fd8c:	781b      	ldrb	r3, [r3, #0]
 801fd8e:	2b01      	cmp	r3, #1
 801fd90:	d004      	beq.n	801fd9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801fd92:	d30b      	bcc.n	801fdac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801fd94:	2b02      	cmp	r3, #2
 801fd96:	d18b      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd98:	6940      	ldr	r0, [r0, #20]
 801fd9a:	4770      	bx	lr
 801fd9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fd9e:	4770      	bx	lr
 801fda0:	69c0      	ldr	r0, [r0, #28]
 801fda2:	4770      	bx	lr
 801fda4:	684b      	ldr	r3, [r1, #4]
 801fda6:	781b      	ldrb	r3, [r3, #0]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d181      	bne.n	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fdac:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801fdae:	4770      	bx	lr
 801fdb0:	684b      	ldr	r3, [r1, #4]
 801fdb2:	781b      	ldrb	r3, [r3, #0]
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	f47f af7b 	bne.w	801fcb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fdba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fdbc:	4770      	bx	lr
 801fdbe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801fdc0:	4770      	bx	lr
 801fdc2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801fdc4:	4770      	bx	lr
 801fdc6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801fdc8:	4770      	bx	lr
 801fdca:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801fdcc:	4770      	bx	lr
 801fdce:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801fdd0:	4770      	bx	lr

0801fdd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdd6:	b087      	sub	sp, #28
 801fdd8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fdda:	9205      	str	r2, [sp, #20]
 801fddc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fde0:	9202      	str	r2, [sp, #8]
 801fde2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fde6:	9101      	str	r1, [sp, #4]
 801fde8:	6841      	ldr	r1, [r0, #4]
 801fdea:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801fdee:	fb01 2404 	mla	r4, r1, r4, r2
 801fdf2:	6802      	ldr	r2, [r0, #0]
 801fdf4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fdf8:	f8de 2000 	ldr.w	r2, [lr]
 801fdfc:	9203      	str	r2, [sp, #12]
 801fdfe:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fe02:	3204      	adds	r2, #4
 801fe04:	9204      	str	r2, [sp, #16]
 801fe06:	9a02      	ldr	r2, [sp, #8]
 801fe08:	43d6      	mvns	r6, r2
 801fe0a:	b2f6      	uxtb	r6, r6
 801fe0c:	9a01      	ldr	r2, [sp, #4]
 801fe0e:	2a00      	cmp	r2, #0
 801fe10:	dc03      	bgt.n	801fe1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fe12:	9a05      	ldr	r2, [sp, #20]
 801fe14:	2a00      	cmp	r2, #0
 801fe16:	f340 8129 	ble.w	802006c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fe1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fe1c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801fe20:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801fe24:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fe28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fe2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	dd0e      	ble.n	801fe50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fe32:	1408      	asrs	r0, r1, #16
 801fe34:	d405      	bmi.n	801fe42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fe36:	4560      	cmp	r0, ip
 801fe38:	da03      	bge.n	801fe42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fe3a:	1410      	asrs	r0, r2, #16
 801fe3c:	d401      	bmi.n	801fe42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fe3e:	42b8      	cmp	r0, r7
 801fe40:	db07      	blt.n	801fe52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fe42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fe44:	4401      	add	r1, r0
 801fe46:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fe48:	3b01      	subs	r3, #1
 801fe4a:	4402      	add	r2, r0
 801fe4c:	3402      	adds	r4, #2
 801fe4e:	e7ee      	b.n	801fe2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fe50:	d071      	beq.n	801ff36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe52:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fe54:	1e58      	subs	r0, r3, #1
 801fe56:	fb05 1500 	mla	r5, r5, r0, r1
 801fe5a:	142d      	asrs	r5, r5, #16
 801fe5c:	d45f      	bmi.n	801ff1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe5e:	4565      	cmp	r5, ip
 801fe60:	da5d      	bge.n	801ff1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe62:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fe64:	fb05 2000 	mla	r0, r5, r0, r2
 801fe68:	1400      	asrs	r0, r0, #16
 801fe6a:	d458      	bmi.n	801ff1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe6c:	42b8      	cmp	r0, r7
 801fe6e:	da56      	bge.n	801ff1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe70:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801fe74:	4699      	mov	r9, r3
 801fe76:	46a2      	mov	sl, r4
 801fe78:	f1b9 0f00 	cmp.w	r9, #0
 801fe7c:	dd57      	ble.n	801ff2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801fe7e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fe82:	9803      	ldr	r0, [sp, #12]
 801fe84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fe88:	140d      	asrs	r5, r1, #16
 801fe8a:	fb07 000c 	mla	r0, r7, ip, r0
 801fe8e:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe92:	5d40      	ldrb	r0, [r0, r5]
 801fe94:	9d04      	ldr	r5, [sp, #16]
 801fe96:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801fe9a:	f8ba 5000 	ldrh.w	r5, [sl]
 801fe9e:	122f      	asrs	r7, r5, #8
 801fea0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fea4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fea8:	fb17 f706 	smulbb	r7, r7, r6
 801feac:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801feb0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801feb4:	00ed      	lsls	r5, r5, #3
 801feb6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801feba:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801febe:	10c7      	asrs	r7, r0, #3
 801fec0:	b2ed      	uxtb	r5, r5
 801fec2:	00c0      	lsls	r0, r0, #3
 801fec4:	fb18 f806 	smulbb	r8, r8, r6
 801fec8:	fb15 f506 	smulbb	r5, r5, r6
 801fecc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fed0:	b2c0      	uxtb	r0, r0
 801fed2:	fa1f fc8c 	uxth.w	ip, ip
 801fed6:	fb07 870b 	mla	r7, r7, fp, r8
 801feda:	fb00 500b 	mla	r0, r0, fp, r5
 801fede:	b280      	uxth	r0, r0
 801fee0:	b2bf      	uxth	r7, r7
 801fee2:	f10c 0501 	add.w	r5, ip, #1
 801fee6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801feea:	f107 0801 	add.w	r8, r7, #1
 801feee:	1c45      	adds	r5, r0, #1
 801fef0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fef4:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fef8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fefa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fefe:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ff02:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ff06:	ea45 0c0c 	orr.w	ip, r5, ip
 801ff0a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ff0e:	4401      	add	r1, r0
 801ff10:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ff12:	ea4c 0c08 	orr.w	ip, ip, r8
 801ff16:	f82a cb02 	strh.w	ip, [sl], #2
 801ff1a:	4402      	add	r2, r0
 801ff1c:	e7ac      	b.n	801fe78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ff1e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ff22:	f04f 0800 	mov.w	r8, #0
 801ff26:	eb03 0008 	add.w	r0, r3, r8
 801ff2a:	2800      	cmp	r0, #0
 801ff2c:	dc41      	bgt.n	801ffb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ff2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff36:	9b01      	ldr	r3, [sp, #4]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	f340 8097 	ble.w	802006c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ff3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff58:	eef0 6a62 	vmov.f32	s13, s5
 801ff5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff64:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff68:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ff6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff70:	eef0 6a43 	vmov.f32	s13, s6
 801ff74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff78:	ee12 2a90 	vmov	r2, s5
 801ff7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff80:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff84:	ee13 2a10 	vmov	r2, s6
 801ff88:	9313      	str	r3, [sp, #76]	; 0x4c
 801ff8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff90:	9314      	str	r3, [sp, #80]	; 0x50
 801ff92:	9b01      	ldr	r3, [sp, #4]
 801ff94:	9a05      	ldr	r2, [sp, #20]
 801ff96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff9a:	3b01      	subs	r3, #1
 801ff9c:	9301      	str	r3, [sp, #4]
 801ff9e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ffa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffa4:	eeb0 3a67 	vmov.f32	s6, s15
 801ffa8:	bf08      	it	eq
 801ffaa:	4613      	moveq	r3, r2
 801ffac:	eef0 2a47 	vmov.f32	s5, s14
 801ffb0:	e72c      	b.n	801fe0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ffb2:	140f      	asrs	r7, r1, #16
 801ffb4:	d453      	bmi.n	802005e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ffb6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ffba:	42bd      	cmp	r5, r7
 801ffbc:	dd4f      	ble.n	802005e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ffbe:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ffc2:	d44c      	bmi.n	802005e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ffc4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ffc8:	4560      	cmp	r0, ip
 801ffca:	dd48      	ble.n	802005e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ffcc:	9803      	ldr	r0, [sp, #12]
 801ffce:	b22d      	sxth	r5, r5
 801ffd0:	fb0c 0505 	mla	r5, ip, r5, r0
 801ffd4:	5de8      	ldrb	r0, [r5, r7]
 801ffd6:	9d04      	ldr	r5, [sp, #16]
 801ffd8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ffdc:	f06f 0501 	mvn.w	r5, #1
 801ffe0:	fb05 fb08 	mul.w	fp, r5, r8
 801ffe4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ffe8:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ffec:	122f      	asrs	r7, r5, #8
 801ffee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fff2:	fb17 f706 	smulbb	r7, r7, r6
 801fff6:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801fffa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fffe:	00ed      	lsls	r5, r5, #3
 8020000:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020004:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020008:	10c7      	asrs	r7, r0, #3
 802000a:	b2ed      	uxtb	r5, r5
 802000c:	00c0      	lsls	r0, r0, #3
 802000e:	fb19 f906 	smulbb	r9, r9, r6
 8020012:	fb15 f506 	smulbb	r5, r5, r6
 8020016:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802001a:	b2c0      	uxtb	r0, r0
 802001c:	fa1f fc8c 	uxth.w	ip, ip
 8020020:	fb07 970a 	mla	r7, r7, sl, r9
 8020024:	fb00 500a 	mla	r0, r0, sl, r5
 8020028:	b2bf      	uxth	r7, r7
 802002a:	b280      	uxth	r0, r0
 802002c:	f10c 0501 	add.w	r5, ip, #1
 8020030:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020034:	f107 0901 	add.w	r9, r7, #1
 8020038:	1c45      	adds	r5, r0, #1
 802003a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802003e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020042:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020046:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802004a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802004e:	ea45 0c0c 	orr.w	ip, r5, ip
 8020052:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020056:	ea4c 0c09 	orr.w	ip, ip, r9
 802005a:	f824 c00b 	strh.w	ip, [r4, fp]
 802005e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020060:	4401      	add	r1, r0
 8020062:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020064:	f108 38ff 	add.w	r8, r8, #4294967295
 8020068:	4402      	add	r2, r0
 802006a:	e75c      	b.n	801ff26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802006c:	b007      	add	sp, #28
 802006e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020072 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020076:	b085      	sub	sp, #20
 8020078:	4693      	mov	fp, r2
 802007a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802007c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802007e:	6870      	ldr	r0, [r6, #4]
 8020080:	9100      	str	r1, [sp, #0]
 8020082:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020086:	fb00 2404 	mla	r4, r0, r4, r2
 802008a:	6832      	ldr	r2, [r6, #0]
 802008c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020090:	682a      	ldr	r2, [r5, #0]
 8020092:	9201      	str	r2, [sp, #4]
 8020094:	686a      	ldr	r2, [r5, #4]
 8020096:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802009a:	3204      	adds	r2, #4
 802009c:	9202      	str	r2, [sp, #8]
 802009e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200a2:	9a00      	ldr	r2, [sp, #0]
 80200a4:	2a00      	cmp	r2, #0
 80200a6:	dc03      	bgt.n	80200b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80200a8:	f1bb 0f00 	cmp.w	fp, #0
 80200ac:	f340 80a0 	ble.w	80201f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80200b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80200b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80200b6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80200ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80200be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80200c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	dd0c      	ble.n	80200e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80200c8:	1406      	asrs	r6, r0, #16
 80200ca:	d405      	bmi.n	80200d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80200cc:	454e      	cmp	r6, r9
 80200ce:	da03      	bge.n	80200d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80200d0:	1416      	asrs	r6, r2, #16
 80200d2:	d401      	bmi.n	80200d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80200d4:	4546      	cmp	r6, r8
 80200d6:	db05      	blt.n	80200e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80200d8:	4470      	add	r0, lr
 80200da:	4462      	add	r2, ip
 80200dc:	3b01      	subs	r3, #1
 80200de:	3402      	adds	r4, #2
 80200e0:	e7f0      	b.n	80200c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80200e2:	d00f      	beq.n	8020104 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80200e4:	1e5e      	subs	r6, r3, #1
 80200e6:	fb0e 0706 	mla	r7, lr, r6, r0
 80200ea:	143f      	asrs	r7, r7, #16
 80200ec:	d541      	bpl.n	8020172 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80200ee:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80200f2:	4698      	mov	r8, r3
 80200f4:	9603      	str	r6, [sp, #12]
 80200f6:	f1b8 0f00 	cmp.w	r8, #0
 80200fa:	dc59      	bgt.n	80201b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80200fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020100:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020104:	9b00      	ldr	r3, [sp, #0]
 8020106:	2b00      	cmp	r3, #0
 8020108:	dd72      	ble.n	80201f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 802010a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802010e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020112:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020118:	ee31 1a05 	vadd.f32	s2, s2, s10
 802011c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020120:	eeb0 6a62 	vmov.f32	s12, s5
 8020124:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020128:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802012c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020130:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020134:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020138:	eeb0 6a43 	vmov.f32	s12, s6
 802013c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020140:	ee12 2a90 	vmov	r2, s5
 8020144:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020148:	fb92 fef3 	sdiv	lr, r2, r3
 802014c:	ee13 2a10 	vmov	r2, s6
 8020150:	fb92 fcf3 	sdiv	ip, r2, r3
 8020154:	9b00      	ldr	r3, [sp, #0]
 8020156:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802015a:	3b01      	subs	r3, #1
 802015c:	9300      	str	r3, [sp, #0]
 802015e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020164:	eeb0 3a67 	vmov.f32	s6, s15
 8020168:	bf08      	it	eq
 802016a:	465b      	moveq	r3, fp
 802016c:	eef0 2a47 	vmov.f32	s5, s14
 8020170:	e797      	b.n	80200a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020172:	454f      	cmp	r7, r9
 8020174:	dabb      	bge.n	80200ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020176:	fb0c 2606 	mla	r6, ip, r6, r2
 802017a:	1436      	asrs	r6, r6, #16
 802017c:	d4b7      	bmi.n	80200ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802017e:	4546      	cmp	r6, r8
 8020180:	dab5      	bge.n	80200ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020182:	461e      	mov	r6, r3
 8020184:	46a0      	mov	r8, r4
 8020186:	2e00      	cmp	r6, #0
 8020188:	ddb8      	ble.n	80200fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802018a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802018e:	9901      	ldr	r1, [sp, #4]
 8020190:	1417      	asrs	r7, r2, #16
 8020192:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020196:	fb0a 1707 	mla	r7, sl, r7, r1
 802019a:	9902      	ldr	r1, [sp, #8]
 802019c:	f817 7009 	ldrb.w	r7, [r7, r9]
 80201a0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80201a4:	f828 7b02 	strh.w	r7, [r8], #2
 80201a8:	4470      	add	r0, lr
 80201aa:	4462      	add	r2, ip
 80201ac:	3e01      	subs	r6, #1
 80201ae:	e7ea      	b.n	8020186 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80201b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80201b4:	d417      	bmi.n	80201e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80201b6:	68ae      	ldr	r6, [r5, #8]
 80201b8:	454e      	cmp	r6, r9
 80201ba:	dd14      	ble.n	80201e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80201bc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80201c0:	d411      	bmi.n	80201e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80201c2:	68ef      	ldr	r7, [r5, #12]
 80201c4:	4557      	cmp	r7, sl
 80201c6:	dd0e      	ble.n	80201e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80201c8:	9f01      	ldr	r7, [sp, #4]
 80201ca:	b236      	sxth	r6, r6
 80201cc:	fb0a 7606 	mla	r6, sl, r6, r7
 80201d0:	9f02      	ldr	r7, [sp, #8]
 80201d2:	f816 6009 	ldrb.w	r6, [r6, r9]
 80201d6:	f06f 0101 	mvn.w	r1, #1
 80201da:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80201de:	fb01 f608 	mul.w	r6, r1, r8
 80201e2:	9903      	ldr	r1, [sp, #12]
 80201e4:	538f      	strh	r7, [r1, r6]
 80201e6:	4470      	add	r0, lr
 80201e8:	4462      	add	r2, ip
 80201ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80201ee:	e782      	b.n	80200f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80201f0:	b005      	add	sp, #20
 80201f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201fa:	b087      	sub	sp, #28
 80201fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80201fe:	9205      	str	r2, [sp, #20]
 8020200:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020204:	9203      	str	r2, [sp, #12]
 8020206:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 802020a:	9102      	str	r1, [sp, #8]
 802020c:	6861      	ldr	r1, [r4, #4]
 802020e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020212:	fb01 2000 	mla	r0, r1, r0, r2
 8020216:	6822      	ldr	r2, [r4, #0]
 8020218:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802021c:	9200      	str	r2, [sp, #0]
 802021e:	f8dc 2000 	ldr.w	r2, [ip]
 8020222:	9204      	str	r2, [sp, #16]
 8020224:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020228:	3204      	adds	r2, #4
 802022a:	9201      	str	r2, [sp, #4]
 802022c:	9a03      	ldr	r2, [sp, #12]
 802022e:	43d5      	mvns	r5, r2
 8020230:	b2ed      	uxtb	r5, r5
 8020232:	9a02      	ldr	r2, [sp, #8]
 8020234:	2a00      	cmp	r2, #0
 8020236:	dc03      	bgt.n	8020240 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020238:	9a05      	ldr	r2, [sp, #20]
 802023a:	2a00      	cmp	r2, #0
 802023c:	f340 812c 	ble.w	8020498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020240:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020242:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020246:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802024a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802024e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020250:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020254:	2b00      	cmp	r3, #0
 8020256:	dd10      	ble.n	802027a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020258:	140c      	asrs	r4, r1, #16
 802025a:	d405      	bmi.n	8020268 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802025c:	4574      	cmp	r4, lr
 802025e:	da03      	bge.n	8020268 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020260:	1414      	asrs	r4, r2, #16
 8020262:	d401      	bmi.n	8020268 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020264:	42bc      	cmp	r4, r7
 8020266:	db09      	blt.n	802027c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020268:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802026a:	9800      	ldr	r0, [sp, #0]
 802026c:	4421      	add	r1, r4
 802026e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020270:	3002      	adds	r0, #2
 8020272:	4422      	add	r2, r4
 8020274:	3b01      	subs	r3, #1
 8020276:	9000      	str	r0, [sp, #0]
 8020278:	e7ec      	b.n	8020254 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802027a:	d071      	beq.n	8020360 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 802027c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802027e:	1e5c      	subs	r4, r3, #1
 8020280:	fb06 1604 	mla	r6, r6, r4, r1
 8020284:	1436      	asrs	r6, r6, #16
 8020286:	d45d      	bmi.n	8020344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020288:	4576      	cmp	r6, lr
 802028a:	da5b      	bge.n	8020344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802028c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802028e:	fb06 2404 	mla	r4, r6, r4, r2
 8020292:	1424      	asrs	r4, r4, #16
 8020294:	d456      	bmi.n	8020344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020296:	42bc      	cmp	r4, r7
 8020298:	da54      	bge.n	8020344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802029a:	f8dd 9000 	ldr.w	r9, [sp]
 802029e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80202a2:	4698      	mov	r8, r3
 80202a4:	f1b8 0f00 	cmp.w	r8, #0
 80202a8:	dd54      	ble.n	8020354 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80202aa:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80202ae:	9804      	ldr	r0, [sp, #16]
 80202b0:	1414      	asrs	r4, r2, #16
 80202b2:	fb07 0404 	mla	r4, r7, r4, r0
 80202b6:	140e      	asrs	r6, r1, #16
 80202b8:	9801      	ldr	r0, [sp, #4]
 80202ba:	f814 e006 	ldrb.w	lr, [r4, r6]
 80202be:	f8b9 4000 	ldrh.w	r4, [r9]
 80202c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80202c6:	eb00 0b0e 	add.w	fp, r0, lr
 80202ca:	1227      	asrs	r7, r4, #8
 80202cc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80202d0:	f89b b001 	ldrb.w	fp, [fp, #1]
 80202d4:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80202d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80202da:	fb16 f60a 	smulbb	r6, r6, sl
 80202de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202e2:	fb07 6705 	mla	r7, r7, r5, r6
 80202e6:	10e6      	asrs	r6, r4, #3
 80202e8:	00e4      	lsls	r4, r4, #3
 80202ea:	b2e4      	uxtb	r4, r4
 80202ec:	fb1b fb0a 	smulbb	fp, fp, sl
 80202f0:	fb14 f405 	smulbb	r4, r4, r5
 80202f4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202f8:	b2bf      	uxth	r7, r7
 80202fa:	fb06 b605 	mla	r6, r6, r5, fp
 80202fe:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8020302:	b2b6      	uxth	r6, r6
 8020304:	fa1f fe8e 	uxth.w	lr, lr
 8020308:	1c7c      	adds	r4, r7, #1
 802030a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 802030e:	f106 0b01 	add.w	fp, r6, #1
 8020312:	f10e 0401 	add.w	r4, lr, #1
 8020316:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 802031a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 802031e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020322:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020326:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802032a:	4327      	orrs	r7, r4
 802032c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020330:	4401      	add	r1, r0
 8020332:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020334:	ea47 070b 	orr.w	r7, r7, fp
 8020338:	f829 7b02 	strh.w	r7, [r9], #2
 802033c:	4402      	add	r2, r0
 802033e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020342:	e7af      	b.n	80202a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020344:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8020348:	f04f 0e00 	mov.w	lr, #0
 802034c:	eb03 040e 	add.w	r4, r3, lr
 8020350:	2c00      	cmp	r4, #0
 8020352:	dc43      	bgt.n	80203dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020354:	9a00      	ldr	r2, [sp, #0]
 8020356:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802035a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802035e:	9300      	str	r3, [sp, #0]
 8020360:	9b02      	ldr	r3, [sp, #8]
 8020362:	2b00      	cmp	r3, #0
 8020364:	f340 8098 	ble.w	8020498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020368:	ee30 0a04 	vadd.f32	s0, s0, s8
 802036c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020370:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020376:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802037a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802037e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020382:	eef0 6a62 	vmov.f32	s13, s5
 8020386:	ee61 7a27 	vmul.f32	s15, s2, s15
 802038a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802038e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020392:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8020396:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802039a:	eef0 6a43 	vmov.f32	s13, s6
 802039e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203a2:	ee12 2a90 	vmov	r2, s5
 80203a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ae:	ee13 2a10 	vmov	r2, s6
 80203b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80203b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ba:	9314      	str	r3, [sp, #80]	; 0x50
 80203bc:	9b02      	ldr	r3, [sp, #8]
 80203be:	9a05      	ldr	r2, [sp, #20]
 80203c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203c4:	3b01      	subs	r3, #1
 80203c6:	9302      	str	r3, [sp, #8]
 80203c8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80203cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203ce:	eeb0 3a67 	vmov.f32	s6, s15
 80203d2:	bf08      	it	eq
 80203d4:	4613      	moveq	r3, r2
 80203d6:	eef0 2a47 	vmov.f32	s5, s14
 80203da:	e72a      	b.n	8020232 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80203dc:	140f      	asrs	r7, r1, #16
 80203de:	d454      	bmi.n	802048a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80203e0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80203e4:	42be      	cmp	r6, r7
 80203e6:	dd50      	ble.n	802048a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80203e8:	ea5f 4822 	movs.w	r8, r2, asr #16
 80203ec:	d44d      	bmi.n	802048a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80203ee:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80203f2:	4544      	cmp	r4, r8
 80203f4:	dd49      	ble.n	802048a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80203f6:	9c04      	ldr	r4, [sp, #16]
 80203f8:	b236      	sxth	r6, r6
 80203fa:	fb08 4606 	mla	r6, r8, r6, r4
 80203fe:	f06f 0001 	mvn.w	r0, #1
 8020402:	f816 8007 	ldrb.w	r8, [r6, r7]
 8020406:	9c01      	ldr	r4, [sp, #4]
 8020408:	fb00 fa0e 	mul.w	sl, r0, lr
 802040c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020410:	9800      	ldr	r0, [sp, #0]
 8020412:	eb04 0b08 	add.w	fp, r4, r8
 8020416:	f830 400a 	ldrh.w	r4, [r0, sl]
 802041a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 802041e:	9801      	ldr	r0, [sp, #4]
 8020420:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020424:	f810 8008 	ldrb.w	r8, [r0, r8]
 8020428:	9800      	ldr	r0, [sp, #0]
 802042a:	1227      	asrs	r7, r4, #8
 802042c:	fb16 f609 	smulbb	r6, r6, r9
 8020430:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020434:	fb07 6705 	mla	r7, r7, r5, r6
 8020438:	10e6      	asrs	r6, r4, #3
 802043a:	00e4      	lsls	r4, r4, #3
 802043c:	b2e4      	uxtb	r4, r4
 802043e:	fb1b fb09 	smulbb	fp, fp, r9
 8020442:	fb14 f405 	smulbb	r4, r4, r5
 8020446:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802044a:	b2bf      	uxth	r7, r7
 802044c:	fb06 b605 	mla	r6, r6, r5, fp
 8020450:	fb08 4809 	mla	r8, r8, r9, r4
 8020454:	b2b6      	uxth	r6, r6
 8020456:	fa1f f888 	uxth.w	r8, r8
 802045a:	1c7c      	adds	r4, r7, #1
 802045c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020460:	f106 0b01 	add.w	fp, r6, #1
 8020464:	f108 0401 	add.w	r4, r8, #1
 8020468:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 802046c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020470:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020474:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020478:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802047c:	4327      	orrs	r7, r4
 802047e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020482:	ea47 070b 	orr.w	r7, r7, fp
 8020486:	f820 700a 	strh.w	r7, [r0, sl]
 802048a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802048c:	4401      	add	r1, r0
 802048e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020490:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020494:	4402      	add	r2, r0
 8020496:	e759      	b.n	802034c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020498:	b007      	add	sp, #28
 802049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080204a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204a4:	b085      	sub	sp, #20
 80204a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80204aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80204ac:	9203      	str	r2, [sp, #12]
 80204ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80204b2:	6870      	ldr	r0, [r6, #4]
 80204b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80204b6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80204ba:	686f      	ldr	r7, [r5, #4]
 80204bc:	9101      	str	r1, [sp, #4]
 80204be:	fb00 2404 	mla	r4, r0, r4, r2
 80204c2:	6832      	ldr	r2, [r6, #0]
 80204c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80204c8:	682a      	ldr	r2, [r5, #0]
 80204ca:	9202      	str	r2, [sp, #8]
 80204cc:	3704      	adds	r7, #4
 80204ce:	9a01      	ldr	r2, [sp, #4]
 80204d0:	2a00      	cmp	r2, #0
 80204d2:	dc03      	bgt.n	80204dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80204d4:	9a03      	ldr	r2, [sp, #12]
 80204d6:	2a00      	cmp	r2, #0
 80204d8:	f340 80cc 	ble.w	8020674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80204dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80204e2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80204e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80204ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80204ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	dd0d      	ble.n	8020510 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80204f4:	1406      	asrs	r6, r0, #16
 80204f6:	d405      	bmi.n	8020504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80204f8:	454e      	cmp	r6, r9
 80204fa:	da03      	bge.n	8020504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80204fc:	1416      	asrs	r6, r2, #16
 80204fe:	d401      	bmi.n	8020504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020500:	4546      	cmp	r6, r8
 8020502:	db06      	blt.n	8020512 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020504:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020506:	4460      	add	r0, ip
 8020508:	4432      	add	r2, r6
 802050a:	3b01      	subs	r3, #1
 802050c:	3402      	adds	r4, #2
 802050e:	e7ef      	b.n	80204f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020510:	d00f      	beq.n	8020532 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020512:	1e5e      	subs	r6, r3, #1
 8020514:	fb0c 0e06 	mla	lr, ip, r6, r0
 8020518:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 802051c:	d543      	bpl.n	80205a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802051e:	4698      	mov	r8, r3
 8020520:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8020524:	f1b8 0f00 	cmp.w	r8, #0
 8020528:	dc71      	bgt.n	802060e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802052a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802052e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020532:	9b01      	ldr	r3, [sp, #4]
 8020534:	2b00      	cmp	r3, #0
 8020536:	f340 809d 	ble.w	8020674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802053a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802053e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020542:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020548:	ee31 1a05 	vadd.f32	s2, s2, s10
 802054c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020550:	eeb0 6a62 	vmov.f32	s12, s5
 8020554:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020558:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802055c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020560:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020564:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020568:	eeb0 6a43 	vmov.f32	s12, s6
 802056c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020570:	ee12 2a90 	vmov	r2, s5
 8020574:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020578:	fb92 fcf3 	sdiv	ip, r2, r3
 802057c:	ee13 2a10 	vmov	r2, s6
 8020580:	fb92 f3f3 	sdiv	r3, r2, r3
 8020584:	9312      	str	r3, [sp, #72]	; 0x48
 8020586:	9b01      	ldr	r3, [sp, #4]
 8020588:	9a03      	ldr	r2, [sp, #12]
 802058a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802058e:	3b01      	subs	r3, #1
 8020590:	9301      	str	r3, [sp, #4]
 8020592:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020598:	eeb0 3a67 	vmov.f32	s6, s15
 802059c:	bf08      	it	eq
 802059e:	4613      	moveq	r3, r2
 80205a0:	eef0 2a47 	vmov.f32	s5, s14
 80205a4:	e793      	b.n	80204ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80205a6:	45ce      	cmp	lr, r9
 80205a8:	dab9      	bge.n	802051e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80205aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80205ac:	fb01 2606 	mla	r6, r1, r6, r2
 80205b0:	1436      	asrs	r6, r6, #16
 80205b2:	d4b4      	bmi.n	802051e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80205b4:	4546      	cmp	r6, r8
 80205b6:	dab2      	bge.n	802051e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80205b8:	4698      	mov	r8, r3
 80205ba:	46a2      	mov	sl, r4
 80205bc:	f1b8 0f00 	cmp.w	r8, #0
 80205c0:	ddb3      	ble.n	802052a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80205c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80205c6:	9902      	ldr	r1, [sp, #8]
 80205c8:	1416      	asrs	r6, r2, #16
 80205ca:	fb09 1606 	mla	r6, r9, r6, r1
 80205ce:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80205d2:	492a      	ldr	r1, [pc, #168]	; (802067c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80205d4:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80205d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80205dc:	eb07 0b0e 	add.w	fp, r7, lr
 80205e0:	4460      	add	r0, ip
 80205e2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80205e6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80205ea:	00f6      	lsls	r6, r6, #3
 80205ec:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80205f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80205f4:	ea49 0606 	orr.w	r6, r9, r6
 80205f8:	f817 900e 	ldrb.w	r9, [r7, lr]
 80205fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80205fe:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8020602:	f82a 6b02 	strh.w	r6, [sl], #2
 8020606:	440a      	add	r2, r1
 8020608:	f108 38ff 	add.w	r8, r8, #4294967295
 802060c:	e7d6      	b.n	80205bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802060e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020612:	d429      	bmi.n	8020668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020614:	68ae      	ldr	r6, [r5, #8]
 8020616:	454e      	cmp	r6, r9
 8020618:	dd26      	ble.n	8020668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802061a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 802061e:	d423      	bmi.n	8020668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020620:	68e9      	ldr	r1, [r5, #12]
 8020622:	4559      	cmp	r1, fp
 8020624:	dd20      	ble.n	8020668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020626:	9902      	ldr	r1, [sp, #8]
 8020628:	fa0f fe86 	sxth.w	lr, r6
 802062c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8020630:	f06f 0101 	mvn.w	r1, #1
 8020634:	f81e e009 	ldrb.w	lr, [lr, r9]
 8020638:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802063c:	eb07 060e 	add.w	r6, r7, lr
 8020640:	fb01 f908 	mul.w	r9, r1, r8
 8020644:	f896 b002 	ldrb.w	fp, [r6, #2]
 8020648:	7876      	ldrb	r6, [r6, #1]
 802064a:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 802064e:	00f6      	lsls	r6, r6, #3
 8020650:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8020654:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020658:	ea4b 0606 	orr.w	r6, fp, r6
 802065c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8020660:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8020664:	f82a 6009 	strh.w	r6, [sl, r9]
 8020668:	9912      	ldr	r1, [sp, #72]	; 0x48
 802066a:	4460      	add	r0, ip
 802066c:	440a      	add	r2, r1
 802066e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020672:	e757      	b.n	8020524 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020674:	b005      	add	sp, #20
 8020676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802067a:	bf00      	nop
 802067c:	fffff800 	.word	0xfffff800

08020680 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020684:	b087      	sub	sp, #28
 8020686:	468b      	mov	fp, r1
 8020688:	9815      	ldr	r0, [sp, #84]	; 0x54
 802068a:	9204      	str	r2, [sp, #16]
 802068c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020690:	9205      	str	r2, [sp, #20]
 8020692:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020696:	6841      	ldr	r1, [r0, #4]
 8020698:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 802069c:	fb01 2404 	mla	r4, r1, r4, r2
 80206a0:	6802      	ldr	r2, [r0, #0]
 80206a2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80206a6:	f8dc 2000 	ldr.w	r2, [ip]
 80206aa:	9201      	str	r2, [sp, #4]
 80206ac:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80206b0:	3204      	adds	r2, #4
 80206b2:	9202      	str	r2, [sp, #8]
 80206b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80206b8:	f1bb 0f00 	cmp.w	fp, #0
 80206bc:	dc03      	bgt.n	80206c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80206be:	9a04      	ldr	r2, [sp, #16]
 80206c0:	2a00      	cmp	r2, #0
 80206c2:	f340 8138 	ble.w	8020936 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80206c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80206c8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80206cc:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 80206d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80206d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80206d6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80206da:	2b00      	cmp	r3, #0
 80206dc:	dd0e      	ble.n	80206fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80206de:	1402      	asrs	r2, r0, #16
 80206e0:	d405      	bmi.n	80206ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80206e2:	42ba      	cmp	r2, r7
 80206e4:	da03      	bge.n	80206ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80206e6:	140a      	asrs	r2, r1, #16
 80206e8:	d401      	bmi.n	80206ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80206ea:	42b2      	cmp	r2, r6
 80206ec:	db07      	blt.n	80206fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80206ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80206f0:	4410      	add	r0, r2
 80206f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206f4:	3b01      	subs	r3, #1
 80206f6:	4411      	add	r1, r2
 80206f8:	3402      	adds	r4, #2
 80206fa:	e7ee      	b.n	80206da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80206fc:	d019      	beq.n	8020732 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80206fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020700:	1e5a      	subs	r2, r3, #1
 8020702:	fb05 0502 	mla	r5, r5, r2, r0
 8020706:	142d      	asrs	r5, r5, #16
 8020708:	d409      	bmi.n	802071e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802070a:	42bd      	cmp	r5, r7
 802070c:	da07      	bge.n	802071e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802070e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020710:	fb05 1202 	mla	r2, r5, r2, r1
 8020714:	1412      	asrs	r2, r2, #16
 8020716:	d402      	bmi.n	802071e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020718:	42b2      	cmp	r2, r6
 802071a:	f2c0 80ac 	blt.w	8020876 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802071e:	f04f 0e00 	mov.w	lr, #0
 8020722:	eb03 020e 	add.w	r2, r3, lr
 8020726:	2a00      	cmp	r2, #0
 8020728:	dc3e      	bgt.n	80207a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802072a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802072e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020732:	f1bb 0f00 	cmp.w	fp, #0
 8020736:	f340 80fe 	ble.w	8020936 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802073a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802073e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020742:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020748:	f1bb 0b01 	subs.w	fp, fp, #1
 802074c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020750:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020754:	eeb0 6a62 	vmov.f32	s12, s5
 8020758:	ee61 7a27 	vmul.f32	s15, s2, s15
 802075c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020760:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020764:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020768:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802076c:	eeb0 6a43 	vmov.f32	s12, s6
 8020770:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020774:	ee12 2a90 	vmov	r2, s5
 8020778:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802077c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020780:	ee13 2a10 	vmov	r2, s6
 8020784:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020788:	9313      	str	r3, [sp, #76]	; 0x4c
 802078a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802078c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020790:	9a04      	ldr	r2, [sp, #16]
 8020792:	9314      	str	r3, [sp, #80]	; 0x50
 8020794:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802079a:	eeb0 3a67 	vmov.f32	s6, s15
 802079e:	bf08      	it	eq
 80207a0:	4613      	moveq	r3, r2
 80207a2:	eef0 2a47 	vmov.f32	s5, s14
 80207a6:	e787      	b.n	80206b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80207a8:	1406      	asrs	r6, r0, #16
 80207aa:	d45d      	bmi.n	8020868 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80207ac:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80207b0:	42b5      	cmp	r5, r6
 80207b2:	dd59      	ble.n	8020868 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80207b4:	140f      	asrs	r7, r1, #16
 80207b6:	d457      	bmi.n	8020868 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80207b8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80207bc:	42ba      	cmp	r2, r7
 80207be:	dd53      	ble.n	8020868 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80207c0:	9a01      	ldr	r2, [sp, #4]
 80207c2:	b22d      	sxth	r5, r5
 80207c4:	fb07 2505 	mla	r5, r7, r5, r2
 80207c8:	5daa      	ldrb	r2, [r5, r6]
 80207ca:	9d02      	ldr	r5, [sp, #8]
 80207cc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80207d0:	0e2e      	lsrs	r6, r5, #24
 80207d2:	d049      	beq.n	8020868 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80207d4:	f06f 0201 	mvn.w	r2, #1
 80207d8:	fb02 f20e 	mul.w	r2, r2, lr
 80207dc:	9203      	str	r2, [sp, #12]
 80207de:	f834 8002 	ldrh.w	r8, [r4, r2]
 80207e2:	9a05      	ldr	r2, [sp, #20]
 80207e4:	4356      	muls	r6, r2
 80207e6:	1c72      	adds	r2, r6, #1
 80207e8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80207ec:	1212      	asrs	r2, r2, #8
 80207ee:	fa1f f982 	uxth.w	r9, r2
 80207f2:	ea4f 2728 	mov.w	r7, r8, asr #8
 80207f6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80207fa:	43d2      	mvns	r2, r2
 80207fc:	b2d2      	uxtb	r2, r2
 80207fe:	fb16 f609 	smulbb	r6, r6, r9
 8020802:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020806:	fb07 6702 	mla	r7, r7, r2, r6
 802080a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802080e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020812:	b2ed      	uxtb	r5, r5
 8020814:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020818:	fa5f f888 	uxtb.w	r8, r8
 802081c:	fb15 f509 	smulbb	r5, r5, r9
 8020820:	fb08 5502 	mla	r5, r8, r2, r5
 8020824:	b2bf      	uxth	r7, r7
 8020826:	fb1a fa09 	smulbb	sl, sl, r9
 802082a:	b2ad      	uxth	r5, r5
 802082c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020830:	fb06 a602 	mla	r6, r6, r2, sl
 8020834:	1c7a      	adds	r2, r7, #1
 8020836:	f105 0a01 	add.w	sl, r5, #1
 802083a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802083e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020842:	b2b6      	uxth	r6, r6
 8020844:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020848:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802084c:	ea4a 0707 	orr.w	r7, sl, r7
 8020850:	f106 0a01 	add.w	sl, r6, #1
 8020854:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020858:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802085c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020860:	9a03      	ldr	r2, [sp, #12]
 8020862:	ea47 070a 	orr.w	r7, r7, sl
 8020866:	52a7      	strh	r7, [r4, r2]
 8020868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802086a:	4410      	add	r0, r2
 802086c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802086e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020872:	4411      	add	r1, r2
 8020874:	e755      	b.n	8020722 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020876:	f04f 0800 	mov.w	r8, #0
 802087a:	eba3 0208 	sub.w	r2, r3, r8
 802087e:	2a00      	cmp	r2, #0
 8020880:	f77f af53 	ble.w	802072a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020884:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8020888:	9f01      	ldr	r7, [sp, #4]
 802088a:	140a      	asrs	r2, r1, #16
 802088c:	1405      	asrs	r5, r0, #16
 802088e:	fb06 7202 	mla	r2, r6, r2, r7
 8020892:	5d52      	ldrb	r2, [r2, r5]
 8020894:	9d02      	ldr	r5, [sp, #8]
 8020896:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 802089a:	0e2e      	lsrs	r6, r5, #24
 802089c:	d044      	beq.n	8020928 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802089e:	9a05      	ldr	r2, [sp, #20]
 80208a0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80208a4:	4356      	muls	r6, r2
 80208a6:	1c72      	adds	r2, r6, #1
 80208a8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80208ac:	1212      	asrs	r2, r2, #8
 80208ae:	fa1f f982 	uxth.w	r9, r2
 80208b2:	ea4f 272e 	mov.w	r7, lr, asr #8
 80208b6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80208ba:	43d2      	mvns	r2, r2
 80208bc:	b2d2      	uxtb	r2, r2
 80208be:	fb16 f609 	smulbb	r6, r6, r9
 80208c2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80208c6:	fb07 6702 	mla	r7, r7, r2, r6
 80208ca:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80208ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80208d2:	b2ed      	uxtb	r5, r5
 80208d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80208d8:	fa5f fe8e 	uxtb.w	lr, lr
 80208dc:	fb15 f509 	smulbb	r5, r5, r9
 80208e0:	fb0e 5502 	mla	r5, lr, r2, r5
 80208e4:	b2bf      	uxth	r7, r7
 80208e6:	fb1a fa09 	smulbb	sl, sl, r9
 80208ea:	b2ad      	uxth	r5, r5
 80208ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80208f0:	fb06 a602 	mla	r6, r6, r2, sl
 80208f4:	1c7a      	adds	r2, r7, #1
 80208f6:	f105 0a01 	add.w	sl, r5, #1
 80208fa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80208fe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020902:	b2b6      	uxth	r6, r6
 8020904:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020908:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802090c:	ea4a 0707 	orr.w	r7, sl, r7
 8020910:	f106 0a01 	add.w	sl, r6, #1
 8020914:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020918:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802091c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020920:	ea47 070a 	orr.w	r7, r7, sl
 8020924:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802092a:	4410      	add	r0, r2
 802092c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802092e:	f108 0801 	add.w	r8, r8, #1
 8020932:	4411      	add	r1, r2
 8020934:	e7a1      	b.n	802087a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020936:	b007      	add	sp, #28
 8020938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802093c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020940:	b085      	sub	sp, #20
 8020942:	468b      	mov	fp, r1
 8020944:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020946:	9203      	str	r2, [sp, #12]
 8020948:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802094c:	6841      	ldr	r1, [r0, #4]
 802094e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8020952:	fb01 2404 	mla	r4, r1, r4, r2
 8020956:	6802      	ldr	r2, [r0, #0]
 8020958:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802095c:	f8de 2000 	ldr.w	r2, [lr]
 8020960:	9200      	str	r2, [sp, #0]
 8020962:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020966:	3204      	adds	r2, #4
 8020968:	9201      	str	r2, [sp, #4]
 802096a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802096e:	f1bb 0f00 	cmp.w	fp, #0
 8020972:	dc03      	bgt.n	802097c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020974:	9a03      	ldr	r2, [sp, #12]
 8020976:	2a00      	cmp	r2, #0
 8020978:	f340 8153 	ble.w	8020c22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802097c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802097e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020982:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020986:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802098a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802098c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020990:	2b00      	cmp	r3, #0
 8020992:	dd0e      	ble.n	80209b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020994:	1408      	asrs	r0, r1, #16
 8020996:	d405      	bmi.n	80209a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020998:	42b8      	cmp	r0, r7
 802099a:	da03      	bge.n	80209a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802099c:	1410      	asrs	r0, r2, #16
 802099e:	d401      	bmi.n	80209a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80209a0:	42b0      	cmp	r0, r6
 80209a2:	db07      	blt.n	80209b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80209a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80209a6:	4401      	add	r1, r0
 80209a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80209aa:	3b01      	subs	r3, #1
 80209ac:	4402      	add	r2, r0
 80209ae:	3402      	adds	r4, #2
 80209b0:	e7ee      	b.n	8020990 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80209b2:	d017      	beq.n	80209e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80209b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80209b6:	1e58      	subs	r0, r3, #1
 80209b8:	fb05 1500 	mla	r5, r5, r0, r1
 80209bc:	142d      	asrs	r5, r5, #16
 80209be:	d409      	bmi.n	80209d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80209c0:	42bd      	cmp	r5, r7
 80209c2:	da07      	bge.n	80209d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80209c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80209c6:	fb05 2000 	mla	r0, r5, r0, r2
 80209ca:	1400      	asrs	r0, r0, #16
 80209cc:	d402      	bmi.n	80209d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80209ce:	42b0      	cmp	r0, r6
 80209d0:	f2c0 80bc 	blt.w	8020b4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80209d4:	2600      	movs	r6, #0
 80209d6:	1998      	adds	r0, r3, r6
 80209d8:	2800      	cmp	r0, #0
 80209da:	dc3e      	bgt.n	8020a5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80209dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80209e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80209e4:	f1bb 0f00 	cmp.w	fp, #0
 80209e8:	f340 811b 	ble.w	8020c22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80209ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80209f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209fa:	f1bb 0b01 	subs.w	fp, fp, #1
 80209fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a06:	eeb0 6a62 	vmov.f32	s12, s5
 8020a0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a16:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020a1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a1e:	eeb0 6a43 	vmov.f32	s12, s6
 8020a22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a26:	ee12 2a90 	vmov	r2, s5
 8020a2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a32:	ee13 2a10 	vmov	r2, s6
 8020a36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8020a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a42:	9a03      	ldr	r2, [sp, #12]
 8020a44:	9312      	str	r3, [sp, #72]	; 0x48
 8020a46:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a4c:	eeb0 3a67 	vmov.f32	s6, s15
 8020a50:	bf08      	it	eq
 8020a52:	4613      	moveq	r3, r2
 8020a54:	eef0 2a47 	vmov.f32	s5, s14
 8020a58:	e789      	b.n	802096e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020a5a:	140f      	asrs	r7, r1, #16
 8020a5c:	d426      	bmi.n	8020aac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a5e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020a62:	42bd      	cmp	r5, r7
 8020a64:	dd22      	ble.n	8020aac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a66:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020a6a:	d41f      	bmi.n	8020aac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a6c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020a70:	4560      	cmp	r0, ip
 8020a72:	dd1b      	ble.n	8020aac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a74:	9800      	ldr	r0, [sp, #0]
 8020a76:	b22d      	sxth	r5, r5
 8020a78:	fb0c 0505 	mla	r5, ip, r5, r0
 8020a7c:	5de8      	ldrb	r0, [r5, r7]
 8020a7e:	9d01      	ldr	r5, [sp, #4]
 8020a80:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020a84:	0e07      	lsrs	r7, r0, #24
 8020a86:	2fff      	cmp	r7, #255	; 0xff
 8020a88:	d116      	bne.n	8020ab8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020a8a:	f06f 0501 	mvn.w	r5, #1
 8020a8e:	fb05 f706 	mul.w	r7, r5, r6
 8020a92:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020a96:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020a9a:	0945      	lsrs	r5, r0, #5
 8020a9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020aa0:	ea4c 0505 	orr.w	r5, ip, r5
 8020aa4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020aa8:	4305      	orrs	r5, r0
 8020aaa:	53e5      	strh	r5, [r4, r7]
 8020aac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020aae:	4401      	add	r1, r0
 8020ab0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020ab2:	3e01      	subs	r6, #1
 8020ab4:	4402      	add	r2, r0
 8020ab6:	e78e      	b.n	80209d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020ab8:	b2fd      	uxtb	r5, r7
 8020aba:	2f00      	cmp	r7, #0
 8020abc:	d0f6      	beq.n	8020aac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020abe:	f06f 0701 	mvn.w	r7, #1
 8020ac2:	4377      	muls	r7, r6
 8020ac4:	fa1f f985 	uxth.w	r9, r5
 8020ac8:	f834 8007 	ldrh.w	r8, [r4, r7]
 8020acc:	9702      	str	r7, [sp, #8]
 8020ace:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020ad2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020ad6:	43ed      	mvns	r5, r5
 8020ad8:	b2ed      	uxtb	r5, r5
 8020ada:	fb17 f709 	smulbb	r7, r7, r9
 8020ade:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ae2:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020ae6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020aea:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8020aee:	b2c0      	uxtb	r0, r0
 8020af0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020af4:	fa5f f888 	uxtb.w	r8, r8
 8020af8:	fb10 f009 	smulbb	r0, r0, r9
 8020afc:	fb08 0005 	mla	r0, r8, r5, r0
 8020b00:	b280      	uxth	r0, r0
 8020b02:	fa1f fc8c 	uxth.w	ip, ip
 8020b06:	fb1a fa09 	smulbb	sl, sl, r9
 8020b0a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020b0e:	fb07 a705 	mla	r7, r7, r5, sl
 8020b12:	f100 0a01 	add.w	sl, r0, #1
 8020b16:	f10c 0501 	add.w	r5, ip, #1
 8020b1a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020b1e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020b22:	b2bf      	uxth	r7, r7
 8020b24:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020b28:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020b2c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020b30:	f107 0a01 	add.w	sl, r7, #1
 8020b34:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020b38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020b3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020b40:	9802      	ldr	r0, [sp, #8]
 8020b42:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020b46:	f824 c000 	strh.w	ip, [r4, r0]
 8020b4a:	e7af      	b.n	8020aac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020b4c:	f04f 0800 	mov.w	r8, #0
 8020b50:	eba3 0008 	sub.w	r0, r3, r8
 8020b54:	2800      	cmp	r0, #0
 8020b56:	f77f af41 	ble.w	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020b5a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020b5e:	9f00      	ldr	r7, [sp, #0]
 8020b60:	1410      	asrs	r0, r2, #16
 8020b62:	140d      	asrs	r5, r1, #16
 8020b64:	fb06 7000 	mla	r0, r6, r0, r7
 8020b68:	5d40      	ldrb	r0, [r0, r5]
 8020b6a:	9d01      	ldr	r5, [sp, #4]
 8020b6c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020b70:	0e2e      	lsrs	r6, r5, #24
 8020b72:	2eff      	cmp	r6, #255	; 0xff
 8020b74:	d112      	bne.n	8020b9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020b76:	482c      	ldr	r0, [pc, #176]	; (8020c28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020b78:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020b7c:	0968      	lsrs	r0, r5, #5
 8020b7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020b82:	4330      	orrs	r0, r6
 8020b84:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020b88:	4328      	orrs	r0, r5
 8020b8a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020b8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020b90:	4401      	add	r1, r0
 8020b92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020b94:	f108 0801 	add.w	r8, r8, #1
 8020b98:	4402      	add	r2, r0
 8020b9a:	e7d9      	b.n	8020b50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020b9c:	b2f0      	uxtb	r0, r6
 8020b9e:	2e00      	cmp	r6, #0
 8020ba0:	d0f5      	beq.n	8020b8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020ba2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020ba6:	fa1f f980 	uxth.w	r9, r0
 8020baa:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020bae:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020bb2:	43c0      	mvns	r0, r0
 8020bb4:	b2c0      	uxtb	r0, r0
 8020bb6:	fb16 f609 	smulbb	r6, r6, r9
 8020bba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bbe:	fb07 6700 	mla	r7, r7, r0, r6
 8020bc2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020bc6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020bca:	b2ed      	uxtb	r5, r5
 8020bcc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020bd0:	fa5f fc8c 	uxtb.w	ip, ip
 8020bd4:	fb15 f509 	smulbb	r5, r5, r9
 8020bd8:	fb0c 5500 	mla	r5, ip, r0, r5
 8020bdc:	b2bf      	uxth	r7, r7
 8020bde:	fb1a fa09 	smulbb	sl, sl, r9
 8020be2:	b2ad      	uxth	r5, r5
 8020be4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020be8:	fb06 a600 	mla	r6, r6, r0, sl
 8020bec:	1c78      	adds	r0, r7, #1
 8020bee:	f105 0a01 	add.w	sl, r5, #1
 8020bf2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020bf6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020bfa:	b2b6      	uxth	r6, r6
 8020bfc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020c00:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020c04:	ea4a 0707 	orr.w	r7, sl, r7
 8020c08:	f106 0a01 	add.w	sl, r6, #1
 8020c0c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020c10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020c14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020c18:	ea47 070a 	orr.w	r7, r7, sl
 8020c1c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020c20:	e7b5      	b.n	8020b8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020c22:	b005      	add	sp, #20
 8020c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c28:	fffff800 	.word	0xfffff800

08020c2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c30:	b087      	sub	sp, #28
 8020c32:	468b      	mov	fp, r1
 8020c34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020c36:	9204      	str	r2, [sp, #16]
 8020c38:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020c3c:	9205      	str	r2, [sp, #20]
 8020c3e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020c42:	6861      	ldr	r1, [r4, #4]
 8020c44:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8020c48:	fb01 2000 	mla	r0, r1, r0, r2
 8020c4c:	6822      	ldr	r2, [r4, #0]
 8020c4e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020c52:	f8de 2000 	ldr.w	r2, [lr]
 8020c56:	9201      	str	r2, [sp, #4]
 8020c58:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020c5c:	9202      	str	r2, [sp, #8]
 8020c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c62:	f1bb 0f00 	cmp.w	fp, #0
 8020c66:	dc03      	bgt.n	8020c70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020c68:	9a04      	ldr	r2, [sp, #16]
 8020c6a:	2a00      	cmp	r2, #0
 8020c6c:	f340 8142 	ble.w	8020ef4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020c70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020c72:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020c76:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020c7a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020c7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020c80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	dd0e      	ble.n	8020ca6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020c88:	140c      	asrs	r4, r1, #16
 8020c8a:	d405      	bmi.n	8020c98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c8c:	42bc      	cmp	r4, r7
 8020c8e:	da03      	bge.n	8020c98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c90:	1414      	asrs	r4, r2, #16
 8020c92:	d401      	bmi.n	8020c98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c94:	42b4      	cmp	r4, r6
 8020c96:	db07      	blt.n	8020ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020c98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020c9a:	4421      	add	r1, r4
 8020c9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020c9e:	3b01      	subs	r3, #1
 8020ca0:	4422      	add	r2, r4
 8020ca2:	3002      	adds	r0, #2
 8020ca4:	e7ee      	b.n	8020c84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020ca6:	d019      	beq.n	8020cdc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020ca8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020caa:	1e5c      	subs	r4, r3, #1
 8020cac:	fb05 1504 	mla	r5, r5, r4, r1
 8020cb0:	142d      	asrs	r5, r5, #16
 8020cb2:	d409      	bmi.n	8020cc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cb4:	42bd      	cmp	r5, r7
 8020cb6:	da07      	bge.n	8020cc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020cba:	fb05 2404 	mla	r4, r5, r4, r2
 8020cbe:	1424      	asrs	r4, r4, #16
 8020cc0:	d402      	bmi.n	8020cc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020cc2:	42b4      	cmp	r4, r6
 8020cc4:	f2c0 80b1 	blt.w	8020e2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020cc8:	f04f 0800 	mov.w	r8, #0
 8020ccc:	eb03 0408 	add.w	r4, r3, r8
 8020cd0:	2c00      	cmp	r4, #0
 8020cd2:	dc3e      	bgt.n	8020d52 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020cd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020cd8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020cdc:	f1bb 0f00 	cmp.w	fp, #0
 8020ce0:	f340 8108 	ble.w	8020ef4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020ce4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ce8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020cec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020cf2:	f1bb 0b01 	subs.w	fp, fp, #1
 8020cf6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020cfa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020cfe:	eeb0 6a62 	vmov.f32	s12, s5
 8020d02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020d06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020d0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d0e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020d12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d16:	eeb0 6a43 	vmov.f32	s12, s6
 8020d1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d1e:	ee12 2a90 	vmov	r2, s5
 8020d22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d26:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d2a:	ee13 2a10 	vmov	r2, s6
 8020d2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020d32:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d3a:	9a04      	ldr	r2, [sp, #16]
 8020d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8020d3e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d44:	eeb0 3a67 	vmov.f32	s6, s15
 8020d48:	bf08      	it	eq
 8020d4a:	4613      	moveq	r3, r2
 8020d4c:	eef0 2a47 	vmov.f32	s5, s14
 8020d50:	e787      	b.n	8020c62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020d52:	140e      	asrs	r6, r1, #16
 8020d54:	d462      	bmi.n	8020e1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d56:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020d5a:	42b5      	cmp	r5, r6
 8020d5c:	dd5e      	ble.n	8020e1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d5e:	1417      	asrs	r7, r2, #16
 8020d60:	d45c      	bmi.n	8020e1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d62:	f8de 400c 	ldr.w	r4, [lr, #12]
 8020d66:	42bc      	cmp	r4, r7
 8020d68:	dd58      	ble.n	8020e1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d6a:	b22d      	sxth	r5, r5
 8020d6c:	fb07 6505 	mla	r5, r7, r5, r6
 8020d70:	9c02      	ldr	r4, [sp, #8]
 8020d72:	5d66      	ldrb	r6, [r4, r5]
 8020d74:	2e00      	cmp	r6, #0
 8020d76:	d051      	beq.n	8020e1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d78:	9c01      	ldr	r4, [sp, #4]
 8020d7a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8020d7e:	f06f 0401 	mvn.w	r4, #1
 8020d82:	fb04 f408 	mul.w	r4, r4, r8
 8020d86:	9403      	str	r4, [sp, #12]
 8020d88:	5b05      	ldrh	r5, [r0, r4]
 8020d8a:	9c05      	ldr	r4, [sp, #20]
 8020d8c:	4366      	muls	r6, r4
 8020d8e:	1c74      	adds	r4, r6, #1
 8020d90:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020d94:	1224      	asrs	r4, r4, #8
 8020d96:	b2a7      	uxth	r7, r4
 8020d98:	122e      	asrs	r6, r5, #8
 8020d9a:	43e4      	mvns	r4, r4
 8020d9c:	b2e4      	uxtb	r4, r4
 8020d9e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8020da2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020da6:	fb16 f604 	smulbb	r6, r6, r4
 8020daa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020dae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020db2:	00ed      	lsls	r5, r5, #3
 8020db4:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020db8:	b2ed      	uxtb	r5, r5
 8020dba:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020dbe:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020dc2:	fb15 f504 	smulbb	r5, r5, r4
 8020dc6:	fa5f f989 	uxtb.w	r9, r9
 8020dca:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020dce:	fb09 5507 	mla	r5, r9, r7, r5
 8020dd2:	fb1a fa04 	smulbb	sl, sl, r4
 8020dd6:	fa1f fc8c 	uxth.w	ip, ip
 8020dda:	b2ad      	uxth	r5, r5
 8020ddc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020de0:	fb06 a607 	mla	r6, r6, r7, sl
 8020de4:	f10c 0401 	add.w	r4, ip, #1
 8020de8:	f105 0a01 	add.w	sl, r5, #1
 8020dec:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020df0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020df4:	b2b6      	uxth	r6, r6
 8020df6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020dfa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020dfe:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020e02:	f106 0a01 	add.w	sl, r6, #1
 8020e06:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020e0a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020e0e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020e12:	9c03      	ldr	r4, [sp, #12]
 8020e14:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020e18:	f820 c004 	strh.w	ip, [r0, r4]
 8020e1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e1e:	4421      	add	r1, r4
 8020e20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e22:	f108 38ff 	add.w	r8, r8, #4294967295
 8020e26:	4422      	add	r2, r4
 8020e28:	e750      	b.n	8020ccc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020e2a:	f04f 0900 	mov.w	r9, #0
 8020e2e:	eba3 0409 	sub.w	r4, r3, r9
 8020e32:	2c00      	cmp	r4, #0
 8020e34:	f77f af4e 	ble.w	8020cd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020e38:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020e3c:	140d      	asrs	r5, r1, #16
 8020e3e:	1414      	asrs	r4, r2, #16
 8020e40:	fb06 5404 	mla	r4, r6, r4, r5
 8020e44:	9d02      	ldr	r5, [sp, #8]
 8020e46:	5d2e      	ldrb	r6, [r5, r4]
 8020e48:	2e00      	cmp	r6, #0
 8020e4a:	d04c      	beq.n	8020ee6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020e4c:	9d01      	ldr	r5, [sp, #4]
 8020e4e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8020e52:	9c05      	ldr	r4, [sp, #20]
 8020e54:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8020e58:	4366      	muls	r6, r4
 8020e5a:	1c74      	adds	r4, r6, #1
 8020e5c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020e60:	1224      	asrs	r4, r4, #8
 8020e62:	b2a7      	uxth	r7, r4
 8020e64:	122e      	asrs	r6, r5, #8
 8020e66:	43e4      	mvns	r4, r4
 8020e68:	b2e4      	uxtb	r4, r4
 8020e6a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020e6e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020e72:	fb16 f604 	smulbb	r6, r6, r4
 8020e76:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020e7a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020e7e:	00ed      	lsls	r5, r5, #3
 8020e80:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020e84:	b2ed      	uxtb	r5, r5
 8020e86:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020e8a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020e8e:	fb15 f504 	smulbb	r5, r5, r4
 8020e92:	fa5f f888 	uxtb.w	r8, r8
 8020e96:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020e9a:	fb08 5507 	mla	r5, r8, r7, r5
 8020e9e:	fb1a fa04 	smulbb	sl, sl, r4
 8020ea2:	fa1f fc8c 	uxth.w	ip, ip
 8020ea6:	b2ad      	uxth	r5, r5
 8020ea8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020eac:	fb06 a607 	mla	r6, r6, r7, sl
 8020eb0:	f10c 0401 	add.w	r4, ip, #1
 8020eb4:	f105 0a01 	add.w	sl, r5, #1
 8020eb8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020ebc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020ec0:	b2b6      	uxth	r6, r6
 8020ec2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020ec6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020eca:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020ece:	f106 0a01 	add.w	sl, r6, #1
 8020ed2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020ed6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020eda:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020ede:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020ee2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020ee6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ee8:	4421      	add	r1, r4
 8020eea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020eec:	f109 0901 	add.w	r9, r9, #1
 8020ef0:	4422      	add	r2, r4
 8020ef2:	e79c      	b.n	8020e2e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020ef4:	b007      	add	sp, #28
 8020ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020efa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020efa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020efe:	b085      	sub	sp, #20
 8020f00:	468b      	mov	fp, r1
 8020f02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f04:	9203      	str	r2, [sp, #12]
 8020f06:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020f0a:	6861      	ldr	r1, [r4, #4]
 8020f0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020f10:	fb01 2000 	mla	r0, r1, r0, r2
 8020f14:	6822      	ldr	r2, [r4, #0]
 8020f16:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020f1a:	f8d8 2000 	ldr.w	r2, [r8]
 8020f1e:	9200      	str	r2, [sp, #0]
 8020f20:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020f24:	9201      	str	r2, [sp, #4]
 8020f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f2a:	f1bb 0f00 	cmp.w	fp, #0
 8020f2e:	dc03      	bgt.n	8020f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020f30:	9a03      	ldr	r2, [sp, #12]
 8020f32:	2a00      	cmp	r2, #0
 8020f34:	f340 8146 	ble.w	80211c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020f38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020f3a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020f3e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020f42:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020f46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020f48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	dd0e      	ble.n	8020f6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020f50:	140c      	asrs	r4, r1, #16
 8020f52:	d405      	bmi.n	8020f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020f54:	42bc      	cmp	r4, r7
 8020f56:	da03      	bge.n	8020f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020f58:	1414      	asrs	r4, r2, #16
 8020f5a:	d401      	bmi.n	8020f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020f5c:	42b4      	cmp	r4, r6
 8020f5e:	db07      	blt.n	8020f70 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020f60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f62:	4421      	add	r1, r4
 8020f64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020f66:	3b01      	subs	r3, #1
 8020f68:	4422      	add	r2, r4
 8020f6a:	3002      	adds	r0, #2
 8020f6c:	e7ee      	b.n	8020f4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020f6e:	d017      	beq.n	8020fa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020f70:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020f72:	1e5c      	subs	r4, r3, #1
 8020f74:	fb05 1504 	mla	r5, r5, r4, r1
 8020f78:	142d      	asrs	r5, r5, #16
 8020f7a:	d409      	bmi.n	8020f90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f7c:	42bd      	cmp	r5, r7
 8020f7e:	da07      	bge.n	8020f90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020f82:	fb05 2404 	mla	r4, r5, r4, r2
 8020f86:	1424      	asrs	r4, r4, #16
 8020f88:	d402      	bmi.n	8020f90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f8a:	42b4      	cmp	r4, r6
 8020f8c:	f2c0 80b3 	blt.w	80210f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020f90:	2600      	movs	r6, #0
 8020f92:	199c      	adds	r4, r3, r6
 8020f94:	2c00      	cmp	r4, #0
 8020f96:	dc3e      	bgt.n	8021016 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020f98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020fa0:	f1bb 0f00 	cmp.w	fp, #0
 8020fa4:	f340 810e 	ble.w	80211c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020fa8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020fac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020fb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020fb6:	f1bb 0b01 	subs.w	fp, fp, #1
 8020fba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020fbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020fc2:	eeb0 6a62 	vmov.f32	s12, s5
 8020fc6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020fca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020fce:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020fd2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020fd6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020fda:	eeb0 6a43 	vmov.f32	s12, s6
 8020fde:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020fe2:	ee12 2a90 	vmov	r2, s5
 8020fe6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fee:	ee13 2a10 	vmov	r2, s6
 8020ff2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8020ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ffe:	9a03      	ldr	r2, [sp, #12]
 8021000:	9312      	str	r3, [sp, #72]	; 0x48
 8021002:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021008:	eeb0 3a67 	vmov.f32	s6, s15
 802100c:	bf08      	it	eq
 802100e:	4613      	moveq	r3, r2
 8021010:	eef0 2a47 	vmov.f32	s5, s14
 8021014:	e789      	b.n	8020f2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021016:	140f      	asrs	r7, r1, #16
 8021018:	d418      	bmi.n	802104c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802101a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802101e:	42bd      	cmp	r5, r7
 8021020:	dd14      	ble.n	802104c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021022:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021026:	d411      	bmi.n	802104c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021028:	f8d8 400c 	ldr.w	r4, [r8, #12]
 802102c:	4564      	cmp	r4, ip
 802102e:	dd0d      	ble.n	802104c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021030:	b22d      	sxth	r5, r5
 8021032:	fb0c 7505 	mla	r5, ip, r5, r7
 8021036:	9c01      	ldr	r4, [sp, #4]
 8021038:	5d64      	ldrb	r4, [r4, r5]
 802103a:	2cff      	cmp	r4, #255	; 0xff
 802103c:	d10c      	bne.n	8021058 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802103e:	9c00      	ldr	r4, [sp, #0]
 8021040:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8021044:	f06f 0401 	mvn.w	r4, #1
 8021048:	4374      	muls	r4, r6
 802104a:	5305      	strh	r5, [r0, r4]
 802104c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802104e:	4421      	add	r1, r4
 8021050:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021052:	3e01      	subs	r6, #1
 8021054:	4422      	add	r2, r4
 8021056:	e79c      	b.n	8020f92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021058:	2c00      	cmp	r4, #0
 802105a:	d0f7      	beq.n	802104c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802105c:	9f00      	ldr	r7, [sp, #0]
 802105e:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8021062:	f06f 0501 	mvn.w	r5, #1
 8021066:	4375      	muls	r5, r6
 8021068:	9502      	str	r5, [sp, #8]
 802106a:	5b45      	ldrh	r5, [r0, r5]
 802106c:	fa1f fc84 	uxth.w	ip, r4
 8021070:	122f      	asrs	r7, r5, #8
 8021072:	43e4      	mvns	r4, r4
 8021074:	b2e4      	uxtb	r4, r4
 8021076:	ea4f 2e29 	mov.w	lr, r9, asr #8
 802107a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802107e:	fb17 f704 	smulbb	r7, r7, r4
 8021082:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021086:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802108a:	00ed      	lsls	r5, r5, #3
 802108c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8021090:	b2ed      	uxtb	r5, r5
 8021092:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8021096:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802109a:	fb15 f504 	smulbb	r5, r5, r4
 802109e:	fa5f f989 	uxtb.w	r9, r9
 80210a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80210a6:	fb09 550c 	mla	r5, r9, ip, r5
 80210aa:	fb1a fa04 	smulbb	sl, sl, r4
 80210ae:	fa1f fe8e 	uxth.w	lr, lr
 80210b2:	b2ad      	uxth	r5, r5
 80210b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80210b8:	fb07 a70c 	mla	r7, r7, ip, sl
 80210bc:	f10e 0401 	add.w	r4, lr, #1
 80210c0:	f105 0a01 	add.w	sl, r5, #1
 80210c4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80210c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80210cc:	b2bf      	uxth	r7, r7
 80210ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80210d2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80210d6:	ea4a 0e0e 	orr.w	lr, sl, lr
 80210da:	f107 0a01 	add.w	sl, r7, #1
 80210de:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80210e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80210e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80210ea:	9c02      	ldr	r4, [sp, #8]
 80210ec:	ea4e 0e0a 	orr.w	lr, lr, sl
 80210f0:	f820 e004 	strh.w	lr, [r0, r4]
 80210f4:	e7aa      	b.n	802104c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80210f6:	f04f 0900 	mov.w	r9, #0
 80210fa:	eba3 0409 	sub.w	r4, r3, r9
 80210fe:	2c00      	cmp	r4, #0
 8021100:	f77f af4a 	ble.w	8020f98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021104:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021108:	1414      	asrs	r4, r2, #16
 802110a:	140d      	asrs	r5, r1, #16
 802110c:	fb06 5504 	mla	r5, r6, r4, r5
 8021110:	9c01      	ldr	r4, [sp, #4]
 8021112:	5d64      	ldrb	r4, [r4, r5]
 8021114:	2cff      	cmp	r4, #255	; 0xff
 8021116:	d10b      	bne.n	8021130 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8021118:	9c00      	ldr	r4, [sp, #0]
 802111a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802111e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8021122:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021124:	4421      	add	r1, r4
 8021126:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021128:	f109 0901 	add.w	r9, r9, #1
 802112c:	4422      	add	r2, r4
 802112e:	e7e4      	b.n	80210fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021130:	2c00      	cmp	r4, #0
 8021132:	d0f6      	beq.n	8021122 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021134:	9e00      	ldr	r6, [sp, #0]
 8021136:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802113a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802113e:	b2a7      	uxth	r7, r4
 8021140:	122e      	asrs	r6, r5, #8
 8021142:	43e4      	mvns	r4, r4
 8021144:	b2e4      	uxtb	r4, r4
 8021146:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802114a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802114e:	fb16 f604 	smulbb	r6, r6, r4
 8021152:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021156:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802115a:	00ed      	lsls	r5, r5, #3
 802115c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021160:	b2ed      	uxtb	r5, r5
 8021162:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021166:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802116a:	fb15 f504 	smulbb	r5, r5, r4
 802116e:	fa5f fe8e 	uxtb.w	lr, lr
 8021172:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021176:	fb0e 5507 	mla	r5, lr, r7, r5
 802117a:	fb1a fa04 	smulbb	sl, sl, r4
 802117e:	fa1f fc8c 	uxth.w	ip, ip
 8021182:	b2ad      	uxth	r5, r5
 8021184:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021188:	fb06 a607 	mla	r6, r6, r7, sl
 802118c:	f10c 0401 	add.w	r4, ip, #1
 8021190:	f105 0a01 	add.w	sl, r5, #1
 8021194:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8021198:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802119c:	b2b6      	uxth	r6, r6
 802119e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80211a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80211a6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80211aa:	f106 0a01 	add.w	sl, r6, #1
 80211ae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80211b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80211b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80211ba:	ea4c 0c0a 	orr.w	ip, ip, sl
 80211be:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80211c2:	e7ae      	b.n	8021122 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80211c4:	b005      	add	sp, #20
 80211c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211ce:	b085      	sub	sp, #20
 80211d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80211d2:	9203      	str	r2, [sp, #12]
 80211d4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80211d8:	9201      	str	r2, [sp, #4]
 80211da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80211de:	9100      	str	r1, [sp, #0]
 80211e0:	6841      	ldr	r1, [r0, #4]
 80211e2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80211e6:	fb01 2404 	mla	r4, r1, r4, r2
 80211ea:	6802      	ldr	r2, [r0, #0]
 80211ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80211f0:	f8de 2000 	ldr.w	r2, [lr]
 80211f4:	9202      	str	r2, [sp, #8]
 80211f6:	9a01      	ldr	r2, [sp, #4]
 80211f8:	43d6      	mvns	r6, r2
 80211fa:	b2f6      	uxtb	r6, r6
 80211fc:	9a00      	ldr	r2, [sp, #0]
 80211fe:	2a00      	cmp	r2, #0
 8021200:	dc03      	bgt.n	802120a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8021202:	9a03      	ldr	r2, [sp, #12]
 8021204:	2a00      	cmp	r2, #0
 8021206:	f340 8124 	ble.w	8021452 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802120a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802120c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8021210:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8021214:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021218:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802121a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802121e:	2b00      	cmp	r3, #0
 8021220:	dd0e      	ble.n	8021240 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021222:	1408      	asrs	r0, r1, #16
 8021224:	d405      	bmi.n	8021232 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021226:	4560      	cmp	r0, ip
 8021228:	da03      	bge.n	8021232 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802122a:	1410      	asrs	r0, r2, #16
 802122c:	d401      	bmi.n	8021232 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802122e:	42b8      	cmp	r0, r7
 8021230:	db07      	blt.n	8021242 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021232:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021234:	4401      	add	r1, r0
 8021236:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021238:	3b01      	subs	r3, #1
 802123a:	4402      	add	r2, r0
 802123c:	3402      	adds	r4, #2
 802123e:	e7ee      	b.n	802121e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021240:	d06e      	beq.n	8021320 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021242:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021244:	1e58      	subs	r0, r3, #1
 8021246:	fb05 1500 	mla	r5, r5, r0, r1
 802124a:	142d      	asrs	r5, r5, #16
 802124c:	d45c      	bmi.n	8021308 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802124e:	4565      	cmp	r5, ip
 8021250:	da5a      	bge.n	8021308 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021252:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021254:	fb05 2000 	mla	r0, r5, r0, r2
 8021258:	1400      	asrs	r0, r0, #16
 802125a:	d455      	bmi.n	8021308 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802125c:	42b8      	cmp	r0, r7
 802125e:	da53      	bge.n	8021308 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021260:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8021264:	4699      	mov	r9, r3
 8021266:	46a2      	mov	sl, r4
 8021268:	f1b9 0f00 	cmp.w	r9, #0
 802126c:	dd54      	ble.n	8021318 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802126e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021272:	140d      	asrs	r5, r1, #16
 8021274:	1410      	asrs	r0, r2, #16
 8021276:	fb07 5000 	mla	r0, r7, r0, r5
 802127a:	9d02      	ldr	r5, [sp, #8]
 802127c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021280:	f8ba 5000 	ldrh.w	r5, [sl]
 8021284:	122f      	asrs	r7, r5, #8
 8021286:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802128a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802128e:	fb17 f706 	smulbb	r7, r7, r6
 8021292:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8021296:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802129a:	00ed      	lsls	r5, r5, #3
 802129c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80212a0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80212a4:	10c7      	asrs	r7, r0, #3
 80212a6:	b2ed      	uxtb	r5, r5
 80212a8:	00c0      	lsls	r0, r0, #3
 80212aa:	fb18 f806 	smulbb	r8, r8, r6
 80212ae:	fb15 f506 	smulbb	r5, r5, r6
 80212b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80212b6:	b2c0      	uxtb	r0, r0
 80212b8:	fa1f fc8c 	uxth.w	ip, ip
 80212bc:	fb07 870b 	mla	r7, r7, fp, r8
 80212c0:	fb00 500b 	mla	r0, r0, fp, r5
 80212c4:	b280      	uxth	r0, r0
 80212c6:	b2bf      	uxth	r7, r7
 80212c8:	f10c 0501 	add.w	r5, ip, #1
 80212cc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80212d0:	f107 0801 	add.w	r8, r7, #1
 80212d4:	1c45      	adds	r5, r0, #1
 80212d6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80212da:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80212de:	9811      	ldr	r0, [sp, #68]	; 0x44
 80212e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80212e4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80212e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80212ec:	ea45 0c0c 	orr.w	ip, r5, ip
 80212f0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80212f4:	4401      	add	r1, r0
 80212f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80212f8:	ea4c 0c08 	orr.w	ip, ip, r8
 80212fc:	f82a cb02 	strh.w	ip, [sl], #2
 8021300:	4402      	add	r2, r0
 8021302:	f109 39ff 	add.w	r9, r9, #4294967295
 8021306:	e7af      	b.n	8021268 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021308:	f8bd a004 	ldrh.w	sl, [sp, #4]
 802130c:	f04f 0800 	mov.w	r8, #0
 8021310:	eb03 0008 	add.w	r0, r3, r8
 8021314:	2800      	cmp	r0, #0
 8021316:	dc41      	bgt.n	802139c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021318:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802131c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021320:	9b00      	ldr	r3, [sp, #0]
 8021322:	2b00      	cmp	r3, #0
 8021324:	f340 8095 	ble.w	8021452 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021328:	ee30 0a04 	vadd.f32	s0, s0, s8
 802132c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021330:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021336:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802133a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802133e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021342:	eef0 6a62 	vmov.f32	s13, s5
 8021346:	ee61 7a27 	vmul.f32	s15, s2, s15
 802134a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802134e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021352:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021356:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802135a:	eef0 6a43 	vmov.f32	s13, s6
 802135e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021362:	ee12 2a90 	vmov	r2, s5
 8021366:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802136a:	fb92 f3f3 	sdiv	r3, r2, r3
 802136e:	ee13 2a10 	vmov	r2, s6
 8021372:	9311      	str	r3, [sp, #68]	; 0x44
 8021374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021376:	fb92 f3f3 	sdiv	r3, r2, r3
 802137a:	9312      	str	r3, [sp, #72]	; 0x48
 802137c:	9b00      	ldr	r3, [sp, #0]
 802137e:	9a03      	ldr	r2, [sp, #12]
 8021380:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021384:	3b01      	subs	r3, #1
 8021386:	9300      	str	r3, [sp, #0]
 8021388:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 802138c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802138e:	eeb0 3a67 	vmov.f32	s6, s15
 8021392:	bf08      	it	eq
 8021394:	4613      	moveq	r3, r2
 8021396:	eef0 2a47 	vmov.f32	s5, s14
 802139a:	e72f      	b.n	80211fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802139c:	140f      	asrs	r7, r1, #16
 802139e:	d451      	bmi.n	8021444 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80213a0:	f8de 5008 	ldr.w	r5, [lr, #8]
 80213a4:	42bd      	cmp	r5, r7
 80213a6:	dd4d      	ble.n	8021444 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80213a8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80213ac:	d44a      	bmi.n	8021444 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80213ae:	f8de 000c 	ldr.w	r0, [lr, #12]
 80213b2:	4560      	cmp	r0, ip
 80213b4:	dd46      	ble.n	8021444 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80213b6:	b22d      	sxth	r5, r5
 80213b8:	fb0c 7505 	mla	r5, ip, r5, r7
 80213bc:	9802      	ldr	r0, [sp, #8]
 80213be:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80213c2:	f06f 0501 	mvn.w	r5, #1
 80213c6:	fb05 fb08 	mul.w	fp, r5, r8
 80213ca:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80213ce:	f834 500b 	ldrh.w	r5, [r4, fp]
 80213d2:	122f      	asrs	r7, r5, #8
 80213d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80213d8:	fb17 f706 	smulbb	r7, r7, r6
 80213dc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80213e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80213e4:	00ed      	lsls	r5, r5, #3
 80213e6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80213ea:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80213ee:	10c7      	asrs	r7, r0, #3
 80213f0:	b2ed      	uxtb	r5, r5
 80213f2:	00c0      	lsls	r0, r0, #3
 80213f4:	fb19 f906 	smulbb	r9, r9, r6
 80213f8:	fb15 f506 	smulbb	r5, r5, r6
 80213fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021400:	b2c0      	uxtb	r0, r0
 8021402:	fa1f fc8c 	uxth.w	ip, ip
 8021406:	fb07 970a 	mla	r7, r7, sl, r9
 802140a:	fb00 500a 	mla	r0, r0, sl, r5
 802140e:	b2bf      	uxth	r7, r7
 8021410:	b280      	uxth	r0, r0
 8021412:	f10c 0501 	add.w	r5, ip, #1
 8021416:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802141a:	f107 0901 	add.w	r9, r7, #1
 802141e:	1c45      	adds	r5, r0, #1
 8021420:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021424:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021428:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802142c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021430:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021434:	ea45 0c0c 	orr.w	ip, r5, ip
 8021438:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802143c:	ea4c 0c09 	orr.w	ip, ip, r9
 8021440:	f824 c00b 	strh.w	ip, [r4, fp]
 8021444:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021446:	4401      	add	r1, r0
 8021448:	9812      	ldr	r0, [sp, #72]	; 0x48
 802144a:	f108 38ff 	add.w	r8, r8, #4294967295
 802144e:	4402      	add	r2, r0
 8021450:	e75e      	b.n	8021310 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021452:	b005      	add	sp, #20
 8021454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021458 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802145c:	b085      	sub	sp, #20
 802145e:	4693      	mov	fp, r2
 8021460:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021462:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021464:	6870      	ldr	r0, [r6, #4]
 8021466:	9101      	str	r1, [sp, #4]
 8021468:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802146c:	fb00 2404 	mla	r4, r0, r4, r2
 8021470:	6832      	ldr	r2, [r6, #0]
 8021472:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8021476:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802147a:	682a      	ldr	r2, [r5, #0]
 802147c:	9202      	str	r2, [sp, #8]
 802147e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021482:	9a01      	ldr	r2, [sp, #4]
 8021484:	2a00      	cmp	r2, #0
 8021486:	dc03      	bgt.n	8021490 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021488:	f1bb 0f00 	cmp.w	fp, #0
 802148c:	f340 809a 	ble.w	80215c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8021490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021492:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8021496:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802149a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802149e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	dd0c      	ble.n	80214c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80214a8:	1406      	asrs	r6, r0, #16
 80214aa:	d405      	bmi.n	80214b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80214ac:	454e      	cmp	r6, r9
 80214ae:	da03      	bge.n	80214b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80214b0:	1416      	asrs	r6, r2, #16
 80214b2:	d401      	bmi.n	80214b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80214b4:	4546      	cmp	r6, r8
 80214b6:	db05      	blt.n	80214c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80214b8:	4470      	add	r0, lr
 80214ba:	4462      	add	r2, ip
 80214bc:	3b01      	subs	r3, #1
 80214be:	3402      	adds	r4, #2
 80214c0:	e7f0      	b.n	80214a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80214c2:	d00f      	beq.n	80214e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80214c4:	1e5e      	subs	r6, r3, #1
 80214c6:	fb0e 0706 	mla	r7, lr, r6, r0
 80214ca:	143f      	asrs	r7, r7, #16
 80214cc:	d541      	bpl.n	8021552 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80214ce:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80214d2:	4698      	mov	r8, r3
 80214d4:	9603      	str	r6, [sp, #12]
 80214d6:	f1b8 0f00 	cmp.w	r8, #0
 80214da:	dc56      	bgt.n	802158a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80214dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80214e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80214e4:	9b01      	ldr	r3, [sp, #4]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	dd6c      	ble.n	80215c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80214ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80214ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80214f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80214f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80214fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021500:	eeb0 6a62 	vmov.f32	s12, s5
 8021504:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021508:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802150c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021510:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021514:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021518:	eeb0 6a43 	vmov.f32	s12, s6
 802151c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021520:	ee12 2a90 	vmov	r2, s5
 8021524:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021528:	fb92 fef3 	sdiv	lr, r2, r3
 802152c:	ee13 2a10 	vmov	r2, s6
 8021530:	fb92 fcf3 	sdiv	ip, r2, r3
 8021534:	9b01      	ldr	r3, [sp, #4]
 8021536:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802153a:	3b01      	subs	r3, #1
 802153c:	9301      	str	r3, [sp, #4]
 802153e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021544:	eeb0 3a67 	vmov.f32	s6, s15
 8021548:	bf08      	it	eq
 802154a:	465b      	moveq	r3, fp
 802154c:	eef0 2a47 	vmov.f32	s5, s14
 8021550:	e797      	b.n	8021482 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021552:	454f      	cmp	r7, r9
 8021554:	dabb      	bge.n	80214ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021556:	fb0c 2606 	mla	r6, ip, r6, r2
 802155a:	1436      	asrs	r6, r6, #16
 802155c:	d4b7      	bmi.n	80214ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802155e:	4546      	cmp	r6, r8
 8021560:	dab5      	bge.n	80214ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021562:	461e      	mov	r6, r3
 8021564:	46a0      	mov	r8, r4
 8021566:	2e00      	cmp	r6, #0
 8021568:	ddb8      	ble.n	80214dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802156a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802156e:	9902      	ldr	r1, [sp, #8]
 8021570:	1417      	asrs	r7, r2, #16
 8021572:	ea4f 4920 	mov.w	r9, r0, asr #16
 8021576:	fb0a 9707 	mla	r7, sl, r7, r9
 802157a:	4470      	add	r0, lr
 802157c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8021580:	f828 7b02 	strh.w	r7, [r8], #2
 8021584:	4462      	add	r2, ip
 8021586:	3e01      	subs	r6, #1
 8021588:	e7ed      	b.n	8021566 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802158a:	ea5f 4920 	movs.w	r9, r0, asr #16
 802158e:	d414      	bmi.n	80215ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021590:	68ae      	ldr	r6, [r5, #8]
 8021592:	454e      	cmp	r6, r9
 8021594:	dd11      	ble.n	80215ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021596:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802159a:	d40e      	bmi.n	80215ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802159c:	68ef      	ldr	r7, [r5, #12]
 802159e:	4557      	cmp	r7, sl
 80215a0:	dd0b      	ble.n	80215ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80215a2:	b236      	sxth	r6, r6
 80215a4:	fb0a 9606 	mla	r6, sl, r6, r9
 80215a8:	9f02      	ldr	r7, [sp, #8]
 80215aa:	f06f 0101 	mvn.w	r1, #1
 80215ae:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80215b2:	fb01 f608 	mul.w	r6, r1, r8
 80215b6:	9903      	ldr	r1, [sp, #12]
 80215b8:	538f      	strh	r7, [r1, r6]
 80215ba:	4470      	add	r0, lr
 80215bc:	4462      	add	r2, ip
 80215be:	f108 38ff 	add.w	r8, r8, #4294967295
 80215c2:	e788      	b.n	80214d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80215c4:	b005      	add	sp, #20
 80215c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215ce:	b087      	sub	sp, #28
 80215d0:	468b      	mov	fp, r1
 80215d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80215d4:	9203      	str	r2, [sp, #12]
 80215d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80215da:	9204      	str	r2, [sp, #16]
 80215dc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80215e0:	6841      	ldr	r1, [r0, #4]
 80215e2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80215e6:	fb01 2505 	mla	r5, r1, r5, r2
 80215ea:	6802      	ldr	r2, [r0, #0]
 80215ec:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80215f0:	f8d9 2000 	ldr.w	r2, [r9]
 80215f4:	9201      	str	r2, [sp, #4]
 80215f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80215fa:	f1bb 0f00 	cmp.w	fp, #0
 80215fe:	dc03      	bgt.n	8021608 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021600:	9a03      	ldr	r2, [sp, #12]
 8021602:	2a00      	cmp	r2, #0
 8021604:	f340 8159 	ble.w	80218ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802160a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802160e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021612:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021618:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802161c:	2b00      	cmp	r3, #0
 802161e:	dd0e      	ble.n	802163e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021620:	1402      	asrs	r2, r0, #16
 8021622:	d405      	bmi.n	8021630 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021624:	42ba      	cmp	r2, r7
 8021626:	da03      	bge.n	8021630 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021628:	140a      	asrs	r2, r1, #16
 802162a:	d401      	bmi.n	8021630 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802162c:	42b2      	cmp	r2, r6
 802162e:	db07      	blt.n	8021640 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021630:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021632:	4410      	add	r0, r2
 8021634:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021636:	3b01      	subs	r3, #1
 8021638:	4411      	add	r1, r2
 802163a:	3502      	adds	r5, #2
 802163c:	e7ee      	b.n	802161c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802163e:	d017      	beq.n	8021670 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021640:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021642:	1e5a      	subs	r2, r3, #1
 8021644:	fb04 0402 	mla	r4, r4, r2, r0
 8021648:	1424      	asrs	r4, r4, #16
 802164a:	d409      	bmi.n	8021660 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802164c:	42bc      	cmp	r4, r7
 802164e:	da07      	bge.n	8021660 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021650:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021652:	fb04 1202 	mla	r2, r4, r2, r1
 8021656:	1412      	asrs	r2, r2, #16
 8021658:	d402      	bmi.n	8021660 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802165a:	42b2      	cmp	r2, r6
 802165c:	f2c0 80bf 	blt.w	80217de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021660:	2700      	movs	r7, #0
 8021662:	19da      	adds	r2, r3, r7
 8021664:	2a00      	cmp	r2, #0
 8021666:	dc3e      	bgt.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021668:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802166c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021670:	f1bb 0f00 	cmp.w	fp, #0
 8021674:	f340 8121 	ble.w	80218ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021678:	ee30 0a04 	vadd.f32	s0, s0, s8
 802167c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021680:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021686:	f1bb 0b01 	subs.w	fp, fp, #1
 802168a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802168e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021692:	eeb0 6a62 	vmov.f32	s12, s5
 8021696:	ee61 7a27 	vmul.f32	s15, s2, s15
 802169a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802169e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80216a2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80216a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80216aa:	eeb0 6a43 	vmov.f32	s12, s6
 80216ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80216b2:	ee12 2a90 	vmov	r2, s5
 80216b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80216ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80216be:	ee13 2a10 	vmov	r2, s6
 80216c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80216c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80216c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80216ce:	9a03      	ldr	r2, [sp, #12]
 80216d0:	9314      	str	r3, [sp, #80]	; 0x50
 80216d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80216d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216d8:	eeb0 3a67 	vmov.f32	s6, s15
 80216dc:	bf08      	it	eq
 80216de:	4613      	moveq	r3, r2
 80216e0:	eef0 2a47 	vmov.f32	s5, s14
 80216e4:	e789      	b.n	80215fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80216e6:	1406      	asrs	r6, r0, #16
 80216e8:	d42d      	bmi.n	8021746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80216ea:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80216ee:	42b4      	cmp	r4, r6
 80216f0:	dd29      	ble.n	8021746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80216f2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 80216f6:	d426      	bmi.n	8021746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80216f8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80216fc:	4562      	cmp	r2, ip
 80216fe:	dd22      	ble.n	8021746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021700:	b224      	sxth	r4, r4
 8021702:	9a01      	ldr	r2, [sp, #4]
 8021704:	fb0c 6404 	mla	r4, ip, r4, r6
 8021708:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 802170c:	0e22      	lsrs	r2, r4, #24
 802170e:	d01a      	beq.n	8021746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021710:	9e04      	ldr	r6, [sp, #16]
 8021712:	4372      	muls	r2, r6
 8021714:	1c56      	adds	r6, r2, #1
 8021716:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802171a:	1212      	asrs	r2, r2, #8
 802171c:	0a26      	lsrs	r6, r4, #8
 802171e:	2aff      	cmp	r2, #255	; 0xff
 8021720:	9605      	str	r6, [sp, #20]
 8021722:	d116      	bne.n	8021752 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021724:	f06f 0201 	mvn.w	r2, #1
 8021728:	fb02 fc07 	mul.w	ip, r2, r7
 802172c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021730:	0962      	lsrs	r2, r4, #5
 8021732:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021736:	f026 0607 	bic.w	r6, r6, #7
 802173a:	4316      	orrs	r6, r2
 802173c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021740:	4326      	orrs	r6, r4
 8021742:	f825 600c 	strh.w	r6, [r5, ip]
 8021746:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021748:	4410      	add	r0, r2
 802174a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802174c:	3f01      	subs	r7, #1
 802174e:	4411      	add	r1, r2
 8021750:	e787      	b.n	8021662 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021752:	f06f 0601 	mvn.w	r6, #1
 8021756:	437e      	muls	r6, r7
 8021758:	fa1f fa82 	uxth.w	sl, r2
 802175c:	f835 8006 	ldrh.w	r8, [r5, r6]
 8021760:	9602      	str	r6, [sp, #8]
 8021762:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021766:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 802176a:	43d2      	mvns	r2, r2
 802176c:	b2d2      	uxtb	r2, r2
 802176e:	fb1c fc0a 	smulbb	ip, ip, sl
 8021772:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021776:	fb0e ce02 	mla	lr, lr, r2, ip
 802177a:	b2e4      	uxtb	r4, r4
 802177c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021780:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021784:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021788:	fa5f f888 	uxtb.w	r8, r8
 802178c:	fb14 f40a 	smulbb	r4, r4, sl
 8021790:	fb08 4402 	mla	r4, r8, r2, r4
 8021794:	fa1f fe8e 	uxth.w	lr, lr
 8021798:	fb16 f60a 	smulbb	r6, r6, sl
 802179c:	b2a4      	uxth	r4, r4
 802179e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80217a2:	fb0c 6c02 	mla	ip, ip, r2, r6
 80217a6:	f10e 0201 	add.w	r2, lr, #1
 80217aa:	1c66      	adds	r6, r4, #1
 80217ac:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80217b0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80217b4:	fa1f fc8c 	uxth.w	ip, ip
 80217b8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80217bc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80217c0:	ea46 0e0e 	orr.w	lr, r6, lr
 80217c4:	f10c 0601 	add.w	r6, ip, #1
 80217c8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80217cc:	0976      	lsrs	r6, r6, #5
 80217ce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80217d2:	9a02      	ldr	r2, [sp, #8]
 80217d4:	ea4e 0e06 	orr.w	lr, lr, r6
 80217d8:	f825 e002 	strh.w	lr, [r5, r2]
 80217dc:	e7b3      	b.n	8021746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80217de:	f04f 0800 	mov.w	r8, #0
 80217e2:	eba3 0208 	sub.w	r2, r3, r8
 80217e6:	2a00      	cmp	r2, #0
 80217e8:	f77f af3e 	ble.w	8021668 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80217ec:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 80217f0:	1404      	asrs	r4, r0, #16
 80217f2:	140a      	asrs	r2, r1, #16
 80217f4:	fb06 4202 	mla	r2, r6, r2, r4
 80217f8:	9c01      	ldr	r4, [sp, #4]
 80217fa:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80217fe:	0e22      	lsrs	r2, r4, #24
 8021800:	d016      	beq.n	8021830 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021802:	9e04      	ldr	r6, [sp, #16]
 8021804:	4372      	muls	r2, r6
 8021806:	1c56      	adds	r6, r2, #1
 8021808:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802180c:	1212      	asrs	r2, r2, #8
 802180e:	2aff      	cmp	r2, #255	; 0xff
 8021810:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8021814:	d113      	bne.n	802183e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021816:	0962      	lsrs	r2, r4, #5
 8021818:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802181c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021820:	f026 0607 	bic.w	r6, r6, #7
 8021824:	4316      	orrs	r6, r2
 8021826:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802182a:	4326      	orrs	r6, r4
 802182c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8021830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021832:	4410      	add	r0, r2
 8021834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021836:	f108 0801 	add.w	r8, r8, #1
 802183a:	4411      	add	r1, r2
 802183c:	e7d1      	b.n	80217e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802183e:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8021842:	fa1f fa82 	uxth.w	sl, r2
 8021846:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802184a:	f3c4 4707 	ubfx	r7, r4, #16, #8
 802184e:	43d2      	mvns	r2, r2
 8021850:	b2d2      	uxtb	r2, r2
 8021852:	fb17 f70a 	smulbb	r7, r7, sl
 8021856:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802185a:	fb0c 7c02 	mla	ip, ip, r2, r7
 802185e:	b2e4      	uxtb	r4, r4
 8021860:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021864:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021868:	fa5f fe8e 	uxtb.w	lr, lr
 802186c:	fb14 f40a 	smulbb	r4, r4, sl
 8021870:	fb0e 4402 	mla	r4, lr, r2, r4
 8021874:	b2f6      	uxtb	r6, r6
 8021876:	fa1f fc8c 	uxth.w	ip, ip
 802187a:	fb16 f60a 	smulbb	r6, r6, sl
 802187e:	b2a4      	uxth	r4, r4
 8021880:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021884:	fb07 6702 	mla	r7, r7, r2, r6
 8021888:	f10c 0201 	add.w	r2, ip, #1
 802188c:	1c66      	adds	r6, r4, #1
 802188e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021892:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021896:	b2bf      	uxth	r7, r7
 8021898:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802189c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80218a0:	ea46 0c0c 	orr.w	ip, r6, ip
 80218a4:	1c7e      	adds	r6, r7, #1
 80218a6:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80218aa:	0976      	lsrs	r6, r6, #5
 80218ac:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80218b0:	ea4c 0c06 	orr.w	ip, ip, r6
 80218b4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80218b8:	e7ba      	b.n	8021830 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80218ba:	b007      	add	sp, #28
 80218bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80218c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c4:	b085      	sub	sp, #20
 80218c6:	468b      	mov	fp, r1
 80218c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80218ca:	9203      	str	r2, [sp, #12]
 80218cc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80218d0:	6841      	ldr	r1, [r0, #4]
 80218d2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80218d6:	fb01 2404 	mla	r4, r1, r4, r2
 80218da:	6802      	ldr	r2, [r0, #0]
 80218dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80218e0:	f8d8 2000 	ldr.w	r2, [r8]
 80218e4:	9201      	str	r2, [sp, #4]
 80218e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80218ea:	f1bb 0f00 	cmp.w	fp, #0
 80218ee:	dc03      	bgt.n	80218f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80218f0:	9a03      	ldr	r2, [sp, #12]
 80218f2:	2a00      	cmp	r2, #0
 80218f4:	f340 814f 	ble.w	8021b96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80218f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80218fa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80218fe:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021902:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021906:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021908:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802190c:	2b00      	cmp	r3, #0
 802190e:	dd0e      	ble.n	802192e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021910:	1408      	asrs	r0, r1, #16
 8021912:	d405      	bmi.n	8021920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021914:	42b8      	cmp	r0, r7
 8021916:	da03      	bge.n	8021920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021918:	1410      	asrs	r0, r2, #16
 802191a:	d401      	bmi.n	8021920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802191c:	42b0      	cmp	r0, r6
 802191e:	db07      	blt.n	8021930 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021920:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021922:	4401      	add	r1, r0
 8021924:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021926:	3b01      	subs	r3, #1
 8021928:	4402      	add	r2, r0
 802192a:	3402      	adds	r4, #2
 802192c:	e7ee      	b.n	802190c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802192e:	d017      	beq.n	8021960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021930:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021932:	1e58      	subs	r0, r3, #1
 8021934:	fb05 1500 	mla	r5, r5, r0, r1
 8021938:	142d      	asrs	r5, r5, #16
 802193a:	d409      	bmi.n	8021950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802193c:	42bd      	cmp	r5, r7
 802193e:	da07      	bge.n	8021950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021940:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021942:	fb05 2000 	mla	r0, r5, r0, r2
 8021946:	1400      	asrs	r0, r0, #16
 8021948:	d402      	bmi.n	8021950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802194a:	42b0      	cmp	r0, r6
 802194c:	f2c0 80ba 	blt.w	8021ac4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021950:	2600      	movs	r6, #0
 8021952:	1998      	adds	r0, r3, r6
 8021954:	2800      	cmp	r0, #0
 8021956:	dc3e      	bgt.n	80219d6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021958:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802195c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021960:	f1bb 0f00 	cmp.w	fp, #0
 8021964:	f340 8117 	ble.w	8021b96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021968:	ee30 0a04 	vadd.f32	s0, s0, s8
 802196c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021970:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021976:	f1bb 0b01 	subs.w	fp, fp, #1
 802197a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802197e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021982:	eeb0 6a62 	vmov.f32	s12, s5
 8021986:	ee61 7a27 	vmul.f32	s15, s2, s15
 802198a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802198e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021992:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021996:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802199a:	eeb0 6a43 	vmov.f32	s12, s6
 802199e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80219a2:	ee12 2a90 	vmov	r2, s5
 80219a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80219aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80219ae:	ee13 2a10 	vmov	r2, s6
 80219b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80219b6:	9311      	str	r3, [sp, #68]	; 0x44
 80219b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80219be:	9a03      	ldr	r2, [sp, #12]
 80219c0:	9312      	str	r3, [sp, #72]	; 0x48
 80219c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80219c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219c8:	eeb0 3a67 	vmov.f32	s6, s15
 80219cc:	bf08      	it	eq
 80219ce:	4613      	moveq	r3, r2
 80219d0:	eef0 2a47 	vmov.f32	s5, s14
 80219d4:	e789      	b.n	80218ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80219d6:	140f      	asrs	r7, r1, #16
 80219d8:	d424      	bmi.n	8021a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80219da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80219de:	42bd      	cmp	r5, r7
 80219e0:	dd20      	ble.n	8021a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80219e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80219e6:	d41d      	bmi.n	8021a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80219e8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80219ec:	4560      	cmp	r0, ip
 80219ee:	dd19      	ble.n	8021a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80219f0:	b22d      	sxth	r5, r5
 80219f2:	fb0c 7505 	mla	r5, ip, r5, r7
 80219f6:	9801      	ldr	r0, [sp, #4]
 80219f8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80219fc:	0e07      	lsrs	r7, r0, #24
 80219fe:	2fff      	cmp	r7, #255	; 0xff
 8021a00:	d116      	bne.n	8021a30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021a02:	f06f 0501 	mvn.w	r5, #1
 8021a06:	fb05 f706 	mul.w	r7, r5, r6
 8021a0a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8021a0e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8021a12:	0945      	lsrs	r5, r0, #5
 8021a14:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a18:	ea4c 0505 	orr.w	r5, ip, r5
 8021a1c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021a20:	4305      	orrs	r5, r0
 8021a22:	53e5      	strh	r5, [r4, r7]
 8021a24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021a26:	4401      	add	r1, r0
 8021a28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021a2a:	3e01      	subs	r6, #1
 8021a2c:	4402      	add	r2, r0
 8021a2e:	e790      	b.n	8021952 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021a30:	b2fd      	uxtb	r5, r7
 8021a32:	2f00      	cmp	r7, #0
 8021a34:	d0f6      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021a36:	f06f 0701 	mvn.w	r7, #1
 8021a3a:	4377      	muls	r7, r6
 8021a3c:	fa1f f985 	uxth.w	r9, r5
 8021a40:	f834 e007 	ldrh.w	lr, [r4, r7]
 8021a44:	9702      	str	r7, [sp, #8]
 8021a46:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021a4a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8021a4e:	43ed      	mvns	r5, r5
 8021a50:	b2ed      	uxtb	r5, r5
 8021a52:	fb17 f709 	smulbb	r7, r7, r9
 8021a56:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021a5a:	fb0c 7c05 	mla	ip, ip, r5, r7
 8021a5e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021a62:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021a66:	b2c0      	uxtb	r0, r0
 8021a68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021a6c:	fa5f fe8e 	uxtb.w	lr, lr
 8021a70:	fb10 f009 	smulbb	r0, r0, r9
 8021a74:	fb0e 0005 	mla	r0, lr, r5, r0
 8021a78:	b280      	uxth	r0, r0
 8021a7a:	fa1f fc8c 	uxth.w	ip, ip
 8021a7e:	fb1a fa09 	smulbb	sl, sl, r9
 8021a82:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021a86:	fb07 a705 	mla	r7, r7, r5, sl
 8021a8a:	f100 0a01 	add.w	sl, r0, #1
 8021a8e:	f10c 0501 	add.w	r5, ip, #1
 8021a92:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8021a96:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021a9a:	b2bf      	uxth	r7, r7
 8021a9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021aa0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021aa4:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021aa8:	f107 0a01 	add.w	sl, r7, #1
 8021aac:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021ab0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021ab4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021ab8:	9802      	ldr	r0, [sp, #8]
 8021aba:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021abe:	f824 c000 	strh.w	ip, [r4, r0]
 8021ac2:	e7af      	b.n	8021a24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021ac4:	f04f 0e00 	mov.w	lr, #0
 8021ac8:	eba3 000e 	sub.w	r0, r3, lr
 8021acc:	2800      	cmp	r0, #0
 8021ace:	f77f af43 	ble.w	8021958 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021ad2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021ad6:	140d      	asrs	r5, r1, #16
 8021ad8:	1410      	asrs	r0, r2, #16
 8021ada:	fb06 5000 	mla	r0, r6, r0, r5
 8021ade:	9d01      	ldr	r5, [sp, #4]
 8021ae0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021ae4:	0e2e      	lsrs	r6, r5, #24
 8021ae6:	2eff      	cmp	r6, #255	; 0xff
 8021ae8:	d112      	bne.n	8021b10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021aea:	482c      	ldr	r0, [pc, #176]	; (8021b9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021aec:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021af0:	0968      	lsrs	r0, r5, #5
 8021af2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021af6:	4330      	orrs	r0, r6
 8021af8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021afc:	4328      	orrs	r0, r5
 8021afe:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021b02:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021b04:	4401      	add	r1, r0
 8021b06:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021b08:	f10e 0e01 	add.w	lr, lr, #1
 8021b0c:	4402      	add	r2, r0
 8021b0e:	e7db      	b.n	8021ac8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021b10:	b2f0      	uxtb	r0, r6
 8021b12:	2e00      	cmp	r6, #0
 8021b14:	d0f5      	beq.n	8021b02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021b16:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021b1a:	fa1f f980 	uxth.w	r9, r0
 8021b1e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021b22:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021b26:	43c0      	mvns	r0, r0
 8021b28:	b2c0      	uxtb	r0, r0
 8021b2a:	fb16 f609 	smulbb	r6, r6, r9
 8021b2e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021b32:	fb07 6700 	mla	r7, r7, r0, r6
 8021b36:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021b3a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021b3e:	b2ed      	uxtb	r5, r5
 8021b40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021b44:	fa5f fc8c 	uxtb.w	ip, ip
 8021b48:	fb15 f509 	smulbb	r5, r5, r9
 8021b4c:	fb0c 5500 	mla	r5, ip, r0, r5
 8021b50:	b2bf      	uxth	r7, r7
 8021b52:	fb1a fa09 	smulbb	sl, sl, r9
 8021b56:	b2ad      	uxth	r5, r5
 8021b58:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021b5c:	fb06 a600 	mla	r6, r6, r0, sl
 8021b60:	1c78      	adds	r0, r7, #1
 8021b62:	f105 0a01 	add.w	sl, r5, #1
 8021b66:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021b6a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021b6e:	b2b6      	uxth	r6, r6
 8021b70:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021b74:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021b78:	ea4a 0707 	orr.w	r7, sl, r7
 8021b7c:	f106 0a01 	add.w	sl, r6, #1
 8021b80:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021b84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021b88:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021b8c:	ea47 070a 	orr.w	r7, r7, sl
 8021b90:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021b94:	e7b5      	b.n	8021b02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021b96:	b005      	add	sp, #20
 8021b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b9c:	fffff800 	.word	0xfffff800

08021ba0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ba4:	b087      	sub	sp, #28
 8021ba6:	468b      	mov	fp, r1
 8021ba8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021baa:	9203      	str	r2, [sp, #12]
 8021bac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021bb0:	9204      	str	r2, [sp, #16]
 8021bb2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021bb6:	6841      	ldr	r1, [r0, #4]
 8021bb8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021bbc:	fb01 2404 	mla	r4, r1, r4, r2
 8021bc0:	6802      	ldr	r2, [r0, #0]
 8021bc2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021bc6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021bca:	3201      	adds	r2, #1
 8021bcc:	f022 0201 	bic.w	r2, r2, #1
 8021bd0:	9200      	str	r2, [sp, #0]
 8021bd2:	f8d9 2000 	ldr.w	r2, [r9]
 8021bd6:	9201      	str	r2, [sp, #4]
 8021bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021bdc:	f1bb 0f00 	cmp.w	fp, #0
 8021be0:	dc03      	bgt.n	8021bea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021be2:	9a03      	ldr	r2, [sp, #12]
 8021be4:	2a00      	cmp	r2, #0
 8021be6:	f340 8169 	ble.w	8021ebc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021bea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021bec:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021bf0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021bf4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021bfa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	dd0e      	ble.n	8021c20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021c02:	1402      	asrs	r2, r0, #16
 8021c04:	d405      	bmi.n	8021c12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021c06:	42ba      	cmp	r2, r7
 8021c08:	da03      	bge.n	8021c12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021c0a:	140a      	asrs	r2, r1, #16
 8021c0c:	d401      	bmi.n	8021c12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021c0e:	42b2      	cmp	r2, r6
 8021c10:	db07      	blt.n	8021c22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021c12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c14:	4410      	add	r0, r2
 8021c16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c18:	3b01      	subs	r3, #1
 8021c1a:	4411      	add	r1, r2
 8021c1c:	3402      	adds	r4, #2
 8021c1e:	e7ee      	b.n	8021bfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021c20:	d017      	beq.n	8021c52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021c22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021c24:	1e5a      	subs	r2, r3, #1
 8021c26:	fb05 0502 	mla	r5, r5, r2, r0
 8021c2a:	142d      	asrs	r5, r5, #16
 8021c2c:	d409      	bmi.n	8021c42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021c2e:	42bd      	cmp	r5, r7
 8021c30:	da07      	bge.n	8021c42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021c32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021c34:	fb05 1202 	mla	r2, r5, r2, r1
 8021c38:	1412      	asrs	r2, r2, #16
 8021c3a:	d402      	bmi.n	8021c42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021c3c:	42b2      	cmp	r2, r6
 8021c3e:	f2c0 80c7 	blt.w	8021dd0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021c42:	2700      	movs	r7, #0
 8021c44:	19da      	adds	r2, r3, r7
 8021c46:	2a00      	cmp	r2, #0
 8021c48:	dc3e      	bgt.n	8021cc8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021c4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021c4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021c52:	f1bb 0f00 	cmp.w	fp, #0
 8021c56:	f340 8131 	ble.w	8021ebc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021c5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021c68:	f1bb 0b01 	subs.w	fp, fp, #1
 8021c6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c74:	eeb0 6a62 	vmov.f32	s12, s5
 8021c78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021c80:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c84:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021c88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c8c:	eeb0 6a43 	vmov.f32	s12, s6
 8021c90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c94:	ee12 2a90 	vmov	r2, s5
 8021c98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ca0:	ee13 2a10 	vmov	r2, s6
 8021ca4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ca8:	9313      	str	r3, [sp, #76]	; 0x4c
 8021caa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cb0:	9a03      	ldr	r2, [sp, #12]
 8021cb2:	9314      	str	r3, [sp, #80]	; 0x50
 8021cb4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cba:	eeb0 3a67 	vmov.f32	s6, s15
 8021cbe:	bf08      	it	eq
 8021cc0:	4613      	moveq	r3, r2
 8021cc2:	eef0 2a47 	vmov.f32	s5, s14
 8021cc6:	e789      	b.n	8021bdc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021cc8:	1405      	asrs	r5, r0, #16
 8021cca:	d435      	bmi.n	8021d38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021ccc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021cd0:	42aa      	cmp	r2, r5
 8021cd2:	dd31      	ble.n	8021d38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021cd4:	140e      	asrs	r6, r1, #16
 8021cd6:	d42f      	bmi.n	8021d38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021cd8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021cdc:	42b2      	cmp	r2, r6
 8021cde:	dd2b      	ble.n	8021d38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021ce0:	9a00      	ldr	r2, [sp, #0]
 8021ce2:	fb06 5502 	mla	r5, r6, r2, r5
 8021ce6:	086a      	lsrs	r2, r5, #1
 8021ce8:	9e01      	ldr	r6, [sp, #4]
 8021cea:	5cb2      	ldrb	r2, [r6, r2]
 8021cec:	07ee      	lsls	r6, r5, #31
 8021cee:	bf54      	ite	pl
 8021cf0:	f002 020f 	andpl.w	r2, r2, #15
 8021cf4:	1112      	asrmi	r2, r2, #4
 8021cf6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021cfa:	b2d2      	uxtb	r2, r2
 8021cfc:	b1e2      	cbz	r2, 8021d38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021cfe:	9d04      	ldr	r5, [sp, #16]
 8021d00:	436a      	muls	r2, r5
 8021d02:	1c55      	adds	r5, r2, #1
 8021d04:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021d08:	4d6e      	ldr	r5, [pc, #440]	; (8021ec4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021d0a:	682d      	ldr	r5, [r5, #0]
 8021d0c:	1212      	asrs	r2, r2, #8
 8021d0e:	0a2e      	lsrs	r6, r5, #8
 8021d10:	2aff      	cmp	r2, #255	; 0xff
 8021d12:	9605      	str	r6, [sp, #20]
 8021d14:	d116      	bne.n	8021d44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8021d16:	f06f 0201 	mvn.w	r2, #1
 8021d1a:	fb02 fc07 	mul.w	ip, r2, r7
 8021d1e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021d22:	096a      	lsrs	r2, r5, #5
 8021d24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d28:	f026 0607 	bic.w	r6, r6, #7
 8021d2c:	4316      	orrs	r6, r2
 8021d2e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021d32:	432e      	orrs	r6, r5
 8021d34:	f824 600c 	strh.w	r6, [r4, ip]
 8021d38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021d3a:	4410      	add	r0, r2
 8021d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021d3e:	3f01      	subs	r7, #1
 8021d40:	4411      	add	r1, r2
 8021d42:	e77f      	b.n	8021c44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021d44:	f06f 0601 	mvn.w	r6, #1
 8021d48:	437e      	muls	r6, r7
 8021d4a:	fa1f fa82 	uxth.w	sl, r2
 8021d4e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8021d52:	9602      	str	r6, [sp, #8]
 8021d54:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021d58:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8021d5c:	43d2      	mvns	r2, r2
 8021d5e:	b2d2      	uxtb	r2, r2
 8021d60:	fb1c fc0a 	smulbb	ip, ip, sl
 8021d64:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021d68:	fb0e ce02 	mla	lr, lr, r2, ip
 8021d6c:	b2ed      	uxtb	r5, r5
 8021d6e:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021d72:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021d76:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021d7a:	fa5f f888 	uxtb.w	r8, r8
 8021d7e:	fb15 f50a 	smulbb	r5, r5, sl
 8021d82:	fb08 5502 	mla	r5, r8, r2, r5
 8021d86:	fa1f fe8e 	uxth.w	lr, lr
 8021d8a:	fb16 f60a 	smulbb	r6, r6, sl
 8021d8e:	b2ad      	uxth	r5, r5
 8021d90:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021d94:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021d98:	f10e 0201 	add.w	r2, lr, #1
 8021d9c:	1c6e      	adds	r6, r5, #1
 8021d9e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021da2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8021da6:	fa1f fc8c 	uxth.w	ip, ip
 8021daa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021dae:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021db2:	ea46 0e0e 	orr.w	lr, r6, lr
 8021db6:	f10c 0601 	add.w	r6, ip, #1
 8021dba:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021dbe:	0976      	lsrs	r6, r6, #5
 8021dc0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021dc4:	9a02      	ldr	r2, [sp, #8]
 8021dc6:	ea4e 0e06 	orr.w	lr, lr, r6
 8021dca:	f824 e002 	strh.w	lr, [r4, r2]
 8021dce:	e7b3      	b.n	8021d38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021dd0:	f04f 0800 	mov.w	r8, #0
 8021dd4:	eba3 0208 	sub.w	r2, r3, r8
 8021dd8:	2a00      	cmp	r2, #0
 8021dda:	f77f af36 	ble.w	8021c4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021dde:	9e00      	ldr	r6, [sp, #0]
 8021de0:	1402      	asrs	r2, r0, #16
 8021de2:	140d      	asrs	r5, r1, #16
 8021de4:	fb06 2505 	mla	r5, r6, r5, r2
 8021de8:	086a      	lsrs	r2, r5, #1
 8021dea:	9e01      	ldr	r6, [sp, #4]
 8021dec:	5cb2      	ldrb	r2, [r6, r2]
 8021dee:	07ed      	lsls	r5, r5, #31
 8021df0:	bf54      	ite	pl
 8021df2:	f002 020f 	andpl.w	r2, r2, #15
 8021df6:	1112      	asrmi	r2, r2, #4
 8021df8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021dfc:	b2d2      	uxtb	r2, r2
 8021dfe:	b1c2      	cbz	r2, 8021e32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021e00:	9d04      	ldr	r5, [sp, #16]
 8021e02:	436a      	muls	r2, r5
 8021e04:	1c55      	adds	r5, r2, #1
 8021e06:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021e0a:	4d2e      	ldr	r5, [pc, #184]	; (8021ec4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021e0c:	1212      	asrs	r2, r2, #8
 8021e0e:	682e      	ldr	r6, [r5, #0]
 8021e10:	2aff      	cmp	r2, #255	; 0xff
 8021e12:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021e16:	d113      	bne.n	8021e40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021e18:	0972      	lsrs	r2, r6, #5
 8021e1a:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8021e1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021e22:	f025 0507 	bic.w	r5, r5, #7
 8021e26:	4315      	orrs	r5, r2
 8021e28:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021e2c:	4335      	orrs	r5, r6
 8021e2e:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8021e32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021e34:	4410      	add	r0, r2
 8021e36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e38:	f108 0801 	add.w	r8, r8, #1
 8021e3c:	4411      	add	r1, r2
 8021e3e:	e7c9      	b.n	8021dd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021e40:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8021e44:	fa1f fa82 	uxth.w	sl, r2
 8021e48:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021e4c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8021e50:	43d2      	mvns	r2, r2
 8021e52:	b2d2      	uxtb	r2, r2
 8021e54:	fb17 f70a 	smulbb	r7, r7, sl
 8021e58:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021e5c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021e60:	b2f6      	uxtb	r6, r6
 8021e62:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021e66:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021e6a:	fa5f fe8e 	uxtb.w	lr, lr
 8021e6e:	fb16 f60a 	smulbb	r6, r6, sl
 8021e72:	fb0e 6602 	mla	r6, lr, r2, r6
 8021e76:	b2ed      	uxtb	r5, r5
 8021e78:	fa1f fc8c 	uxth.w	ip, ip
 8021e7c:	fb15 f50a 	smulbb	r5, r5, sl
 8021e80:	b2b6      	uxth	r6, r6
 8021e82:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e86:	fb07 5702 	mla	r7, r7, r2, r5
 8021e8a:	f10c 0201 	add.w	r2, ip, #1
 8021e8e:	1c75      	adds	r5, r6, #1
 8021e90:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021e94:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021e98:	b2bf      	uxth	r7, r7
 8021e9a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021e9e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021ea2:	ea45 0c0c 	orr.w	ip, r5, ip
 8021ea6:	1c7d      	adds	r5, r7, #1
 8021ea8:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8021eac:	096d      	lsrs	r5, r5, #5
 8021eae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021eb2:	ea4c 0c05 	orr.w	ip, ip, r5
 8021eb6:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021eba:	e7ba      	b.n	8021e32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021ebc:	b007      	add	sp, #28
 8021ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ec2:	bf00      	nop
 8021ec4:	200097b0 	.word	0x200097b0

08021ec8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ecc:	b087      	sub	sp, #28
 8021ece:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80221dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021ed2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021ed4:	9205      	str	r2, [sp, #20]
 8021ed6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021eda:	9101      	str	r1, [sp, #4]
 8021edc:	6841      	ldr	r1, [r0, #4]
 8021ede:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8021ee2:	fb01 2404 	mla	r4, r1, r4, r2
 8021ee6:	6802      	ldr	r2, [r0, #0]
 8021ee8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021eec:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021ef0:	3201      	adds	r2, #1
 8021ef2:	f022 0201 	bic.w	r2, r2, #1
 8021ef6:	9202      	str	r2, [sp, #8]
 8021ef8:	f8db 2000 	ldr.w	r2, [fp]
 8021efc:	9203      	str	r2, [sp, #12]
 8021efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021f02:	9a01      	ldr	r2, [sp, #4]
 8021f04:	2a00      	cmp	r2, #0
 8021f06:	dc03      	bgt.n	8021f10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021f08:	9a05      	ldr	r2, [sp, #20]
 8021f0a:	2a00      	cmp	r2, #0
 8021f0c:	f340 8162 	ble.w	80221d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021f10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021f12:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8021f16:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8021f1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021f1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	dd0e      	ble.n	8021f46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021f28:	1402      	asrs	r2, r0, #16
 8021f2a:	d405      	bmi.n	8021f38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f2c:	42ba      	cmp	r2, r7
 8021f2e:	da03      	bge.n	8021f38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f30:	140a      	asrs	r2, r1, #16
 8021f32:	d401      	bmi.n	8021f38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f34:	42b2      	cmp	r2, r6
 8021f36:	db07      	blt.n	8021f48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021f3a:	4410      	add	r0, r2
 8021f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f3e:	3b01      	subs	r3, #1
 8021f40:	4411      	add	r1, r2
 8021f42:	3402      	adds	r4, #2
 8021f44:	e7ee      	b.n	8021f24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f46:	d017      	beq.n	8021f78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021f48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021f4a:	1e5a      	subs	r2, r3, #1
 8021f4c:	fb05 0502 	mla	r5, r5, r2, r0
 8021f50:	142d      	asrs	r5, r5, #16
 8021f52:	d409      	bmi.n	8021f68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021f54:	42bd      	cmp	r5, r7
 8021f56:	da07      	bge.n	8021f68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021f58:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021f5a:	fb05 1202 	mla	r2, r5, r2, r1
 8021f5e:	1412      	asrs	r2, r2, #16
 8021f60:	d402      	bmi.n	8021f68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021f62:	42b2      	cmp	r2, r6
 8021f64:	f2c0 80c3 	blt.w	80220ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8021f68:	2500      	movs	r5, #0
 8021f6a:	195a      	adds	r2, r3, r5
 8021f6c:	2a00      	cmp	r2, #0
 8021f6e:	dc3f      	bgt.n	8021ff0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021f70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021f78:	9b01      	ldr	r3, [sp, #4]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	f340 812a 	ble.w	80221d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021f80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f88:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f96:	eeb0 6a62 	vmov.f32	s12, s5
 8021f9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021fa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021fa6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021faa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021fae:	eeb0 6a43 	vmov.f32	s12, s6
 8021fb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021fb6:	ee12 2a90 	vmov	r2, s5
 8021fba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fc2:	ee13 2a10 	vmov	r2, s6
 8021fc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fce:	9314      	str	r3, [sp, #80]	; 0x50
 8021fd0:	9b01      	ldr	r3, [sp, #4]
 8021fd2:	9a05      	ldr	r2, [sp, #20]
 8021fd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021fd8:	3b01      	subs	r3, #1
 8021fda:	9301      	str	r3, [sp, #4]
 8021fdc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021fe2:	eeb0 3a67 	vmov.f32	s6, s15
 8021fe6:	bf08      	it	eq
 8021fe8:	4613      	moveq	r3, r2
 8021fea:	eef0 2a47 	vmov.f32	s5, s14
 8021fee:	e788      	b.n	8021f02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021ff0:	1406      	asrs	r6, r0, #16
 8021ff2:	d42c      	bmi.n	802204e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021ff4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021ff8:	42b2      	cmp	r2, r6
 8021ffa:	dd28      	ble.n	802204e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021ffc:	140f      	asrs	r7, r1, #16
 8021ffe:	d426      	bmi.n	802204e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022000:	f8db 200c 	ldr.w	r2, [fp, #12]
 8022004:	42ba      	cmp	r2, r7
 8022006:	dd22      	ble.n	802204e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022008:	9a02      	ldr	r2, [sp, #8]
 802200a:	fb07 6602 	mla	r6, r7, r2, r6
 802200e:	0872      	lsrs	r2, r6, #1
 8022010:	9f03      	ldr	r7, [sp, #12]
 8022012:	5cba      	ldrb	r2, [r7, r2]
 8022014:	07f6      	lsls	r6, r6, #31
 8022016:	bf54      	ite	pl
 8022018:	f002 020f 	andpl.w	r2, r2, #15
 802201c:	1112      	asrmi	r2, r2, #4
 802201e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022022:	b2d2      	uxtb	r2, r2
 8022024:	2aff      	cmp	r2, #255	; 0xff
 8022026:	d118      	bne.n	802205a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8022028:	f8d8 2000 	ldr.w	r2, [r8]
 802202c:	f06f 0601 	mvn.w	r6, #1
 8022030:	fb06 f705 	mul.w	r7, r6, r5
 8022034:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8022038:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 802203c:	0956      	lsrs	r6, r2, #5
 802203e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022042:	ea4c 0606 	orr.w	r6, ip, r6
 8022046:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802204a:	4316      	orrs	r6, r2
 802204c:	53e6      	strh	r6, [r4, r7]
 802204e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022050:	4410      	add	r0, r2
 8022052:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022054:	3d01      	subs	r5, #1
 8022056:	4411      	add	r1, r2
 8022058:	e787      	b.n	8021f6a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802205a:	2a00      	cmp	r2, #0
 802205c:	d0f7      	beq.n	802204e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802205e:	f06f 0601 	mvn.w	r6, #1
 8022062:	436e      	muls	r6, r5
 8022064:	f8d8 c000 	ldr.w	ip, [r8]
 8022068:	f834 e006 	ldrh.w	lr, [r4, r6]
 802206c:	9604      	str	r6, [sp, #16]
 802206e:	fa1f f982 	uxth.w	r9, r2
 8022072:	ea4f 272e 	mov.w	r7, lr, asr #8
 8022076:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802207a:	43d2      	mvns	r2, r2
 802207c:	b2d2      	uxtb	r2, r2
 802207e:	fb16 f609 	smulbb	r6, r6, r9
 8022082:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022086:	fb07 6702 	mla	r7, r7, r2, r6
 802208a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802208e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022092:	fa5f fc8c 	uxtb.w	ip, ip
 8022096:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802209a:	fa5f fe8e 	uxtb.w	lr, lr
 802209e:	fb1c fc09 	smulbb	ip, ip, r9
 80220a2:	fb0e cc02 	mla	ip, lr, r2, ip
 80220a6:	b2bf      	uxth	r7, r7
 80220a8:	fb1a fa09 	smulbb	sl, sl, r9
 80220ac:	fa1f fc8c 	uxth.w	ip, ip
 80220b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80220b4:	fb06 a602 	mla	r6, r6, r2, sl
 80220b8:	1c7a      	adds	r2, r7, #1
 80220ba:	f10c 0a01 	add.w	sl, ip, #1
 80220be:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80220c2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80220c6:	b2b6      	uxth	r6, r6
 80220c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80220cc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80220d0:	ea4a 0707 	orr.w	r7, sl, r7
 80220d4:	f106 0a01 	add.w	sl, r6, #1
 80220d8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80220dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80220e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80220e4:	9a04      	ldr	r2, [sp, #16]
 80220e6:	ea47 070a 	orr.w	r7, r7, sl
 80220ea:	52a7      	strh	r7, [r4, r2]
 80220ec:	e7af      	b.n	802204e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80220ee:	f04f 0e00 	mov.w	lr, #0
 80220f2:	eba3 020e 	sub.w	r2, r3, lr
 80220f6:	2a00      	cmp	r2, #0
 80220f8:	f77f af3a 	ble.w	8021f70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80220fc:	9e02      	ldr	r6, [sp, #8]
 80220fe:	1402      	asrs	r2, r0, #16
 8022100:	140d      	asrs	r5, r1, #16
 8022102:	fb06 2505 	mla	r5, r6, r5, r2
 8022106:	086a      	lsrs	r2, r5, #1
 8022108:	9e03      	ldr	r6, [sp, #12]
 802210a:	5cb2      	ldrb	r2, [r6, r2]
 802210c:	07ed      	lsls	r5, r5, #31
 802210e:	bf54      	ite	pl
 8022110:	f002 020f 	andpl.w	r2, r2, #15
 8022114:	1112      	asrmi	r2, r2, #4
 8022116:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802211a:	b2d2      	uxtb	r2, r2
 802211c:	2aff      	cmp	r2, #255	; 0xff
 802211e:	d115      	bne.n	802214c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022120:	f8d8 5000 	ldr.w	r5, [r8]
 8022124:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8022128:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802212c:	096a      	lsrs	r2, r5, #5
 802212e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022132:	4332      	orrs	r2, r6
 8022134:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8022138:	432a      	orrs	r2, r5
 802213a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802213e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022140:	4410      	add	r0, r2
 8022142:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022144:	f10e 0e01 	add.w	lr, lr, #1
 8022148:	4411      	add	r1, r2
 802214a:	e7d2      	b.n	80220f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802214c:	2a00      	cmp	r2, #0
 802214e:	d0f6      	beq.n	802213e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022150:	f8d8 7000 	ldr.w	r7, [r8]
 8022154:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8022158:	fa1f f982 	uxth.w	r9, r2
 802215c:	ea4f 262c 	mov.w	r6, ip, asr #8
 8022160:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8022164:	43d2      	mvns	r2, r2
 8022166:	b2d2      	uxtb	r2, r2
 8022168:	fb15 f509 	smulbb	r5, r5, r9
 802216c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022170:	fb06 5602 	mla	r6, r6, r2, r5
 8022174:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022178:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802217c:	b2ff      	uxtb	r7, r7
 802217e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022182:	fa5f fc8c 	uxtb.w	ip, ip
 8022186:	fb17 f709 	smulbb	r7, r7, r9
 802218a:	fb0c 7702 	mla	r7, ip, r2, r7
 802218e:	b2b6      	uxth	r6, r6
 8022190:	fb1a fa09 	smulbb	sl, sl, r9
 8022194:	b2bf      	uxth	r7, r7
 8022196:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802219a:	fb05 a502 	mla	r5, r5, r2, sl
 802219e:	1c72      	adds	r2, r6, #1
 80221a0:	f107 0a01 	add.w	sl, r7, #1
 80221a4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80221a8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80221ac:	b2ad      	uxth	r5, r5
 80221ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80221b2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80221b6:	ea4a 0606 	orr.w	r6, sl, r6
 80221ba:	f105 0a01 	add.w	sl, r5, #1
 80221be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80221c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80221c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80221ca:	ea46 060a 	orr.w	r6, r6, sl
 80221ce:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80221d2:	e7b4      	b.n	802213e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80221d4:	b007      	add	sp, #28
 80221d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221da:	bf00      	nop
 80221dc:	200097b0 	.word	0x200097b0

080221e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80221e0:	4770      	bx	lr

080221e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80221e2:	4770      	bx	lr

080221e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80221e4:	4770      	bx	lr

080221e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80221e6:	4770      	bx	lr

080221e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80221e8:	4770      	bx	lr

080221ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80221ea:	4770      	bx	lr

080221ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80221ec:	4770      	bx	lr

080221ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80221ee:	4770      	bx	lr

080221f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80221f0:	4770      	bx	lr

080221f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80221f2:	4770      	bx	lr

080221f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80221f4:	4770      	bx	lr

080221f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80221f6:	4770      	bx	lr

080221f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80221f8:	4770      	bx	lr

080221fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80221fa:	4770      	bx	lr

080221fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80221fc:	4770      	bx	lr

080221fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80221fe:	4770      	bx	lr

08022200 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022200:	4770      	bx	lr

08022202 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022202:	4770      	bx	lr

08022204 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022204:	4770      	bx	lr

08022206 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022206:	4770      	bx	lr

08022208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022208:	4770      	bx	lr

0802220a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802220a:	4770      	bx	lr

0802220c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802220c:	4770      	bx	lr

0802220e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802220e:	4770      	bx	lr

08022210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022210:	4770      	bx	lr

08022212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8022212:	4770      	bx	lr

08022214 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022214:	4770      	bx	lr

08022216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8022216:	4770      	bx	lr

08022218 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8022218:	b508      	push	{r3, lr}
 802221a:	4b06      	ldr	r3, [pc, #24]	; (8022234 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802221c:	8818      	ldrh	r0, [r3, #0]
 802221e:	b928      	cbnz	r0, 802222c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8022220:	4b05      	ldr	r3, [pc, #20]	; (8022238 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8022222:	4a06      	ldr	r2, [pc, #24]	; (802223c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8022224:	4806      	ldr	r0, [pc, #24]	; (8022240 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8022226:	2150      	movs	r1, #80	; 0x50
 8022228:	f00b fe7a 	bl	802df20 <__assert_func>
 802222c:	0040      	lsls	r0, r0, #1
 802222e:	b280      	uxth	r0, r0
 8022230:	bd08      	pop	{r3, pc}
 8022232:	bf00      	nop
 8022234:	200097a2 	.word	0x200097a2
 8022238:	08032c97 	.word	0x08032c97
 802223c:	08033290 	.word	0x08033290
 8022240:	08032cd9 	.word	0x08032cd9

08022244 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022248:	b08b      	sub	sp, #44	; 0x2c
 802224a:	460f      	mov	r7, r1
 802224c:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8022250:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8022254:	4616      	mov	r6, r2
 8022256:	f1bb 0f00 	cmp.w	fp, #0
 802225a:	d049      	beq.n	80222f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802225c:	6810      	ldr	r0, [r2, #0]
 802225e:	6851      	ldr	r1, [r2, #4]
 8022260:	ad06      	add	r5, sp, #24
 8022262:	c503      	stmia	r5!, {r0, r1}
 8022264:	6818      	ldr	r0, [r3, #0]
 8022266:	6859      	ldr	r1, [r3, #4]
 8022268:	ad08      	add	r5, sp, #32
 802226a:	c503      	stmia	r5!, {r0, r1}
 802226c:	a806      	add	r0, sp, #24
 802226e:	f7f9 fd7f 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022272:	4631      	mov	r1, r6
 8022274:	a808      	add	r0, sp, #32
 8022276:	f7f9 fdbf 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802227a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802227e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8022282:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022286:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802228a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802228e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8022292:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8022296:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802229a:	4f5f      	ldr	r7, [pc, #380]	; (8022418 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802229c:	440a      	add	r2, r1
 802229e:	f8ad 2020 	strh.w	r2, [sp, #32]
 80222a2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80222a6:	6838      	ldr	r0, [r7, #0]
 80222a8:	4413      	add	r3, r2
 80222aa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80222ae:	6803      	ldr	r3, [r0, #0]
 80222b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222b2:	4798      	blx	r3
 80222b4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80222b8:	46b9      	mov	r9, r7
 80222ba:	d01c      	beq.n	80222f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80222bc:	f010 0f04 	tst.w	r0, #4
 80222c0:	d01d      	beq.n	80222fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80222c2:	f8d9 0000 	ldr.w	r0, [r9]
 80222c6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80222ca:	6801      	ldr	r1, [r0, #0]
 80222cc:	f8cd b00c 	str.w	fp, [sp, #12]
 80222d0:	2700      	movs	r7, #0
 80222d2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80222d6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80222da:	9402      	str	r4, [sp, #8]
 80222dc:	b2ad      	uxth	r5, r5
 80222de:	fa1f f488 	uxth.w	r4, r8
 80222e2:	9501      	str	r5, [sp, #4]
 80222e4:	9400      	str	r4, [sp, #0]
 80222e6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80222e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80222ec:	4631      	mov	r1, r6
 80222ee:	47a0      	blx	r4
 80222f0:	b00b      	add	sp, #44	; 0x2c
 80222f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222f6:	b914      	cbnz	r4, 80222fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80222f8:	f010 0f01 	tst.w	r0, #1
 80222fc:	e7e0      	b.n	80222c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80222fe:	f8d9 0000 	ldr.w	r0, [r9]
 8022302:	6803      	ldr	r3, [r0, #0]
 8022304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022306:	4798      	blx	r3
 8022308:	4b44      	ldr	r3, [pc, #272]	; (802241c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802230a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802230e:	881a      	ldrh	r2, [r3, #0]
 8022310:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022314:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022318:	fb02 1404 	mla	r4, r2, r4, r1
 802231c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022320:	469a      	mov	sl, r3
 8022322:	fb05 f502 	mul.w	r5, r5, r2
 8022326:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802232a:	d059      	beq.n	80223e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802232c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8022330:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022334:	fa1f f28b 	uxth.w	r2, fp
 8022338:	fa1f f989 	uxth.w	r9, r9
 802233c:	469e      	mov	lr, r3
 802233e:	42ac      	cmp	r4, r5
 8022340:	d264      	bcs.n	802240c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8022342:	eb04 0a07 	add.w	sl, r4, r7
 8022346:	4554      	cmp	r4, sl
 8022348:	d23d      	bcs.n	80223c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802234a:	8821      	ldrh	r1, [r4, #0]
 802234c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8022350:	1208      	asrs	r0, r1, #8
 8022352:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022356:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802235a:	fb10 f009 	smulbb	r0, r0, r9
 802235e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8022362:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022366:	00c9      	lsls	r1, r1, #3
 8022368:	fb0c 0c02 	mla	ip, ip, r2, r0
 802236c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022370:	10d8      	asrs	r0, r3, #3
 8022372:	b2c9      	uxtb	r1, r1
 8022374:	00db      	lsls	r3, r3, #3
 8022376:	fa1f fc8c 	uxth.w	ip, ip
 802237a:	fb1b fb09 	smulbb	fp, fp, r9
 802237e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022382:	b2db      	uxtb	r3, r3
 8022384:	fb11 f109 	smulbb	r1, r1, r9
 8022388:	fb00 b002 	mla	r0, r0, r2, fp
 802238c:	fb03 1302 	mla	r3, r3, r2, r1
 8022390:	f10c 0b01 	add.w	fp, ip, #1
 8022394:	b29b      	uxth	r3, r3
 8022396:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802239a:	b280      	uxth	r0, r0
 802239c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80223a0:	f103 0c01 	add.w	ip, r3, #1
 80223a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80223a8:	1c43      	adds	r3, r0, #1
 80223aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80223ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80223b2:	0940      	lsrs	r0, r0, #5
 80223b4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80223b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80223bc:	ea4c 0c00 	orr.w	ip, ip, r0
 80223c0:	f824 cb02 	strh.w	ip, [r4], #2
 80223c4:	e7bf      	b.n	8022346 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80223c6:	f8be 3000 	ldrh.w	r3, [lr]
 80223ca:	eba3 0308 	sub.w	r3, r3, r8
 80223ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80223d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80223d6:	eba3 0308 	sub.w	r3, r3, r8
 80223da:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80223de:	e7ae      	b.n	802233e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80223e0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80223e4:	f8d9 0000 	ldr.w	r0, [r9]
 80223e8:	42ac      	cmp	r4, r5
 80223ea:	6803      	ldr	r3, [r0, #0]
 80223ec:	d20e      	bcs.n	802240c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80223ee:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80223f2:	4632      	mov	r2, r6
 80223f4:	463b      	mov	r3, r7
 80223f6:	4621      	mov	r1, r4
 80223f8:	47c0      	blx	r8
 80223fa:	f8ba 3000 	ldrh.w	r3, [sl]
 80223fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022402:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022406:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802240a:	e7eb      	b.n	80223e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802240c:	4b02      	ldr	r3, [pc, #8]	; (8022418 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802240e:	6818      	ldr	r0, [r3, #0]
 8022410:	6803      	ldr	r3, [r0, #0]
 8022412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022414:	4798      	blx	r3
 8022416:	e76b      	b.n	80222f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022418:	200097a8 	.word	0x200097a8
 802241c:	200097a2 	.word	0x200097a2

08022420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022420:	b510      	push	{r4, lr}
 8022422:	2104      	movs	r1, #4
 8022424:	4604      	mov	r4, r0
 8022426:	f00a ff5c 	bl	802d2e2 <_ZdlPvj>
 802242a:	4620      	mov	r0, r4
 802242c:	bd10      	pop	{r4, pc}

0802242e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802242e:	b510      	push	{r4, lr}
 8022430:	2104      	movs	r1, #4
 8022432:	4604      	mov	r4, r0
 8022434:	f00a ff55 	bl	802d2e2 <_ZdlPvj>
 8022438:	4620      	mov	r0, r4
 802243a:	bd10      	pop	{r4, pc}

0802243c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802243c:	b510      	push	{r4, lr}
 802243e:	2104      	movs	r1, #4
 8022440:	4604      	mov	r4, r0
 8022442:	f00a ff4e 	bl	802d2e2 <_ZdlPvj>
 8022446:	4620      	mov	r0, r4
 8022448:	bd10      	pop	{r4, pc}

0802244a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802244a:	b510      	push	{r4, lr}
 802244c:	2104      	movs	r1, #4
 802244e:	4604      	mov	r4, r0
 8022450:	f00a ff47 	bl	802d2e2 <_ZdlPvj>
 8022454:	4620      	mov	r0, r4
 8022456:	bd10      	pop	{r4, pc}

08022458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022458:	b510      	push	{r4, lr}
 802245a:	2104      	movs	r1, #4
 802245c:	4604      	mov	r4, r0
 802245e:	f00a ff40 	bl	802d2e2 <_ZdlPvj>
 8022462:	4620      	mov	r0, r4
 8022464:	bd10      	pop	{r4, pc}

08022466 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022466:	b510      	push	{r4, lr}
 8022468:	2104      	movs	r1, #4
 802246a:	4604      	mov	r4, r0
 802246c:	f00a ff39 	bl	802d2e2 <_ZdlPvj>
 8022470:	4620      	mov	r0, r4
 8022472:	bd10      	pop	{r4, pc}

08022474 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022474:	b510      	push	{r4, lr}
 8022476:	2104      	movs	r1, #4
 8022478:	4604      	mov	r4, r0
 802247a:	f00a ff32 	bl	802d2e2 <_ZdlPvj>
 802247e:	4620      	mov	r0, r4
 8022480:	bd10      	pop	{r4, pc}

08022482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022482:	b510      	push	{r4, lr}
 8022484:	2104      	movs	r1, #4
 8022486:	4604      	mov	r4, r0
 8022488:	f00a ff2b 	bl	802d2e2 <_ZdlPvj>
 802248c:	4620      	mov	r0, r4
 802248e:	bd10      	pop	{r4, pc}

08022490 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022490:	b510      	push	{r4, lr}
 8022492:	2104      	movs	r1, #4
 8022494:	4604      	mov	r4, r0
 8022496:	f00a ff24 	bl	802d2e2 <_ZdlPvj>
 802249a:	4620      	mov	r0, r4
 802249c:	bd10      	pop	{r4, pc}

0802249e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802249e:	b510      	push	{r4, lr}
 80224a0:	2104      	movs	r1, #4
 80224a2:	4604      	mov	r4, r0
 80224a4:	f00a ff1d 	bl	802d2e2 <_ZdlPvj>
 80224a8:	4620      	mov	r0, r4
 80224aa:	bd10      	pop	{r4, pc}

080224ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80224ac:	b510      	push	{r4, lr}
 80224ae:	2104      	movs	r1, #4
 80224b0:	4604      	mov	r4, r0
 80224b2:	f00a ff16 	bl	802d2e2 <_ZdlPvj>
 80224b6:	4620      	mov	r0, r4
 80224b8:	bd10      	pop	{r4, pc}

080224ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80224ba:	b510      	push	{r4, lr}
 80224bc:	2104      	movs	r1, #4
 80224be:	4604      	mov	r4, r0
 80224c0:	f00a ff0f 	bl	802d2e2 <_ZdlPvj>
 80224c4:	4620      	mov	r0, r4
 80224c6:	bd10      	pop	{r4, pc}

080224c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80224c8:	b510      	push	{r4, lr}
 80224ca:	2104      	movs	r1, #4
 80224cc:	4604      	mov	r4, r0
 80224ce:	f00a ff08 	bl	802d2e2 <_ZdlPvj>
 80224d2:	4620      	mov	r0, r4
 80224d4:	bd10      	pop	{r4, pc}

080224d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80224d6:	b510      	push	{r4, lr}
 80224d8:	2104      	movs	r1, #4
 80224da:	4604      	mov	r4, r0
 80224dc:	f00a ff01 	bl	802d2e2 <_ZdlPvj>
 80224e0:	4620      	mov	r0, r4
 80224e2:	bd10      	pop	{r4, pc}

080224e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80224e4:	b510      	push	{r4, lr}
 80224e6:	2104      	movs	r1, #4
 80224e8:	4604      	mov	r4, r0
 80224ea:	f00a fefa 	bl	802d2e2 <_ZdlPvj>
 80224ee:	4620      	mov	r0, r4
 80224f0:	bd10      	pop	{r4, pc}

080224f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80224f2:	b510      	push	{r4, lr}
 80224f4:	2104      	movs	r1, #4
 80224f6:	4604      	mov	r4, r0
 80224f8:	f00a fef3 	bl	802d2e2 <_ZdlPvj>
 80224fc:	4620      	mov	r0, r4
 80224fe:	bd10      	pop	{r4, pc}

08022500 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022500:	b510      	push	{r4, lr}
 8022502:	2104      	movs	r1, #4
 8022504:	4604      	mov	r4, r0
 8022506:	f00a feec 	bl	802d2e2 <_ZdlPvj>
 802250a:	4620      	mov	r0, r4
 802250c:	bd10      	pop	{r4, pc}

0802250e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802250e:	b510      	push	{r4, lr}
 8022510:	2104      	movs	r1, #4
 8022512:	4604      	mov	r4, r0
 8022514:	f00a fee5 	bl	802d2e2 <_ZdlPvj>
 8022518:	4620      	mov	r0, r4
 802251a:	bd10      	pop	{r4, pc}

0802251c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802251c:	b510      	push	{r4, lr}
 802251e:	2104      	movs	r1, #4
 8022520:	4604      	mov	r4, r0
 8022522:	f00a fede 	bl	802d2e2 <_ZdlPvj>
 8022526:	4620      	mov	r0, r4
 8022528:	bd10      	pop	{r4, pc}

0802252a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802252a:	b510      	push	{r4, lr}
 802252c:	2104      	movs	r1, #4
 802252e:	4604      	mov	r4, r0
 8022530:	f00a fed7 	bl	802d2e2 <_ZdlPvj>
 8022534:	4620      	mov	r0, r4
 8022536:	bd10      	pop	{r4, pc}

08022538 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022538:	b510      	push	{r4, lr}
 802253a:	2104      	movs	r1, #4
 802253c:	4604      	mov	r4, r0
 802253e:	f00a fed0 	bl	802d2e2 <_ZdlPvj>
 8022542:	4620      	mov	r0, r4
 8022544:	bd10      	pop	{r4, pc}

08022546 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022546:	b510      	push	{r4, lr}
 8022548:	2104      	movs	r1, #4
 802254a:	4604      	mov	r4, r0
 802254c:	f00a fec9 	bl	802d2e2 <_ZdlPvj>
 8022550:	4620      	mov	r0, r4
 8022552:	bd10      	pop	{r4, pc}

08022554 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022554:	b510      	push	{r4, lr}
 8022556:	2104      	movs	r1, #4
 8022558:	4604      	mov	r4, r0
 802255a:	f00a fec2 	bl	802d2e2 <_ZdlPvj>
 802255e:	4620      	mov	r0, r4
 8022560:	bd10      	pop	{r4, pc}

08022562 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022562:	b510      	push	{r4, lr}
 8022564:	2104      	movs	r1, #4
 8022566:	4604      	mov	r4, r0
 8022568:	f00a febb 	bl	802d2e2 <_ZdlPvj>
 802256c:	4620      	mov	r0, r4
 802256e:	bd10      	pop	{r4, pc}

08022570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8022570:	b510      	push	{r4, lr}
 8022572:	2104      	movs	r1, #4
 8022574:	4604      	mov	r4, r0
 8022576:	f00a feb4 	bl	802d2e2 <_ZdlPvj>
 802257a:	4620      	mov	r0, r4
 802257c:	bd10      	pop	{r4, pc}

0802257e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802257e:	b510      	push	{r4, lr}
 8022580:	2104      	movs	r1, #4
 8022582:	4604      	mov	r4, r0
 8022584:	f00a fead 	bl	802d2e2 <_ZdlPvj>
 8022588:	4620      	mov	r0, r4
 802258a:	bd10      	pop	{r4, pc}

0802258c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802258c:	b510      	push	{r4, lr}
 802258e:	2104      	movs	r1, #4
 8022590:	4604      	mov	r4, r0
 8022592:	f00a fea6 	bl	802d2e2 <_ZdlPvj>
 8022596:	4620      	mov	r0, r4
 8022598:	bd10      	pop	{r4, pc}

0802259a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802259a:	b510      	push	{r4, lr}
 802259c:	2104      	movs	r1, #4
 802259e:	4604      	mov	r4, r0
 80225a0:	f00a fe9f 	bl	802d2e2 <_ZdlPvj>
 80225a4:	4620      	mov	r0, r4
 80225a6:	bd10      	pop	{r4, pc}

080225a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80225a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225aa:	4606      	mov	r6, r0
 80225ac:	b087      	sub	sp, #28
 80225ae:	460c      	mov	r4, r1
 80225b0:	4617      	mov	r7, r2
 80225b2:	461d      	mov	r5, r3
 80225b4:	b333      	cbz	r3, 8022604 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80225b6:	4608      	mov	r0, r1
 80225b8:	f7f5 f809 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80225bc:	bb10      	cbnz	r0, 8022604 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80225be:	6820      	ldr	r0, [r4, #0]
 80225c0:	6861      	ldr	r1, [r4, #4]
 80225c2:	4c1c      	ldr	r4, [pc, #112]	; (8022634 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80225c4:	ab04      	add	r3, sp, #16
 80225c6:	c303      	stmia	r3!, {r0, r1}
 80225c8:	a804      	add	r0, sp, #16
 80225ca:	f7f9 fbd1 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80225ce:	6820      	ldr	r0, [r4, #0]
 80225d0:	6803      	ldr	r3, [r0, #0]
 80225d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225d4:	4798      	blx	r3
 80225d6:	2dff      	cmp	r5, #255	; 0xff
 80225d8:	d016      	beq.n	8022608 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80225da:	f010 0f08 	tst.w	r0, #8
 80225de:	6820      	ldr	r0, [r4, #0]
 80225e0:	d015      	beq.n	802260e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80225e2:	2400      	movs	r4, #0
 80225e4:	6801      	ldr	r1, [r0, #0]
 80225e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80225ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80225ee:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80225f2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80225f6:	9401      	str	r4, [sp, #4]
 80225f8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80225fc:	9400      	str	r4, [sp, #0]
 80225fe:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8022600:	4639      	mov	r1, r7
 8022602:	47a0      	blx	r4
 8022604:	b007      	add	sp, #28
 8022606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022608:	f010 0f02 	tst.w	r0, #2
 802260c:	e7e7      	b.n	80225de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802260e:	6803      	ldr	r3, [r0, #0]
 8022610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022612:	4798      	blx	r3
 8022614:	4b08      	ldr	r3, [pc, #32]	; (8022638 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022616:	881a      	ldrh	r2, [r3, #0]
 8022618:	6833      	ldr	r3, [r6, #0]
 802261a:	e9cd 7500 	strd	r7, r5, [sp]
 802261e:	4601      	mov	r1, r0
 8022620:	69dd      	ldr	r5, [r3, #28]
 8022622:	4630      	mov	r0, r6
 8022624:	ab04      	add	r3, sp, #16
 8022626:	47a8      	blx	r5
 8022628:	6820      	ldr	r0, [r4, #0]
 802262a:	6803      	ldr	r3, [r0, #0]
 802262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802262e:	4798      	blx	r3
 8022630:	e7e8      	b.n	8022604 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022632:	bf00      	nop
 8022634:	200097a8 	.word	0x200097a8
 8022638:	200097a2 	.word	0x200097a2

0802263c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022640:	4f97      	ldr	r7, [pc, #604]	; (80228a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8022642:	4616      	mov	r6, r2
 8022644:	683a      	ldr	r2, [r7, #0]
 8022646:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 802264a:	2a02      	cmp	r2, #2
 802264c:	b08f      	sub	sp, #60	; 0x3c
 802264e:	4604      	mov	r4, r0
 8022650:	4689      	mov	r9, r1
 8022652:	d106      	bne.n	8022662 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8022654:	4b93      	ldr	r3, [pc, #588]	; (80228a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8022656:	4a94      	ldr	r2, [pc, #592]	; (80228a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022658:	f44f 7159 	mov.w	r1, #868	; 0x364
 802265c:	4893      	ldr	r0, [pc, #588]	; (80228ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 802265e:	f00b fc5f 	bl	802df20 <__assert_func>
 8022662:	ad0e      	add	r5, sp, #56	; 0x38
 8022664:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8022668:	4628      	mov	r0, r5
 802266a:	f7fd fad3 	bl	801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802266e:	6823      	ldr	r3, [r4, #0]
 8022670:	4680      	mov	r8, r0
 8022672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022674:	4620      	mov	r0, r4
 8022676:	4798      	blx	r3
 8022678:	4580      	cmp	r8, r0
 802267a:	d004      	beq.n	8022686 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 802267c:	4b8c      	ldr	r3, [pc, #560]	; (80228b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802267e:	4a8a      	ldr	r2, [pc, #552]	; (80228a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022680:	f240 3166 	movw	r1, #870	; 0x366
 8022684:	e7ea      	b.n	802265c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022686:	4628      	mov	r0, r5
 8022688:	f7fd fa3a 	bl	801fb00 <_ZNK8touchgfx6Bitmap7getDataEv>
 802268c:	4680      	mov	r8, r0
 802268e:	b920      	cbnz	r0, 802269a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8022690:	4b88      	ldr	r3, [pc, #544]	; (80228b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8022692:	4a85      	ldr	r2, [pc, #532]	; (80228a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022694:	f44f 715a 	mov.w	r1, #872	; 0x368
 8022698:	e7e0      	b.n	802265c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802269a:	6830      	ldr	r0, [r6, #0]
 802269c:	6871      	ldr	r1, [r6, #4]
 802269e:	f9b6 a000 	ldrsh.w	sl, [r6]
 80226a2:	ab06      	add	r3, sp, #24
 80226a4:	c303      	stmia	r3!, {r0, r1}
 80226a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80226aa:	f8d9 0000 	ldr.w	r0, [r9]
 80226ae:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80226b2:	ab08      	add	r3, sp, #32
 80226b4:	c303      	stmia	r3!, {r0, r1}
 80226b6:	4628      	mov	r0, r5
 80226b8:	f7fd f91a 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80226bc:	4606      	mov	r6, r0
 80226be:	4628      	mov	r0, r5
 80226c0:	f7fd f950 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80226c4:	f10d 0b20 	add.w	fp, sp, #32
 80226c8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80226cc:	a806      	add	r0, sp, #24
 80226ce:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80226d2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80226d6:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80226da:	f7f9 fb49 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226de:	4658      	mov	r0, fp
 80226e0:	f7f9 fb46 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226e4:	a80a      	add	r0, sp, #40	; 0x28
 80226e6:	f7f9 fb43 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226ea:	4d73      	ldr	r5, [pc, #460]	; (80228b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80226ec:	4b73      	ldr	r3, [pc, #460]	; (80228bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80226ee:	f9b5 2000 	ldrsh.w	r2, [r5]
 80226f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80226f6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80226fa:	2100      	movs	r1, #0
 80226fc:	910c      	str	r1, [sp, #48]	; 0x30
 80226fe:	4658      	mov	r0, fp
 8022700:	a90c      	add	r1, sp, #48	; 0x30
 8022702:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022706:	f7f4 ff1f 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 802270a:	4658      	mov	r0, fp
 802270c:	f7f4 ff5f 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8022710:	2800      	cmp	r0, #0
 8022712:	f040 8099 	bne.w	8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022716:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802271a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802271e:	4288      	cmp	r0, r1
 8022720:	db37      	blt.n	8022792 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022722:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8022726:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802272a:	429a      	cmp	r2, r3
 802272c:	db31      	blt.n	8022792 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 802272e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8022732:	4430      	add	r0, r6
 8022734:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022738:	4431      	add	r1, r6
 802273a:	b200      	sxth	r0, r0
 802273c:	b209      	sxth	r1, r1
 802273e:	4288      	cmp	r0, r1
 8022740:	dc27      	bgt.n	8022792 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022742:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8022746:	440a      	add	r2, r1
 8022748:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802274c:	440b      	add	r3, r1
 802274e:	b212      	sxth	r2, r2
 8022750:	b21b      	sxth	r3, r3
 8022752:	429a      	cmp	r2, r3
 8022754:	dc1d      	bgt.n	8022792 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022756:	6823      	ldr	r3, [r4, #0]
 8022758:	4620      	mov	r0, r4
 802275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802275c:	4798      	blx	r3
 802275e:	4682      	mov	sl, r0
 8022760:	6838      	ldr	r0, [r7, #0]
 8022762:	6803      	ldr	r3, [r0, #0]
 8022764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022766:	4798      	blx	r3
 8022768:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802276c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022770:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8022774:	1a5b      	subs	r3, r3, r1
 8022776:	b29b      	uxth	r3, r3
 8022778:	b21c      	sxth	r4, r3
 802277a:	2c00      	cmp	r4, #0
 802277c:	dc0e      	bgt.n	802279c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 802277e:	bf1f      	itttt	ne
 8022780:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8022784:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8022788:	185b      	addne	r3, r3, r1
 802278a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 802278e:	4644      	mov	r4, r8
 8022790:	e009      	b.n	80227a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 8022792:	4b4b      	ldr	r3, [pc, #300]	; (80228c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8022794:	4a44      	ldr	r2, [pc, #272]	; (80228a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022796:	f240 3176 	movw	r1, #886	; 0x376
 802279a:	e75f      	b.n	802265c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802279c:	1ad3      	subs	r3, r2, r3
 802279e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80227a2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80227a6:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 80227aa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80227ae:	1b9b      	subs	r3, r3, r6
 80227b0:	b29b      	uxth	r3, r3
 80227b2:	b219      	sxth	r1, r3
 80227b4:	2900      	cmp	r1, #0
 80227b6:	dd4b      	ble.n	8022850 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 80227b8:	4351      	muls	r1, r2
 80227ba:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80227be:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80227c2:	1acb      	subs	r3, r1, r3
 80227c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80227c8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80227cc:	2e00      	cmp	r6, #0
 80227ce:	dd3b      	ble.n	8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80227d0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	dd37      	ble.n	8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80227d8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80227dc:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80227e0:	fb0a f90c 	mul.w	r9, sl, ip
 80227e4:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80227e8:	4481      	add	r9, r0
 80227ea:	8828      	ldrh	r0, [r5, #0]
 80227ec:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80227f0:	42ae      	cmp	r6, r5
 80227f2:	bfa8      	it	ge
 80227f4:	462e      	movge	r6, r5
 80227f6:	1a41      	subs	r1, r0, r1
 80227f8:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80227fc:	428e      	cmp	r6, r1
 80227fe:	bfa8      	it	ge
 8022800:	460e      	movge	r6, r1
 8022802:	429d      	cmp	r5, r3
 8022804:	bfa8      	it	ge
 8022806:	461d      	movge	r5, r3
 8022808:	4b2c      	ldr	r3, [pc, #176]	; (80228bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802280a:	881b      	ldrh	r3, [r3, #0]
 802280c:	eba3 030c 	sub.w	r3, r3, ip
 8022810:	429d      	cmp	r5, r3
 8022812:	bfa8      	it	ge
 8022814:	461d      	movge	r5, r3
 8022816:	42b0      	cmp	r0, r6
 8022818:	d12c      	bne.n	8022874 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 802281a:	4290      	cmp	r0, r2
 802281c:	d12a      	bne.n	8022874 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 802281e:	6838      	ldr	r0, [r7, #0]
 8022820:	9203      	str	r2, [sp, #12]
 8022822:	6803      	ldr	r3, [r0, #0]
 8022824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022826:	4798      	blx	r3
 8022828:	07c3      	lsls	r3, r0, #31
 802282a:	d51a      	bpl.n	8022862 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 802282c:	9a03      	ldr	r2, [sp, #12]
 802282e:	6838      	ldr	r0, [r7, #0]
 8022830:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8022834:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8022838:	6803      	ldr	r3, [r0, #0]
 802283a:	9200      	str	r2, [sp, #0]
 802283c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 802283e:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8022842:	4623      	mov	r3, r4
 8022844:	47a8      	blx	r5
 8022846:	4680      	mov	r8, r0
 8022848:	4640      	mov	r0, r8
 802284a:	b00f      	add	sp, #60	; 0x3c
 802284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022850:	bf1f      	itttt	ne
 8022852:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8022856:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 802285a:	185b      	addne	r3, r3, r1
 802285c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8022860:	e7b2      	b.n	80227c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 8022862:	6838      	ldr	r0, [r7, #0]
 8022864:	6803      	ldr	r3, [r0, #0]
 8022866:	464a      	mov	r2, r9
 8022868:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 802286a:	4621      	mov	r1, r4
 802286c:	fb05 f30a 	mul.w	r3, r5, sl
 8022870:	47b0      	blx	r6
 8022872:	e7e9      	b.n	8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022874:	4355      	muls	r5, r2
 8022876:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 802287a:	9303      	str	r3, [sp, #12]
 802287c:	0076      	lsls	r6, r6, #1
 802287e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8022882:	9b03      	ldr	r3, [sp, #12]
 8022884:	429c      	cmp	r4, r3
 8022886:	d2df      	bcs.n	8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022888:	6838      	ldr	r0, [r7, #0]
 802288a:	6803      	ldr	r3, [r0, #0]
 802288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802288e:	464a      	mov	r2, r9
 8022890:	461d      	mov	r5, r3
 8022892:	4621      	mov	r1, r4
 8022894:	4633      	mov	r3, r6
 8022896:	47a8      	blx	r5
 8022898:	44d1      	add	r9, sl
 802289a:	445c      	add	r4, fp
 802289c:	e7f1      	b.n	8022882 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 802289e:	bf00      	nop
 80228a0:	200097a8 	.word	0x200097a8
 80228a4:	08032a8f 	.word	0x08032a8f
 80228a8:	08033340 	.word	0x08033340
 80228ac:	08032b41 	.word	0x08032b41
 80228b0:	08032b73 	.word	0x08032b73
 80228b4:	08032bc8 	.word	0x08032bc8
 80228b8:	200097a2 	.word	0x200097a2
 80228bc:	200097a4 	.word	0x200097a4
 80228c0:	08032c06 	.word	0x08032c06

080228c4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80228c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228c8:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80228cc:	9e08      	ldr	r6, [sp, #32]
 80228ce:	4688      	mov	r8, r1
 80228d0:	4614      	mov	r4, r2
 80228d2:	461d      	mov	r5, r3
 80228d4:	2f00      	cmp	r7, #0
 80228d6:	f000 80b3 	beq.w	8022a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80228da:	4618      	mov	r0, r3
 80228dc:	f7f4 fe77 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80228e0:	2800      	cmp	r0, #0
 80228e2:	f040 80ad 	bne.w	8022a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80228e6:	f9b5 1000 	ldrsh.w	r1, [r5]
 80228ea:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80228ee:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80228f2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80228f6:	fb04 1303 	mla	r3, r4, r3, r1
 80228fa:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80228fe:	4365      	muls	r5, r4
 8022900:	2fff      	cmp	r7, #255	; 0xff
 8022902:	eba4 0200 	sub.w	r2, r4, r0
 8022906:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 802290a:	ea4f 2816 	mov.w	r8, r6, lsr #8
 802290e:	d04b      	beq.n	80229a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8022910:	b2bc      	uxth	r4, r7
 8022912:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8022916:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802291a:	fa5f f788 	uxtb.w	r7, r8
 802291e:	b2f3      	uxtb	r3, r6
 8022920:	0040      	lsls	r0, r0, #1
 8022922:	fb0e fe04 	mul.w	lr, lr, r4
 8022926:	4367      	muls	r7, r4
 8022928:	4363      	muls	r3, r4
 802292a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802292e:	fa1f fc8c 	uxth.w	ip, ip
 8022932:	42a9      	cmp	r1, r5
 8022934:	f080 8084 	bcs.w	8022a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022938:	eb01 0900 	add.w	r9, r1, r0
 802293c:	4549      	cmp	r1, r9
 802293e:	d231      	bcs.n	80229a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8022940:	880a      	ldrh	r2, [r1, #0]
 8022942:	1214      	asrs	r4, r2, #8
 8022944:	10d6      	asrs	r6, r2, #3
 8022946:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802294a:	00d2      	lsls	r2, r2, #3
 802294c:	b2d2      	uxtb	r2, r2
 802294e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022952:	fb14 f40c 	smulbb	r4, r4, ip
 8022956:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802295a:	4474      	add	r4, lr
 802295c:	fb12 f20c 	smulbb	r2, r2, ip
 8022960:	b2a4      	uxth	r4, r4
 8022962:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022966:	441a      	add	r2, r3
 8022968:	b292      	uxth	r2, r2
 802296a:	f104 0a01 	add.w	sl, r4, #1
 802296e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022972:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022976:	fb16 f60c 	smulbb	r6, r6, ip
 802297a:	f102 0a01 	add.w	sl, r2, #1
 802297e:	443e      	add	r6, r7
 8022980:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022984:	b2b6      	uxth	r6, r6
 8022986:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802298a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802298e:	4322      	orrs	r2, r4
 8022990:	1c74      	adds	r4, r6, #1
 8022992:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022996:	0976      	lsrs	r6, r6, #5
 8022998:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802299c:	4332      	orrs	r2, r6
 802299e:	f821 2b02 	strh.w	r2, [r1], #2
 80229a2:	e7cb      	b.n	802293c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 80229a4:	4441      	add	r1, r8
 80229a6:	e7c4      	b.n	8022932 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80229a8:	4f26      	ldr	r7, [pc, #152]	; (8022a44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>)
 80229aa:	0973      	lsrs	r3, r6, #5
 80229ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80229b0:	ea08 0707 	and.w	r7, r8, r7
 80229b4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80229b8:	433b      	orrs	r3, r7
 80229ba:	4333      	orrs	r3, r6
 80229bc:	07e6      	lsls	r6, r4, #31
 80229be:	b29b      	uxth	r3, r3
 80229c0:	d50b      	bpl.n	80229da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x116>
 80229c2:	0040      	lsls	r0, r0, #1
 80229c4:	0052      	lsls	r2, r2, #1
 80229c6:	42a9      	cmp	r1, r5
 80229c8:	d23a      	bcs.n	8022a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80229ca:	180c      	adds	r4, r1, r0
 80229cc:	42a1      	cmp	r1, r4
 80229ce:	d202      	bcs.n	80229d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x112>
 80229d0:	f821 3b02 	strh.w	r3, [r1], #2
 80229d4:	e7fa      	b.n	80229cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x108>
 80229d6:	4411      	add	r1, r2
 80229d8:	e7f5      	b.n	80229c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x102>
 80229da:	078f      	lsls	r7, r1, #30
 80229dc:	d008      	beq.n	80229f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>
 80229de:	0066      	lsls	r6, r4, #1
 80229e0:	460a      	mov	r2, r1
 80229e2:	42aa      	cmp	r2, r5
 80229e4:	d202      	bcs.n	80229ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>
 80229e6:	8013      	strh	r3, [r2, #0]
 80229e8:	4432      	add	r2, r6
 80229ea:	e7fa      	b.n	80229e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11e>
 80229ec:	3102      	adds	r1, #2
 80229ee:	3801      	subs	r0, #1
 80229f0:	07c6      	lsls	r6, r0, #31
 80229f2:	d50b      	bpl.n	8022a0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 80229f4:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80229f8:	3a01      	subs	r2, #1
 80229fa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80229fe:	0066      	lsls	r6, r4, #1
 8022a00:	42aa      	cmp	r2, r5
 8022a02:	d202      	bcs.n	8022a0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8022a04:	8013      	strh	r3, [r2, #0]
 8022a06:	4432      	add	r2, r6
 8022a08:	e7fa      	b.n	8022a00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>
 8022a0a:	3801      	subs	r0, #1
 8022a0c:	b1c0      	cbz	r0, 8022a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022a0e:	1040      	asrs	r0, r0, #1
 8022a10:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022a14:	0080      	lsls	r0, r0, #2
 8022a16:	0064      	lsls	r4, r4, #1
 8022a18:	42a9      	cmp	r1, r5
 8022a1a:	d211      	bcs.n	8022a40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022a1c:	078a      	lsls	r2, r1, #30
 8022a1e:	d006      	beq.n	8022a2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16a>
 8022a20:	4b09      	ldr	r3, [pc, #36]	; (8022a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8022a22:	4a0a      	ldr	r2, [pc, #40]	; (8022a4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8022a24:	480a      	ldr	r0, [pc, #40]	; (8022a50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8022a26:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8022a2a:	f00b fa79 	bl	802df20 <__assert_func>
 8022a2e:	180e      	adds	r6, r1, r0
 8022a30:	460a      	mov	r2, r1
 8022a32:	42b2      	cmp	r2, r6
 8022a34:	d202      	bcs.n	8022a3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x178>
 8022a36:	f842 3b04 	str.w	r3, [r2], #4
 8022a3a:	e7fa      	b.n	8022a32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 8022a3c:	4421      	add	r1, r4
 8022a3e:	e7eb      	b.n	8022a18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x154>
 8022a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a44:	00fff800 	.word	0x00fff800
 8022a48:	08032940 	.word	0x08032940
 8022a4c:	08032f8c 	.word	0x08032f8c
 8022a50:	08032b41 	.word	0x08032b41

08022a54 <_ZN8touchgfx8LCD16bppC1Ev>:
 8022a54:	2200      	movs	r2, #0
 8022a56:	4910      	ldr	r1, [pc, #64]	; (8022a98 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8022a58:	6042      	str	r2, [r0, #4]
 8022a5a:	6001      	str	r1, [r0, #0]
 8022a5c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022a60:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022a64:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022a68:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022a6c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022a70:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022a74:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022a78:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022a7c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022a80:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022a84:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022a88:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022a8c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8022a90:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022a94:	4770      	bx	lr
 8022a96:	bf00      	nop
 8022a98:	08032f44 	.word	0x08032f44

08022a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aa0:	460d      	mov	r5, r1
 8022aa2:	b08d      	sub	sp, #52	; 0x34
 8022aa4:	4604      	mov	r4, r0
 8022aa6:	6808      	ldr	r0, [r1, #0]
 8022aa8:	6849      	ldr	r1, [r1, #4]
 8022aaa:	4699      	mov	r9, r3
 8022aac:	ab08      	add	r3, sp, #32
 8022aae:	c303      	stmia	r3!, {r0, r1}
 8022ab0:	6810      	ldr	r0, [r2, #0]
 8022ab2:	6851      	ldr	r1, [r2, #4]
 8022ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8022ab6:	c303      	stmia	r3!, {r0, r1}
 8022ab8:	a808      	add	r0, sp, #32
 8022aba:	f7f9 f959 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022abe:	4629      	mov	r1, r5
 8022ac0:	a80a      	add	r0, sp, #40	; 0x28
 8022ac2:	f7f9 f999 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ac6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022aca:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022ace:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022ad2:	4d63      	ldr	r5, [pc, #396]	; (8022c60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022ad4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022ad8:	6828      	ldr	r0, [r5, #0]
 8022ada:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022ade:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022ae2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022ae6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022aea:	440a      	add	r2, r1
 8022aec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022af0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022af4:	4413      	add	r3, r2
 8022af6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022afa:	6803      	ldr	r3, [r0, #0]
 8022afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022afe:	4798      	blx	r3
 8022b00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b04:	d119      	bne.n	8022b3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022b06:	f010 0f20 	tst.w	r0, #32
 8022b0a:	6828      	ldr	r0, [r5, #0]
 8022b0c:	d018      	beq.n	8022b40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022b0e:	2500      	movs	r5, #0
 8022b10:	6801      	ldr	r1, [r0, #0]
 8022b12:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022b16:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022b1a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022b1e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022b22:	9502      	str	r5, [sp, #8]
 8022b24:	b2b6      	uxth	r6, r6
 8022b26:	fa1f f588 	uxth.w	r5, r8
 8022b2a:	9601      	str	r6, [sp, #4]
 8022b2c:	9500      	str	r5, [sp, #0]
 8022b2e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022b30:	4621      	mov	r1, r4
 8022b32:	47a8      	blx	r5
 8022b34:	b00d      	add	sp, #52	; 0x34
 8022b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022b3e:	e7e4      	b.n	8022b0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022b40:	6803      	ldr	r3, [r0, #0]
 8022b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b44:	4798      	blx	r3
 8022b46:	4947      	ldr	r1, [pc, #284]	; (8022c64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022b48:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022b4c:	880b      	ldrh	r3, [r1, #0]
 8022b4e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022b52:	fb03 5202 	mla	r2, r3, r2, r5
 8022b56:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022b5a:	4373      	muls	r3, r6
 8022b5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022b60:	9307      	str	r3, [sp, #28]
 8022b62:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022b66:	9306      	str	r3, [sp, #24]
 8022b68:	468a      	mov	sl, r1
 8022b6a:	9b07      	ldr	r3, [sp, #28]
 8022b6c:	4298      	cmp	r0, r3
 8022b6e:	d270      	bcs.n	8022c52 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022b70:	9b06      	ldr	r3, [sp, #24]
 8022b72:	4621      	mov	r1, r4
 8022b74:	eb00 0b03 	add.w	fp, r0, r3
 8022b78:	4558      	cmp	r0, fp
 8022b7a:	d25d      	bcs.n	8022c38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022b7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022b80:	0e23      	lsrs	r3, r4, #24
 8022b82:	d014      	beq.n	8022bae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022b84:	2bff      	cmp	r3, #255	; 0xff
 8022b86:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022b8a:	d112      	bne.n	8022bb2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022b8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b90:	d10f      	bne.n	8022bb2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022b92:	0963      	lsrs	r3, r4, #5
 8022b94:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022b98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b9c:	f02c 0c07 	bic.w	ip, ip, #7
 8022ba0:	ea43 0c0c 	orr.w	ip, r3, ip
 8022ba4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022ba8:	ea4c 0404 	orr.w	r4, ip, r4
 8022bac:	8004      	strh	r4, [r0, #0]
 8022bae:	3002      	adds	r0, #2
 8022bb0:	e7e2      	b.n	8022b78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022bb2:	fb09 f303 	mul.w	r3, r9, r3
 8022bb6:	8807      	ldrh	r7, [r0, #0]
 8022bb8:	1c5a      	adds	r2, r3, #1
 8022bba:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022bbe:	1212      	asrs	r2, r2, #8
 8022bc0:	123e      	asrs	r6, r7, #8
 8022bc2:	b293      	uxth	r3, r2
 8022bc4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022bc8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022bcc:	43d2      	mvns	r2, r2
 8022bce:	b2d2      	uxtb	r2, r2
 8022bd0:	10fd      	asrs	r5, r7, #3
 8022bd2:	fb1e fe03 	smulbb	lr, lr, r3
 8022bd6:	00ff      	lsls	r7, r7, #3
 8022bd8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022bdc:	fb06 e602 	mla	r6, r6, r2, lr
 8022be0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022be4:	b2ff      	uxtb	r7, r7
 8022be6:	fa5f fc8c 	uxtb.w	ip, ip
 8022bea:	b2e4      	uxtb	r4, r4
 8022bec:	b2b6      	uxth	r6, r6
 8022bee:	fb1c fc03 	smulbb	ip, ip, r3
 8022bf2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022bf6:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022bfa:	fb14 f403 	smulbb	r4, r4, r3
 8022bfe:	fb05 c502 	mla	r5, r5, r2, ip
 8022c02:	f106 0e01 	add.w	lr, r6, #1
 8022c06:	fb07 4702 	mla	r7, r7, r2, r4
 8022c0a:	b2ad      	uxth	r5, r5
 8022c0c:	b2bf      	uxth	r7, r7
 8022c0e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022c12:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8022c16:	f105 0c01 	add.w	ip, r5, #1
 8022c1a:	1c7e      	adds	r6, r7, #1
 8022c1c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022c20:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022c24:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022c28:	096d      	lsrs	r5, r5, #5
 8022c2a:	ea46 060e 	orr.w	r6, r6, lr
 8022c2e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022c32:	432e      	orrs	r6, r5
 8022c34:	8006      	strh	r6, [r0, #0]
 8022c36:	e7ba      	b.n	8022bae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022c38:	f8ba 3000 	ldrh.w	r3, [sl]
 8022c3c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8022c40:	eba3 0308 	sub.w	r3, r3, r8
 8022c44:	eba4 0408 	sub.w	r4, r4, r8
 8022c48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022c4c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022c50:	e78b      	b.n	8022b6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8022c52:	4b03      	ldr	r3, [pc, #12]	; (8022c60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022c54:	6818      	ldr	r0, [r3, #0]
 8022c56:	6803      	ldr	r3, [r0, #0]
 8022c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022c5a:	4798      	blx	r3
 8022c5c:	e76a      	b.n	8022b34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022c5e:	bf00      	nop
 8022c60:	200097a8 	.word	0x200097a8
 8022c64:	200097a2 	.word	0x200097a2

08022c68 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022c6c:	460c      	mov	r4, r1
 8022c6e:	b085      	sub	sp, #20
 8022c70:	6810      	ldr	r0, [r2, #0]
 8022c72:	6851      	ldr	r1, [r2, #4]
 8022c74:	466d      	mov	r5, sp
 8022c76:	c503      	stmia	r5!, {r0, r1}
 8022c78:	6818      	ldr	r0, [r3, #0]
 8022c7a:	6859      	ldr	r1, [r3, #4]
 8022c7c:	4616      	mov	r6, r2
 8022c7e:	c503      	stmia	r5!, {r0, r1}
 8022c80:	4668      	mov	r0, sp
 8022c82:	f7f9 f875 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c86:	4631      	mov	r1, r6
 8022c88:	a802      	add	r0, sp, #8
 8022c8a:	f7f9 f8b5 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c8e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022c92:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022c96:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022c9a:	4d28      	ldr	r5, [pc, #160]	; (8022d3c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022c9c:	4e28      	ldr	r6, [pc, #160]	; (8022d40 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022c9e:	6828      	ldr	r0, [r5, #0]
 8022ca0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022ca4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022ca8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022cac:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022cb0:	f8bd 1000 	ldrh.w	r1, [sp]
 8022cb4:	440a      	add	r2, r1
 8022cb6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022cba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022cbe:	4413      	add	r3, r2
 8022cc0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022cc4:	6803      	ldr	r3, [r0, #0]
 8022cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022cc8:	4798      	blx	r3
 8022cca:	8833      	ldrh	r3, [r6, #0]
 8022ccc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022cd0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022cd4:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8022d44 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022cd8:	fb03 1202 	mla	r2, r3, r2, r1
 8022cdc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022ce0:	fb08 f303 	mul.w	r3, r8, r3
 8022ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022ce8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022cec:	4298      	cmp	r0, r3
 8022cee:	d21d      	bcs.n	8022d2c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022cf0:	eb00 080c 	add.w	r8, r0, ip
 8022cf4:	4540      	cmp	r0, r8
 8022cf6:	d20f      	bcs.n	8022d18 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022cf8:	f854 1b04 	ldr.w	r1, [r4], #4
 8022cfc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022d00:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022d04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022d08:	ea42 0209 	orr.w	r2, r2, r9
 8022d0c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022d10:	430a      	orrs	r2, r1
 8022d12:	f820 2b02 	strh.w	r2, [r0], #2
 8022d16:	e7ed      	b.n	8022cf4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022d18:	8832      	ldrh	r2, [r6, #0]
 8022d1a:	1bd2      	subs	r2, r2, r7
 8022d1c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022d20:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022d24:	1bd2      	subs	r2, r2, r7
 8022d26:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022d2a:	e7df      	b.n	8022cec <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022d2c:	6828      	ldr	r0, [r5, #0]
 8022d2e:	6803      	ldr	r3, [r0, #0]
 8022d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d32:	4798      	blx	r3
 8022d34:	b005      	add	sp, #20
 8022d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d3a:	bf00      	nop
 8022d3c:	200097a8 	.word	0x200097a8
 8022d40:	200097a2 	.word	0x200097a2
 8022d44:	fffff800 	.word	0xfffff800

08022d48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8022d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d4c:	460e      	mov	r6, r1
 8022d4e:	b08e      	sub	sp, #56	; 0x38
 8022d50:	4604      	mov	r4, r0
 8022d52:	6808      	ldr	r0, [r1, #0]
 8022d54:	6849      	ldr	r1, [r1, #4]
 8022d56:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8022f30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8022d5a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8022f34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022d5e:	461d      	mov	r5, r3
 8022d60:	ab0a      	add	r3, sp, #40	; 0x28
 8022d62:	c303      	stmia	r3!, {r0, r1}
 8022d64:	6810      	ldr	r0, [r2, #0]
 8022d66:	6851      	ldr	r1, [r2, #4]
 8022d68:	ab0c      	add	r3, sp, #48	; 0x30
 8022d6a:	c303      	stmia	r3!, {r0, r1}
 8022d6c:	a80a      	add	r0, sp, #40	; 0x28
 8022d6e:	f7f8 ffff 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d72:	4631      	mov	r1, r6
 8022d74:	a80c      	add	r0, sp, #48	; 0x30
 8022d76:	f7f9 f83f 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d7a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022d7e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022d82:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022d86:	f8d8 0000 	ldr.w	r0, [r8]
 8022d8a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8022d8e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8022d92:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022d96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022d9a:	440c      	add	r4, r1
 8022d9c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022da0:	440a      	add	r2, r1
 8022da2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022da6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022daa:	4413      	add	r3, r2
 8022dac:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022db0:	6803      	ldr	r3, [r0, #0]
 8022db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022db4:	4798      	blx	r3
 8022db6:	2dff      	cmp	r5, #255	; 0xff
 8022db8:	d124      	bne.n	8022e04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022dba:	f010 0f01 	tst.w	r0, #1
 8022dbe:	f8d8 0000 	ldr.w	r0, [r8]
 8022dc2:	d022      	beq.n	8022e0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022dc4:	2100      	movs	r1, #0
 8022dc6:	f8d0 c000 	ldr.w	ip, [r0]
 8022dca:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022dce:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022dd2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8022dd6:	f04f 0e01 	mov.w	lr, #1
 8022dda:	f8cd e018 	str.w	lr, [sp, #24]
 8022dde:	f8b9 e000 	ldrh.w	lr, [r9]
 8022de2:	9503      	str	r5, [sp, #12]
 8022de4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022de8:	b2b6      	uxth	r6, r6
 8022dea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022dee:	9102      	str	r1, [sp, #8]
 8022df0:	b2bf      	uxth	r7, r7
 8022df2:	9601      	str	r6, [sp, #4]
 8022df4:	9700      	str	r7, [sp, #0]
 8022df6:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8022dfa:	4621      	mov	r1, r4
 8022dfc:	47a8      	blx	r5
 8022dfe:	b00e      	add	sp, #56	; 0x38
 8022e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e04:	f010 0f04 	tst.w	r0, #4
 8022e08:	e7d9      	b.n	8022dbe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022e0a:	6803      	ldr	r3, [r0, #0]
 8022e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e0e:	4798      	blx	r3
 8022e10:	f8b9 3000 	ldrh.w	r3, [r9]
 8022e14:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022e18:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8022e1c:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022e20:	fb03 1202 	mla	r2, r3, r2, r1
 8022e24:	ebac 0c07 	sub.w	ip, ip, r7
 8022e28:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022e2c:	435e      	muls	r6, r3
 8022e2e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022e32:	2dff      	cmp	r5, #255	; 0xff
 8022e34:	eba3 0707 	sub.w	r7, r3, r7
 8022e38:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8022e3c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e40:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8022e44:	d049      	beq.n	8022eda <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8022e46:	43eb      	mvns	r3, r5
 8022e48:	fa1f f985 	uxth.w	r9, r5
 8022e4c:	b2db      	uxtb	r3, r3
 8022e4e:	42b0      	cmp	r0, r6
 8022e50:	d266      	bcs.n	8022f20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022e52:	eb00 0a0e 	add.w	sl, r0, lr
 8022e56:	4550      	cmp	r0, sl
 8022e58:	4621      	mov	r1, r4
 8022e5a:	f104 0403 	add.w	r4, r4, #3
 8022e5e:	d25b      	bcs.n	8022f18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022e60:	8802      	ldrh	r2, [r0, #0]
 8022e62:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022e66:	ea4f 2822 	mov.w	r8, r2, asr #8
 8022e6a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022e6e:	fb11 f109 	smulbb	r1, r1, r9
 8022e72:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022e76:	10d5      	asrs	r5, r2, #3
 8022e78:	fb08 1803 	mla	r8, r8, r3, r1
 8022e7c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022e80:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022e84:	fb11 f109 	smulbb	r1, r1, r9
 8022e88:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022e8c:	fb05 1503 	mla	r5, r5, r3, r1
 8022e90:	00d2      	lsls	r2, r2, #3
 8022e92:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022e96:	b2d2      	uxtb	r2, r2
 8022e98:	fb11 f109 	smulbb	r1, r1, r9
 8022e9c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022ea0:	fa1f f888 	uxth.w	r8, r8
 8022ea4:	fb02 1203 	mla	r2, r2, r3, r1
 8022ea8:	b292      	uxth	r2, r2
 8022eaa:	f108 0101 	add.w	r1, r8, #1
 8022eae:	b2ad      	uxth	r5, r5
 8022eb0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022eb4:	1c51      	adds	r1, r2, #1
 8022eb6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022eba:	1c69      	adds	r1, r5, #1
 8022ebc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022ec0:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022ec4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022ec8:	096d      	lsrs	r5, r5, #5
 8022eca:	ea42 0208 	orr.w	r2, r2, r8
 8022ece:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022ed2:	432a      	orrs	r2, r5
 8022ed4:	f820 2b02 	strh.w	r2, [r0], #2
 8022ed8:	e7bd      	b.n	8022e56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022eda:	4a14      	ldr	r2, [pc, #80]	; (8022f2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022edc:	42b0      	cmp	r0, r6
 8022ede:	d21f      	bcs.n	8022f20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022ee0:	eb00 050e 	add.w	r5, r0, lr
 8022ee4:	42a8      	cmp	r0, r5
 8022ee6:	4621      	mov	r1, r4
 8022ee8:	f104 0403 	add.w	r4, r4, #3
 8022eec:	d210      	bcs.n	8022f10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022eee:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022ef2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022ef6:	00db      	lsls	r3, r3, #3
 8022ef8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022efc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022f00:	430b      	orrs	r3, r1
 8022f02:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022f06:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022f0a:	f820 3b02 	strh.w	r3, [r0], #2
 8022f0e:	e7e9      	b.n	8022ee4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022f10:	4438      	add	r0, r7
 8022f12:	eb01 040c 	add.w	r4, r1, ip
 8022f16:	e7e1      	b.n	8022edc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022f18:	4438      	add	r0, r7
 8022f1a:	eb01 040c 	add.w	r4, r1, ip
 8022f1e:	e796      	b.n	8022e4e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022f20:	4b03      	ldr	r3, [pc, #12]	; (8022f30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022f22:	6818      	ldr	r0, [r3, #0]
 8022f24:	6803      	ldr	r3, [r0, #0]
 8022f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f28:	4798      	blx	r3
 8022f2a:	e768      	b.n	8022dfe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022f2c:	fffff800 	.word	0xfffff800
 8022f30:	200097a8 	.word	0x200097a8
 8022f34:	200097a2 	.word	0x200097a2

08022f38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022f38:	b570      	push	{r4, r5, r6, lr}
 8022f3a:	9c04      	ldr	r4, [sp, #16]
 8022f3c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8022f40:	4605      	mov	r5, r0
 8022f42:	4608      	mov	r0, r1
 8022f44:	4619      	mov	r1, r3
 8022f46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022f4a:	2a0d      	cmp	r2, #13
 8022f4c:	d825      	bhi.n	8022f9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8022f4e:	e8df f002 	tbb	[pc, r2]
 8022f52:	1807      	.short	0x1807
 8022f54:	1d1d1d13 	.word	0x1d1d1d13
 8022f58:	1d1d1d1d 	.word	0x1d1d1d1d
 8022f5c:	1d1d1d1d 	.word	0x1d1d1d1d
 8022f60:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8022f64:	682a      	ldr	r2, [r5, #0]
 8022f66:	68d6      	ldr	r6, [r2, #12]
 8022f68:	4623      	mov	r3, r4
 8022f6a:	460a      	mov	r2, r1
 8022f6c:	46b4      	mov	ip, r6
 8022f6e:	4601      	mov	r1, r0
 8022f70:	4628      	mov	r0, r5
 8022f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f76:	4760      	bx	ip
 8022f78:	4622      	mov	r2, r4
 8022f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f7e:	f7ff bd8d 	b.w	8022a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022f82:	4622      	mov	r2, r4
 8022f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f88:	f7ff bede 	b.w	8022d48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022f8c:	4b03      	ldr	r3, [pc, #12]	; (8022f9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022f8e:	4a04      	ldr	r2, [pc, #16]	; (8022fa0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8022f90:	4804      	ldr	r0, [pc, #16]	; (8022fa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8022f92:	f240 315d 	movw	r1, #861	; 0x35d
 8022f96:	f00a ffc3 	bl	802df20 <__assert_func>
 8022f9a:	bd70      	pop	{r4, r5, r6, pc}
 8022f9c:	08032c66 	.word	0x08032c66
 8022fa0:	080333c6 	.word	0x080333c6
 8022fa4:	08032b41 	.word	0x08032b41

08022fa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fac:	b093      	sub	sp, #76	; 0x4c
 8022fae:	880e      	ldrh	r6, [r1, #0]
 8022fb0:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8022fb4:	4681      	mov	r9, r0
 8022fb6:	4688      	mov	r8, r1
 8022fb8:	4615      	mov	r5, r2
 8022fba:	b136      	cbz	r6, 8022fca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8022fbc:	4b70      	ldr	r3, [pc, #448]	; (8023180 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8022fbe:	4a71      	ldr	r2, [pc, #452]	; (8023184 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8022fc0:	4871      	ldr	r0, [pc, #452]	; (8023188 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8022fc2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8022fc6:	f00a ffab 	bl	802df20 <__assert_func>
 8022fca:	6810      	ldr	r0, [r2, #0]
 8022fcc:	6851      	ldr	r1, [r2, #4]
 8022fce:	4f6f      	ldr	r7, [pc, #444]	; (802318c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8022fd0:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8023190 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8022fd4:	ac0e      	add	r4, sp, #56	; 0x38
 8022fd6:	c403      	stmia	r4!, {r0, r1}
 8022fd8:	6818      	ldr	r0, [r3, #0]
 8022fda:	6859      	ldr	r1, [r3, #4]
 8022fdc:	ac10      	add	r4, sp, #64	; 0x40
 8022fde:	c403      	stmia	r4!, {r0, r1}
 8022fe0:	a80e      	add	r0, sp, #56	; 0x38
 8022fe2:	f7f8 fec5 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022fe6:	4629      	mov	r1, r5
 8022fe8:	a810      	add	r0, sp, #64	; 0x40
 8022fea:	f7f8 ff05 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022fee:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022ff2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022ff6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022ffa:	6838      	ldr	r0, [r7, #0]
 8022ffc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8023000:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8023004:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023008:	4489      	add	r9, r1
 802300a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802300e:	440a      	add	r2, r1
 8023010:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023014:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023018:	4413      	add	r3, r2
 802301a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802301e:	6803      	ldr	r3, [r0, #0]
 8023020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023022:	4798      	blx	r3
 8023024:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023028:	6838      	ldr	r0, [r7, #0]
 802302a:	d01d      	beq.n	8023068 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 802302c:	6802      	ldr	r2, [r0, #0]
 802302e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8023032:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8023036:	210b      	movs	r1, #11
 8023038:	9107      	str	r1, [sp, #28]
 802303a:	f8bb 1000 	ldrh.w	r1, [fp]
 802303e:	9106      	str	r1, [sp, #24]
 8023040:	2101      	movs	r1, #1
 8023042:	e9cd a104 	strd	sl, r1, [sp, #16]
 8023046:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802304a:	9103      	str	r1, [sp, #12]
 802304c:	b2a4      	uxth	r4, r4
 802304e:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8023052:	9100      	str	r1, [sp, #0]
 8023054:	b2ad      	uxth	r5, r5
 8023056:	9502      	str	r5, [sp, #8]
 8023058:	9401      	str	r4, [sp, #4]
 802305a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 802305c:	4649      	mov	r1, r9
 802305e:	4642      	mov	r2, r8
 8023060:	47a0      	blx	r4
 8023062:	b013      	add	sp, #76	; 0x4c
 8023064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023068:	6803      	ldr	r3, [r0, #0]
 802306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802306c:	4798      	blx	r3
 802306e:	f8bb 3000 	ldrh.w	r3, [fp]
 8023072:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8023076:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802307a:	fb03 1202 	mla	r2, r3, r2, r1
 802307e:	435d      	muls	r5, r3
 8023080:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023084:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8023088:	920c      	str	r2, [sp, #48]	; 0x30
 802308a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802308e:	1b12      	subs	r2, r2, r4
 8023090:	920d      	str	r2, [sp, #52]	; 0x34
 8023092:	0062      	lsls	r2, r4, #1
 8023094:	1b1c      	subs	r4, r3, r4
 8023096:	0063      	lsls	r3, r4, #1
 8023098:	920a      	str	r2, [sp, #40]	; 0x28
 802309a:	930b      	str	r3, [sp, #44]	; 0x2c
 802309c:	f04f 0e04 	mov.w	lr, #4
 80230a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80230a2:	4298      	cmp	r0, r3
 80230a4:	d266      	bcs.n	8023174 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80230a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230a8:	eb00 0b03 	add.w	fp, r0, r3
 80230ac:	4558      	cmp	r0, fp
 80230ae:	d25c      	bcs.n	802316a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80230b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80230b4:	fb1e e303 	smlabb	r3, lr, r3, lr
 80230b8:	f858 2003 	ldr.w	r2, [r8, r3]
 80230bc:	0e11      	lsrs	r1, r2, #24
 80230be:	d012      	beq.n	80230e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80230c0:	29ff      	cmp	r1, #255	; 0xff
 80230c2:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80230c6:	d110      	bne.n	80230ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80230c8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80230cc:	d10d      	bne.n	80230ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80230ce:	0953      	lsrs	r3, r2, #5
 80230d0:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80230d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80230d8:	f027 0707 	bic.w	r7, r7, #7
 80230dc:	431f      	orrs	r7, r3
 80230de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80230e2:	433a      	orrs	r2, r7
 80230e4:	8002      	strh	r2, [r0, #0]
 80230e6:	3002      	adds	r0, #2
 80230e8:	e7e0      	b.n	80230ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 80230ea:	fb0a f101 	mul.w	r1, sl, r1
 80230ee:	8806      	ldrh	r6, [r0, #0]
 80230f0:	1c4b      	adds	r3, r1, #1
 80230f2:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80230f6:	1235      	asrs	r5, r6, #8
 80230f8:	10f4      	asrs	r4, r6, #3
 80230fa:	121b      	asrs	r3, r3, #8
 80230fc:	00f6      	lsls	r6, r6, #3
 80230fe:	b299      	uxth	r1, r3
 8023100:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023104:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023108:	b2f6      	uxtb	r6, r6
 802310a:	43db      	mvns	r3, r3
 802310c:	b2d2      	uxtb	r2, r2
 802310e:	b2db      	uxtb	r3, r3
 8023110:	fb1c fc01 	smulbb	ip, ip, r1
 8023114:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023118:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802311c:	fb12 f201 	smulbb	r2, r2, r1
 8023120:	fb05 c503 	mla	r5, r5, r3, ip
 8023124:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8023128:	b2ff      	uxtb	r7, r7
 802312a:	fb06 2203 	mla	r2, r6, r3, r2
 802312e:	b2ad      	uxth	r5, r5
 8023130:	fb17 f701 	smulbb	r7, r7, r1
 8023134:	b292      	uxth	r2, r2
 8023136:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802313a:	fb04 7403 	mla	r4, r4, r3, r7
 802313e:	f105 0c01 	add.w	ip, r5, #1
 8023142:	1c57      	adds	r7, r2, #1
 8023144:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023148:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802314c:	b2a4      	uxth	r4, r4
 802314e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023152:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023156:	433d      	orrs	r5, r7
 8023158:	1c67      	adds	r7, r4, #1
 802315a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802315e:	0964      	lsrs	r4, r4, #5
 8023160:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023164:	4325      	orrs	r5, r4
 8023166:	8005      	strh	r5, [r0, #0]
 8023168:	e7bd      	b.n	80230e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802316a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802316c:	4418      	add	r0, r3
 802316e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023170:	4499      	add	r9, r3
 8023172:	e795      	b.n	80230a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8023174:	4b05      	ldr	r3, [pc, #20]	; (802318c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8023176:	6818      	ldr	r0, [r3, #0]
 8023178:	6803      	ldr	r3, [r0, #0]
 802317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802317c:	4798      	blx	r3
 802317e:	e770      	b.n	8023062 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8023180:	08032a3f 	.word	0x08032a3f
 8023184:	08033197 	.word	0x08033197
 8023188:	08032b41 	.word	0x08032b41
 802318c:	200097a8 	.word	0x200097a8
 8023190:	200097a2 	.word	0x200097a2

08023194 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8023194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023198:	4614      	mov	r4, r2
 802319a:	880a      	ldrh	r2, [r1, #0]
 802319c:	b087      	sub	sp, #28
 802319e:	2a02      	cmp	r2, #2
 80231a0:	4680      	mov	r8, r0
 80231a2:	460d      	mov	r5, r1
 80231a4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80231a8:	d006      	beq.n	80231b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80231aa:	4b63      	ldr	r3, [pc, #396]	; (8023338 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80231ac:	4a63      	ldr	r2, [pc, #396]	; (802333c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80231ae:	4864      	ldr	r0, [pc, #400]	; (8023340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80231b0:	f240 11e1 	movw	r1, #481	; 0x1e1
 80231b4:	f00a feb4 	bl	802df20 <__assert_func>
 80231b8:	2e00      	cmp	r6, #0
 80231ba:	f000 80b9 	beq.w	8023330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80231be:	6820      	ldr	r0, [r4, #0]
 80231c0:	6861      	ldr	r1, [r4, #4]
 80231c2:	af02      	add	r7, sp, #8
 80231c4:	c703      	stmia	r7!, {r0, r1}
 80231c6:	6818      	ldr	r0, [r3, #0]
 80231c8:	6859      	ldr	r1, [r3, #4]
 80231ca:	af04      	add	r7, sp, #16
 80231cc:	c703      	stmia	r7!, {r0, r1}
 80231ce:	a802      	add	r0, sp, #8
 80231d0:	f7f8 fdce 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80231d4:	4621      	mov	r1, r4
 80231d6:	a804      	add	r0, sp, #16
 80231d8:	f7f8 fe0e 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80231dc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80231e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80231e4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80231e8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80231ec:	fb14 2103 	smlabb	r1, r4, r3, r2
 80231f0:	eb08 0401 	add.w	r4, r8, r1
 80231f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80231f8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80231fc:	440a      	add	r2, r1
 80231fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023202:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023206:	4413      	add	r3, r2
 8023208:	f8ad 3012 	strh.w	r3, [sp, #18]
 802320c:	4b4d      	ldr	r3, [pc, #308]	; (8023344 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802320e:	6818      	ldr	r0, [r3, #0]
 8023210:	6803      	ldr	r3, [r0, #0]
 8023212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023214:	4798      	blx	r3
 8023216:	4b4c      	ldr	r3, [pc, #304]	; (8023348 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8023218:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802321c:	881a      	ldrh	r2, [r3, #0]
 802321e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8023222:	2eff      	cmp	r6, #255	; 0xff
 8023224:	fb02 c101 	mla	r1, r2, r1, ip
 8023228:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802322c:	fb02 f207 	mul.w	r2, r2, r7
 8023230:	f105 0104 	add.w	r1, r5, #4
 8023234:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8023238:	461d      	mov	r5, r3
 802323a:	d05a      	beq.n	80232f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 802323c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8023240:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023244:	b2b6      	uxth	r6, r6
 8023246:	fa1f fe8e 	uxth.w	lr, lr
 802324a:	9301      	str	r3, [sp, #4]
 802324c:	4282      	cmp	r2, r0
 802324e:	d96a      	bls.n	8023326 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8023250:	eb00 0b0a 	add.w	fp, r0, sl
 8023254:	4583      	cmp	fp, r0
 8023256:	d940      	bls.n	80232da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8023258:	f814 3b01 	ldrb.w	r3, [r4], #1
 802325c:	8805      	ldrh	r5, [r0, #0]
 802325e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023262:	122f      	asrs	r7, r5, #8
 8023264:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023268:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802326c:	fb17 f70e 	smulbb	r7, r7, lr
 8023270:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023274:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023278:	00ed      	lsls	r5, r5, #3
 802327a:	fb0c 7c06 	mla	ip, ip, r6, r7
 802327e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023282:	10df      	asrs	r7, r3, #3
 8023284:	b2ed      	uxtb	r5, r5
 8023286:	00db      	lsls	r3, r3, #3
 8023288:	fa1f fc8c 	uxth.w	ip, ip
 802328c:	fb19 f90e 	smulbb	r9, r9, lr
 8023290:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023294:	b2db      	uxtb	r3, r3
 8023296:	fb15 f50e 	smulbb	r5, r5, lr
 802329a:	fb07 9706 	mla	r7, r7, r6, r9
 802329e:	fb03 5306 	mla	r3, r3, r6, r5
 80232a2:	f10c 0901 	add.w	r9, ip, #1
 80232a6:	b29b      	uxth	r3, r3
 80232a8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80232ac:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80232b0:	f103 0c01 	add.w	ip, r3, #1
 80232b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80232b8:	b2bf      	uxth	r7, r7
 80232ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80232be:	ea4c 0c09 	orr.w	ip, ip, r9
 80232c2:	f107 0901 	add.w	r9, r7, #1
 80232c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80232ca:	097f      	lsrs	r7, r7, #5
 80232cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80232d0:	ea4c 0c07 	orr.w	ip, ip, r7
 80232d4:	f820 cb02 	strh.w	ip, [r0], #2
 80232d8:	e7bc      	b.n	8023254 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80232da:	9b01      	ldr	r3, [sp, #4]
 80232dc:	881b      	ldrh	r3, [r3, #0]
 80232de:	eba3 0308 	sub.w	r3, r3, r8
 80232e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80232e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80232ea:	eba3 0308 	sub.w	r3, r3, r8
 80232ee:	441c      	add	r4, r3
 80232f0:	e7ac      	b.n	802324c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 80232f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80232f6:	4282      	cmp	r2, r0
 80232f8:	d915      	bls.n	8023326 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80232fa:	eb00 060a 	add.w	r6, r0, sl
 80232fe:	4286      	cmp	r6, r0
 8023300:	d906      	bls.n	8023310 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8023302:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023306:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802330a:	f820 3b02 	strh.w	r3, [r0], #2
 802330e:	e7f6      	b.n	80232fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8023310:	882b      	ldrh	r3, [r5, #0]
 8023312:	eba3 0308 	sub.w	r3, r3, r8
 8023316:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802331a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802331e:	eba3 0308 	sub.w	r3, r3, r8
 8023322:	441c      	add	r4, r3
 8023324:	e7e7      	b.n	80232f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8023326:	4b07      	ldr	r3, [pc, #28]	; (8023344 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8023328:	6818      	ldr	r0, [r3, #0]
 802332a:	6803      	ldr	r3, [r0, #0]
 802332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802332e:	4798      	blx	r3
 8023330:	b007      	add	sp, #28
 8023332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023336:	bf00      	nop
 8023338:	0803296f 	.word	0x0803296f
 802333c:	08033001 	.word	0x08033001
 8023340:	08032b41 	.word	0x08032b41
 8023344:	200097a8 	.word	0x200097a8
 8023348:	200097a2 	.word	0x200097a2

0802334c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023350:	f8b1 9000 	ldrh.w	r9, [r1]
 8023354:	b091      	sub	sp, #68	; 0x44
 8023356:	f1b9 0f01 	cmp.w	r9, #1
 802335a:	4604      	mov	r4, r0
 802335c:	460f      	mov	r7, r1
 802335e:	4690      	mov	r8, r2
 8023360:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8023364:	d006      	beq.n	8023374 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8023366:	4b84      	ldr	r3, [pc, #528]	; (8023578 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8023368:	4a84      	ldr	r2, [pc, #528]	; (802357c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802336a:	4885      	ldr	r0, [pc, #532]	; (8023580 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 802336c:	f240 212f 	movw	r1, #559	; 0x22f
 8023370:	f00a fdd6 	bl	802df20 <__assert_func>
 8023374:	2d00      	cmp	r5, #0
 8023376:	d04f      	beq.n	8023418 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8023378:	6810      	ldr	r0, [r2, #0]
 802337a:	6851      	ldr	r1, [r2, #4]
 802337c:	f8df b208 	ldr.w	fp, [pc, #520]	; 8023588 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8023380:	ae0c      	add	r6, sp, #48	; 0x30
 8023382:	c603      	stmia	r6!, {r0, r1}
 8023384:	6818      	ldr	r0, [r3, #0]
 8023386:	6859      	ldr	r1, [r3, #4]
 8023388:	ae0e      	add	r6, sp, #56	; 0x38
 802338a:	c603      	stmia	r6!, {r0, r1}
 802338c:	a80c      	add	r0, sp, #48	; 0x30
 802338e:	f7f8 fcef 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023392:	4641      	mov	r1, r8
 8023394:	a80e      	add	r0, sp, #56	; 0x38
 8023396:	f7f8 fd2f 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802339a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802339e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80233a2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80233a6:	f8db 0000 	ldr.w	r0, [fp]
 80233aa:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80233ae:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80233b2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 802358c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80233b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80233ba:	440c      	add	r4, r1
 80233bc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80233c0:	440a      	add	r2, r1
 80233c2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80233c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80233ca:	4413      	add	r3, r2
 80233cc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80233d0:	6803      	ldr	r3, [r0, #0]
 80233d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233d4:	4798      	blx	r3
 80233d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80233da:	f8db 0000 	ldr.w	r0, [fp]
 80233de:	d01e      	beq.n	802341e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 80233e0:	2200      	movs	r2, #0
 80233e2:	6801      	ldr	r1, [r0, #0]
 80233e4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80233e8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80233ec:	220b      	movs	r2, #11
 80233ee:	9207      	str	r2, [sp, #28]
 80233f0:	f8b8 2000 	ldrh.w	r2, [r8]
 80233f4:	9504      	str	r5, [sp, #16]
 80233f6:	e9cd 9205 	strd	r9, r2, [sp, #20]
 80233fa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80233fe:	9203      	str	r2, [sp, #12]
 8023400:	fa1f f28a 	uxth.w	r2, sl
 8023404:	9202      	str	r2, [sp, #8]
 8023406:	b2b6      	uxth	r6, r6
 8023408:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802340c:	9200      	str	r2, [sp, #0]
 802340e:	9601      	str	r6, [sp, #4]
 8023410:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023412:	463a      	mov	r2, r7
 8023414:	4621      	mov	r1, r4
 8023416:	47a8      	blx	r5
 8023418:	b011      	add	sp, #68	; 0x44
 802341a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802341e:	6803      	ldr	r3, [r0, #0]
 8023420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023422:	4798      	blx	r3
 8023424:	f8b8 2000 	ldrh.w	r2, [r8]
 8023428:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802342c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023430:	2dff      	cmp	r5, #255	; 0xff
 8023432:	fb02 1303 	mla	r3, r2, r3, r1
 8023436:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802343a:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802343e:	fb0a fa02 	mul.w	sl, sl, r2
 8023442:	d062      	beq.n	802350a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8023444:	ea6f 0c05 	mvn.w	ip, r5
 8023448:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802344c:	930a      	str	r3, [sp, #40]	; 0x28
 802344e:	b2ad      	uxth	r5, r5
 8023450:	fa5f fc8c 	uxtb.w	ip, ip
 8023454:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8023458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802345a:	4298      	cmp	r0, r3
 802345c:	f080 8085 	bcs.w	802356a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023460:	eb00 0b09 	add.w	fp, r0, r9
 8023464:	4558      	cmp	r0, fp
 8023466:	d246      	bcs.n	80234f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023468:	f814 eb01 	ldrb.w	lr, [r4], #1
 802346c:	2303      	movs	r3, #3
 802346e:	2204      	movs	r2, #4
 8023470:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023474:	eb07 0a0e 	add.w	sl, r7, lr
 8023478:	8803      	ldrh	r3, [r0, #0]
 802347a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802347e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023482:	1219      	asrs	r1, r3, #8
 8023484:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023488:	fb18 f805 	smulbb	r8, r8, r5
 802348c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023490:	10da      	asrs	r2, r3, #3
 8023492:	fb01 810c 	mla	r1, r1, ip, r8
 8023496:	00db      	lsls	r3, r3, #3
 8023498:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802349c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80234a0:	b2db      	uxtb	r3, r3
 80234a2:	fb18 f805 	smulbb	r8, r8, r5
 80234a6:	fb1e fe05 	smulbb	lr, lr, r5
 80234aa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80234ae:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80234b2:	b289      	uxth	r1, r1
 80234b4:	fb02 820c 	mla	r2, r2, ip, r8
 80234b8:	fb03 e30c 	mla	r3, r3, ip, lr
 80234bc:	b292      	uxth	r2, r2
 80234be:	b29b      	uxth	r3, r3
 80234c0:	f101 0801 	add.w	r8, r1, #1
 80234c4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80234c8:	f103 0e01 	add.w	lr, r3, #1
 80234cc:	f102 0801 	add.w	r8, r2, #1
 80234d0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80234d4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80234d8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80234dc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80234e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80234e4:	ea4e 0101 	orr.w	r1, lr, r1
 80234e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80234ec:	ea41 0108 	orr.w	r1, r1, r8
 80234f0:	f820 1b02 	strh.w	r1, [r0], #2
 80234f4:	e7b6      	b.n	8023464 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80234f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80234f8:	881b      	ldrh	r3, [r3, #0]
 80234fa:	1b9b      	subs	r3, r3, r6
 80234fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023500:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023504:	1b9b      	subs	r3, r3, r6
 8023506:	441c      	add	r4, r3
 8023508:	e7a6      	b.n	8023458 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802350a:	491e      	ldr	r1, [pc, #120]	; (8023584 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 802350c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023510:	2203      	movs	r2, #3
 8023512:	2504      	movs	r5, #4
 8023514:	4550      	cmp	r0, sl
 8023516:	d228      	bcs.n	802356a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023518:	eb00 0c09 	add.w	ip, r0, r9
 802351c:	4560      	cmp	r0, ip
 802351e:	4623      	mov	r3, r4
 8023520:	d219      	bcs.n	8023556 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023522:	f893 e000 	ldrb.w	lr, [r3]
 8023526:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802352a:	eb07 0b0e 	add.w	fp, r7, lr
 802352e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023532:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023536:	f89b b001 	ldrb.w	fp, [fp, #1]
 802353a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802353e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023542:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023546:	ea43 030b 	orr.w	r3, r3, fp
 802354a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802354e:	3401      	adds	r4, #1
 8023550:	f820 3b02 	strh.w	r3, [r0], #2
 8023554:	e7e2      	b.n	802351c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023556:	f8b8 3000 	ldrh.w	r3, [r8]
 802355a:	1b9b      	subs	r3, r3, r6
 802355c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023560:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023564:	1b9b      	subs	r3, r3, r6
 8023566:	441c      	add	r4, r3
 8023568:	e7d4      	b.n	8023514 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802356a:	4b07      	ldr	r3, [pc, #28]	; (8023588 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 802356c:	6818      	ldr	r0, [r3, #0]
 802356e:	6803      	ldr	r3, [r0, #0]
 8023570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023572:	4798      	blx	r3
 8023574:	e750      	b.n	8023418 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8023576:	bf00      	nop
 8023578:	080329bd 	.word	0x080329bd
 802357c:	0803308a 	.word	0x0803308a
 8023580:	08032b41 	.word	0x08032b41
 8023584:	fffff800 	.word	0xfffff800
 8023588:	200097a8 	.word	0x200097a8
 802358c:	200097a2 	.word	0x200097a2

08023590 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023590:	b430      	push	{r4, r5}
 8023592:	780d      	ldrb	r5, [r1, #0]
 8023594:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8023598:	2d01      	cmp	r5, #1
 802359a:	d00a      	beq.n	80235b2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 802359c:	d305      	bcc.n	80235aa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802359e:	2d02      	cmp	r5, #2
 80235a0:	d10b      	bne.n	80235ba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80235a2:	9402      	str	r4, [sp, #8]
 80235a4:	bc30      	pop	{r4, r5}
 80235a6:	f7ff bdf5 	b.w	8023194 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80235aa:	9402      	str	r4, [sp, #8]
 80235ac:	bc30      	pop	{r4, r5}
 80235ae:	f7ff bcfb 	b.w	8022fa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80235b2:	9402      	str	r4, [sp, #8]
 80235b4:	bc30      	pop	{r4, r5}
 80235b6:	f7ff bec9 	b.w	802334c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80235ba:	bc30      	pop	{r4, r5}
 80235bc:	4770      	bx	lr
	...

080235c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80235c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235c4:	4604      	mov	r4, r0
 80235c6:	b087      	sub	sp, #28
 80235c8:	6810      	ldr	r0, [r2, #0]
 80235ca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80235ce:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023808 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80235d2:	460e      	mov	r6, r1
 80235d4:	6851      	ldr	r1, [r2, #4]
 80235d6:	ad02      	add	r5, sp, #8
 80235d8:	c503      	stmia	r5!, {r0, r1}
 80235da:	6818      	ldr	r0, [r3, #0]
 80235dc:	6859      	ldr	r1, [r3, #4]
 80235de:	ad04      	add	r5, sp, #16
 80235e0:	4617      	mov	r7, r2
 80235e2:	c503      	stmia	r5!, {r0, r1}
 80235e4:	a802      	add	r0, sp, #8
 80235e6:	f7f8 fbc3 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235ea:	4639      	mov	r1, r7
 80235ec:	a804      	add	r0, sp, #16
 80235ee:	f7f8 fc03 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80235f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80235fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80235fe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023602:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8023606:	fb11 2103 	smlabb	r1, r1, r3, r2
 802360a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802360e:	440e      	add	r6, r1
 8023610:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023614:	440a      	add	r2, r1
 8023616:	f8ad 2010 	strh.w	r2, [sp, #16]
 802361a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802361e:	4413      	add	r3, r2
 8023620:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023624:	4b77      	ldr	r3, [pc, #476]	; (8023804 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023626:	6818      	ldr	r0, [r3, #0]
 8023628:	6803      	ldr	r3, [r0, #0]
 802362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802362c:	4798      	blx	r3
 802362e:	f8b9 b000 	ldrh.w	fp, [r9]
 8023632:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023636:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802363a:	fb0b 2303 	mla	r3, fp, r3, r2
 802363e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023642:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023646:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802364a:	fb05 f50b 	mul.w	r5, r5, fp
 802364e:	9300      	str	r3, [sp, #0]
 8023650:	d069      	beq.n	8023726 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023652:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8023656:	4558      	cmp	r0, fp
 8023658:	f080 80cc 	bcs.w	80237f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802365c:	9b00      	ldr	r3, [sp, #0]
 802365e:	18c3      	adds	r3, r0, r3
 8023660:	9301      	str	r3, [sp, #4]
 8023662:	4631      	mov	r1, r6
 8023664:	9b01      	ldr	r3, [sp, #4]
 8023666:	4298      	cmp	r0, r3
 8023668:	d24f      	bcs.n	802370a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802366a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802366e:	2a00      	cmp	r2, #0
 8023670:	d048      	beq.n	8023704 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023672:	fb0a f202 	mul.w	r2, sl, r2
 8023676:	1c53      	adds	r3, r2, #1
 8023678:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802367c:	121b      	asrs	r3, r3, #8
 802367e:	d041      	beq.n	8023704 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023680:	8802      	ldrh	r2, [r0, #0]
 8023682:	f8b4 c000 	ldrh.w	ip, [r4]
 8023686:	b29e      	uxth	r6, r3
 8023688:	1215      	asrs	r5, r2, #8
 802368a:	43db      	mvns	r3, r3
 802368c:	b2db      	uxtb	r3, r3
 802368e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023692:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023696:	fb15 f503 	smulbb	r5, r5, r3
 802369a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802369e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80236a2:	00d2      	lsls	r2, r2, #3
 80236a4:	fb07 5706 	mla	r7, r7, r6, r5
 80236a8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80236ac:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80236b0:	b2d2      	uxtb	r2, r2
 80236b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80236b6:	b2bf      	uxth	r7, r7
 80236b8:	fb1e fe03 	smulbb	lr, lr, r3
 80236bc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80236c0:	fa5f fc8c 	uxtb.w	ip, ip
 80236c4:	fb12 f203 	smulbb	r2, r2, r3
 80236c8:	fb05 e506 	mla	r5, r5, r6, lr
 80236cc:	fb0c 2c06 	mla	ip, ip, r6, r2
 80236d0:	f107 0e01 	add.w	lr, r7, #1
 80236d4:	fa1f fc8c 	uxth.w	ip, ip
 80236d8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80236dc:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 80236e0:	f10c 0701 	add.w	r7, ip, #1
 80236e4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80236e8:	b2ad      	uxth	r5, r5
 80236ea:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80236ee:	ea47 070e 	orr.w	r7, r7, lr
 80236f2:	f105 0e01 	add.w	lr, r5, #1
 80236f6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80236fa:	096d      	lsrs	r5, r5, #5
 80236fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023700:	432f      	orrs	r7, r5
 8023702:	8007      	strh	r7, [r0, #0]
 8023704:	3002      	adds	r0, #2
 8023706:	3402      	adds	r4, #2
 8023708:	e7ac      	b.n	8023664 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802370a:	f8b9 3000 	ldrh.w	r3, [r9]
 802370e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023712:	eba3 0308 	sub.w	r3, r3, r8
 8023716:	eba6 0608 	sub.w	r6, r6, r8
 802371a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802371e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023722:	440e      	add	r6, r1
 8023724:	e797      	b.n	8023656 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023726:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802372a:	42a8      	cmp	r0, r5
 802372c:	d262      	bcs.n	80237f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802372e:	9b00      	ldr	r3, [sp, #0]
 8023730:	4631      	mov	r1, r6
 8023732:	eb00 0b03 	add.w	fp, r0, r3
 8023736:	4558      	cmp	r0, fp
 8023738:	d24e      	bcs.n	80237d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802373a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802373e:	b12b      	cbz	r3, 802374c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023740:	2bff      	cmp	r3, #255	; 0xff
 8023742:	f8b4 e000 	ldrh.w	lr, [r4]
 8023746:	d104      	bne.n	8023752 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023748:	f8a0 e000 	strh.w	lr, [r0]
 802374c:	3002      	adds	r0, #2
 802374e:	3402      	adds	r4, #2
 8023750:	e7f1      	b.n	8023736 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023752:	8802      	ldrh	r2, [r0, #0]
 8023754:	b29f      	uxth	r7, r3
 8023756:	1216      	asrs	r6, r2, #8
 8023758:	43db      	mvns	r3, r3
 802375a:	b2db      	uxtb	r3, r3
 802375c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023760:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023764:	fb16 f603 	smulbb	r6, r6, r3
 8023768:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802376c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023770:	00d2      	lsls	r2, r2, #3
 8023772:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023776:	b2d2      	uxtb	r2, r2
 8023778:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802377c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023780:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023784:	fb1a fa03 	smulbb	sl, sl, r3
 8023788:	fa1f fc8c 	uxth.w	ip, ip
 802378c:	fb12 f303 	smulbb	r3, r2, r3
 8023790:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023794:	fa5f fe8e 	uxtb.w	lr, lr
 8023798:	fb06 a607 	mla	r6, r6, r7, sl
 802379c:	f10c 0201 	add.w	r2, ip, #1
 80237a0:	fb0e 3307 	mla	r3, lr, r7, r3
 80237a4:	b2b6      	uxth	r6, r6
 80237a6:	b29b      	uxth	r3, r3
 80237a8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80237ac:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 80237b0:	f106 0a01 	add.w	sl, r6, #1
 80237b4:	f103 0c01 	add.w	ip, r3, #1
 80237b8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80237bc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80237c0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80237c4:	0976      	lsrs	r6, r6, #5
 80237c6:	ea4c 0c02 	orr.w	ip, ip, r2
 80237ca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80237ce:	ea4c 0c06 	orr.w	ip, ip, r6
 80237d2:	f8a0 c000 	strh.w	ip, [r0]
 80237d6:	e7b9      	b.n	802374c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80237d8:	f8b9 3000 	ldrh.w	r3, [r9]
 80237dc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80237e0:	eba3 0308 	sub.w	r3, r3, r8
 80237e4:	eba6 0608 	sub.w	r6, r6, r8
 80237e8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80237ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80237f0:	440e      	add	r6, r1
 80237f2:	e79a      	b.n	802372a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80237f4:	4b03      	ldr	r3, [pc, #12]	; (8023804 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80237f6:	6818      	ldr	r0, [r3, #0]
 80237f8:	6803      	ldr	r3, [r0, #0]
 80237fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237fc:	4798      	blx	r3
 80237fe:	b007      	add	sp, #28
 8023800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023804:	200097a8 	.word	0x200097a8
 8023808:	200097a2 	.word	0x200097a2

0802380c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023810:	b089      	sub	sp, #36	; 0x24
 8023812:	4682      	mov	sl, r0
 8023814:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8023818:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802381a:	460f      	mov	r7, r1
 802381c:	4691      	mov	r9, r2
 802381e:	4698      	mov	r8, r3
 8023820:	2e00      	cmp	r6, #0
 8023822:	d03d      	beq.n	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023824:	4608      	mov	r0, r1
 8023826:	f7fc f863 	bl	801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802382a:	4605      	mov	r5, r0
 802382c:	4638      	mov	r0, r7
 802382e:	f7fc f899 	bl	801f964 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023832:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023836:	4638      	mov	r0, r7
 8023838:	f8ad 9008 	strh.w	r9, [sp, #8]
 802383c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023840:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023844:	f7fc f95c 	bl	801fb00 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023848:	4605      	mov	r5, r0
 802384a:	4638      	mov	r0, r7
 802384c:	f7fc f98a 	bl	801fb64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023850:	4681      	mov	r9, r0
 8023852:	4638      	mov	r0, r7
 8023854:	f7fc f9de 	bl	801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023858:	280b      	cmp	r0, #11
 802385a:	f200 816f 	bhi.w	8023b3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 802385e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023862:	00c3      	.short	0x00c3
 8023864:	000c00b4 	.word	0x000c00b4
 8023868:	016d016d 	.word	0x016d016d
 802386c:	016d016d 	.word	0x016d016d
 8023870:	016d016d 	.word	0x016d016d
 8023874:	016d016d 	.word	0x016d016d
 8023878:	00bb      	.short	0x00bb
 802387a:	4bb3      	ldr	r3, [pc, #716]	; (8023b48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 802387c:	6818      	ldr	r0, [r3, #0]
 802387e:	6803      	ldr	r3, [r0, #0]
 8023880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023882:	4798      	blx	r3
 8023884:	2eff      	cmp	r6, #255	; 0xff
 8023886:	d121      	bne.n	80238cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023888:	0683      	lsls	r3, r0, #26
 802388a:	d41f      	bmi.n	80238cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 802388c:	4638      	mov	r0, r7
 802388e:	f7fc f8fd 	bl	801fa8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023892:	b940      	cbnz	r0, 80238a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8023894:	4623      	mov	r3, r4
 8023896:	aa02      	add	r2, sp, #8
 8023898:	4629      	mov	r1, r5
 802389a:	4650      	mov	r0, sl
 802389c:	f7ff f9e4 	bl	8022c68 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80238a0:	b009      	add	sp, #36	; 0x24
 80238a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238a6:	f10d 0818 	add.w	r8, sp, #24
 80238aa:	4639      	mov	r1, r7
 80238ac:	4640      	mov	r0, r8
 80238ae:	f7fc f893 	bl	801f9d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80238b2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80238b6:	af04      	add	r7, sp, #16
 80238b8:	e887 0003 	stmia.w	r7, {r0, r1}
 80238bc:	4638      	mov	r0, r7
 80238be:	4621      	mov	r1, r4
 80238c0:	f7f3 fe42 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 80238c4:	4638      	mov	r0, r7
 80238c6:	f7f3 fe82 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80238ca:	b130      	cbz	r0, 80238da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 80238cc:	4633      	mov	r3, r6
 80238ce:	4622      	mov	r2, r4
 80238d0:	a902      	add	r1, sp, #8
 80238d2:	4628      	mov	r0, r5
 80238d4:	f7ff f8e2 	bl	8022a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80238d8:	e7e2      	b.n	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80238da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80238de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80238e2:	4293      	cmp	r3, r2
 80238e4:	dd12      	ble.n	802390c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 80238e6:	1a9b      	subs	r3, r3, r2
 80238e8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80238ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80238f0:	f8ad 0018 	strh.w	r0, [sp, #24]
 80238f4:	f8ad 201a 	strh.w	r2, [sp, #26]
 80238f8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80238fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023900:	4642      	mov	r2, r8
 8023902:	4633      	mov	r3, r6
 8023904:	a902      	add	r1, sp, #8
 8023906:	4628      	mov	r0, r5
 8023908:	f7ff f8c8 	bl	8022a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802390c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023910:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023914:	4293      	cmp	r3, r2
 8023916:	dd12      	ble.n	802393e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8023918:	1a9b      	subs	r3, r3, r2
 802391a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802391e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023922:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023926:	f8ad 001a 	strh.w	r0, [sp, #26]
 802392a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802392e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023932:	23ff      	movs	r3, #255	; 0xff
 8023934:	4642      	mov	r2, r8
 8023936:	a902      	add	r1, sp, #8
 8023938:	4628      	mov	r0, r5
 802393a:	f7ff f8af 	bl	8022a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802393e:	463b      	mov	r3, r7
 8023940:	aa02      	add	r2, sp, #8
 8023942:	4629      	mov	r1, r5
 8023944:	4650      	mov	r0, sl
 8023946:	f7ff f98f 	bl	8022c68 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802394a:	88a2      	ldrh	r2, [r4, #4]
 802394c:	8823      	ldrh	r3, [r4, #0]
 802394e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023952:	4413      	add	r3, r2
 8023954:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023958:	440a      	add	r2, r1
 802395a:	b29b      	uxth	r3, r3
 802395c:	b292      	uxth	r2, r2
 802395e:	b211      	sxth	r1, r2
 8023960:	b218      	sxth	r0, r3
 8023962:	4288      	cmp	r0, r1
 8023964:	dd12      	ble.n	802398c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8023966:	1a9b      	subs	r3, r3, r2
 8023968:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802396c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023970:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023974:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023978:	f8ad 001e 	strh.w	r0, [sp, #30]
 802397c:	23ff      	movs	r3, #255	; 0xff
 802397e:	4642      	mov	r2, r8
 8023980:	a902      	add	r1, sp, #8
 8023982:	4628      	mov	r0, r5
 8023984:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023988:	f7ff f888 	bl	8022a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802398c:	88e2      	ldrh	r2, [r4, #6]
 802398e:	8863      	ldrh	r3, [r4, #2]
 8023990:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023994:	4413      	add	r3, r2
 8023996:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802399a:	440a      	add	r2, r1
 802399c:	b29b      	uxth	r3, r3
 802399e:	b292      	uxth	r2, r2
 80239a0:	b211      	sxth	r1, r2
 80239a2:	b218      	sxth	r0, r3
 80239a4:	4288      	cmp	r0, r1
 80239a6:	f77f af7b 	ble.w	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80239aa:	1a9b      	subs	r3, r3, r2
 80239ac:	f9b4 6000 	ldrsh.w	r6, [r4]
 80239b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80239b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80239b8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80239bc:	f8ad 101a 	strh.w	r1, [sp, #26]
 80239c0:	f8ad 001c 	strh.w	r0, [sp, #28]
 80239c4:	23ff      	movs	r3, #255	; 0xff
 80239c6:	4642      	mov	r2, r8
 80239c8:	e782      	b.n	80238d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80239ca:	4633      	mov	r3, r6
 80239cc:	4622      	mov	r2, r4
 80239ce:	a902      	add	r1, sp, #8
 80239d0:	4628      	mov	r0, r5
 80239d2:	f7ff f9b9 	bl	8022d48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80239d6:	e763      	b.n	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80239d8:	9600      	str	r6, [sp, #0]
 80239da:	4623      	mov	r3, r4
 80239dc:	aa02      	add	r2, sp, #8
 80239de:	4649      	mov	r1, r9
 80239e0:	4628      	mov	r0, r5
 80239e2:	f7ff fdd5 	bl	8023590 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80239e6:	e75b      	b.n	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80239e8:	4638      	mov	r0, r7
 80239ea:	f7fc f84f 	bl	801fa8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80239ee:	b950      	cbnz	r0, 8023a06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 80239f0:	e9cd 6000 	strd	r6, r0, [sp]
 80239f4:	f8da 3000 	ldr.w	r3, [sl]
 80239f8:	aa02      	add	r2, sp, #8
 80239fa:	68de      	ldr	r6, [r3, #12]
 80239fc:	4629      	mov	r1, r5
 80239fe:	4623      	mov	r3, r4
 8023a00:	4650      	mov	r0, sl
 8023a02:	47b0      	blx	r6
 8023a04:	e74c      	b.n	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023a06:	f10d 0818 	add.w	r8, sp, #24
 8023a0a:	4639      	mov	r1, r7
 8023a0c:	4640      	mov	r0, r8
 8023a0e:	f7fb ffe3 	bl	801f9d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023a12:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023a16:	af04      	add	r7, sp, #16
 8023a18:	e887 0003 	stmia.w	r7, {r0, r1}
 8023a1c:	4638      	mov	r0, r7
 8023a1e:	4621      	mov	r1, r4
 8023a20:	f7f3 fd92 	bl	8017548 <_ZN8touchgfx4RectaNERKS0_>
 8023a24:	4638      	mov	r0, r7
 8023a26:	f7f3 fdd2 	bl	80175ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8023a2a:	b138      	cbz	r0, 8023a3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8023a2c:	9600      	str	r6, [sp, #0]
 8023a2e:	4623      	mov	r3, r4
 8023a30:	aa02      	add	r2, sp, #8
 8023a32:	4649      	mov	r1, r9
 8023a34:	4628      	mov	r0, r5
 8023a36:	f7ff fdc3 	bl	80235c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023a3a:	e731      	b.n	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023a3c:	e9cd 6000 	strd	r6, r0, [sp]
 8023a40:	f8da 3000 	ldr.w	r3, [sl]
 8023a44:	aa02      	add	r2, sp, #8
 8023a46:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023a4a:	4629      	mov	r1, r5
 8023a4c:	463b      	mov	r3, r7
 8023a4e:	4650      	mov	r0, sl
 8023a50:	47d8      	blx	fp
 8023a52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023a5a:	4293      	cmp	r3, r2
 8023a5c:	dd13      	ble.n	8023a86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8023a5e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023a62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023a66:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023a6a:	1a9b      	subs	r3, r3, r2
 8023a6c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023a70:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023a74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023a78:	9600      	str	r6, [sp, #0]
 8023a7a:	4643      	mov	r3, r8
 8023a7c:	aa02      	add	r2, sp, #8
 8023a7e:	4649      	mov	r1, r9
 8023a80:	4628      	mov	r0, r5
 8023a82:	f7ff fd9d 	bl	80235c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023a86:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023a8a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023a8e:	4293      	cmp	r3, r2
 8023a90:	dd13      	ble.n	8023aba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8023a92:	1a9b      	subs	r3, r3, r2
 8023a94:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023a98:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023a9c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023aa0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023aa4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023aa8:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023aac:	9600      	str	r6, [sp, #0]
 8023aae:	4643      	mov	r3, r8
 8023ab0:	aa02      	add	r2, sp, #8
 8023ab2:	4649      	mov	r1, r9
 8023ab4:	4628      	mov	r0, r5
 8023ab6:	f7ff fd83 	bl	80235c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023aba:	88a2      	ldrh	r2, [r4, #4]
 8023abc:	8823      	ldrh	r3, [r4, #0]
 8023abe:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023ac2:	4413      	add	r3, r2
 8023ac4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023ac8:	440a      	add	r2, r1
 8023aca:	b29b      	uxth	r3, r3
 8023acc:	b292      	uxth	r2, r2
 8023ace:	b211      	sxth	r1, r2
 8023ad0:	b218      	sxth	r0, r3
 8023ad2:	4288      	cmp	r0, r1
 8023ad4:	dd13      	ble.n	8023afe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8023ad6:	1a9b      	subs	r3, r3, r2
 8023ad8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023adc:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023ae0:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023ae4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023ae8:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023aec:	9600      	str	r6, [sp, #0]
 8023aee:	4643      	mov	r3, r8
 8023af0:	aa02      	add	r2, sp, #8
 8023af2:	4649      	mov	r1, r9
 8023af4:	4628      	mov	r0, r5
 8023af6:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023afa:	f7ff fd61 	bl	80235c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023afe:	88e2      	ldrh	r2, [r4, #6]
 8023b00:	8863      	ldrh	r3, [r4, #2]
 8023b02:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023b06:	4413      	add	r3, r2
 8023b08:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023b0c:	440a      	add	r2, r1
 8023b0e:	b29b      	uxth	r3, r3
 8023b10:	b292      	uxth	r2, r2
 8023b12:	b211      	sxth	r1, r2
 8023b14:	b218      	sxth	r0, r3
 8023b16:	4288      	cmp	r0, r1
 8023b18:	f77f aec2 	ble.w	80238a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023b1c:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023b20:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023b24:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023b28:	1a9b      	subs	r3, r3, r2
 8023b2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023b2e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023b32:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023b36:	9600      	str	r6, [sp, #0]
 8023b38:	4643      	mov	r3, r8
 8023b3a:	e779      	b.n	8023a30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023b3c:	4b03      	ldr	r3, [pc, #12]	; (8023b4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8023b3e:	4a04      	ldr	r2, [pc, #16]	; (8023b50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8023b40:	4804      	ldr	r0, [pc, #16]	; (8023b54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8023b42:	21b4      	movs	r1, #180	; 0xb4
 8023b44:	f00a f9ec 	bl	802df20 <__assert_func>
 8023b48:	200097a8 	.word	0x200097a8
 8023b4c:	08032a0b 	.word	0x08032a0b
 8023b50:	08033113 	.word	0x08033113
 8023b54:	08032b41 	.word	0x08032b41

08023b58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023b58:	b508      	push	{r3, lr}
 8023b5a:	b180      	cbz	r0, 8023b7e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023b5c:	2902      	cmp	r1, #2
 8023b5e:	d014      	beq.n	8023b8a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8023b60:	2903      	cmp	r1, #3
 8023b62:	d01d      	beq.n	8023ba0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023b64:	2901      	cmp	r1, #1
 8023b66:	d101      	bne.n	8023b6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023b68:	2001      	movs	r0, #1
 8023b6a:	bd08      	pop	{r3, pc}
 8023b6c:	4b0e      	ldr	r3, [pc, #56]	; (8023ba8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023b6e:	8818      	ldrh	r0, [r3, #0]
 8023b70:	b990      	cbnz	r0, 8023b98 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023b72:	4b0e      	ldr	r3, [pc, #56]	; (8023bac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8023b74:	4a0e      	ldr	r2, [pc, #56]	; (8023bb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8023b76:	480f      	ldr	r0, [pc, #60]	; (8023bb4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8023b78:	2150      	movs	r1, #80	; 0x50
 8023b7a:	f00a f9d1 	bl	802df20 <__assert_func>
 8023b7e:	2902      	cmp	r1, #2
 8023b80:	d00e      	beq.n	8023ba0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023b82:	2903      	cmp	r1, #3
 8023b84:	d0f2      	beq.n	8023b6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023b86:	2901      	cmp	r1, #1
 8023b88:	d1ee      	bne.n	8023b68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8023b8a:	4b07      	ldr	r3, [pc, #28]	; (8023ba8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023b8c:	8818      	ldrh	r0, [r3, #0]
 8023b8e:	2800      	cmp	r0, #0
 8023b90:	d0ef      	beq.n	8023b72 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023b92:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b96:	e7e8      	b.n	8023b6a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023b98:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b9c:	4240      	negs	r0, r0
 8023b9e:	e7e4      	b.n	8023b6a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8023ba4:	e7e1      	b.n	8023b6a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023ba6:	bf00      	nop
 8023ba8:	200097a2 	.word	0x200097a2
 8023bac:	08032c97 	.word	0x08032c97
 8023bb0:	08033290 	.word	0x08033290
 8023bb4:	08032cd9 	.word	0x08032cd9

08023bb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023bb8:	b508      	push	{r3, lr}
 8023bba:	b180      	cbz	r0, 8023bde <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8023bbc:	2902      	cmp	r1, #2
 8023bbe:	d014      	beq.n	8023bea <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8023bc0:	2903      	cmp	r1, #3
 8023bc2:	d018      	beq.n	8023bf6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023bc4:	2901      	cmp	r1, #1
 8023bc6:	d001      	beq.n	8023bcc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023bc8:	2001      	movs	r0, #1
 8023bca:	e013      	b.n	8023bf4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023bcc:	4b0e      	ldr	r3, [pc, #56]	; (8023c08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023bce:	8818      	ldrh	r0, [r3, #0]
 8023bd0:	b970      	cbnz	r0, 8023bf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8023bd2:	4b0e      	ldr	r3, [pc, #56]	; (8023c0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8023bd4:	4a0e      	ldr	r2, [pc, #56]	; (8023c10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023bd6:	480f      	ldr	r0, [pc, #60]	; (8023c14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023bd8:	2150      	movs	r1, #80	; 0x50
 8023bda:	f00a f9a1 	bl	802df20 <__assert_func>
 8023bde:	2902      	cmp	r1, #2
 8023be0:	d009      	beq.n	8023bf6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023be2:	2903      	cmp	r1, #3
 8023be4:	d0f0      	beq.n	8023bc8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8023be6:	2901      	cmp	r1, #1
 8023be8:	d1f0      	bne.n	8023bcc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023bea:	f04f 30ff 	mov.w	r0, #4294967295
 8023bee:	e001      	b.n	8023bf4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023bf0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023bf4:	bd08      	pop	{r3, pc}
 8023bf6:	4b04      	ldr	r3, [pc, #16]	; (8023c08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023bf8:	8818      	ldrh	r0, [r3, #0]
 8023bfa:	2800      	cmp	r0, #0
 8023bfc:	d0e9      	beq.n	8023bd2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8023bfe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023c02:	4240      	negs	r0, r0
 8023c04:	e7f6      	b.n	8023bf4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023c06:	bf00      	nop
 8023c08:	200097a2 	.word	0x200097a2
 8023c0c:	08032c97 	.word	0x08032c97
 8023c10:	08033290 	.word	0x08033290
 8023c14:	08032cd9 	.word	0x08032cd9

08023c18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c1c:	b099      	sub	sp, #100	; 0x64
 8023c1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8023c20:	a914      	add	r1, sp, #80	; 0x50
 8023c22:	e881 000c 	stmia.w	r1, {r2, r3}
 8023c26:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8023c2a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8023c30:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023c34:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023c38:	9311      	str	r3, [sp, #68]	; 0x44
 8023c3a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8023c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8023c40:	7988      	ldrb	r0, [r1, #6]
 8023c42:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8023c46:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8023c4a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8023c4e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8023c52:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8023c56:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8023c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023c5e:	4303      	orrs	r3, r0
 8023c60:	9309      	str	r3, [sp, #36]	; 0x24
 8023c62:	f000 81a1 	beq.w	8023fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023c66:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023c6a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023c6e:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023c72:	ea59 0903 	orrs.w	r9, r9, r3
 8023c76:	f000 8197 	beq.w	8023fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023c7a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023c7e:	b29b      	uxth	r3, r3
 8023c80:	2e00      	cmp	r6, #0
 8023c82:	f000 813a 	beq.w	8023efa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8023c86:	1af6      	subs	r6, r6, r3
 8023c88:	b2b6      	uxth	r6, r6
 8023c8a:	0433      	lsls	r3, r6, #16
 8023c8c:	d502      	bpl.n	8023c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023c8e:	1bad      	subs	r5, r5, r6
 8023c90:	b22d      	sxth	r5, r5
 8023c92:	2600      	movs	r6, #0
 8023c94:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023c98:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8023c9c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8023ca0:	428d      	cmp	r5, r1
 8023ca2:	b28b      	uxth	r3, r1
 8023ca4:	bfbf      	itttt	lt
 8023ca6:	18f6      	addlt	r6, r6, r3
 8023ca8:	1b75      	sublt	r5, r6, r5
 8023caa:	b2ae      	uxthlt	r6, r5
 8023cac:	460d      	movlt	r5, r1
 8023cae:	8891      	ldrh	r1, [r2, #4]
 8023cb0:	440b      	add	r3, r1
 8023cb2:	b21b      	sxth	r3, r3
 8023cb4:	9310      	str	r3, [sp, #64]	; 0x40
 8023cb6:	88d3      	ldrh	r3, [r2, #6]
 8023cb8:	8852      	ldrh	r2, [r2, #2]
 8023cba:	4413      	add	r3, r2
 8023cbc:	b21b      	sxth	r3, r3
 8023cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cc0:	4bbc      	ldr	r3, [pc, #752]	; (8023fb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8023cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cc4:	f893 b000 	ldrb.w	fp, [r3]
 8023cc8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023ccc:	f1dc 0300 	rsbs	r3, ip, #0
 8023cd0:	eb43 030c 	adc.w	r3, r3, ip
 8023cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8023cd6:	4629      	mov	r1, r5
 8023cd8:	4653      	mov	r3, sl
 8023cda:	a814      	add	r0, sp, #80	; 0x50
 8023cdc:	f7f7 fecd 	bl	801ba7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023ce0:	4629      	mov	r1, r5
 8023ce2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023ce6:	4653      	mov	r3, sl
 8023ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cea:	a814      	add	r0, sp, #80	; 0x50
 8023cec:	f7f7 fedd 	bl	801baaa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023cf0:	a918      	add	r1, sp, #96	; 0x60
 8023cf2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023cf6:	a817      	add	r0, sp, #92	; 0x5c
 8023cf8:	f7f7 fff8 	bl	801bcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023cfc:	f1ba 0f00 	cmp.w	sl, #0
 8023d00:	f040 80fe 	bne.w	8023f00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8023d04:	f1bb 0f01 	cmp.w	fp, #1
 8023d08:	f040 8102 	bne.w	8023f10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8023d0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023d0e:	b153      	cbz	r3, 8023d26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023d12:	2408      	movs	r4, #8
 8023d14:	fb94 f3f8 	sdiv	r3, r4, r8
 8023d18:	1e5c      	subs	r4, r3, #1
 8023d1a:	4414      	add	r4, r2
 8023d1c:	fb94 f4f3 	sdiv	r4, r4, r3
 8023d20:	fb14 f403 	smulbb	r4, r4, r3
 8023d24:	b2a4      	uxth	r4, r4
 8023d26:	b906      	cbnz	r6, 8023d2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8023d28:	b16f      	cbz	r7, 8023d46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8023d2a:	fb07 6304 	mla	r3, r7, r4, r6
 8023d2e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023d30:	fb08 f303 	mul.w	r3, r8, r3
 8023d34:	463a      	mov	r2, r7
 8023d36:	f003 0707 	and.w	r7, r3, #7
 8023d3a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8023d3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023d40:	eba9 0302 	sub.w	r3, r9, r2
 8023d44:	930d      	str	r3, [sp, #52]	; 0x34
 8023d46:	4651      	mov	r1, sl
 8023d48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023d4a:	f7ff ff05 	bl	8023b58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8023d4e:	4651      	mov	r1, sl
 8023d50:	4681      	mov	r9, r0
 8023d52:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023d54:	f7ff ff30 	bl	8023bb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8023d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d5c:	eba3 0a02 	sub.w	sl, r3, r2
 8023d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d62:	459a      	cmp	sl, r3
 8023d64:	bfa8      	it	ge
 8023d66:	469a      	movge	sl, r3
 8023d68:	f1ba 0f00 	cmp.w	sl, #0
 8023d6c:	4683      	mov	fp, r0
 8023d6e:	f340 811b 	ble.w	8023fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023d72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d74:	1bad      	subs	r5, r5, r6
 8023d76:	1b5d      	subs	r5, r3, r5
 8023d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d7a:	429d      	cmp	r5, r3
 8023d7c:	bfd4      	ite	le
 8023d7e:	ebc6 0605 	rsble	r6, r6, r5
 8023d82:	ebc6 0603 	rsbgt	r6, r6, r3
 8023d86:	2e00      	cmp	r6, #0
 8023d88:	f340 810e 	ble.w	8023fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023d8c:	1ba4      	subs	r4, r4, r6
 8023d8e:	fb08 f304 	mul.w	r3, r8, r4
 8023d92:	930f      	str	r3, [sp, #60]	; 0x3c
 8023d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d96:	2b00      	cmp	r3, #0
 8023d98:	f040 8114 	bne.w	8023fc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8023d9c:	4b86      	ldr	r3, [pc, #536]	; (8023fb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8023d9e:	6818      	ldr	r0, [r3, #0]
 8023da0:	6803      	ldr	r3, [r0, #0]
 8023da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023da4:	4798      	blx	r3
 8023da6:	2301      	movs	r3, #1
 8023da8:	fa03 f308 	lsl.w	r3, r3, r8
 8023dac:	4a83      	ldr	r2, [pc, #524]	; (8023fbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023dae:	3b01      	subs	r3, #1
 8023db0:	b2db      	uxtb	r3, r3
 8023db2:	8811      	ldrh	r1, [r2, #0]
 8023db4:	930e      	str	r3, [sp, #56]	; 0x38
 8023db6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023dba:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8023dbe:	fb01 2303 	mla	r3, r1, r3, r2
 8023dc2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8023dc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023dca:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023dce:	9313      	str	r3, [sp, #76]	; 0x4c
 8023dd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023dd2:	0a19      	lsrs	r1, r3, #8
 8023dd4:	b2cb      	uxtb	r3, r1
 8023dd6:	9312      	str	r3, [sp, #72]	; 0x48
 8023dd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023dda:	b2db      	uxtb	r3, r3
 8023ddc:	9311      	str	r3, [sp, #68]	; 0x44
 8023dde:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023de0:	095a      	lsrs	r2, r3, #5
 8023de2:	4b77      	ldr	r3, [pc, #476]	; (8023fc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023de4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023de8:	400b      	ands	r3, r1
 8023dea:	4313      	orrs	r3, r2
 8023dec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023dee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023df2:	4313      	orrs	r3, r2
 8023df4:	b29b      	uxth	r3, r3
 8023df6:	9310      	str	r3, [sp, #64]	; 0x40
 8023df8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023dfa:	781a      	ldrb	r2, [r3, #0]
 8023dfc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023e00:	413a      	asrs	r2, r7
 8023e02:	fb06 b919 	mls	r9, r6, r9, fp
 8023e06:	fb03 fb06 	mul.w	fp, r3, r6
 8023e0a:	b2d2      	uxtb	r2, r2
 8023e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8023e0e:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023e12:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023e16:	f0c0 80ea 	bcc.w	8023fee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8023e1a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8023e1e:	46b6      	mov	lr, r6
 8023e20:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023e24:	f0c0 80d2 	bcc.w	8023fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8023e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023e2a:	4013      	ands	r3, r2
 8023e2c:	d055      	beq.n	8023eda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8023e2e:	20ff      	movs	r0, #255	; 0xff
 8023e30:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023e32:	fb90 f1f1 	sdiv	r1, r0, r1
 8023e36:	434b      	muls	r3, r1
 8023e38:	2bfe      	cmp	r3, #254	; 0xfe
 8023e3a:	dd03      	ble.n	8023e44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8023e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023e3e:	4281      	cmp	r1, r0
 8023e40:	f000 80c2 	beq.w	8023fc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8023e44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023e46:	f8bc 4000 	ldrh.w	r4, [ip]
 8023e4a:	fb11 f303 	smulbb	r3, r1, r3
 8023e4e:	b29b      	uxth	r3, r3
 8023e50:	1c59      	adds	r1, r3, #1
 8023e52:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023e56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023e5a:	b29d      	uxth	r5, r3
 8023e5c:	43db      	mvns	r3, r3
 8023e5e:	b2db      	uxtb	r3, r3
 8023e60:	9309      	str	r3, [sp, #36]	; 0x24
 8023e62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023e64:	1220      	asrs	r0, r4, #8
 8023e66:	fb13 f905 	smulbb	r9, r3, r5
 8023e6a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e70:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023e74:	fb00 9003 	mla	r0, r0, r3, r9
 8023e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023e7a:	10e1      	asrs	r1, r4, #3
 8023e7c:	fb13 f905 	smulbb	r9, r3, r5
 8023e80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e86:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8023e8a:	fb01 9103 	mla	r1, r1, r3, r9
 8023e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e90:	00e4      	lsls	r4, r4, #3
 8023e92:	fb13 f505 	smulbb	r5, r3, r5
 8023e96:	b2e4      	uxtb	r4, r4
 8023e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e9a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023e9e:	fb04 5403 	mla	r4, r4, r3, r5
 8023ea2:	b280      	uxth	r0, r0
 8023ea4:	b2a4      	uxth	r4, r4
 8023ea6:	1c43      	adds	r3, r0, #1
 8023ea8:	f104 0901 	add.w	r9, r4, #1
 8023eac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023eb0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023eb4:	b289      	uxth	r1, r1
 8023eb6:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023eba:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023ebe:	ea49 0000 	orr.w	r0, r9, r0
 8023ec2:	f101 0901 	add.w	r9, r1, #1
 8023ec6:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023eca:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023ece:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023ed2:	ea40 0009 	orr.w	r0, r0, r9
 8023ed6:	f8ac 0000 	strh.w	r0, [ip]
 8023eda:	4447      	add	r7, r8
 8023edc:	b2bf      	uxth	r7, r7
 8023ede:	2f07      	cmp	r7, #7
 8023ee0:	bf81      	itttt	hi
 8023ee2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8023ee4:	785a      	ldrbhi	r2, [r3, #1]
 8023ee6:	3301      	addhi	r3, #1
 8023ee8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8023eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023eec:	bf9a      	itte	ls
 8023eee:	fa42 f208 	asrls.w	r2, r2, r8
 8023ef2:	b2d2      	uxtbls	r2, r2
 8023ef4:	2700      	movhi	r7, #0
 8023ef6:	449c      	add	ip, r3
 8023ef8:	e792      	b.n	8023e20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8023efa:	441d      	add	r5, r3
 8023efc:	b22d      	sxth	r5, r5
 8023efe:	e6c9      	b.n	8023c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023f00:	f1ba 0f01 	cmp.w	sl, #1
 8023f04:	f47f af02 	bne.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f08:	f1bb 0f01 	cmp.w	fp, #1
 8023f0c:	f47f aefe 	bne.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f10:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8023fb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8023f14:	f8db 0000 	ldr.w	r0, [fp]
 8023f18:	6803      	ldr	r3, [r0, #0]
 8023f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023f1c:	4798      	blx	r3
 8023f1e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8023f22:	465a      	mov	r2, fp
 8023f24:	d006      	beq.n	8023f34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023f26:	f1b8 0f04 	cmp.w	r8, #4
 8023f2a:	d140      	bne.n	8023fae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8023f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023f2e:	3300      	adds	r3, #0
 8023f30:	bf18      	it	ne
 8023f32:	2301      	movne	r3, #1
 8023f34:	0580      	lsls	r0, r0, #22
 8023f36:	d563      	bpl.n	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023f38:	f1b8 0f08 	cmp.w	r8, #8
 8023f3c:	d160      	bne.n	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	bf0c      	ite	eq
 8023f42:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8023f46:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023f4a:	2e00      	cmp	r6, #0
 8023f4c:	f47f aede 	bne.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f50:	2f00      	cmp	r7, #0
 8023f52:	f47f aedb 	bne.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f58:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023f5a:	18eb      	adds	r3, r5, r3
 8023f5c:	4283      	cmp	r3, r0
 8023f5e:	f73f aed5 	bgt.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f64:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023f66:	444b      	add	r3, r9
 8023f68:	4283      	cmp	r3, r0
 8023f6a:	f73f aecf 	bgt.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f6e:	6810      	ldr	r0, [r2, #0]
 8023f70:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8023f74:	6805      	ldr	r5, [r0, #0]
 8023f76:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8023f7a:	f1b8 0f08 	cmp.w	r8, #8
 8023f7e:	f04f 0600 	mov.w	r6, #0
 8023f82:	bf18      	it	ne
 8023f84:	3401      	addne	r4, #1
 8023f86:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023f8c:	9104      	str	r1, [sp, #16]
 8023f8e:	bf18      	it	ne
 8023f90:	f024 0401 	bicne.w	r4, r4, #1
 8023f94:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023f96:	bf18      	it	ne
 8023f98:	b2a4      	uxthne	r4, r4
 8023f9a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8023f9e:	e9cd 4900 	strd	r4, r9, [sp]
 8023fa2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023fa4:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8023fa6:	47a0      	blx	r4
 8023fa8:	b019      	add	sp, #100	; 0x64
 8023faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fae:	2300      	movs	r3, #0
 8023fb0:	e7c0      	b.n	8023f34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023fb2:	bf00      	nop
 8023fb4:	200097a0 	.word	0x200097a0
 8023fb8:	200097a8 	.word	0x200097a8
 8023fbc:	200097a2 	.word	0x200097a2
 8023fc0:	00fff800 	.word	0x00fff800
 8023fc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023fc6:	e6ee      	b.n	8023da6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8023fc8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023fca:	e784      	b.n	8023ed6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8023fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023fce:	b153      	cbz	r3, 8023fe6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8023fd0:	441f      	add	r7, r3
 8023fd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023fd4:	b2bf      	uxth	r7, r7
 8023fd6:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8023fda:	f007 0707 	and.w	r7, r7, #7
 8023fde:	781a      	ldrb	r2, [r3, #0]
 8023fe0:	9328      	str	r3, [sp, #160]	; 0xa0
 8023fe2:	413a      	asrs	r2, r7
 8023fe4:	b2d2      	uxtb	r2, r2
 8023fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fe8:	445b      	add	r3, fp
 8023fea:	930a      	str	r3, [sp, #40]	; 0x28
 8023fec:	e711      	b.n	8023e12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8023fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d1d9      	bne.n	8023fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023ff4:	4b05      	ldr	r3, [pc, #20]	; (802400c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8023ff6:	6818      	ldr	r0, [r3, #0]
 8023ff8:	6803      	ldr	r3, [r0, #0]
 8023ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ffc:	4798      	blx	r3
 8023ffe:	e7d3      	b.n	8023fa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024000:	2b00      	cmp	r3, #0
 8024002:	f43f ae83 	beq.w	8023d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024006:	f44f 7180 	mov.w	r1, #256	; 0x100
 802400a:	e79e      	b.n	8023f4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 802400c:	200097a8 	.word	0x200097a8

08024010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024010:	b538      	push	{r3, r4, r5, lr}
 8024012:	4c15      	ldr	r4, [pc, #84]	; (8024068 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024014:	7823      	ldrb	r3, [r4, #0]
 8024016:	f3bf 8f5b 	dmb	ish
 802401a:	07da      	lsls	r2, r3, #31
 802401c:	4605      	mov	r5, r0
 802401e:	d40b      	bmi.n	8024038 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024020:	4620      	mov	r0, r4
 8024022:	f009 f960 	bl	802d2e6 <__cxa_guard_acquire>
 8024026:	b138      	cbz	r0, 8024038 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024028:	4620      	mov	r0, r4
 802402a:	f009 f968 	bl	802d2fe <__cxa_guard_release>
 802402e:	4a0f      	ldr	r2, [pc, #60]	; (802406c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024030:	490f      	ldr	r1, [pc, #60]	; (8024070 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8024032:	4810      	ldr	r0, [pc, #64]	; (8024074 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024034:	f009 f950 	bl	802d2d8 <__aeabi_atexit>
 8024038:	4c0f      	ldr	r4, [pc, #60]	; (8024078 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802403a:	7823      	ldrb	r3, [r4, #0]
 802403c:	f3bf 8f5b 	dmb	ish
 8024040:	07db      	lsls	r3, r3, #31
 8024042:	d40b      	bmi.n	802405c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024044:	4620      	mov	r0, r4
 8024046:	f009 f94e 	bl	802d2e6 <__cxa_guard_acquire>
 802404a:	b138      	cbz	r0, 802405c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802404c:	4620      	mov	r0, r4
 802404e:	f009 f956 	bl	802d2fe <__cxa_guard_release>
 8024052:	4a06      	ldr	r2, [pc, #24]	; (802406c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024054:	4909      	ldr	r1, [pc, #36]	; (802407c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024056:	480a      	ldr	r0, [pc, #40]	; (8024080 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024058:	f009 f93e 	bl	802d2d8 <__aeabi_atexit>
 802405c:	4b05      	ldr	r3, [pc, #20]	; (8024074 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802405e:	612b      	str	r3, [r5, #16]
 8024060:	4b07      	ldr	r3, [pc, #28]	; (8024080 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024062:	616b      	str	r3, [r5, #20]
 8024064:	bd38      	pop	{r3, r4, r5, pc}
 8024066:	bf00      	nop
 8024068:	20009874 	.word	0x20009874
 802406c:	20000000 	.word	0x20000000
 8024070:	08022213 	.word	0x08022213
 8024074:	20000064 	.word	0x20000064
 8024078:	20009878 	.word	0x20009878
 802407c:	08022211 	.word	0x08022211
 8024080:	20000068 	.word	0x20000068

08024084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024084:	b538      	push	{r3, r4, r5, lr}
 8024086:	4c15      	ldr	r4, [pc, #84]	; (80240dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024088:	7823      	ldrb	r3, [r4, #0]
 802408a:	f3bf 8f5b 	dmb	ish
 802408e:	07da      	lsls	r2, r3, #31
 8024090:	4605      	mov	r5, r0
 8024092:	d40b      	bmi.n	80240ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024094:	4620      	mov	r0, r4
 8024096:	f009 f926 	bl	802d2e6 <__cxa_guard_acquire>
 802409a:	b138      	cbz	r0, 80240ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802409c:	4620      	mov	r0, r4
 802409e:	f009 f92e 	bl	802d2fe <__cxa_guard_release>
 80240a2:	4a0f      	ldr	r2, [pc, #60]	; (80240e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80240a4:	490f      	ldr	r1, [pc, #60]	; (80240e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80240a6:	4810      	ldr	r0, [pc, #64]	; (80240e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80240a8:	f009 f916 	bl	802d2d8 <__aeabi_atexit>
 80240ac:	4c0f      	ldr	r4, [pc, #60]	; (80240ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80240ae:	7823      	ldrb	r3, [r4, #0]
 80240b0:	f3bf 8f5b 	dmb	ish
 80240b4:	07db      	lsls	r3, r3, #31
 80240b6:	d40b      	bmi.n	80240d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80240b8:	4620      	mov	r0, r4
 80240ba:	f009 f914 	bl	802d2e6 <__cxa_guard_acquire>
 80240be:	b138      	cbz	r0, 80240d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80240c0:	4620      	mov	r0, r4
 80240c2:	f009 f91c 	bl	802d2fe <__cxa_guard_release>
 80240c6:	4a06      	ldr	r2, [pc, #24]	; (80240e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80240c8:	4909      	ldr	r1, [pc, #36]	; (80240f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80240ca:	480a      	ldr	r0, [pc, #40]	; (80240f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80240cc:	f009 f904 	bl	802d2d8 <__aeabi_atexit>
 80240d0:	4b05      	ldr	r3, [pc, #20]	; (80240e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80240d2:	60ab      	str	r3, [r5, #8]
 80240d4:	4b07      	ldr	r3, [pc, #28]	; (80240f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80240d6:	60eb      	str	r3, [r5, #12]
 80240d8:	bd38      	pop	{r3, r4, r5, pc}
 80240da:	bf00      	nop
 80240dc:	2000984c 	.word	0x2000984c
 80240e0:	20000000 	.word	0x20000000
 80240e4:	08022217 	.word	0x08022217
 80240e8:	2000003c 	.word	0x2000003c
 80240ec:	20009850 	.word	0x20009850
 80240f0:	08022215 	.word	0x08022215
 80240f4:	20000040 	.word	0x20000040

080240f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80240f8:	b510      	push	{r4, lr}
 80240fa:	4604      	mov	r4, r0
 80240fc:	f7ff ff88 	bl	8024010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024100:	4620      	mov	r0, r4
 8024102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024106:	f7ff bfbd 	b.w	8024084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802410c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802410c:	b538      	push	{r3, r4, r5, lr}
 802410e:	4c15      	ldr	r4, [pc, #84]	; (8024164 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024110:	7823      	ldrb	r3, [r4, #0]
 8024112:	f3bf 8f5b 	dmb	ish
 8024116:	07da      	lsls	r2, r3, #31
 8024118:	4605      	mov	r5, r0
 802411a:	d40b      	bmi.n	8024134 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802411c:	4620      	mov	r0, r4
 802411e:	f009 f8e2 	bl	802d2e6 <__cxa_guard_acquire>
 8024122:	b138      	cbz	r0, 8024134 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024124:	4620      	mov	r0, r4
 8024126:	f009 f8ea 	bl	802d2fe <__cxa_guard_release>
 802412a:	4a0f      	ldr	r2, [pc, #60]	; (8024168 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802412c:	490f      	ldr	r1, [pc, #60]	; (802416c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802412e:	4810      	ldr	r0, [pc, #64]	; (8024170 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024130:	f009 f8d2 	bl	802d2d8 <__aeabi_atexit>
 8024134:	4c0f      	ldr	r4, [pc, #60]	; (8024174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8024136:	7823      	ldrb	r3, [r4, #0]
 8024138:	f3bf 8f5b 	dmb	ish
 802413c:	07db      	lsls	r3, r3, #31
 802413e:	d40b      	bmi.n	8024158 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024140:	4620      	mov	r0, r4
 8024142:	f009 f8d0 	bl	802d2e6 <__cxa_guard_acquire>
 8024146:	b138      	cbz	r0, 8024158 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024148:	4620      	mov	r0, r4
 802414a:	f009 f8d8 	bl	802d2fe <__cxa_guard_release>
 802414e:	4a06      	ldr	r2, [pc, #24]	; (8024168 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024150:	4909      	ldr	r1, [pc, #36]	; (8024178 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024152:	480a      	ldr	r0, [pc, #40]	; (802417c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024154:	f009 f8c0 	bl	802d2d8 <__aeabi_atexit>
 8024158:	4b05      	ldr	r3, [pc, #20]	; (8024170 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802415a:	622b      	str	r3, [r5, #32]
 802415c:	4b07      	ldr	r3, [pc, #28]	; (802417c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802415e:	626b      	str	r3, [r5, #36]	; 0x24
 8024160:	bd38      	pop	{r3, r4, r5, pc}
 8024162:	bf00      	nop
 8024164:	2000987c 	.word	0x2000987c
 8024168:	20000000 	.word	0x20000000
 802416c:	0802220b 	.word	0x0802220b
 8024170:	2000006c 	.word	0x2000006c
 8024174:	20009880 	.word	0x20009880
 8024178:	08022209 	.word	0x08022209
 802417c:	20000070 	.word	0x20000070

08024180 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024180:	b538      	push	{r3, r4, r5, lr}
 8024182:	4c15      	ldr	r4, [pc, #84]	; (80241d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024184:	7823      	ldrb	r3, [r4, #0]
 8024186:	f3bf 8f5b 	dmb	ish
 802418a:	07da      	lsls	r2, r3, #31
 802418c:	4605      	mov	r5, r0
 802418e:	d40b      	bmi.n	80241a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024190:	4620      	mov	r0, r4
 8024192:	f009 f8a8 	bl	802d2e6 <__cxa_guard_acquire>
 8024196:	b138      	cbz	r0, 80241a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024198:	4620      	mov	r0, r4
 802419a:	f009 f8b0 	bl	802d2fe <__cxa_guard_release>
 802419e:	4a0f      	ldr	r2, [pc, #60]	; (80241dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80241a0:	490f      	ldr	r1, [pc, #60]	; (80241e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80241a2:	4810      	ldr	r0, [pc, #64]	; (80241e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80241a4:	f009 f898 	bl	802d2d8 <__aeabi_atexit>
 80241a8:	4c0f      	ldr	r4, [pc, #60]	; (80241e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80241aa:	7823      	ldrb	r3, [r4, #0]
 80241ac:	f3bf 8f5b 	dmb	ish
 80241b0:	07db      	lsls	r3, r3, #31
 80241b2:	d40b      	bmi.n	80241cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80241b4:	4620      	mov	r0, r4
 80241b6:	f009 f896 	bl	802d2e6 <__cxa_guard_acquire>
 80241ba:	b138      	cbz	r0, 80241cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80241bc:	4620      	mov	r0, r4
 80241be:	f009 f89e 	bl	802d2fe <__cxa_guard_release>
 80241c2:	4a06      	ldr	r2, [pc, #24]	; (80241dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80241c4:	4909      	ldr	r1, [pc, #36]	; (80241ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80241c6:	480a      	ldr	r0, [pc, #40]	; (80241f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80241c8:	f009 f886 	bl	802d2d8 <__aeabi_atexit>
 80241cc:	4b05      	ldr	r3, [pc, #20]	; (80241e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80241ce:	61ab      	str	r3, [r5, #24]
 80241d0:	4b07      	ldr	r3, [pc, #28]	; (80241f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80241d2:	61eb      	str	r3, [r5, #28]
 80241d4:	bd38      	pop	{r3, r4, r5, pc}
 80241d6:	bf00      	nop
 80241d8:	20009854 	.word	0x20009854
 80241dc:	20000000 	.word	0x20000000
 80241e0:	0802220f 	.word	0x0802220f
 80241e4:	20000044 	.word	0x20000044
 80241e8:	20009858 	.word	0x20009858
 80241ec:	0802220d 	.word	0x0802220d
 80241f0:	20000048 	.word	0x20000048

080241f4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80241f4:	b510      	push	{r4, lr}
 80241f6:	4604      	mov	r4, r0
 80241f8:	f7ff ff88 	bl	802410c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80241fc:	4620      	mov	r0, r4
 80241fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024202:	f7ff bfbd 	b.w	8024180 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024208 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024208:	b538      	push	{r3, r4, r5, lr}
 802420a:	4c15      	ldr	r4, [pc, #84]	; (8024260 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802420c:	7823      	ldrb	r3, [r4, #0]
 802420e:	f3bf 8f5b 	dmb	ish
 8024212:	07da      	lsls	r2, r3, #31
 8024214:	4605      	mov	r5, r0
 8024216:	d40b      	bmi.n	8024230 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024218:	4620      	mov	r0, r4
 802421a:	f009 f864 	bl	802d2e6 <__cxa_guard_acquire>
 802421e:	b138      	cbz	r0, 8024230 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024220:	4620      	mov	r0, r4
 8024222:	f009 f86c 	bl	802d2fe <__cxa_guard_release>
 8024226:	4a0f      	ldr	r2, [pc, #60]	; (8024264 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024228:	490f      	ldr	r1, [pc, #60]	; (8024268 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802422a:	4810      	ldr	r0, [pc, #64]	; (802426c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802422c:	f009 f854 	bl	802d2d8 <__aeabi_atexit>
 8024230:	4c0f      	ldr	r4, [pc, #60]	; (8024270 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8024232:	7823      	ldrb	r3, [r4, #0]
 8024234:	f3bf 8f5b 	dmb	ish
 8024238:	07db      	lsls	r3, r3, #31
 802423a:	d40b      	bmi.n	8024254 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802423c:	4620      	mov	r0, r4
 802423e:	f009 f852 	bl	802d2e6 <__cxa_guard_acquire>
 8024242:	b138      	cbz	r0, 8024254 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024244:	4620      	mov	r0, r4
 8024246:	f009 f85a 	bl	802d2fe <__cxa_guard_release>
 802424a:	4a06      	ldr	r2, [pc, #24]	; (8024264 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802424c:	4909      	ldr	r1, [pc, #36]	; (8024274 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802424e:	480a      	ldr	r0, [pc, #40]	; (8024278 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024250:	f009 f842 	bl	802d2d8 <__aeabi_atexit>
 8024254:	4b05      	ldr	r3, [pc, #20]	; (802426c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024256:	632b      	str	r3, [r5, #48]	; 0x30
 8024258:	4b07      	ldr	r3, [pc, #28]	; (8024278 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802425a:	636b      	str	r3, [r5, #52]	; 0x34
 802425c:	bd38      	pop	{r3, r4, r5, pc}
 802425e:	bf00      	nop
 8024260:	2000988c 	.word	0x2000988c
 8024264:	20000000 	.word	0x20000000
 8024268:	08022203 	.word	0x08022203
 802426c:	2000007c 	.word	0x2000007c
 8024270:	20009890 	.word	0x20009890
 8024274:	08022201 	.word	0x08022201
 8024278:	20000080 	.word	0x20000080

0802427c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802427c:	b538      	push	{r3, r4, r5, lr}
 802427e:	4c15      	ldr	r4, [pc, #84]	; (80242d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024280:	7823      	ldrb	r3, [r4, #0]
 8024282:	f3bf 8f5b 	dmb	ish
 8024286:	07da      	lsls	r2, r3, #31
 8024288:	4605      	mov	r5, r0
 802428a:	d40b      	bmi.n	80242a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802428c:	4620      	mov	r0, r4
 802428e:	f009 f82a 	bl	802d2e6 <__cxa_guard_acquire>
 8024292:	b138      	cbz	r0, 80242a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024294:	4620      	mov	r0, r4
 8024296:	f009 f832 	bl	802d2fe <__cxa_guard_release>
 802429a:	4a0f      	ldr	r2, [pc, #60]	; (80242d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802429c:	490f      	ldr	r1, [pc, #60]	; (80242dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802429e:	4810      	ldr	r0, [pc, #64]	; (80242e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80242a0:	f009 f81a 	bl	802d2d8 <__aeabi_atexit>
 80242a4:	4c0f      	ldr	r4, [pc, #60]	; (80242e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80242a6:	7823      	ldrb	r3, [r4, #0]
 80242a8:	f3bf 8f5b 	dmb	ish
 80242ac:	07db      	lsls	r3, r3, #31
 80242ae:	d40b      	bmi.n	80242c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80242b0:	4620      	mov	r0, r4
 80242b2:	f009 f818 	bl	802d2e6 <__cxa_guard_acquire>
 80242b6:	b138      	cbz	r0, 80242c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80242b8:	4620      	mov	r0, r4
 80242ba:	f009 f820 	bl	802d2fe <__cxa_guard_release>
 80242be:	4a06      	ldr	r2, [pc, #24]	; (80242d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80242c0:	4909      	ldr	r1, [pc, #36]	; (80242e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80242c2:	480a      	ldr	r0, [pc, #40]	; (80242ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80242c4:	f009 f808 	bl	802d2d8 <__aeabi_atexit>
 80242c8:	4b05      	ldr	r3, [pc, #20]	; (80242e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80242ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80242cc:	4b07      	ldr	r3, [pc, #28]	; (80242ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80242ce:	62eb      	str	r3, [r5, #44]	; 0x2c
 80242d0:	bd38      	pop	{r3, r4, r5, pc}
 80242d2:	bf00      	nop
 80242d4:	2000985c 	.word	0x2000985c
 80242d8:	20000000 	.word	0x20000000
 80242dc:	08022207 	.word	0x08022207
 80242e0:	2000004c 	.word	0x2000004c
 80242e4:	20009860 	.word	0x20009860
 80242e8:	08022205 	.word	0x08022205
 80242ec:	20000050 	.word	0x20000050

080242f0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80242f0:	b510      	push	{r4, lr}
 80242f2:	4604      	mov	r4, r0
 80242f4:	f7ff ff88 	bl	8024208 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80242f8:	4620      	mov	r0, r4
 80242fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242fe:	f7ff bfbd 	b.w	802427c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024304 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8024304:	b538      	push	{r3, r4, r5, lr}
 8024306:	4c15      	ldr	r4, [pc, #84]	; (802435c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8024308:	7823      	ldrb	r3, [r4, #0]
 802430a:	f3bf 8f5b 	dmb	ish
 802430e:	07da      	lsls	r2, r3, #31
 8024310:	4605      	mov	r5, r0
 8024312:	d40b      	bmi.n	802432c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024314:	4620      	mov	r0, r4
 8024316:	f008 ffe6 	bl	802d2e6 <__cxa_guard_acquire>
 802431a:	b138      	cbz	r0, 802432c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802431c:	4620      	mov	r0, r4
 802431e:	f008 ffee 	bl	802d2fe <__cxa_guard_release>
 8024322:	4a0f      	ldr	r2, [pc, #60]	; (8024360 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024324:	490f      	ldr	r1, [pc, #60]	; (8024364 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024326:	4810      	ldr	r0, [pc, #64]	; (8024368 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024328:	f008 ffd6 	bl	802d2d8 <__aeabi_atexit>
 802432c:	4c0f      	ldr	r4, [pc, #60]	; (802436c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802432e:	7823      	ldrb	r3, [r4, #0]
 8024330:	f3bf 8f5b 	dmb	ish
 8024334:	07db      	lsls	r3, r3, #31
 8024336:	d40b      	bmi.n	8024350 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024338:	4620      	mov	r0, r4
 802433a:	f008 ffd4 	bl	802d2e6 <__cxa_guard_acquire>
 802433e:	b138      	cbz	r0, 8024350 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024340:	4620      	mov	r0, r4
 8024342:	f008 ffdc 	bl	802d2fe <__cxa_guard_release>
 8024346:	4a06      	ldr	r2, [pc, #24]	; (8024360 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024348:	4909      	ldr	r1, [pc, #36]	; (8024370 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802434a:	480a      	ldr	r0, [pc, #40]	; (8024374 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802434c:	f008 ffc4 	bl	802d2d8 <__aeabi_atexit>
 8024350:	4b05      	ldr	r3, [pc, #20]	; (8024368 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024352:	652b      	str	r3, [r5, #80]	; 0x50
 8024354:	4b07      	ldr	r3, [pc, #28]	; (8024374 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024356:	656b      	str	r3, [r5, #84]	; 0x54
 8024358:	bd38      	pop	{r3, r4, r5, pc}
 802435a:	bf00      	nop
 802435c:	20009894 	.word	0x20009894
 8024360:	20000000 	.word	0x20000000
 8024364:	080221f3 	.word	0x080221f3
 8024368:	20000084 	.word	0x20000084
 802436c:	20009898 	.word	0x20009898
 8024370:	080221f1 	.word	0x080221f1
 8024374:	20000088 	.word	0x20000088

08024378 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024378:	b538      	push	{r3, r4, r5, lr}
 802437a:	4c15      	ldr	r4, [pc, #84]	; (80243d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802437c:	7823      	ldrb	r3, [r4, #0]
 802437e:	f3bf 8f5b 	dmb	ish
 8024382:	07da      	lsls	r2, r3, #31
 8024384:	4605      	mov	r5, r0
 8024386:	d40b      	bmi.n	80243a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024388:	4620      	mov	r0, r4
 802438a:	f008 ffac 	bl	802d2e6 <__cxa_guard_acquire>
 802438e:	b138      	cbz	r0, 80243a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024390:	4620      	mov	r0, r4
 8024392:	f008 ffb4 	bl	802d2fe <__cxa_guard_release>
 8024396:	4a0f      	ldr	r2, [pc, #60]	; (80243d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024398:	490f      	ldr	r1, [pc, #60]	; (80243d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802439a:	4810      	ldr	r0, [pc, #64]	; (80243dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802439c:	f008 ff9c 	bl	802d2d8 <__aeabi_atexit>
 80243a0:	4c0f      	ldr	r4, [pc, #60]	; (80243e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80243a2:	7823      	ldrb	r3, [r4, #0]
 80243a4:	f3bf 8f5b 	dmb	ish
 80243a8:	07db      	lsls	r3, r3, #31
 80243aa:	d40b      	bmi.n	80243c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80243ac:	4620      	mov	r0, r4
 80243ae:	f008 ff9a 	bl	802d2e6 <__cxa_guard_acquire>
 80243b2:	b138      	cbz	r0, 80243c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80243b4:	4620      	mov	r0, r4
 80243b6:	f008 ffa2 	bl	802d2fe <__cxa_guard_release>
 80243ba:	4a06      	ldr	r2, [pc, #24]	; (80243d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80243bc:	4909      	ldr	r1, [pc, #36]	; (80243e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80243be:	480a      	ldr	r0, [pc, #40]	; (80243e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80243c0:	f008 ff8a 	bl	802d2d8 <__aeabi_atexit>
 80243c4:	4b05      	ldr	r3, [pc, #20]	; (80243dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80243c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80243c8:	4b07      	ldr	r3, [pc, #28]	; (80243e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80243ca:	64eb      	str	r3, [r5, #76]	; 0x4c
 80243cc:	bd38      	pop	{r3, r4, r5, pc}
 80243ce:	bf00      	nop
 80243d0:	2000989c 	.word	0x2000989c
 80243d4:	20000000 	.word	0x20000000
 80243d8:	080221f7 	.word	0x080221f7
 80243dc:	2000008c 	.word	0x2000008c
 80243e0:	200098a0 	.word	0x200098a0
 80243e4:	080221f5 	.word	0x080221f5
 80243e8:	20000090 	.word	0x20000090

080243ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80243ec:	b538      	push	{r3, r4, r5, lr}
 80243ee:	4c15      	ldr	r4, [pc, #84]	; (8024444 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80243f0:	7823      	ldrb	r3, [r4, #0]
 80243f2:	f3bf 8f5b 	dmb	ish
 80243f6:	07da      	lsls	r2, r3, #31
 80243f8:	4605      	mov	r5, r0
 80243fa:	d40b      	bmi.n	8024414 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80243fc:	4620      	mov	r0, r4
 80243fe:	f008 ff72 	bl	802d2e6 <__cxa_guard_acquire>
 8024402:	b138      	cbz	r0, 8024414 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024404:	4620      	mov	r0, r4
 8024406:	f008 ff7a 	bl	802d2fe <__cxa_guard_release>
 802440a:	4a0f      	ldr	r2, [pc, #60]	; (8024448 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802440c:	490f      	ldr	r1, [pc, #60]	; (802444c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802440e:	4810      	ldr	r0, [pc, #64]	; (8024450 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024410:	f008 ff62 	bl	802d2d8 <__aeabi_atexit>
 8024414:	4c0f      	ldr	r4, [pc, #60]	; (8024454 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8024416:	7823      	ldrb	r3, [r4, #0]
 8024418:	f3bf 8f5b 	dmb	ish
 802441c:	07db      	lsls	r3, r3, #31
 802441e:	d40b      	bmi.n	8024438 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024420:	4620      	mov	r0, r4
 8024422:	f008 ff60 	bl	802d2e6 <__cxa_guard_acquire>
 8024426:	b138      	cbz	r0, 8024438 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024428:	4620      	mov	r0, r4
 802442a:	f008 ff68 	bl	802d2fe <__cxa_guard_release>
 802442e:	4a06      	ldr	r2, [pc, #24]	; (8024448 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024430:	4909      	ldr	r1, [pc, #36]	; (8024458 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024432:	480a      	ldr	r0, [pc, #40]	; (802445c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024434:	f008 ff50 	bl	802d2d8 <__aeabi_atexit>
 8024438:	4b05      	ldr	r3, [pc, #20]	; (8024450 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802443a:	642b      	str	r3, [r5, #64]	; 0x40
 802443c:	4b07      	ldr	r3, [pc, #28]	; (802445c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802443e:	646b      	str	r3, [r5, #68]	; 0x44
 8024440:	bd38      	pop	{r3, r4, r5, pc}
 8024442:	bf00      	nop
 8024444:	20009864 	.word	0x20009864
 8024448:	20000000 	.word	0x20000000
 802444c:	080221fb 	.word	0x080221fb
 8024450:	20000054 	.word	0x20000054
 8024454:	20009868 	.word	0x20009868
 8024458:	080221f9 	.word	0x080221f9
 802445c:	20000058 	.word	0x20000058

08024460 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024460:	b538      	push	{r3, r4, r5, lr}
 8024462:	4c15      	ldr	r4, [pc, #84]	; (80244b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024464:	7823      	ldrb	r3, [r4, #0]
 8024466:	f3bf 8f5b 	dmb	ish
 802446a:	07da      	lsls	r2, r3, #31
 802446c:	4605      	mov	r5, r0
 802446e:	d40b      	bmi.n	8024488 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024470:	4620      	mov	r0, r4
 8024472:	f008 ff38 	bl	802d2e6 <__cxa_guard_acquire>
 8024476:	b138      	cbz	r0, 8024488 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024478:	4620      	mov	r0, r4
 802447a:	f008 ff40 	bl	802d2fe <__cxa_guard_release>
 802447e:	4a0f      	ldr	r2, [pc, #60]	; (80244bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024480:	490f      	ldr	r1, [pc, #60]	; (80244c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024482:	4810      	ldr	r0, [pc, #64]	; (80244c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024484:	f008 ff28 	bl	802d2d8 <__aeabi_atexit>
 8024488:	4c0f      	ldr	r4, [pc, #60]	; (80244c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802448a:	7823      	ldrb	r3, [r4, #0]
 802448c:	f3bf 8f5b 	dmb	ish
 8024490:	07db      	lsls	r3, r3, #31
 8024492:	d40b      	bmi.n	80244ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024494:	4620      	mov	r0, r4
 8024496:	f008 ff26 	bl	802d2e6 <__cxa_guard_acquire>
 802449a:	b138      	cbz	r0, 80244ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802449c:	4620      	mov	r0, r4
 802449e:	f008 ff2e 	bl	802d2fe <__cxa_guard_release>
 80244a2:	4a06      	ldr	r2, [pc, #24]	; (80244bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80244a4:	4909      	ldr	r1, [pc, #36]	; (80244cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80244a6:	480a      	ldr	r0, [pc, #40]	; (80244d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80244a8:	f008 ff16 	bl	802d2d8 <__aeabi_atexit>
 80244ac:	4b05      	ldr	r3, [pc, #20]	; (80244c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80244ae:	63ab      	str	r3, [r5, #56]	; 0x38
 80244b0:	4b07      	ldr	r3, [pc, #28]	; (80244d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80244b2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80244b4:	bd38      	pop	{r3, r4, r5, pc}
 80244b6:	bf00      	nop
 80244b8:	20009884 	.word	0x20009884
 80244bc:	20000000 	.word	0x20000000
 80244c0:	080221ff 	.word	0x080221ff
 80244c4:	20000074 	.word	0x20000074
 80244c8:	20009888 	.word	0x20009888
 80244cc:	080221fd 	.word	0x080221fd
 80244d0:	20000078 	.word	0x20000078

080244d4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80244d4:	b510      	push	{r4, lr}
 80244d6:	4604      	mov	r4, r0
 80244d8:	f7ff ff14 	bl	8024304 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80244dc:	4620      	mov	r0, r4
 80244de:	f7ff ff85 	bl	80243ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80244e2:	4620      	mov	r0, r4
 80244e4:	f7ff ff48 	bl	8024378 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80244e8:	4620      	mov	r0, r4
 80244ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244ee:	f7ff bfb7 	b.w	8024460 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080244f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80244f4:	b538      	push	{r3, r4, r5, lr}
 80244f6:	4c15      	ldr	r4, [pc, #84]	; (802454c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80244f8:	7823      	ldrb	r3, [r4, #0]
 80244fa:	f3bf 8f5b 	dmb	ish
 80244fe:	07da      	lsls	r2, r3, #31
 8024500:	4605      	mov	r5, r0
 8024502:	d40b      	bmi.n	802451c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024504:	4620      	mov	r0, r4
 8024506:	f008 feee 	bl	802d2e6 <__cxa_guard_acquire>
 802450a:	b138      	cbz	r0, 802451c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802450c:	4620      	mov	r0, r4
 802450e:	f008 fef6 	bl	802d2fe <__cxa_guard_release>
 8024512:	4a0f      	ldr	r2, [pc, #60]	; (8024550 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024514:	490f      	ldr	r1, [pc, #60]	; (8024554 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024516:	4810      	ldr	r0, [pc, #64]	; (8024558 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024518:	f008 fede 	bl	802d2d8 <__aeabi_atexit>
 802451c:	4c0f      	ldr	r4, [pc, #60]	; (802455c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802451e:	7823      	ldrb	r3, [r4, #0]
 8024520:	f3bf 8f5b 	dmb	ish
 8024524:	07db      	lsls	r3, r3, #31
 8024526:	d40b      	bmi.n	8024540 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024528:	4620      	mov	r0, r4
 802452a:	f008 fedc 	bl	802d2e6 <__cxa_guard_acquire>
 802452e:	b138      	cbz	r0, 8024540 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024530:	4620      	mov	r0, r4
 8024532:	f008 fee4 	bl	802d2fe <__cxa_guard_release>
 8024536:	4a06      	ldr	r2, [pc, #24]	; (8024550 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024538:	4909      	ldr	r1, [pc, #36]	; (8024560 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802453a:	480a      	ldr	r0, [pc, #40]	; (8024564 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802453c:	f008 fecc 	bl	802d2d8 <__aeabi_atexit>
 8024540:	4b05      	ldr	r3, [pc, #20]	; (8024558 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024542:	662b      	str	r3, [r5, #96]	; 0x60
 8024544:	4b07      	ldr	r3, [pc, #28]	; (8024564 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024546:	666b      	str	r3, [r5, #100]	; 0x64
 8024548:	bd38      	pop	{r3, r4, r5, pc}
 802454a:	bf00      	nop
 802454c:	2000986c 	.word	0x2000986c
 8024550:	20000000 	.word	0x20000000
 8024554:	080221eb 	.word	0x080221eb
 8024558:	2000005c 	.word	0x2000005c
 802455c:	20009870 	.word	0x20009870
 8024560:	080221e9 	.word	0x080221e9
 8024564:	20000060 	.word	0x20000060

08024568 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024568:	b538      	push	{r3, r4, r5, lr}
 802456a:	4c15      	ldr	r4, [pc, #84]	; (80245c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802456c:	7823      	ldrb	r3, [r4, #0]
 802456e:	f3bf 8f5b 	dmb	ish
 8024572:	07da      	lsls	r2, r3, #31
 8024574:	4605      	mov	r5, r0
 8024576:	d40b      	bmi.n	8024590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024578:	4620      	mov	r0, r4
 802457a:	f008 feb4 	bl	802d2e6 <__cxa_guard_acquire>
 802457e:	b138      	cbz	r0, 8024590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024580:	4620      	mov	r0, r4
 8024582:	f008 febc 	bl	802d2fe <__cxa_guard_release>
 8024586:	4a0f      	ldr	r2, [pc, #60]	; (80245c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024588:	490f      	ldr	r1, [pc, #60]	; (80245c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802458a:	4810      	ldr	r0, [pc, #64]	; (80245cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802458c:	f008 fea4 	bl	802d2d8 <__aeabi_atexit>
 8024590:	4c0f      	ldr	r4, [pc, #60]	; (80245d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024592:	7823      	ldrb	r3, [r4, #0]
 8024594:	f3bf 8f5b 	dmb	ish
 8024598:	07db      	lsls	r3, r3, #31
 802459a:	d40b      	bmi.n	80245b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802459c:	4620      	mov	r0, r4
 802459e:	f008 fea2 	bl	802d2e6 <__cxa_guard_acquire>
 80245a2:	b138      	cbz	r0, 80245b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80245a4:	4620      	mov	r0, r4
 80245a6:	f008 feaa 	bl	802d2fe <__cxa_guard_release>
 80245aa:	4a06      	ldr	r2, [pc, #24]	; (80245c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80245ac:	4909      	ldr	r1, [pc, #36]	; (80245d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80245ae:	480a      	ldr	r0, [pc, #40]	; (80245d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80245b0:	f008 fe92 	bl	802d2d8 <__aeabi_atexit>
 80245b4:	4b05      	ldr	r3, [pc, #20]	; (80245cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80245b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80245b8:	4b07      	ldr	r3, [pc, #28]	; (80245d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80245ba:	65eb      	str	r3, [r5, #92]	; 0x5c
 80245bc:	bd38      	pop	{r3, r4, r5, pc}
 80245be:	bf00      	nop
 80245c0:	20009844 	.word	0x20009844
 80245c4:	20000000 	.word	0x20000000
 80245c8:	080221ef 	.word	0x080221ef
 80245cc:	20000034 	.word	0x20000034
 80245d0:	20009848 	.word	0x20009848
 80245d4:	080221ed 	.word	0x080221ed
 80245d8:	20000038 	.word	0x20000038

080245dc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80245dc:	b510      	push	{r4, lr}
 80245de:	4604      	mov	r4, r0
 80245e0:	f7ff ff88 	bl	80244f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80245e4:	4620      	mov	r0, r4
 80245e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245ea:	f7ff bfbd 	b.w	8024568 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080245f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80245f0:	b538      	push	{r3, r4, r5, lr}
 80245f2:	4c15      	ldr	r4, [pc, #84]	; (8024648 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80245f4:	7823      	ldrb	r3, [r4, #0]
 80245f6:	f3bf 8f5b 	dmb	ish
 80245fa:	07da      	lsls	r2, r3, #31
 80245fc:	4605      	mov	r5, r0
 80245fe:	d40b      	bmi.n	8024618 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024600:	4620      	mov	r0, r4
 8024602:	f008 fe70 	bl	802d2e6 <__cxa_guard_acquire>
 8024606:	b138      	cbz	r0, 8024618 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024608:	4620      	mov	r0, r4
 802460a:	f008 fe78 	bl	802d2fe <__cxa_guard_release>
 802460e:	4a0f      	ldr	r2, [pc, #60]	; (802464c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024610:	490f      	ldr	r1, [pc, #60]	; (8024650 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024612:	4810      	ldr	r0, [pc, #64]	; (8024654 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024614:	f008 fe60 	bl	802d2d8 <__aeabi_atexit>
 8024618:	4c0f      	ldr	r4, [pc, #60]	; (8024658 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802461a:	7823      	ldrb	r3, [r4, #0]
 802461c:	f3bf 8f5b 	dmb	ish
 8024620:	07db      	lsls	r3, r3, #31
 8024622:	d40b      	bmi.n	802463c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024624:	4620      	mov	r0, r4
 8024626:	f008 fe5e 	bl	802d2e6 <__cxa_guard_acquire>
 802462a:	b138      	cbz	r0, 802463c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802462c:	4620      	mov	r0, r4
 802462e:	f008 fe66 	bl	802d2fe <__cxa_guard_release>
 8024632:	4a06      	ldr	r2, [pc, #24]	; (802464c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024634:	4909      	ldr	r1, [pc, #36]	; (802465c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024636:	480a      	ldr	r0, [pc, #40]	; (8024660 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024638:	f008 fe4e 	bl	802d2d8 <__aeabi_atexit>
 802463c:	4b05      	ldr	r3, [pc, #20]	; (8024654 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802463e:	672b      	str	r3, [r5, #112]	; 0x70
 8024640:	4b07      	ldr	r3, [pc, #28]	; (8024660 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024642:	676b      	str	r3, [r5, #116]	; 0x74
 8024644:	bd38      	pop	{r3, r4, r5, pc}
 8024646:	bf00      	nop
 8024648:	2000983c 	.word	0x2000983c
 802464c:	20000000 	.word	0x20000000
 8024650:	080221e3 	.word	0x080221e3
 8024654:	2000002c 	.word	0x2000002c
 8024658:	20009840 	.word	0x20009840
 802465c:	080221e1 	.word	0x080221e1
 8024660:	20000030 	.word	0x20000030

08024664 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024664:	b538      	push	{r3, r4, r5, lr}
 8024666:	4c15      	ldr	r4, [pc, #84]	; (80246bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024668:	7823      	ldrb	r3, [r4, #0]
 802466a:	f3bf 8f5b 	dmb	ish
 802466e:	07da      	lsls	r2, r3, #31
 8024670:	4605      	mov	r5, r0
 8024672:	d40b      	bmi.n	802468c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024674:	4620      	mov	r0, r4
 8024676:	f008 fe36 	bl	802d2e6 <__cxa_guard_acquire>
 802467a:	b138      	cbz	r0, 802468c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802467c:	4620      	mov	r0, r4
 802467e:	f008 fe3e 	bl	802d2fe <__cxa_guard_release>
 8024682:	4a0f      	ldr	r2, [pc, #60]	; (80246c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024684:	490f      	ldr	r1, [pc, #60]	; (80246c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024686:	4810      	ldr	r0, [pc, #64]	; (80246c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024688:	f008 fe26 	bl	802d2d8 <__aeabi_atexit>
 802468c:	4c0f      	ldr	r4, [pc, #60]	; (80246cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802468e:	7823      	ldrb	r3, [r4, #0]
 8024690:	f3bf 8f5b 	dmb	ish
 8024694:	07db      	lsls	r3, r3, #31
 8024696:	d40b      	bmi.n	80246b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024698:	4620      	mov	r0, r4
 802469a:	f008 fe24 	bl	802d2e6 <__cxa_guard_acquire>
 802469e:	b138      	cbz	r0, 80246b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80246a0:	4620      	mov	r0, r4
 80246a2:	f008 fe2c 	bl	802d2fe <__cxa_guard_release>
 80246a6:	4a06      	ldr	r2, [pc, #24]	; (80246c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80246a8:	4909      	ldr	r1, [pc, #36]	; (80246d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80246aa:	480a      	ldr	r0, [pc, #40]	; (80246d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80246ac:	f008 fe14 	bl	802d2d8 <__aeabi_atexit>
 80246b0:	4b05      	ldr	r3, [pc, #20]	; (80246c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80246b2:	66ab      	str	r3, [r5, #104]	; 0x68
 80246b4:	4b07      	ldr	r3, [pc, #28]	; (80246d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80246b6:	66eb      	str	r3, [r5, #108]	; 0x6c
 80246b8:	bd38      	pop	{r3, r4, r5, pc}
 80246ba:	bf00      	nop
 80246bc:	20009834 	.word	0x20009834
 80246c0:	20000000 	.word	0x20000000
 80246c4:	080221e7 	.word	0x080221e7
 80246c8:	20000024 	.word	0x20000024
 80246cc:	20009838 	.word	0x20009838
 80246d0:	080221e5 	.word	0x080221e5
 80246d4:	20000028 	.word	0x20000028

080246d8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80246d8:	b510      	push	{r4, lr}
 80246da:	4604      	mov	r4, r0
 80246dc:	f7ff ff88 	bl	80245f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80246e0:	4620      	mov	r0, r4
 80246e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80246e6:	f7ff bfbd 	b.w	8024664 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080246ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80246ea:	b510      	push	{r4, lr}
 80246ec:	4604      	mov	r4, r0
 80246ee:	f7ff fff3 	bl	80246d8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80246f2:	4620      	mov	r0, r4
 80246f4:	f7ff ff72 	bl	80245dc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80246f8:	4620      	mov	r0, r4
 80246fa:	f7ff fdf9 	bl	80242f0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80246fe:	4620      	mov	r0, r4
 8024700:	f7ff fcfa 	bl	80240f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024704:	4620      	mov	r0, r4
 8024706:	f7ff fd75 	bl	80241f4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802470a:	4620      	mov	r0, r4
 802470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024710:	f7ff bee0 	b.w	80244d4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024718:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 802471c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024720:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8024724:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8024728:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 802472c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8024730:	8808      	ldrh	r0, [r1, #0]
 8024732:	fb0e 4708 	mla	r7, lr, r8, r4
 8024736:	f1be 0f00 	cmp.w	lr, #0
 802473a:	eb02 0a07 	add.w	sl, r2, r7
 802473e:	db37      	blt.n	80247b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024740:	45f3      	cmp	fp, lr
 8024742:	dd35      	ble.n	80247b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024744:	2c00      	cmp	r4, #0
 8024746:	db31      	blt.n	80247ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8024748:	45a0      	cmp	r8, r4
 802474a:	dd2f      	ble.n	80247ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 802474c:	5dd2      	ldrb	r2, [r2, r7]
 802474e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8024752:	1c62      	adds	r2, r4, #1
 8024754:	d42f      	bmi.n	80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024756:	4590      	cmp	r8, r2
 8024758:	dd2d      	ble.n	80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802475a:	b366      	cbz	r6, 80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802475c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024760:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024764:	f11e 0e01 	adds.w	lr, lr, #1
 8024768:	d429      	bmi.n	80247be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802476a:	45f3      	cmp	fp, lr
 802476c:	dd27      	ble.n	80247be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802476e:	f1bc 0f00 	cmp.w	ip, #0
 8024772:	f000 80a1 	beq.w	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8024776:	2c00      	cmp	r4, #0
 8024778:	db1f      	blt.n	80247ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802477a:	45a0      	cmp	r8, r4
 802477c:	dd1d      	ble.n	80247ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802477e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8024782:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8024786:	3401      	adds	r4, #1
 8024788:	d41c      	bmi.n	80247c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802478a:	45a0      	cmp	r8, r4
 802478c:	dd1a      	ble.n	80247c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802478e:	b1de      	cbz	r6, 80247c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8024790:	44d0      	add	r8, sl
 8024792:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024796:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802479a:	2e0f      	cmp	r6, #15
 802479c:	d915      	bls.n	80247ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 802479e:	4b49      	ldr	r3, [pc, #292]	; (80248c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 80247a0:	4a49      	ldr	r2, [pc, #292]	; (80248c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 80247a2:	484a      	ldr	r0, [pc, #296]	; (80248cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80247a4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80247a8:	f009 fbba 	bl	802df20 <__assert_func>
 80247ac:	4681      	mov	r9, r0
 80247ae:	e7d0      	b.n	8024752 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80247b0:	4607      	mov	r7, r0
 80247b2:	4681      	mov	r9, r0
 80247b4:	e7d6      	b.n	8024764 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80247b6:	4607      	mov	r7, r0
 80247b8:	e7d4      	b.n	8024764 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80247ba:	4686      	mov	lr, r0
 80247bc:	e7e3      	b.n	8024786 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80247be:	4603      	mov	r3, r0
 80247c0:	4686      	mov	lr, r0
 80247c2:	e7ea      	b.n	802479a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80247c4:	4603      	mov	r3, r0
 80247c6:	e7e8      	b.n	802479a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80247c8:	4603      	mov	r3, r0
 80247ca:	f1bc 0f0f 	cmp.w	ip, #15
 80247ce:	d8e6      	bhi.n	802479e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80247d0:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80247d4:	fb16 f80c 	smulbb	r8, r6, ip
 80247d8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80247dc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80247e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80247e4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80247e8:	ea44 0909 	orr.w	r9, r4, r9
 80247ec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80247f0:	f1cc 0410 	rsb	r4, ip, #16
 80247f4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80247f8:	1ba4      	subs	r4, r4, r6
 80247fa:	041a      	lsls	r2, r3, #16
 80247fc:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8024800:	ea4a 0707 	orr.w	r7, sl, r7
 8024804:	4377      	muls	r7, r6
 8024806:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802480a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802480e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024812:	fb04 7409 	mla	r4, r4, r9, r7
 8024816:	4313      	orrs	r3, r2
 8024818:	ea4f 420e 	mov.w	r2, lr, lsl #16
 802481c:	fb08 4303 	mla	r3, r8, r3, r4
 8024820:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024824:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8024828:	4322      	orrs	r2, r4
 802482a:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 802482e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024832:	0d53      	lsrs	r3, r2, #21
 8024834:	0952      	lsrs	r2, r2, #5
 8024836:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802483a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802483e:	431a      	orrs	r2, r3
 8024840:	b293      	uxth	r3, r2
 8024842:	b2af      	uxth	r7, r5
 8024844:	1202      	asrs	r2, r0, #8
 8024846:	43ed      	mvns	r5, r5
 8024848:	b2ed      	uxtb	r5, r5
 802484a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802484e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024852:	fb12 f205 	smulbb	r2, r2, r5
 8024856:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802485a:	fb0c 2c07 	mla	ip, ip, r7, r2
 802485e:	00dc      	lsls	r4, r3, #3
 8024860:	10da      	asrs	r2, r3, #3
 8024862:	10c6      	asrs	r6, r0, #3
 8024864:	00c3      	lsls	r3, r0, #3
 8024866:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802486a:	b2db      	uxtb	r3, r3
 802486c:	fb16 f605 	smulbb	r6, r6, r5
 8024870:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024874:	b2e4      	uxtb	r4, r4
 8024876:	fb13 f305 	smulbb	r3, r3, r5
 802487a:	fa1f fc8c 	uxth.w	ip, ip
 802487e:	fb02 6207 	mla	r2, r2, r7, r6
 8024882:	fb04 3307 	mla	r3, r4, r7, r3
 8024886:	b296      	uxth	r6, r2
 8024888:	b29a      	uxth	r2, r3
 802488a:	f10c 0301 	add.w	r3, ip, #1
 802488e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024892:	1c53      	adds	r3, r2, #1
 8024894:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024898:	1c72      	adds	r2, r6, #1
 802489a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802489e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80248a2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80248a6:	0952      	lsrs	r2, r2, #5
 80248a8:	ea43 030c 	orr.w	r3, r3, ip
 80248ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248b0:	4313      	orrs	r3, r2
 80248b2:	800b      	strh	r3, [r1, #0]
 80248b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248b8:	2e0f      	cmp	r6, #15
 80248ba:	f63f af70 	bhi.w	802479e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80248be:	4603      	mov	r3, r0
 80248c0:	4686      	mov	lr, r0
 80248c2:	e785      	b.n	80247d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80248c4:	08032c55 	.word	0x08032c55
 80248c8:	080332cb 	.word	0x080332cb
 80248cc:	08032cd9 	.word	0x08032cd9

080248d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80248d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248d4:	ed2d 8b08 	vpush	{d8-d11}
 80248d8:	b099      	sub	sp, #100	; 0x64
 80248da:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 80248de:	9215      	str	r2, [sp, #84]	; 0x54
 80248e0:	9309      	str	r3, [sp, #36]	; 0x24
 80248e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80248e4:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80248e8:	930d      	str	r3, [sp, #52]	; 0x34
 80248ea:	910c      	str	r1, [sp, #48]	; 0x30
 80248ec:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80248f0:	9016      	str	r0, [sp, #88]	; 0x58
 80248f2:	6850      	ldr	r0, [r2, #4]
 80248f4:	6812      	ldr	r2, [r2, #0]
 80248f6:	fb00 1303 	mla	r3, r0, r3, r1
 80248fa:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80248fe:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024900:	681b      	ldr	r3, [r3, #0]
 8024902:	930b      	str	r3, [sp, #44]	; 0x2c
 8024904:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024906:	685e      	ldr	r6, [r3, #4]
 8024908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802490a:	43db      	mvns	r3, r3
 802490c:	b2db      	uxtb	r3, r3
 802490e:	eeb0 aa40 	vmov.f32	s20, s0
 8024912:	eef0 9a60 	vmov.f32	s19, s1
 8024916:	eeb0 9a41 	vmov.f32	s18, s2
 802491a:	eeb0 8a62 	vmov.f32	s16, s5
 802491e:	eef0 8a43 	vmov.f32	s17, s6
 8024922:	eef0 ba44 	vmov.f32	s23, s8
 8024926:	eeb0 ba64 	vmov.f32	s22, s9
 802492a:	eef0 aa45 	vmov.f32	s21, s10
 802492e:	3604      	adds	r6, #4
 8024930:	930a      	str	r3, [sp, #40]	; 0x28
 8024932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024934:	2b00      	cmp	r3, #0
 8024936:	dc03      	bgt.n	8024940 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802493a:	2b00      	cmp	r3, #0
 802493c:	f340 8225 	ble.w	8024d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024940:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024942:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024946:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802494a:	1e48      	subs	r0, r1, #1
 802494c:	1e57      	subs	r7, r2, #1
 802494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024950:	2b00      	cmp	r3, #0
 8024952:	f340 80e3 	ble.w	8024b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8024956:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802495a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802495e:	d406      	bmi.n	802496e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024960:	4584      	cmp	ip, r0
 8024962:	da04      	bge.n	802496e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024964:	2b00      	cmp	r3, #0
 8024966:	db02      	blt.n	802496e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024968:	42bb      	cmp	r3, r7
 802496a:	f2c0 80d8 	blt.w	8024b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802496e:	f11c 0c01 	adds.w	ip, ip, #1
 8024972:	f100 80c9 	bmi.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024976:	4561      	cmp	r1, ip
 8024978:	f2c0 80c6 	blt.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802497c:	3301      	adds	r3, #1
 802497e:	f100 80c3 	bmi.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024982:	429a      	cmp	r2, r3
 8024984:	f2c0 80c0 	blt.w	8024b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024988:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802498c:	4647      	mov	r7, r8
 802498e:	f1bb 0f00 	cmp.w	fp, #0
 8024992:	f340 80e3 	ble.w	8024b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024996:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8024998:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802499a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802499e:	689b      	ldr	r3, [r3, #8]
 80249a0:	ea5f 422a 	movs.w	r2, sl, asr #16
 80249a4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80249a8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80249ac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80249b0:	f100 8121 	bmi.w	8024bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80249b4:	f103 39ff 	add.w	r9, r3, #4294967295
 80249b8:	454a      	cmp	r2, r9
 80249ba:	f280 811c 	bge.w	8024bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80249be:	f1bc 0f00 	cmp.w	ip, #0
 80249c2:	f2c0 8118 	blt.w	8024bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80249c6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80249ca:	45cc      	cmp	ip, r9
 80249cc:	f280 8113 	bge.w	8024bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80249d0:	b21b      	sxth	r3, r3
 80249d2:	fb0c 2203 	mla	r2, ip, r3, r2
 80249d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80249d8:	eb04 0902 	add.w	r9, r4, r2
 80249dc:	5ca2      	ldrb	r2, [r4, r2]
 80249de:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80249e2:	2800      	cmp	r0, #0
 80249e4:	f000 80fe 	beq.w	8024be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80249e8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80249ec:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80249f0:	9211      	str	r2, [sp, #68]	; 0x44
 80249f2:	b151      	cbz	r1, 8024a0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80249f4:	eb09 0203 	add.w	r2, r9, r3
 80249f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80249fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8024a02:	7853      	ldrb	r3, [r2, #1]
 8024a04:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024a08:	9312      	str	r3, [sp, #72]	; 0x48
 8024a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024a0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024a0e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024a12:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024a16:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024a1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8024a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024a20:	041b      	lsls	r3, r3, #16
 8024a22:	fb10 f201 	smulbb	r2, r0, r1
 8024a26:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024a2a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024a2e:	10d2      	asrs	r2, r2, #3
 8024a30:	4323      	orrs	r3, r4
 8024a32:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024a36:	4353      	muls	r3, r2
 8024a38:	fb09 330c 	mla	r3, r9, ip, r3
 8024a3c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024a40:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024a44:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024a48:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024a4c:	f1c1 0c10 	rsb	ip, r1, #16
 8024a50:	ebac 0c00 	sub.w	ip, ip, r0
 8024a54:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024a58:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024a5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a60:	0418      	lsls	r0, r3, #16
 8024a62:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024a66:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024a6a:	4318      	orrs	r0, r3
 8024a6c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024a70:	fb02 c200 	mla	r2, r2, r0, ip
 8024a74:	0d53      	lsrs	r3, r2, #21
 8024a76:	0952      	lsrs	r2, r2, #5
 8024a78:	8838      	ldrh	r0, [r7, #0]
 8024a7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024a82:	431a      	orrs	r2, r3
 8024a84:	b292      	uxth	r2, r2
 8024a86:	1201      	asrs	r1, r0, #8
 8024a88:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8024a8c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024a90:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024a94:	fb11 f104 	smulbb	r1, r1, r4
 8024a98:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024a9c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024aa0:	00c0      	lsls	r0, r0, #3
 8024aa2:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024aa6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024aaa:	10d1      	asrs	r1, r2, #3
 8024aac:	b2c0      	uxtb	r0, r0
 8024aae:	00d2      	lsls	r2, r2, #3
 8024ab0:	b2d2      	uxtb	r2, r2
 8024ab2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024ab6:	fb1e fe04 	smulbb	lr, lr, r4
 8024aba:	fb10 f004 	smulbb	r0, r0, r4
 8024abe:	fa1f fc8c 	uxth.w	ip, ip
 8024ac2:	fb01 e103 	mla	r1, r1, r3, lr
 8024ac6:	fb02 0303 	mla	r3, r2, r3, r0
 8024aca:	b29a      	uxth	r2, r3
 8024acc:	f10c 0301 	add.w	r3, ip, #1
 8024ad0:	b289      	uxth	r1, r1
 8024ad2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024ad6:	1c53      	adds	r3, r2, #1
 8024ad8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024adc:	1c4a      	adds	r2, r1, #1
 8024ade:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024ae2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024ae6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024aea:	0949      	lsrs	r1, r1, #5
 8024aec:	ea43 030c 	orr.w	r3, r3, ip
 8024af0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024af4:	430b      	orrs	r3, r1
 8024af6:	803b      	strh	r3, [r7, #0]
 8024af8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024afa:	449a      	add	sl, r3
 8024afc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024afe:	3702      	adds	r7, #2
 8024b00:	441d      	add	r5, r3
 8024b02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024b06:	e742      	b.n	802498e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024b08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024b0a:	449a      	add	sl, r3
 8024b0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024b0e:	441d      	add	r5, r3
 8024b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b12:	3b01      	subs	r3, #1
 8024b14:	9309      	str	r3, [sp, #36]	; 0x24
 8024b16:	f108 0802 	add.w	r8, r8, #2
 8024b1a:	e718      	b.n	802494e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8024b1c:	d023      	beq.n	8024b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b20:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8024b22:	3b01      	subs	r3, #1
 8024b24:	fb00 a003 	mla	r0, r0, r3, sl
 8024b28:	1400      	asrs	r0, r0, #16
 8024b2a:	f53f af2d 	bmi.w	8024988 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024b2e:	3901      	subs	r1, #1
 8024b30:	4288      	cmp	r0, r1
 8024b32:	f6bf af29 	bge.w	8024988 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024b36:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024b38:	fb01 5303 	mla	r3, r1, r3, r5
 8024b3c:	141b      	asrs	r3, r3, #16
 8024b3e:	f53f af23 	bmi.w	8024988 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024b42:	3a01      	subs	r2, #1
 8024b44:	4293      	cmp	r3, r2
 8024b46:	f6bf af1f 	bge.w	8024988 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024b4a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024b4e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8024b52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024b56:	f1be 0f00 	cmp.w	lr, #0
 8024b5a:	dc6c      	bgt.n	8024c36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8024b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b5e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024b62:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	f340 810e 	ble.w	8024d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024b6e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024b76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024b7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b7c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024b80:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024b84:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024b88:	eef0 6a48 	vmov.f32	s13, s16
 8024b8c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024b90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b94:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024b98:	ee16 aa90 	vmov	sl, s13
 8024b9c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ba0:	eef0 6a68 	vmov.f32	s13, s17
 8024ba4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ba8:	ee18 2a10 	vmov	r2, s16
 8024bac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024bb4:	ee18 2a90 	vmov	r2, s17
 8024bb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8024bba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8024bc0:	932e      	str	r3, [sp, #184]	; 0xb8
 8024bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024bc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024bc6:	3b01      	subs	r3, #1
 8024bc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8024bce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024bd0:	bf08      	it	eq
 8024bd2:	4613      	moveq	r3, r2
 8024bd4:	ee16 5a90 	vmov	r5, s13
 8024bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8024bda:	eef0 8a67 	vmov.f32	s17, s15
 8024bde:	eeb0 8a47 	vmov.f32	s16, s14
 8024be2:	e6a6      	b.n	8024932 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024be4:	2900      	cmp	r1, #0
 8024be6:	f43f af10 	beq.w	8024a0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024bea:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024bee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024bf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8024bf4:	e709      	b.n	8024a0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024bf6:	f112 0901 	adds.w	r9, r2, #1
 8024bfa:	f53f af7d 	bmi.w	8024af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024bfe:	454b      	cmp	r3, r9
 8024c00:	f6ff af7a 	blt.w	8024af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024c04:	f11c 0901 	adds.w	r9, ip, #1
 8024c08:	f53f af76 	bmi.w	8024af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024c0c:	45ce      	cmp	lr, r9
 8024c0e:	f6ff af73 	blt.w	8024af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024c12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024c14:	9202      	str	r2, [sp, #8]
 8024c16:	b21b      	sxth	r3, r3
 8024c18:	fa0f f28e 	sxth.w	r2, lr
 8024c1c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024c20:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024c24:	9201      	str	r2, [sp, #4]
 8024c26:	9300      	str	r3, [sp, #0]
 8024c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024c2a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024c2c:	4633      	mov	r3, r6
 8024c2e:	4639      	mov	r1, r7
 8024c30:	f7ff fd70 	bl	8024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024c34:	e760      	b.n	8024af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024c36:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024c38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024c3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024c3e:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024c42:	1429      	asrs	r1, r5, #16
 8024c44:	fb03 2101 	mla	r1, r3, r1, r2
 8024c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024c4a:	440a      	add	r2, r1
 8024c4c:	5c61      	ldrb	r1, [r4, r1]
 8024c4e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024c52:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024c56:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024c5a:	f1bc 0f00 	cmp.w	ip, #0
 8024c5e:	f000 808c 	beq.w	8024d7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8024c62:	7857      	ldrb	r7, [r2, #1]
 8024c64:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024c68:	9413      	str	r4, [sp, #76]	; 0x4c
 8024c6a:	b140      	cbz	r0, 8024c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024c6c:	18d7      	adds	r7, r2, r3
 8024c6e:	5cd3      	ldrb	r3, [r2, r3]
 8024c70:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024c74:	9310      	str	r3, [sp, #64]	; 0x40
 8024c76:	787b      	ldrb	r3, [r7, #1]
 8024c78:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024c7c:	9314      	str	r3, [sp, #80]	; 0x50
 8024c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024c80:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024c82:	fb1c f200 	smulbb	r2, ip, r0
 8024c86:	041f      	lsls	r7, r3, #16
 8024c88:	10d2      	asrs	r2, r2, #3
 8024c8a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024c8e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8024c92:	431f      	orrs	r7, r3
 8024c94:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024c98:	9317      	str	r3, [sp, #92]	; 0x5c
 8024c9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024c9c:	041b      	lsls	r3, r3, #16
 8024c9e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8024ca2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024ca6:	ea43 030b 	orr.w	r3, r3, fp
 8024caa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024cac:	4353      	muls	r3, r2
 8024cae:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024cb2:	fb04 3707 	mla	r7, r4, r7, r3
 8024cb6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024cba:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024cbe:	ea43 0b01 	orr.w	fp, r3, r1
 8024cc2:	f1c0 0110 	rsb	r1, r0, #16
 8024cc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024cc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024cca:	eba1 0c0c 	sub.w	ip, r1, ip
 8024cce:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024cd2:	fb0c 770b 	mla	r7, ip, fp, r7
 8024cd6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024cda:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8024cde:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024ce2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024ce6:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024cea:	fb02 770c 	mla	r7, r2, ip, r7
 8024cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024cf0:	0d79      	lsrs	r1, r7, #21
 8024cf2:	097f      	lsrs	r7, r7, #5
 8024cf4:	8812      	ldrh	r2, [r2, #0]
 8024cf6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024cfa:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024cfe:	430f      	orrs	r7, r1
 8024d00:	b2bb      	uxth	r3, r7
 8024d02:	1211      	asrs	r1, r2, #8
 8024d04:	1218      	asrs	r0, r3, #8
 8024d06:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024d0a:	fb11 f104 	smulbb	r1, r1, r4
 8024d0e:	10d7      	asrs	r7, r2, #3
 8024d10:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024d14:	00d2      	lsls	r2, r2, #3
 8024d16:	fb00 1009 	mla	r0, r0, r9, r1
 8024d1a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024d1e:	10d9      	asrs	r1, r3, #3
 8024d20:	b2d2      	uxtb	r2, r2
 8024d22:	00db      	lsls	r3, r3, #3
 8024d24:	fb17 f704 	smulbb	r7, r7, r4
 8024d28:	fb12 f204 	smulbb	r2, r2, r4
 8024d2c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024d30:	b2db      	uxtb	r3, r3
 8024d32:	b280      	uxth	r0, r0
 8024d34:	fb01 7109 	mla	r1, r1, r9, r7
 8024d38:	fb03 2309 	mla	r3, r3, r9, r2
 8024d3c:	b29b      	uxth	r3, r3
 8024d3e:	b289      	uxth	r1, r1
 8024d40:	1c42      	adds	r2, r0, #1
 8024d42:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024d46:	1c4f      	adds	r7, r1, #1
 8024d48:	1c5a      	adds	r2, r3, #1
 8024d4a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024d4e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024d52:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024d56:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024d5a:	0949      	lsrs	r1, r1, #5
 8024d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024d5e:	4310      	orrs	r0, r2
 8024d60:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024d64:	4308      	orrs	r0, r1
 8024d66:	f823 0b02 	strh.w	r0, [r3], #2
 8024d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8024d6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024d6e:	449a      	add	sl, r3
 8024d70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024d72:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024d76:	441d      	add	r5, r3
 8024d78:	e6ed      	b.n	8024b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024d7a:	2800      	cmp	r0, #0
 8024d7c:	f43f af7f 	beq.w	8024c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d80:	5cd3      	ldrb	r3, [r2, r3]
 8024d82:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d86:	9310      	str	r3, [sp, #64]	; 0x40
 8024d88:	e779      	b.n	8024c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d8a:	b019      	add	sp, #100	; 0x64
 8024d8c:	ecbd 8b08 	vpop	{d8-d11}
 8024d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024d98:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8024d9c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024da0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024da4:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8024da8:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024dac:	8808      	ldrh	r0, [r1, #0]
 8024dae:	fb06 570e 	mla	r7, r6, lr, r5
 8024db2:	2e00      	cmp	r6, #0
 8024db4:	eb02 0807 	add.w	r8, r2, r7
 8024db8:	db38      	blt.n	8024e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024dba:	45b1      	cmp	r9, r6
 8024dbc:	dd36      	ble.n	8024e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024dbe:	2d00      	cmp	r5, #0
 8024dc0:	db32      	blt.n	8024e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024dc2:	45ae      	cmp	lr, r5
 8024dc4:	dd30      	ble.n	8024e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024dc6:	5dd2      	ldrb	r2, [r2, r7]
 8024dc8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024dcc:	1c6a      	adds	r2, r5, #1
 8024dce:	d430      	bmi.n	8024e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024dd0:	4596      	cmp	lr, r2
 8024dd2:	dd2e      	ble.n	8024e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024dd4:	b36c      	cbz	r4, 8024e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024dd6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024dda:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024dde:	3601      	adds	r6, #1
 8024de0:	d42b      	bmi.n	8024e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024de2:	45b1      	cmp	r9, r6
 8024de4:	dd29      	ble.n	8024e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024de6:	f1bc 0f00 	cmp.w	ip, #0
 8024dea:	d028      	beq.n	8024e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8024dec:	2d00      	cmp	r5, #0
 8024dee:	db22      	blt.n	8024e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024df0:	45ae      	cmp	lr, r5
 8024df2:	dd20      	ble.n	8024e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024df4:	f818 600e 	ldrb.w	r6, [r8, lr]
 8024df8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8024dfc:	3501      	adds	r5, #1
 8024dfe:	d407      	bmi.n	8024e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024e00:	45ae      	cmp	lr, r5
 8024e02:	dd05      	ble.n	8024e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024e04:	b134      	cbz	r4, 8024e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024e06:	44c6      	add	lr, r8
 8024e08:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024e0c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024e10:	2c0f      	cmp	r4, #15
 8024e12:	d802      	bhi.n	8024e1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024e14:	f1bc 0f0f 	cmp.w	ip, #15
 8024e18:	d914      	bls.n	8024e44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8024e1a:	4b26      	ldr	r3, [pc, #152]	; (8024eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8024e1c:	4a26      	ldr	r2, [pc, #152]	; (8024eb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8024e1e:	4827      	ldr	r0, [pc, #156]	; (8024ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8024e20:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024e24:	f009 f87c 	bl	802df20 <__assert_func>
 8024e28:	4607      	mov	r7, r0
 8024e2a:	e7cf      	b.n	8024dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8024e2c:	4602      	mov	r2, r0
 8024e2e:	4607      	mov	r7, r0
 8024e30:	e7d5      	b.n	8024dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8024e32:	4602      	mov	r2, r0
 8024e34:	e7d3      	b.n	8024dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8024e36:	4606      	mov	r6, r0
 8024e38:	e7e0      	b.n	8024dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8024e3a:	4606      	mov	r6, r0
 8024e3c:	e7e8      	b.n	8024e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024e3e:	2c0f      	cmp	r4, #15
 8024e40:	d8eb      	bhi.n	8024e1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024e42:	4606      	mov	r6, r0
 8024e44:	043d      	lsls	r5, r7, #16
 8024e46:	fb14 f30c 	smulbb	r3, r4, ip
 8024e4a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024e4e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024e52:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024e56:	10db      	asrs	r3, r3, #3
 8024e58:	432f      	orrs	r7, r5
 8024e5a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024e5e:	f1cc 0510 	rsb	r5, ip, #16
 8024e62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e66:	1b2d      	subs	r5, r5, r4
 8024e68:	ea4e 0202 	orr.w	r2, lr, r2
 8024e6c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024e70:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8024e74:	4354      	muls	r4, r2
 8024e76:	fb05 4507 	mla	r5, r5, r7, r4
 8024e7a:	0404      	lsls	r4, r0, #16
 8024e7c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024e80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024e84:	4320      	orrs	r0, r4
 8024e86:	fb03 5400 	mla	r4, r3, r0, r5
 8024e8a:	0430      	lsls	r0, r6, #16
 8024e8c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024e90:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024e94:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024e98:	4330      	orrs	r0, r6
 8024e9a:	fb03 4000 	mla	r0, r3, r0, r4
 8024e9e:	0d43      	lsrs	r3, r0, #21
 8024ea0:	0940      	lsrs	r0, r0, #5
 8024ea2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ea6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024eaa:	4318      	orrs	r0, r3
 8024eac:	8008      	strh	r0, [r1, #0]
 8024eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024eb2:	bf00      	nop
 8024eb4:	08032c55 	.word	0x08032c55
 8024eb8:	080332cb 	.word	0x080332cb
 8024ebc:	08032cd9 	.word	0x08032cd9

08024ec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ec4:	ed2d 8b0a 	vpush	{d8-d12}
 8024ec8:	b093      	sub	sp, #76	; 0x4c
 8024eca:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8024ece:	920f      	str	r2, [sp, #60]	; 0x3c
 8024ed0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024ed2:	9108      	str	r1, [sp, #32]
 8024ed4:	9306      	str	r3, [sp, #24]
 8024ed6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024eda:	9010      	str	r0, [sp, #64]	; 0x40
 8024edc:	6850      	ldr	r0, [r2, #4]
 8024ede:	6812      	ldr	r2, [r2, #0]
 8024ee0:	fb00 1303 	mla	r3, r0, r3, r1
 8024ee4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024ee8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024eea:	681b      	ldr	r3, [r3, #0]
 8024eec:	9307      	str	r3, [sp, #28]
 8024eee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ef0:	685f      	ldr	r7, [r3, #4]
 8024ef2:	eeb0 aa40 	vmov.f32	s20, s0
 8024ef6:	eef0 9a60 	vmov.f32	s19, s1
 8024efa:	eeb0 9a41 	vmov.f32	s18, s2
 8024efe:	eeb0 8a62 	vmov.f32	s16, s5
 8024f02:	eef0 8a43 	vmov.f32	s17, s6
 8024f06:	eeb0 ca44 	vmov.f32	s24, s8
 8024f0a:	eef0 ba64 	vmov.f32	s23, s9
 8024f0e:	eeb0 ba45 	vmov.f32	s22, s10
 8024f12:	3704      	adds	r7, #4
 8024f14:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024f18:	9b08      	ldr	r3, [sp, #32]
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	dc03      	bgt.n	8024f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	f340 81b2 	ble.w	802528a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024f26:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f2c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f30:	1e48      	subs	r0, r1, #1
 8024f32:	f102 3cff 	add.w	ip, r2, #4294967295
 8024f36:	9b06      	ldr	r3, [sp, #24]
 8024f38:	2b00      	cmp	r3, #0
 8024f3a:	f340 80a9 	ble.w	8025090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024f3e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024f42:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024f46:	d406      	bmi.n	8024f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024f48:	4586      	cmp	lr, r0
 8024f4a:	da04      	bge.n	8024f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	db02      	blt.n	8024f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024f50:	4563      	cmp	r3, ip
 8024f52:	f2c0 809e 	blt.w	8025092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024f56:	f11e 0e01 	adds.w	lr, lr, #1
 8024f5a:	f100 808f 	bmi.w	802507c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f5e:	4571      	cmp	r1, lr
 8024f60:	f2c0 808c 	blt.w	802507c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f64:	3301      	adds	r3, #1
 8024f66:	f100 8089 	bmi.w	802507c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f6a:	429a      	cmp	r2, r3
 8024f6c:	f2c0 8086 	blt.w	802507c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f70:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024f74:	46c8      	mov	r8, r9
 8024f76:	f1bb 0f00 	cmp.w	fp, #0
 8024f7a:	f340 80a6 	ble.w	80250ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024f7e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024f80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f82:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024f86:	689b      	ldr	r3, [r3, #8]
 8024f88:	1422      	asrs	r2, r4, #16
 8024f8a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024f8e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024f92:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024f96:	f100 80e3 	bmi.w	8025160 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024f9a:	f103 3aff 	add.w	sl, r3, #4294967295
 8024f9e:	4552      	cmp	r2, sl
 8024fa0:	f280 80de 	bge.w	8025160 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024fa4:	f1bc 0f00 	cmp.w	ip, #0
 8024fa8:	f2c0 80da 	blt.w	8025160 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024fac:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024fb0:	45d4      	cmp	ip, sl
 8024fb2:	f280 80d5 	bge.w	8025160 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024fb6:	b21b      	sxth	r3, r3
 8024fb8:	fb0c 2203 	mla	r2, ip, r3, r2
 8024fbc:	9d07      	ldr	r5, [sp, #28]
 8024fbe:	eb05 0a02 	add.w	sl, r5, r2
 8024fc2:	5caa      	ldrb	r2, [r5, r2]
 8024fc4:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024fc8:	2800      	cmp	r0, #0
 8024fca:	f000 80c0 	beq.w	802514e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8024fce:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024fd2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024fd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8024fd8:	b151      	cbz	r1, 8024ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024fda:	eb0a 0203 	add.w	r2, sl, r3
 8024fde:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024fe2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8024fe8:	7853      	ldrb	r3, [r2, #1]
 8024fea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024fee:	930c      	str	r3, [sp, #48]	; 0x30
 8024ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024ff4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024ff8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024ffc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025000:	ea4c 0c03 	orr.w	ip, ip, r3
 8025004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025006:	041b      	lsls	r3, r3, #16
 8025008:	fb10 f201 	smulbb	r2, r0, r1
 802500c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025010:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025014:	10d2      	asrs	r2, r2, #3
 8025016:	432b      	orrs	r3, r5
 8025018:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802501c:	4353      	muls	r3, r2
 802501e:	fb0a 330c 	mla	r3, sl, ip, r3
 8025022:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025026:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802502a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802502e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025032:	f1c1 0c10 	rsb	ip, r1, #16
 8025036:	ebac 0c00 	sub.w	ip, ip, r0
 802503a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802503e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025044:	0418      	lsls	r0, r3, #16
 8025046:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802504a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802504e:	4318      	orrs	r0, r3
 8025050:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025054:	fb02 c200 	mla	r2, r2, r0, ip
 8025058:	0d53      	lsrs	r3, r2, #21
 802505a:	0952      	lsrs	r2, r2, #5
 802505c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025060:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025064:	431a      	orrs	r2, r3
 8025066:	f8a8 2000 	strh.w	r2, [r8]
 802506a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802506c:	441c      	add	r4, r3
 802506e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025070:	f108 0802 	add.w	r8, r8, #2
 8025074:	441e      	add	r6, r3
 8025076:	f10b 3bff 	add.w	fp, fp, #4294967295
 802507a:	e77c      	b.n	8024f76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802507c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802507e:	441c      	add	r4, r3
 8025080:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025082:	441e      	add	r6, r3
 8025084:	9b06      	ldr	r3, [sp, #24]
 8025086:	3b01      	subs	r3, #1
 8025088:	9306      	str	r3, [sp, #24]
 802508a:	f109 0902 	add.w	r9, r9, #2
 802508e:	e752      	b.n	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025090:	d020      	beq.n	80250d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025092:	9b06      	ldr	r3, [sp, #24]
 8025094:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025096:	3b01      	subs	r3, #1
 8025098:	fb00 4003 	mla	r0, r0, r3, r4
 802509c:	1400      	asrs	r0, r0, #16
 802509e:	f53f af67 	bmi.w	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80250a2:	3901      	subs	r1, #1
 80250a4:	4288      	cmp	r0, r1
 80250a6:	f6bf af63 	bge.w	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80250aa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80250ac:	fb01 6303 	mla	r3, r1, r3, r6
 80250b0:	141b      	asrs	r3, r3, #16
 80250b2:	f53f af5d 	bmi.w	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80250b6:	3a01      	subs	r2, #1
 80250b8:	4293      	cmp	r3, r2
 80250ba:	f6bf af59 	bge.w	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80250be:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80250c2:	46ca      	mov	sl, r9
 80250c4:	f1b8 0f00 	cmp.w	r8, #0
 80250c8:	dc67      	bgt.n	802519a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80250ca:	9b06      	ldr	r3, [sp, #24]
 80250cc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80250d0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80250d4:	9b08      	ldr	r3, [sp, #32]
 80250d6:	2b00      	cmp	r3, #0
 80250d8:	f340 80d7 	ble.w	802528a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80250dc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80250e0:	ee79 9aab 	vadd.f32	s19, s19, s23
 80250e4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80250e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80250ea:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80250ee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80250f2:	eef0 6a48 	vmov.f32	s13, s16
 80250f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80250fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025102:	ee16 4a90 	vmov	r4, s13
 8025106:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802510a:	eef0 6a68 	vmov.f32	s13, s17
 802510e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025112:	ee18 2a10 	vmov	r2, s16
 8025116:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802511a:	fb92 f3f3 	sdiv	r3, r2, r3
 802511e:	ee18 2a90 	vmov	r2, s17
 8025122:	9329      	str	r3, [sp, #164]	; 0xa4
 8025124:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025126:	fb92 f3f3 	sdiv	r3, r2, r3
 802512a:	932a      	str	r3, [sp, #168]	; 0xa8
 802512c:	9b08      	ldr	r3, [sp, #32]
 802512e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025130:	3b01      	subs	r3, #1
 8025132:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025136:	9308      	str	r3, [sp, #32]
 8025138:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802513a:	bf08      	it	eq
 802513c:	4613      	moveq	r3, r2
 802513e:	ee16 6a90 	vmov	r6, s13
 8025142:	9306      	str	r3, [sp, #24]
 8025144:	eef0 8a67 	vmov.f32	s17, s15
 8025148:	eeb0 8a47 	vmov.f32	s16, s14
 802514c:	e6e4      	b.n	8024f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802514e:	2900      	cmp	r1, #0
 8025150:	f43f af4e 	beq.w	8024ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025154:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025158:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802515c:	9309      	str	r3, [sp, #36]	; 0x24
 802515e:	e747      	b.n	8024ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025160:	f112 0a01 	adds.w	sl, r2, #1
 8025164:	d481      	bmi.n	802506a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025166:	4553      	cmp	r3, sl
 8025168:	f6ff af7f 	blt.w	802506a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802516c:	f11c 0a01 	adds.w	sl, ip, #1
 8025170:	f53f af7b 	bmi.w	802506a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025174:	45d6      	cmp	lr, sl
 8025176:	f6ff af78 	blt.w	802506a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802517a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802517e:	b21b      	sxth	r3, r3
 8025180:	fa0f f28e 	sxth.w	r2, lr
 8025184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025188:	9201      	str	r2, [sp, #4]
 802518a:	9300      	str	r3, [sp, #0]
 802518c:	9a07      	ldr	r2, [sp, #28]
 802518e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025190:	463b      	mov	r3, r7
 8025192:	4641      	mov	r1, r8
 8025194:	f7ff fdfe 	bl	8024d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025198:	e767      	b.n	802506a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802519a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802519c:	9d07      	ldr	r5, [sp, #28]
 802519e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80251a2:	1422      	asrs	r2, r4, #16
 80251a4:	1431      	asrs	r1, r6, #16
 80251a6:	fb03 2101 	mla	r1, r3, r1, r2
 80251aa:	9a07      	ldr	r2, [sp, #28]
 80251ac:	440a      	add	r2, r1
 80251ae:	5c69      	ldrb	r1, [r5, r1]
 80251b0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80251b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80251b8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80251bc:	f1be 0f00 	cmp.w	lr, #0
 80251c0:	d05c      	beq.n	802527c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80251c2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80251c6:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80251ca:	950d      	str	r5, [sp, #52]	; 0x34
 80251cc:	b150      	cbz	r0, 80251e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80251ce:	eb02 0c03 	add.w	ip, r2, r3
 80251d2:	5cd3      	ldrb	r3, [r2, r3]
 80251d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80251d8:	930a      	str	r3, [sp, #40]	; 0x28
 80251da:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80251de:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80251e2:	930e      	str	r3, [sp, #56]	; 0x38
 80251e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80251e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80251e8:	fb1e f200 	smulbb	r2, lr, r0
 80251ec:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80251f0:	10d2      	asrs	r2, r2, #3
 80251f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80251f6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80251fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80251fe:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8025202:	9311      	str	r3, [sp, #68]	; 0x44
 8025204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025206:	041b      	lsls	r3, r3, #16
 8025208:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802520c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025210:	ea43 030b 	orr.w	r3, r3, fp
 8025214:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025216:	4353      	muls	r3, r2
 8025218:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802521c:	fb05 3c0c 	mla	ip, r5, ip, r3
 8025220:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025224:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8025228:	ea43 0b01 	orr.w	fp, r3, r1
 802522c:	f1c0 0110 	rsb	r1, r0, #16
 8025230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025232:	eba1 0e0e 	sub.w	lr, r1, lr
 8025236:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802523a:	fb0e cc0b 	mla	ip, lr, fp, ip
 802523e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8025242:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8025246:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802524a:	ea4b 0e0e 	orr.w	lr, fp, lr
 802524e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025252:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025256:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802525a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802525e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025262:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025266:	ea43 0c0c 	orr.w	ip, r3, ip
 802526a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802526c:	f82a cb02 	strh.w	ip, [sl], #2
 8025270:	441c      	add	r4, r3
 8025272:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025274:	f108 38ff 	add.w	r8, r8, #4294967295
 8025278:	441e      	add	r6, r3
 802527a:	e723      	b.n	80250c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802527c:	2800      	cmp	r0, #0
 802527e:	d0b1      	beq.n	80251e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8025280:	5cd3      	ldrb	r3, [r2, r3]
 8025282:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025286:	930a      	str	r3, [sp, #40]	; 0x28
 8025288:	e7ac      	b.n	80251e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802528a:	b013      	add	sp, #76	; 0x4c
 802528c:	ecbd 8b0a 	vpop	{d8-d12}
 8025290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8025294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025298:	468b      	mov	fp, r1
 802529a:	8809      	ldrh	r1, [r1, #0]
 802529c:	b089      	sub	sp, #36	; 0x24
 802529e:	10cd      	asrs	r5, r1, #3
 80252a0:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80252a4:	ea4f 2921 	mov.w	r9, r1, asr #8
 80252a8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80252ac:	00c9      	lsls	r1, r1, #3
 80252ae:	9500      	str	r5, [sp, #0]
 80252b0:	b2c9      	uxtb	r1, r1
 80252b2:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80252b6:	9101      	str	r1, [sp, #4]
 80252b8:	9900      	ldr	r1, [sp, #0]
 80252ba:	9202      	str	r2, [sp, #8]
 80252bc:	fb04 650e 	mla	r5, r4, lr, r6
 80252c0:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80252c4:	eb02 0805 	add.w	r8, r2, r5
 80252c8:	0209      	lsls	r1, r1, #8
 80252ca:	9a01      	ldr	r2, [sp, #4]
 80252cc:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80252d0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80252d4:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80252d8:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80252dc:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80252e0:	4311      	orrs	r1, r2
 80252e2:	2c00      	cmp	r4, #0
 80252e4:	9107      	str	r1, [sp, #28]
 80252e6:	db43      	blt.n	8025370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 80252e8:	45a2      	cmp	sl, r4
 80252ea:	dd41      	ble.n	8025370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 80252ec:	2e00      	cmp	r6, #0
 80252ee:	db3d      	blt.n	802536c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 80252f0:	45b6      	cmp	lr, r6
 80252f2:	dd3b      	ble.n	802536c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 80252f4:	9a02      	ldr	r2, [sp, #8]
 80252f6:	5d55      	ldrb	r5, [r2, r5]
 80252f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80252fc:	441d      	add	r5, r3
 80252fe:	1c72      	adds	r2, r6, #1
 8025300:	d439      	bmi.n	8025376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8025302:	4596      	cmp	lr, r2
 8025304:	dd37      	ble.n	8025376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8025306:	2f00      	cmp	r7, #0
 8025308:	d035      	beq.n	8025376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 802530a:	f898 1001 	ldrb.w	r1, [r8, #1]
 802530e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025312:	4419      	add	r1, r3
 8025314:	3401      	adds	r4, #1
 8025316:	d432      	bmi.n	802537e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8025318:	45a2      	cmp	sl, r4
 802531a:	dd30      	ble.n	802537e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 802531c:	b378      	cbz	r0, 802537e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 802531e:	2e00      	cmp	r6, #0
 8025320:	db2b      	blt.n	802537a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8025322:	45b6      	cmp	lr, r6
 8025324:	dd29      	ble.n	802537a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8025326:	f818 400e 	ldrb.w	r4, [r8, lr]
 802532a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802532e:	441c      	add	r4, r3
 8025330:	3601      	adds	r6, #1
 8025332:	d427      	bmi.n	8025384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8025334:	45b6      	cmp	lr, r6
 8025336:	dd25      	ble.n	8025384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8025338:	b327      	cbz	r7, 8025384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 802533a:	44c6      	add	lr, r8
 802533c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025340:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025344:	4413      	add	r3, r2
 8025346:	782a      	ldrb	r2, [r5, #0]
 8025348:	9202      	str	r2, [sp, #8]
 802534a:	780a      	ldrb	r2, [r1, #0]
 802534c:	9203      	str	r2, [sp, #12]
 802534e:	7822      	ldrb	r2, [r4, #0]
 8025350:	9204      	str	r2, [sp, #16]
 8025352:	2f0f      	cmp	r7, #15
 8025354:	781a      	ldrb	r2, [r3, #0]
 8025356:	9205      	str	r2, [sp, #20]
 8025358:	d801      	bhi.n	802535e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 802535a:	280f      	cmp	r0, #15
 802535c:	d914      	bls.n	8025388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 802535e:	4b3f      	ldr	r3, [pc, #252]	; (802545c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8025360:	4a3f      	ldr	r2, [pc, #252]	; (8025460 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8025362:	4840      	ldr	r0, [pc, #256]	; (8025464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8025364:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025368:	f008 fdda 	bl	802df20 <__assert_func>
 802536c:	ad07      	add	r5, sp, #28
 802536e:	e7c6      	b.n	80252fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8025370:	a907      	add	r1, sp, #28
 8025372:	460d      	mov	r5, r1
 8025374:	e7ce      	b.n	8025314 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8025376:	a907      	add	r1, sp, #28
 8025378:	e7cc      	b.n	8025314 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 802537a:	ac07      	add	r4, sp, #28
 802537c:	e7d8      	b.n	8025330 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 802537e:	ab07      	add	r3, sp, #28
 8025380:	461c      	mov	r4, r3
 8025382:	e7e0      	b.n	8025346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8025384:	ab07      	add	r3, sp, #28
 8025386:	e7de      	b.n	8025346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8025388:	b2ba      	uxth	r2, r7
 802538a:	b280      	uxth	r0, r0
 802538c:	fb02 fa00 	mul.w	sl, r2, r0
 8025390:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025394:	0112      	lsls	r2, r2, #4
 8025396:	b280      	uxth	r0, r0
 8025398:	f891 8002 	ldrb.w	r8, [r1, #2]
 802539c:	7849      	ldrb	r1, [r1, #1]
 802539e:	78ae      	ldrb	r6, [r5, #2]
 80253a0:	786d      	ldrb	r5, [r5, #1]
 80253a2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80253a6:	eba2 020a 	sub.w	r2, r2, sl
 80253aa:	b292      	uxth	r2, r2
 80253ac:	ebae 0e00 	sub.w	lr, lr, r0
 80253b0:	fa1f fe8e 	uxth.w	lr, lr
 80253b4:	4351      	muls	r1, r2
 80253b6:	fb02 f808 	mul.w	r8, r2, r8
 80253ba:	fb0e 8806 	mla	r8, lr, r6, r8
 80253be:	fb0e 1505 	mla	r5, lr, r5, r1
 80253c2:	78a6      	ldrb	r6, [r4, #2]
 80253c4:	7861      	ldrb	r1, [r4, #1]
 80253c6:	fa1f f78c 	uxth.w	r7, ip
 80253ca:	fb00 8806 	mla	r8, r0, r6, r8
 80253ce:	fb00 5501 	mla	r5, r0, r1, r5
 80253d2:	789e      	ldrb	r6, [r3, #2]
 80253d4:	7859      	ldrb	r1, [r3, #1]
 80253d6:	9b00      	ldr	r3, [sp, #0]
 80253d8:	ea6f 0c0c 	mvn.w	ip, ip
 80253dc:	fa5f fc8c 	uxtb.w	ip, ip
 80253e0:	fb0a 5101 	mla	r1, sl, r1, r5
 80253e4:	fb13 f50c 	smulbb	r5, r3, ip
 80253e8:	9b03      	ldr	r3, [sp, #12]
 80253ea:	435a      	muls	r2, r3
 80253ec:	9b02      	ldr	r3, [sp, #8]
 80253ee:	fb0e 2203 	mla	r2, lr, r3, r2
 80253f2:	9b04      	ldr	r3, [sp, #16]
 80253f4:	fb00 2003 	mla	r0, r0, r3, r2
 80253f8:	9b05      	ldr	r3, [sp, #20]
 80253fa:	fb0a 8606 	mla	r6, sl, r6, r8
 80253fe:	fb19 f90c 	smulbb	r9, r9, ip
 8025402:	fb0a 0a03 	mla	sl, sl, r3, r0
 8025406:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802540a:	9b01      	ldr	r3, [sp, #4]
 802540c:	fb06 9607 	mla	r6, r6, r7, r9
 8025410:	b2b6      	uxth	r6, r6
 8025412:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8025416:	fb13 fc0c 	smulbb	ip, r3, ip
 802541a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802541e:	fb01 5107 	mla	r1, r1, r7, r5
 8025422:	f106 0901 	add.w	r9, r6, #1
 8025426:	fb0a c707 	mla	r7, sl, r7, ip
 802542a:	b2bf      	uxth	r7, r7
 802542c:	b289      	uxth	r1, r1
 802542e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8025432:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8025436:	1c4d      	adds	r5, r1, #1
 8025438:	1c7e      	adds	r6, r7, #1
 802543a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802543e:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8025442:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8025446:	0949      	lsrs	r1, r1, #5
 8025448:	ea46 0609 	orr.w	r6, r6, r9
 802544c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025450:	430e      	orrs	r6, r1
 8025452:	f8ab 6000 	strh.w	r6, [fp]
 8025456:	b009      	add	sp, #36	; 0x24
 8025458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802545c:	08032c55 	.word	0x08032c55
 8025460:	08033222 	.word	0x08033222
 8025464:	08032cd9 	.word	0x08032cd9

08025468 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802546c:	ed2d 8b08 	vpush	{d8-d11}
 8025470:	b095      	sub	sp, #84	; 0x54
 8025472:	eeb0 aa40 	vmov.f32	s20, s0
 8025476:	9212      	str	r2, [sp, #72]	; 0x48
 8025478:	9309      	str	r3, [sp, #36]	; 0x24
 802547a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802547c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8025480:	930f      	str	r3, [sp, #60]	; 0x3c
 8025482:	910e      	str	r1, [sp, #56]	; 0x38
 8025484:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8025488:	9013      	str	r0, [sp, #76]	; 0x4c
 802548a:	6850      	ldr	r0, [r2, #4]
 802548c:	6812      	ldr	r2, [r2, #0]
 802548e:	fb00 1303 	mla	r3, r0, r3, r1
 8025492:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025496:	930a      	str	r3, [sp, #40]	; 0x28
 8025498:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802549a:	681b      	ldr	r3, [r3, #0]
 802549c:	930d      	str	r3, [sp, #52]	; 0x34
 802549e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80254a0:	685c      	ldr	r4, [r3, #4]
 80254a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80254a4:	43db      	mvns	r3, r3
 80254a6:	b2db      	uxtb	r3, r3
 80254a8:	eef0 9a60 	vmov.f32	s19, s1
 80254ac:	eeb0 9a41 	vmov.f32	s18, s2
 80254b0:	eeb0 8a62 	vmov.f32	s16, s5
 80254b4:	eef0 8a43 	vmov.f32	s17, s6
 80254b8:	eef0 ba44 	vmov.f32	s23, s8
 80254bc:	eeb0 ba64 	vmov.f32	s22, s9
 80254c0:	eef0 aa45 	vmov.f32	s21, s10
 80254c4:	3404      	adds	r4, #4
 80254c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80254c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	dc03      	bgt.n	80254d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80254ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80254d0:	2b00      	cmp	r3, #0
 80254d2:	f340 8255 	ble.w	8025980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80254d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80254d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254e0:	1e48      	subs	r0, r1, #1
 80254e2:	1e55      	subs	r5, r2, #1
 80254e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	f340 80f9 	ble.w	80256de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80254ec:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80254ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80254f0:	1436      	asrs	r6, r6, #16
 80254f2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80254f6:	d406      	bmi.n	8025506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80254f8:	4286      	cmp	r6, r0
 80254fa:	da04      	bge.n	8025506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80254fc:	2b00      	cmp	r3, #0
 80254fe:	db02      	blt.n	8025506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025500:	42ab      	cmp	r3, r5
 8025502:	f2c0 80ed 	blt.w	80256e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8025506:	3601      	adds	r6, #1
 8025508:	f100 80da 	bmi.w	80256c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802550c:	42b1      	cmp	r1, r6
 802550e:	f2c0 80d7 	blt.w	80256c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025512:	3301      	adds	r3, #1
 8025514:	f100 80d4 	bmi.w	80256c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025518:	429a      	cmp	r2, r3
 802551a:	f2c0 80d1 	blt.w	80256c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802551e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025520:	9311      	str	r3, [sp, #68]	; 0x44
 8025522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025524:	930c      	str	r3, [sp, #48]	; 0x30
 8025526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025528:	2b00      	cmp	r3, #0
 802552a:	f340 80fa 	ble.w	8025722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802552e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8025530:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025532:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025534:	68c6      	ldr	r6, [r0, #12]
 8025536:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025538:	141d      	asrs	r5, r3, #16
 802553a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802553e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025540:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025542:	1400      	asrs	r0, r0, #16
 8025544:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025548:	6892      	ldr	r2, [r2, #8]
 802554a:	f100 813e 	bmi.w	80257ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802554e:	1e57      	subs	r7, r2, #1
 8025550:	42b8      	cmp	r0, r7
 8025552:	f280 813a 	bge.w	80257ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025556:	2d00      	cmp	r5, #0
 8025558:	f2c0 8137 	blt.w	80257ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802555c:	1e77      	subs	r7, r6, #1
 802555e:	42bd      	cmp	r5, r7
 8025560:	f280 8133 	bge.w	80257ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025564:	b212      	sxth	r2, r2
 8025566:	fb05 0002 	mla	r0, r5, r2, r0
 802556a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802556c:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025570:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025574:	182e      	adds	r6, r5, r0
 8025576:	eb04 050a 	add.w	r5, r4, sl
 802557a:	2b00      	cmp	r3, #0
 802557c:	f000 8117 	beq.w	80257ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8025580:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025584:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025588:	44a4      	add	ip, r4
 802558a:	2900      	cmp	r1, #0
 802558c:	f000 8117 	beq.w	80257be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025590:	18b0      	adds	r0, r6, r2
 8025592:	5cb2      	ldrb	r2, [r6, r2]
 8025594:	7840      	ldrb	r0, [r0, #1]
 8025596:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802559a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802559e:	4422      	add	r2, r4
 80255a0:	4420      	add	r0, r4
 80255a2:	b29b      	uxth	r3, r3
 80255a4:	b289      	uxth	r1, r1
 80255a6:	fb03 f901 	mul.w	r9, r3, r1
 80255aa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80255ae:	011b      	lsls	r3, r3, #4
 80255b0:	b289      	uxth	r1, r1
 80255b2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80255b6:	f895 b002 	ldrb.w	fp, [r5, #2]
 80255ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80255bc:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80255c0:	f8b6 e000 	ldrh.w	lr, [r6]
 80255c4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80255c8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80255cc:	eba3 0309 	sub.w	r3, r3, r9
 80255d0:	b29b      	uxth	r3, r3
 80255d2:	eba8 0801 	sub.w	r8, r8, r1
 80255d6:	fa1f f888 	uxth.w	r8, r8
 80255da:	435f      	muls	r7, r3
 80255dc:	fb08 770b 	mla	r7, r8, fp, r7
 80255e0:	f892 b002 	ldrb.w	fp, [r2, #2]
 80255e4:	9310      	str	r3, [sp, #64]	; 0x40
 80255e6:	fb01 770b 	mla	r7, r1, fp, r7
 80255ea:	f890 b002 	ldrb.w	fp, [r0, #2]
 80255ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80255f0:	fb09 770b 	mla	r7, r9, fp, r7
 80255f4:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80255f8:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80255fc:	fb1b fb03 	smulbb	fp, fp, r3
 8025600:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025604:	fb07 b706 	mla	r7, r7, r6, fp
 8025608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802560a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802560e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025612:	f89c c000 	ldrb.w	ip, [ip]
 8025616:	435d      	muls	r5, r3
 8025618:	fb08 550b 	mla	r5, r8, fp, r5
 802561c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025622:	fb01 550b 	mla	r5, r1, fp, r5
 8025626:	f890 b001 	ldrb.w	fp, [r0, #1]
 802562a:	fb09 550b 	mla	r5, r9, fp, r5
 802562e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025632:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025636:	fb1b fb03 	smulbb	fp, fp, r3
 802563a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802563c:	fb03 f30c 	mul.w	r3, r3, ip
 8025640:	f892 c000 	ldrb.w	ip, [r2]
 8025644:	fb08 330a 	mla	r3, r8, sl, r3
 8025648:	fb01 330c 	mla	r3, r1, ip, r3
 802564c:	f890 c000 	ldrb.w	ip, [r0]
 8025650:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025654:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802565a:	fa5f fe8e 	uxtb.w	lr, lr
 802565e:	b2bf      	uxth	r7, r7
 8025660:	fb1e fe03 	smulbb	lr, lr, r3
 8025664:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025668:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802566c:	fb05 b506 	mla	r5, r5, r6, fp
 8025670:	1c7b      	adds	r3, r7, #1
 8025672:	fb0c e606 	mla	r6, ip, r6, lr
 8025676:	b2ad      	uxth	r5, r5
 8025678:	b2b6      	uxth	r6, r6
 802567a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802567e:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8025682:	f105 0b01 	add.w	fp, r5, #1
 8025686:	1c77      	adds	r7, r6, #1
 8025688:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802568c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025690:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025694:	096d      	lsrs	r5, r5, #5
 8025696:	431f      	orrs	r7, r3
 8025698:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802569c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802569e:	433d      	orrs	r5, r7
 80256a0:	801d      	strh	r5, [r3, #0]
 80256a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80256a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80256a6:	3302      	adds	r3, #2
 80256a8:	930c      	str	r3, [sp, #48]	; 0x30
 80256aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80256ac:	4413      	add	r3, r2
 80256ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80256b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80256b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256b4:	4413      	add	r3, r2
 80256b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80256b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80256ba:	3b01      	subs	r3, #1
 80256bc:	9311      	str	r3, [sp, #68]	; 0x44
 80256be:	e732      	b.n	8025526 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80256c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80256c2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80256c4:	4433      	add	r3, r6
 80256c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80256c8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80256ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256cc:	4433      	add	r3, r6
 80256ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80256d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256d2:	3b01      	subs	r3, #1
 80256d4:	9309      	str	r3, [sp, #36]	; 0x24
 80256d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256d8:	3302      	adds	r3, #2
 80256da:	930a      	str	r3, [sp, #40]	; 0x28
 80256dc:	e702      	b.n	80254e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80256de:	d027      	beq.n	8025730 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80256e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256e2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80256e4:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80256e6:	3b01      	subs	r3, #1
 80256e8:	fb00 5003 	mla	r0, r0, r3, r5
 80256ec:	1400      	asrs	r0, r0, #16
 80256ee:	f53f af16 	bmi.w	802551e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80256f2:	3901      	subs	r1, #1
 80256f4:	4288      	cmp	r0, r1
 80256f6:	f6bf af12 	bge.w	802551e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80256fa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80256fc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80256fe:	fb01 0303 	mla	r3, r1, r3, r0
 8025702:	141b      	asrs	r3, r3, #16
 8025704:	f53f af0b 	bmi.w	802551e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025708:	3a01      	subs	r2, #1
 802570a:	4293      	cmp	r3, r2
 802570c:	f6bf af07 	bge.w	802551e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025712:	9311      	str	r3, [sp, #68]	; 0x44
 8025714:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8025718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802571a:	930c      	str	r3, [sp, #48]	; 0x30
 802571c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802571e:	2b00      	cmp	r3, #0
 8025720:	dc70      	bgt.n	8025804 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802572a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802572e:	930a      	str	r3, [sp, #40]	; 0x28
 8025730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025732:	2b00      	cmp	r3, #0
 8025734:	f340 8124 	ble.w	8025980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025738:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802573c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025740:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025744:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025746:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802574a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802574e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025752:	eef0 6a48 	vmov.f32	s13, s16
 8025756:	ee69 7a27 	vmul.f32	s15, s18, s15
 802575a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802575e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025762:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8025766:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802576a:	eef0 6a68 	vmov.f32	s13, s17
 802576e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025772:	ee18 2a10 	vmov	r2, s16
 8025776:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802577a:	fb92 f3f3 	sdiv	r3, r2, r3
 802577e:	ee18 2a90 	vmov	r2, s17
 8025782:	9329      	str	r3, [sp, #164]	; 0xa4
 8025784:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025786:	fb92 f3f3 	sdiv	r3, r2, r3
 802578a:	932a      	str	r3, [sp, #168]	; 0xa8
 802578c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802578e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025790:	3b01      	subs	r3, #1
 8025792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025796:	930e      	str	r3, [sp, #56]	; 0x38
 8025798:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802579a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802579e:	bf08      	it	eq
 80257a0:	4613      	moveq	r3, r2
 80257a2:	9309      	str	r3, [sp, #36]	; 0x24
 80257a4:	eef0 8a67 	vmov.f32	s17, s15
 80257a8:	eeb0 8a47 	vmov.f32	s16, s14
 80257ac:	e68c      	b.n	80254c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80257ae:	b149      	cbz	r1, 80257c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80257b0:	5cb2      	ldrb	r2, [r6, r2]
 80257b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80257b6:	4422      	add	r2, r4
 80257b8:	4628      	mov	r0, r5
 80257ba:	46ac      	mov	ip, r5
 80257bc:	e6f1      	b.n	80255a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80257be:	4628      	mov	r0, r5
 80257c0:	462a      	mov	r2, r5
 80257c2:	e6ee      	b.n	80255a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80257c4:	4628      	mov	r0, r5
 80257c6:	462a      	mov	r2, r5
 80257c8:	e7f7      	b.n	80257ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80257ca:	1c47      	adds	r7, r0, #1
 80257cc:	f53f af69 	bmi.w	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257d0:	42ba      	cmp	r2, r7
 80257d2:	f6ff af66 	blt.w	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257d6:	1c6f      	adds	r7, r5, #1
 80257d8:	f53f af63 	bmi.w	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257dc:	42be      	cmp	r6, r7
 80257de:	f6ff af60 	blt.w	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257e2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80257e4:	9002      	str	r0, [sp, #8]
 80257e6:	b236      	sxth	r6, r6
 80257e8:	b212      	sxth	r2, r2
 80257ea:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80257ee:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80257f2:	9200      	str	r2, [sp, #0]
 80257f4:	9601      	str	r6, [sp, #4]
 80257f6:	4623      	mov	r3, r4
 80257f8:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80257fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80257fe:	f7ff fd49 	bl	8025294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025802:	e74e      	b.n	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025804:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025806:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025808:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802580a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802580c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025810:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025812:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025816:	142d      	asrs	r5, r5, #16
 8025818:	1400      	asrs	r0, r0, #16
 802581a:	fb02 5000 	mla	r0, r2, r0, r5
 802581e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025820:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025824:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025828:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802582c:	182e      	adds	r6, r5, r0
 802582e:	eb04 0509 	add.w	r5, r4, r9
 8025832:	2b00      	cmp	r3, #0
 8025834:	f000 8096 	beq.w	8025964 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8025838:	7877      	ldrb	r7, [r6, #1]
 802583a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802583e:	4427      	add	r7, r4
 8025840:	2900      	cmp	r1, #0
 8025842:	f000 8097 	beq.w	8025974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025846:	18b0      	adds	r0, r6, r2
 8025848:	5cb2      	ldrb	r2, [r6, r2]
 802584a:	7840      	ldrb	r0, [r0, #1]
 802584c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025850:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025854:	4422      	add	r2, r4
 8025856:	4420      	add	r0, r4
 8025858:	b29b      	uxth	r3, r3
 802585a:	b289      	uxth	r1, r1
 802585c:	fb03 f801 	mul.w	r8, r3, r1
 8025860:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025862:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025866:	f8b6 c000 	ldrh.w	ip, [r6]
 802586a:	78be      	ldrb	r6, [r7, #2]
 802586c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025870:	011b      	lsls	r3, r3, #4
 8025872:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025876:	b289      	uxth	r1, r1
 8025878:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802587c:	eba3 0308 	sub.w	r3, r3, r8
 8025880:	b29b      	uxth	r3, r3
 8025882:	ebae 0e01 	sub.w	lr, lr, r1
 8025886:	fa1f fe8e 	uxth.w	lr, lr
 802588a:	435e      	muls	r6, r3
 802588c:	fb0e 660b 	mla	r6, lr, fp, r6
 8025890:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025894:	9310      	str	r3, [sp, #64]	; 0x40
 8025896:	fb01 660b 	mla	r6, r1, fp, r6
 802589a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802589e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258a0:	fb08 660b 	mla	r6, r8, fp, r6
 80258a4:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80258a8:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80258ac:	fb1b fb03 	smulbb	fp, fp, r3
 80258b0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80258b4:	fb06 b60a 	mla	r6, r6, sl, fp
 80258b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80258ba:	f895 b001 	ldrb.w	fp, [r5, #1]
 80258be:	787d      	ldrb	r5, [r7, #1]
 80258c0:	783f      	ldrb	r7, [r7, #0]
 80258c2:	435d      	muls	r5, r3
 80258c4:	fb0e 550b 	mla	r5, lr, fp, r5
 80258c8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80258cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258ce:	fb01 550b 	mla	r5, r1, fp, r5
 80258d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80258d6:	fb08 550b 	mla	r5, r8, fp, r5
 80258da:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80258de:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80258e2:	fb1b fb03 	smulbb	fp, fp, r3
 80258e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80258e8:	437b      	muls	r3, r7
 80258ea:	7817      	ldrb	r7, [r2, #0]
 80258ec:	fb0e 3309 	mla	r3, lr, r9, r3
 80258f0:	fb01 3307 	mla	r3, r1, r7, r3
 80258f4:	7807      	ldrb	r7, [r0, #0]
 80258f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80258fa:	fb08 3707 	mla	r7, r8, r7, r3
 80258fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025900:	fa5f fc8c 	uxtb.w	ip, ip
 8025904:	fb1c fc03 	smulbb	ip, ip, r3
 8025908:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802590c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025910:	fb05 b50a 	mla	r5, r5, sl, fp
 8025914:	fb07 c70a 	mla	r7, r7, sl, ip
 8025918:	b2b6      	uxth	r6, r6
 802591a:	b2ad      	uxth	r5, r5
 802591c:	b2bf      	uxth	r7, r7
 802591e:	1c73      	adds	r3, r6, #1
 8025920:	1c7a      	adds	r2, r7, #1
 8025922:	f105 0b01 	add.w	fp, r5, #1
 8025926:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802592a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802592e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025932:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025936:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802593a:	096d      	lsrs	r5, r5, #5
 802593c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802593e:	4316      	orrs	r6, r2
 8025940:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025944:	432e      	orrs	r6, r5
 8025946:	f823 6b02 	strh.w	r6, [r3], #2
 802594a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802594c:	930c      	str	r3, [sp, #48]	; 0x30
 802594e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025950:	4413      	add	r3, r2
 8025952:	9327      	str	r3, [sp, #156]	; 0x9c
 8025954:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025956:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025958:	4413      	add	r3, r2
 802595a:	9328      	str	r3, [sp, #160]	; 0xa0
 802595c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802595e:	3b01      	subs	r3, #1
 8025960:	9311      	str	r3, [sp, #68]	; 0x44
 8025962:	e6db      	b.n	802571c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025964:	b149      	cbz	r1, 802597a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025966:	5cb2      	ldrb	r2, [r6, r2]
 8025968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802596c:	4422      	add	r2, r4
 802596e:	4628      	mov	r0, r5
 8025970:	462f      	mov	r7, r5
 8025972:	e771      	b.n	8025858 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025974:	4628      	mov	r0, r5
 8025976:	462a      	mov	r2, r5
 8025978:	e76e      	b.n	8025858 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802597a:	4628      	mov	r0, r5
 802597c:	462a      	mov	r2, r5
 802597e:	e7f7      	b.n	8025970 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8025980:	b015      	add	sp, #84	; 0x54
 8025982:	ecbd 8b08 	vpop	{d8-d11}
 8025986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802598c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025990:	880e      	ldrh	r6, [r1, #0]
 8025992:	b085      	sub	sp, #20
 8025994:	0230      	lsls	r0, r6, #8
 8025996:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802599a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 802599e:	0170      	lsls	r0, r6, #5
 80259a0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80259a4:	9101      	str	r1, [sp, #4]
 80259a6:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80259aa:	00f6      	lsls	r6, r6, #3
 80259ac:	ea4b 0000 	orr.w	r0, fp, r0
 80259b0:	b2f6      	uxtb	r6, r6
 80259b2:	4691      	mov	r9, r2
 80259b4:	fb05 7a0c 	mla	sl, r5, ip, r7
 80259b8:	4306      	orrs	r6, r0
 80259ba:	2d00      	cmp	r5, #0
 80259bc:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80259c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80259c4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80259c8:	9603      	str	r6, [sp, #12]
 80259ca:	eb09 0e0a 	add.w	lr, r9, sl
 80259ce:	db42      	blt.n	8025a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80259d0:	45a8      	cmp	r8, r5
 80259d2:	dd40      	ble.n	8025a56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80259d4:	2f00      	cmp	r7, #0
 80259d6:	db3c      	blt.n	8025a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80259d8:	45bc      	cmp	ip, r7
 80259da:	dd3a      	ble.n	8025a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80259dc:	f819 600a 	ldrb.w	r6, [r9, sl]
 80259e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80259e4:	441e      	add	r6, r3
 80259e6:	1c78      	adds	r0, r7, #1
 80259e8:	d438      	bmi.n	8025a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80259ea:	4584      	cmp	ip, r0
 80259ec:	dd36      	ble.n	8025a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80259ee:	b3aa      	cbz	r2, 8025a5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80259f0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80259f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80259f8:	4418      	add	r0, r3
 80259fa:	3501      	adds	r5, #1
 80259fc:	d432      	bmi.n	8025a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80259fe:	45a8      	cmp	r8, r5
 8025a00:	dd30      	ble.n	8025a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025a02:	b37c      	cbz	r4, 8025a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025a04:	2f00      	cmp	r7, #0
 8025a06:	db2b      	blt.n	8025a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025a08:	45bc      	cmp	ip, r7
 8025a0a:	dd29      	ble.n	8025a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025a0c:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8025a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025a14:	441d      	add	r5, r3
 8025a16:	3701      	adds	r7, #1
 8025a18:	d427      	bmi.n	8025a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025a1a:	45bc      	cmp	ip, r7
 8025a1c:	dd25      	ble.n	8025a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025a1e:	b322      	cbz	r2, 8025a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025a20:	44f4      	add	ip, lr
 8025a22:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025a26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025a2a:	443b      	add	r3, r7
 8025a2c:	781f      	ldrb	r7, [r3, #0]
 8025a2e:	f896 9000 	ldrb.w	r9, [r6]
 8025a32:	f890 a000 	ldrb.w	sl, [r0]
 8025a36:	f895 8000 	ldrb.w	r8, [r5]
 8025a3a:	2a0f      	cmp	r2, #15
 8025a3c:	4639      	mov	r1, r7
 8025a3e:	d801      	bhi.n	8025a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8025a40:	2c0f      	cmp	r4, #15
 8025a42:	d914      	bls.n	8025a6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8025a44:	4b2c      	ldr	r3, [pc, #176]	; (8025af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8025a46:	4a2d      	ldr	r2, [pc, #180]	; (8025afc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8025a48:	482d      	ldr	r0, [pc, #180]	; (8025b00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8025a4a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025a4e:	f008 fa67 	bl	802df20 <__assert_func>
 8025a52:	ae03      	add	r6, sp, #12
 8025a54:	e7c7      	b.n	80259e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8025a56:	a803      	add	r0, sp, #12
 8025a58:	4606      	mov	r6, r0
 8025a5a:	e7ce      	b.n	80259fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025a5c:	a803      	add	r0, sp, #12
 8025a5e:	e7cc      	b.n	80259fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025a60:	ad03      	add	r5, sp, #12
 8025a62:	e7d8      	b.n	8025a16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8025a64:	ab03      	add	r3, sp, #12
 8025a66:	461d      	mov	r5, r3
 8025a68:	e7e0      	b.n	8025a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025a6a:	ab03      	add	r3, sp, #12
 8025a6c:	e7de      	b.n	8025a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025a6e:	b292      	uxth	r2, r2
 8025a70:	b2a4      	uxth	r4, r4
 8025a72:	fb02 fe04 	mul.w	lr, r2, r4
 8025a76:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8025a7a:	0112      	lsls	r2, r2, #4
 8025a7c:	b2a4      	uxth	r4, r4
 8025a7e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8025a82:	f896 b002 	ldrb.w	fp, [r6, #2]
 8025a86:	7840      	ldrb	r0, [r0, #1]
 8025a88:	7876      	ldrb	r6, [r6, #1]
 8025a8a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025a8e:	eba2 020e 	sub.w	r2, r2, lr
 8025a92:	b292      	uxth	r2, r2
 8025a94:	1b3f      	subs	r7, r7, r4
 8025a96:	b2bf      	uxth	r7, r7
 8025a98:	fb02 fc0c 	mul.w	ip, r2, ip
 8025a9c:	fb07 cc0b 	mla	ip, r7, fp, ip
 8025aa0:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025aa4:	fb04 cc0b 	mla	ip, r4, fp, ip
 8025aa8:	f893 b002 	ldrb.w	fp, [r3, #2]
 8025aac:	785b      	ldrb	r3, [r3, #1]
 8025aae:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025ab2:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8025ab6:	fb02 fc0a 	mul.w	ip, r2, sl
 8025aba:	4342      	muls	r2, r0
 8025abc:	7868      	ldrb	r0, [r5, #1]
 8025abe:	fb07 cc09 	mla	ip, r7, r9, ip
 8025ac2:	fb07 2206 	mla	r2, r7, r6, r2
 8025ac6:	fb04 cc08 	mla	ip, r4, r8, ip
 8025aca:	fb04 2400 	mla	r4, r4, r0, r2
 8025ace:	fb0e cc01 	mla	ip, lr, r1, ip
 8025ad2:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025ad6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025ada:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025ade:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025ae2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025ae6:	9b01      	ldr	r3, [sp, #4]
 8025ae8:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025aec:	f8a3 c000 	strh.w	ip, [r3]
 8025af0:	b005      	add	sp, #20
 8025af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025af6:	bf00      	nop
 8025af8:	08032c55 	.word	0x08032c55
 8025afc:	08033222 	.word	0x08033222
 8025b00:	08032cd9 	.word	0x08032cd9

08025b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b08:	ed2d 8b08 	vpush	{d8-d11}
 8025b0c:	b08f      	sub	sp, #60	; 0x3c
 8025b0e:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8025b12:	920c      	str	r2, [sp, #48]	; 0x30
 8025b14:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025b16:	910a      	str	r1, [sp, #40]	; 0x28
 8025b18:	9306      	str	r3, [sp, #24]
 8025b1a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025b1e:	900d      	str	r0, [sp, #52]	; 0x34
 8025b20:	6850      	ldr	r0, [r2, #4]
 8025b22:	6812      	ldr	r2, [r2, #0]
 8025b24:	fb00 1303 	mla	r3, r0, r3, r1
 8025b28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025b2c:	9307      	str	r3, [sp, #28]
 8025b2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b30:	681b      	ldr	r3, [r3, #0]
 8025b32:	9308      	str	r3, [sp, #32]
 8025b34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b36:	685c      	ldr	r4, [r3, #4]
 8025b38:	eeb0 aa40 	vmov.f32	s20, s0
 8025b3c:	eef0 9a60 	vmov.f32	s19, s1
 8025b40:	eeb0 9a41 	vmov.f32	s18, s2
 8025b44:	eeb0 8a62 	vmov.f32	s16, s5
 8025b48:	eef0 8a43 	vmov.f32	s17, s6
 8025b4c:	eef0 ba44 	vmov.f32	s23, s8
 8025b50:	eeb0 ba64 	vmov.f32	s22, s9
 8025b54:	eef0 aa45 	vmov.f32	s21, s10
 8025b58:	3404      	adds	r4, #4
 8025b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b5c:	2b00      	cmp	r3, #0
 8025b5e:	dc03      	bgt.n	8025b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8025b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b62:	2b00      	cmp	r3, #0
 8025b64:	f340 81d6 	ble.w	8025f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025b68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b72:	1e48      	subs	r0, r1, #1
 8025b74:	1e56      	subs	r6, r2, #1
 8025b76:	9b06      	ldr	r3, [sp, #24]
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	f340 80b7 	ble.w	8025cec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025b7e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025b82:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025b86:	d406      	bmi.n	8025b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b88:	4287      	cmp	r7, r0
 8025b8a:	da04      	bge.n	8025b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	db02      	blt.n	8025b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b90:	42b3      	cmp	r3, r6
 8025b92:	f2c0 80ac 	blt.w	8025cee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025b96:	3701      	adds	r7, #1
 8025b98:	f100 809d 	bmi.w	8025cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025b9c:	42b9      	cmp	r1, r7
 8025b9e:	f2c0 809a 	blt.w	8025cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	f100 8097 	bmi.w	8025cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ba8:	429a      	cmp	r2, r3
 8025baa:	f2c0 8094 	blt.w	8025cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025bae:	9b06      	ldr	r3, [sp, #24]
 8025bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8025bb2:	9b07      	ldr	r3, [sp, #28]
 8025bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8025bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025bb8:	2b00      	cmp	r3, #0
 8025bba:	f340 80b5 	ble.w	8025d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025bbe:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025bc0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025bc2:	68c7      	ldr	r7, [r0, #12]
 8025bc4:	6892      	ldr	r2, [r2, #8]
 8025bc6:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025bca:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025bce:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025bd2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025bd6:	f100 80fb 	bmi.w	8025dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025bda:	f102 3cff 	add.w	ip, r2, #4294967295
 8025bde:	4560      	cmp	r0, ip
 8025be0:	f280 80f6 	bge.w	8025dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025be4:	2e00      	cmp	r6, #0
 8025be6:	f2c0 80f3 	blt.w	8025dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025bea:	f107 3cff 	add.w	ip, r7, #4294967295
 8025bee:	4566      	cmp	r6, ip
 8025bf0:	f280 80ee 	bge.w	8025dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025bf4:	b212      	sxth	r2, r2
 8025bf6:	fb06 0002 	mla	r0, r6, r2, r0
 8025bfa:	9e08      	ldr	r6, [sp, #32]
 8025bfc:	1837      	adds	r7, r6, r0
 8025bfe:	5c30      	ldrb	r0, [r6, r0]
 8025c00:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025c04:	eb04 0c08 	add.w	ip, r4, r8
 8025c08:	2b00      	cmp	r3, #0
 8025c0a:	f000 80d3 	beq.w	8025db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025c0e:	787e      	ldrb	r6, [r7, #1]
 8025c10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025c14:	4426      	add	r6, r4
 8025c16:	2900      	cmp	r1, #0
 8025c18:	f000 80d4 	beq.w	8025dc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8025c1c:	18b8      	adds	r0, r7, r2
 8025c1e:	5cba      	ldrb	r2, [r7, r2]
 8025c20:	7840      	ldrb	r0, [r0, #1]
 8025c22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025c26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025c2a:	4422      	add	r2, r4
 8025c2c:	4420      	add	r0, r4
 8025c2e:	b29b      	uxth	r3, r3
 8025c30:	b289      	uxth	r1, r1
 8025c32:	fb03 f901 	mul.w	r9, r3, r1
 8025c36:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025c3a:	011b      	lsls	r3, r3, #4
 8025c3c:	b289      	uxth	r1, r1
 8025c3e:	78b7      	ldrb	r7, [r6, #2]
 8025c40:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025c44:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025c48:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025c4c:	eba3 0309 	sub.w	r3, r3, r9
 8025c50:	b29b      	uxth	r3, r3
 8025c52:	ebae 0e01 	sub.w	lr, lr, r1
 8025c56:	fa1f fe8e 	uxth.w	lr, lr
 8025c5a:	435f      	muls	r7, r3
 8025c5c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025c60:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025c64:	fb01 770a 	mla	r7, r1, sl, r7
 8025c68:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025c6c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025c70:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025c74:	f896 8000 	ldrb.w	r8, [r6]
 8025c78:	7876      	ldrb	r6, [r6, #1]
 8025c7a:	fb03 f808 	mul.w	r8, r3, r8
 8025c7e:	fb0e 8807 	mla	r8, lr, r7, r8
 8025c82:	7817      	ldrb	r7, [r2, #0]
 8025c84:	fb01 8807 	mla	r8, r1, r7, r8
 8025c88:	7807      	ldrb	r7, [r0, #0]
 8025c8a:	fb09 8707 	mla	r7, r9, r7, r8
 8025c8e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025c92:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025c96:	ea47 070a 	orr.w	r7, r7, sl
 8025c9a:	4373      	muls	r3, r6
 8025c9c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025ca0:	fb0e 330c 	mla	r3, lr, ip, r3
 8025ca4:	fb01 310a 	mla	r1, r1, sl, r3
 8025ca8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cae:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025cb2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025cb6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025cba:	ea47 070a 	orr.w	r7, r7, sl
 8025cbe:	801f      	strh	r7, [r3, #0]
 8025cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cc2:	3302      	adds	r3, #2
 8025cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8025cc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025cc8:	449b      	add	fp, r3
 8025cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ccc:	441d      	add	r5, r3
 8025cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025cd0:	3b01      	subs	r3, #1
 8025cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8025cd4:	e76f      	b.n	8025bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025cd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025cd8:	449b      	add	fp, r3
 8025cda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025cdc:	441d      	add	r5, r3
 8025cde:	9b06      	ldr	r3, [sp, #24]
 8025ce0:	3b01      	subs	r3, #1
 8025ce2:	9306      	str	r3, [sp, #24]
 8025ce4:	9b07      	ldr	r3, [sp, #28]
 8025ce6:	3302      	adds	r3, #2
 8025ce8:	9307      	str	r3, [sp, #28]
 8025cea:	e744      	b.n	8025b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025cec:	d023      	beq.n	8025d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025cee:	9b06      	ldr	r3, [sp, #24]
 8025cf0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025cf2:	3b01      	subs	r3, #1
 8025cf4:	fb00 b003 	mla	r0, r0, r3, fp
 8025cf8:	1400      	asrs	r0, r0, #16
 8025cfa:	f53f af58 	bmi.w	8025bae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025cfe:	3901      	subs	r1, #1
 8025d00:	4288      	cmp	r0, r1
 8025d02:	f6bf af54 	bge.w	8025bae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025d06:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025d08:	fb01 5303 	mla	r3, r1, r3, r5
 8025d0c:	141b      	asrs	r3, r3, #16
 8025d0e:	f53f af4e 	bmi.w	8025bae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025d12:	3a01      	subs	r2, #1
 8025d14:	4293      	cmp	r3, r2
 8025d16:	f6bf af4a 	bge.w	8025bae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025d1a:	9b06      	ldr	r3, [sp, #24]
 8025d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8025d1e:	9b07      	ldr	r3, [sp, #28]
 8025d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8025d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d24:	2b00      	cmp	r3, #0
 8025d26:	dc70      	bgt.n	8025e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025d28:	9b06      	ldr	r3, [sp, #24]
 8025d2a:	9a07      	ldr	r2, [sp, #28]
 8025d2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025d30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025d34:	9307      	str	r3, [sp, #28]
 8025d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	f340 80eb 	ble.w	8025f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025d3e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025d46:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025d4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d4c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025d50:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025d54:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025d58:	eef0 6a48 	vmov.f32	s13, s16
 8025d5c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025d60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d64:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025d68:	ee16 ba90 	vmov	fp, s13
 8025d6c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025d70:	eef0 6a68 	vmov.f32	s13, s17
 8025d74:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025d78:	ee18 2a10 	vmov	r2, s16
 8025d7c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d84:	ee18 2a90 	vmov	r2, s17
 8025d88:	9323      	str	r3, [sp, #140]	; 0x8c
 8025d8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d90:	9324      	str	r3, [sp, #144]	; 0x90
 8025d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025d96:	3b01      	subs	r3, #1
 8025d98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8025d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025da0:	bf08      	it	eq
 8025da2:	4613      	moveq	r3, r2
 8025da4:	ee16 5a90 	vmov	r5, s13
 8025da8:	9306      	str	r3, [sp, #24]
 8025daa:	eef0 8a67 	vmov.f32	s17, s15
 8025dae:	eeb0 8a47 	vmov.f32	s16, s14
 8025db2:	e6d2      	b.n	8025b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025db4:	b149      	cbz	r1, 8025dca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8025db6:	5cba      	ldrb	r2, [r7, r2]
 8025db8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025dbc:	4422      	add	r2, r4
 8025dbe:	4660      	mov	r0, ip
 8025dc0:	4666      	mov	r6, ip
 8025dc2:	e734      	b.n	8025c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8025dc4:	4660      	mov	r0, ip
 8025dc6:	4662      	mov	r2, ip
 8025dc8:	e731      	b.n	8025c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8025dca:	4660      	mov	r0, ip
 8025dcc:	4662      	mov	r2, ip
 8025dce:	e7f7      	b.n	8025dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025dd0:	f110 0c01 	adds.w	ip, r0, #1
 8025dd4:	f53f af74 	bmi.w	8025cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025dd8:	4562      	cmp	r2, ip
 8025dda:	f6ff af71 	blt.w	8025cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025dde:	f116 0c01 	adds.w	ip, r6, #1
 8025de2:	f53f af6d 	bmi.w	8025cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025de6:	4567      	cmp	r7, ip
 8025de8:	f6ff af6a 	blt.w	8025cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025dec:	b23f      	sxth	r7, r7
 8025dee:	b212      	sxth	r2, r2
 8025df0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025df4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025df8:	9200      	str	r2, [sp, #0]
 8025dfa:	9701      	str	r7, [sp, #4]
 8025dfc:	4623      	mov	r3, r4
 8025dfe:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8025e02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025e04:	f7ff fdc2 	bl	802598c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025e08:	e75a      	b.n	8025cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025e0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025e0c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025e10:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025e14:	1428      	asrs	r0, r5, #16
 8025e16:	fb02 6000 	mla	r0, r2, r0, r6
 8025e1a:	9e08      	ldr	r6, [sp, #32]
 8025e1c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025e20:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025e24:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025e28:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025e2c:	1837      	adds	r7, r6, r0
 8025e2e:	eb04 0c08 	add.w	ip, r4, r8
 8025e32:	2b00      	cmp	r3, #0
 8025e34:	d060      	beq.n	8025ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025e36:	787e      	ldrb	r6, [r7, #1]
 8025e38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025e3c:	4426      	add	r6, r4
 8025e3e:	2900      	cmp	r1, #0
 8025e40:	d062      	beq.n	8025f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8025e42:	18b8      	adds	r0, r7, r2
 8025e44:	5cba      	ldrb	r2, [r7, r2]
 8025e46:	7840      	ldrb	r0, [r0, #1]
 8025e48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025e4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025e50:	4422      	add	r2, r4
 8025e52:	4420      	add	r0, r4
 8025e54:	b29b      	uxth	r3, r3
 8025e56:	b289      	uxth	r1, r1
 8025e58:	fb03 f901 	mul.w	r9, r3, r1
 8025e5c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025e60:	011b      	lsls	r3, r3, #4
 8025e62:	b289      	uxth	r1, r1
 8025e64:	78b7      	ldrb	r7, [r6, #2]
 8025e66:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025e6a:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025e6e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025e72:	eba3 0309 	sub.w	r3, r3, r9
 8025e76:	b29b      	uxth	r3, r3
 8025e78:	ebae 0e01 	sub.w	lr, lr, r1
 8025e7c:	fa1f fe8e 	uxth.w	lr, lr
 8025e80:	435f      	muls	r7, r3
 8025e82:	fb0e 770a 	mla	r7, lr, sl, r7
 8025e86:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025e8a:	fb01 770a 	mla	r7, r1, sl, r7
 8025e8e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025e92:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025e96:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025e9a:	f896 8000 	ldrb.w	r8, [r6]
 8025e9e:	7876      	ldrb	r6, [r6, #1]
 8025ea0:	fb03 f808 	mul.w	r8, r3, r8
 8025ea4:	fb0e 8807 	mla	r8, lr, r7, r8
 8025ea8:	7817      	ldrb	r7, [r2, #0]
 8025eaa:	fb01 8807 	mla	r8, r1, r7, r8
 8025eae:	7807      	ldrb	r7, [r0, #0]
 8025eb0:	fb09 8707 	mla	r7, r9, r7, r8
 8025eb4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025eb8:	4373      	muls	r3, r6
 8025eba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025ebe:	7856      	ldrb	r6, [r2, #1]
 8025ec0:	ea47 070a 	orr.w	r7, r7, sl
 8025ec4:	fb0e 330c 	mla	r3, lr, ip, r3
 8025ec8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025ecc:	fb01 3306 	mla	r3, r1, r6, r3
 8025ed0:	fb09 3a0a 	mla	sl, r9, sl, r3
 8025ed4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025eda:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025ede:	ea47 070a 	orr.w	r7, r7, sl
 8025ee2:	f823 7b02 	strh.w	r7, [r3], #2
 8025ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025eea:	449b      	add	fp, r3
 8025eec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025eee:	441d      	add	r5, r3
 8025ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ef2:	3b01      	subs	r3, #1
 8025ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8025ef6:	e714      	b.n	8025d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025ef8:	b149      	cbz	r1, 8025f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8025efa:	5cba      	ldrb	r2, [r7, r2]
 8025efc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025f00:	4422      	add	r2, r4
 8025f02:	4660      	mov	r0, ip
 8025f04:	4666      	mov	r6, ip
 8025f06:	e7a5      	b.n	8025e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025f08:	4660      	mov	r0, ip
 8025f0a:	4662      	mov	r2, ip
 8025f0c:	e7a2      	b.n	8025e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025f0e:	4660      	mov	r0, ip
 8025f10:	4662      	mov	r2, ip
 8025f12:	e7f7      	b.n	8025f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025f14:	b00f      	add	sp, #60	; 0x3c
 8025f16:	ecbd 8b08 	vpop	{d8-d11}
 8025f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025f20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f24:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8025f28:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8025f2c:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8025f30:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025f34:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8025f38:	fb04 560c 	mla	r6, r4, ip, r5
 8025f3c:	2c00      	cmp	r4, #0
 8025f3e:	eb02 0e06 	add.w	lr, r2, r6
 8025f42:	db3d      	blt.n	8025fc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025f44:	45a0      	cmp	r8, r4
 8025f46:	dd3b      	ble.n	8025fc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025f48:	2d00      	cmp	r5, #0
 8025f4a:	db37      	blt.n	8025fbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025f4c:	45ac      	cmp	ip, r5
 8025f4e:	dd35      	ble.n	8025fbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025f50:	5d92      	ldrb	r2, [r2, r6]
 8025f52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025f56:	1c6e      	adds	r6, r5, #1
 8025f58:	d435      	bmi.n	8025fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025f5a:	45b4      	cmp	ip, r6
 8025f5c:	dd33      	ble.n	8025fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025f5e:	b3a0      	cbz	r0, 8025fca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8025f60:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8025f64:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025f68:	3401      	adds	r4, #1
 8025f6a:	d432      	bmi.n	8025fd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025f6c:	45a0      	cmp	r8, r4
 8025f6e:	dd30      	ble.n	8025fd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025f70:	b397      	cbz	r7, 8025fd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8025f72:	2d00      	cmp	r5, #0
 8025f74:	db2b      	blt.n	8025fce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025f76:	45ac      	cmp	ip, r5
 8025f78:	dd29      	ble.n	8025fce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025f7a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8025f7e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025f82:	3501      	adds	r5, #1
 8025f84:	d42b      	bmi.n	8025fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025f86:	45ac      	cmp	ip, r5
 8025f88:	dd29      	ble.n	8025fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025f8a:	b350      	cbz	r0, 8025fe2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8025f8c:	44f4      	add	ip, lr
 8025f8e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025f92:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025f96:	280f      	cmp	r0, #15
 8025f98:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025f9c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025fa0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025fa4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025fa8:	d801      	bhi.n	8025fae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8025faa:	2f0f      	cmp	r7, #15
 8025fac:	d91b      	bls.n	8025fe6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8025fae:	4b8d      	ldr	r3, [pc, #564]	; (80261e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8025fb0:	4a8d      	ldr	r2, [pc, #564]	; (80261e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8025fb2:	488e      	ldr	r0, [pc, #568]	; (80261ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8025fb4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025fb8:	f007 ffb2 	bl	802df20 <__assert_func>
 8025fbc:	2200      	movs	r2, #0
 8025fbe:	e7ca      	b.n	8025f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8025fc0:	2600      	movs	r6, #0
 8025fc2:	4632      	mov	r2, r6
 8025fc4:	e7d0      	b.n	8025f68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025fc6:	2600      	movs	r6, #0
 8025fc8:	e7ce      	b.n	8025f68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025fca:	4606      	mov	r6, r0
 8025fcc:	e7cc      	b.n	8025f68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025fce:	2400      	movs	r4, #0
 8025fd0:	e7d7      	b.n	8025f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8025fd2:	2300      	movs	r3, #0
 8025fd4:	461c      	mov	r4, r3
 8025fd6:	e7de      	b.n	8025f96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025fd8:	463b      	mov	r3, r7
 8025fda:	463c      	mov	r4, r7
 8025fdc:	e7db      	b.n	8025f96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025fde:	2300      	movs	r3, #0
 8025fe0:	e7d9      	b.n	8025f96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025fe2:	4603      	mov	r3, r0
 8025fe4:	e7d7      	b.n	8025f96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025fe6:	b280      	uxth	r0, r0
 8025fe8:	b2bf      	uxth	r7, r7
 8025fea:	fb07 fe00 	mul.w	lr, r7, r0
 8025fee:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025ff2:	0100      	lsls	r0, r0, #4
 8025ff4:	eba0 0c0e 	sub.w	ip, r0, lr
 8025ff8:	b2bf      	uxth	r7, r7
 8025ffa:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025ffe:	fa1f fc8c 	uxth.w	ip, ip
 8026002:	1bed      	subs	r5, r5, r7
 8026004:	b2ad      	uxth	r5, r5
 8026006:	fb0a f00c 	mul.w	r0, sl, ip
 802600a:	fb0b 0005 	mla	r0, fp, r5, r0
 802600e:	fb07 0009 	mla	r0, r7, r9, r0
 8026012:	fb0e 0008 	mla	r0, lr, r8, r0
 8026016:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802601a:	9001      	str	r0, [sp, #4]
 802601c:	2800      	cmp	r0, #0
 802601e:	f000 80de 	beq.w	80261de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8026022:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026026:	d018      	beq.n	802605a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8026028:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802602c:	fb0b f000 	mul.w	r0, fp, r0
 8026030:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026034:	fb0b fb02 	mul.w	fp, fp, r2
 8026038:	0a02      	lsrs	r2, r0, #8
 802603a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802603e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026042:	4402      	add	r2, r0
 8026044:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026048:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802604c:	0a12      	lsrs	r2, r2, #8
 802604e:	0a00      	lsrs	r0, r0, #8
 8026050:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026054:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026058:	4302      	orrs	r2, r0
 802605a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802605e:	d01a      	beq.n	8026096 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8026060:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8026064:	fb0a f000 	mul.w	r0, sl, r0
 8026068:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802606c:	fb0a fa06 	mul.w	sl, sl, r6
 8026070:	0a06      	lsrs	r6, r0, #8
 8026072:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026076:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802607a:	4406      	add	r6, r0
 802607c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026080:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026084:	0a36      	lsrs	r6, r6, #8
 8026086:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802608a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802608e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026092:	ea46 060a 	orr.w	r6, r6, sl
 8026096:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802609a:	d01b      	beq.n	80260d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 802609c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80260a0:	fb09 fa0a 	mul.w	sl, r9, sl
 80260a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80260a8:	fb09 f004 	mul.w	r0, r9, r4
 80260ac:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80260b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80260b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80260b8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80260bc:	4454      	add	r4, sl
 80260be:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80260c2:	0a24      	lsrs	r4, r4, #8
 80260c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80260c8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80260cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80260d0:	ea44 0409 	orr.w	r4, r4, r9
 80260d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80260d8:	d01b      	beq.n	8026112 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80260da:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80260de:	fb08 f909 	mul.w	r9, r8, r9
 80260e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260e6:	fb08 f003 	mul.w	r0, r8, r3
 80260ea:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80260ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260f2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80260f6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80260fa:	444b      	add	r3, r9
 80260fc:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8026100:	0a1b      	lsrs	r3, r3, #8
 8026102:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026106:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802610a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802610e:	ea43 0308 	orr.w	r3, r3, r8
 8026112:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026116:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802611a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802611e:	fb0c f808 	mul.w	r8, ip, r8
 8026122:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026126:	fb0c f606 	mul.w	r6, ip, r6
 802612a:	fb05 8909 	mla	r9, r5, r9, r8
 802612e:	fb05 6502 	mla	r5, r5, r2, r6
 8026132:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026136:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802613a:	9a01      	ldr	r2, [sp, #4]
 802613c:	8808      	ldrh	r0, [r1, #0]
 802613e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026142:	fb07 9908 	mla	r9, r7, r8, r9
 8026146:	fb07 5704 	mla	r7, r7, r4, r5
 802614a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802614e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026152:	b2b6      	uxth	r6, r6
 8026154:	fb0e 9808 	mla	r8, lr, r8, r9
 8026158:	fb0e 7e03 	mla	lr, lr, r3, r7
 802615c:	4372      	muls	r2, r6
 802615e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026162:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026166:	1c53      	adds	r3, r2, #1
 8026168:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802616c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026170:	ea48 0e0e 	orr.w	lr, r8, lr
 8026174:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026178:	1205      	asrs	r5, r0, #8
 802617a:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802617e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026182:	b2db      	uxtb	r3, r3
 8026184:	fb12 f206 	smulbb	r2, r2, r6
 8026188:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802618c:	fb05 2503 	mla	r5, r5, r3, r2
 8026190:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8026194:	10c2      	asrs	r2, r0, #3
 8026196:	fa5f fe8e 	uxtb.w	lr, lr
 802619a:	00c0      	lsls	r0, r0, #3
 802619c:	fb14 f406 	smulbb	r4, r4, r6
 80261a0:	b2c0      	uxtb	r0, r0
 80261a2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80261a6:	fb1e fe06 	smulbb	lr, lr, r6
 80261aa:	fb02 4203 	mla	r2, r2, r3, r4
 80261ae:	b2ad      	uxth	r5, r5
 80261b0:	fb00 e303 	mla	r3, r0, r3, lr
 80261b4:	b298      	uxth	r0, r3
 80261b6:	b294      	uxth	r4, r2
 80261b8:	1c6b      	adds	r3, r5, #1
 80261ba:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80261be:	1c62      	adds	r2, r4, #1
 80261c0:	1c43      	adds	r3, r0, #1
 80261c2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80261c6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80261ca:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80261ce:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80261d2:	0952      	lsrs	r2, r2, #5
 80261d4:	432b      	orrs	r3, r5
 80261d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80261da:	4313      	orrs	r3, r2
 80261dc:	800b      	strh	r3, [r1, #0]
 80261de:	b003      	add	sp, #12
 80261e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261e4:	08032c55 	.word	0x08032c55
 80261e8:	08033222 	.word	0x08033222
 80261ec:	08032cd9 	.word	0x08032cd9

080261f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261f4:	ed2d 8b08 	vpush	{d8-d11}
 80261f8:	b09f      	sub	sp, #124	; 0x7c
 80261fa:	eeb0 aa40 	vmov.f32	s20, s0
 80261fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8026200:	9309      	str	r3, [sp, #36]	; 0x24
 8026202:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026204:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8026208:	931c      	str	r3, [sp, #112]	; 0x70
 802620a:	9119      	str	r1, [sp, #100]	; 0x64
 802620c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026210:	901d      	str	r0, [sp, #116]	; 0x74
 8026212:	6850      	ldr	r0, [r2, #4]
 8026214:	6812      	ldr	r2, [r2, #0]
 8026216:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8026218:	fb00 1303 	mla	r3, r0, r3, r1
 802621c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026220:	930c      	str	r3, [sp, #48]	; 0x30
 8026222:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026224:	681b      	ldr	r3, [r3, #0]
 8026226:	9312      	str	r3, [sp, #72]	; 0x48
 8026228:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802622a:	685e      	ldr	r6, [r3, #4]
 802622c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8026230:	930d      	str	r3, [sp, #52]	; 0x34
 8026232:	eef0 9a60 	vmov.f32	s19, s1
 8026236:	eeb0 9a41 	vmov.f32	s18, s2
 802623a:	eeb0 8a62 	vmov.f32	s16, s5
 802623e:	eef0 8a43 	vmov.f32	s17, s6
 8026242:	eef0 ba44 	vmov.f32	s23, s8
 8026246:	eeb0 ba64 	vmov.f32	s22, s9
 802624a:	eef0 aa45 	vmov.f32	s21, s10
 802624e:	3604      	adds	r6, #4
 8026250:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026252:	2b00      	cmp	r3, #0
 8026254:	dc03      	bgt.n	802625e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026258:	2b00      	cmp	r3, #0
 802625a:	f340 8388 	ble.w	802696e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 802625e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026260:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026264:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026268:	1e48      	subs	r0, r1, #1
 802626a:	1e57      	subs	r7, r2, #1
 802626c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802626e:	2b00      	cmp	r3, #0
 8026270:	f340 8195 	ble.w	802659e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026274:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026276:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802627a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802627e:	d406      	bmi.n	802628e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026280:	4584      	cmp	ip, r0
 8026282:	da04      	bge.n	802628e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026284:	2b00      	cmp	r3, #0
 8026286:	db02      	blt.n	802628e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026288:	42bb      	cmp	r3, r7
 802628a:	f2c0 8189 	blt.w	80265a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802628e:	f11c 0c01 	adds.w	ip, ip, #1
 8026292:	f100 8177 	bmi.w	8026584 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026296:	4561      	cmp	r1, ip
 8026298:	f2c0 8174 	blt.w	8026584 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802629c:	3301      	adds	r3, #1
 802629e:	f100 8171 	bmi.w	8026584 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80262a2:	429a      	cmp	r2, r3
 80262a4:	f2c0 816e 	blt.w	8026584 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80262a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80262ac:	931a      	str	r3, [sp, #104]	; 0x68
 80262ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80262b0:	2b00      	cmp	r3, #0
 80262b2:	f340 8193 	ble.w	80265dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80262b6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80262b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80262bc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80262be:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80262c2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80262c4:	141b      	asrs	r3, r3, #16
 80262c6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80262ca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80262ce:	f100 81d6 	bmi.w	802667e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80262d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80262d6:	4543      	cmp	r3, r8
 80262d8:	f280 81d1 	bge.w	802667e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80262dc:	f1bc 0f00 	cmp.w	ip, #0
 80262e0:	f2c0 81cd 	blt.w	802667e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80262e4:	f10e 38ff 	add.w	r8, lr, #4294967295
 80262e8:	45c4      	cmp	ip, r8
 80262ea:	f280 81c8 	bge.w	802667e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80262ee:	b200      	sxth	r0, r0
 80262f0:	fb0c 3300 	mla	r3, ip, r0, r3
 80262f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80262f6:	eb04 0803 	add.w	r8, r4, r3
 80262fa:	5ce3      	ldrb	r3, [r4, r3]
 80262fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026300:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026304:	2a00      	cmp	r2, #0
 8026306:	f000 81af 	beq.w	8026668 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 802630a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802630e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026312:	940e      	str	r4, [sp, #56]	; 0x38
 8026314:	0e24      	lsrs	r4, r4, #24
 8026316:	9415      	str	r4, [sp, #84]	; 0x54
 8026318:	b179      	cbz	r1, 802633a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802631a:	eb08 0c00 	add.w	ip, r8, r0
 802631e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026322:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026326:	900a      	str	r0, [sp, #40]	; 0x28
 8026328:	0e00      	lsrs	r0, r0, #24
 802632a:	9013      	str	r0, [sp, #76]	; 0x4c
 802632c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026330:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026334:	900f      	str	r0, [sp, #60]	; 0x3c
 8026336:	0e00      	lsrs	r0, r0, #24
 8026338:	9016      	str	r0, [sp, #88]	; 0x58
 802633a:	b292      	uxth	r2, r2
 802633c:	b289      	uxth	r1, r1
 802633e:	fb02 f901 	mul.w	r9, r2, r1
 8026342:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026346:	0112      	lsls	r2, r2, #4
 8026348:	eba2 0809 	sub.w	r8, r2, r9
 802634c:	b289      	uxth	r1, r1
 802634e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026352:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026354:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026356:	fa1f f888 	uxth.w	r8, r8
 802635a:	1a52      	subs	r2, r2, r1
 802635c:	b292      	uxth	r2, r2
 802635e:	fb08 f000 	mul.w	r0, r8, r0
 8026362:	fb02 000e 	mla	r0, r2, lr, r0
 8026366:	fb01 0004 	mla	r0, r1, r4, r0
 802636a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802636c:	fb09 0004 	mla	r0, r9, r4, r0
 8026370:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026374:	2800      	cmp	r0, #0
 8026376:	f000 80fa 	beq.w	802656e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802637a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802637e:	d01b      	beq.n	80263b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8026380:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026384:	fb0e fa0a 	mul.w	sl, lr, sl
 8026388:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802638c:	fb0e fe03 	mul.w	lr, lr, r3
 8026390:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026394:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026398:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802639c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80263a0:	4453      	add	r3, sl
 80263a2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80263a6:	0a1b      	lsrs	r3, r3, #8
 80263a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80263b4:	ea43 030c 	orr.w	r3, r3, ip
 80263b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80263ba:	2cff      	cmp	r4, #255	; 0xff
 80263bc:	d021      	beq.n	8026402 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80263be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80263c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80263c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80263c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80263ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80263cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80263d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80263d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80263d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80263da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80263e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80263e6:	44de      	add	lr, fp
 80263e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263fc:	ea4e 040a 	orr.w	r4, lr, sl
 8026400:	940e      	str	r4, [sp, #56]	; 0x38
 8026402:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026404:	2cff      	cmp	r4, #255	; 0xff
 8026406:	d021      	beq.n	802644c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8026408:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802640a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802640e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026410:	fb04 fb0b 	mul.w	fp, r4, fp
 8026414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026416:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802641a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802641c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026420:	fb04 fa0a 	mul.w	sl, r4, sl
 8026424:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026428:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802642c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026430:	44de      	add	lr, fp
 8026432:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026436:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802643a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802643e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026442:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026446:	ea4e 040a 	orr.w	r4, lr, sl
 802644a:	940a      	str	r4, [sp, #40]	; 0x28
 802644c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802644e:	2cff      	cmp	r4, #255	; 0xff
 8026450:	d021      	beq.n	8026496 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026452:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026454:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026458:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802645a:	fb04 fb0b 	mul.w	fp, r4, fp
 802645e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026460:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026464:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026466:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802646a:	fb04 fa0a 	mul.w	sl, r4, sl
 802646e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026472:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026476:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802647a:	44de      	add	lr, fp
 802647c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026480:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026484:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026488:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802648c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026490:	ea4e 040a 	orr.w	r4, lr, sl
 8026494:	940f      	str	r4, [sp, #60]	; 0x3c
 8026496:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026498:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802649c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802649e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80264a2:	fb08 fc0c 	mul.w	ip, r8, ip
 80264a6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80264aa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80264ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80264b0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80264b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80264b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80264ba:	fb09 cc0e 	mla	ip, r9, lr, ip
 80264be:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80264c2:	fb08 f80e 	mul.w	r8, r8, lr
 80264c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80264ca:	fb02 8303 	mla	r3, r2, r3, r8
 80264ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80264d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80264d2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80264d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80264d8:	fb01 330a 	mla	r3, r1, sl, r3
 80264dc:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80264e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80264e2:	fb09 3901 	mla	r9, r9, r1, r3
 80264e6:	4342      	muls	r2, r0
 80264e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264ec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80264f0:	883b      	ldrh	r3, [r7, #0]
 80264f2:	1c50      	adds	r0, r2, #1
 80264f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80264f8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80264fc:	ea4c 0c09 	orr.w	ip, ip, r9
 8026500:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026504:	1219      	asrs	r1, r3, #8
 8026506:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802650a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802650e:	b2c0      	uxtb	r0, r0
 8026510:	fb12 f204 	smulbb	r2, r2, r4
 8026514:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026518:	fb01 2100 	mla	r1, r1, r0, r2
 802651c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026520:	10da      	asrs	r2, r3, #3
 8026522:	fa5f fc8c 	uxtb.w	ip, ip
 8026526:	00db      	lsls	r3, r3, #3
 8026528:	fb1c fc04 	smulbb	ip, ip, r4
 802652c:	b2db      	uxtb	r3, r3
 802652e:	b289      	uxth	r1, r1
 8026530:	fb03 c300 	mla	r3, r3, r0, ip
 8026534:	fa1f fc83 	uxth.w	ip, r3
 8026538:	1c4b      	adds	r3, r1, #1
 802653a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802653e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026542:	fb1e fe04 	smulbb	lr, lr, r4
 8026546:	f10c 0301 	add.w	r3, ip, #1
 802654a:	fb02 e200 	mla	r2, r2, r0, lr
 802654e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026552:	b292      	uxth	r2, r2
 8026554:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026558:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802655c:	430b      	orrs	r3, r1
 802655e:	1c51      	adds	r1, r2, #1
 8026560:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026564:	0952      	lsrs	r2, r2, #5
 8026566:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802656a:	4313      	orrs	r3, r2
 802656c:	803b      	strh	r3, [r7, #0]
 802656e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026570:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026572:	441a      	add	r2, r3
 8026574:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026576:	9231      	str	r2, [sp, #196]	; 0xc4
 8026578:	441d      	add	r5, r3
 802657a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802657c:	3b01      	subs	r3, #1
 802657e:	3702      	adds	r7, #2
 8026580:	931a      	str	r3, [sp, #104]	; 0x68
 8026582:	e694      	b.n	80262ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026584:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026586:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026588:	441c      	add	r4, r3
 802658a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802658c:	9431      	str	r4, [sp, #196]	; 0xc4
 802658e:	441d      	add	r5, r3
 8026590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026592:	3b01      	subs	r3, #1
 8026594:	9309      	str	r3, [sp, #36]	; 0x24
 8026596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026598:	3302      	adds	r3, #2
 802659a:	930c      	str	r3, [sp, #48]	; 0x30
 802659c:	e666      	b.n	802626c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802659e:	d024      	beq.n	80265ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fa>
 80265a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265a2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80265a4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80265a6:	3b01      	subs	r3, #1
 80265a8:	fb00 4003 	mla	r0, r0, r3, r4
 80265ac:	1400      	asrs	r0, r0, #16
 80265ae:	f53f ae7b 	bmi.w	80262a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80265b2:	3901      	subs	r1, #1
 80265b4:	4288      	cmp	r0, r1
 80265b6:	f6bf ae77 	bge.w	80262a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80265ba:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80265bc:	fb01 5303 	mla	r3, r1, r3, r5
 80265c0:	141b      	asrs	r3, r3, #16
 80265c2:	f53f ae71 	bmi.w	80262a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80265c6:	3a01      	subs	r2, #1
 80265c8:	4293      	cmp	r3, r2
 80265ca:	f6bf ae6d 	bge.w	80262a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80265ce:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80265d2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80265d6:	f1bb 0f00 	cmp.w	fp, #0
 80265da:	dc70      	bgt.n	80266be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80265dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265de:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80265e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80265e4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80265e8:	930c      	str	r3, [sp, #48]	; 0x30
 80265ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80265ec:	2b00      	cmp	r3, #0
 80265ee:	f340 81be 	ble.w	802696e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80265f2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80265f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80265fa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80265fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026600:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026604:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026608:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802660c:	eef0 6a48 	vmov.f32	s13, s16
 8026610:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026614:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026618:	ee37 8a48 	vsub.f32	s16, s14, s16
 802661c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8026620:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026624:	eef0 6a68 	vmov.f32	s13, s17
 8026628:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802662c:	ee18 2a10 	vmov	r2, s16
 8026630:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026634:	fb92 f3f3 	sdiv	r3, r2, r3
 8026638:	ee18 2a90 	vmov	r2, s17
 802663c:	9333      	str	r3, [sp, #204]	; 0xcc
 802663e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026640:	fb92 f3f3 	sdiv	r3, r2, r3
 8026644:	9334      	str	r3, [sp, #208]	; 0xd0
 8026646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026648:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802664a:	3b01      	subs	r3, #1
 802664c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026650:	9319      	str	r3, [sp, #100]	; 0x64
 8026652:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026654:	bf08      	it	eq
 8026656:	4613      	moveq	r3, r2
 8026658:	ee16 5a90 	vmov	r5, s13
 802665c:	9309      	str	r3, [sp, #36]	; 0x24
 802665e:	eef0 8a67 	vmov.f32	s17, s15
 8026662:	eeb0 8a47 	vmov.f32	s16, s14
 8026666:	e5f3      	b.n	8026250 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026668:	2900      	cmp	r1, #0
 802666a:	f43f ae66 	beq.w	802633a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802666e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026672:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026676:	900a      	str	r0, [sp, #40]	; 0x28
 8026678:	0e00      	lsrs	r0, r0, #24
 802667a:	9013      	str	r0, [sp, #76]	; 0x4c
 802667c:	e65d      	b.n	802633a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802667e:	f113 0801 	adds.w	r8, r3, #1
 8026682:	f53f af74 	bmi.w	802656e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026686:	4540      	cmp	r0, r8
 8026688:	f6ff af71 	blt.w	802656e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802668c:	f11c 0801 	adds.w	r8, ip, #1
 8026690:	f53f af6d 	bmi.w	802656e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026694:	45c6      	cmp	lr, r8
 8026696:	f6ff af6a 	blt.w	802656e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802669a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802669c:	9302      	str	r3, [sp, #8]
 802669e:	b200      	sxth	r0, r0
 80266a0:	fa0f f38e 	sxth.w	r3, lr
 80266a4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80266a8:	e9cd c203 	strd	ip, r2, [sp, #12]
 80266ac:	9301      	str	r3, [sp, #4]
 80266ae:	9000      	str	r0, [sp, #0]
 80266b0:	4633      	mov	r3, r6
 80266b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80266b4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80266b6:	4639      	mov	r1, r7
 80266b8:	f7ff fc32 	bl	8025f20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80266bc:	e757      	b.n	802656e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80266be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80266c0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80266c2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80266c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80266c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266cc:	1427      	asrs	r7, r4, #16
 80266ce:	142b      	asrs	r3, r5, #16
 80266d0:	fb01 7303 	mla	r3, r1, r3, r7
 80266d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80266d6:	18e7      	adds	r7, r4, r3
 80266d8:	5ce3      	ldrb	r3, [r4, r3]
 80266da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80266de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80266e2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80266e6:	2a00      	cmp	r2, #0
 80266e8:	f000 8137 	beq.w	802695a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 80266ec:	f897 e001 	ldrb.w	lr, [r7, #1]
 80266f0:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80266f4:	9410      	str	r4, [sp, #64]	; 0x40
 80266f6:	0e24      	lsrs	r4, r4, #24
 80266f8:	9417      	str	r4, [sp, #92]	; 0x5c
 80266fa:	b170      	cbz	r0, 802671a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 80266fc:	eb07 0e01 	add.w	lr, r7, r1
 8026700:	5c79      	ldrb	r1, [r7, r1]
 8026702:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026706:	910b      	str	r1, [sp, #44]	; 0x2c
 8026708:	0e09      	lsrs	r1, r1, #24
 802670a:	9114      	str	r1, [sp, #80]	; 0x50
 802670c:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026710:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026714:	9111      	str	r1, [sp, #68]	; 0x44
 8026716:	0e09      	lsrs	r1, r1, #24
 8026718:	9118      	str	r1, [sp, #96]	; 0x60
 802671a:	b292      	uxth	r2, r2
 802671c:	b280      	uxth	r0, r0
 802671e:	fb02 f800 	mul.w	r8, r2, r0
 8026722:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026726:	0112      	lsls	r2, r2, #4
 8026728:	eba2 0e08 	sub.w	lr, r2, r8
 802672c:	b280      	uxth	r0, r0
 802672e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026732:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026734:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026736:	fa1f fe8e 	uxth.w	lr, lr
 802673a:	1a12      	subs	r2, r2, r0
 802673c:	b292      	uxth	r2, r2
 802673e:	fb0e f101 	mul.w	r1, lr, r1
 8026742:	fb02 110c 	mla	r1, r2, ip, r1
 8026746:	fb00 1104 	mla	r1, r0, r4, r1
 802674a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802674c:	fb08 1104 	mla	r1, r8, r4, r1
 8026750:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026754:	2900      	cmp	r1, #0
 8026756:	f000 80f5 	beq.w	8026944 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802675a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802675e:	d019      	beq.n	8026794 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026760:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026764:	fb0c fa0a 	mul.w	sl, ip, sl
 8026768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802676c:	fb0c fc03 	mul.w	ip, ip, r3
 8026770:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026774:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026778:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802677c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026780:	4453      	add	r3, sl
 8026782:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026786:	0a1b      	lsrs	r3, r3, #8
 8026788:	0a3f      	lsrs	r7, r7, #8
 802678a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802678e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026792:	433b      	orrs	r3, r7
 8026794:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026796:	2cff      	cmp	r4, #255	; 0xff
 8026798:	d020      	beq.n	80267dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802679a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802679c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80267a0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80267a2:	4367      	muls	r7, r4
 80267a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80267a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80267ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80267b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80267b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267bc:	44bc      	add	ip, r7
 80267be:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80267c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80267c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80267d6:	ea4c 040a 	orr.w	r4, ip, sl
 80267da:	9410      	str	r4, [sp, #64]	; 0x40
 80267dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267de:	2cff      	cmp	r4, #255	; 0xff
 80267e0:	d020      	beq.n	8026824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80267e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80267e4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80267e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267ea:	4367      	muls	r7, r4
 80267ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80267ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80267f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80267fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026800:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026804:	44bc      	add	ip, r7
 8026806:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802680a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802680e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026812:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026816:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802681a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802681e:	ea4c 040a 	orr.w	r4, ip, sl
 8026822:	940b      	str	r4, [sp, #44]	; 0x2c
 8026824:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026826:	2cff      	cmp	r4, #255	; 0xff
 8026828:	d020      	beq.n	802686c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67c>
 802682a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802682c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026830:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026832:	4367      	muls	r7, r4
 8026834:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026836:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802683a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802683c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026840:	fb04 fa0a 	mul.w	sl, r4, sl
 8026844:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026848:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802684c:	44bc      	add	ip, r7
 802684e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026852:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026856:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802685a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802685e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026862:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026866:	ea4c 040a 	orr.w	r4, ip, sl
 802686a:	9411      	str	r4, [sp, #68]	; 0x44
 802686c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802686e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026872:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026874:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026878:	fb0e f707 	mul.w	r7, lr, r7
 802687c:	fb02 770c 	mla	r7, r2, ip, r7
 8026880:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026884:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026886:	fb00 770c 	mla	r7, r0, ip, r7
 802688a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802688e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026890:	fb08 770c 	mla	r7, r8, ip, r7
 8026894:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026898:	fb0e fe0c 	mul.w	lr, lr, ip
 802689c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80268a0:	fb02 e303 	mla	r3, r2, r3, lr
 80268a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80268a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80268a8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80268ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80268ae:	fb00 330a 	mla	r3, r0, sl, r3
 80268b2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80268b6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80268ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80268bc:	f8b9 0000 	ldrh.w	r0, [r9]
 80268c0:	434b      	muls	r3, r1
 80268c2:	0a3f      	lsrs	r7, r7, #8
 80268c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80268cc:	1c59      	adds	r1, r3, #1
 80268ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80268d2:	ea47 070c 	orr.w	r7, r7, ip
 80268d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80268da:	1202      	asrs	r2, r0, #8
 80268dc:	0c3b      	lsrs	r3, r7, #16
 80268de:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80268e2:	b2c9      	uxtb	r1, r1
 80268e4:	fb13 f304 	smulbb	r3, r3, r4
 80268e8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80268ec:	fb02 3201 	mla	r2, r2, r1, r3
 80268f0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80268f4:	10c3      	asrs	r3, r0, #3
 80268f6:	b2ff      	uxtb	r7, r7
 80268f8:	00c0      	lsls	r0, r0, #3
 80268fa:	b292      	uxth	r2, r2
 80268fc:	fb1c fc04 	smulbb	ip, ip, r4
 8026900:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026904:	b2c0      	uxtb	r0, r0
 8026906:	fb17 f704 	smulbb	r7, r7, r4
 802690a:	fb03 c301 	mla	r3, r3, r1, ip
 802690e:	fb00 7001 	mla	r0, r0, r1, r7
 8026912:	f102 0c01 	add.w	ip, r2, #1
 8026916:	b280      	uxth	r0, r0
 8026918:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802691c:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8026920:	1c42      	adds	r2, r0, #1
 8026922:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026926:	b29b      	uxth	r3, r3
 8026928:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802692c:	ea42 020c 	orr.w	r2, r2, ip
 8026930:	f103 0c01 	add.w	ip, r3, #1
 8026934:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026938:	095b      	lsrs	r3, r3, #5
 802693a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802693e:	431a      	orrs	r2, r3
 8026940:	f8a9 2000 	strh.w	r2, [r9]
 8026944:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026946:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026948:	441a      	add	r2, r3
 802694a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802694c:	9231      	str	r2, [sp, #196]	; 0xc4
 802694e:	f109 0902 	add.w	r9, r9, #2
 8026952:	441d      	add	r5, r3
 8026954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026958:	e63d      	b.n	80265d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802695a:	2800      	cmp	r0, #0
 802695c:	f43f aedd 	beq.w	802671a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8026960:	5c79      	ldrb	r1, [r7, r1]
 8026962:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026966:	910b      	str	r1, [sp, #44]	; 0x2c
 8026968:	0e09      	lsrs	r1, r1, #24
 802696a:	9114      	str	r1, [sp, #80]	; 0x50
 802696c:	e6d5      	b.n	802671a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802696e:	b01f      	add	sp, #124	; 0x7c
 8026970:	ecbd 8b08 	vpop	{d8-d11}
 8026974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026978 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802697c:	880e      	ldrh	r6, [r1, #0]
 802697e:	b085      	sub	sp, #20
 8026980:	ea4f 2826 	mov.w	r8, r6, asr #8
 8026984:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8026988:	4691      	mov	r9, r2
 802698a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802698e:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8026992:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026996:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802699a:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 802699e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80269a2:	9200      	str	r2, [sp, #0]
 80269a4:	00f6      	lsls	r6, r6, #3
 80269a6:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 80269aa:	9201      	str	r2, [sp, #4]
 80269ac:	2c00      	cmp	r4, #0
 80269ae:	b2f2      	uxtb	r2, r6
 80269b0:	fb04 560c 	mla	r6, r4, ip, r5
 80269b4:	9202      	str	r2, [sp, #8]
 80269b6:	eb09 0806 	add.w	r8, r9, r6
 80269ba:	db3f      	blt.n	8026a3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80269bc:	45a6      	cmp	lr, r4
 80269be:	dd3d      	ble.n	8026a3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80269c0:	2d00      	cmp	r5, #0
 80269c2:	db39      	blt.n	8026a38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80269c4:	45ac      	cmp	ip, r5
 80269c6:	dd37      	ble.n	8026a38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80269c8:	f819 2006 	ldrb.w	r2, [r9, r6]
 80269cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80269d0:	1c6e      	adds	r6, r5, #1
 80269d2:	d436      	bmi.n	8026a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80269d4:	45b4      	cmp	ip, r6
 80269d6:	dd34      	ble.n	8026a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80269d8:	b3a8      	cbz	r0, 8026a46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 80269da:	f898 6001 	ldrb.w	r6, [r8, #1]
 80269de:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80269e2:	3401      	adds	r4, #1
 80269e4:	d433      	bmi.n	8026a4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80269e6:	45a6      	cmp	lr, r4
 80269e8:	dd31      	ble.n	8026a4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80269ea:	b39f      	cbz	r7, 8026a54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 80269ec:	2d00      	cmp	r5, #0
 80269ee:	eb08 0e0c 	add.w	lr, r8, ip
 80269f2:	db2a      	blt.n	8026a4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80269f4:	45ac      	cmp	ip, r5
 80269f6:	dd28      	ble.n	8026a4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80269f8:	f818 400c 	ldrb.w	r4, [r8, ip]
 80269fc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026a00:	3501      	adds	r5, #1
 8026a02:	d42a      	bmi.n	8026a5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026a04:	45ac      	cmp	ip, r5
 8026a06:	dd28      	ble.n	8026a5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026a08:	b348      	cbz	r0, 8026a5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8026a0a:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8026a0e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8026a12:	280f      	cmp	r0, #15
 8026a14:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026a18:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026a1c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026a20:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026a24:	d801      	bhi.n	8026a2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8026a26:	2f0f      	cmp	r7, #15
 8026a28:	d91b      	bls.n	8026a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8026a2a:	4b7d      	ldr	r3, [pc, #500]	; (8026c20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 8026a2c:	4a7d      	ldr	r2, [pc, #500]	; (8026c24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8026a2e:	487e      	ldr	r0, [pc, #504]	; (8026c28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8026a30:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026a34:	f007 fa74 	bl	802df20 <__assert_func>
 8026a38:	2200      	movs	r2, #0
 8026a3a:	e7c9      	b.n	80269d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8026a3c:	2600      	movs	r6, #0
 8026a3e:	4632      	mov	r2, r6
 8026a40:	e7cf      	b.n	80269e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026a42:	2600      	movs	r6, #0
 8026a44:	e7cd      	b.n	80269e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026a46:	4606      	mov	r6, r0
 8026a48:	e7cb      	b.n	80269e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026a4a:	2400      	movs	r4, #0
 8026a4c:	e7d8      	b.n	8026a00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8026a4e:	2300      	movs	r3, #0
 8026a50:	461c      	mov	r4, r3
 8026a52:	e7de      	b.n	8026a12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026a54:	463b      	mov	r3, r7
 8026a56:	463c      	mov	r4, r7
 8026a58:	e7db      	b.n	8026a12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026a5a:	2300      	movs	r3, #0
 8026a5c:	e7d9      	b.n	8026a12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026a5e:	4603      	mov	r3, r0
 8026a60:	e7d7      	b.n	8026a12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026a62:	b280      	uxth	r0, r0
 8026a64:	b2bf      	uxth	r7, r7
 8026a66:	fb00 fe07 	mul.w	lr, r0, r7
 8026a6a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026a6e:	0100      	lsls	r0, r0, #4
 8026a70:	eba0 0c0e 	sub.w	ip, r0, lr
 8026a74:	b2bf      	uxth	r7, r7
 8026a76:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026a7a:	fa1f fc8c 	uxth.w	ip, ip
 8026a7e:	1bed      	subs	r5, r5, r7
 8026a80:	b2ad      	uxth	r5, r5
 8026a82:	fb0c f00a 	mul.w	r0, ip, sl
 8026a86:	fb05 000b 	mla	r0, r5, fp, r0
 8026a8a:	fb07 0009 	mla	r0, r7, r9, r0
 8026a8e:	fb0e 0008 	mla	r0, lr, r8, r0
 8026a92:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026a96:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026a9a:	9003      	str	r0, [sp, #12]
 8026a9c:	d018      	beq.n	8026ad0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x158>
 8026a9e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026aa2:	fb0b f000 	mul.w	r0, fp, r0
 8026aa6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026aaa:	fb0b fb02 	mul.w	fp, fp, r2
 8026aae:	0a02      	lsrs	r2, r0, #8
 8026ab0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026ab4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026ab8:	4402      	add	r2, r0
 8026aba:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026abe:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026ac2:	0a12      	lsrs	r2, r2, #8
 8026ac4:	0a00      	lsrs	r0, r0, #8
 8026ac6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026aca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ace:	4302      	orrs	r2, r0
 8026ad0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026ad4:	d019      	beq.n	8026b0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x192>
 8026ad6:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026ada:	fb0a fb0b 	mul.w	fp, sl, fp
 8026ade:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ae2:	fb0a fa06 	mul.w	sl, sl, r6
 8026ae6:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026aea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026aee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026af2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026af6:	445e      	add	r6, fp
 8026af8:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026afc:	0a36      	lsrs	r6, r6, #8
 8026afe:	0a00      	lsrs	r0, r0, #8
 8026b00:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026b04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026b08:	4306      	orrs	r6, r0
 8026b0a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026b0e:	d019      	beq.n	8026b44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1cc>
 8026b10:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026b14:	fb09 fa0a 	mul.w	sl, r9, sl
 8026b18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026b1c:	fb09 f904 	mul.w	r9, r9, r4
 8026b20:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026b24:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026b28:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026b2c:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026b30:	4454      	add	r4, sl
 8026b32:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026b36:	0a24      	lsrs	r4, r4, #8
 8026b38:	0a00      	lsrs	r0, r0, #8
 8026b3a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026b3e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026b42:	4304      	orrs	r4, r0
 8026b44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026b48:	d019      	beq.n	8026b7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x206>
 8026b4a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026b4e:	fb08 f909 	mul.w	r9, r8, r9
 8026b52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b56:	fb08 f803 	mul.w	r8, r8, r3
 8026b5a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026b5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026b62:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026b66:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026b6a:	444b      	add	r3, r9
 8026b6c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026b70:	0a1b      	lsrs	r3, r3, #8
 8026b72:	0a00      	lsrs	r0, r0, #8
 8026b74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026b78:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026b7c:	4303      	orrs	r3, r0
 8026b7e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026b82:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026b86:	fb0c f808 	mul.w	r8, ip, r8
 8026b8a:	fb05 8800 	mla	r8, r5, r0, r8
 8026b8e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026b92:	fb07 8800 	mla	r8, r7, r0, r8
 8026b96:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026b9a:	fb0e 8000 	mla	r0, lr, r0, r8
 8026b9e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ba2:	fb0c f606 	mul.w	r6, ip, r6
 8026ba6:	0a00      	lsrs	r0, r0, #8
 8026ba8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026bac:	fb05 6202 	mla	r2, r5, r2, r6
 8026bb0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026bb4:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026bb8:	fb07 2700 	mla	r7, r7, r0, r2
 8026bbc:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026bc0:	9b03      	ldr	r3, [sp, #12]
 8026bc2:	9d00      	ldr	r5, [sp, #0]
 8026bc4:	9a02      	ldr	r2, [sp, #8]
 8026bc6:	fb0e 7000 	mla	r0, lr, r0, r7
 8026bca:	43dc      	mvns	r4, r3
 8026bcc:	9b01      	ldr	r3, [sp, #4]
 8026bce:	b2e4      	uxtb	r4, r4
 8026bd0:	0a00      	lsrs	r0, r0, #8
 8026bd2:	4363      	muls	r3, r4
 8026bd4:	4365      	muls	r5, r4
 8026bd6:	4362      	muls	r2, r4
 8026bd8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026bdc:	ea48 0000 	orr.w	r0, r8, r0
 8026be0:	4614      	mov	r4, r2
 8026be2:	1c5e      	adds	r6, r3, #1
 8026be4:	1c6a      	adds	r2, r5, #1
 8026be6:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026bea:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8026bee:	0a03      	lsrs	r3, r0, #8
 8026bf0:	0c02      	lsrs	r2, r0, #16
 8026bf2:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026bf6:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026bfa:	00db      	lsls	r3, r3, #3
 8026bfc:	0212      	lsls	r2, r2, #8
 8026bfe:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026c02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026c06:	4313      	orrs	r3, r2
 8026c08:	1c62      	adds	r2, r4, #1
 8026c0a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026c0e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8026c12:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8026c16:	4318      	orrs	r0, r3
 8026c18:	8008      	strh	r0, [r1, #0]
 8026c1a:	b005      	add	sp, #20
 8026c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c20:	08032c55 	.word	0x08032c55
 8026c24:	08033222 	.word	0x08033222
 8026c28:	08032cd9 	.word	0x08032cd9

08026c2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c30:	ed2d 8b08 	vpush	{d8-d11}
 8026c34:	b09b      	sub	sp, #108	; 0x6c
 8026c36:	eeb0 aa40 	vmov.f32	s20, s0
 8026c3a:	9218      	str	r2, [sp, #96]	; 0x60
 8026c3c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026c3e:	9116      	str	r1, [sp, #88]	; 0x58
 8026c40:	9307      	str	r3, [sp, #28]
 8026c42:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026c46:	9019      	str	r0, [sp, #100]	; 0x64
 8026c48:	6850      	ldr	r0, [r2, #4]
 8026c4a:	6812      	ldr	r2, [r2, #0]
 8026c4c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8026c4e:	fb00 1303 	mla	r3, r0, r3, r1
 8026c52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026c56:	930a      	str	r3, [sp, #40]	; 0x28
 8026c58:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c5a:	681b      	ldr	r3, [r3, #0]
 8026c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8026c5e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c60:	685e      	ldr	r6, [r3, #4]
 8026c62:	eef0 9a60 	vmov.f32	s19, s1
 8026c66:	eeb0 9a41 	vmov.f32	s18, s2
 8026c6a:	eeb0 8a62 	vmov.f32	s16, s5
 8026c6e:	eef0 8a43 	vmov.f32	s17, s6
 8026c72:	eef0 ba44 	vmov.f32	s23, s8
 8026c76:	eeb0 ba64 	vmov.f32	s22, s9
 8026c7a:	eef0 aa45 	vmov.f32	s21, s10
 8026c7e:	3604      	adds	r6, #4
 8026c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026c82:	2b00      	cmp	r3, #0
 8026c84:	dc03      	bgt.n	8026c8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026c86:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	f340 8373 	ble.w	8027374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026c8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c94:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c98:	1e48      	subs	r0, r1, #1
 8026c9a:	1e57      	subs	r7, r2, #1
 8026c9c:	9b07      	ldr	r3, [sp, #28]
 8026c9e:	2b00      	cmp	r3, #0
 8026ca0:	f340 8190 	ble.w	8026fc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8026ca4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026ca6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026caa:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026cae:	d406      	bmi.n	8026cbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026cb0:	4584      	cmp	ip, r0
 8026cb2:	da04      	bge.n	8026cbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026cb4:	2b00      	cmp	r3, #0
 8026cb6:	db02      	blt.n	8026cbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026cb8:	42bb      	cmp	r3, r7
 8026cba:	f2c0 8184 	blt.w	8026fc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8026cbe:	f11c 0c01 	adds.w	ip, ip, #1
 8026cc2:	f100 8172 	bmi.w	8026faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026cc6:	4561      	cmp	r1, ip
 8026cc8:	f2c0 816f 	blt.w	8026faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026ccc:	3301      	adds	r3, #1
 8026cce:	f100 816c 	bmi.w	8026faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026cd2:	429a      	cmp	r2, r3
 8026cd4:	f2c0 8169 	blt.w	8026faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026cd8:	9b07      	ldr	r3, [sp, #28]
 8026cda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026cdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8026cde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ce0:	2b00      	cmp	r3, #0
 8026ce2:	f340 818e 	ble.w	8027002 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8026ce6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026ce8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026cec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026cee:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026cf2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026cf4:	141b      	asrs	r3, r3, #16
 8026cf6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026cfa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026cfe:	f100 81d1 	bmi.w	80270a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026d02:	f101 38ff 	add.w	r8, r1, #4294967295
 8026d06:	4543      	cmp	r3, r8
 8026d08:	f280 81cc 	bge.w	80270a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026d0c:	f1bc 0f00 	cmp.w	ip, #0
 8026d10:	f2c0 81c8 	blt.w	80270a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026d14:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026d18:	45c4      	cmp	ip, r8
 8026d1a:	f280 81c3 	bge.w	80270a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026d1e:	b209      	sxth	r1, r1
 8026d20:	fb0c 3301 	mla	r3, ip, r1, r3
 8026d24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026d26:	eb04 0803 	add.w	r8, r4, r3
 8026d2a:	5ce3      	ldrb	r3, [r4, r3]
 8026d2c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026d30:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026d34:	2a00      	cmp	r2, #0
 8026d36:	f000 81aa 	beq.w	802708e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8026d3a:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026d3e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026d42:	940b      	str	r4, [sp, #44]	; 0x2c
 8026d44:	0e24      	lsrs	r4, r4, #24
 8026d46:	9412      	str	r4, [sp, #72]	; 0x48
 8026d48:	b178      	cbz	r0, 8026d6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026d4a:	eb08 0c01 	add.w	ip, r8, r1
 8026d4e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026d52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026d56:	9108      	str	r1, [sp, #32]
 8026d58:	0e09      	lsrs	r1, r1, #24
 8026d5a:	9110      	str	r1, [sp, #64]	; 0x40
 8026d5c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026d60:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026d64:	910c      	str	r1, [sp, #48]	; 0x30
 8026d66:	0e09      	lsrs	r1, r1, #24
 8026d68:	9113      	str	r1, [sp, #76]	; 0x4c
 8026d6a:	b292      	uxth	r2, r2
 8026d6c:	b280      	uxth	r0, r0
 8026d6e:	fb02 f900 	mul.w	r9, r2, r0
 8026d72:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026d76:	0112      	lsls	r2, r2, #4
 8026d78:	eba2 0809 	sub.w	r8, r2, r9
 8026d7c:	b280      	uxth	r0, r0
 8026d7e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026d82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026d84:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026d86:	fa1f f888 	uxth.w	r8, r8
 8026d8a:	1a12      	subs	r2, r2, r0
 8026d8c:	b292      	uxth	r2, r2
 8026d8e:	fb08 f101 	mul.w	r1, r8, r1
 8026d92:	fb02 110e 	mla	r1, r2, lr, r1
 8026d96:	fb00 1104 	mla	r1, r0, r4, r1
 8026d9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026d9c:	fb09 1104 	mla	r1, r9, r4, r1
 8026da0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026da4:	2900      	cmp	r1, #0
 8026da6:	f000 80f5 	beq.w	8026f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026daa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026dae:	d01b      	beq.n	8026de8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8026db0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026db4:	fb0e fa0a 	mul.w	sl, lr, sl
 8026db8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026dbc:	fb0e fe03 	mul.w	lr, lr, r3
 8026dc0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026dc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026dc8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026dcc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026dd0:	4453      	add	r3, sl
 8026dd2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026dd6:	0a1b      	lsrs	r3, r3, #8
 8026dd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ddc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026de0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026de4:	ea43 030c 	orr.w	r3, r3, ip
 8026de8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026dea:	2cff      	cmp	r4, #255	; 0xff
 8026dec:	d021      	beq.n	8026e32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026dee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026df0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026df4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026df6:	fb04 fb0b 	mul.w	fp, r4, fp
 8026dfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026dfc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026e00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026e02:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e06:	fb04 fa0a 	mul.w	sl, r4, sl
 8026e0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e0e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e12:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e16:	44de      	add	lr, fp
 8026e18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e2c:	ea4e 040a 	orr.w	r4, lr, sl
 8026e30:	940b      	str	r4, [sp, #44]	; 0x2c
 8026e32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026e34:	2cff      	cmp	r4, #255	; 0xff
 8026e36:	d021      	beq.n	8026e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026e38:	9c08      	ldr	r4, [sp, #32]
 8026e3a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026e3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026e40:	fb04 fb0b 	mul.w	fp, r4, fp
 8026e44:	9c08      	ldr	r4, [sp, #32]
 8026e46:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026e4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026e4c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e50:	fb04 fa0a 	mul.w	sl, r4, sl
 8026e54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e58:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e5c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e60:	44de      	add	lr, fp
 8026e62:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e76:	ea4e 040a 	orr.w	r4, lr, sl
 8026e7a:	9408      	str	r4, [sp, #32]
 8026e7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026e7e:	2cff      	cmp	r4, #255	; 0xff
 8026e80:	d021      	beq.n	8026ec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8026e82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e84:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026e88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026e8a:	fb04 fb0b 	mul.w	fp, r4, fp
 8026e8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e90:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026e94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026e96:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e9a:	fb04 fa0a 	mul.w	sl, r4, sl
 8026e9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ea2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ea6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026eaa:	44de      	add	lr, fp
 8026eac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026eb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026eb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026eb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ebc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026ec0:	ea4e 040a 	orr.w	r4, lr, sl
 8026ec4:	940c      	str	r4, [sp, #48]	; 0x30
 8026ec6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ec8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026ecc:	9c08      	ldr	r4, [sp, #32]
 8026ece:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026ed2:	fb08 fc0c 	mul.w	ip, r8, ip
 8026ed6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026eda:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026ede:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026ee0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026ee4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026ee8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026eea:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026eee:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026ef2:	fb08 f80e 	mul.w	r8, r8, lr
 8026ef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026efa:	fb02 8303 	mla	r3, r2, r3, r8
 8026efe:	9a08      	ldr	r2, [sp, #32]
 8026f00:	f8b7 8000 	ldrh.w	r8, [r7]
 8026f04:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026f0a:	fb00 330a 	mla	r3, r0, sl, r3
 8026f0e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8026f12:	fb09 3900 	mla	r9, r9, r0, r3
 8026f16:	43c9      	mvns	r1, r1
 8026f18:	ea4f 2228 	mov.w	r2, r8, asr #8
 8026f1c:	fa5f fe81 	uxtb.w	lr, r1
 8026f20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f28:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026f2c:	fb02 f20e 	mul.w	r2, r2, lr
 8026f30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026f34:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026f38:	ea4c 0c09 	orr.w	ip, ip, r9
 8026f3c:	1c53      	adds	r3, r2, #1
 8026f3e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026f42:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026f46:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8026f4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026f4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026f52:	4a63      	ldr	r2, [pc, #396]	; (80270e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8026f54:	fb00 f00e 	mul.w	r0, r0, lr
 8026f58:	b2db      	uxtb	r3, r3
 8026f5a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8026f5e:	1c43      	adds	r3, r0, #1
 8026f60:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026f64:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026f68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026f6c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026f70:	b2c9      	uxtb	r1, r1
 8026f72:	00db      	lsls	r3, r3, #3
 8026f74:	fb01 f10e 	mul.w	r1, r1, lr
 8026f78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026f7c:	4313      	orrs	r3, r2
 8026f7e:	1c4a      	adds	r2, r1, #1
 8026f80:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026f84:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026f88:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026f8c:	ea4c 0c03 	orr.w	ip, ip, r3
 8026f90:	f8a7 c000 	strh.w	ip, [r7]
 8026f94:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026f96:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026f98:	441a      	add	r2, r3
 8026f9a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026f9c:	922d      	str	r2, [sp, #180]	; 0xb4
 8026f9e:	441d      	add	r5, r3
 8026fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026fa2:	3b01      	subs	r3, #1
 8026fa4:	3702      	adds	r7, #2
 8026fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8026fa8:	e699      	b.n	8026cde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026faa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026fac:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026fae:	441c      	add	r4, r3
 8026fb0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026fb2:	942d      	str	r4, [sp, #180]	; 0xb4
 8026fb4:	441d      	add	r5, r3
 8026fb6:	9b07      	ldr	r3, [sp, #28]
 8026fb8:	3b01      	subs	r3, #1
 8026fba:	9307      	str	r3, [sp, #28]
 8026fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fbe:	3302      	adds	r3, #2
 8026fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8026fc2:	e66b      	b.n	8026c9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026fc4:	d024      	beq.n	8027010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026fc6:	9b07      	ldr	r3, [sp, #28]
 8026fc8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8026fca:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026fcc:	3b01      	subs	r3, #1
 8026fce:	fb00 4003 	mla	r0, r0, r3, r4
 8026fd2:	1400      	asrs	r0, r0, #16
 8026fd4:	f53f ae80 	bmi.w	8026cd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026fd8:	3901      	subs	r1, #1
 8026fda:	4288      	cmp	r0, r1
 8026fdc:	f6bf ae7c 	bge.w	8026cd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026fe0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8026fe2:	fb01 5303 	mla	r3, r1, r3, r5
 8026fe6:	141b      	asrs	r3, r3, #16
 8026fe8:	f53f ae76 	bmi.w	8026cd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026fec:	3a01      	subs	r2, #1
 8026fee:	4293      	cmp	r3, r2
 8026ff0:	f6bf ae72 	bge.w	8026cd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026ff4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026ff8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026ffc:	f1bb 0f00 	cmp.w	fp, #0
 8027000:	dc70      	bgt.n	80270e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027002:	9b07      	ldr	r3, [sp, #28]
 8027004:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802700a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802700e:	930a      	str	r3, [sp, #40]	; 0x28
 8027010:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027012:	2b00      	cmp	r3, #0
 8027014:	f340 81ae 	ble.w	8027374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027018:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802701c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027020:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027024:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027026:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802702a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802702e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027032:	eef0 6a48 	vmov.f32	s13, s16
 8027036:	ee69 7a27 	vmul.f32	s15, s18, s15
 802703a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802703e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027042:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8027046:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802704a:	eef0 6a68 	vmov.f32	s13, s17
 802704e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027052:	ee18 2a10 	vmov	r2, s16
 8027056:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802705a:	fb92 f3f3 	sdiv	r3, r2, r3
 802705e:	ee18 2a90 	vmov	r2, s17
 8027062:	932f      	str	r3, [sp, #188]	; 0xbc
 8027064:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027066:	fb92 f3f3 	sdiv	r3, r2, r3
 802706a:	9330      	str	r3, [sp, #192]	; 0xc0
 802706c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802706e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027070:	3b01      	subs	r3, #1
 8027072:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027076:	9316      	str	r3, [sp, #88]	; 0x58
 8027078:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802707a:	bf08      	it	eq
 802707c:	4613      	moveq	r3, r2
 802707e:	ee16 5a90 	vmov	r5, s13
 8027082:	9307      	str	r3, [sp, #28]
 8027084:	eef0 8a67 	vmov.f32	s17, s15
 8027088:	eeb0 8a47 	vmov.f32	s16, s14
 802708c:	e5f8      	b.n	8026c80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802708e:	2800      	cmp	r0, #0
 8027090:	f43f ae6b 	beq.w	8026d6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027094:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027098:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802709c:	9108      	str	r1, [sp, #32]
 802709e:	0e09      	lsrs	r1, r1, #24
 80270a0:	9110      	str	r1, [sp, #64]	; 0x40
 80270a2:	e662      	b.n	8026d6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80270a4:	f113 0801 	adds.w	r8, r3, #1
 80270a8:	f53f af74 	bmi.w	8026f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80270ac:	4541      	cmp	r1, r8
 80270ae:	f6ff af71 	blt.w	8026f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80270b2:	f11c 0801 	adds.w	r8, ip, #1
 80270b6:	f53f af6d 	bmi.w	8026f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80270ba:	45c6      	cmp	lr, r8
 80270bc:	f6ff af6a 	blt.w	8026f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80270c0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80270c4:	b209      	sxth	r1, r1
 80270c6:	fa0f f38e 	sxth.w	r3, lr
 80270ca:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80270ce:	9301      	str	r3, [sp, #4]
 80270d0:	9100      	str	r1, [sp, #0]
 80270d2:	4633      	mov	r3, r6
 80270d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80270d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80270d8:	4639      	mov	r1, r7
 80270da:	f7ff fc4d 	bl	8026978 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80270de:	e759      	b.n	8026f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80270e0:	fffff800 	.word	0xfffff800
 80270e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80270e6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80270e8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80270ec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80270ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80270f2:	1427      	asrs	r7, r4, #16
 80270f4:	142b      	asrs	r3, r5, #16
 80270f6:	fb01 7303 	mla	r3, r1, r3, r7
 80270fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80270fc:	18e7      	adds	r7, r4, r3
 80270fe:	5ce3      	ldrb	r3, [r4, r3]
 8027100:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027104:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027108:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802710c:	2a00      	cmp	r2, #0
 802710e:	f000 8127 	beq.w	8027360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027112:	f897 e001 	ldrb.w	lr, [r7, #1]
 8027116:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802711a:	940d      	str	r4, [sp, #52]	; 0x34
 802711c:	0e24      	lsrs	r4, r4, #24
 802711e:	9414      	str	r4, [sp, #80]	; 0x50
 8027120:	b170      	cbz	r0, 8027140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027122:	eb07 0e01 	add.w	lr, r7, r1
 8027126:	5c79      	ldrb	r1, [r7, r1]
 8027128:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802712c:	9109      	str	r1, [sp, #36]	; 0x24
 802712e:	0e09      	lsrs	r1, r1, #24
 8027130:	9111      	str	r1, [sp, #68]	; 0x44
 8027132:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8027136:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802713a:	910e      	str	r1, [sp, #56]	; 0x38
 802713c:	0e09      	lsrs	r1, r1, #24
 802713e:	9115      	str	r1, [sp, #84]	; 0x54
 8027140:	b292      	uxth	r2, r2
 8027142:	b280      	uxth	r0, r0
 8027144:	fb02 f800 	mul.w	r8, r2, r0
 8027148:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802714c:	0112      	lsls	r2, r2, #4
 802714e:	eba2 0e08 	sub.w	lr, r2, r8
 8027152:	b280      	uxth	r0, r0
 8027154:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802715a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802715c:	fa1f fe8e 	uxth.w	lr, lr
 8027160:	1a09      	subs	r1, r1, r0
 8027162:	b289      	uxth	r1, r1
 8027164:	fb0e f202 	mul.w	r2, lr, r2
 8027168:	fb01 220c 	mla	r2, r1, ip, r2
 802716c:	fb00 2204 	mla	r2, r0, r4, r2
 8027170:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027172:	fb08 2204 	mla	r2, r8, r4, r2
 8027176:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802717a:	2a00      	cmp	r2, #0
 802717c:	f000 80e5 	beq.w	802734a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027180:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027184:	d019      	beq.n	80271ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8027186:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802718a:	fb0c fa0a 	mul.w	sl, ip, sl
 802718e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027192:	fb0c fc03 	mul.w	ip, ip, r3
 8027196:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802719a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802719e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80271a2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80271a6:	4453      	add	r3, sl
 80271a8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80271ac:	0a1b      	lsrs	r3, r3, #8
 80271ae:	0a3f      	lsrs	r7, r7, #8
 80271b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80271b4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80271b8:	433b      	orrs	r3, r7
 80271ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80271bc:	2cff      	cmp	r4, #255	; 0xff
 80271be:	d020      	beq.n	8027202 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80271c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80271c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80271c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80271c8:	4367      	muls	r7, r4
 80271ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80271cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80271d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80271d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80271d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80271da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80271de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271e2:	44bc      	add	ip, r7
 80271e4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80271e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80271ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80271f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271fc:	ea4c 040a 	orr.w	r4, ip, sl
 8027200:	940d      	str	r4, [sp, #52]	; 0x34
 8027202:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027204:	2cff      	cmp	r4, #255	; 0xff
 8027206:	d020      	beq.n	802724a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8027208:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802720a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802720e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027210:	4367      	muls	r7, r4
 8027212:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027214:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027218:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802721a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802721e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027222:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027226:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802722a:	44bc      	add	ip, r7
 802722c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027230:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027234:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027238:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802723c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027240:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027244:	ea4c 040a 	orr.w	r4, ip, sl
 8027248:	9409      	str	r4, [sp, #36]	; 0x24
 802724a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802724c:	2cff      	cmp	r4, #255	; 0xff
 802724e:	d020      	beq.n	8027292 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8027250:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027252:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027256:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027258:	4367      	muls	r7, r4
 802725a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802725c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027260:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027262:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027266:	fb04 fa0a 	mul.w	sl, r4, sl
 802726a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802726e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027272:	44bc      	add	ip, r7
 8027274:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027278:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802727c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027280:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027284:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027288:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802728c:	ea4c 040a 	orr.w	r4, ip, sl
 8027290:	940e      	str	r4, [sp, #56]	; 0x38
 8027292:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027294:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027298:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802729a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802729e:	fb0e f707 	mul.w	r7, lr, r7
 80272a2:	fb01 770c 	mla	r7, r1, ip, r7
 80272a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80272aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80272ac:	fb00 770c 	mla	r7, r0, ip, r7
 80272b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80272b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80272b6:	fb08 770c 	mla	r7, r8, ip, r7
 80272ba:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80272be:	fb0e fe0c 	mul.w	lr, lr, ip
 80272c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80272c6:	fb01 e303 	mla	r3, r1, r3, lr
 80272ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80272cc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80272d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80272d2:	fb00 330a 	mla	r3, r0, sl, r3
 80272d6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80272da:	fb08 3c0c 	mla	ip, r8, ip, r3
 80272de:	f8b9 3000 	ldrh.w	r3, [r9]
 80272e2:	43d2      	mvns	r2, r2
 80272e4:	1218      	asrs	r0, r3, #8
 80272e6:	b2d2      	uxtb	r2, r2
 80272e8:	10d9      	asrs	r1, r3, #3
 80272ea:	0a3f      	lsrs	r7, r7, #8
 80272ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80272f4:	00db      	lsls	r3, r3, #3
 80272f6:	4350      	muls	r0, r2
 80272f8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80272fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027300:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027304:	b2db      	uxtb	r3, r3
 8027306:	ea47 070c 	orr.w	r7, r7, ip
 802730a:	4351      	muls	r1, r2
 802730c:	4353      	muls	r3, r2
 802730e:	1c42      	adds	r2, r0, #1
 8027310:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027314:	0c3a      	lsrs	r2, r7, #16
 8027316:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802731a:	4a19      	ldr	r2, [pc, #100]	; (8027380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 802731c:	b2c0      	uxtb	r0, r0
 802731e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027322:	1c4a      	adds	r2, r1, #1
 8027324:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027328:	0a3a      	lsrs	r2, r7, #8
 802732a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802732e:	00c9      	lsls	r1, r1, #3
 8027330:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027334:	4301      	orrs	r1, r0
 8027336:	1c58      	adds	r0, r3, #1
 8027338:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802733c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027340:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027344:	4308      	orrs	r0, r1
 8027346:	f8a9 0000 	strh.w	r0, [r9]
 802734a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802734c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802734e:	441a      	add	r2, r3
 8027350:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027352:	922d      	str	r2, [sp, #180]	; 0xb4
 8027354:	f109 0902 	add.w	r9, r9, #2
 8027358:	441d      	add	r5, r3
 802735a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802735e:	e64d      	b.n	8026ffc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8027360:	2800      	cmp	r0, #0
 8027362:	f43f aeed 	beq.w	8027140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027366:	5c79      	ldrb	r1, [r7, r1]
 8027368:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802736c:	9109      	str	r1, [sp, #36]	; 0x24
 802736e:	0e09      	lsrs	r1, r1, #24
 8027370:	9111      	str	r1, [sp, #68]	; 0x44
 8027372:	e6e5      	b.n	8027140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027374:	b01b      	add	sp, #108	; 0x6c
 8027376:	ecbd 8b08 	vpop	{d8-d11}
 802737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802737e:	bf00      	nop
 8027380:	fffff800 	.word	0xfffff800

08027384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027388:	b085      	sub	sp, #20
 802738a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802738e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027392:	9103      	str	r1, [sp, #12]
 8027394:	fb05 7106 	mla	r1, r5, r6, r7
 8027398:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 802739c:	2d00      	cmp	r5, #0
 802739e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80273a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80273a6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80273aa:	9401      	str	r4, [sp, #4]
 80273ac:	eb03 0901 	add.w	r9, r3, r1
 80273b0:	f2c0 80c0 	blt.w	8027534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80273b4:	45a8      	cmp	r8, r5
 80273b6:	f340 80bd 	ble.w	8027534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80273ba:	2f00      	cmp	r7, #0
 80273bc:	f2c0 80b6 	blt.w	802752c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80273c0:	42be      	cmp	r6, r7
 80273c2:	f340 80b3 	ble.w	802752c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80273c6:	f813 c001 	ldrb.w	ip, [r3, r1]
 80273ca:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80273ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80273d2:	d019      	beq.n	8027408 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80273d4:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80273d8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80273dc:	435a      	muls	r2, r3
 80273de:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80273e2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80273e6:	fb0c f403 	mul.w	r4, ip, r3
 80273ea:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80273ee:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80273f2:	441a      	add	r2, r3
 80273f4:	f104 0320 	add.w	r3, r4, #32
 80273f8:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80273fc:	0a1b      	lsrs	r3, r3, #8
 80273fe:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027402:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027406:	4319      	orrs	r1, r3
 8027408:	b289      	uxth	r1, r1
 802740a:	1c7b      	adds	r3, r7, #1
 802740c:	f100 8097 	bmi.w	802753e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8027410:	429e      	cmp	r6, r3
 8027412:	f340 8094 	ble.w	802753e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8027416:	2800      	cmp	r0, #0
 8027418:	f000 8094 	beq.w	8027544 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 802741c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027420:	9b01      	ldr	r3, [sp, #4]
 8027422:	2cff      	cmp	r4, #255	; 0xff
 8027424:	885b      	ldrh	r3, [r3, #2]
 8027426:	d01b      	beq.n	8027460 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8027428:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802742c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027430:	fb0a f202 	mul.w	r2, sl, r2
 8027434:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027438:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802743c:	fb04 fa03 	mul.w	sl, r4, r3
 8027440:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027444:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027448:	441a      	add	r2, r3
 802744a:	f10a 0320 	add.w	r3, sl, #32
 802744e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027452:	0a1b      	lsrs	r3, r3, #8
 8027454:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8027458:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802745c:	ea4b 0303 	orr.w	r3, fp, r3
 8027460:	b29b      	uxth	r3, r3
 8027462:	3501      	adds	r5, #1
 8027464:	d474      	bmi.n	8027550 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8027466:	45a8      	cmp	r8, r5
 8027468:	dd72      	ble.n	8027550 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802746a:	f1be 0f00 	cmp.w	lr, #0
 802746e:	f000 8120 	beq.w	80276b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8027472:	2f00      	cmp	r7, #0
 8027474:	db69      	blt.n	802754a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8027476:	42be      	cmp	r6, r7
 8027478:	dd67      	ble.n	802754a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802747a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802747e:	9a01      	ldr	r2, [sp, #4]
 8027480:	2dff      	cmp	r5, #255	; 0xff
 8027482:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8027486:	d01c      	beq.n	80274c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8027488:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 802748c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027490:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027494:	fb05 fa0b 	mul.w	sl, r5, fp
 8027498:	fb08 f802 	mul.w	r8, r8, r2
 802749c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80274a0:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80274a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80274a8:	4490      	add	r8, r2
 80274aa:	f10a 0220 	add.w	r2, sl, #32
 80274ae:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80274b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80274b6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80274ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80274be:	ea4b 0b0a 	orr.w	fp, fp, sl
 80274c2:	fa1f fb8b 	uxth.w	fp, fp
 80274c6:	3701      	adds	r7, #1
 80274c8:	d447      	bmi.n	802755a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80274ca:	42be      	cmp	r6, r7
 80274cc:	dd45      	ble.n	802755a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80274ce:	2800      	cmp	r0, #0
 80274d0:	d046      	beq.n	8027560 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80274d2:	3601      	adds	r6, #1
 80274d4:	9a01      	ldr	r2, [sp, #4]
 80274d6:	f819 7006 	ldrb.w	r7, [r9, r6]
 80274da:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80274de:	2fff      	cmp	r7, #255	; 0xff
 80274e0:	d01a      	beq.n	8027518 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80274e2:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80274e6:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80274ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80274ee:	fb07 f902 	mul.w	r9, r7, r2
 80274f2:	fb08 f806 	mul.w	r8, r8, r6
 80274f6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80274fa:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80274fe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027502:	44b0      	add	r8, r6
 8027504:	f109 0620 	add.w	r6, r9, #32
 8027508:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802750c:	0a36      	lsrs	r6, r6, #8
 802750e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027512:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8027516:	4332      	orrs	r2, r6
 8027518:	b292      	uxth	r2, r2
 802751a:	280f      	cmp	r0, #15
 802751c:	d922      	bls.n	8027564 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 802751e:	4b69      	ldr	r3, [pc, #420]	; (80276c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8027520:	4a69      	ldr	r2, [pc, #420]	; (80276c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8027522:	486a      	ldr	r0, [pc, #424]	; (80276cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8027524:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8027528:	f006 fcfa 	bl	802df20 <__assert_func>
 802752c:	f04f 0c00 	mov.w	ip, #0
 8027530:	4661      	mov	r1, ip
 8027532:	e76a      	b.n	802740a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8027534:	2400      	movs	r4, #0
 8027536:	46a4      	mov	ip, r4
 8027538:	4623      	mov	r3, r4
 802753a:	4621      	mov	r1, r4
 802753c:	e791      	b.n	8027462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802753e:	2400      	movs	r4, #0
 8027540:	4623      	mov	r3, r4
 8027542:	e78e      	b.n	8027462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8027544:	4604      	mov	r4, r0
 8027546:	4603      	mov	r3, r0
 8027548:	e78b      	b.n	8027462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802754a:	2500      	movs	r5, #0
 802754c:	46ab      	mov	fp, r5
 802754e:	e7ba      	b.n	80274c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8027550:	2700      	movs	r7, #0
 8027552:	463d      	mov	r5, r7
 8027554:	463a      	mov	r2, r7
 8027556:	46bb      	mov	fp, r7
 8027558:	e7df      	b.n	802751a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802755a:	2700      	movs	r7, #0
 802755c:	463a      	mov	r2, r7
 802755e:	e7dc      	b.n	802751a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8027560:	4607      	mov	r7, r0
 8027562:	4602      	mov	r2, r0
 8027564:	f1be 0f0f 	cmp.w	lr, #15
 8027568:	d8d9      	bhi.n	802751e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802756a:	b286      	uxth	r6, r0
 802756c:	fa1f f98e 	uxth.w	r9, lr
 8027570:	fb06 f809 	mul.w	r8, r6, r9
 8027574:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027578:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802757c:	0136      	lsls	r6, r6, #4
 802757e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027582:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027586:	9601      	str	r6, [sp, #4]
 8027588:	ea4a 0101 	orr.w	r1, sl, r1
 802758c:	fa1f f689 	uxth.w	r6, r9
 8027590:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027594:	fb10 f90e 	smulbb	r9, r0, lr
 8027598:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802759c:	9602      	str	r6, [sp, #8]
 802759e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80275a2:	460e      	mov	r6, r1
 80275a4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80275a8:	f1ce 0110 	rsb	r1, lr, #16
 80275ac:	1a09      	subs	r1, r1, r0
 80275ae:	ea4a 0303 	orr.w	r3, sl, r3
 80275b2:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80275b6:	4343      	muls	r3, r0
 80275b8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80275bc:	9801      	ldr	r0, [sp, #4]
 80275be:	fb01 3106 	mla	r1, r1, r6, r3
 80275c2:	9e02      	ldr	r6, [sp, #8]
 80275c4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80275c8:	1b80      	subs	r0, r0, r6
 80275ca:	9e01      	ldr	r6, [sp, #4]
 80275cc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80275d0:	eba6 0608 	sub.w	r6, r6, r8
 80275d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80275d8:	b2b6      	uxth	r6, r6
 80275da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80275de:	ea4a 0202 	orr.w	r2, sl, r2
 80275e2:	b280      	uxth	r0, r0
 80275e4:	4374      	muls	r4, r6
 80275e6:	fb09 1302 	mla	r3, r9, r2, r1
 80275ea:	fb0c 4400 	mla	r4, ip, r0, r4
 80275ee:	9a03      	ldr	r2, [sp, #12]
 80275f0:	9802      	ldr	r0, [sp, #8]
 80275f2:	8811      	ldrh	r1, [r2, #0]
 80275f4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80275f8:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80275fc:	fb00 4505 	mla	r5, r0, r5, r4
 8027600:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027604:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027608:	fb08 5707 	mla	r7, r8, r7, r5
 802760c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8027610:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027614:	b292      	uxth	r2, r2
 8027616:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802761a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802761e:	4357      	muls	r7, r2
 8027620:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8027624:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027628:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802762c:	f107 0801 	add.w	r8, r7, #1
 8027630:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027634:	ea43 0e0e 	orr.w	lr, r3, lr
 8027638:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802763c:	fa1f f38e 	uxth.w	r3, lr
 8027640:	1208      	asrs	r0, r1, #8
 8027642:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8027646:	b2ff      	uxtb	r7, r7
 8027648:	121c      	asrs	r4, r3, #8
 802764a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802764e:	fb10 f007 	smulbb	r0, r0, r7
 8027652:	10cd      	asrs	r5, r1, #3
 8027654:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027658:	fb04 0402 	mla	r4, r4, r2, r0
 802765c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027660:	10d8      	asrs	r0, r3, #3
 8027662:	fb15 f507 	smulbb	r5, r5, r7
 8027666:	00db      	lsls	r3, r3, #3
 8027668:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802766c:	fb00 5002 	mla	r0, r0, r2, r5
 8027670:	b2dd      	uxtb	r5, r3
 8027672:	00cb      	lsls	r3, r1, #3
 8027674:	b2db      	uxtb	r3, r3
 8027676:	fb13 f307 	smulbb	r3, r3, r7
 802767a:	fb05 3202 	mla	r2, r5, r2, r3
 802767e:	b2a4      	uxth	r4, r4
 8027680:	b292      	uxth	r2, r2
 8027682:	1c63      	adds	r3, r4, #1
 8027684:	b280      	uxth	r0, r0
 8027686:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802768a:	1c53      	adds	r3, r2, #1
 802768c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027690:	1c42      	adds	r2, r0, #1
 8027692:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027696:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802769a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802769e:	0940      	lsrs	r0, r0, #5
 80276a0:	4323      	orrs	r3, r4
 80276a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80276a6:	9a03      	ldr	r2, [sp, #12]
 80276a8:	4303      	orrs	r3, r0
 80276aa:	8013      	strh	r3, [r2, #0]
 80276ac:	b005      	add	sp, #20
 80276ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276b2:	280f      	cmp	r0, #15
 80276b4:	f63f af33 	bhi.w	802751e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80276b8:	4677      	mov	r7, lr
 80276ba:	4675      	mov	r5, lr
 80276bc:	4672      	mov	r2, lr
 80276be:	46f3      	mov	fp, lr
 80276c0:	e753      	b.n	802756a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80276c2:	bf00      	nop
 80276c4:	08032c55 	.word	0x08032c55
 80276c8:	08033222 	.word	0x08033222
 80276cc:	08032cd9 	.word	0x08032cd9

080276d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80276d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276d4:	ed2d 8b08 	vpush	{d8-d11}
 80276d8:	b097      	sub	sp, #92	; 0x5c
 80276da:	eeb0 aa40 	vmov.f32	s20, s0
 80276de:	9214      	str	r2, [sp, #80]	; 0x50
 80276e0:	9308      	str	r3, [sp, #32]
 80276e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80276e4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80276e8:	9312      	str	r3, [sp, #72]	; 0x48
 80276ea:	9111      	str	r1, [sp, #68]	; 0x44
 80276ec:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80276f0:	9015      	str	r0, [sp, #84]	; 0x54
 80276f2:	6850      	ldr	r0, [r2, #4]
 80276f4:	6812      	ldr	r2, [r2, #0]
 80276f6:	fb00 1303 	mla	r3, r0, r3, r1
 80276fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80276fe:	9309      	str	r3, [sp, #36]	; 0x24
 8027700:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027702:	681b      	ldr	r3, [r3, #0]
 8027704:	930b      	str	r3, [sp, #44]	; 0x2c
 8027706:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027708:	685b      	ldr	r3, [r3, #4]
 802770a:	930c      	str	r3, [sp, #48]	; 0x30
 802770c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8027710:	930a      	str	r3, [sp, #40]	; 0x28
 8027712:	eef0 9a60 	vmov.f32	s19, s1
 8027716:	eeb0 9a41 	vmov.f32	s18, s2
 802771a:	eeb0 8a62 	vmov.f32	s16, s5
 802771e:	eef0 8a43 	vmov.f32	s17, s6
 8027722:	eef0 ba44 	vmov.f32	s23, s8
 8027726:	eeb0 ba64 	vmov.f32	s22, s9
 802772a:	eef0 aa45 	vmov.f32	s21, s10
 802772e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027730:	2b00      	cmp	r3, #0
 8027732:	dc03      	bgt.n	802773c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027736:	2b00      	cmp	r3, #0
 8027738:	f340 83cb 	ble.w	8027ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 802773c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802773e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027742:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027746:	1e48      	subs	r0, r1, #1
 8027748:	1e55      	subs	r5, r2, #1
 802774a:	9b08      	ldr	r3, [sp, #32]
 802774c:	2b00      	cmp	r3, #0
 802774e:	f340 81a3 	ble.w	8027a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027752:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8027754:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027756:	1436      	asrs	r6, r6, #16
 8027758:	ea4f 4323 	mov.w	r3, r3, asr #16
 802775c:	d406      	bmi.n	802776c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802775e:	4286      	cmp	r6, r0
 8027760:	da04      	bge.n	802776c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027762:	2b00      	cmp	r3, #0
 8027764:	db02      	blt.n	802776c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027766:	42ab      	cmp	r3, r5
 8027768:	f2c0 8197 	blt.w	8027a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802776c:	3601      	adds	r6, #1
 802776e:	f100 8184 	bmi.w	8027a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027772:	42b1      	cmp	r1, r6
 8027774:	f2c0 8181 	blt.w	8027a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027778:	3301      	adds	r3, #1
 802777a:	f100 817e 	bmi.w	8027a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802777e:	429a      	cmp	r2, r3
 8027780:	f2c0 817b 	blt.w	8027a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027784:	9b08      	ldr	r3, [sp, #32]
 8027786:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027788:	9313      	str	r3, [sp, #76]	; 0x4c
 802778a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802778e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027790:	2b00      	cmp	r3, #0
 8027792:	f340 81a4 	ble.w	8027ade <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8027796:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027798:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802779a:	1418      	asrs	r0, r3, #16
 802779c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802779e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80277a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80277a4:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80277a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80277aa:	142d      	asrs	r5, r5, #16
 80277ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80277b0:	f100 81f8 	bmi.w	8027ba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80277b4:	f102 3eff 	add.w	lr, r2, #4294967295
 80277b8:	4575      	cmp	r5, lr
 80277ba:	f280 81f3 	bge.w	8027ba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80277be:	2800      	cmp	r0, #0
 80277c0:	f2c0 81f0 	blt.w	8027ba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80277c4:	f103 3eff 	add.w	lr, r3, #4294967295
 80277c8:	4570      	cmp	r0, lr
 80277ca:	f280 81eb 	bge.w	8027ba4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80277ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80277d0:	b212      	sxth	r2, r2
 80277d2:	fb00 5002 	mla	r0, r0, r2, r5
 80277d6:	fa1f fe81 	uxth.w	lr, r1
 80277da:	eb03 0a00 	add.w	sl, r3, r0
 80277de:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80277e2:	f813 9000 	ldrb.w	r9, [r3, r0]
 80277e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80277ea:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80277ee:	b29b      	uxth	r3, r3
 80277f0:	f1bc 0f00 	cmp.w	ip, #0
 80277f4:	f000 81b9 	beq.w	8027b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80277f8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80277fc:	940d      	str	r4, [sp, #52]	; 0x34
 80277fe:	eb0a 0b02 	add.w	fp, sl, r2
 8027802:	fa1f fa8c 	uxth.w	sl, ip
 8027806:	fb0a fe0e 	mul.w	lr, sl, lr
 802780a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802780e:	fa1f fa8a 	uxth.w	sl, sl
 8027812:	eba5 050e 	sub.w	r5, r5, lr
 8027816:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802781a:	940e      	str	r4, [sp, #56]	; 0x38
 802781c:	eba3 030a 	sub.w	r3, r3, sl
 8027820:	b2ad      	uxth	r5, r5
 8027822:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027824:	b29b      	uxth	r3, r3
 8027826:	fb08 f505 	mul.w	r5, r8, r5
 802782a:	fb09 5303 	mla	r3, r9, r3, r5
 802782e:	fb0a 3304 	mla	r3, sl, r4, r3
 8027832:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027834:	fb0e 3304 	mla	r3, lr, r4, r3
 8027838:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802783c:	2b00      	cmp	r3, #0
 802783e:	f000 810f 	beq.w	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027842:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027844:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027848:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802784c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027850:	f000 8190 	beq.w	8027b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8027854:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027858:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802785c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027860:	fb09 f000 	mul.w	r0, r9, r0
 8027864:	fb0a fe0e 	mul.w	lr, sl, lr
 8027868:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802786c:	f100 0b20 	add.w	fp, r0, #32
 8027870:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027874:	44ce      	add	lr, r9
 8027876:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802787a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802787e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027882:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027886:	ea4e 0909 	orr.w	r9, lr, r9
 802788a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802788e:	8868      	ldrh	r0, [r5, #2]
 8027890:	d019      	beq.n	80278c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8027892:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027896:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802789a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802789e:	fb08 f800 	mul.w	r8, r8, r0
 80278a2:	fb0a fe0e 	mul.w	lr, sl, lr
 80278a6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80278aa:	f108 0b20 	add.w	fp, r8, #32
 80278ae:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80278b2:	4486      	add	lr, r0
 80278b4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80278b8:	0a00      	lsrs	r0, r0, #8
 80278ba:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80278be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80278c2:	ea4e 0000 	orr.w	r0, lr, r0
 80278c6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80278ca:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80278ce:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80278d2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80278d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80278da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80278de:	ea4e 0909 	orr.w	r9, lr, r9
 80278e2:	ea4a 0000 	orr.w	r0, sl, r0
 80278e6:	f1bc 0f00 	cmp.w	ip, #0
 80278ea:	f000 8145 	beq.w	8027b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80278ee:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80278f2:	3a01      	subs	r2, #1
 80278f4:	0052      	lsls	r2, r2, #1
 80278f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80278f8:	3202      	adds	r2, #2
 80278fa:	2cff      	cmp	r4, #255	; 0xff
 80278fc:	eb05 0e02 	add.w	lr, r5, r2
 8027900:	5aaa      	ldrh	r2, [r5, r2]
 8027902:	d018      	beq.n	8027936 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027904:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027908:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802790c:	fb04 fa02 	mul.w	sl, r4, r2
 8027910:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027914:	fb08 f805 	mul.w	r8, r8, r5
 8027918:	f10a 0520 	add.w	r5, sl, #32
 802791c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027920:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027924:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027928:	4442      	add	r2, r8
 802792a:	0a2d      	lsrs	r5, r5, #8
 802792c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027930:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027934:	432a      	orrs	r2, r5
 8027936:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027938:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802793c:	2cff      	cmp	r4, #255	; 0xff
 802793e:	d01a      	beq.n	8027976 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8027940:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027944:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027948:	fb04 fa05 	mul.w	sl, r4, r5
 802794c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027950:	fb08 f80e 	mul.w	r8, r8, lr
 8027954:	f10a 0e20 	add.w	lr, sl, #32
 8027958:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802795c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027960:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027964:	4445      	add	r5, r8
 8027966:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802796a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802796e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027972:	ea45 050e 	orr.w	r5, r5, lr
 8027976:	fb1c fe01 	smulbb	lr, ip, r1
 802797a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802797e:	f1cc 0810 	rsb	r8, ip, #16
 8027982:	eba8 0801 	sub.w	r8, r8, r1
 8027986:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802798a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802798e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027992:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027996:	4341      	muls	r1, r0
 8027998:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802799c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80279a0:	ea4a 0202 	orr.w	r2, sl, r2
 80279a4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80279a8:	fb09 1108 	mla	r1, r9, r8, r1
 80279ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80279b0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80279b4:	fb0c 1102 	mla	r1, ip, r2, r1
 80279b8:	ea4b 0505 	orr.w	r5, fp, r5
 80279bc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80279c0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80279c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80279c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80279cc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80279d0:	ea42 0e0e 	orr.w	lr, r2, lr
 80279d4:	fa1f f28e 	uxth.w	r2, lr
 80279d8:	2bff      	cmp	r3, #255	; 0xff
 80279da:	d103      	bne.n	80279e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80279dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80279de:	29ff      	cmp	r1, #255	; 0xff
 80279e0:	f000 80de 	beq.w	8027ba0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 80279e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80279e6:	8838      	ldrh	r0, [r7, #0]
 80279e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80279ea:	434b      	muls	r3, r1
 80279ec:	f103 0c01 	add.w	ip, r3, #1
 80279f0:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80279f4:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80279f8:	fa5f fc83 	uxtb.w	ip, r3
 80279fc:	1203      	asrs	r3, r0, #8
 80279fe:	1215      	asrs	r5, r2, #8
 8027a00:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027a04:	fb13 f30c 	smulbb	r3, r3, ip
 8027a08:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027a0c:	fb05 3501 	mla	r5, r5, r1, r3
 8027a10:	10c3      	asrs	r3, r0, #3
 8027a12:	10d1      	asrs	r1, r2, #3
 8027a14:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027a18:	fb13 f30c 	smulbb	r3, r3, ip
 8027a1c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027a20:	fb01 3104 	mla	r1, r1, r4, r3
 8027a24:	00c3      	lsls	r3, r0, #3
 8027a26:	00d2      	lsls	r2, r2, #3
 8027a28:	b2db      	uxtb	r3, r3
 8027a2a:	b2d2      	uxtb	r2, r2
 8027a2c:	fb13 f30c 	smulbb	r3, r3, ip
 8027a30:	b2ad      	uxth	r5, r5
 8027a32:	fb02 3304 	mla	r3, r2, r4, r3
 8027a36:	b29a      	uxth	r2, r3
 8027a38:	1c6b      	adds	r3, r5, #1
 8027a3a:	b289      	uxth	r1, r1
 8027a3c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027a40:	1c53      	adds	r3, r2, #1
 8027a42:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027a46:	1c4a      	adds	r2, r1, #1
 8027a48:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027a4c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027a50:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027a54:	0949      	lsrs	r1, r1, #5
 8027a56:	432b      	orrs	r3, r5
 8027a58:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027a5c:	430b      	orrs	r3, r1
 8027a5e:	803b      	strh	r3, [r7, #0]
 8027a60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027a64:	4413      	add	r3, r2
 8027a66:	9329      	str	r3, [sp, #164]	; 0xa4
 8027a68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027a6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a6c:	441a      	add	r2, r3
 8027a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027a70:	922a      	str	r2, [sp, #168]	; 0xa8
 8027a72:	3b01      	subs	r3, #1
 8027a74:	3702      	adds	r7, #2
 8027a76:	9313      	str	r3, [sp, #76]	; 0x4c
 8027a78:	e689      	b.n	802778e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027a7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a7c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8027a7e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8027a80:	4433      	add	r3, r6
 8027a82:	9329      	str	r3, [sp, #164]	; 0xa4
 8027a84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a86:	441c      	add	r4, r3
 8027a88:	9b08      	ldr	r3, [sp, #32]
 8027a8a:	942a      	str	r4, [sp, #168]	; 0xa8
 8027a8c:	3b01      	subs	r3, #1
 8027a8e:	9308      	str	r3, [sp, #32]
 8027a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a92:	3302      	adds	r3, #2
 8027a94:	9309      	str	r3, [sp, #36]	; 0x24
 8027a96:	e658      	b.n	802774a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027a98:	d028      	beq.n	8027aec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8027a9a:	9b08      	ldr	r3, [sp, #32]
 8027a9c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027a9e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8027aa0:	3b01      	subs	r3, #1
 8027aa2:	fb00 5003 	mla	r0, r0, r3, r5
 8027aa6:	1400      	asrs	r0, r0, #16
 8027aa8:	f53f ae6c 	bmi.w	8027784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027aac:	3901      	subs	r1, #1
 8027aae:	4288      	cmp	r0, r1
 8027ab0:	f6bf ae68 	bge.w	8027784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027ab4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027ab6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8027ab8:	fb01 0303 	mla	r3, r1, r3, r0
 8027abc:	141b      	asrs	r3, r3, #16
 8027abe:	f53f ae61 	bmi.w	8027784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027ac2:	3a01      	subs	r2, #1
 8027ac4:	4293      	cmp	r3, r2
 8027ac6:	f6bf ae5d 	bge.w	8027784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027aca:	9b08      	ldr	r3, [sp, #32]
 8027acc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027ad0:	9313      	str	r3, [sp, #76]	; 0x4c
 8027ad2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027ad8:	2b00      	cmp	r3, #0
 8027ada:	f300 8082 	bgt.w	8027be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027ade:	9b08      	ldr	r3, [sp, #32]
 8027ae0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ae6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027aea:	9309      	str	r3, [sp, #36]	; 0x24
 8027aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027aee:	2b00      	cmp	r3, #0
 8027af0:	f340 81ef 	ble.w	8027ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8027af4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027afc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027b00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b02:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027b06:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027b0a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027b0e:	eef0 6a48 	vmov.f32	s13, s16
 8027b12:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027b16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027b1e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027b22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027b26:	eef0 6a68 	vmov.f32	s13, s17
 8027b2a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027b2e:	ee18 2a10 	vmov	r2, s16
 8027b32:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b3a:	ee18 2a90 	vmov	r2, s17
 8027b3e:	932b      	str	r3, [sp, #172]	; 0xac
 8027b40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b46:	932c      	str	r3, [sp, #176]	; 0xb0
 8027b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027b4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027b4c:	3b01      	subs	r3, #1
 8027b4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b52:	9311      	str	r3, [sp, #68]	; 0x44
 8027b54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b56:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027b5a:	bf08      	it	eq
 8027b5c:	4613      	moveq	r3, r2
 8027b5e:	9308      	str	r3, [sp, #32]
 8027b60:	eef0 8a67 	vmov.f32	s17, s15
 8027b64:	eeb0 8a47 	vmov.f32	s16, s14
 8027b68:	e5e1      	b.n	802772e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027b6a:	fb08 f505 	mul.w	r5, r8, r5
 8027b6e:	fb09 5303 	mla	r3, r9, r3, r5
 8027b72:	e661      	b.n	8027838 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8027b74:	4681      	mov	r9, r0
 8027b76:	e688      	b.n	802788a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027b78:	f1c1 0210 	rsb	r2, r1, #16
 8027b7c:	4341      	muls	r1, r0
 8027b7e:	fb09 1902 	mla	r9, r9, r2, r1
 8027b82:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027b86:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027b8a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027b8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b92:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027b96:	ea42 0909 	orr.w	r9, r2, r9
 8027b9a:	fa1f f289 	uxth.w	r2, r9
 8027b9e:	e71b      	b.n	80279d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027ba0:	803a      	strh	r2, [r7, #0]
 8027ba2:	e75d      	b.n	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ba4:	f115 0e01 	adds.w	lr, r5, #1
 8027ba8:	f53f af5a 	bmi.w	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027bac:	4572      	cmp	r2, lr
 8027bae:	f6ff af57 	blt.w	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027bb2:	f110 0e01 	adds.w	lr, r0, #1
 8027bb6:	f53f af53 	bmi.w	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027bba:	4573      	cmp	r3, lr
 8027bbc:	f6ff af50 	blt.w	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027bc0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027bc2:	9502      	str	r5, [sp, #8]
 8027bc4:	b21b      	sxth	r3, r3
 8027bc6:	b212      	sxth	r2, r2
 8027bc8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027bcc:	9301      	str	r3, [sp, #4]
 8027bce:	9200      	str	r2, [sp, #0]
 8027bd0:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027bd4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027bd8:	4639      	mov	r1, r7
 8027bda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027bdc:	f7ff fbd2 	bl	8027384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027be0:	e73e      	b.n	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027be2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027be4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027be8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bea:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027bee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027bf0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027bf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bf6:	141f      	asrs	r7, r3, #16
 8027bf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027bfa:	141b      	asrs	r3, r3, #16
 8027bfc:	fb01 3707 	mla	r7, r1, r7, r3
 8027c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027c02:	fa1f fc82 	uxth.w	ip, r2
 8027c06:	eb03 0a07 	add.w	sl, r3, r7
 8027c0a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027c0e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027c12:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027c16:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027c1a:	b29b      	uxth	r3, r3
 8027c1c:	2d00      	cmp	r5, #0
 8027c1e:	f000 813d 	beq.w	8027e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027c22:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027c26:	940f      	str	r4, [sp, #60]	; 0x3c
 8027c28:	eb0a 0b01 	add.w	fp, sl, r1
 8027c2c:	fa1f fa85 	uxth.w	sl, r5
 8027c30:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c34:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027c38:	fa1f fa8a 	uxth.w	sl, sl
 8027c3c:	eba0 000c 	sub.w	r0, r0, ip
 8027c40:	eba3 030a 	sub.w	r3, r3, sl
 8027c44:	b280      	uxth	r0, r0
 8027c46:	fb08 f000 	mul.w	r0, r8, r0
 8027c4a:	b29b      	uxth	r3, r3
 8027c4c:	fb09 0303 	mla	r3, r9, r3, r0
 8027c50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027c52:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027c56:	9410      	str	r4, [sp, #64]	; 0x40
 8027c58:	fb0a 3300 	mla	r3, sl, r0, r3
 8027c5c:	fb0c 3304 	mla	r3, ip, r4, r3
 8027c60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c64:	2b00      	cmp	r3, #0
 8027c66:	f000 810b 	beq.w	8027e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027c6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027c6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027c6e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027c72:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027c76:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027c7a:	f000 8114 	beq.w	8027ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8027c7e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027c82:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027c86:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027c8a:	fb09 f707 	mul.w	r7, r9, r7
 8027c8e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c92:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027c96:	f107 0b20 	add.w	fp, r7, #32
 8027c9a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027c9e:	44cc      	add	ip, r9
 8027ca0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027ca4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027ca8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027cac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027cb0:	ea4c 0909 	orr.w	r9, ip, r9
 8027cb4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027cb8:	8847      	ldrh	r7, [r0, #2]
 8027cba:	d019      	beq.n	8027cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8027cbc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027cc0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027cc4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027cc8:	fb08 f807 	mul.w	r8, r8, r7
 8027ccc:	fb0a fc0c 	mul.w	ip, sl, ip
 8027cd0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027cd4:	f108 0b20 	add.w	fp, r8, #32
 8027cd8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027cdc:	44bc      	add	ip, r7
 8027cde:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027ce2:	0a3f      	lsrs	r7, r7, #8
 8027ce4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027ce8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027cec:	ea4c 0707 	orr.w	r7, ip, r7
 8027cf0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027cf4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027cf8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027cfc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027d00:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027d04:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027d08:	ea4c 0909 	orr.w	r9, ip, r9
 8027d0c:	ea4a 0707 	orr.w	r7, sl, r7
 8027d10:	2d00      	cmp	r5, #0
 8027d12:	f000 80ca 	beq.w	8027eaa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8027d16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027d1a:	3901      	subs	r1, #1
 8027d1c:	0049      	lsls	r1, r1, #1
 8027d1e:	3102      	adds	r1, #2
 8027d20:	eb00 0c01 	add.w	ip, r0, r1
 8027d24:	5a41      	ldrh	r1, [r0, r1]
 8027d26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027d28:	28ff      	cmp	r0, #255	; 0xff
 8027d2a:	d019      	beq.n	8027d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8027d2c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027d2e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027d32:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027d36:	fb04 fa01 	mul.w	sl, r4, r1
 8027d3a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d3e:	fb08 f800 	mul.w	r8, r8, r0
 8027d42:	f10a 0020 	add.w	r0, sl, #32
 8027d46:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027d4a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027d4e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027d52:	4441      	add	r1, r8
 8027d54:	0a00      	lsrs	r0, r0, #8
 8027d56:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027d5a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027d5e:	4301      	orrs	r1, r0
 8027d60:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027d62:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027d66:	2cff      	cmp	r4, #255	; 0xff
 8027d68:	d01a      	beq.n	8027da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8027d6a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027d6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027d72:	fb04 fa00 	mul.w	sl, r4, r0
 8027d76:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d7a:	fb08 f80c 	mul.w	r8, r8, ip
 8027d7e:	f10a 0c20 	add.w	ip, sl, #32
 8027d82:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027d86:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027d8a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027d8e:	4440      	add	r0, r8
 8027d90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d94:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027d98:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027d9c:	ea40 000c 	orr.w	r0, r0, ip
 8027da0:	fb15 fc02 	smulbb	ip, r5, r2
 8027da4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027da8:	f1c5 0810 	rsb	r8, r5, #16
 8027dac:	eba8 0802 	sub.w	r8, r8, r2
 8027db0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027db4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027db8:	437a      	muls	r2, r7
 8027dba:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027dbe:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027dc2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027dc6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027dca:	fb09 2208 	mla	r2, r9, r8, r2
 8027dce:	ea4a 0101 	orr.w	r1, sl, r1
 8027dd2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027dd6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027dda:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027dde:	fb05 2201 	mla	r2, r5, r1, r2
 8027de2:	ea4b 0000 	orr.w	r0, fp, r0
 8027de6:	fb0c 2200 	mla	r2, ip, r0, r2
 8027dea:	0d57      	lsrs	r7, r2, #21
 8027dec:	0952      	lsrs	r2, r2, #5
 8027dee:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027df2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027df6:	433a      	orrs	r2, r7
 8027df8:	2bff      	cmp	r3, #255	; 0xff
 8027dfa:	b292      	uxth	r2, r2
 8027dfc:	d102      	bne.n	8027e04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027dfe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027e00:	29ff      	cmp	r1, #255	; 0xff
 8027e02:	d063      	beq.n	8027ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 8027e04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027e06:	f8be 1000 	ldrh.w	r1, [lr]
 8027e0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027e0c:	4343      	muls	r3, r0
 8027e0e:	1c58      	adds	r0, r3, #1
 8027e10:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027e14:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027e18:	1208      	asrs	r0, r1, #8
 8027e1a:	b2db      	uxtb	r3, r3
 8027e1c:	1215      	asrs	r5, r2, #8
 8027e1e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027e22:	fb10 f003 	smulbb	r0, r0, r3
 8027e26:	10cf      	asrs	r7, r1, #3
 8027e28:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027e2c:	00c9      	lsls	r1, r1, #3
 8027e2e:	fb05 0504 	mla	r5, r5, r4, r0
 8027e32:	b2c9      	uxtb	r1, r1
 8027e34:	10d0      	asrs	r0, r2, #3
 8027e36:	00d2      	lsls	r2, r2, #3
 8027e38:	fb11 f103 	smulbb	r1, r1, r3
 8027e3c:	b2d2      	uxtb	r2, r2
 8027e3e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027e42:	fb02 1204 	mla	r2, r2, r4, r1
 8027e46:	fb17 f703 	smulbb	r7, r7, r3
 8027e4a:	b2ad      	uxth	r5, r5
 8027e4c:	b292      	uxth	r2, r2
 8027e4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027e52:	fb00 7004 	mla	r0, r0, r4, r7
 8027e56:	1c6b      	adds	r3, r5, #1
 8027e58:	1c57      	adds	r7, r2, #1
 8027e5a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027e5e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027e62:	b280      	uxth	r0, r0
 8027e64:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027e68:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027e6c:	433d      	orrs	r5, r7
 8027e6e:	1c47      	adds	r7, r0, #1
 8027e70:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027e74:	097f      	lsrs	r7, r7, #5
 8027e76:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e7a:	433d      	orrs	r5, r7
 8027e7c:	f8ae 5000 	strh.w	r5, [lr]
 8027e80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027e82:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027e84:	4413      	add	r3, r2
 8027e86:	9329      	str	r3, [sp, #164]	; 0xa4
 8027e88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027e8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e8c:	441a      	add	r2, r3
 8027e8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027e90:	922a      	str	r2, [sp, #168]	; 0xa8
 8027e92:	3b01      	subs	r3, #1
 8027e94:	f10e 0e02 	add.w	lr, lr, #2
 8027e98:	9313      	str	r3, [sp, #76]	; 0x4c
 8027e9a:	e61c      	b.n	8027ad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8027e9c:	fb08 f000 	mul.w	r0, r8, r0
 8027ea0:	fb09 0303 	mla	r3, r9, r3, r0
 8027ea4:	e6dc      	b.n	8027c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 8027ea6:	46b9      	mov	r9, r7
 8027ea8:	e704      	b.n	8027cb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 8027eaa:	f1c2 0110 	rsb	r1, r2, #16
 8027eae:	437a      	muls	r2, r7
 8027eb0:	fb09 2901 	mla	r9, r9, r1, r2
 8027eb4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027eb8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027ebc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027ec0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027ec4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027ec8:	4302      	orrs	r2, r0
 8027eca:	e795      	b.n	8027df8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8027ecc:	f8ae 2000 	strh.w	r2, [lr]
 8027ed0:	e7d6      	b.n	8027e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027ed2:	b017      	add	sp, #92	; 0x5c
 8027ed4:	ecbd 8b08 	vpop	{d8-d11}
 8027ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027edc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ee0:	b085      	sub	sp, #20
 8027ee2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8027ee6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027eea:	9103      	str	r1, [sp, #12]
 8027eec:	fb05 7106 	mla	r1, r5, r6, r7
 8027ef0:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8027ef4:	2d00      	cmp	r5, #0
 8027ef6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027efa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027efe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8027f02:	9401      	str	r4, [sp, #4]
 8027f04:	eb02 0901 	add.w	r9, r2, r1
 8027f08:	f2c0 80c0 	blt.w	802808c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027f0c:	45a8      	cmp	r8, r5
 8027f0e:	f340 80bd 	ble.w	802808c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027f12:	2f00      	cmp	r7, #0
 8027f14:	f2c0 80b6 	blt.w	8028084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027f18:	42be      	cmp	r6, r7
 8027f1a:	f340 80b3 	ble.w	8028084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027f1e:	f812 c001 	ldrb.w	ip, [r2, r1]
 8027f22:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8027f26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027f2a:	d019      	beq.n	8027f60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8027f2c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8027f30:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027f34:	435a      	muls	r2, r3
 8027f36:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8027f3a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8027f3e:	fb0c f403 	mul.w	r4, ip, r3
 8027f42:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8027f46:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027f4a:	441a      	add	r2, r3
 8027f4c:	f104 0320 	add.w	r3, r4, #32
 8027f50:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8027f54:	0a1b      	lsrs	r3, r3, #8
 8027f56:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027f5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f5e:	4319      	orrs	r1, r3
 8027f60:	b289      	uxth	r1, r1
 8027f62:	1c7b      	adds	r3, r7, #1
 8027f64:	f100 8097 	bmi.w	8028096 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027f68:	429e      	cmp	r6, r3
 8027f6a:	f340 8094 	ble.w	8028096 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027f6e:	2800      	cmp	r0, #0
 8027f70:	f000 8094 	beq.w	802809c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8027f74:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027f78:	9b01      	ldr	r3, [sp, #4]
 8027f7a:	2cff      	cmp	r4, #255	; 0xff
 8027f7c:	885b      	ldrh	r3, [r3, #2]
 8027f7e:	d01b      	beq.n	8027fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8027f80:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8027f84:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027f88:	fb0a f202 	mul.w	r2, sl, r2
 8027f8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f90:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027f94:	fb04 fa03 	mul.w	sl, r4, r3
 8027f98:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027f9c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027fa0:	441a      	add	r2, r3
 8027fa2:	f10a 0320 	add.w	r3, sl, #32
 8027fa6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027faa:	0a1b      	lsrs	r3, r3, #8
 8027fac:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8027fb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027fb4:	ea4b 0303 	orr.w	r3, fp, r3
 8027fb8:	b29b      	uxth	r3, r3
 8027fba:	3501      	adds	r5, #1
 8027fbc:	d474      	bmi.n	80280a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027fbe:	45a8      	cmp	r8, r5
 8027fc0:	dd72      	ble.n	80280a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027fc2:	f1be 0f00 	cmp.w	lr, #0
 8027fc6:	f000 8110 	beq.w	80281ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8027fca:	2f00      	cmp	r7, #0
 8027fcc:	db69      	blt.n	80280a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027fce:	42be      	cmp	r6, r7
 8027fd0:	dd67      	ble.n	80280a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027fd2:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027fd6:	9a01      	ldr	r2, [sp, #4]
 8027fd8:	2dff      	cmp	r5, #255	; 0xff
 8027fda:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8027fde:	d01c      	beq.n	802801a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8027fe0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8027fe4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027fe8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027fec:	fb05 fa0b 	mul.w	sl, r5, fp
 8027ff0:	fb08 f802 	mul.w	r8, r8, r2
 8027ff4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027ff8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8027ffc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028000:	4490      	add	r8, r2
 8028002:	f10a 0220 	add.w	r2, sl, #32
 8028006:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802800a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802800e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8028012:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8028016:	ea4b 0b0a 	orr.w	fp, fp, sl
 802801a:	fa1f fb8b 	uxth.w	fp, fp
 802801e:	3701      	adds	r7, #1
 8028020:	d447      	bmi.n	80280b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8028022:	42be      	cmp	r6, r7
 8028024:	dd45      	ble.n	80280b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8028026:	2800      	cmp	r0, #0
 8028028:	d046      	beq.n	80280b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 802802a:	3601      	adds	r6, #1
 802802c:	9a01      	ldr	r2, [sp, #4]
 802802e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8028032:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8028036:	2fff      	cmp	r7, #255	; 0xff
 8028038:	d01a      	beq.n	8028070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 802803a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802803e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8028042:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028046:	fb07 f902 	mul.w	r9, r7, r2
 802804a:	fb08 f806 	mul.w	r8, r8, r6
 802804e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8028052:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8028056:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802805a:	44b0      	add	r8, r6
 802805c:	f109 0620 	add.w	r6, r9, #32
 8028060:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8028064:	0a36      	lsrs	r6, r6, #8
 8028066:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802806a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802806e:	4332      	orrs	r2, r6
 8028070:	b292      	uxth	r2, r2
 8028072:	280f      	cmp	r0, #15
 8028074:	d922      	bls.n	80280bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8028076:	4b61      	ldr	r3, [pc, #388]	; (80281fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8028078:	4a61      	ldr	r2, [pc, #388]	; (8028200 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802807a:	4862      	ldr	r0, [pc, #392]	; (8028204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 802807c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028080:	f005 ff4e 	bl	802df20 <__assert_func>
 8028084:	f04f 0c00 	mov.w	ip, #0
 8028088:	4661      	mov	r1, ip
 802808a:	e76a      	b.n	8027f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802808c:	2400      	movs	r4, #0
 802808e:	46a4      	mov	ip, r4
 8028090:	4623      	mov	r3, r4
 8028092:	4621      	mov	r1, r4
 8028094:	e791      	b.n	8027fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8028096:	2400      	movs	r4, #0
 8028098:	4623      	mov	r3, r4
 802809a:	e78e      	b.n	8027fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802809c:	4604      	mov	r4, r0
 802809e:	4603      	mov	r3, r0
 80280a0:	e78b      	b.n	8027fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80280a2:	2500      	movs	r5, #0
 80280a4:	46ab      	mov	fp, r5
 80280a6:	e7ba      	b.n	802801e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80280a8:	2700      	movs	r7, #0
 80280aa:	463d      	mov	r5, r7
 80280ac:	463a      	mov	r2, r7
 80280ae:	46bb      	mov	fp, r7
 80280b0:	e7df      	b.n	8028072 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80280b2:	2700      	movs	r7, #0
 80280b4:	463a      	mov	r2, r7
 80280b6:	e7dc      	b.n	8028072 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80280b8:	4607      	mov	r7, r0
 80280ba:	4602      	mov	r2, r0
 80280bc:	f1be 0f0f 	cmp.w	lr, #15
 80280c0:	d8d9      	bhi.n	8028076 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80280c2:	b286      	uxth	r6, r0
 80280c4:	fa1f f98e 	uxth.w	r9, lr
 80280c8:	fb06 f809 	mul.w	r8, r6, r9
 80280cc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80280d0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80280d4:	0136      	lsls	r6, r6, #4
 80280d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80280da:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80280de:	9601      	str	r6, [sp, #4]
 80280e0:	ea4a 0101 	orr.w	r1, sl, r1
 80280e4:	fa1f f689 	uxth.w	r6, r9
 80280e8:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80280ec:	fb10 f90e 	smulbb	r9, r0, lr
 80280f0:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80280f4:	9602      	str	r6, [sp, #8]
 80280f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80280fa:	460e      	mov	r6, r1
 80280fc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028100:	f1ce 0110 	rsb	r1, lr, #16
 8028104:	1a09      	subs	r1, r1, r0
 8028106:	ea4a 0303 	orr.w	r3, sl, r3
 802810a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802810e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028112:	4343      	muls	r3, r0
 8028114:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8028118:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802811c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028120:	fb01 3106 	mla	r1, r1, r6, r3
 8028124:	ea4a 0202 	orr.w	r2, sl, r2
 8028128:	fb09 1302 	mla	r3, r9, r2, r1
 802812c:	9a03      	ldr	r2, [sp, #12]
 802812e:	9802      	ldr	r0, [sp, #8]
 8028130:	8811      	ldrh	r1, [r2, #0]
 8028132:	9a01      	ldr	r2, [sp, #4]
 8028134:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028138:	1a12      	subs	r2, r2, r0
 802813a:	9801      	ldr	r0, [sp, #4]
 802813c:	eba0 0608 	sub.w	r6, r0, r8
 8028140:	b2b6      	uxth	r6, r6
 8028142:	b292      	uxth	r2, r2
 8028144:	4374      	muls	r4, r6
 8028146:	fb0c 4402 	mla	r4, ip, r2, r4
 802814a:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802814e:	9a02      	ldr	r2, [sp, #8]
 8028150:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028154:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8028158:	fb02 4505 	mla	r5, r2, r5, r4
 802815c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8028160:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8028164:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8028168:	fb08 5707 	mla	r7, r8, r7, r5
 802816c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8028170:	120a      	asrs	r2, r1, #8
 8028172:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028176:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802817a:	b2ff      	uxtb	r7, r7
 802817c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028180:	10c8      	asrs	r0, r1, #3
 8028182:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028186:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802818a:	00c9      	lsls	r1, r1, #3
 802818c:	437a      	muls	r2, r7
 802818e:	ea43 0e0e 	orr.w	lr, r3, lr
 8028192:	b2c9      	uxtb	r1, r1
 8028194:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028198:	fa1f f38e 	uxth.w	r3, lr
 802819c:	4378      	muls	r0, r7
 802819e:	434f      	muls	r7, r1
 80281a0:	1c51      	adds	r1, r2, #1
 80281a2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80281a6:	121a      	asrs	r2, r3, #8
 80281a8:	f022 0207 	bic.w	r2, r2, #7
 80281ac:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80281b0:	1c41      	adds	r1, r0, #1
 80281b2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80281b6:	10d9      	asrs	r1, r3, #3
 80281b8:	f021 0103 	bic.w	r1, r1, #3
 80281bc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80281c0:	0212      	lsls	r2, r2, #8
 80281c2:	00c9      	lsls	r1, r1, #3
 80281c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80281c8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80281cc:	430a      	orrs	r2, r1
 80281ce:	1c79      	adds	r1, r7, #1
 80281d0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80281d4:	00db      	lsls	r3, r3, #3
 80281d6:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80281da:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80281de:	4313      	orrs	r3, r2
 80281e0:	9a03      	ldr	r2, [sp, #12]
 80281e2:	8013      	strh	r3, [r2, #0]
 80281e4:	b005      	add	sp, #20
 80281e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281ea:	280f      	cmp	r0, #15
 80281ec:	f63f af43 	bhi.w	8028076 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80281f0:	4677      	mov	r7, lr
 80281f2:	4675      	mov	r5, lr
 80281f4:	4672      	mov	r2, lr
 80281f6:	46f3      	mov	fp, lr
 80281f8:	e763      	b.n	80280c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80281fa:	bf00      	nop
 80281fc:	08032c55 	.word	0x08032c55
 8028200:	08033222 	.word	0x08033222
 8028204:	08032cd9 	.word	0x08032cd9

08028208 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802820c:	ed2d 8b08 	vpush	{d8-d11}
 8028210:	b093      	sub	sp, #76	; 0x4c
 8028212:	eeb0 aa40 	vmov.f32	s20, s0
 8028216:	9210      	str	r2, [sp, #64]	; 0x40
 8028218:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802821a:	910e      	str	r1, [sp, #56]	; 0x38
 802821c:	9306      	str	r3, [sp, #24]
 802821e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028222:	9011      	str	r0, [sp, #68]	; 0x44
 8028224:	6850      	ldr	r0, [r2, #4]
 8028226:	6812      	ldr	r2, [r2, #0]
 8028228:	fb00 1303 	mla	r3, r0, r3, r1
 802822c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028230:	9307      	str	r3, [sp, #28]
 8028232:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028234:	681b      	ldr	r3, [r3, #0]
 8028236:	9308      	str	r3, [sp, #32]
 8028238:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802823a:	685b      	ldr	r3, [r3, #4]
 802823c:	9309      	str	r3, [sp, #36]	; 0x24
 802823e:	eef0 9a60 	vmov.f32	s19, s1
 8028242:	eeb0 9a41 	vmov.f32	s18, s2
 8028246:	eeb0 8a62 	vmov.f32	s16, s5
 802824a:	eef0 8a43 	vmov.f32	s17, s6
 802824e:	eef0 ba44 	vmov.f32	s23, s8
 8028252:	eeb0 ba64 	vmov.f32	s22, s9
 8028256:	eef0 aa45 	vmov.f32	s21, s10
 802825a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802825c:	2b00      	cmp	r3, #0
 802825e:	dc03      	bgt.n	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028260:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028262:	2b00      	cmp	r3, #0
 8028264:	f340 83b4 	ble.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 8028268:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802826a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802826e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028272:	1e48      	subs	r0, r1, #1
 8028274:	1e55      	subs	r5, r2, #1
 8028276:	9b06      	ldr	r3, [sp, #24]
 8028278:	2b00      	cmp	r3, #0
 802827a:	f340 8163 	ble.w	8028544 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802827e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8028280:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028282:	1436      	asrs	r6, r6, #16
 8028284:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028288:	d406      	bmi.n	8028298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802828a:	4286      	cmp	r6, r0
 802828c:	da04      	bge.n	8028298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802828e:	2b00      	cmp	r3, #0
 8028290:	db02      	blt.n	8028298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028292:	42ab      	cmp	r3, r5
 8028294:	f2c0 8157 	blt.w	8028546 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028298:	3601      	adds	r6, #1
 802829a:	f100 8144 	bmi.w	8028526 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802829e:	42b1      	cmp	r1, r6
 80282a0:	f2c0 8141 	blt.w	8028526 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80282a4:	3301      	adds	r3, #1
 80282a6:	f100 813e 	bmi.w	8028526 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80282aa:	429a      	cmp	r2, r3
 80282ac:	f2c0 813b 	blt.w	8028526 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80282b0:	9b06      	ldr	r3, [sp, #24]
 80282b2:	9f07      	ldr	r7, [sp, #28]
 80282b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80282b6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80282ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80282bc:	2b00      	cmp	r3, #0
 80282be:	f340 8164 	ble.w	802858a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80282c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80282c4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80282c6:	1418      	asrs	r0, r3, #16
 80282c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80282ca:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80282ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80282d0:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80282d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80282d6:	142d      	asrs	r5, r5, #16
 80282d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80282dc:	f100 81ee 	bmi.w	80286bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80282e0:	f102 3eff 	add.w	lr, r2, #4294967295
 80282e4:	4575      	cmp	r5, lr
 80282e6:	f280 81e9 	bge.w	80286bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80282ea:	2800      	cmp	r0, #0
 80282ec:	f2c0 81e6 	blt.w	80286bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80282f0:	f103 3eff 	add.w	lr, r3, #4294967295
 80282f4:	4570      	cmp	r0, lr
 80282f6:	f280 81e1 	bge.w	80286bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80282fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80282fc:	b212      	sxth	r2, r2
 80282fe:	fb00 5002 	mla	r0, r0, r2, r5
 8028302:	fa1f fe81 	uxth.w	lr, r1
 8028306:	eb03 0a00 	add.w	sl, r3, r0
 802830a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802830e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8028312:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028316:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802831a:	b29b      	uxth	r3, r3
 802831c:	f1bc 0f00 	cmp.w	ip, #0
 8028320:	f000 8179 	beq.w	8028616 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8028324:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028328:	940a      	str	r4, [sp, #40]	; 0x28
 802832a:	eb0a 0b02 	add.w	fp, sl, r2
 802832e:	fa1f fa8c 	uxth.w	sl, ip
 8028332:	fb0a fe0e 	mul.w	lr, sl, lr
 8028336:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802833a:	fa1f fa8a 	uxth.w	sl, sl
 802833e:	eba5 050e 	sub.w	r5, r5, lr
 8028342:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028346:	940b      	str	r4, [sp, #44]	; 0x2c
 8028348:	eba3 030a 	sub.w	r3, r3, sl
 802834c:	b2ad      	uxth	r5, r5
 802834e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028350:	b29b      	uxth	r3, r3
 8028352:	fb08 f505 	mul.w	r5, r8, r5
 8028356:	fb09 5303 	mla	r3, r9, r3, r5
 802835a:	fb0a 3304 	mla	r3, sl, r4, r3
 802835e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028360:	fb0e 3304 	mla	r3, lr, r4, r3
 8028364:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028368:	2b00      	cmp	r3, #0
 802836a:	f000 80cf 	beq.w	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802836e:	9c08      	ldr	r4, [sp, #32]
 8028370:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028374:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8028378:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802837c:	f000 8150 	beq.w	8028620 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028380:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028384:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028388:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802838c:	fb09 f000 	mul.w	r0, r9, r0
 8028390:	fb0a fe0e 	mul.w	lr, sl, lr
 8028394:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8028398:	f100 0b20 	add.w	fp, r0, #32
 802839c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80283a0:	44ce      	add	lr, r9
 80283a2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80283a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80283aa:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80283ae:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80283b2:	ea4e 0909 	orr.w	r9, lr, r9
 80283b6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80283ba:	8868      	ldrh	r0, [r5, #2]
 80283bc:	d019      	beq.n	80283f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80283be:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80283c2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80283c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80283ca:	fb08 f800 	mul.w	r8, r8, r0
 80283ce:	fb0a fe0e 	mul.w	lr, sl, lr
 80283d2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80283d6:	f108 0b20 	add.w	fp, r8, #32
 80283da:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80283de:	4486      	add	lr, r0
 80283e0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80283e4:	0a00      	lsrs	r0, r0, #8
 80283e6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80283ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80283ee:	ea4e 0000 	orr.w	r0, lr, r0
 80283f2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80283f6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80283fa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80283fe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028402:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028406:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802840a:	ea4e 0909 	orr.w	r9, lr, r9
 802840e:	ea4a 0000 	orr.w	r0, sl, r0
 8028412:	f1bc 0f00 	cmp.w	ip, #0
 8028416:	f000 8105 	beq.w	8028624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802841a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802841e:	3a01      	subs	r2, #1
 8028420:	0052      	lsls	r2, r2, #1
 8028422:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028424:	3202      	adds	r2, #2
 8028426:	2cff      	cmp	r4, #255	; 0xff
 8028428:	eb05 0e02 	add.w	lr, r5, r2
 802842c:	5aaa      	ldrh	r2, [r5, r2]
 802842e:	d018      	beq.n	8028462 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028430:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028434:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028438:	fb04 fa02 	mul.w	sl, r4, r2
 802843c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028440:	fb08 f805 	mul.w	r8, r8, r5
 8028444:	f10a 0520 	add.w	r5, sl, #32
 8028448:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802844c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028450:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028454:	4442      	add	r2, r8
 8028456:	0a2d      	lsrs	r5, r5, #8
 8028458:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802845c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028460:	432a      	orrs	r2, r5
 8028462:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028464:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028468:	2cff      	cmp	r4, #255	; 0xff
 802846a:	d01a      	beq.n	80284a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802846c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8028470:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028474:	fb04 fa05 	mul.w	sl, r4, r5
 8028478:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802847c:	fb08 f80e 	mul.w	r8, r8, lr
 8028480:	f10a 0e20 	add.w	lr, sl, #32
 8028484:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8028488:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802848c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028490:	4445      	add	r5, r8
 8028492:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028496:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802849a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802849e:	ea45 050e 	orr.w	r5, r5, lr
 80284a2:	fb1c fe01 	smulbb	lr, ip, r1
 80284a6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80284aa:	f1cc 0810 	rsb	r8, ip, #16
 80284ae:	eba8 0801 	sub.w	r8, r8, r1
 80284b2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80284b6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80284ba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80284be:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80284c2:	4341      	muls	r1, r0
 80284c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80284c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80284cc:	ea4a 0202 	orr.w	r2, sl, r2
 80284d0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80284d4:	fb09 1108 	mla	r1, r9, r8, r1
 80284d8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80284dc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80284e0:	fb0c 1102 	mla	r1, ip, r2, r1
 80284e4:	ea4b 0505 	orr.w	r5, fp, r5
 80284e8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80284ec:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80284f0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80284f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80284f8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80284fc:	ea42 0e0e 	orr.w	lr, r2, lr
 8028500:	fa1f f28e 	uxth.w	r2, lr
 8028504:	2bff      	cmp	r3, #255	; 0xff
 8028506:	f040 80a1 	bne.w	802864c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x444>
 802850a:	803a      	strh	r2, [r7, #0]
 802850c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802850e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8028510:	4413      	add	r3, r2
 8028512:	9325      	str	r3, [sp, #148]	; 0x94
 8028514:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028516:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028518:	441a      	add	r2, r3
 802851a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802851c:	9226      	str	r2, [sp, #152]	; 0x98
 802851e:	3b01      	subs	r3, #1
 8028520:	3702      	adds	r7, #2
 8028522:	930f      	str	r3, [sp, #60]	; 0x3c
 8028524:	e6c9      	b.n	80282ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028526:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028528:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802852a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802852c:	4433      	add	r3, r6
 802852e:	9325      	str	r3, [sp, #148]	; 0x94
 8028530:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028532:	441c      	add	r4, r3
 8028534:	9b06      	ldr	r3, [sp, #24]
 8028536:	9426      	str	r4, [sp, #152]	; 0x98
 8028538:	3b01      	subs	r3, #1
 802853a:	9306      	str	r3, [sp, #24]
 802853c:	9b07      	ldr	r3, [sp, #28]
 802853e:	3302      	adds	r3, #2
 8028540:	9307      	str	r3, [sp, #28]
 8028542:	e698      	b.n	8028276 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028544:	d028      	beq.n	8028598 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8028546:	9b06      	ldr	r3, [sp, #24]
 8028548:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802854a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802854c:	3b01      	subs	r3, #1
 802854e:	fb00 5003 	mla	r0, r0, r3, r5
 8028552:	1400      	asrs	r0, r0, #16
 8028554:	f53f aeac 	bmi.w	80282b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028558:	3901      	subs	r1, #1
 802855a:	4288      	cmp	r0, r1
 802855c:	f6bf aea8 	bge.w	80282b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028560:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028562:	9826      	ldr	r0, [sp, #152]	; 0x98
 8028564:	fb01 0303 	mla	r3, r1, r3, r0
 8028568:	141b      	asrs	r3, r3, #16
 802856a:	f53f aea1 	bmi.w	80282b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802856e:	3a01      	subs	r2, #1
 8028570:	4293      	cmp	r3, r2
 8028572:	f6bf ae9d 	bge.w	80282b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028576:	9b06      	ldr	r3, [sp, #24]
 8028578:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802857c:	930f      	str	r3, [sp, #60]	; 0x3c
 802857e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028584:	2b00      	cmp	r3, #0
 8028586:	f300 80b6 	bgt.w	80286f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802858a:	9b06      	ldr	r3, [sp, #24]
 802858c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028590:	9b07      	ldr	r3, [sp, #28]
 8028592:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8028596:	9307      	str	r3, [sp, #28]
 8028598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802859a:	2b00      	cmp	r3, #0
 802859c:	f340 8218 	ble.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 80285a0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80285a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80285a8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80285ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285ae:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80285b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80285b6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80285ba:	eef0 6a48 	vmov.f32	s13, s16
 80285be:	ee69 7a27 	vmul.f32	s15, s18, s15
 80285c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80285ca:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80285ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80285d2:	eef0 6a68 	vmov.f32	s13, s17
 80285d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80285da:	ee18 2a10 	vmov	r2, s16
 80285de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80285e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80285e6:	ee18 2a90 	vmov	r2, s17
 80285ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80285ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80285f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80285f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80285f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80285f8:	3b01      	subs	r3, #1
 80285fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80285fe:	930e      	str	r3, [sp, #56]	; 0x38
 8028600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028602:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8028606:	bf08      	it	eq
 8028608:	4613      	moveq	r3, r2
 802860a:	9306      	str	r3, [sp, #24]
 802860c:	eef0 8a67 	vmov.f32	s17, s15
 8028610:	eeb0 8a47 	vmov.f32	s16, s14
 8028614:	e621      	b.n	802825a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028616:	fb08 f505 	mul.w	r5, r8, r5
 802861a:	fb09 5303 	mla	r3, r9, r3, r5
 802861e:	e6a1      	b.n	8028364 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8028620:	4681      	mov	r9, r0
 8028622:	e6c8      	b.n	80283b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8028624:	f1c1 0210 	rsb	r2, r1, #16
 8028628:	4341      	muls	r1, r0
 802862a:	fb09 1902 	mla	r9, r9, r2, r1
 802862e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028632:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8028636:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802863a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802863e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028642:	ea42 0909 	orr.w	r9, r2, r9
 8028646:	fa1f f289 	uxth.w	r2, r9
 802864a:	e75b      	b.n	8028504 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802864c:	f8b7 c000 	ldrh.w	ip, [r7]
 8028650:	43db      	mvns	r3, r3
 8028652:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028656:	fa5f fe83 	uxtb.w	lr, r3
 802865a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802865e:	fb00 f00e 	mul.w	r0, r0, lr
 8028662:	1c41      	adds	r1, r0, #1
 8028664:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028668:	1211      	asrs	r1, r2, #8
 802866a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802866e:	f021 0107 	bic.w	r1, r1, #7
 8028672:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028676:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802867a:	48d8      	ldr	r0, [pc, #864]	; (80289dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 802867c:	fb05 f50e 	mul.w	r5, r5, lr
 8028680:	b2c9      	uxtb	r1, r1
 8028682:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8028686:	1c69      	adds	r1, r5, #1
 8028688:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802868c:	10d1      	asrs	r1, r2, #3
 802868e:	f021 0103 	bic.w	r1, r1, #3
 8028692:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8028696:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802869a:	b2db      	uxtb	r3, r3
 802869c:	00c9      	lsls	r1, r1, #3
 802869e:	fb03 f30e 	mul.w	r3, r3, lr
 80286a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80286a6:	4301      	orrs	r1, r0
 80286a8:	1c58      	adds	r0, r3, #1
 80286aa:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80286ae:	00d2      	lsls	r2, r2, #3
 80286b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80286b4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80286b8:	430a      	orrs	r2, r1
 80286ba:	e726      	b.n	802850a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80286bc:	f115 0e01 	adds.w	lr, r5, #1
 80286c0:	f53f af24 	bmi.w	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80286c4:	4572      	cmp	r2, lr
 80286c6:	f6ff af21 	blt.w	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80286ca:	f110 0e01 	adds.w	lr, r0, #1
 80286ce:	f53f af1d 	bmi.w	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80286d2:	4573      	cmp	r3, lr
 80286d4:	f6ff af1a 	blt.w	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80286d8:	b21b      	sxth	r3, r3
 80286da:	b212      	sxth	r2, r2
 80286dc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80286e0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80286e4:	9301      	str	r3, [sp, #4]
 80286e6:	9200      	str	r2, [sp, #0]
 80286e8:	4639      	mov	r1, r7
 80286ea:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80286ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80286f0:	f7ff fbf4 	bl	8027edc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80286f4:	e70a      	b.n	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80286f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80286f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80286fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80286fe:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8028702:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028704:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028708:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802870a:	141f      	asrs	r7, r3, #16
 802870c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802870e:	141b      	asrs	r3, r3, #16
 8028710:	fb01 3707 	mla	r7, r1, r7, r3
 8028714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028716:	fa1f fc82 	uxth.w	ip, r2
 802871a:	eb03 0a07 	add.w	sl, r3, r7
 802871e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028722:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028726:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802872a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802872e:	b29b      	uxth	r3, r3
 8028730:	2d00      	cmp	r5, #0
 8028732:	f000 80fe 	beq.w	8028932 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8028736:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802873a:	940c      	str	r4, [sp, #48]	; 0x30
 802873c:	eb0a 0b01 	add.w	fp, sl, r1
 8028740:	fa1f fa85 	uxth.w	sl, r5
 8028744:	fb0a fc0c 	mul.w	ip, sl, ip
 8028748:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802874c:	fa1f fa8a 	uxth.w	sl, sl
 8028750:	eba0 000c 	sub.w	r0, r0, ip
 8028754:	eba3 030a 	sub.w	r3, r3, sl
 8028758:	b280      	uxth	r0, r0
 802875a:	fb08 f000 	mul.w	r0, r8, r0
 802875e:	b29b      	uxth	r3, r3
 8028760:	fb09 0303 	mla	r3, r9, r3, r0
 8028764:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028766:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802876a:	940d      	str	r4, [sp, #52]	; 0x34
 802876c:	fb0a 3300 	mla	r3, sl, r0, r3
 8028770:	fb0c 3304 	mla	r3, ip, r4, r3
 8028774:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028778:	2b00      	cmp	r3, #0
 802877a:	f000 80cc 	beq.w	8028916 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 802877e:	9808      	ldr	r0, [sp, #32]
 8028780:	9c08      	ldr	r4, [sp, #32]
 8028782:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028786:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802878a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802878e:	f000 80d5 	beq.w	802893c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8028792:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028796:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802879a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802879e:	fb09 f707 	mul.w	r7, r9, r7
 80287a2:	fb0a fc0c 	mul.w	ip, sl, ip
 80287a6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80287aa:	f107 0b20 	add.w	fp, r7, #32
 80287ae:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80287b2:	44cc      	add	ip, r9
 80287b4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80287b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80287bc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80287c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80287c4:	ea4c 0909 	orr.w	r9, ip, r9
 80287c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80287cc:	8847      	ldrh	r7, [r0, #2]
 80287ce:	d019      	beq.n	8028804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 80287d0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80287d4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80287d8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80287dc:	fb08 f807 	mul.w	r8, r8, r7
 80287e0:	fb0a fc0c 	mul.w	ip, sl, ip
 80287e4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80287e8:	f108 0b20 	add.w	fp, r8, #32
 80287ec:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80287f0:	44bc      	add	ip, r7
 80287f2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80287f6:	0a3f      	lsrs	r7, r7, #8
 80287f8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80287fc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028800:	ea4c 0707 	orr.w	r7, ip, r7
 8028804:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028808:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802880c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8028810:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028814:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028818:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802881c:	ea4c 0909 	orr.w	r9, ip, r9
 8028820:	ea4a 0707 	orr.w	r7, sl, r7
 8028824:	2d00      	cmp	r5, #0
 8028826:	f000 808b 	beq.w	8028940 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802882a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802882e:	3901      	subs	r1, #1
 8028830:	0049      	lsls	r1, r1, #1
 8028832:	3102      	adds	r1, #2
 8028834:	eb00 0c01 	add.w	ip, r0, r1
 8028838:	5a41      	ldrh	r1, [r0, r1]
 802883a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802883c:	28ff      	cmp	r0, #255	; 0xff
 802883e:	d019      	beq.n	8028874 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8028840:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028842:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028846:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802884a:	fb04 fa01 	mul.w	sl, r4, r1
 802884e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028852:	fb08 f800 	mul.w	r8, r8, r0
 8028856:	f10a 0020 	add.w	r0, sl, #32
 802885a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802885e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028862:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028866:	4441      	add	r1, r8
 8028868:	0a00      	lsrs	r0, r0, #8
 802886a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802886e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028872:	4301      	orrs	r1, r0
 8028874:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028876:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802887a:	2cff      	cmp	r4, #255	; 0xff
 802887c:	d01a      	beq.n	80288b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802887e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028882:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028886:	fb04 fa00 	mul.w	sl, r4, r0
 802888a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802888e:	fb08 f80c 	mul.w	r8, r8, ip
 8028892:	f10a 0c20 	add.w	ip, sl, #32
 8028896:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802889a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802889e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80288a2:	4440      	add	r0, r8
 80288a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80288a8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80288ac:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80288b0:	ea40 000c 	orr.w	r0, r0, ip
 80288b4:	fb15 fc02 	smulbb	ip, r5, r2
 80288b8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80288bc:	f1c5 0810 	rsb	r8, r5, #16
 80288c0:	eba8 0802 	sub.w	r8, r8, r2
 80288c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80288c8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80288cc:	437a      	muls	r2, r7
 80288ce:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80288d2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80288d6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80288da:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80288de:	fb09 2208 	mla	r2, r9, r8, r2
 80288e2:	ea4a 0101 	orr.w	r1, sl, r1
 80288e6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80288ea:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80288ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80288f2:	fb05 2201 	mla	r2, r5, r1, r2
 80288f6:	ea4b 0000 	orr.w	r0, fp, r0
 80288fa:	fb0c 2200 	mla	r2, ip, r0, r2
 80288fe:	0d57      	lsrs	r7, r2, #21
 8028900:	0952      	lsrs	r2, r2, #5
 8028902:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028906:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802890a:	433a      	orrs	r2, r7
 802890c:	2bff      	cmp	r3, #255	; 0xff
 802890e:	b292      	uxth	r2, r2
 8028910:	d127      	bne.n	8028962 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8028912:	f8ae 2000 	strh.w	r2, [lr]
 8028916:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028918:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802891a:	4413      	add	r3, r2
 802891c:	9325      	str	r3, [sp, #148]	; 0x94
 802891e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028920:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028922:	441a      	add	r2, r3
 8028924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028926:	9226      	str	r2, [sp, #152]	; 0x98
 8028928:	3b01      	subs	r3, #1
 802892a:	f10e 0e02 	add.w	lr, lr, #2
 802892e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028930:	e627      	b.n	8028582 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028932:	fb08 f000 	mul.w	r0, r8, r0
 8028936:	fb09 0303 	mla	r3, r9, r3, r0
 802893a:	e71b      	b.n	8028774 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802893c:	46b9      	mov	r9, r7
 802893e:	e743      	b.n	80287c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8028940:	f1c2 0110 	rsb	r1, r2, #16
 8028944:	437a      	muls	r2, r7
 8028946:	fb09 2901 	mla	r9, r9, r1, r2
 802894a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802894e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028952:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028956:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802895a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802895e:	4302      	orrs	r2, r0
 8028960:	e7d4      	b.n	802890c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028962:	f8be 7000 	ldrh.w	r7, [lr]
 8028966:	4c1d      	ldr	r4, [pc, #116]	; (80289dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 8028968:	43db      	mvns	r3, r3
 802896a:	1238      	asrs	r0, r7, #8
 802896c:	fa5f fc83 	uxtb.w	ip, r3
 8028970:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028974:	10fd      	asrs	r5, r7, #3
 8028976:	fb00 f00c 	mul.w	r0, r0, ip
 802897a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802897e:	fb05 f10c 	mul.w	r1, r5, ip
 8028982:	1c45      	adds	r5, r0, #1
 8028984:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028988:	1215      	asrs	r5, r2, #8
 802898a:	f025 0507 	bic.w	r5, r5, #7
 802898e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028992:	1c4d      	adds	r5, r1, #1
 8028994:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028998:	10d1      	asrs	r1, r2, #3
 802899a:	f021 0103 	bic.w	r1, r1, #3
 802899e:	00fb      	lsls	r3, r7, #3
 80289a0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80289a4:	b2db      	uxtb	r3, r3
 80289a6:	b2c0      	uxtb	r0, r0
 80289a8:	00c9      	lsls	r1, r1, #3
 80289aa:	fb03 f30c 	mul.w	r3, r3, ip
 80289ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80289b2:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80289b6:	4308      	orrs	r0, r1
 80289b8:	1c59      	adds	r1, r3, #1
 80289ba:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80289be:	00d2      	lsls	r2, r2, #3
 80289c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80289c4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80289c8:	4318      	orrs	r0, r3
 80289ca:	f8ae 0000 	strh.w	r0, [lr]
 80289ce:	e7a2      	b.n	8028916 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 80289d0:	b013      	add	sp, #76	; 0x4c
 80289d2:	ecbd 8b08 	vpop	{d8-d11}
 80289d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80289da:	bf00      	nop
 80289dc:	fffff800 	.word	0xfffff800

080289e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80289e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80289e4:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80289e8:	fb0c 4e03 	mla	lr, ip, r3, r4
 80289ec:	f1bc 0f00 	cmp.w	ip, #0
 80289f0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80289f4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80289f8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80289fc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8028a00:	8808      	ldrh	r0, [r1, #0]
 8028a02:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8028a06:	db2f      	blt.n	8028a68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028a08:	45e2      	cmp	sl, ip
 8028a0a:	dd2d      	ble.n	8028a68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028a0c:	2c00      	cmp	r4, #0
 8028a0e:	db29      	blt.n	8028a64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028a10:	42a3      	cmp	r3, r4
 8028a12:	dd27      	ble.n	8028a64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028a14:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8028a18:	1c62      	adds	r2, r4, #1
 8028a1a:	d428      	bmi.n	8028a6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028a1c:	4293      	cmp	r3, r2
 8028a1e:	dd26      	ble.n	8028a6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028a20:	b32f      	cbz	r7, 8028a6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028a22:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8028a26:	f11c 0c01 	adds.w	ip, ip, #1
 8028a2a:	d424      	bmi.n	8028a76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028a2c:	45e2      	cmp	sl, ip
 8028a2e:	dd22      	ble.n	8028a76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028a30:	2e00      	cmp	r6, #0
 8028a32:	f000 809d 	beq.w	8028b70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8028a36:	2c00      	cmp	r4, #0
 8028a38:	db1b      	blt.n	8028a72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8028a3a:	42a3      	cmp	r3, r4
 8028a3c:	dd19      	ble.n	8028a72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8028a3e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8028a42:	3401      	adds	r4, #1
 8028a44:	d41a      	bmi.n	8028a7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028a46:	42a3      	cmp	r3, r4
 8028a48:	dd18      	ble.n	8028a7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028a4a:	b1cf      	cbz	r7, 8028a80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8028a4c:	3301      	adds	r3, #1
 8028a4e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8028a52:	2f0f      	cmp	r7, #15
 8028a54:	d915      	bls.n	8028a82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8028a56:	4b49      	ldr	r3, [pc, #292]	; (8028b7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8028a58:	4a49      	ldr	r2, [pc, #292]	; (8028b80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8028a5a:	484a      	ldr	r0, [pc, #296]	; (8028b84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8028a5c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8028a60:	f005 fa5e 	bl	802df20 <__assert_func>
 8028a64:	4681      	mov	r9, r0
 8028a66:	e7d7      	b.n	8028a18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8028a68:	4686      	mov	lr, r0
 8028a6a:	4681      	mov	r9, r0
 8028a6c:	e7db      	b.n	8028a26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028a6e:	4686      	mov	lr, r0
 8028a70:	e7d9      	b.n	8028a26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028a72:	4684      	mov	ip, r0
 8028a74:	e7e5      	b.n	8028a42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8028a76:	4603      	mov	r3, r0
 8028a78:	4684      	mov	ip, r0
 8028a7a:	e7ea      	b.n	8028a52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028a7c:	4603      	mov	r3, r0
 8028a7e:	e7e8      	b.n	8028a52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028a80:	4603      	mov	r3, r0
 8028a82:	2e0f      	cmp	r6, #15
 8028a84:	d8e7      	bhi.n	8028a56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028a86:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8028a8a:	fb17 f806 	smulbb	r8, r7, r6
 8028a8e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028a92:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8028a96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028a9a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8028a9e:	ea44 0909 	orr.w	r9, r4, r9
 8028aa2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028aa6:	f1c6 0410 	rsb	r4, r6, #16
 8028aaa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028aae:	1be4      	subs	r4, r4, r7
 8028ab0:	041a      	lsls	r2, r3, #16
 8028ab2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8028ab6:	ea4a 0e0e 	orr.w	lr, sl, lr
 8028aba:	fb07 fe0e 	mul.w	lr, r7, lr
 8028abe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028ac2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8028ac6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028aca:	fb04 e409 	mla	r4, r4, r9, lr
 8028ace:	4313      	orrs	r3, r2
 8028ad0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028ad4:	fb08 4303 	mla	r3, r8, r3, r4
 8028ad8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028adc:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8028ae0:	4322      	orrs	r2, r4
 8028ae2:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8028ae6:	fb06 3202 	mla	r2, r6, r2, r3
 8028aea:	0d53      	lsrs	r3, r2, #21
 8028aec:	0952      	lsrs	r2, r2, #5
 8028aee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028af2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028af6:	431a      	orrs	r2, r3
 8028af8:	b293      	uxth	r3, r2
 8028afa:	b2af      	uxth	r7, r5
 8028afc:	1202      	asrs	r2, r0, #8
 8028afe:	43ed      	mvns	r5, r5
 8028b00:	b2ed      	uxtb	r5, r5
 8028b02:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028b06:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028b0a:	fb12 f205 	smulbb	r2, r2, r5
 8028b0e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028b12:	fb0c 2c07 	mla	ip, ip, r7, r2
 8028b16:	00dc      	lsls	r4, r3, #3
 8028b18:	10da      	asrs	r2, r3, #3
 8028b1a:	10c6      	asrs	r6, r0, #3
 8028b1c:	00c3      	lsls	r3, r0, #3
 8028b1e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028b22:	b2db      	uxtb	r3, r3
 8028b24:	fb16 f605 	smulbb	r6, r6, r5
 8028b28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028b2c:	b2e4      	uxtb	r4, r4
 8028b2e:	fb13 f305 	smulbb	r3, r3, r5
 8028b32:	fa1f fc8c 	uxth.w	ip, ip
 8028b36:	fb02 6207 	mla	r2, r2, r7, r6
 8028b3a:	fb04 3307 	mla	r3, r4, r7, r3
 8028b3e:	b296      	uxth	r6, r2
 8028b40:	b29a      	uxth	r2, r3
 8028b42:	f10c 0301 	add.w	r3, ip, #1
 8028b46:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028b4a:	1c53      	adds	r3, r2, #1
 8028b4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028b50:	1c72      	adds	r2, r6, #1
 8028b52:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8028b56:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028b5a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028b5e:	0952      	lsrs	r2, r2, #5
 8028b60:	ea43 030c 	orr.w	r3, r3, ip
 8028b64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028b68:	4313      	orrs	r3, r2
 8028b6a:	800b      	strh	r3, [r1, #0]
 8028b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b70:	2f0f      	cmp	r7, #15
 8028b72:	f63f af70 	bhi.w	8028a56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028b76:	4603      	mov	r3, r0
 8028b78:	4684      	mov	ip, r0
 8028b7a:	e784      	b.n	8028a86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8028b7c:	08032c55 	.word	0x08032c55
 8028b80:	080332cb 	.word	0x080332cb
 8028b84:	08032cd9 	.word	0x08032cd9

08028b88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b8c:	ed2d 8b08 	vpush	{d8-d11}
 8028b90:	b093      	sub	sp, #76	; 0x4c
 8028b92:	461d      	mov	r5, r3
 8028b94:	9210      	str	r2, [sp, #64]	; 0x40
 8028b96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028b98:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8028b9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8028b9e:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8028ba2:	910a      	str	r1, [sp, #40]	; 0x28
 8028ba4:	6859      	ldr	r1, [r3, #4]
 8028ba6:	681b      	ldr	r3, [r3, #0]
 8028ba8:	9011      	str	r0, [sp, #68]	; 0x44
 8028baa:	fb01 2707 	mla	r7, r1, r7, r2
 8028bae:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028bb2:	9307      	str	r3, [sp, #28]
 8028bb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028bb6:	681b      	ldr	r3, [r3, #0]
 8028bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8028bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028bbc:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028bc0:	43db      	mvns	r3, r3
 8028bc2:	b2db      	uxtb	r3, r3
 8028bc4:	eeb0 aa40 	vmov.f32	s20, s0
 8028bc8:	eef0 9a60 	vmov.f32	s19, s1
 8028bcc:	eeb0 9a41 	vmov.f32	s18, s2
 8028bd0:	eeb0 8a62 	vmov.f32	s16, s5
 8028bd4:	eef0 8a43 	vmov.f32	s17, s6
 8028bd8:	eef0 ba44 	vmov.f32	s23, s8
 8028bdc:	eeb0 ba64 	vmov.f32	s22, s9
 8028be0:	eef0 aa45 	vmov.f32	s21, s10
 8028be4:	9308      	str	r3, [sp, #32]
 8028be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028be8:	2b00      	cmp	r3, #0
 8028bea:	dc03      	bgt.n	8028bf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	f340 8203 	ble.w	8028ffa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028bf4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028bf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028bfa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028bfe:	1e48      	subs	r0, r1, #1
 8028c00:	f102 3cff 	add.w	ip, r2, #4294967295
 8028c04:	2d00      	cmp	r5, #0
 8028c06:	f340 80da 	ble.w	8028dbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028c0a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028c0e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028c12:	d406      	bmi.n	8028c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028c14:	4586      	cmp	lr, r0
 8028c16:	da04      	bge.n	8028c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	db02      	blt.n	8028c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028c1c:	4563      	cmp	r3, ip
 8028c1e:	f2c0 80cf 	blt.w	8028dc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8028c22:	f11e 0e01 	adds.w	lr, lr, #1
 8028c26:	f100 80c1 	bmi.w	8028dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028c2a:	4571      	cmp	r1, lr
 8028c2c:	f2c0 80be 	blt.w	8028dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028c30:	3301      	adds	r3, #1
 8028c32:	f100 80bb 	bmi.w	8028dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028c36:	429a      	cmp	r2, r3
 8028c38:	f2c0 80b8 	blt.w	8028dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028c3c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028c40:	46a9      	mov	r9, r5
 8028c42:	f1b9 0f00 	cmp.w	r9, #0
 8028c46:	f340 80d8 	ble.w	8028dfa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028c4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028c4c:	1421      	asrs	r1, r4, #16
 8028c4e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028c52:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028c56:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028c5a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028c5e:	f100 8111 	bmi.w	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028c66:	4551      	cmp	r1, sl
 8028c68:	f280 810c 	bge.w	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c6c:	2800      	cmp	r0, #0
 8028c6e:	f2c0 8109 	blt.w	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c72:	f103 3aff 	add.w	sl, r3, #4294967295
 8028c76:	4550      	cmp	r0, sl
 8028c78:	f280 8104 	bge.w	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c7c:	fa0f f38e 	sxth.w	r3, lr
 8028c80:	fb00 1103 	mla	r1, r0, r3, r1
 8028c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028c86:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028c8a:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028c8e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028c92:	f1bc 0f00 	cmp.w	ip, #0
 8028c96:	d007      	beq.n	8028ca8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8028c98:	005b      	lsls	r3, r3, #1
 8028c9a:	eb0a 0003 	add.w	r0, sl, r3
 8028c9e:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8028ca4:	8843      	ldrh	r3, [r0, #2]
 8028ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8028ca8:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028cac:	fb12 f30c 	smulbb	r3, r2, ip
 8028cb0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028cb4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028cb8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028cbc:	10db      	asrs	r3, r3, #3
 8028cbe:	ea40 000e 	orr.w	r0, r0, lr
 8028cc2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028cc6:	f1cc 0e10 	rsb	lr, ip, #16
 8028cca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028cce:	ebae 0e02 	sub.w	lr, lr, r2
 8028cd2:	ea4a 0101 	orr.w	r1, sl, r1
 8028cd6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028cda:	4351      	muls	r1, r2
 8028cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028cde:	9f08      	ldr	r7, [sp, #32]
 8028ce0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028ce4:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028ce8:	0410      	lsls	r0, r2, #16
 8028cea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028cee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028cf2:	4310      	orrs	r0, r2
 8028cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028cf8:	0412      	lsls	r2, r2, #16
 8028cfa:	fb03 e000 	mla	r0, r3, r0, lr
 8028cfe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028d02:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028d06:	ea42 020e 	orr.w	r2, r2, lr
 8028d0a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028d0e:	fb03 0302 	mla	r3, r3, r2, r0
 8028d12:	0d5a      	lsrs	r2, r3, #21
 8028d14:	095b      	lsrs	r3, r3, #5
 8028d16:	f8b8 0000 	ldrh.w	r0, [r8]
 8028d1a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028d1e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028d22:	4313      	orrs	r3, r2
 8028d24:	b29b      	uxth	r3, r3
 8028d26:	1201      	asrs	r1, r0, #8
 8028d28:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028d2c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028d30:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028d34:	fb11 f107 	smulbb	r1, r1, r7
 8028d38:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8028d3c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028d40:	00c0      	lsls	r0, r0, #3
 8028d42:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028d46:	b2c0      	uxtb	r0, r0
 8028d48:	10d9      	asrs	r1, r3, #3
 8028d4a:	00db      	lsls	r3, r3, #3
 8028d4c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028d50:	b2db      	uxtb	r3, r3
 8028d52:	fb10 f007 	smulbb	r0, r0, r7
 8028d56:	fa1f fc8c 	uxth.w	ip, ip
 8028d5a:	fb03 0302 	mla	r3, r3, r2, r0
 8028d5e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028d62:	fb1e fe07 	smulbb	lr, lr, r7
 8028d66:	fb01 e102 	mla	r1, r1, r2, lr
 8028d6a:	b29a      	uxth	r2, r3
 8028d6c:	f10c 0301 	add.w	r3, ip, #1
 8028d70:	b289      	uxth	r1, r1
 8028d72:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028d76:	1c53      	adds	r3, r2, #1
 8028d78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028d7c:	1c4a      	adds	r2, r1, #1
 8028d7e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028d82:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028d86:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028d8a:	0949      	lsrs	r1, r1, #5
 8028d8c:	ea43 030c 	orr.w	r3, r3, ip
 8028d90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028d94:	430b      	orrs	r3, r1
 8028d96:	f8a8 3000 	strh.w	r3, [r8]
 8028d9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028d9c:	441c      	add	r4, r3
 8028d9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028da0:	f108 0802 	add.w	r8, r8, #2
 8028da4:	441e      	add	r6, r3
 8028da6:	f109 39ff 	add.w	r9, r9, #4294967295
 8028daa:	e74a      	b.n	8028c42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028dac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028dae:	441c      	add	r4, r3
 8028db0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028db2:	441e      	add	r6, r3
 8028db4:	9b07      	ldr	r3, [sp, #28]
 8028db6:	3302      	adds	r3, #2
 8028db8:	3d01      	subs	r5, #1
 8028dba:	9307      	str	r3, [sp, #28]
 8028dbc:	e722      	b.n	8028c04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028dbe:	d022      	beq.n	8028e06 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028dc0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028dc2:	1e6b      	subs	r3, r5, #1
 8028dc4:	fb00 4003 	mla	r0, r0, r3, r4
 8028dc8:	1400      	asrs	r0, r0, #16
 8028dca:	f53f af37 	bmi.w	8028c3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028dce:	3901      	subs	r1, #1
 8028dd0:	4288      	cmp	r0, r1
 8028dd2:	f6bf af33 	bge.w	8028c3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028dd6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028dd8:	fb01 6303 	mla	r3, r1, r3, r6
 8028ddc:	141b      	asrs	r3, r3, #16
 8028dde:	f53f af2d 	bmi.w	8028c3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028de2:	3a01      	subs	r2, #1
 8028de4:	4293      	cmp	r3, r2
 8028de6:	f6bf af29 	bge.w	8028c3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028dea:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028dee:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028df2:	46a8      	mov	r8, r5
 8028df4:	f1b8 0f00 	cmp.w	r8, #0
 8028df8:	dc5e      	bgt.n	8028eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028dfa:	9b07      	ldr	r3, [sp, #28]
 8028dfc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028e00:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028e04:	9307      	str	r3, [sp, #28]
 8028e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e08:	2b00      	cmp	r3, #0
 8028e0a:	f340 80f6 	ble.w	8028ffa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028e0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028e16:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028e1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028e1c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028e20:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028e24:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028e28:	eef0 6a48 	vmov.f32	s13, s16
 8028e2c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028e30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028e34:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028e38:	ee16 4a90 	vmov	r4, s13
 8028e3c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028e40:	eef0 6a68 	vmov.f32	s13, s17
 8028e44:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028e48:	ee18 2a10 	vmov	r2, s16
 8028e4c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e54:	ee18 2a90 	vmov	r2, s17
 8028e58:	9327      	str	r3, [sp, #156]	; 0x9c
 8028e5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e60:	9328      	str	r3, [sp, #160]	; 0xa0
 8028e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028e66:	3b01      	subs	r3, #1
 8028e68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8028e6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028e70:	ee16 6a90 	vmov	r6, s13
 8028e74:	bf14      	ite	ne
 8028e76:	461d      	movne	r5, r3
 8028e78:	4615      	moveq	r5, r2
 8028e7a:	eef0 8a67 	vmov.f32	s17, s15
 8028e7e:	eeb0 8a47 	vmov.f32	s16, s14
 8028e82:	e6b0      	b.n	8028be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028e84:	f111 0a01 	adds.w	sl, r1, #1
 8028e88:	d487      	bmi.n	8028d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e8a:	45d6      	cmp	lr, sl
 8028e8c:	db85      	blt.n	8028d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e8e:	f110 0a01 	adds.w	sl, r0, #1
 8028e92:	d482      	bmi.n	8028d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e94:	4553      	cmp	r3, sl
 8028e96:	db80      	blt.n	8028d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e98:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028e9a:	9101      	str	r1, [sp, #4]
 8028e9c:	b21b      	sxth	r3, r3
 8028e9e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028ea2:	9300      	str	r3, [sp, #0]
 8028ea4:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028ea8:	fa0f f38e 	sxth.w	r3, lr
 8028eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028eae:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028eb0:	4641      	mov	r1, r8
 8028eb2:	f7ff fd95 	bl	80289e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028eb6:	e770      	b.n	8028d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028eb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028eba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028ebc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ec0:	1430      	asrs	r0, r6, #16
 8028ec2:	1423      	asrs	r3, r4, #16
 8028ec4:	fb01 3000 	mla	r0, r1, r0, r3
 8028ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028eca:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028ece:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028ed2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028ed6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028eda:	8858      	ldrh	r0, [r3, #2]
 8028edc:	f1be 0f00 	cmp.w	lr, #0
 8028ee0:	d00b      	beq.n	8028efa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8028ee2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028ee6:	3901      	subs	r1, #1
 8028ee8:	0049      	lsls	r1, r1, #1
 8028eea:	3102      	adds	r1, #2
 8028eec:	eb03 0b01 	add.w	fp, r3, r1
 8028ef0:	5a5b      	ldrh	r3, [r3, r1]
 8028ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8028ef4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028ef8:	930f      	str	r3, [sp, #60]	; 0x3c
 8028efa:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028efe:	fb12 f30e 	smulbb	r3, r2, lr
 8028f02:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028f06:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028f0a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8028f0e:	10db      	asrs	r3, r3, #3
 8028f10:	ea41 010c 	orr.w	r1, r1, ip
 8028f14:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028f18:	f1ce 0c10 	rsb	ip, lr, #16
 8028f1c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028f20:	ebac 0c02 	sub.w	ip, ip, r2
 8028f24:	ea4b 0000 	orr.w	r0, fp, r0
 8028f28:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028f2c:	4350      	muls	r0, r2
 8028f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028f30:	9f08      	ldr	r7, [sp, #32]
 8028f32:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028f36:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028f3a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028f3e:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8028f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028f46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028f4a:	0412      	lsls	r2, r2, #16
 8028f4c:	ea4b 0101 	orr.w	r1, fp, r1
 8028f50:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028f54:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028f58:	fb03 c101 	mla	r1, r3, r1, ip
 8028f5c:	4302      	orrs	r2, r0
 8028f5e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028f62:	fb03 1202 	mla	r2, r3, r2, r1
 8028f66:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028f6a:	0952      	lsrs	r2, r2, #5
 8028f6c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8028f70:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028f74:	f8b9 2000 	ldrh.w	r2, [r9]
 8028f78:	ea4b 0303 	orr.w	r3, fp, r3
 8028f7c:	b29b      	uxth	r3, r3
 8028f7e:	1211      	asrs	r1, r2, #8
 8028f80:	1218      	asrs	r0, r3, #8
 8028f82:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028f86:	fb11 f107 	smulbb	r1, r1, r7
 8028f8a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8028f8e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028f92:	00d2      	lsls	r2, r2, #3
 8028f94:	fb00 100a 	mla	r0, r0, sl, r1
 8028f98:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028f9c:	10d9      	asrs	r1, r3, #3
 8028f9e:	b2d2      	uxtb	r2, r2
 8028fa0:	00db      	lsls	r3, r3, #3
 8028fa2:	fb1c fc07 	smulbb	ip, ip, r7
 8028fa6:	fb12 f207 	smulbb	r2, r2, r7
 8028faa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028fae:	b2db      	uxtb	r3, r3
 8028fb0:	b280      	uxth	r0, r0
 8028fb2:	fb01 c10a 	mla	r1, r1, sl, ip
 8028fb6:	fb03 230a 	mla	r3, r3, sl, r2
 8028fba:	b29b      	uxth	r3, r3
 8028fbc:	b289      	uxth	r1, r1
 8028fbe:	1c42      	adds	r2, r0, #1
 8028fc0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028fc4:	f101 0c01 	add.w	ip, r1, #1
 8028fc8:	1c5a      	adds	r2, r3, #1
 8028fca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028fce:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028fd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028fd4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028fd8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028fdc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028fe0:	4310      	orrs	r0, r2
 8028fe2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028fe6:	441c      	add	r4, r3
 8028fe8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028fea:	ea40 000c 	orr.w	r0, r0, ip
 8028fee:	f829 0b02 	strh.w	r0, [r9], #2
 8028ff2:	441e      	add	r6, r3
 8028ff4:	f108 38ff 	add.w	r8, r8, #4294967295
 8028ff8:	e6fc      	b.n	8028df4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028ffa:	b013      	add	sp, #76	; 0x4c
 8028ffc:	ecbd 8b08 	vpop	{d8-d11}
 8029000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029004 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8029004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029008:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802900c:	fb06 5c03 	mla	ip, r6, r3, r5
 8029010:	2e00      	cmp	r6, #0
 8029012:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8029016:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802901a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802901e:	8808      	ldrh	r0, [r1, #0]
 8029020:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8029024:	db2e      	blt.n	8029084 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8029026:	45b0      	cmp	r8, r6
 8029028:	dd2c      	ble.n	8029084 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802902a:	2d00      	cmp	r5, #0
 802902c:	db28      	blt.n	8029080 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802902e:	42ab      	cmp	r3, r5
 8029030:	dd26      	ble.n	8029080 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8029032:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8029036:	1c6a      	adds	r2, r5, #1
 8029038:	d427      	bmi.n	802908a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802903a:	4293      	cmp	r3, r2
 802903c:	dd25      	ble.n	802908a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802903e:	b324      	cbz	r4, 802908a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8029040:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029044:	3601      	adds	r6, #1
 8029046:	d424      	bmi.n	8029092 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8029048:	45b0      	cmp	r8, r6
 802904a:	dd22      	ble.n	8029092 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802904c:	b31f      	cbz	r7, 8029096 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802904e:	2d00      	cmp	r5, #0
 8029050:	db1d      	blt.n	802908e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8029052:	42ab      	cmp	r3, r5
 8029054:	dd1b      	ble.n	802908e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8029056:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802905a:	3501      	adds	r5, #1
 802905c:	d405      	bmi.n	802906a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802905e:	42ab      	cmp	r3, r5
 8029060:	dd03      	ble.n	802906a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029062:	b124      	cbz	r4, 802906e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8029064:	3301      	adds	r3, #1
 8029066:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802906a:	2c0f      	cmp	r4, #15
 802906c:	d801      	bhi.n	8029072 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802906e:	2f0f      	cmp	r7, #15
 8029070:	d914      	bls.n	802909c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8029072:	4b27      	ldr	r3, [pc, #156]	; (8029110 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8029074:	4a27      	ldr	r2, [pc, #156]	; (8029114 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8029076:	4828      	ldr	r0, [pc, #160]	; (8029118 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8029078:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802907c:	f004 ff50 	bl	802df20 <__assert_func>
 8029080:	4684      	mov	ip, r0
 8029082:	e7d8      	b.n	8029036 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8029084:	4602      	mov	r2, r0
 8029086:	4684      	mov	ip, r0
 8029088:	e7dc      	b.n	8029044 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802908a:	4602      	mov	r2, r0
 802908c:	e7da      	b.n	8029044 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802908e:	4606      	mov	r6, r0
 8029090:	e7e3      	b.n	802905a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8029092:	4606      	mov	r6, r0
 8029094:	e7e9      	b.n	802906a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029096:	2c0f      	cmp	r4, #15
 8029098:	d8eb      	bhi.n	8029072 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802909a:	4606      	mov	r6, r0
 802909c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80290a0:	fb14 f307 	smulbb	r3, r4, r7
 80290a4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80290a8:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80290ac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80290b0:	10db      	asrs	r3, r3, #3
 80290b2:	ea45 0c0c 	orr.w	ip, r5, ip
 80290b6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80290ba:	f1c7 0510 	rsb	r5, r7, #16
 80290be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80290c2:	1b2d      	subs	r5, r5, r4
 80290c4:	ea4e 0202 	orr.w	r2, lr, r2
 80290c8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80290cc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80290d0:	4354      	muls	r4, r2
 80290d2:	fb05 450c 	mla	r5, r5, ip, r4
 80290d6:	0404      	lsls	r4, r0, #16
 80290d8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80290dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80290e0:	4320      	orrs	r0, r4
 80290e2:	fb03 5400 	mla	r4, r3, r0, r5
 80290e6:	0430      	lsls	r0, r6, #16
 80290e8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80290ec:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80290f0:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80290f4:	4330      	orrs	r0, r6
 80290f6:	fb07 4000 	mla	r0, r7, r0, r4
 80290fa:	0d43      	lsrs	r3, r0, #21
 80290fc:	0940      	lsrs	r0, r0, #5
 80290fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029102:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029106:	4318      	orrs	r0, r3
 8029108:	8008      	strh	r0, [r1, #0]
 802910a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802910e:	bf00      	nop
 8029110:	08032c55 	.word	0x08032c55
 8029114:	080332cb 	.word	0x080332cb
 8029118:	08032cd9 	.word	0x08032cd9

0802911c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029120:	ed2d 8b08 	vpush	{d8-d11}
 8029124:	b08f      	sub	sp, #60	; 0x3c
 8029126:	461d      	mov	r5, r3
 8029128:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802912a:	920c      	str	r2, [sp, #48]	; 0x30
 802912c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8029130:	9107      	str	r1, [sp, #28]
 8029132:	6859      	ldr	r1, [r3, #4]
 8029134:	681b      	ldr	r3, [r3, #0]
 8029136:	900d      	str	r0, [sp, #52]	; 0x34
 8029138:	fb01 2707 	mla	r7, r1, r7, r2
 802913c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8029140:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029142:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8029146:	f8d3 8000 	ldr.w	r8, [r3]
 802914a:	eeb0 aa40 	vmov.f32	s20, s0
 802914e:	eef0 9a60 	vmov.f32	s19, s1
 8029152:	eeb0 9a41 	vmov.f32	s18, s2
 8029156:	eeb0 8a62 	vmov.f32	s16, s5
 802915a:	eef0 8a43 	vmov.f32	s17, s6
 802915e:	eef0 ba44 	vmov.f32	s23, s8
 8029162:	eeb0 ba64 	vmov.f32	s22, s9
 8029166:	eef0 aa45 	vmov.f32	s21, s10
 802916a:	9b07      	ldr	r3, [sp, #28]
 802916c:	2b00      	cmp	r3, #0
 802916e:	dc03      	bgt.n	8029178 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029172:	2b00      	cmp	r3, #0
 8029174:	f340 8181 	ble.w	802947a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8029178:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802917a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802917e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029182:	1e48      	subs	r0, r1, #1
 8029184:	f102 3cff 	add.w	ip, r2, #4294967295
 8029188:	2d00      	cmp	r5, #0
 802918a:	f340 809b 	ble.w	80292c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 802918e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029192:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029196:	d406      	bmi.n	80291a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029198:	4586      	cmp	lr, r0
 802919a:	da04      	bge.n	80291a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802919c:	2b00      	cmp	r3, #0
 802919e:	db02      	blt.n	80291a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80291a0:	4563      	cmp	r3, ip
 80291a2:	f2c0 8090 	blt.w	80292c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80291a6:	f11e 0e01 	adds.w	lr, lr, #1
 80291aa:	f100 8084 	bmi.w	80292b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80291ae:	4571      	cmp	r1, lr
 80291b0:	f2c0 8081 	blt.w	80292b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80291b4:	3301      	adds	r3, #1
 80291b6:	d47e      	bmi.n	80292b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80291b8:	429a      	cmp	r2, r3
 80291ba:	db7c      	blt.n	80292b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80291bc:	46aa      	mov	sl, r5
 80291be:	46b9      	mov	r9, r7
 80291c0:	f1ba 0f00 	cmp.w	sl, #0
 80291c4:	f340 8099 	ble.w	80292fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80291c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291ca:	1421      	asrs	r1, r4, #16
 80291cc:	ea4f 4026 	mov.w	r0, r6, asr #16
 80291d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80291d4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80291d8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80291dc:	f100 80d0 	bmi.w	8029380 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80291e0:	f10e 3bff 	add.w	fp, lr, #4294967295
 80291e4:	4559      	cmp	r1, fp
 80291e6:	f280 80cb 	bge.w	8029380 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80291ea:	2800      	cmp	r0, #0
 80291ec:	f2c0 80c8 	blt.w	8029380 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80291f0:	f103 3bff 	add.w	fp, r3, #4294967295
 80291f4:	4558      	cmp	r0, fp
 80291f6:	f280 80c3 	bge.w	8029380 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80291fa:	fa0f fe8e 	sxth.w	lr, lr
 80291fe:	fb00 110e 	mla	r1, r0, lr, r1
 8029202:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029206:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802920a:	8841      	ldrh	r1, [r0, #2]
 802920c:	f1bc 0f00 	cmp.w	ip, #0
 8029210:	d00b      	beq.n	802922a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8029212:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8029216:	3b01      	subs	r3, #1
 8029218:	005b      	lsls	r3, r3, #1
 802921a:	3302      	adds	r3, #2
 802921c:	eb00 0e03 	add.w	lr, r0, r3
 8029220:	5ac3      	ldrh	r3, [r0, r3]
 8029222:	9308      	str	r3, [sp, #32]
 8029224:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029228:	9309      	str	r3, [sp, #36]	; 0x24
 802922a:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802922e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029232:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8029236:	ea40 000b 	orr.w	r0, r0, fp
 802923a:	fb12 f30c 	smulbb	r3, r2, ip
 802923e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029242:	10db      	asrs	r3, r3, #3
 8029244:	f1cc 0e10 	rsb	lr, ip, #16
 8029248:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802924c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029250:	ebae 0e02 	sub.w	lr, lr, r2
 8029254:	ea4b 0101 	orr.w	r1, fp, r1
 8029258:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802925c:	4351      	muls	r1, r2
 802925e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029260:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029264:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029268:	0410      	lsls	r0, r2, #16
 802926a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802926e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029272:	4310      	orrs	r0, r2
 8029274:	9a08      	ldr	r2, [sp, #32]
 8029276:	9908      	ldr	r1, [sp, #32]
 8029278:	0412      	lsls	r2, r2, #16
 802927a:	fb03 e000 	mla	r0, r3, r0, lr
 802927e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029282:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029286:	ea42 020e 	orr.w	r2, r2, lr
 802928a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802928e:	fb03 0302 	mla	r3, r3, r2, r0
 8029292:	0d5a      	lsrs	r2, r3, #21
 8029294:	095b      	lsrs	r3, r3, #5
 8029296:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802929a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802929e:	4313      	orrs	r3, r2
 80292a0:	f8a9 3000 	strh.w	r3, [r9]
 80292a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80292a6:	441c      	add	r4, r3
 80292a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80292aa:	f109 0902 	add.w	r9, r9, #2
 80292ae:	441e      	add	r6, r3
 80292b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80292b4:	e784      	b.n	80291c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80292b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80292b8:	441c      	add	r4, r3
 80292ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80292bc:	3d01      	subs	r5, #1
 80292be:	441e      	add	r6, r3
 80292c0:	3702      	adds	r7, #2
 80292c2:	e761      	b.n	8029188 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80292c4:	d01d      	beq.n	8029302 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80292c6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80292c8:	1e6b      	subs	r3, r5, #1
 80292ca:	fb00 4003 	mla	r0, r0, r3, r4
 80292ce:	1400      	asrs	r0, r0, #16
 80292d0:	f53f af74 	bmi.w	80291bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80292d4:	3901      	subs	r1, #1
 80292d6:	4288      	cmp	r0, r1
 80292d8:	f6bf af70 	bge.w	80291bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80292dc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80292de:	fb01 6303 	mla	r3, r1, r3, r6
 80292e2:	141b      	asrs	r3, r3, #16
 80292e4:	f53f af6a 	bmi.w	80291bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80292e8:	3a01      	subs	r2, #1
 80292ea:	4293      	cmp	r3, r2
 80292ec:	f6bf af66 	bge.w	80291bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80292f0:	46a9      	mov	r9, r5
 80292f2:	46ba      	mov	sl, r7
 80292f4:	f1b9 0f00 	cmp.w	r9, #0
 80292f8:	dc5a      	bgt.n	80293b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80292fa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80292fe:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8029302:	9b07      	ldr	r3, [sp, #28]
 8029304:	2b00      	cmp	r3, #0
 8029306:	f340 80b8 	ble.w	802947a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802930a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802930e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029312:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029316:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029318:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802931c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029320:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029324:	eef0 6a48 	vmov.f32	s13, s16
 8029328:	ee69 7a27 	vmul.f32	s15, s18, s15
 802932c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029330:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029334:	ee16 4a90 	vmov	r4, s13
 8029338:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802933c:	eef0 6a68 	vmov.f32	s13, s17
 8029340:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029344:	ee18 2a10 	vmov	r2, s16
 8029348:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802934c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029350:	ee18 2a90 	vmov	r2, s17
 8029354:	9323      	str	r3, [sp, #140]	; 0x8c
 8029356:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029358:	fb92 f3f3 	sdiv	r3, r2, r3
 802935c:	9324      	str	r3, [sp, #144]	; 0x90
 802935e:	9b07      	ldr	r3, [sp, #28]
 8029360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029362:	3b01      	subs	r3, #1
 8029364:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029368:	9307      	str	r3, [sp, #28]
 802936a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802936c:	ee16 6a90 	vmov	r6, s13
 8029370:	bf14      	ite	ne
 8029372:	461d      	movne	r5, r3
 8029374:	4615      	moveq	r5, r2
 8029376:	eef0 8a67 	vmov.f32	s17, s15
 802937a:	eeb0 8a47 	vmov.f32	s16, s14
 802937e:	e6f4      	b.n	802916a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8029380:	f111 0b01 	adds.w	fp, r1, #1
 8029384:	d48e      	bmi.n	80292a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029386:	45de      	cmp	lr, fp
 8029388:	db8c      	blt.n	80292a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802938a:	f110 0b01 	adds.w	fp, r0, #1
 802938e:	d489      	bmi.n	80292a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029390:	455b      	cmp	r3, fp
 8029392:	db87      	blt.n	80292a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029394:	b21b      	sxth	r3, r3
 8029396:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802939a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802939e:	9300      	str	r3, [sp, #0]
 80293a0:	4642      	mov	r2, r8
 80293a2:	fa0f f38e 	sxth.w	r3, lr
 80293a6:	4649      	mov	r1, r9
 80293a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80293aa:	f7ff fe2b 	bl	8029004 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80293ae:	e779      	b.n	80292a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80293b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80293b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80293b6:	1420      	asrs	r0, r4, #16
 80293b8:	1431      	asrs	r1, r6, #16
 80293ba:	fb03 0101 	mla	r1, r3, r1, r0
 80293be:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80293c2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80293c6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80293ca:	8841      	ldrh	r1, [r0, #2]
 80293cc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80293d0:	f1be 0f00 	cmp.w	lr, #0
 80293d4:	d00b      	beq.n	80293ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 80293d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80293da:	3b01      	subs	r3, #1
 80293dc:	005b      	lsls	r3, r3, #1
 80293de:	3302      	adds	r3, #2
 80293e0:	eb00 0b03 	add.w	fp, r0, r3
 80293e4:	5ac3      	ldrh	r3, [r0, r3]
 80293e6:	930a      	str	r3, [sp, #40]	; 0x28
 80293e8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80293ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80293ee:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80293f2:	fb12 f30e 	smulbb	r3, r2, lr
 80293f6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80293fa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80293fe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029402:	10db      	asrs	r3, r3, #3
 8029404:	ea40 000c 	orr.w	r0, r0, ip
 8029408:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802940c:	f1ce 0c10 	rsb	ip, lr, #16
 8029410:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029414:	ebac 0c02 	sub.w	ip, ip, r2
 8029418:	ea4b 0101 	orr.w	r1, fp, r1
 802941c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029420:	4351      	muls	r1, r2
 8029422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029424:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029428:	fb0c 1c00 	mla	ip, ip, r0, r1
 802942c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029430:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8029434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029438:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802943c:	0412      	lsls	r2, r2, #16
 802943e:	ea4b 0000 	orr.w	r0, fp, r0
 8029442:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029446:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802944a:	fb03 c000 	mla	r0, r3, r0, ip
 802944e:	ea42 0b0b 	orr.w	fp, r2, fp
 8029452:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029456:	fb03 000b 	mla	r0, r3, fp, r0
 802945a:	0d43      	lsrs	r3, r0, #21
 802945c:	0940      	lsrs	r0, r0, #5
 802945e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029462:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029466:	4318      	orrs	r0, r3
 8029468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802946a:	f82a 0b02 	strh.w	r0, [sl], #2
 802946e:	441c      	add	r4, r3
 8029470:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029472:	f109 39ff 	add.w	r9, r9, #4294967295
 8029476:	441e      	add	r6, r3
 8029478:	e73c      	b.n	80292f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802947a:	b00f      	add	sp, #60	; 0x3c
 802947c:	ecbd 8b08 	vpop	{d8-d11}
 8029480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029484 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8029484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029488:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802948c:	fb04 5603 	mla	r6, r4, r3, r5
 8029490:	2c00      	cmp	r4, #0
 8029492:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8029496:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802949a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802949e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80294a2:	db36      	blt.n	8029512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80294a4:	45a6      	cmp	lr, r4
 80294a6:	dd34      	ble.n	8029512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80294a8:	2d00      	cmp	r5, #0
 80294aa:	db30      	blt.n	802950e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80294ac:	42ab      	cmp	r3, r5
 80294ae:	dd2e      	ble.n	802950e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80294b0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80294b4:	1c6e      	adds	r6, r5, #1
 80294b6:	d42f      	bmi.n	8029518 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80294b8:	42b3      	cmp	r3, r6
 80294ba:	dd2d      	ble.n	8029518 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80294bc:	b370      	cbz	r0, 802951c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80294be:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80294c2:	3401      	adds	r4, #1
 80294c4:	d42e      	bmi.n	8029524 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80294c6:	45a6      	cmp	lr, r4
 80294c8:	dd2c      	ble.n	8029524 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80294ca:	b377      	cbz	r7, 802952a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 80294cc:	2d00      	cmp	r5, #0
 80294ce:	db27      	blt.n	8029520 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80294d0:	42ab      	cmp	r3, r5
 80294d2:	dd25      	ble.n	8029520 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80294d4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80294d8:	3501      	adds	r5, #1
 80294da:	d429      	bmi.n	8029530 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80294dc:	42ab      	cmp	r3, r5
 80294de:	dd27      	ble.n	8029530 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80294e0:	b340      	cbz	r0, 8029534 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 80294e2:	3301      	adds	r3, #1
 80294e4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80294e8:	280f      	cmp	r0, #15
 80294ea:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80294ee:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80294f2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80294f6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80294fa:	d801      	bhi.n	8029500 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 80294fc:	2f0f      	cmp	r7, #15
 80294fe:	d91b      	bls.n	8029538 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8029500:	4b8d      	ldr	r3, [pc, #564]	; (8029738 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8029502:	4a8e      	ldr	r2, [pc, #568]	; (802973c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8029504:	488e      	ldr	r0, [pc, #568]	; (8029740 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8029506:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802950a:	f004 fd09 	bl	802df20 <__assert_func>
 802950e:	2200      	movs	r2, #0
 8029510:	e7d0      	b.n	80294b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8029512:	2600      	movs	r6, #0
 8029514:	4632      	mov	r2, r6
 8029516:	e7d4      	b.n	80294c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029518:	2600      	movs	r6, #0
 802951a:	e7d2      	b.n	80294c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 802951c:	4606      	mov	r6, r0
 802951e:	e7d0      	b.n	80294c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029520:	2400      	movs	r4, #0
 8029522:	e7d9      	b.n	80294d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8029524:	2300      	movs	r3, #0
 8029526:	461c      	mov	r4, r3
 8029528:	e7de      	b.n	80294e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802952a:	463b      	mov	r3, r7
 802952c:	463c      	mov	r4, r7
 802952e:	e7db      	b.n	80294e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029530:	2300      	movs	r3, #0
 8029532:	e7d9      	b.n	80294e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029534:	4603      	mov	r3, r0
 8029536:	e7d7      	b.n	80294e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029538:	b280      	uxth	r0, r0
 802953a:	b2bf      	uxth	r7, r7
 802953c:	fb07 fe00 	mul.w	lr, r7, r0
 8029540:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029544:	0100      	lsls	r0, r0, #4
 8029546:	eba0 0c0e 	sub.w	ip, r0, lr
 802954a:	b2bf      	uxth	r7, r7
 802954c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029550:	fa1f fc8c 	uxth.w	ip, ip
 8029554:	1bed      	subs	r5, r5, r7
 8029556:	b2ad      	uxth	r5, r5
 8029558:	fb0a f00c 	mul.w	r0, sl, ip
 802955c:	fb0b 0005 	mla	r0, fp, r5, r0
 8029560:	fb07 0009 	mla	r0, r7, r9, r0
 8029564:	fb0e 0008 	mla	r0, lr, r8, r0
 8029568:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802956c:	9001      	str	r0, [sp, #4]
 802956e:	2800      	cmp	r0, #0
 8029570:	f000 80de 	beq.w	8029730 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8029574:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8029578:	d018      	beq.n	80295ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802957a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802957e:	fb0b f000 	mul.w	r0, fp, r0
 8029582:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029586:	fb0b fb02 	mul.w	fp, fp, r2
 802958a:	0a02      	lsrs	r2, r0, #8
 802958c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029590:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029594:	4402      	add	r2, r0
 8029596:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802959a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802959e:	0a12      	lsrs	r2, r2, #8
 80295a0:	0a00      	lsrs	r0, r0, #8
 80295a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80295a6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80295aa:	4302      	orrs	r2, r0
 80295ac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80295b0:	d01a      	beq.n	80295e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 80295b2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80295b6:	fb0a f000 	mul.w	r0, sl, r0
 80295ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80295be:	fb0a fa06 	mul.w	sl, sl, r6
 80295c2:	0a06      	lsrs	r6, r0, #8
 80295c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80295c8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80295cc:	4406      	add	r6, r0
 80295ce:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80295d2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80295d6:	0a36      	lsrs	r6, r6, #8
 80295d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80295dc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80295e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80295e4:	ea46 060a 	orr.w	r6, r6, sl
 80295e8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80295ec:	d01b      	beq.n	8029626 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 80295ee:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80295f2:	fb09 fa0a 	mul.w	sl, r9, sl
 80295f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80295fa:	fb09 f004 	mul.w	r0, r9, r4
 80295fe:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8029602:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029606:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802960a:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802960e:	4454      	add	r4, sl
 8029610:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029614:	0a24      	lsrs	r4, r4, #8
 8029616:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802961a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802961e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029622:	ea44 0409 	orr.w	r4, r4, r9
 8029626:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802962a:	d01b      	beq.n	8029664 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 802962c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8029630:	fb08 f909 	mul.w	r9, r8, r9
 8029634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029638:	fb08 f003 	mul.w	r0, r8, r3
 802963c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8029640:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029644:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8029648:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802964c:	444b      	add	r3, r9
 802964e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8029652:	0a1b      	lsrs	r3, r3, #8
 8029654:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029658:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802965c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029660:	ea43 0308 	orr.w	r3, r3, r8
 8029664:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8029668:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802966c:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8029670:	fb0c f808 	mul.w	r8, ip, r8
 8029674:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029678:	fb0c f606 	mul.w	r6, ip, r6
 802967c:	fb05 8909 	mla	r9, r5, r9, r8
 8029680:	fb05 6502 	mla	r5, r5, r2, r6
 8029684:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8029688:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802968c:	9a01      	ldr	r2, [sp, #4]
 802968e:	8808      	ldrh	r0, [r1, #0]
 8029690:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029694:	fb07 9908 	mla	r9, r7, r8, r9
 8029698:	fb07 5704 	mla	r7, r7, r4, r5
 802969c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80296a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80296a4:	b2b6      	uxth	r6, r6
 80296a6:	fb0e 9808 	mla	r8, lr, r8, r9
 80296aa:	fb0e 7e03 	mla	lr, lr, r3, r7
 80296ae:	4372      	muls	r2, r6
 80296b0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80296b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80296b8:	1c53      	adds	r3, r2, #1
 80296ba:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80296be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80296c2:	ea48 0e0e 	orr.w	lr, r8, lr
 80296c6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80296ca:	1205      	asrs	r5, r0, #8
 80296cc:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80296d0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80296d4:	b2db      	uxtb	r3, r3
 80296d6:	fb12 f206 	smulbb	r2, r2, r6
 80296da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80296de:	fb05 2503 	mla	r5, r5, r3, r2
 80296e2:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80296e6:	10c2      	asrs	r2, r0, #3
 80296e8:	fa5f fe8e 	uxtb.w	lr, lr
 80296ec:	00c0      	lsls	r0, r0, #3
 80296ee:	fb14 f406 	smulbb	r4, r4, r6
 80296f2:	b2c0      	uxtb	r0, r0
 80296f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80296f8:	fb1e fe06 	smulbb	lr, lr, r6
 80296fc:	fb02 4203 	mla	r2, r2, r3, r4
 8029700:	b2ad      	uxth	r5, r5
 8029702:	fb00 e303 	mla	r3, r0, r3, lr
 8029706:	b298      	uxth	r0, r3
 8029708:	b294      	uxth	r4, r2
 802970a:	1c6b      	adds	r3, r5, #1
 802970c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029710:	1c62      	adds	r2, r4, #1
 8029712:	1c43      	adds	r3, r0, #1
 8029714:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029718:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802971c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029720:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029724:	0952      	lsrs	r2, r2, #5
 8029726:	432b      	orrs	r3, r5
 8029728:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802972c:	4313      	orrs	r3, r2
 802972e:	800b      	strh	r3, [r1, #0]
 8029730:	b003      	add	sp, #12
 8029732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029736:	bf00      	nop
 8029738:	08032c55 	.word	0x08032c55
 802973c:	08033222 	.word	0x08033222
 8029740:	08032cd9 	.word	0x08032cd9

08029744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029748:	ed2d 8b08 	vpush	{d8-d11}
 802974c:	b09d      	sub	sp, #116	; 0x74
 802974e:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8029752:	9219      	str	r2, [sp, #100]	; 0x64
 8029754:	9307      	str	r3, [sp, #28]
 8029756:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8029758:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 802975c:	931a      	str	r3, [sp, #104]	; 0x68
 802975e:	9117      	str	r1, [sp, #92]	; 0x5c
 8029760:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8029764:	901b      	str	r0, [sp, #108]	; 0x6c
 8029766:	6850      	ldr	r0, [r2, #4]
 8029768:	6812      	ldr	r2, [r2, #0]
 802976a:	fb00 1303 	mla	r3, r0, r3, r1
 802976e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029772:	930a      	str	r3, [sp, #40]	; 0x28
 8029774:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029776:	681b      	ldr	r3, [r3, #0]
 8029778:	9310      	str	r3, [sp, #64]	; 0x40
 802977a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802977e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029780:	eeb0 aa40 	vmov.f32	s20, s0
 8029784:	eef0 9a60 	vmov.f32	s19, s1
 8029788:	eeb0 9a41 	vmov.f32	s18, s2
 802978c:	eeb0 8a62 	vmov.f32	s16, s5
 8029790:	eef0 8a43 	vmov.f32	s17, s6
 8029794:	eef0 ba44 	vmov.f32	s23, s8
 8029798:	eeb0 ba64 	vmov.f32	s22, s9
 802979c:	eef0 aa45 	vmov.f32	s21, s10
 80297a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80297a2:	2b00      	cmp	r3, #0
 80297a4:	dc03      	bgt.n	80297ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80297a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80297a8:	2b00      	cmp	r3, #0
 80297aa:	f340 8375 	ble.w	8029e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80297ae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80297b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80297b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80297b8:	1e48      	subs	r0, r1, #1
 80297ba:	1e57      	subs	r7, r2, #1
 80297bc:	9b07      	ldr	r3, [sp, #28]
 80297be:	2b00      	cmp	r3, #0
 80297c0:	f340 818e 	ble.w	8029ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80297c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80297c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80297cc:	d406      	bmi.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80297ce:	4584      	cmp	ip, r0
 80297d0:	da04      	bge.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80297d2:	2b00      	cmp	r3, #0
 80297d4:	db02      	blt.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80297d6:	42bb      	cmp	r3, r7
 80297d8:	f2c0 8183 	blt.w	8029ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80297dc:	f11c 0c01 	adds.w	ip, ip, #1
 80297e0:	f100 8173 	bmi.w	8029aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80297e4:	4561      	cmp	r1, ip
 80297e6:	f2c0 8170 	blt.w	8029aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80297ea:	3301      	adds	r3, #1
 80297ec:	f100 816d 	bmi.w	8029aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80297f0:	429a      	cmp	r2, r3
 80297f2:	f2c0 816a 	blt.w	8029aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80297f6:	9b07      	ldr	r3, [sp, #28]
 80297f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80297fa:	9318      	str	r3, [sp, #96]	; 0x60
 80297fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80297fe:	2b00      	cmp	r3, #0
 8029800:	f340 818c 	ble.w	8029b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8029804:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8029806:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029808:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802980c:	689b      	ldr	r3, [r3, #8]
 802980e:	1422      	asrs	r2, r4, #16
 8029810:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029814:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029818:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802981c:	f100 81cd 	bmi.w	8029bba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029820:	f103 38ff 	add.w	r8, r3, #4294967295
 8029824:	4542      	cmp	r2, r8
 8029826:	f280 81c8 	bge.w	8029bba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802982a:	f1bc 0f00 	cmp.w	ip, #0
 802982e:	f2c0 81c4 	blt.w	8029bba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029832:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029836:	45c4      	cmp	ip, r8
 8029838:	f280 81bf 	bge.w	8029bba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802983c:	b21b      	sxth	r3, r3
 802983e:	fb0c 2203 	mla	r2, ip, r3, r2
 8029842:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029844:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029848:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802984c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029850:	2800      	cmp	r0, #0
 8029852:	f000 81a9 	beq.w	8029ba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8029856:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802985a:	950c      	str	r5, [sp, #48]	; 0x30
 802985c:	0e2d      	lsrs	r5, r5, #24
 802985e:	9513      	str	r5, [sp, #76]	; 0x4c
 8029860:	b181      	cbz	r1, 8029884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029866:	3b01      	subs	r3, #1
 8029868:	009b      	lsls	r3, r3, #2
 802986a:	3304      	adds	r3, #4
 802986c:	eb08 0c03 	add.w	ip, r8, r3
 8029870:	f858 3003 	ldr.w	r3, [r8, r3]
 8029874:	9308      	str	r3, [sp, #32]
 8029876:	0e1b      	lsrs	r3, r3, #24
 8029878:	9311      	str	r3, [sp, #68]	; 0x44
 802987a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802987e:	930d      	str	r3, [sp, #52]	; 0x34
 8029880:	0e1b      	lsrs	r3, r3, #24
 8029882:	9314      	str	r3, [sp, #80]	; 0x50
 8029884:	b280      	uxth	r0, r0
 8029886:	b289      	uxth	r1, r1
 8029888:	fb00 f901 	mul.w	r9, r0, r1
 802988c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029890:	0100      	lsls	r0, r0, #4
 8029892:	eba0 0809 	sub.w	r8, r0, r9
 8029896:	b289      	uxth	r1, r1
 8029898:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802989c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802989e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80298a0:	fa1f f888 	uxth.w	r8, r8
 80298a4:	1a5b      	subs	r3, r3, r1
 80298a6:	b29b      	uxth	r3, r3
 80298a8:	fb08 f000 	mul.w	r0, r8, r0
 80298ac:	fb03 000e 	mla	r0, r3, lr, r0
 80298b0:	fb01 0005 	mla	r0, r1, r5, r0
 80298b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80298b6:	fb09 0005 	mla	r0, r9, r5, r0
 80298ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80298be:	2800      	cmp	r0, #0
 80298c0:	f000 80fa 	beq.w	8029ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80298c4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80298c8:	d01b      	beq.n	8029902 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80298ca:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80298ce:	fb0e fa0a 	mul.w	sl, lr, sl
 80298d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80298d6:	fb0e fe02 	mul.w	lr, lr, r2
 80298da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80298de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80298e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80298e6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80298ea:	4452      	add	r2, sl
 80298ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80298f0:	0a12      	lsrs	r2, r2, #8
 80298f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80298f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80298fa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80298fe:	ea42 020c 	orr.w	r2, r2, ip
 8029902:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029904:	2dff      	cmp	r5, #255	; 0xff
 8029906:	d021      	beq.n	802994c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8029908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802990a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802990e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029910:	fb05 fb0b 	mul.w	fp, r5, fp
 8029914:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029916:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802991a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802991c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029920:	fb05 fa0a 	mul.w	sl, r5, sl
 8029924:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029928:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802992c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029930:	44de      	add	lr, fp
 8029932:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029936:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802993a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802993e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029942:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029946:	ea4e 050a 	orr.w	r5, lr, sl
 802994a:	950c      	str	r5, [sp, #48]	; 0x30
 802994c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802994e:	2dff      	cmp	r5, #255	; 0xff
 8029950:	d021      	beq.n	8029996 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8029952:	9d08      	ldr	r5, [sp, #32]
 8029954:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029958:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802995a:	fb05 fb0b 	mul.w	fp, r5, fp
 802995e:	9d08      	ldr	r5, [sp, #32]
 8029960:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029964:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029966:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802996a:	fb05 fa0a 	mul.w	sl, r5, sl
 802996e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029972:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029976:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802997a:	44de      	add	lr, fp
 802997c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029980:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029984:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029988:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802998c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029990:	ea4e 050a 	orr.w	r5, lr, sl
 8029994:	9508      	str	r5, [sp, #32]
 8029996:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029998:	2dff      	cmp	r5, #255	; 0xff
 802999a:	d021      	beq.n	80299e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802999c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802999e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80299a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80299a4:	fb05 fb0b 	mul.w	fp, r5, fp
 80299a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80299aa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80299ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80299b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80299b4:	fb05 fa0a 	mul.w	sl, r5, sl
 80299b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80299bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80299c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80299c4:	44de      	add	lr, fp
 80299c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80299ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80299ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80299d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80299d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80299da:	ea4e 050a 	orr.w	r5, lr, sl
 80299de:	950d      	str	r5, [sp, #52]	; 0x34
 80299e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80299e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80299e6:	9d08      	ldr	r5, [sp, #32]
 80299e8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80299ec:	fb08 fc0c 	mul.w	ip, r8, ip
 80299f0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80299f4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80299f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80299fa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80299fe:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029a04:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029a08:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029a0c:	fb08 f80e 	mul.w	r8, r8, lr
 8029a10:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029a14:	fb03 8202 	mla	r2, r3, r2, r8
 8029a18:	9b08      	ldr	r3, [sp, #32]
 8029a1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029a1c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8029a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029a22:	fb01 220a 	mla	r2, r1, sl, r2
 8029a26:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8029a2a:	fb09 2901 	mla	r9, r9, r1, r2
 8029a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029a30:	883b      	ldrh	r3, [r7, #0]
 8029a32:	4342      	muls	r2, r0
 8029a34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029a38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029a3c:	1c50      	adds	r0, r2, #1
 8029a3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029a42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029a46:	ea4c 0c09 	orr.w	ip, ip, r9
 8029a4a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029a4e:	1219      	asrs	r1, r3, #8
 8029a50:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029a54:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029a58:	b2c0      	uxtb	r0, r0
 8029a5a:	fb12 f205 	smulbb	r2, r2, r5
 8029a5e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029a62:	fb01 2100 	mla	r1, r1, r0, r2
 8029a66:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029a6a:	10da      	asrs	r2, r3, #3
 8029a6c:	fa5f fc8c 	uxtb.w	ip, ip
 8029a70:	00db      	lsls	r3, r3, #3
 8029a72:	fb1c fc05 	smulbb	ip, ip, r5
 8029a76:	b2db      	uxtb	r3, r3
 8029a78:	b289      	uxth	r1, r1
 8029a7a:	fb03 c300 	mla	r3, r3, r0, ip
 8029a7e:	fa1f fc83 	uxth.w	ip, r3
 8029a82:	1c4b      	adds	r3, r1, #1
 8029a84:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029a88:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029a8c:	fb1e fe05 	smulbb	lr, lr, r5
 8029a90:	f10c 0301 	add.w	r3, ip, #1
 8029a94:	fb02 e200 	mla	r2, r2, r0, lr
 8029a98:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029a9c:	b292      	uxth	r2, r2
 8029a9e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029aa2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029aa6:	430b      	orrs	r3, r1
 8029aa8:	1c51      	adds	r1, r2, #1
 8029aaa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029aae:	0952      	lsrs	r2, r2, #5
 8029ab0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029ab4:	4313      	orrs	r3, r2
 8029ab6:	803b      	strh	r3, [r7, #0]
 8029ab8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029aba:	441c      	add	r4, r3
 8029abc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029abe:	441e      	add	r6, r3
 8029ac0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029ac2:	3b01      	subs	r3, #1
 8029ac4:	3702      	adds	r7, #2
 8029ac6:	9318      	str	r3, [sp, #96]	; 0x60
 8029ac8:	e698      	b.n	80297fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029aca:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029acc:	441c      	add	r4, r3
 8029ace:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029ad0:	441e      	add	r6, r3
 8029ad2:	9b07      	ldr	r3, [sp, #28]
 8029ad4:	3b01      	subs	r3, #1
 8029ad6:	9307      	str	r3, [sp, #28]
 8029ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029ada:	3302      	adds	r3, #2
 8029adc:	930a      	str	r3, [sp, #40]	; 0x28
 8029ade:	e66d      	b.n	80297bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029ae0:	d023      	beq.n	8029b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029ae2:	9b07      	ldr	r3, [sp, #28]
 8029ae4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8029ae6:	3b01      	subs	r3, #1
 8029ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8029aec:	1400      	asrs	r0, r0, #16
 8029aee:	f53f ae82 	bmi.w	80297f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029af2:	3901      	subs	r1, #1
 8029af4:	4288      	cmp	r0, r1
 8029af6:	f6bf ae7e 	bge.w	80297f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029afa:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8029afc:	fb01 6303 	mla	r3, r1, r3, r6
 8029b00:	141b      	asrs	r3, r3, #16
 8029b02:	f53f ae78 	bmi.w	80297f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029b06:	3a01      	subs	r2, #1
 8029b08:	4293      	cmp	r3, r2
 8029b0a:	f6bf ae74 	bge.w	80297f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029b0e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029b12:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029b16:	f1bb 0f00 	cmp.w	fp, #0
 8029b1a:	dc6c      	bgt.n	8029bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029b1c:	9b07      	ldr	r3, [sp, #28]
 8029b1e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029b24:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029b28:	930a      	str	r3, [sp, #40]	; 0x28
 8029b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029b2c:	2b00      	cmp	r3, #0
 8029b2e:	f340 81b3 	ble.w	8029e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029b32:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029b3a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029b3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029b40:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029b44:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029b48:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029b4c:	eef0 6a48 	vmov.f32	s13, s16
 8029b50:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029b54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b58:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029b5c:	ee16 4a90 	vmov	r4, s13
 8029b60:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029b64:	eef0 6a68 	vmov.f32	s13, s17
 8029b68:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029b6c:	ee18 2a10 	vmov	r2, s16
 8029b70:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029b74:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b78:	ee18 2a90 	vmov	r2, s17
 8029b7c:	9331      	str	r3, [sp, #196]	; 0xc4
 8029b7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b84:	9332      	str	r3, [sp, #200]	; 0xc8
 8029b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029b8a:	3b01      	subs	r3, #1
 8029b8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b90:	9317      	str	r3, [sp, #92]	; 0x5c
 8029b92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029b94:	bf08      	it	eq
 8029b96:	4613      	moveq	r3, r2
 8029b98:	ee16 6a90 	vmov	r6, s13
 8029b9c:	9307      	str	r3, [sp, #28]
 8029b9e:	eef0 8a67 	vmov.f32	s17, s15
 8029ba2:	eeb0 8a47 	vmov.f32	s16, s14
 8029ba6:	e5fb      	b.n	80297a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029ba8:	2900      	cmp	r1, #0
 8029baa:	f43f ae6b 	beq.w	8029884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029bae:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029bb2:	9308      	str	r3, [sp, #32]
 8029bb4:	0e1b      	lsrs	r3, r3, #24
 8029bb6:	9311      	str	r3, [sp, #68]	; 0x44
 8029bb8:	e664      	b.n	8029884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029bba:	f112 0801 	adds.w	r8, r2, #1
 8029bbe:	f53f af7b 	bmi.w	8029ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029bc2:	4543      	cmp	r3, r8
 8029bc4:	f6ff af78 	blt.w	8029ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029bc8:	f11c 0801 	adds.w	r8, ip, #1
 8029bcc:	f53f af74 	bmi.w	8029ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029bd0:	45c6      	cmp	lr, r8
 8029bd2:	f6ff af71 	blt.w	8029ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029bd6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029bd8:	9201      	str	r2, [sp, #4]
 8029bda:	fa0f f28e 	sxth.w	r2, lr
 8029bde:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029be2:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029be6:	9200      	str	r2, [sp, #0]
 8029be8:	b21b      	sxth	r3, r3
 8029bea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029bec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029bee:	4639      	mov	r1, r7
 8029bf0:	f7ff fc48 	bl	8029484 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029bf4:	e760      	b.n	8029ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029bf6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029bf8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029bfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029bfe:	1427      	asrs	r7, r4, #16
 8029c00:	1433      	asrs	r3, r6, #16
 8029c02:	fb01 7303 	mla	r3, r1, r3, r7
 8029c06:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029c0a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029c0e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029c12:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029c16:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029c1a:	2a00      	cmp	r2, #0
 8029c1c:	f000 8133 	beq.w	8029e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8029c20:	687d      	ldr	r5, [r7, #4]
 8029c22:	950e      	str	r5, [sp, #56]	; 0x38
 8029c24:	0e2d      	lsrs	r5, r5, #24
 8029c26:	9515      	str	r5, [sp, #84]	; 0x54
 8029c28:	b178      	cbz	r0, 8029c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029c2a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8029c2e:	3901      	subs	r1, #1
 8029c30:	0089      	lsls	r1, r1, #2
 8029c32:	3104      	adds	r1, #4
 8029c34:	eb07 0e01 	add.w	lr, r7, r1
 8029c38:	5879      	ldr	r1, [r7, r1]
 8029c3a:	9109      	str	r1, [sp, #36]	; 0x24
 8029c3c:	0e09      	lsrs	r1, r1, #24
 8029c3e:	9112      	str	r1, [sp, #72]	; 0x48
 8029c40:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029c44:	910f      	str	r1, [sp, #60]	; 0x3c
 8029c46:	0e09      	lsrs	r1, r1, #24
 8029c48:	9116      	str	r1, [sp, #88]	; 0x58
 8029c4a:	b292      	uxth	r2, r2
 8029c4c:	b280      	uxth	r0, r0
 8029c4e:	fb02 f800 	mul.w	r8, r2, r0
 8029c52:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029c56:	0112      	lsls	r2, r2, #4
 8029c58:	eba2 0e08 	sub.w	lr, r2, r8
 8029c5c:	b280      	uxth	r0, r0
 8029c5e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8029c62:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029c64:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029c66:	fa1f fe8e 	uxth.w	lr, lr
 8029c6a:	1a12      	subs	r2, r2, r0
 8029c6c:	b292      	uxth	r2, r2
 8029c6e:	fb0e f101 	mul.w	r1, lr, r1
 8029c72:	fb02 110c 	mla	r1, r2, ip, r1
 8029c76:	fb00 1105 	mla	r1, r0, r5, r1
 8029c7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029c7c:	fb08 1105 	mla	r1, r8, r5, r1
 8029c80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029c84:	2900      	cmp	r1, #0
 8029c86:	f000 80f5 	beq.w	8029e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029c8a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029c8e:	d019      	beq.n	8029cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8029c90:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029c94:	fb0c fa0a 	mul.w	sl, ip, sl
 8029c98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029c9c:	fb0c fc03 	mul.w	ip, ip, r3
 8029ca0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029ca4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029ca8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029cac:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029cb0:	4453      	add	r3, sl
 8029cb2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029cb6:	0a1b      	lsrs	r3, r3, #8
 8029cb8:	0a3f      	lsrs	r7, r7, #8
 8029cba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029cbe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029cc2:	433b      	orrs	r3, r7
 8029cc4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029cc6:	2dff      	cmp	r5, #255	; 0xff
 8029cc8:	d020      	beq.n	8029d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8029cca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029ccc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029cd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029cd2:	436f      	muls	r7, r5
 8029cd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029cd6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029cda:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029cdc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029ce0:	fb05 fa0a 	mul.w	sl, r5, sl
 8029ce4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029ce8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029cec:	44bc      	add	ip, r7
 8029cee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029cf2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029cf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029cfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029cfe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d06:	ea4c 050a 	orr.w	r5, ip, sl
 8029d0a:	950e      	str	r5, [sp, #56]	; 0x38
 8029d0c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d0e:	2dff      	cmp	r5, #255	; 0xff
 8029d10:	d020      	beq.n	8029d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8029d12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029d14:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d18:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d1a:	436f      	muls	r7, r5
 8029d1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029d1e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d24:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d28:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d2c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029d30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d34:	44bc      	add	ip, r7
 8029d36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029d3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d4e:	ea4c 050a 	orr.w	r5, ip, sl
 8029d52:	9509      	str	r5, [sp, #36]	; 0x24
 8029d54:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d56:	2dff      	cmp	r5, #255	; 0xff
 8029d58:	d020      	beq.n	8029d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8029d5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029d5c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d60:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d62:	436f      	muls	r7, r5
 8029d64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029d66:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d6a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d70:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d74:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029d78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d7c:	44bc      	add	ip, r7
 8029d7e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029d82:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d96:	ea4c 050a 	orr.w	r5, ip, sl
 8029d9a:	950f      	str	r5, [sp, #60]	; 0x3c
 8029d9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d9e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029da2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029da4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029da8:	fb0e f707 	mul.w	r7, lr, r7
 8029dac:	fb02 770c 	mla	r7, r2, ip, r7
 8029db0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029db4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029db6:	fb00 770c 	mla	r7, r0, ip, r7
 8029dba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029dbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029dc0:	fb08 770c 	mla	r7, r8, ip, r7
 8029dc4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029dc8:	fb0e fe0c 	mul.w	lr, lr, ip
 8029dcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029dd0:	fb02 e303 	mla	r3, r2, r3, lr
 8029dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029dd6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029dd8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8029ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029dde:	fb00 330a 	mla	r3, r0, sl, r3
 8029de2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029de6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029dec:	f8b9 0000 	ldrh.w	r0, [r9]
 8029df0:	4359      	muls	r1, r3
 8029df2:	0a3f      	lsrs	r7, r7, #8
 8029df4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029df8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029dfc:	1c4b      	adds	r3, r1, #1
 8029dfe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029e02:	ea47 070c 	orr.w	r7, r7, ip
 8029e06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029e0a:	1202      	asrs	r2, r0, #8
 8029e0c:	0c3b      	lsrs	r3, r7, #16
 8029e0e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029e12:	b2c9      	uxtb	r1, r1
 8029e14:	fb13 f305 	smulbb	r3, r3, r5
 8029e18:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029e1c:	fb02 3201 	mla	r2, r2, r1, r3
 8029e20:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029e24:	10c3      	asrs	r3, r0, #3
 8029e26:	b2ff      	uxtb	r7, r7
 8029e28:	00c0      	lsls	r0, r0, #3
 8029e2a:	b2c0      	uxtb	r0, r0
 8029e2c:	fb17 f705 	smulbb	r7, r7, r5
 8029e30:	fb00 7001 	mla	r0, r0, r1, r7
 8029e34:	b292      	uxth	r2, r2
 8029e36:	fb1c fc05 	smulbb	ip, ip, r5
 8029e3a:	b280      	uxth	r0, r0
 8029e3c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029e40:	fb03 c301 	mla	r3, r3, r1, ip
 8029e44:	1c51      	adds	r1, r2, #1
 8029e46:	f100 0c01 	add.w	ip, r0, #1
 8029e4a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029e4e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029e52:	b29b      	uxth	r3, r3
 8029e54:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029e58:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8029e5c:	ea4c 0202 	orr.w	r2, ip, r2
 8029e60:	f103 0c01 	add.w	ip, r3, #1
 8029e64:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029e68:	095b      	lsrs	r3, r3, #5
 8029e6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029e6e:	431a      	orrs	r2, r3
 8029e70:	f8a9 2000 	strh.w	r2, [r9]
 8029e74:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029e76:	441c      	add	r4, r3
 8029e78:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029e7a:	f109 0902 	add.w	r9, r9, #2
 8029e7e:	441e      	add	r6, r3
 8029e80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029e84:	e647      	b.n	8029b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8029e86:	2800      	cmp	r0, #0
 8029e88:	f43f aedf 	beq.w	8029c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029e8c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029e90:	9109      	str	r1, [sp, #36]	; 0x24
 8029e92:	0e09      	lsrs	r1, r1, #24
 8029e94:	9112      	str	r1, [sp, #72]	; 0x48
 8029e96:	e6d8      	b.n	8029c4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029e98:	b01d      	add	sp, #116	; 0x74
 8029e9a:	ecbd 8b08 	vpop	{d8-d11}
 8029e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029ea4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ea8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8029eac:	fb04 5603 	mla	r6, r4, r3, r5
 8029eb0:	2c00      	cmp	r4, #0
 8029eb2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8029eb6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8029eba:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8029ebe:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8029ec2:	db37      	blt.n	8029f34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029ec4:	45a6      	cmp	lr, r4
 8029ec6:	dd35      	ble.n	8029f34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029ec8:	2d00      	cmp	r5, #0
 8029eca:	db31      	blt.n	8029f30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029ecc:	42ab      	cmp	r3, r5
 8029ece:	dd2f      	ble.n	8029f30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029ed0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8029ed4:	1c6e      	adds	r6, r5, #1
 8029ed6:	d430      	bmi.n	8029f3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029ed8:	42b3      	cmp	r3, r6
 8029eda:	dd2e      	ble.n	8029f3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029edc:	b378      	cbz	r0, 8029f3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8029ede:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8029ee2:	3401      	adds	r4, #1
 8029ee4:	d42f      	bmi.n	8029f46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029ee6:	45a6      	cmp	lr, r4
 8029ee8:	dd2d      	ble.n	8029f46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029eea:	b37f      	cbz	r7, 8029f4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8029eec:	2d00      	cmp	r5, #0
 8029eee:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8029ef2:	db26      	blt.n	8029f42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029ef4:	42ab      	cmp	r3, r5
 8029ef6:	dd24      	ble.n	8029f42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029ef8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029efc:	3501      	adds	r5, #1
 8029efe:	d428      	bmi.n	8029f52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029f00:	42ab      	cmp	r3, r5
 8029f02:	dd26      	ble.n	8029f52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029f04:	b338      	cbz	r0, 8029f56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8029f06:	f8de 3004 	ldr.w	r3, [lr, #4]
 8029f0a:	280f      	cmp	r0, #15
 8029f0c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8029f10:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029f14:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029f18:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8029f1c:	d801      	bhi.n	8029f22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8029f1e:	2f0f      	cmp	r7, #15
 8029f20:	d91b      	bls.n	8029f5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8029f22:	4b87      	ldr	r3, [pc, #540]	; (802a140 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8029f24:	4a87      	ldr	r2, [pc, #540]	; (802a144 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8029f26:	4888      	ldr	r0, [pc, #544]	; (802a148 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8029f28:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8029f2c:	f003 fff8 	bl	802df20 <__assert_func>
 8029f30:	2200      	movs	r2, #0
 8029f32:	e7cf      	b.n	8029ed4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8029f34:	2600      	movs	r6, #0
 8029f36:	4632      	mov	r2, r6
 8029f38:	e7d3      	b.n	8029ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029f3a:	2600      	movs	r6, #0
 8029f3c:	e7d1      	b.n	8029ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029f3e:	4606      	mov	r6, r0
 8029f40:	e7cf      	b.n	8029ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029f42:	2400      	movs	r4, #0
 8029f44:	e7da      	b.n	8029efc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8029f46:	2300      	movs	r3, #0
 8029f48:	461c      	mov	r4, r3
 8029f4a:	e7de      	b.n	8029f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029f4c:	463b      	mov	r3, r7
 8029f4e:	463c      	mov	r4, r7
 8029f50:	e7db      	b.n	8029f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029f52:	2300      	movs	r3, #0
 8029f54:	e7d9      	b.n	8029f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029f56:	4603      	mov	r3, r0
 8029f58:	e7d7      	b.n	8029f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029f5a:	b280      	uxth	r0, r0
 8029f5c:	b2bf      	uxth	r7, r7
 8029f5e:	fb07 fe00 	mul.w	lr, r7, r0
 8029f62:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029f66:	0100      	lsls	r0, r0, #4
 8029f68:	eba0 0c0e 	sub.w	ip, r0, lr
 8029f6c:	b2bf      	uxth	r7, r7
 8029f6e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029f72:	fa1f fc8c 	uxth.w	ip, ip
 8029f76:	1bed      	subs	r5, r5, r7
 8029f78:	b2ad      	uxth	r5, r5
 8029f7a:	fb0c f00a 	mul.w	r0, ip, sl
 8029f7e:	fb0b 0005 	mla	r0, fp, r5, r0
 8029f82:	fb07 0009 	mla	r0, r7, r9, r0
 8029f86:	fb0e 0008 	mla	r0, lr, r8, r0
 8029f8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029f8e:	9001      	str	r0, [sp, #4]
 8029f90:	2800      	cmp	r0, #0
 8029f92:	f000 80d1 	beq.w	802a138 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8029f96:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8029f9a:	d018      	beq.n	8029fce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8029f9c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8029fa0:	fb0b f000 	mul.w	r0, fp, r0
 8029fa4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029fa8:	fb0b fb02 	mul.w	fp, fp, r2
 8029fac:	0a02      	lsrs	r2, r0, #8
 8029fae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029fb2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029fb6:	4402      	add	r2, r0
 8029fb8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8029fbc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029fc0:	0a12      	lsrs	r2, r2, #8
 8029fc2:	0a00      	lsrs	r0, r0, #8
 8029fc4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029fc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029fcc:	4302      	orrs	r2, r0
 8029fce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8029fd2:	d01a      	beq.n	802a00a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8029fd4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8029fd8:	fb0a f000 	mul.w	r0, sl, r0
 8029fdc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029fe0:	fb0a fa06 	mul.w	sl, sl, r6
 8029fe4:	0a06      	lsrs	r6, r0, #8
 8029fe6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029fea:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029fee:	4406      	add	r6, r0
 8029ff0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029ff4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029ff8:	0a36      	lsrs	r6, r6, #8
 8029ffa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ffe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802a002:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a006:	ea46 060a 	orr.w	r6, r6, sl
 802a00a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802a00e:	d01b      	beq.n	802a048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 802a010:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802a014:	fb09 fa0a 	mul.w	sl, r9, sl
 802a018:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a01c:	fb09 f004 	mul.w	r0, r9, r4
 802a020:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802a024:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a028:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a02c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802a030:	4454      	add	r4, sl
 802a032:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802a036:	0a24      	lsrs	r4, r4, #8
 802a038:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a03c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a040:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a044:	ea44 0409 	orr.w	r4, r4, r9
 802a048:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802a04c:	d01b      	beq.n	802a086 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 802a04e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802a052:	fb08 f909 	mul.w	r9, r8, r9
 802a056:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a05a:	fb08 f003 	mul.w	r0, r8, r3
 802a05e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802a062:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a066:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802a06a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802a06e:	444b      	add	r3, r9
 802a070:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802a074:	0a1b      	lsrs	r3, r3, #8
 802a076:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a07a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a07e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a082:	ea43 0308 	orr.w	r3, r3, r8
 802a086:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802a08a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a08e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802a092:	fb0c f808 	mul.w	r8, ip, r8
 802a096:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a09a:	fb0c f606 	mul.w	r6, ip, r6
 802a09e:	fb05 8909 	mla	r9, r5, r9, r8
 802a0a2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802a0a6:	fb05 6502 	mla	r5, r5, r2, r6
 802a0aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a0ae:	fb07 9908 	mla	r9, r7, r8, r9
 802a0b2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802a0b6:	fb07 5704 	mla	r7, r7, r4, r5
 802a0ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a0be:	8808      	ldrh	r0, [r1, #0]
 802a0c0:	fb0e 9808 	mla	r8, lr, r8, r9
 802a0c4:	fb0e 7e03 	mla	lr, lr, r3, r7
 802a0c8:	9b01      	ldr	r3, [sp, #4]
 802a0ca:	43da      	mvns	r2, r3
 802a0cc:	1203      	asrs	r3, r0, #8
 802a0ce:	b2d2      	uxtb	r2, r2
 802a0d0:	10c4      	asrs	r4, r0, #3
 802a0d2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a0d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a0da:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a0de:	00c0      	lsls	r0, r0, #3
 802a0e0:	4353      	muls	r3, r2
 802a0e2:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802a0e6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802a0ea:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802a0ee:	b2c0      	uxtb	r0, r0
 802a0f0:	ea48 0e0e 	orr.w	lr, r8, lr
 802a0f4:	4354      	muls	r4, r2
 802a0f6:	4350      	muls	r0, r2
 802a0f8:	1c5a      	adds	r2, r3, #1
 802a0fa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a0fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802a102:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a106:	1c62      	adds	r2, r4, #1
 802a108:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a10c:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802a110:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802a114:	021b      	lsls	r3, r3, #8
 802a116:	00d2      	lsls	r2, r2, #3
 802a118:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a11c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a120:	4313      	orrs	r3, r2
 802a122:	1c42      	adds	r2, r0, #1
 802a124:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a128:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 802a12c:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802a130:	ea4e 0e03 	orr.w	lr, lr, r3
 802a134:	f8a1 e000 	strh.w	lr, [r1]
 802a138:	b003      	add	sp, #12
 802a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a13e:	bf00      	nop
 802a140:	08032c55 	.word	0x08032c55
 802a144:	08033222 	.word	0x08033222
 802a148:	08032cd9 	.word	0x08032cd9

0802a14c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a150:	ed2d 8b08 	vpush	{d8-d11}
 802a154:	b09b      	sub	sp, #108	; 0x6c
 802a156:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802a15a:	9218      	str	r2, [sp, #96]	; 0x60
 802a15c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802a15e:	9116      	str	r1, [sp, #88]	; 0x58
 802a160:	9307      	str	r3, [sp, #28]
 802a162:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802a166:	9019      	str	r0, [sp, #100]	; 0x64
 802a168:	6850      	ldr	r0, [r2, #4]
 802a16a:	6812      	ldr	r2, [r2, #0]
 802a16c:	fb00 1303 	mla	r3, r0, r3, r1
 802a170:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a174:	930a      	str	r3, [sp, #40]	; 0x28
 802a176:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a178:	681b      	ldr	r3, [r3, #0]
 802a17a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a17c:	eeb0 aa40 	vmov.f32	s20, s0
 802a180:	eef0 9a60 	vmov.f32	s19, s1
 802a184:	eeb0 9a41 	vmov.f32	s18, s2
 802a188:	eeb0 8a62 	vmov.f32	s16, s5
 802a18c:	eef0 8a43 	vmov.f32	s17, s6
 802a190:	eef0 ba44 	vmov.f32	s23, s8
 802a194:	eeb0 ba64 	vmov.f32	s22, s9
 802a198:	eef0 aa45 	vmov.f32	s21, s10
 802a19c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	dc03      	bgt.n	802a1aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a1a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a1a4:	2b00      	cmp	r3, #0
 802a1a6:	f340 8386 	ble.w	802a8b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a1aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a1ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a1b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a1b4:	1e48      	subs	r0, r1, #1
 802a1b6:	1e57      	subs	r7, r2, #1
 802a1b8:	9b07      	ldr	r3, [sp, #28]
 802a1ba:	2b00      	cmp	r3, #0
 802a1bc:	f340 8166 	ble.w	802a48c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802a1c0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a1c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a1c8:	d406      	bmi.n	802a1d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a1ca:	4584      	cmp	ip, r0
 802a1cc:	da04      	bge.n	802a1d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a1ce:	2b00      	cmp	r3, #0
 802a1d0:	db02      	blt.n	802a1d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a1d2:	42bb      	cmp	r3, r7
 802a1d4:	f2c0 815b 	blt.w	802a48e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a1d8:	f11c 0c01 	adds.w	ip, ip, #1
 802a1dc:	f100 814b 	bmi.w	802a476 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a1e0:	4561      	cmp	r1, ip
 802a1e2:	f2c0 8148 	blt.w	802a476 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a1e6:	3301      	adds	r3, #1
 802a1e8:	f100 8145 	bmi.w	802a476 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a1ec:	429a      	cmp	r2, r3
 802a1ee:	f2c0 8142 	blt.w	802a476 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a1f2:	9b07      	ldr	r3, [sp, #28]
 802a1f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a1f6:	9317      	str	r3, [sp, #92]	; 0x5c
 802a1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a1fa:	2b00      	cmp	r3, #0
 802a1fc:	f340 8165 	ble.w	802a4ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802a200:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802a202:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a204:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a208:	689b      	ldr	r3, [r3, #8]
 802a20a:	1422      	asrs	r2, r4, #16
 802a20c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a210:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a214:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a218:	f100 81d5 	bmi.w	802a5c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a21c:	f103 38ff 	add.w	r8, r3, #4294967295
 802a220:	4542      	cmp	r2, r8
 802a222:	f280 81d0 	bge.w	802a5c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a226:	f1bc 0f00 	cmp.w	ip, #0
 802a22a:	f2c0 81cc 	blt.w	802a5c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a22e:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a232:	45c4      	cmp	ip, r8
 802a234:	f280 81c7 	bge.w	802a5c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a238:	b21b      	sxth	r3, r3
 802a23a:	fb0c 2203 	mla	r2, ip, r3, r2
 802a23e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a240:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a244:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a248:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a24c:	2900      	cmp	r1, #0
 802a24e:	f000 8182 	beq.w	802a556 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802a252:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a256:	950b      	str	r5, [sp, #44]	; 0x2c
 802a258:	0e2d      	lsrs	r5, r5, #24
 802a25a:	9512      	str	r5, [sp, #72]	; 0x48
 802a25c:	b180      	cbz	r0, 802a280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a25e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a262:	3b01      	subs	r3, #1
 802a264:	009b      	lsls	r3, r3, #2
 802a266:	3304      	adds	r3, #4
 802a268:	eb08 0c03 	add.w	ip, r8, r3
 802a26c:	f858 3003 	ldr.w	r3, [r8, r3]
 802a270:	9308      	str	r3, [sp, #32]
 802a272:	0e1b      	lsrs	r3, r3, #24
 802a274:	9310      	str	r3, [sp, #64]	; 0x40
 802a276:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a27a:	930c      	str	r3, [sp, #48]	; 0x30
 802a27c:	0e1b      	lsrs	r3, r3, #24
 802a27e:	9313      	str	r3, [sp, #76]	; 0x4c
 802a280:	b289      	uxth	r1, r1
 802a282:	b280      	uxth	r0, r0
 802a284:	fb01 f900 	mul.w	r9, r1, r0
 802a288:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a28c:	0109      	lsls	r1, r1, #4
 802a28e:	eba1 0809 	sub.w	r8, r1, r9
 802a292:	b280      	uxth	r0, r0
 802a294:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a29a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a29c:	fa1f f888 	uxth.w	r8, r8
 802a2a0:	1a09      	subs	r1, r1, r0
 802a2a2:	b289      	uxth	r1, r1
 802a2a4:	fb08 f303 	mul.w	r3, r8, r3
 802a2a8:	fb01 330e 	mla	r3, r1, lr, r3
 802a2ac:	fb00 3305 	mla	r3, r0, r5, r3
 802a2b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a2b2:	fb09 3305 	mla	r3, r9, r5, r3
 802a2b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a2ba:	2b00      	cmp	r3, #0
 802a2bc:	f000 80d2 	beq.w	802a464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a2c0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a2c4:	d01b      	beq.n	802a2fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a2c6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a2ca:	fb0e fa0a 	mul.w	sl, lr, sl
 802a2ce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a2d2:	fb0e fe02 	mul.w	lr, lr, r2
 802a2d6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a2da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a2de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a2e2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a2e6:	4452      	add	r2, sl
 802a2e8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a2ec:	0a12      	lsrs	r2, r2, #8
 802a2ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a2f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a2f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a2fa:	ea42 020c 	orr.w	r2, r2, ip
 802a2fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a300:	2dff      	cmp	r5, #255	; 0xff
 802a302:	d021      	beq.n	802a348 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a304:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a306:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a30a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a30c:	fb05 fb0b 	mul.w	fp, r5, fp
 802a310:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a312:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a316:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a318:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a31c:	fb05 fa0a 	mul.w	sl, r5, sl
 802a320:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a324:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a328:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a32c:	44de      	add	lr, fp
 802a32e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a332:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a336:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a33a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a33e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a342:	ea4e 050a 	orr.w	r5, lr, sl
 802a346:	950b      	str	r5, [sp, #44]	; 0x2c
 802a348:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a34a:	2dff      	cmp	r5, #255	; 0xff
 802a34c:	d021      	beq.n	802a392 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802a34e:	9d08      	ldr	r5, [sp, #32]
 802a350:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a354:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a356:	fb05 fb0b 	mul.w	fp, r5, fp
 802a35a:	9d08      	ldr	r5, [sp, #32]
 802a35c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a360:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a362:	fb05 fa0e 	mul.w	sl, r5, lr
 802a366:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a36a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a36e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a372:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a376:	44de      	add	lr, fp
 802a378:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a37c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a380:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a384:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a388:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a38c:	ea4e 050a 	orr.w	r5, lr, sl
 802a390:	9508      	str	r5, [sp, #32]
 802a392:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a394:	2dff      	cmp	r5, #255	; 0xff
 802a396:	d021      	beq.n	802a3dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802a398:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a39a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a39e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a3a0:	fb05 fb0b 	mul.w	fp, r5, fp
 802a3a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a3a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a3aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a3ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a3b0:	fb05 fa0a 	mul.w	sl, r5, sl
 802a3b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a3b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a3bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a3c0:	44de      	add	lr, fp
 802a3c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a3c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a3ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a3ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a3d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a3d6:	ea4e 050a 	orr.w	r5, lr, sl
 802a3da:	950c      	str	r5, [sp, #48]	; 0x30
 802a3dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a3de:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a3e2:	9d08      	ldr	r5, [sp, #32]
 802a3e4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a3e8:	fb08 fc0c 	mul.w	ip, r8, ip
 802a3ec:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a3f0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a3f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a3f6:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a3fa:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a3fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a400:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a404:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a408:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a40c:	fb08 f80e 	mul.w	r8, r8, lr
 802a410:	fb01 8202 	mla	r2, r1, r2, r8
 802a414:	9908      	ldr	r1, [sp, #32]
 802a416:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a41a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a41c:	fb00 220a 	mla	r2, r0, sl, r2
 802a420:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a424:	fb09 2900 	mla	r9, r9, r0, r2
 802a428:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a42c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a434:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a438:	ea4c 0c09 	orr.w	ip, ip, r9
 802a43c:	2bff      	cmp	r3, #255	; 0xff
 802a43e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a442:	f040 8091 	bne.w	802a568 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a446:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a44a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a44e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a452:	f022 0207 	bic.w	r2, r2, #7
 802a456:	431a      	orrs	r2, r3
 802a458:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a45c:	ea4c 0c02 	orr.w	ip, ip, r2
 802a460:	f8a7 c000 	strh.w	ip, [r7]
 802a464:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a466:	441c      	add	r4, r3
 802a468:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a46a:	441e      	add	r6, r3
 802a46c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a46e:	3b01      	subs	r3, #1
 802a470:	3702      	adds	r7, #2
 802a472:	9317      	str	r3, [sp, #92]	; 0x5c
 802a474:	e6c0      	b.n	802a1f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802a476:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a478:	441c      	add	r4, r3
 802a47a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a47c:	441e      	add	r6, r3
 802a47e:	9b07      	ldr	r3, [sp, #28]
 802a480:	3b01      	subs	r3, #1
 802a482:	9307      	str	r3, [sp, #28]
 802a484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a486:	3302      	adds	r3, #2
 802a488:	930a      	str	r3, [sp, #40]	; 0x28
 802a48a:	e695      	b.n	802a1b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a48c:	d024      	beq.n	802a4d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802a48e:	9b07      	ldr	r3, [sp, #28]
 802a490:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802a492:	3b01      	subs	r3, #1
 802a494:	fb00 4003 	mla	r0, r0, r3, r4
 802a498:	1400      	asrs	r0, r0, #16
 802a49a:	f53f aeaa 	bmi.w	802a1f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a49e:	3901      	subs	r1, #1
 802a4a0:	4288      	cmp	r0, r1
 802a4a2:	f6bf aea6 	bge.w	802a1f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a4a6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802a4a8:	fb01 6303 	mla	r3, r1, r3, r6
 802a4ac:	141b      	asrs	r3, r3, #16
 802a4ae:	f53f aea0 	bmi.w	802a1f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a4b2:	3a01      	subs	r2, #1
 802a4b4:	4293      	cmp	r3, r2
 802a4b6:	f6bf ae9c 	bge.w	802a1f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a4ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a4be:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a4c2:	f1bb 0f00 	cmp.w	fp, #0
 802a4c6:	f300 809a 	bgt.w	802a5fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802a4ca:	9b07      	ldr	r3, [sp, #28]
 802a4cc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a4d2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a4d6:	930a      	str	r3, [sp, #40]	; 0x28
 802a4d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	f340 81eb 	ble.w	802a8b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a4e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a4e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a4ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a4ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a4f2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a4f6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a4fa:	eef0 6a48 	vmov.f32	s13, s16
 802a4fe:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a502:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a506:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a50a:	ee16 4a90 	vmov	r4, s13
 802a50e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a512:	eef0 6a68 	vmov.f32	s13, s17
 802a516:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a51a:	ee18 2a10 	vmov	r2, s16
 802a51e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a522:	fb92 f3f3 	sdiv	r3, r2, r3
 802a526:	ee18 2a90 	vmov	r2, s17
 802a52a:	932f      	str	r3, [sp, #188]	; 0xbc
 802a52c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a52e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a532:	9330      	str	r3, [sp, #192]	; 0xc0
 802a534:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a538:	3b01      	subs	r3, #1
 802a53a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a53e:	9316      	str	r3, [sp, #88]	; 0x58
 802a540:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a542:	bf08      	it	eq
 802a544:	4613      	moveq	r3, r2
 802a546:	ee16 6a90 	vmov	r6, s13
 802a54a:	9307      	str	r3, [sp, #28]
 802a54c:	eef0 8a67 	vmov.f32	s17, s15
 802a550:	eeb0 8a47 	vmov.f32	s16, s14
 802a554:	e622      	b.n	802a19c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802a556:	2800      	cmp	r0, #0
 802a558:	f43f ae92 	beq.w	802a280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a55c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a560:	9308      	str	r3, [sp, #32]
 802a562:	0e1b      	lsrs	r3, r3, #24
 802a564:	9310      	str	r3, [sp, #64]	; 0x40
 802a566:	e68b      	b.n	802a280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a568:	8839      	ldrh	r1, [r7, #0]
 802a56a:	4dd5      	ldr	r5, [pc, #852]	; (802a8c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a56c:	43db      	mvns	r3, r3
 802a56e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a572:	fa5f f883 	uxtb.w	r8, r3
 802a576:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802a57a:	fb0e fe08 	mul.w	lr, lr, r8
 802a57e:	10c8      	asrs	r0, r1, #3
 802a580:	00cb      	lsls	r3, r1, #3
 802a582:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a586:	f10e 0101 	add.w	r1, lr, #1
 802a58a:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a58e:	fb00 f008 	mul.w	r0, r0, r8
 802a592:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a596:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a59a:	f100 0e01 	add.w	lr, r0, #1
 802a59e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a5a2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a5a6:	b2db      	uxtb	r3, r3
 802a5a8:	b2c9      	uxtb	r1, r1
 802a5aa:	00d2      	lsls	r2, r2, #3
 802a5ac:	fb03 f308 	mul.w	r3, r3, r8
 802a5b0:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a5b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a5b8:	430a      	orrs	r2, r1
 802a5ba:	1c59      	adds	r1, r3, #1
 802a5bc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a5c0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a5c4:	e748      	b.n	802a458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802a5c6:	f112 0801 	adds.w	r8, r2, #1
 802a5ca:	f53f af4b 	bmi.w	802a464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a5ce:	4543      	cmp	r3, r8
 802a5d0:	f6ff af48 	blt.w	802a464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a5d4:	f11c 0801 	adds.w	r8, ip, #1
 802a5d8:	f53f af44 	bmi.w	802a464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a5dc:	45c6      	cmp	lr, r8
 802a5de:	f6ff af41 	blt.w	802a464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a5e2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a5e6:	fa0f f28e 	sxth.w	r2, lr
 802a5ea:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a5ee:	9200      	str	r2, [sp, #0]
 802a5f0:	b21b      	sxth	r3, r3
 802a5f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a5f4:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a5f6:	4639      	mov	r1, r7
 802a5f8:	f7ff fc54 	bl	8029ea4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a5fc:	e732      	b.n	802a464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a5fe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a600:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a602:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a606:	1421      	asrs	r1, r4, #16
 802a608:	1433      	asrs	r3, r6, #16
 802a60a:	fb07 1303 	mla	r3, r7, r3, r1
 802a60e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a610:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a614:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a618:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a61c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a620:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a624:	2a00      	cmp	r2, #0
 802a626:	f000 8107 	beq.w	802a838 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ec>
 802a62a:	684d      	ldr	r5, [r1, #4]
 802a62c:	950d      	str	r5, [sp, #52]	; 0x34
 802a62e:	0e2d      	lsrs	r5, r5, #24
 802a630:	9514      	str	r5, [sp, #80]	; 0x50
 802a632:	b178      	cbz	r0, 802a654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a634:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802a638:	3f01      	subs	r7, #1
 802a63a:	00bf      	lsls	r7, r7, #2
 802a63c:	3704      	adds	r7, #4
 802a63e:	eb01 0e07 	add.w	lr, r1, r7
 802a642:	59c9      	ldr	r1, [r1, r7]
 802a644:	9109      	str	r1, [sp, #36]	; 0x24
 802a646:	0e09      	lsrs	r1, r1, #24
 802a648:	9111      	str	r1, [sp, #68]	; 0x44
 802a64a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a64e:	910e      	str	r1, [sp, #56]	; 0x38
 802a650:	0e09      	lsrs	r1, r1, #24
 802a652:	9115      	str	r1, [sp, #84]	; 0x54
 802a654:	b292      	uxth	r2, r2
 802a656:	b280      	uxth	r0, r0
 802a658:	fb02 f900 	mul.w	r9, r2, r0
 802a65c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a660:	0112      	lsls	r2, r2, #4
 802a662:	eba2 0e09 	sub.w	lr, r2, r9
 802a666:	b280      	uxth	r0, r0
 802a668:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802a66c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a66e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a670:	fa1f fe8e 	uxth.w	lr, lr
 802a674:	1a09      	subs	r1, r1, r0
 802a676:	b289      	uxth	r1, r1
 802a678:	fb0e f202 	mul.w	r2, lr, r2
 802a67c:	fb01 220c 	mla	r2, r1, ip, r2
 802a680:	fb00 2205 	mla	r2, r0, r5, r2
 802a684:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a686:	fb09 2205 	mla	r2, r9, r5, r2
 802a68a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a68e:	2a00      	cmp	r2, #0
 802a690:	f000 80c9 	beq.w	802a826 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a694:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a698:	d019      	beq.n	802a6ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802a69a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a69e:	fb0c fa0a 	mul.w	sl, ip, sl
 802a6a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a6a6:	fb0c fc03 	mul.w	ip, ip, r3
 802a6aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a6ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a6b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a6b6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a6ba:	4453      	add	r3, sl
 802a6bc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a6c0:	0a1b      	lsrs	r3, r3, #8
 802a6c2:	0a3f      	lsrs	r7, r7, #8
 802a6c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a6c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a6cc:	433b      	orrs	r3, r7
 802a6ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a6d0:	2dff      	cmp	r5, #255	; 0xff
 802a6d2:	d020      	beq.n	802a716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802a6d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6d6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a6da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a6dc:	436f      	muls	r7, r5
 802a6de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6e0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a6e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a6e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a6ea:	fb05 fa0a 	mul.w	sl, r5, sl
 802a6ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a6f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6f6:	44bc      	add	ip, r7
 802a6f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a6fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a700:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a704:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a708:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a70c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a710:	ea4c 050a 	orr.w	r5, ip, sl
 802a714:	950d      	str	r5, [sp, #52]	; 0x34
 802a716:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a718:	2dff      	cmp	r5, #255	; 0xff
 802a71a:	d020      	beq.n	802a75e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 802a71c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a71e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a722:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a724:	436f      	muls	r7, r5
 802a726:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a728:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a72c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a72e:	fb05 fa0c 	mul.w	sl, r5, ip
 802a732:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a736:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a73a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a73e:	44bc      	add	ip, r7
 802a740:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a744:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a748:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a74c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a750:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a754:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a758:	ea4c 050a 	orr.w	r5, ip, sl
 802a75c:	9509      	str	r5, [sp, #36]	; 0x24
 802a75e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a760:	2dff      	cmp	r5, #255	; 0xff
 802a762:	d020      	beq.n	802a7a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802a764:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a766:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a76a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a76c:	436f      	muls	r7, r5
 802a76e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a770:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a774:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a776:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a77a:	fb05 fa0a 	mul.w	sl, r5, sl
 802a77e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a782:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a786:	44bc      	add	ip, r7
 802a788:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a78c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a798:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a79c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a7a0:	ea4c 050a 	orr.w	r5, ip, sl
 802a7a4:	950e      	str	r5, [sp, #56]	; 0x38
 802a7a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a7a8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a7ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a7ae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a7b2:	fb0e f707 	mul.w	r7, lr, r7
 802a7b6:	fb01 770c 	mla	r7, r1, ip, r7
 802a7ba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a7be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a7c0:	fb00 770c 	mla	r7, r0, ip, r7
 802a7c4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a7c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a7ca:	fb09 770c 	mla	r7, r9, ip, r7
 802a7ce:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a7d2:	fb0e fe0c 	mul.w	lr, lr, ip
 802a7d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a7da:	fb01 e303 	mla	r3, r1, r3, lr
 802a7de:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a7e0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a7e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a7e6:	fb00 330a 	mla	r3, r0, sl, r3
 802a7ea:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802a7ee:	fb09 3c0c 	mla	ip, r9, ip, r3
 802a7f2:	0a3f      	lsrs	r7, r7, #8
 802a7f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a7f8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a7fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a800:	ea47 070c 	orr.w	r7, r7, ip
 802a804:	2aff      	cmp	r2, #255	; 0xff
 802a806:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802a80a:	d11e      	bne.n	802a84a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802a80c:	097a      	lsrs	r2, r7, #5
 802a80e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802a812:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a816:	f023 0307 	bic.w	r3, r3, #7
 802a81a:	4313      	orrs	r3, r2
 802a81c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a820:	431f      	orrs	r7, r3
 802a822:	f8a8 7000 	strh.w	r7, [r8]
 802a826:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a828:	441c      	add	r4, r3
 802a82a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a82c:	f108 0802 	add.w	r8, r8, #2
 802a830:	441e      	add	r6, r3
 802a832:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a836:	e644      	b.n	802a4c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802a838:	2800      	cmp	r0, #0
 802a83a:	f43f af0b 	beq.w	802a654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a83e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a842:	9109      	str	r1, [sp, #36]	; 0x24
 802a844:	0e09      	lsrs	r1, r1, #24
 802a846:	9111      	str	r1, [sp, #68]	; 0x44
 802a848:	e704      	b.n	802a654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a84a:	f8b8 1000 	ldrh.w	r1, [r8]
 802a84e:	43d2      	mvns	r2, r2
 802a850:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802a854:	fa5f fe82 	uxtb.w	lr, r2
 802a858:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a85c:	fb0c fc0e 	mul.w	ip, ip, lr
 802a860:	10c8      	asrs	r0, r1, #3
 802a862:	00ca      	lsls	r2, r1, #3
 802a864:	f10c 0101 	add.w	r1, ip, #1
 802a868:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a86c:	0c39      	lsrs	r1, r7, #16
 802a86e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a872:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a876:	4912      	ldr	r1, [pc, #72]	; (802a8c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a878:	fb00 f00e 	mul.w	r0, r0, lr
 802a87c:	fa5f fc8c 	uxtb.w	ip, ip
 802a880:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802a884:	b2d2      	uxtb	r2, r2
 802a886:	1c41      	adds	r1, r0, #1
 802a888:	fb02 f20e 	mul.w	r2, r2, lr
 802a88c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a890:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a894:	1c51      	adds	r1, r2, #1
 802a896:	00c0      	lsls	r0, r0, #3
 802a898:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a89c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a8a0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802a8a4:	ea4c 0c00 	orr.w	ip, ip, r0
 802a8a8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a8ac:	ea47 0c0c 	orr.w	ip, r7, ip
 802a8b0:	f8a8 c000 	strh.w	ip, [r8]
 802a8b4:	e7b7      	b.n	802a826 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a8b6:	b01b      	add	sp, #108	; 0x6c
 802a8b8:	ecbd 8b08 	vpop	{d8-d11}
 802a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8c0:	fffff800 	.word	0xfffff800

0802a8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a8c8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802a8cc:	2c00      	cmp	r4, #0
 802a8ce:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a8d2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a8d6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802a8da:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802a8de:	fb04 ce03 	mla	lr, r4, r3, ip
 802a8e2:	db60      	blt.n	802a9a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802a8e4:	45a1      	cmp	r9, r4
 802a8e6:	dd5e      	ble.n	802a9a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802a8e8:	f1bc 0f00 	cmp.w	ip, #0
 802a8ec:	db59      	blt.n	802a9a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802a8ee:	45e0      	cmp	r8, ip
 802a8f0:	dd57      	ble.n	802a9a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802a8f2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802a8f6:	f01e 0f01 	tst.w	lr, #1
 802a8fa:	5c16      	ldrb	r6, [r2, r0]
 802a8fc:	bf0c      	ite	eq
 802a8fe:	f006 060f 	andeq.w	r6, r6, #15
 802a902:	1136      	asrne	r6, r6, #4
 802a904:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a908:	b2f6      	uxtb	r6, r6
 802a90a:	f11c 0001 	adds.w	r0, ip, #1
 802a90e:	d44d      	bmi.n	802a9ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802a910:	4580      	cmp	r8, r0
 802a912:	dd4b      	ble.n	802a9ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802a914:	2d00      	cmp	r5, #0
 802a916:	d04b      	beq.n	802a9b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802a918:	f10e 0a01 	add.w	sl, lr, #1
 802a91c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a920:	f01a 0f01 	tst.w	sl, #1
 802a924:	5c10      	ldrb	r0, [r2, r0]
 802a926:	bf0c      	ite	eq
 802a928:	f000 000f 	andeq.w	r0, r0, #15
 802a92c:	1100      	asrne	r0, r0, #4
 802a92e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a932:	b2c0      	uxtb	r0, r0
 802a934:	3401      	adds	r4, #1
 802a936:	d43f      	bmi.n	802a9b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802a938:	45a1      	cmp	r9, r4
 802a93a:	dd3d      	ble.n	802a9b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802a93c:	2f00      	cmp	r7, #0
 802a93e:	f000 80a8 	beq.w	802aa92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802a942:	f1bc 0f00 	cmp.w	ip, #0
 802a946:	db35      	blt.n	802a9b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802a948:	45e0      	cmp	r8, ip
 802a94a:	dd33      	ble.n	802a9b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802a94c:	eb03 090e 	add.w	r9, r3, lr
 802a950:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a954:	f019 0f01 	tst.w	r9, #1
 802a958:	5d14      	ldrb	r4, [r2, r4]
 802a95a:	bf0c      	ite	eq
 802a95c:	f004 040f 	andeq.w	r4, r4, #15
 802a960:	1124      	asrne	r4, r4, #4
 802a962:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a966:	b2e4      	uxtb	r4, r4
 802a968:	f11c 0c01 	adds.w	ip, ip, #1
 802a96c:	d427      	bmi.n	802a9be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802a96e:	45e0      	cmp	r8, ip
 802a970:	dd25      	ble.n	802a9be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802a972:	b335      	cbz	r5, 802a9c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802a974:	3301      	adds	r3, #1
 802a976:	449e      	add	lr, r3
 802a978:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a97c:	f01e 0f01 	tst.w	lr, #1
 802a980:	5cd2      	ldrb	r2, [r2, r3]
 802a982:	bf0c      	ite	eq
 802a984:	f002 020f 	andeq.w	r2, r2, #15
 802a988:	1112      	asrne	r2, r2, #4
 802a98a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a98e:	b2d3      	uxtb	r3, r2
 802a990:	2d0f      	cmp	r5, #15
 802a992:	d917      	bls.n	802a9c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802a994:	4b42      	ldr	r3, [pc, #264]	; (802aaa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802a996:	4a43      	ldr	r2, [pc, #268]	; (802aaa4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 802a998:	4843      	ldr	r0, [pc, #268]	; (802aaa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 802a99a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a99e:	f003 fabf 	bl	802df20 <__assert_func>
 802a9a2:	2600      	movs	r6, #0
 802a9a4:	e7b1      	b.n	802a90a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802a9a6:	2000      	movs	r0, #0
 802a9a8:	4606      	mov	r6, r0
 802a9aa:	e7c3      	b.n	802a934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a9ac:	2000      	movs	r0, #0
 802a9ae:	e7c1      	b.n	802a934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a9b0:	4628      	mov	r0, r5
 802a9b2:	e7bf      	b.n	802a934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a9b4:	2400      	movs	r4, #0
 802a9b6:	e7d7      	b.n	802a968 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802a9b8:	2300      	movs	r3, #0
 802a9ba:	461c      	mov	r4, r3
 802a9bc:	e7e8      	b.n	802a990 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802a9be:	2300      	movs	r3, #0
 802a9c0:	e7e6      	b.n	802a990 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802a9c2:	462b      	mov	r3, r5
 802a9c4:	2f0f      	cmp	r7, #15
 802a9c6:	d8e5      	bhi.n	802a994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802a9c8:	b2ad      	uxth	r5, r5
 802a9ca:	b2bf      	uxth	r7, r7
 802a9cc:	fb05 fc07 	mul.w	ip, r5, r7
 802a9d0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a9d4:	012d      	lsls	r5, r5, #4
 802a9d6:	b2bf      	uxth	r7, r7
 802a9d8:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802a9dc:	eba5 050c 	sub.w	r5, r5, ip
 802a9e0:	1bd2      	subs	r2, r2, r7
 802a9e2:	b2ad      	uxth	r5, r5
 802a9e4:	b292      	uxth	r2, r2
 802a9e6:	4368      	muls	r0, r5
 802a9e8:	fb06 0002 	mla	r0, r6, r2, r0
 802a9ec:	fb07 0404 	mla	r4, r7, r4, r0
 802a9f0:	fb0c 4303 	mla	r3, ip, r3, r4
 802a9f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a9f8:	b1b3      	cbz	r3, 802aa28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802a9fa:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802a9fe:	435a      	muls	r2, r3
 802aa00:	1c53      	adds	r3, r2, #1
 802aa02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802aa06:	4a29      	ldr	r2, [pc, #164]	; (802aaac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 802aa08:	121b      	asrs	r3, r3, #8
 802aa0a:	6812      	ldr	r2, [r2, #0]
 802aa0c:	2bff      	cmp	r3, #255	; 0xff
 802aa0e:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802aa12:	d10b      	bne.n	802aa2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 802aa14:	4b26      	ldr	r3, [pc, #152]	; (802aab0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 802aa16:	0950      	lsrs	r0, r2, #5
 802aa18:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802aa1c:	4033      	ands	r3, r6
 802aa1e:	4318      	orrs	r0, r3
 802aa20:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802aa24:	4302      	orrs	r2, r0
 802aa26:	800a      	strh	r2, [r1, #0]
 802aa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aa2c:	880d      	ldrh	r5, [r1, #0]
 802aa2e:	b29f      	uxth	r7, r3
 802aa30:	122c      	asrs	r4, r5, #8
 802aa32:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802aa36:	43db      	mvns	r3, r3
 802aa38:	b2db      	uxtb	r3, r3
 802aa3a:	fb10 f007 	smulbb	r0, r0, r7
 802aa3e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802aa42:	fb04 0403 	mla	r4, r4, r3, r0
 802aa46:	b2f6      	uxtb	r6, r6
 802aa48:	10e8      	asrs	r0, r5, #3
 802aa4a:	b2d2      	uxtb	r2, r2
 802aa4c:	00ed      	lsls	r5, r5, #3
 802aa4e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802aa52:	fb12 f207 	smulbb	r2, r2, r7
 802aa56:	fb16 f607 	smulbb	r6, r6, r7
 802aa5a:	b2ed      	uxtb	r5, r5
 802aa5c:	b2a4      	uxth	r4, r4
 802aa5e:	fb00 6603 	mla	r6, r0, r3, r6
 802aa62:	fb05 2303 	mla	r3, r5, r3, r2
 802aa66:	b29a      	uxth	r2, r3
 802aa68:	1c63      	adds	r3, r4, #1
 802aa6a:	b2b0      	uxth	r0, r6
 802aa6c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802aa70:	1c53      	adds	r3, r2, #1
 802aa72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802aa76:	1c42      	adds	r2, r0, #1
 802aa78:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aa7c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802aa80:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aa84:	0940      	lsrs	r0, r0, #5
 802aa86:	4323      	orrs	r3, r4
 802aa88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802aa8c:	4303      	orrs	r3, r0
 802aa8e:	800b      	strh	r3, [r1, #0]
 802aa90:	e7ca      	b.n	802aa28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802aa92:	2d0f      	cmp	r5, #15
 802aa94:	f63f af7e 	bhi.w	802a994 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802aa98:	463b      	mov	r3, r7
 802aa9a:	463c      	mov	r4, r7
 802aa9c:	e794      	b.n	802a9c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802aa9e:	bf00      	nop
 802aaa0:	08032c55 	.word	0x08032c55
 802aaa4:	08033222 	.word	0x08033222
 802aaa8:	08032cd9 	.word	0x08032cd9
 802aaac:	200097b0 	.word	0x200097b0
 802aab0:	00fff800 	.word	0x00fff800

0802aab4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aab8:	ed2d 8b08 	vpush	{d8-d11}
 802aabc:	b097      	sub	sp, #92	; 0x5c
 802aabe:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802aac2:	9214      	str	r2, [sp, #80]	; 0x50
 802aac4:	9309      	str	r3, [sp, #36]	; 0x24
 802aac6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802aac8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802aacc:	910d      	str	r1, [sp, #52]	; 0x34
 802aace:	930f      	str	r3, [sp, #60]	; 0x3c
 802aad0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802aad4:	9015      	str	r0, [sp, #84]	; 0x54
 802aad6:	6850      	ldr	r0, [r2, #4]
 802aad8:	6812      	ldr	r2, [r2, #0]
 802aada:	fb00 1303 	mla	r3, r0, r3, r1
 802aade:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802aae2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aae4:	689b      	ldr	r3, [r3, #8]
 802aae6:	3301      	adds	r3, #1
 802aae8:	f023 0301 	bic.w	r3, r3, #1
 802aaec:	930a      	str	r3, [sp, #40]	; 0x28
 802aaee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aaf0:	681f      	ldr	r7, [r3, #0]
 802aaf2:	eeb0 aa40 	vmov.f32	s20, s0
 802aaf6:	eef0 9a60 	vmov.f32	s19, s1
 802aafa:	eeb0 9a41 	vmov.f32	s18, s2
 802aafe:	eeb0 8a62 	vmov.f32	s16, s5
 802ab02:	eef0 8a43 	vmov.f32	s17, s6
 802ab06:	eef0 ba44 	vmov.f32	s23, s8
 802ab0a:	eeb0 ba64 	vmov.f32	s22, s9
 802ab0e:	eef0 aa45 	vmov.f32	s21, s10
 802ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ab14:	2b00      	cmp	r3, #0
 802ab16:	dc03      	bgt.n	802ab20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802ab18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802ab1a:	2b00      	cmp	r3, #0
 802ab1c:	f340 8287 	ble.w	802b02e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802ab20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ab22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802ab26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802ab2a:	1e48      	subs	r0, r1, #1
 802ab2c:	f102 3cff 	add.w	ip, r2, #4294967295
 802ab30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ab32:	2b00      	cmp	r3, #0
 802ab34:	f340 80c4 	ble.w	802acc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802ab38:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802ab3c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802ab40:	d406      	bmi.n	802ab50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ab42:	4586      	cmp	lr, r0
 802ab44:	da04      	bge.n	802ab50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ab46:	2b00      	cmp	r3, #0
 802ab48:	db02      	blt.n	802ab50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ab4a:	4563      	cmp	r3, ip
 802ab4c:	f2c0 80b9 	blt.w	802acc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802ab50:	f11e 0e01 	adds.w	lr, lr, #1
 802ab54:	f100 80aa 	bmi.w	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ab58:	4571      	cmp	r1, lr
 802ab5a:	f2c0 80a7 	blt.w	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ab5e:	3301      	adds	r3, #1
 802ab60:	f100 80a4 	bmi.w	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ab64:	429a      	cmp	r2, r3
 802ab66:	f2c0 80a1 	blt.w	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ab6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ab6c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802ab70:	930e      	str	r3, [sp, #56]	; 0x38
 802ab72:	46c8      	mov	r8, r9
 802ab74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ab76:	2b00      	cmp	r3, #0
 802ab78:	f340 80c3 	ble.w	802ad02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802ab7c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ab7e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ab82:	1423      	asrs	r3, r4, #16
 802ab84:	ea4f 4026 	mov.w	r0, r6, asr #16
 802ab88:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ab8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ab90:	f100 814d 	bmi.w	802ae2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ab94:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ab98:	455b      	cmp	r3, fp
 802ab9a:	f280 8148 	bge.w	802ae2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ab9e:	2800      	cmp	r0, #0
 802aba0:	f2c0 8145 	blt.w	802ae2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802aba4:	f10e 3bff 	add.w	fp, lr, #4294967295
 802aba8:	4558      	cmp	r0, fp
 802abaa:	f280 8140 	bge.w	802ae2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802abae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802abb0:	fb00 3305 	mla	r3, r0, r5, r3
 802abb4:	0858      	lsrs	r0, r3, #1
 802abb6:	07dd      	lsls	r5, r3, #31
 802abb8:	f817 c000 	ldrb.w	ip, [r7, r0]
 802abbc:	bf54      	ite	pl
 802abbe:	f00c 0c0f 	andpl.w	ip, ip, #15
 802abc2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802abc6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802abca:	fa5f fc8c 	uxtb.w	ip, ip
 802abce:	2a00      	cmp	r2, #0
 802abd0:	f000 80db 	beq.w	802ad8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802abd4:	1c58      	adds	r0, r3, #1
 802abd6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802abda:	07c0      	lsls	r0, r0, #31
 802abdc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802abe0:	bf54      	ite	pl
 802abe2:	f00e 0e0f 	andpl.w	lr, lr, #15
 802abe6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802abea:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802abee:	fa5f f08e 	uxtb.w	r0, lr
 802abf2:	9010      	str	r0, [sp, #64]	; 0x40
 802abf4:	b1c9      	cbz	r1, 802ac2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802abf6:	4453      	add	r3, sl
 802abf8:	0858      	lsrs	r0, r3, #1
 802abfa:	07dd      	lsls	r5, r3, #31
 802abfc:	5c38      	ldrb	r0, [r7, r0]
 802abfe:	bf54      	ite	pl
 802ac00:	f000 000f 	andpl.w	r0, r0, #15
 802ac04:	1100      	asrmi	r0, r0, #4
 802ac06:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ac0a:	3301      	adds	r3, #1
 802ac0c:	b2c0      	uxtb	r0, r0
 802ac0e:	900b      	str	r0, [sp, #44]	; 0x2c
 802ac10:	0858      	lsrs	r0, r3, #1
 802ac12:	07dd      	lsls	r5, r3, #31
 802ac14:	f817 e000 	ldrb.w	lr, [r7, r0]
 802ac18:	bf54      	ite	pl
 802ac1a:	f00e 030f 	andpl.w	r3, lr, #15
 802ac1e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802ac22:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ac26:	b2db      	uxtb	r3, r3
 802ac28:	9311      	str	r3, [sp, #68]	; 0x44
 802ac2a:	b292      	uxth	r2, r2
 802ac2c:	b289      	uxth	r1, r1
 802ac2e:	fb02 f301 	mul.w	r3, r2, r1
 802ac32:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802ac36:	0112      	lsls	r2, r2, #4
 802ac38:	b289      	uxth	r1, r1
 802ac3a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802ac3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802ac40:	1ad2      	subs	r2, r2, r3
 802ac42:	1a40      	subs	r0, r0, r1
 802ac44:	b292      	uxth	r2, r2
 802ac46:	436a      	muls	r2, r5
 802ac48:	b280      	uxth	r0, r0
 802ac4a:	fb0c 2c00 	mla	ip, ip, r0, r2
 802ac4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ac50:	fb01 c102 	mla	r1, r1, r2, ip
 802ac54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ac56:	fb03 1302 	mla	r3, r3, r2, r1
 802ac5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ac5e:	b1db      	cbz	r3, 802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ac60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ac62:	4353      	muls	r3, r2
 802ac64:	1c5a      	adds	r2, r3, #1
 802ac66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802ac6a:	4ac6      	ldr	r2, [pc, #792]	; (802af84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802ac6c:	121b      	asrs	r3, r3, #8
 802ac6e:	6812      	ldr	r2, [r2, #0]
 802ac70:	2bff      	cmp	r3, #255	; 0xff
 802ac72:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802ac76:	f040 8099 	bne.w	802adac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802ac7a:	0953      	lsrs	r3, r2, #5
 802ac7c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802ac80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ac84:	f02c 0c07 	bic.w	ip, ip, #7
 802ac88:	ea43 0c0c 	orr.w	ip, r3, ip
 802ac8c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ac90:	ea4c 0202 	orr.w	r2, ip, r2
 802ac94:	f8a8 2000 	strh.w	r2, [r8]
 802ac98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802ac9a:	441c      	add	r4, r3
 802ac9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802ac9e:	441e      	add	r6, r3
 802aca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802aca2:	3b01      	subs	r3, #1
 802aca4:	f108 0802 	add.w	r8, r8, #2
 802aca8:	930e      	str	r3, [sp, #56]	; 0x38
 802acaa:	e763      	b.n	802ab74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802acac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802acae:	441c      	add	r4, r3
 802acb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802acb2:	441e      	add	r6, r3
 802acb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802acb6:	3b01      	subs	r3, #1
 802acb8:	9309      	str	r3, [sp, #36]	; 0x24
 802acba:	f109 0902 	add.w	r9, r9, #2
 802acbe:	e737      	b.n	802ab30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802acc0:	d024      	beq.n	802ad0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802acc4:	982b      	ldr	r0, [sp, #172]	; 0xac
 802acc6:	3b01      	subs	r3, #1
 802acc8:	fb00 4003 	mla	r0, r0, r3, r4
 802accc:	1400      	asrs	r0, r0, #16
 802acce:	f53f af4c 	bmi.w	802ab6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802acd2:	3901      	subs	r1, #1
 802acd4:	4288      	cmp	r0, r1
 802acd6:	f6bf af48 	bge.w	802ab6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802acda:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802acdc:	fb01 6303 	mla	r3, r1, r3, r6
 802ace0:	141b      	asrs	r3, r3, #16
 802ace2:	f53f af42 	bmi.w	802ab6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ace6:	3a01      	subs	r2, #1
 802ace8:	4293      	cmp	r3, r2
 802acea:	f6bf af3e 	bge.w	802ab6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802acee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802acf2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802acf6:	930e      	str	r3, [sp, #56]	; 0x38
 802acf8:	46c8      	mov	r8, r9
 802acfa:	f1bb 0f00 	cmp.w	fp, #0
 802acfe:	f300 80b7 	bgt.w	802ae70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802ad02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ad04:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ad08:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802ad0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ad0e:	2b00      	cmp	r3, #0
 802ad10:	f340 818d 	ble.w	802b02e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802ad14:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802ad18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802ad1c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802ad20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ad22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802ad26:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802ad2a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802ad2e:	eef0 6a48 	vmov.f32	s13, s16
 802ad32:	ee69 7a27 	vmul.f32	s15, s18, s15
 802ad36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ad3a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802ad3e:	ee16 4a90 	vmov	r4, s13
 802ad42:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802ad46:	eef0 6a68 	vmov.f32	s13, s17
 802ad4a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802ad4e:	ee18 2a10 	vmov	r2, s16
 802ad52:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802ad56:	fb92 f3f3 	sdiv	r3, r2, r3
 802ad5a:	ee18 2a90 	vmov	r2, s17
 802ad5e:	932b      	str	r3, [sp, #172]	; 0xac
 802ad60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ad62:	fb92 f3f3 	sdiv	r3, r2, r3
 802ad66:	932c      	str	r3, [sp, #176]	; 0xb0
 802ad68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ad6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802ad6c:	3b01      	subs	r3, #1
 802ad6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ad72:	930d      	str	r3, [sp, #52]	; 0x34
 802ad74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ad76:	bf08      	it	eq
 802ad78:	4613      	moveq	r3, r2
 802ad7a:	ee16 6a90 	vmov	r6, s13
 802ad7e:	9309      	str	r3, [sp, #36]	; 0x24
 802ad80:	eef0 8a67 	vmov.f32	s17, s15
 802ad84:	eeb0 8a47 	vmov.f32	s16, s14
 802ad88:	e6c3      	b.n	802ab12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802ad8a:	2900      	cmp	r1, #0
 802ad8c:	f43f af4d 	beq.w	802ac2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ad90:	eb0a 0003 	add.w	r0, sl, r3
 802ad94:	0843      	lsrs	r3, r0, #1
 802ad96:	07c0      	lsls	r0, r0, #31
 802ad98:	5cfb      	ldrb	r3, [r7, r3]
 802ad9a:	bf54      	ite	pl
 802ad9c:	f003 030f 	andpl.w	r3, r3, #15
 802ada0:	111b      	asrmi	r3, r3, #4
 802ada2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ada6:	b2db      	uxtb	r3, r3
 802ada8:	930b      	str	r3, [sp, #44]	; 0x2c
 802adaa:	e73e      	b.n	802ac2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802adac:	f8b8 e000 	ldrh.w	lr, [r8]
 802adb0:	fa1f fb83 	uxth.w	fp, r3
 802adb4:	ea4f 202e 	mov.w	r0, lr, asr #8
 802adb8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802adbc:	43db      	mvns	r3, r3
 802adbe:	b2db      	uxtb	r3, r3
 802adc0:	fb11 f10b 	smulbb	r1, r1, fp
 802adc4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802adc8:	fb00 1003 	mla	r0, r0, r3, r1
 802adcc:	fa5f fc8c 	uxtb.w	ip, ip
 802add0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802add4:	b2d2      	uxtb	r2, r2
 802add6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802adda:	b280      	uxth	r0, r0
 802addc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802ade0:	fb1c fc0b 	smulbb	ip, ip, fp
 802ade4:	fa5f fe8e 	uxtb.w	lr, lr
 802ade8:	fb12 fb0b 	smulbb	fp, r2, fp
 802adec:	fb01 cc03 	mla	ip, r1, r3, ip
 802adf0:	fb0e bb03 	mla	fp, lr, r3, fp
 802adf4:	1c43      	adds	r3, r0, #1
 802adf6:	fa1f fc8c 	uxth.w	ip, ip
 802adfa:	fa1f fb8b 	uxth.w	fp, fp
 802adfe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ae02:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802ae06:	f10c 0101 	add.w	r1, ip, #1
 802ae0a:	f10b 0001 	add.w	r0, fp, #1
 802ae0e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802ae12:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802ae16:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ae1a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802ae1e:	4318      	orrs	r0, r3
 802ae20:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802ae24:	ea40 000c 	orr.w	r0, r0, ip
 802ae28:	f8a8 0000 	strh.w	r0, [r8]
 802ae2c:	e734      	b.n	802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae2e:	f113 0b01 	adds.w	fp, r3, #1
 802ae32:	f53f af31 	bmi.w	802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae36:	45dc      	cmp	ip, fp
 802ae38:	f6ff af2e 	blt.w	802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae3c:	f110 0b01 	adds.w	fp, r0, #1
 802ae40:	f53f af2a 	bmi.w	802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae44:	45de      	cmp	lr, fp
 802ae46:	f6ff af27 	blt.w	802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802ae4c:	9302      	str	r3, [sp, #8]
 802ae4e:	fa0f f38e 	sxth.w	r3, lr
 802ae52:	9301      	str	r3, [sp, #4]
 802ae54:	fa0f f38c 	sxth.w	r3, ip
 802ae58:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ae5c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802ae60:	9300      	str	r3, [sp, #0]
 802ae62:	463a      	mov	r2, r7
 802ae64:	4653      	mov	r3, sl
 802ae66:	4641      	mov	r1, r8
 802ae68:	9815      	ldr	r0, [sp, #84]	; 0x54
 802ae6a:	f7ff fd2b 	bl	802a8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802ae6e:	e713      	b.n	802ac98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802ae72:	1422      	asrs	r2, r4, #16
 802ae74:	1433      	asrs	r3, r6, #16
 802ae76:	fb05 2303 	mla	r3, r5, r3, r2
 802ae7a:	085a      	lsrs	r2, r3, #1
 802ae7c:	07dd      	lsls	r5, r3, #31
 802ae7e:	5cba      	ldrb	r2, [r7, r2]
 802ae80:	bf54      	ite	pl
 802ae82:	f002 020f 	andpl.w	r2, r2, #15
 802ae86:	1112      	asrmi	r2, r2, #4
 802ae88:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ae8c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802ae90:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802ae94:	b2d2      	uxtb	r2, r2
 802ae96:	2900      	cmp	r1, #0
 802ae98:	d076      	beq.n	802af88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802ae9a:	f103 0e01 	add.w	lr, r3, #1
 802ae9e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802aea2:	f01e 0f01 	tst.w	lr, #1
 802aea6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802aeaa:	bf0c      	ite	eq
 802aeac:	f00c 0c0f 	andeq.w	ip, ip, #15
 802aeb0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802aeb4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aeb8:	fa5f f58c 	uxtb.w	r5, ip
 802aebc:	9512      	str	r5, [sp, #72]	; 0x48
 802aebe:	b300      	cbz	r0, 802af02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802aec0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802aec2:	442b      	add	r3, r5
 802aec4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802aec8:	07dd      	lsls	r5, r3, #31
 802aeca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802aece:	bf54      	ite	pl
 802aed0:	f00c 0c0f 	andpl.w	ip, ip, #15
 802aed4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802aed8:	3301      	adds	r3, #1
 802aeda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aede:	fa5f f58c 	uxtb.w	r5, ip
 802aee2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802aee6:	950c      	str	r5, [sp, #48]	; 0x30
 802aee8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802aeec:	07dd      	lsls	r5, r3, #31
 802aeee:	bf54      	ite	pl
 802aef0:	f00c 0c0f 	andpl.w	ip, ip, #15
 802aef4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802aef8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aefc:	fa5f f38c 	uxtb.w	r3, ip
 802af00:	9313      	str	r3, [sp, #76]	; 0x4c
 802af02:	b289      	uxth	r1, r1
 802af04:	b280      	uxth	r0, r0
 802af06:	fb01 f300 	mul.w	r3, r1, r0
 802af0a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802af0e:	0109      	lsls	r1, r1, #4
 802af10:	b280      	uxth	r0, r0
 802af12:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802af16:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802af18:	1ac9      	subs	r1, r1, r3
 802af1a:	ebac 0c00 	sub.w	ip, ip, r0
 802af1e:	b289      	uxth	r1, r1
 802af20:	4369      	muls	r1, r5
 802af22:	fa1f fc8c 	uxth.w	ip, ip
 802af26:	fb02 120c 	mla	r2, r2, ip, r1
 802af2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802af2c:	fb00 2001 	mla	r0, r0, r1, r2
 802af30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802af32:	fb03 0302 	mla	r3, r3, r2, r0
 802af36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802af3a:	b1d3      	cbz	r3, 802af72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802af3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802af3e:	4353      	muls	r3, r2
 802af40:	1c5a      	adds	r2, r3, #1
 802af42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802af46:	4a0f      	ldr	r2, [pc, #60]	; (802af84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802af48:	121b      	asrs	r3, r3, #8
 802af4a:	6812      	ldr	r2, [r2, #0]
 802af4c:	2bff      	cmp	r3, #255	; 0xff
 802af4e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802af52:	d12d      	bne.n	802afb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 802af54:	0953      	lsrs	r3, r2, #5
 802af56:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802af5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802af5e:	f02c 0c07 	bic.w	ip, ip, #7
 802af62:	ea43 0c0c 	orr.w	ip, r3, ip
 802af66:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802af6a:	ea4c 0202 	orr.w	r2, ip, r2
 802af6e:	f8a8 2000 	strh.w	r2, [r8]
 802af72:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802af74:	441c      	add	r4, r3
 802af76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802af78:	f108 0802 	add.w	r8, r8, #2
 802af7c:	441e      	add	r6, r3
 802af7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 802af82:	e6ba      	b.n	802acfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802af84:	200097b0 	.word	0x200097b0
 802af88:	2800      	cmp	r0, #0
 802af8a:	d0ba      	beq.n	802af02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802af8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802af8e:	442b      	add	r3, r5
 802af90:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802af94:	07db      	lsls	r3, r3, #31
 802af96:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802af9a:	bf54      	ite	pl
 802af9c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802afa0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802afa4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802afa8:	fa5f f38c 	uxtb.w	r3, ip
 802afac:	930c      	str	r3, [sp, #48]	; 0x30
 802afae:	e7a8      	b.n	802af02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802afb0:	f8b8 e000 	ldrh.w	lr, [r8]
 802afb4:	fa1f fa83 	uxth.w	sl, r3
 802afb8:	ea4f 202e 	mov.w	r0, lr, asr #8
 802afbc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802afc0:	43db      	mvns	r3, r3
 802afc2:	b2db      	uxtb	r3, r3
 802afc4:	fb11 f10a 	smulbb	r1, r1, sl
 802afc8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802afcc:	fb00 1003 	mla	r0, r0, r3, r1
 802afd0:	b2d2      	uxtb	r2, r2
 802afd2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802afd6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802afda:	fa5f fe8e 	uxtb.w	lr, lr
 802afde:	fb12 f20a 	smulbb	r2, r2, sl
 802afe2:	fb0e 2203 	mla	r2, lr, r3, r2
 802afe6:	fa5f fc8c 	uxtb.w	ip, ip
 802afea:	b280      	uxth	r0, r0
 802afec:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802aff0:	b292      	uxth	r2, r2
 802aff2:	fb1c fc0a 	smulbb	ip, ip, sl
 802aff6:	fb01 cc03 	mla	ip, r1, r3, ip
 802affa:	1c43      	adds	r3, r0, #1
 802affc:	1c51      	adds	r1, r2, #1
 802affe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b002:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802b006:	fa1f fc8c 	uxth.w	ip, ip
 802b00a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b00e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802b012:	4308      	orrs	r0, r1
 802b014:	f10c 0101 	add.w	r1, ip, #1
 802b018:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b01c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b020:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b024:	ea40 000c 	orr.w	r0, r0, ip
 802b028:	f8a8 0000 	strh.w	r0, [r8]
 802b02c:	e7a1      	b.n	802af72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802b02e:	b017      	add	sp, #92	; 0x5c
 802b030:	ecbd 8b08 	vpop	{d8-d11}
 802b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802b038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b03c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802b040:	2c00      	cmp	r4, #0
 802b042:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802b046:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802b04a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802b04e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802b052:	fb04 ce03 	mla	lr, r4, r3, ip
 802b056:	db60      	blt.n	802b11a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802b058:	45a1      	cmp	r9, r4
 802b05a:	dd5e      	ble.n	802b11a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802b05c:	f1bc 0f00 	cmp.w	ip, #0
 802b060:	db59      	blt.n	802b116 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b062:	45e0      	cmp	r8, ip
 802b064:	dd57      	ble.n	802b116 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b066:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802b06a:	f01e 0f01 	tst.w	lr, #1
 802b06e:	5c16      	ldrb	r6, [r2, r0]
 802b070:	bf0c      	ite	eq
 802b072:	f006 060f 	andeq.w	r6, r6, #15
 802b076:	1136      	asrne	r6, r6, #4
 802b078:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b07c:	b2f6      	uxtb	r6, r6
 802b07e:	f11c 0001 	adds.w	r0, ip, #1
 802b082:	d44d      	bmi.n	802b120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b084:	4580      	cmp	r8, r0
 802b086:	dd4b      	ble.n	802b120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b088:	2d00      	cmp	r5, #0
 802b08a:	d04b      	beq.n	802b124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802b08c:	f10e 0a01 	add.w	sl, lr, #1
 802b090:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802b094:	f01a 0f01 	tst.w	sl, #1
 802b098:	5c10      	ldrb	r0, [r2, r0]
 802b09a:	bf0c      	ite	eq
 802b09c:	f000 000f 	andeq.w	r0, r0, #15
 802b0a0:	1100      	asrne	r0, r0, #4
 802b0a2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b0a6:	b2c0      	uxtb	r0, r0
 802b0a8:	3401      	adds	r4, #1
 802b0aa:	d43f      	bmi.n	802b12c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b0ac:	45a1      	cmp	r9, r4
 802b0ae:	dd3d      	ble.n	802b12c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b0b0:	2f00      	cmp	r7, #0
 802b0b2:	f000 8093 	beq.w	802b1dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b0b6:	f1bc 0f00 	cmp.w	ip, #0
 802b0ba:	db35      	blt.n	802b128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b0bc:	45e0      	cmp	r8, ip
 802b0be:	dd33      	ble.n	802b128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b0c0:	eb03 090e 	add.w	r9, r3, lr
 802b0c4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802b0c8:	f019 0f01 	tst.w	r9, #1
 802b0cc:	5d14      	ldrb	r4, [r2, r4]
 802b0ce:	bf0c      	ite	eq
 802b0d0:	f004 040f 	andeq.w	r4, r4, #15
 802b0d4:	1124      	asrne	r4, r4, #4
 802b0d6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b0da:	b2e4      	uxtb	r4, r4
 802b0dc:	f11c 0c01 	adds.w	ip, ip, #1
 802b0e0:	d427      	bmi.n	802b132 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b0e2:	45e0      	cmp	r8, ip
 802b0e4:	dd25      	ble.n	802b132 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b0e6:	b335      	cbz	r5, 802b136 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802b0e8:	3301      	adds	r3, #1
 802b0ea:	449e      	add	lr, r3
 802b0ec:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b0f0:	f01e 0f01 	tst.w	lr, #1
 802b0f4:	5cd2      	ldrb	r2, [r2, r3]
 802b0f6:	bf0c      	ite	eq
 802b0f8:	f002 020f 	andeq.w	r2, r2, #15
 802b0fc:	1112      	asrne	r2, r2, #4
 802b0fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b102:	b2d3      	uxtb	r3, r2
 802b104:	2d0f      	cmp	r5, #15
 802b106:	d917      	bls.n	802b138 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802b108:	4b37      	ldr	r3, [pc, #220]	; (802b1e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802b10a:	4a38      	ldr	r2, [pc, #224]	; (802b1ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802b10c:	4838      	ldr	r0, [pc, #224]	; (802b1f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802b10e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802b112:	f002 ff05 	bl	802df20 <__assert_func>
 802b116:	2600      	movs	r6, #0
 802b118:	e7b1      	b.n	802b07e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802b11a:	2000      	movs	r0, #0
 802b11c:	4606      	mov	r6, r0
 802b11e:	e7c3      	b.n	802b0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b120:	2000      	movs	r0, #0
 802b122:	e7c1      	b.n	802b0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b124:	4628      	mov	r0, r5
 802b126:	e7bf      	b.n	802b0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b128:	2400      	movs	r4, #0
 802b12a:	e7d7      	b.n	802b0dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802b12c:	2300      	movs	r3, #0
 802b12e:	461c      	mov	r4, r3
 802b130:	e7e8      	b.n	802b104 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b132:	2300      	movs	r3, #0
 802b134:	e7e6      	b.n	802b104 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b136:	462b      	mov	r3, r5
 802b138:	2f0f      	cmp	r7, #15
 802b13a:	d8e5      	bhi.n	802b108 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b13c:	b2ad      	uxth	r5, r5
 802b13e:	b2bf      	uxth	r7, r7
 802b140:	fb05 fc07 	mul.w	ip, r5, r7
 802b144:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802b148:	012d      	lsls	r5, r5, #4
 802b14a:	b2bf      	uxth	r7, r7
 802b14c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802b150:	eba5 050c 	sub.w	r5, r5, ip
 802b154:	1bd2      	subs	r2, r2, r7
 802b156:	b2ad      	uxth	r5, r5
 802b158:	b292      	uxth	r2, r2
 802b15a:	4368      	muls	r0, r5
 802b15c:	fb06 0002 	mla	r0, r6, r2, r0
 802b160:	fb07 0404 	mla	r4, r7, r4, r0
 802b164:	fb0c 4303 	mla	r3, ip, r3, r4
 802b168:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b16c:	b3a3      	cbz	r3, 802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b16e:	4a21      	ldr	r2, [pc, #132]	; (802b1f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802b170:	880e      	ldrh	r6, [r1, #0]
 802b172:	6815      	ldr	r5, [r2, #0]
 802b174:	1234      	asrs	r4, r6, #8
 802b176:	b29a      	uxth	r2, r3
 802b178:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b17c:	43db      	mvns	r3, r3
 802b17e:	b2db      	uxtb	r3, r3
 802b180:	fb10 f002 	smulbb	r0, r0, r2
 802b184:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b188:	fb04 0403 	mla	r4, r4, r3, r0
 802b18c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b190:	10f0      	asrs	r0, r6, #3
 802b192:	b2ed      	uxtb	r5, r5
 802b194:	00f6      	lsls	r6, r6, #3
 802b196:	fb17 f702 	smulbb	r7, r7, r2
 802b19a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b19e:	fb15 f202 	smulbb	r2, r5, r2
 802b1a2:	b2f6      	uxtb	r6, r6
 802b1a4:	b2a4      	uxth	r4, r4
 802b1a6:	fb00 7003 	mla	r0, r0, r3, r7
 802b1aa:	fb06 2303 	mla	r3, r6, r3, r2
 802b1ae:	b29a      	uxth	r2, r3
 802b1b0:	1c63      	adds	r3, r4, #1
 802b1b2:	b280      	uxth	r0, r0
 802b1b4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b1b8:	1c53      	adds	r3, r2, #1
 802b1ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b1be:	1c42      	adds	r2, r0, #1
 802b1c0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b1c4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b1c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b1cc:	0940      	lsrs	r0, r0, #5
 802b1ce:	4323      	orrs	r3, r4
 802b1d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b1d4:	4303      	orrs	r3, r0
 802b1d6:	800b      	strh	r3, [r1, #0]
 802b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b1dc:	2d0f      	cmp	r5, #15
 802b1de:	d893      	bhi.n	802b108 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b1e0:	463b      	mov	r3, r7
 802b1e2:	463c      	mov	r4, r7
 802b1e4:	e7aa      	b.n	802b13c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802b1e6:	bf00      	nop
 802b1e8:	08032c55 	.word	0x08032c55
 802b1ec:	08033222 	.word	0x08033222
 802b1f0:	08032cd9 	.word	0x08032cd9
 802b1f4:	200097b0 	.word	0x200097b0

0802b1f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b1fc:	ed2d 8b08 	vpush	{d8-d11}
 802b200:	b093      	sub	sp, #76	; 0x4c
 802b202:	461d      	mov	r5, r3
 802b204:	920c      	str	r2, [sp, #48]	; 0x30
 802b206:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802b208:	9107      	str	r1, [sp, #28]
 802b20a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802b20e:	9011      	str	r0, [sp, #68]	; 0x44
 802b210:	6850      	ldr	r0, [r2, #4]
 802b212:	6812      	ldr	r2, [r2, #0]
 802b214:	fb00 1303 	mla	r3, r0, r3, r1
 802b218:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b21c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b21e:	689b      	ldr	r3, [r3, #8]
 802b220:	3301      	adds	r3, #1
 802b222:	f023 0301 	bic.w	r3, r3, #1
 802b226:	9306      	str	r3, [sp, #24]
 802b228:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b22a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802b22e:	681f      	ldr	r7, [r3, #0]
 802b230:	eeb0 aa40 	vmov.f32	s20, s0
 802b234:	eef0 9a60 	vmov.f32	s19, s1
 802b238:	eeb0 9a41 	vmov.f32	s18, s2
 802b23c:	eeb0 8a62 	vmov.f32	s16, s5
 802b240:	eef0 8a43 	vmov.f32	s17, s6
 802b244:	eef0 ba44 	vmov.f32	s23, s8
 802b248:	eeb0 ba64 	vmov.f32	s22, s9
 802b24c:	eef0 aa45 	vmov.f32	s21, s10
 802b250:	9b07      	ldr	r3, [sp, #28]
 802b252:	2b00      	cmp	r3, #0
 802b254:	dc03      	bgt.n	802b25e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802b256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b258:	2b00      	cmp	r3, #0
 802b25a:	f340 8267 	ble.w	802b72c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b25e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b260:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b264:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b268:	1e48      	subs	r0, r1, #1
 802b26a:	f102 3cff 	add.w	ip, r2, #4294967295
 802b26e:	2d00      	cmp	r5, #0
 802b270:	f340 80b8 	ble.w	802b3e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802b274:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b278:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b27c:	d406      	bmi.n	802b28c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b27e:	4586      	cmp	lr, r0
 802b280:	da04      	bge.n	802b28c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b282:	2b00      	cmp	r3, #0
 802b284:	db02      	blt.n	802b28c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b286:	4563      	cmp	r3, ip
 802b288:	f2c0 80ad 	blt.w	802b3e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802b28c:	f11e 0e01 	adds.w	lr, lr, #1
 802b290:	f100 80a0 	bmi.w	802b3d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b294:	4571      	cmp	r1, lr
 802b296:	f2c0 809d 	blt.w	802b3d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b29a:	3301      	adds	r3, #1
 802b29c:	f100 809a 	bmi.w	802b3d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b2a0:	429a      	cmp	r2, r3
 802b2a2:	f2c0 8097 	blt.w	802b3d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b2a6:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b2aa:	9509      	str	r5, [sp, #36]	; 0x24
 802b2ac:	46c8      	mov	r8, r9
 802b2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b2b0:	2b00      	cmp	r3, #0
 802b2b2:	f340 80b6 	ble.w	802b422 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802b2b6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b2ba:	9308      	str	r3, [sp, #32]
 802b2bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b2be:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b2c2:	1423      	asrs	r3, r4, #16
 802b2c4:	ea4f 4026 	mov.w	r0, r6, asr #16
 802b2c8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b2cc:	f100 813e 	bmi.w	802b54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b2d0:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b2d4:	455b      	cmp	r3, fp
 802b2d6:	f280 8139 	bge.w	802b54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b2da:	2800      	cmp	r0, #0
 802b2dc:	f2c0 8136 	blt.w	802b54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b2e0:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b2e4:	4558      	cmp	r0, fp
 802b2e6:	f280 8131 	bge.w	802b54c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b2ea:	9a06      	ldr	r2, [sp, #24]
 802b2ec:	fb00 3302 	mla	r3, r0, r2, r3
 802b2f0:	0858      	lsrs	r0, r3, #1
 802b2f2:	07da      	lsls	r2, r3, #31
 802b2f4:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b2f8:	9a08      	ldr	r2, [sp, #32]
 802b2fa:	bf54      	ite	pl
 802b2fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b300:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b304:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b308:	fa5f fc8c 	uxtb.w	ip, ip
 802b30c:	2a00      	cmp	r2, #0
 802b30e:	f000 80cb 	beq.w	802b4a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802b312:	1c58      	adds	r0, r3, #1
 802b314:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b318:	07c0      	lsls	r0, r0, #31
 802b31a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b31e:	bf54      	ite	pl
 802b320:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b324:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b328:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b32c:	fa5f fe8e 	uxtb.w	lr, lr
 802b330:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b334:	b1b9      	cbz	r1, 802b366 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b336:	4453      	add	r3, sl
 802b338:	0858      	lsrs	r0, r3, #1
 802b33a:	07da      	lsls	r2, r3, #31
 802b33c:	5c38      	ldrb	r0, [r7, r0]
 802b33e:	bf54      	ite	pl
 802b340:	f000 000f 	andpl.w	r0, r0, #15
 802b344:	1100      	asrmi	r0, r0, #4
 802b346:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b34a:	b2c0      	uxtb	r0, r0
 802b34c:	900a      	str	r0, [sp, #40]	; 0x28
 802b34e:	1c58      	adds	r0, r3, #1
 802b350:	0843      	lsrs	r3, r0, #1
 802b352:	07c2      	lsls	r2, r0, #31
 802b354:	5cfb      	ldrb	r3, [r7, r3]
 802b356:	bf54      	ite	pl
 802b358:	f003 030f 	andpl.w	r3, r3, #15
 802b35c:	111b      	asrmi	r3, r3, #4
 802b35e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b362:	b2db      	uxtb	r3, r3
 802b364:	930e      	str	r3, [sp, #56]	; 0x38
 802b366:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b36a:	b289      	uxth	r1, r1
 802b36c:	fb02 f301 	mul.w	r3, r2, r1
 802b370:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b374:	0112      	lsls	r2, r2, #4
 802b376:	b289      	uxth	r1, r1
 802b378:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b37c:	1a40      	subs	r0, r0, r1
 802b37e:	fa1f fe80 	uxth.w	lr, r0
 802b382:	1ad2      	subs	r2, r2, r3
 802b384:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b386:	b292      	uxth	r2, r2
 802b388:	4342      	muls	r2, r0
 802b38a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b38e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b390:	fb01 c102 	mla	r1, r1, r2, ip
 802b394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b396:	fb03 1302 	mla	r3, r3, r2, r1
 802b39a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b39e:	2bff      	cmp	r3, #255	; 0xff
 802b3a0:	f040 8093 	bne.w	802b4ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802b3a4:	4bbe      	ldr	r3, [pc, #760]	; (802b6a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b3a6:	681a      	ldr	r2, [r3, #0]
 802b3a8:	4bbe      	ldr	r3, [pc, #760]	; (802b6a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b3aa:	0951      	lsrs	r1, r2, #5
 802b3ac:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b3b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b3b4:	430b      	orrs	r3, r1
 802b3b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b3ba:	4313      	orrs	r3, r2
 802b3bc:	f8a8 3000 	strh.w	r3, [r8]
 802b3c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b3c2:	441c      	add	r4, r3
 802b3c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b3c6:	441e      	add	r6, r3
 802b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b3ca:	3b01      	subs	r3, #1
 802b3cc:	f108 0802 	add.w	r8, r8, #2
 802b3d0:	9309      	str	r3, [sp, #36]	; 0x24
 802b3d2:	e76c      	b.n	802b2ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b3d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b3d6:	441c      	add	r4, r3
 802b3d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b3da:	3d01      	subs	r5, #1
 802b3dc:	441e      	add	r6, r3
 802b3de:	f109 0902 	add.w	r9, r9, #2
 802b3e2:	e744      	b.n	802b26e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802b3e4:	d021      	beq.n	802b42a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802b3e6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802b3e8:	1e6b      	subs	r3, r5, #1
 802b3ea:	fb00 4003 	mla	r0, r0, r3, r4
 802b3ee:	1400      	asrs	r0, r0, #16
 802b3f0:	f53f af59 	bmi.w	802b2a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b3f4:	3901      	subs	r1, #1
 802b3f6:	4288      	cmp	r0, r1
 802b3f8:	f6bf af55 	bge.w	802b2a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b3fc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802b3fe:	fb01 6303 	mla	r3, r1, r3, r6
 802b402:	141b      	asrs	r3, r3, #16
 802b404:	f53f af4f 	bmi.w	802b2a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b408:	3a01      	subs	r2, #1
 802b40a:	4293      	cmp	r3, r2
 802b40c:	f6bf af4b 	bge.w	802b2a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b410:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b414:	9308      	str	r3, [sp, #32]
 802b416:	46a8      	mov	r8, r5
 802b418:	46ce      	mov	lr, r9
 802b41a:	f1b8 0f00 	cmp.w	r8, #0
 802b41e:	f300 80b5 	bgt.w	802b58c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b422:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b426:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b42a:	9b07      	ldr	r3, [sp, #28]
 802b42c:	2b00      	cmp	r3, #0
 802b42e:	f340 817d 	ble.w	802b72c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b432:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b43a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b43e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b440:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b444:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b448:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b44c:	eef0 6a48 	vmov.f32	s13, s16
 802b450:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b454:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b458:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b45c:	ee16 4a90 	vmov	r4, s13
 802b460:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b464:	eef0 6a68 	vmov.f32	s13, s17
 802b468:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b46c:	ee18 2a10 	vmov	r2, s16
 802b470:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b474:	fb92 f3f3 	sdiv	r3, r2, r3
 802b478:	ee18 2a90 	vmov	r2, s17
 802b47c:	9327      	str	r3, [sp, #156]	; 0x9c
 802b47e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b480:	fb92 f3f3 	sdiv	r3, r2, r3
 802b484:	9328      	str	r3, [sp, #160]	; 0xa0
 802b486:	9b07      	ldr	r3, [sp, #28]
 802b488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b48a:	3b01      	subs	r3, #1
 802b48c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b490:	9307      	str	r3, [sp, #28]
 802b492:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b494:	ee16 6a90 	vmov	r6, s13
 802b498:	bf14      	ite	ne
 802b49a:	461d      	movne	r5, r3
 802b49c:	4615      	moveq	r5, r2
 802b49e:	eef0 8a67 	vmov.f32	s17, s15
 802b4a2:	eeb0 8a47 	vmov.f32	s16, s14
 802b4a6:	e6d3      	b.n	802b250 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b4a8:	2900      	cmp	r1, #0
 802b4aa:	f43f af5c 	beq.w	802b366 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b4ae:	eb0a 0003 	add.w	r0, sl, r3
 802b4b2:	0843      	lsrs	r3, r0, #1
 802b4b4:	07c0      	lsls	r0, r0, #31
 802b4b6:	5cfb      	ldrb	r3, [r7, r3]
 802b4b8:	bf54      	ite	pl
 802b4ba:	f003 030f 	andpl.w	r3, r3, #15
 802b4be:	111b      	asrmi	r3, r3, #4
 802b4c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b4c4:	b2db      	uxtb	r3, r3
 802b4c6:	930a      	str	r3, [sp, #40]	; 0x28
 802b4c8:	e74d      	b.n	802b366 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b4ca:	2b00      	cmp	r3, #0
 802b4cc:	f43f af78 	beq.w	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b4d0:	4a73      	ldr	r2, [pc, #460]	; (802b6a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b4d2:	f8b8 c000 	ldrh.w	ip, [r8]
 802b4d6:	6810      	ldr	r0, [r2, #0]
 802b4d8:	fa1f fe83 	uxth.w	lr, r3
 802b4dc:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b4e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b4e4:	43db      	mvns	r3, r3
 802b4e6:	b2db      	uxtb	r3, r3
 802b4e8:	fb12 f20e 	smulbb	r2, r2, lr
 802b4ec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b4f0:	fb01 2103 	mla	r1, r1, r3, r2
 802b4f4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b4f8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b4fc:	b2c0      	uxtb	r0, r0
 802b4fe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b502:	fb1b fb0e 	smulbb	fp, fp, lr
 802b506:	b289      	uxth	r1, r1
 802b508:	fb10 fe0e 	smulbb	lr, r0, lr
 802b50c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b510:	fa5f fc8c 	uxtb.w	ip, ip
 802b514:	fb02 b203 	mla	r2, r2, r3, fp
 802b518:	1c48      	adds	r0, r1, #1
 802b51a:	fb0c e303 	mla	r3, ip, r3, lr
 802b51e:	b292      	uxth	r2, r2
 802b520:	b29b      	uxth	r3, r3
 802b522:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b526:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802b52a:	f102 0b01 	add.w	fp, r2, #1
 802b52e:	1c59      	adds	r1, r3, #1
 802b530:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b534:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b538:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b53c:	0952      	lsrs	r2, r2, #5
 802b53e:	4301      	orrs	r1, r0
 802b540:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b544:	4311      	orrs	r1, r2
 802b546:	f8a8 1000 	strh.w	r1, [r8]
 802b54a:	e739      	b.n	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b54c:	f113 0b01 	adds.w	fp, r3, #1
 802b550:	f53f af36 	bmi.w	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b554:	45dc      	cmp	ip, fp
 802b556:	f6ff af33 	blt.w	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b55a:	f110 0b01 	adds.w	fp, r0, #1
 802b55e:	f53f af2f 	bmi.w	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b562:	45de      	cmp	lr, fp
 802b564:	f6ff af2c 	blt.w	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b568:	9a08      	ldr	r2, [sp, #32]
 802b56a:	9302      	str	r3, [sp, #8]
 802b56c:	fa0f f38e 	sxth.w	r3, lr
 802b570:	9301      	str	r3, [sp, #4]
 802b572:	fa0f f38c 	sxth.w	r3, ip
 802b576:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b57a:	9105      	str	r1, [sp, #20]
 802b57c:	9300      	str	r3, [sp, #0]
 802b57e:	463a      	mov	r2, r7
 802b580:	4653      	mov	r3, sl
 802b582:	4641      	mov	r1, r8
 802b584:	9811      	ldr	r0, [sp, #68]	; 0x44
 802b586:	f7ff fd57 	bl	802b038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b58a:	e719      	b.n	802b3c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b58c:	9906      	ldr	r1, [sp, #24]
 802b58e:	1422      	asrs	r2, r4, #16
 802b590:	1433      	asrs	r3, r6, #16
 802b592:	fb01 2303 	mla	r3, r1, r3, r2
 802b596:	085a      	lsrs	r2, r3, #1
 802b598:	07d9      	lsls	r1, r3, #31
 802b59a:	5cba      	ldrb	r2, [r7, r2]
 802b59c:	bf54      	ite	pl
 802b59e:	f002 020f 	andpl.w	r2, r2, #15
 802b5a2:	1112      	asrmi	r2, r2, #4
 802b5a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b5a8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b5ac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b5b0:	b2d2      	uxtb	r2, r2
 802b5b2:	2800      	cmp	r0, #0
 802b5b4:	d062      	beq.n	802b67c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802b5b6:	f103 0a01 	add.w	sl, r3, #1
 802b5ba:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b5be:	f01a 0f01 	tst.w	sl, #1
 802b5c2:	5c79      	ldrb	r1, [r7, r1]
 802b5c4:	bf0c      	ite	eq
 802b5c6:	f001 010f 	andeq.w	r1, r1, #15
 802b5ca:	1109      	asrne	r1, r1, #4
 802b5cc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b5d0:	b2c9      	uxtb	r1, r1
 802b5d2:	910f      	str	r1, [sp, #60]	; 0x3c
 802b5d4:	f1bc 0f00 	cmp.w	ip, #0
 802b5d8:	d019      	beq.n	802b60e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b5da:	9908      	ldr	r1, [sp, #32]
 802b5dc:	440b      	add	r3, r1
 802b5de:	0859      	lsrs	r1, r3, #1
 802b5e0:	f013 0f01 	tst.w	r3, #1
 802b5e4:	5c79      	ldrb	r1, [r7, r1]
 802b5e6:	bf0c      	ite	eq
 802b5e8:	f001 010f 	andeq.w	r1, r1, #15
 802b5ec:	1109      	asrne	r1, r1, #4
 802b5ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b5f2:	b2c9      	uxtb	r1, r1
 802b5f4:	3301      	adds	r3, #1
 802b5f6:	910b      	str	r1, [sp, #44]	; 0x2c
 802b5f8:	0859      	lsrs	r1, r3, #1
 802b5fa:	07db      	lsls	r3, r3, #31
 802b5fc:	5c79      	ldrb	r1, [r7, r1]
 802b5fe:	bf54      	ite	pl
 802b600:	f001 010f 	andpl.w	r1, r1, #15
 802b604:	1109      	asrmi	r1, r1, #4
 802b606:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b60a:	b2c9      	uxtb	r1, r1
 802b60c:	9110      	str	r1, [sp, #64]	; 0x40
 802b60e:	b280      	uxth	r0, r0
 802b610:	fa1f fc8c 	uxth.w	ip, ip
 802b614:	fb00 f30c 	mul.w	r3, r0, ip
 802b618:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b61c:	0100      	lsls	r0, r0, #4
 802b61e:	fa1f fc8c 	uxth.w	ip, ip
 802b622:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802b626:	eba1 010c 	sub.w	r1, r1, ip
 802b62a:	fa1f fa81 	uxth.w	sl, r1
 802b62e:	1ac0      	subs	r0, r0, r3
 802b630:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b632:	b280      	uxth	r0, r0
 802b634:	4348      	muls	r0, r1
 802b636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b638:	fb02 020a 	mla	r2, r2, sl, r0
 802b63c:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b642:	fb03 c302 	mla	r3, r3, r2, ip
 802b646:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b64a:	2bff      	cmp	r3, #255	; 0xff
 802b64c:	d12c      	bne.n	802b6a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802b64e:	4b14      	ldr	r3, [pc, #80]	; (802b6a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b650:	681a      	ldr	r2, [r3, #0]
 802b652:	4b14      	ldr	r3, [pc, #80]	; (802b6a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b654:	0951      	lsrs	r1, r2, #5
 802b656:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b65a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b65e:	430b      	orrs	r3, r1
 802b660:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b664:	4313      	orrs	r3, r2
 802b666:	f8ae 3000 	strh.w	r3, [lr]
 802b66a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b66c:	441c      	add	r4, r3
 802b66e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b670:	f10e 0e02 	add.w	lr, lr, #2
 802b674:	441e      	add	r6, r3
 802b676:	f108 38ff 	add.w	r8, r8, #4294967295
 802b67a:	e6ce      	b.n	802b41a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802b67c:	f1bc 0f00 	cmp.w	ip, #0
 802b680:	d0c5      	beq.n	802b60e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b682:	9908      	ldr	r1, [sp, #32]
 802b684:	440b      	add	r3, r1
 802b686:	0859      	lsrs	r1, r3, #1
 802b688:	07db      	lsls	r3, r3, #31
 802b68a:	5c79      	ldrb	r1, [r7, r1]
 802b68c:	bf54      	ite	pl
 802b68e:	f001 010f 	andpl.w	r1, r1, #15
 802b692:	1109      	asrmi	r1, r1, #4
 802b694:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b698:	b2c9      	uxtb	r1, r1
 802b69a:	910b      	str	r1, [sp, #44]	; 0x2c
 802b69c:	e7b7      	b.n	802b60e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b69e:	bf00      	nop
 802b6a0:	200097b0 	.word	0x200097b0
 802b6a4:	fffff800 	.word	0xfffff800
 802b6a8:	2b00      	cmp	r3, #0
 802b6aa:	d0de      	beq.n	802b66a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b6ac:	4a22      	ldr	r2, [pc, #136]	; (802b738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802b6ae:	f8be c000 	ldrh.w	ip, [lr]
 802b6b2:	6810      	ldr	r0, [r2, #0]
 802b6b4:	fa1f fa83 	uxth.w	sl, r3
 802b6b8:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b6bc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b6c0:	43db      	mvns	r3, r3
 802b6c2:	b2db      	uxtb	r3, r3
 802b6c4:	fb12 f20a 	smulbb	r2, r2, sl
 802b6c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b6cc:	fb01 2103 	mla	r1, r1, r3, r2
 802b6d0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b6d4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b6d8:	b2c0      	uxtb	r0, r0
 802b6da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b6de:	fa5f fc8c 	uxtb.w	ip, ip
 802b6e2:	fb10 f00a 	smulbb	r0, r0, sl
 802b6e6:	fb0c 0003 	mla	r0, ip, r3, r0
 802b6ea:	b289      	uxth	r1, r1
 802b6ec:	fb1b fb0a 	smulbb	fp, fp, sl
 802b6f0:	b280      	uxth	r0, r0
 802b6f2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b6f6:	fb02 b203 	mla	r2, r2, r3, fp
 802b6fa:	1c4b      	adds	r3, r1, #1
 802b6fc:	f100 0b01 	add.w	fp, r0, #1
 802b700:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b704:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b708:	b292      	uxth	r2, r2
 802b70a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802b70e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802b712:	ea4b 0101 	orr.w	r1, fp, r1
 802b716:	f102 0b01 	add.w	fp, r2, #1
 802b71a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b71e:	0952      	lsrs	r2, r2, #5
 802b720:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b724:	4311      	orrs	r1, r2
 802b726:	f8ae 1000 	strh.w	r1, [lr]
 802b72a:	e79e      	b.n	802b66a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b72c:	b013      	add	sp, #76	; 0x4c
 802b72e:	ecbd 8b08 	vpop	{d8-d11}
 802b732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b736:	bf00      	nop
 802b738:	200097b0 	.word	0x200097b0

0802b73c <CRC_Lock>:
 802b73c:	b530      	push	{r4, r5, lr}
 802b73e:	4a20      	ldr	r2, [pc, #128]	; (802b7c0 <CRC_Lock+0x84>)
 802b740:	6813      	ldr	r3, [r2, #0]
 802b742:	f023 0301 	bic.w	r3, r3, #1
 802b746:	6013      	str	r3, [r2, #0]
 802b748:	4b1e      	ldr	r3, [pc, #120]	; (802b7c4 <CRC_Lock+0x88>)
 802b74a:	681a      	ldr	r2, [r3, #0]
 802b74c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802b750:	4022      	ands	r2, r4
 802b752:	f24c 2540 	movw	r5, #49728	; 0xc240
 802b756:	42aa      	cmp	r2, r5
 802b758:	d005      	beq.n	802b766 <CRC_Lock+0x2a>
 802b75a:	681b      	ldr	r3, [r3, #0]
 802b75c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802b760:	4023      	ands	r3, r4
 802b762:	4293      	cmp	r3, r2
 802b764:	d124      	bne.n	802b7b0 <CRC_Lock+0x74>
 802b766:	4b18      	ldr	r3, [pc, #96]	; (802b7c8 <CRC_Lock+0x8c>)
 802b768:	681b      	ldr	r3, [r3, #0]
 802b76a:	bb0b      	cbnz	r3, 802b7b0 <CRC_Lock+0x74>
 802b76c:	4b17      	ldr	r3, [pc, #92]	; (802b7cc <CRC_Lock+0x90>)
 802b76e:	681a      	ldr	r2, [r3, #0]
 802b770:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b774:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802b778:	d00d      	beq.n	802b796 <CRC_Lock+0x5a>
 802b77a:	681a      	ldr	r2, [r3, #0]
 802b77c:	f240 4483 	movw	r4, #1155	; 0x483
 802b780:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b784:	42a2      	cmp	r2, r4
 802b786:	d006      	beq.n	802b796 <CRC_Lock+0x5a>
 802b788:	681b      	ldr	r3, [r3, #0]
 802b78a:	f240 4285 	movw	r2, #1157	; 0x485
 802b78e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b792:	4293      	cmp	r3, r2
 802b794:	d10c      	bne.n	802b7b0 <CRC_Lock+0x74>
 802b796:	4b0e      	ldr	r3, [pc, #56]	; (802b7d0 <CRC_Lock+0x94>)
 802b798:	2201      	movs	r2, #1
 802b79a:	601a      	str	r2, [r3, #0]
 802b79c:	681a      	ldr	r2, [r3, #0]
 802b79e:	2a00      	cmp	r2, #0
 802b7a0:	d1fc      	bne.n	802b79c <CRC_Lock+0x60>
 802b7a2:	4b0c      	ldr	r3, [pc, #48]	; (802b7d4 <CRC_Lock+0x98>)
 802b7a4:	6018      	str	r0, [r3, #0]
 802b7a6:	6818      	ldr	r0, [r3, #0]
 802b7a8:	1a43      	subs	r3, r0, r1
 802b7aa:	4258      	negs	r0, r3
 802b7ac:	4158      	adcs	r0, r3
 802b7ae:	bd30      	pop	{r4, r5, pc}
 802b7b0:	4b09      	ldr	r3, [pc, #36]	; (802b7d8 <CRC_Lock+0x9c>)
 802b7b2:	2201      	movs	r2, #1
 802b7b4:	601a      	str	r2, [r3, #0]
 802b7b6:	681a      	ldr	r2, [r3, #0]
 802b7b8:	2a00      	cmp	r2, #0
 802b7ba:	d1fc      	bne.n	802b7b6 <CRC_Lock+0x7a>
 802b7bc:	4b07      	ldr	r3, [pc, #28]	; (802b7dc <CRC_Lock+0xa0>)
 802b7be:	e7f1      	b.n	802b7a4 <CRC_Lock+0x68>
 802b7c0:	e0002000 	.word	0xe0002000
 802b7c4:	e000ed00 	.word	0xe000ed00
 802b7c8:	e0042000 	.word	0xe0042000
 802b7cc:	5c001000 	.word	0x5c001000
 802b7d0:	58024c08 	.word	0x58024c08
 802b7d4:	58024c00 	.word	0x58024c00
 802b7d8:	40023008 	.word	0x40023008
 802b7dc:	40023000 	.word	0x40023000

0802b7e0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b7e0:	6101      	str	r1, [r0, #16]
 802b7e2:	4770      	bx	lr

0802b7e4 <_ZN8touchgfx8Gestures4tickEv>:
 802b7e4:	7b83      	ldrb	r3, [r0, #14]
 802b7e6:	b14b      	cbz	r3, 802b7fc <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b7e8:	8903      	ldrh	r3, [r0, #8]
 802b7ea:	3301      	adds	r3, #1
 802b7ec:	b29b      	uxth	r3, r3
 802b7ee:	2b07      	cmp	r3, #7
 802b7f0:	8103      	strh	r3, [r0, #8]
 802b7f2:	bf81      	itttt	hi
 802b7f4:	2300      	movhi	r3, #0
 802b7f6:	8143      	strhhi	r3, [r0, #10]
 802b7f8:	8183      	strhhi	r3, [r0, #12]
 802b7fa:	7383      	strbhi	r3, [r0, #14]
 802b7fc:	4770      	bx	lr
	...

0802b800 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b804:	4604      	mov	r4, r0
 802b806:	8880      	ldrh	r0, [r0, #4]
 802b808:	f8ad 0006 	strh.w	r0, [sp, #6]
 802b80c:	4698      	mov	r8, r3
 802b80e:	eba8 0000 	sub.w	r0, r8, r0
 802b812:	4b1c      	ldr	r3, [pc, #112]	; (802b884 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802b814:	9300      	str	r3, [sp, #0]
 802b816:	b280      	uxth	r0, r0
 802b818:	2300      	movs	r3, #0
 802b81a:	f88d 3004 	strb.w	r3, [sp, #4]
 802b81e:	b203      	sxth	r3, r0
 802b820:	2b00      	cmp	r3, #0
 802b822:	bfb8      	it	lt
 802b824:	4240      	neglt	r0, r0
 802b826:	4617      	mov	r7, r2
 802b828:	8aa2      	ldrh	r2, [r4, #20]
 802b82a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802b82e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b832:	bfb8      	it	lt
 802b834:	b203      	sxthlt	r3, r0
 802b836:	460e      	mov	r6, r1
 802b838:	4293      	cmp	r3, r2
 802b83a:	88e1      	ldrh	r1, [r4, #6]
 802b83c:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b840:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b844:	dc08      	bgt.n	802b858 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802b846:	1a69      	subs	r1, r5, r1
 802b848:	b289      	uxth	r1, r1
 802b84a:	b20b      	sxth	r3, r1
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	bfbc      	itt	lt
 802b850:	4249      	neglt	r1, r1
 802b852:	b20b      	sxthlt	r3, r1
 802b854:	429a      	cmp	r2, r3
 802b856:	da13      	bge.n	802b880 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802b858:	6920      	ldr	r0, [r4, #16]
 802b85a:	6803      	ldr	r3, [r0, #0]
 802b85c:	4669      	mov	r1, sp
 802b85e:	685b      	ldr	r3, [r3, #4]
 802b860:	4798      	blx	r3
 802b862:	eba8 0606 	sub.w	r6, r8, r6
 802b866:	2300      	movs	r3, #0
 802b868:	1bef      	subs	r7, r5, r7
 802b86a:	2001      	movs	r0, #1
 802b86c:	8123      	strh	r3, [r4, #8]
 802b86e:	8166      	strh	r6, [r4, #10]
 802b870:	81a7      	strh	r7, [r4, #12]
 802b872:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b876:	80e5      	strh	r5, [r4, #6]
 802b878:	73a0      	strb	r0, [r4, #14]
 802b87a:	b004      	add	sp, #16
 802b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b880:	2000      	movs	r0, #0
 802b882:	e7fa      	b.n	802b87a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802b884:	080320a8 	.word	0x080320a8

0802b888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b888:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b88a:	461e      	mov	r6, r3
 802b88c:	1e4b      	subs	r3, r1, #1
 802b88e:	2b01      	cmp	r3, #1
 802b890:	b085      	sub	sp, #20
 802b892:	4604      	mov	r4, r0
 802b894:	460d      	mov	r5, r1
 802b896:	4617      	mov	r7, r2
 802b898:	d84b      	bhi.n	802b932 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b89a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b89e:	1cd3      	adds	r3, r2, #3
 802b8a0:	b29b      	uxth	r3, r3
 802b8a2:	2b06      	cmp	r3, #6
 802b8a4:	d916      	bls.n	802b8d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b8a6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802b948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b8aa:	f8cd c004 	str.w	ip, [sp, #4]
 802b8ae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b8b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b8b6:	6900      	ldr	r0, [r0, #16]
 802b8b8:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b8bc:	f04f 0c00 	mov.w	ip, #0
 802b8c0:	f88d c008 	strb.w	ip, [sp, #8]
 802b8c4:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b8c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b8cc:	6803      	ldr	r3, [r0, #0]
 802b8ce:	a901      	add	r1, sp, #4
 802b8d0:	689b      	ldr	r3, [r3, #8]
 802b8d2:	4798      	blx	r3
 802b8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b8d8:	1cd3      	adds	r3, r2, #3
 802b8da:	b29b      	uxth	r3, r3
 802b8dc:	2b06      	cmp	r3, #6
 802b8de:	d916      	bls.n	802b90e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b8e0:	f8df c064 	ldr.w	ip, [pc, #100]	; 802b948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b8e4:	f8cd c004 	str.w	ip, [sp, #4]
 802b8e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b8ec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b8f0:	6920      	ldr	r0, [r4, #16]
 802b8f2:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b8f6:	f04f 0c01 	mov.w	ip, #1
 802b8fa:	f88d c008 	strb.w	ip, [sp, #8]
 802b8fe:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b902:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b906:	6803      	ldr	r3, [r0, #0]
 802b908:	a901      	add	r1, sp, #4
 802b90a:	689b      	ldr	r3, [r3, #8]
 802b90c:	4798      	blx	r3
 802b90e:	4b0d      	ldr	r3, [pc, #52]	; (802b944 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b910:	9301      	str	r3, [sp, #4]
 802b912:	6920      	ldr	r0, [r4, #16]
 802b914:	f88d 5008 	strb.w	r5, [sp, #8]
 802b918:	2300      	movs	r3, #0
 802b91a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b91e:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b922:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b926:	6803      	ldr	r3, [r0, #0]
 802b928:	a901      	add	r1, sp, #4
 802b92a:	681b      	ldr	r3, [r3, #0]
 802b92c:	4798      	blx	r3
 802b92e:	b005      	add	sp, #20
 802b930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b932:	2900      	cmp	r1, #0
 802b934:	d1eb      	bne.n	802b90e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b936:	80a2      	strh	r2, [r4, #4]
 802b938:	80c6      	strh	r6, [r0, #6]
 802b93a:	60a1      	str	r1, [r4, #8]
 802b93c:	81a1      	strh	r1, [r4, #12]
 802b93e:	73a1      	strb	r1, [r4, #14]
 802b940:	e7e5      	b.n	802b90e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b942:	bf00      	nop
 802b944:	08032094 	.word	0x08032094
 802b948:	080320bc 	.word	0x080320bc

0802b94c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802b94c:	10c9      	asrs	r1, r1, #3
 802b94e:	2900      	cmp	r1, #0
 802b950:	bfb8      	it	lt
 802b952:	4249      	neglt	r1, r1
 802b954:	2801      	cmp	r0, #1
 802b956:	d108      	bne.n	802b96a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802b958:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b95c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802b960:	4601      	mov	r1, r0
 802b962:	dd02      	ble.n	802b96a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802b964:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802b968:	4770      	bx	lr
 802b96a:	29ff      	cmp	r1, #255	; 0xff
 802b96c:	bfa8      	it	ge
 802b96e:	21ff      	movge	r1, #255	; 0xff
 802b970:	4608      	mov	r0, r1
 802b972:	4770      	bx	lr

0802b974 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802b974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b978:	688c      	ldr	r4, [r1, #8]
 802b97a:	2c00      	cmp	r4, #0
 802b97c:	b087      	sub	sp, #28
 802b97e:	4607      	mov	r7, r0
 802b980:	db2b      	blt.n	802b9da <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802b982:	6803      	ldr	r3, [r0, #0]
 802b984:	691a      	ldr	r2, [r3, #16]
 802b986:	42a2      	cmp	r2, r4
 802b988:	dd27      	ble.n	802b9da <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802b98a:	685a      	ldr	r2, [r3, #4]
 802b98c:	695e      	ldr	r6, [r3, #20]
 802b98e:	68cd      	ldr	r5, [r1, #12]
 802b990:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802b994:	f893 a008 	ldrb.w	sl, [r3, #8]
 802b998:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802b99c:	fb06 2604 	mla	r6, r6, r4, r2
 802b9a0:	698a      	ldr	r2, [r1, #24]
 802b9a2:	9205      	str	r2, [sp, #20]
 802b9a4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802b9a8:	9b05      	ldr	r3, [sp, #20]
 802b9aa:	6839      	ldr	r1, [r7, #0]
 802b9ac:	eb03 0c02 	add.w	ip, r3, r2
 802b9b0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802b9b4:	68c9      	ldr	r1, [r1, #12]
 802b9b6:	1898      	adds	r0, r3, r2
 802b9b8:	4288      	cmp	r0, r1
 802b9ba:	db02      	blt.n	802b9c2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802b9bc:	1a8b      	subs	r3, r1, r2
 802b9be:	2b00      	cmp	r3, #0
 802b9c0:	dd09      	ble.n	802b9d6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802b9c2:	6878      	ldr	r0, [r7, #4]
 802b9c4:	6801      	ldr	r1, [r0, #0]
 802b9c6:	9400      	str	r4, [sp, #0]
 802b9c8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802b9cc:	4653      	mov	r3, sl
 802b9ce:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802b9d2:	4631      	mov	r1, r6
 802b9d4:	47d8      	blx	fp
 802b9d6:	3d01      	subs	r5, #1
 802b9d8:	d1e4      	bne.n	802b9a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802b9da:	b007      	add	sp, #28
 802b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b9e0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b9e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802b9e4:	b90b      	cbnz	r3, 802b9ea <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802b9e6:	f001 b999 	b.w	802cd1c <_ZN8touchgfx7Outline6lineToEii>
 802b9ea:	4770      	bx	lr

0802b9ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b9f0:	4b90      	ldr	r3, [pc, #576]	; (802bc34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802b9f2:	4604      	mov	r4, r0
 802b9f4:	2600      	movs	r6, #0
 802b9f6:	f100 0518 	add.w	r5, r0, #24
 802b9fa:	e9c0 3100 	strd	r3, r1, [r0]
 802b9fe:	b086      	sub	sp, #24
 802ba00:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802ba04:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802ba08:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802ba0c:	4628      	mov	r0, r5
 802ba0e:	4690      	mov	r8, r2
 802ba10:	f001 fc4e 	bl	802d2b0 <_ZN8touchgfx15RenderingBufferC1Ev>
 802ba14:	4638      	mov	r0, r7
 802ba16:	f000 fb45 	bl	802c0a4 <_ZN8touchgfx7OutlineC1Ev>
 802ba1a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802ba1e:	f001 fbef 	bl	802d200 <_ZN8touchgfx8ScanlineC1Ev>
 802ba22:	2301      	movs	r3, #1
 802ba24:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802ba28:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802ba2c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 802ba30:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802ba34:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802ba38:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 802ba3c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802ba40:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 802ba44:	f001 fb8c 	bl	802d160 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802ba48:	b928      	cbnz	r0, 802ba56 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802ba4a:	4b7b      	ldr	r3, [pc, #492]	; (802bc38 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802ba4c:	4a7b      	ldr	r2, [pc, #492]	; (802bc3c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802ba4e:	212d      	movs	r1, #45	; 0x2d
 802ba50:	487b      	ldr	r0, [pc, #492]	; (802bc40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802ba52:	f002 fa65 	bl	802df20 <__assert_func>
 802ba56:	f9b8 2000 	ldrsh.w	r2, [r8]
 802ba5a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802ba5e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802ba62:	9602      	str	r6, [sp, #8]
 802ba64:	4410      	add	r0, r2
 802ba66:	b280      	uxth	r0, r0
 802ba68:	fa0f fa80 	sxth.w	sl, r0
 802ba6c:	f1ba 0f00 	cmp.w	sl, #0
 802ba70:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802ba74:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802ba78:	dd70      	ble.n	802bb5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba7a:	4591      	cmp	r9, r2
 802ba7c:	dd6e      	ble.n	802bb5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba7e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802ba82:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802ba86:	440b      	add	r3, r1
 802ba88:	b29b      	uxth	r3, r3
 802ba8a:	b21e      	sxth	r6, r3
 802ba8c:	2e00      	cmp	r6, #0
 802ba8e:	dd65      	ble.n	802bb5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba90:	458e      	cmp	lr, r1
 802ba92:	dd63      	ble.n	802bb5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba94:	45d1      	cmp	r9, sl
 802ba96:	bfb8      	it	lt
 802ba98:	fa1f f089 	uxthlt.w	r0, r9
 802ba9c:	45b6      	cmp	lr, r6
 802ba9e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802baa2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802baa6:	bfb8      	it	lt
 802baa8:	fa1f f38e 	uxthlt.w	r3, lr
 802baac:	1a80      	subs	r0, r0, r2
 802baae:	1a5b      	subs	r3, r3, r1
 802bab0:	f8ad 000c 	strh.w	r0, [sp, #12]
 802bab4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bab8:	f8ad 2008 	strh.w	r2, [sp, #8]
 802babc:	f8ad 100a 	strh.w	r1, [sp, #10]
 802bac0:	f10d 0808 	add.w	r8, sp, #8
 802bac4:	e898 0003 	ldmia.w	r8, {r0, r1}
 802bac8:	ae04      	add	r6, sp, #16
 802baca:	e886 0003 	stmia.w	r6, {r0, r1}
 802bace:	f8dc 3000 	ldr.w	r3, [ip]
 802bad2:	4660      	mov	r0, ip
 802bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bad6:	4631      	mov	r1, r6
 802bad8:	4798      	blx	r3
 802bada:	6861      	ldr	r1, [r4, #4]
 802badc:	4640      	mov	r0, r8
 802bade:	3104      	adds	r1, #4
 802bae0:	f7f0 f98a 	bl	801bdf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bae4:	4630      	mov	r0, r6
 802bae6:	f7f0 f943 	bl	801bd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802baea:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802baee:	f001 fac7 	bl	802d080 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802baf2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802baf6:	4638      	mov	r0, r7
 802baf8:	f000 fab0 	bl	802c05c <_ZN8touchgfx7Outline5resetEv>
 802bafc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802bb00:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802bb04:	015b      	lsls	r3, r3, #5
 802bb06:	60e3      	str	r3, [r4, #12]
 802bb08:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802bb0c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802bb10:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802bb14:	015b      	lsls	r3, r3, #5
 802bb16:	6123      	str	r3, [r4, #16]
 802bb18:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802bb1c:	015b      	lsls	r3, r3, #5
 802bb1e:	6163      	str	r3, [r4, #20]
 802bb20:	4b48      	ldr	r3, [pc, #288]	; (802bc44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802bb22:	0152      	lsls	r2, r2, #5
 802bb24:	6818      	ldr	r0, [r3, #0]
 802bb26:	60a2      	str	r2, [r4, #8]
 802bb28:	6803      	ldr	r3, [r0, #0]
 802bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bb2c:	4798      	blx	r3
 802bb2e:	4606      	mov	r6, r0
 802bb30:	f7e4 fa58 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 802bb34:	6803      	ldr	r3, [r0, #0]
 802bb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bb38:	4798      	blx	r3
 802bb3a:	4607      	mov	r7, r0
 802bb3c:	f7e4 fa52 	bl	800ffe4 <_ZN8touchgfx3HAL3lcdEv>
 802bb40:	6803      	ldr	r3, [r0, #0]
 802bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bb44:	4798      	blx	r3
 802bb46:	280d      	cmp	r0, #13
 802bb48:	d855      	bhi.n	802bbf6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20a>
 802bb4a:	e8df f000 	tbb	[pc, r0]
 802bb4e:	564c      	.short	0x564c
 802bb50:	2b6f0a67 	.word	0x2b6f0a67
 802bb54:	6060603b 	.word	0x6060603b
 802bb58:	6f6f6060 	.word	0x6f6f6060
 802bb5c:	2300      	movs	r3, #0
 802bb5e:	9303      	str	r3, [sp, #12]
 802bb60:	e7ae      	b.n	802bac0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 802bb62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb6a:	2108      	movs	r1, #8
 802bb6c:	fb92 f1f1 	sdiv	r1, r2, r1
 802bb70:	fb07 1303 	mla	r3, r7, r3, r1
 802bb74:	441e      	add	r6, r3
 802bb76:	4253      	negs	r3, r2
 802bb78:	f003 0307 	and.w	r3, r3, #7
 802bb7c:	f002 0207 	and.w	r2, r2, #7
 802bb80:	bf58      	it	pl
 802bb82:	425a      	negpl	r2, r3
 802bb84:	b2d2      	uxtb	r2, r2
 802bb86:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802bb8a:	6721      	str	r1, [r4, #112]	; 0x70
 802bb8c:	e9cd 1700 	strd	r1, r7, [sp]
 802bb90:	4628      	mov	r0, r5
 802bb92:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802bb96:	4631      	mov	r1, r6
 802bb98:	f001 fb96 	bl	802d2c8 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802bb9c:	4620      	mov	r0, r4
 802bb9e:	b006      	add	sp, #24
 802bba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bba4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bba8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bbac:	2104      	movs	r1, #4
 802bbae:	fb92 f1f1 	sdiv	r1, r2, r1
 802bbb2:	fb07 1303 	mla	r3, r7, r3, r1
 802bbb6:	441e      	add	r6, r3
 802bbb8:	4253      	negs	r3, r2
 802bbba:	f003 0303 	and.w	r3, r3, #3
 802bbbe:	f002 0203 	and.w	r2, r2, #3
 802bbc2:	e7dd      	b.n	802bb80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802bbc4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bbc8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bbcc:	2a00      	cmp	r2, #0
 802bbce:	f04f 0102 	mov.w	r1, #2
 802bbd2:	fb92 f1f1 	sdiv	r1, r2, r1
 802bbd6:	f002 0201 	and.w	r2, r2, #1
 802bbda:	fb07 1303 	mla	r3, r7, r3, r1
 802bbde:	441e      	add	r6, r3
 802bbe0:	bfb8      	it	lt
 802bbe2:	4252      	neglt	r2, r2
 802bbe4:	e7ce      	b.n	802bb84 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 802bbe6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bbea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bbee:	437b      	muls	r3, r7
 802bbf0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802bbf4:	441e      	add	r6, r3
 802bbf6:	2200      	movs	r2, #0
 802bbf8:	e7c5      	b.n	802bb86 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802bbfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bbfe:	fb07 f203 	mul.w	r2, r7, r3
 802bc02:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802bc06:	2103      	movs	r1, #3
 802bc08:	fb13 2301 	smlabb	r3, r3, r1, r2
 802bc0c:	e7f2      	b.n	802bbf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bc0e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bc12:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bc16:	fb07 2303 	mla	r3, r7, r3, r2
 802bc1a:	e7eb      	b.n	802bbf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bc1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bc20:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bc24:	437b      	muls	r3, r7
 802bc26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802bc2a:	e7e3      	b.n	802bbf4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bc2c:	4b06      	ldr	r3, [pc, #24]	; (802bc48 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802bc2e:	4a03      	ldr	r2, [pc, #12]	; (802bc3c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802bc30:	216c      	movs	r1, #108	; 0x6c
 802bc32:	e70d      	b.n	802ba50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 802bc34:	08033514 	.word	0x08033514
 802bc38:	0803345d 	.word	0x0803345d
 802bc3c:	0803351c 	.word	0x0803351c
 802bc40:	080334b9 	.word	0x080334b9
 802bc44:	200097a8 	.word	0x200097a8
 802bc48:	080334ed 	.word	0x080334ed

0802bc4c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802bc4c:	6812      	ldr	r2, [r2, #0]
 802bc4e:	2a00      	cmp	r2, #0
 802bc50:	db0b      	blt.n	802bc6a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802bc52:	9800      	ldr	r0, [sp, #0]
 802bc54:	6800      	ldr	r0, [r0, #0]
 802bc56:	4290      	cmp	r0, r2
 802bc58:	bfd4      	ite	le
 802bc5a:	2002      	movle	r0, #2
 802bc5c:	2000      	movgt	r0, #0
 802bc5e:	680a      	ldr	r2, [r1, #0]
 802bc60:	2a00      	cmp	r2, #0
 802bc62:	da04      	bge.n	802bc6e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802bc64:	f040 0004 	orr.w	r0, r0, #4
 802bc68:	4770      	bx	lr
 802bc6a:	2001      	movs	r0, #1
 802bc6c:	e7f7      	b.n	802bc5e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802bc6e:	681b      	ldr	r3, [r3, #0]
 802bc70:	4293      	cmp	r3, r2
 802bc72:	bfd8      	it	le
 802bc74:	f040 0008 	orrle.w	r0, r0, #8
 802bc78:	4770      	bx	lr
	...

0802bc7c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802bc7c:	b510      	push	{r4, lr}
 802bc7e:	4b07      	ldr	r3, [pc, #28]	; (802bc9c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802bc80:	781b      	ldrb	r3, [r3, #0]
 802bc82:	2b01      	cmp	r3, #1
 802bc84:	d108      	bne.n	802bc98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802bc86:	6843      	ldr	r3, [r0, #4]
 802bc88:	6814      	ldr	r4, [r2, #0]
 802bc8a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802bc8e:	680b      	ldr	r3, [r1, #0]
 802bc90:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802bc94:	6013      	str	r3, [r2, #0]
 802bc96:	600c      	str	r4, [r1, #0]
 802bc98:	bd10      	pop	{r4, pc}
 802bc9a:	bf00      	nop
 802bc9c:	200097a0 	.word	0x200097a0

0802bca0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802bca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bca2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bca6:	b085      	sub	sp, #20
 802bca8:	4604      	mov	r4, r0
 802bcaa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bcae:	b33b      	cbz	r3, 802bd00 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802bcb0:	aa02      	add	r2, sp, #8
 802bcb2:	a903      	add	r1, sp, #12
 802bcb4:	f7ff ffe2 	bl	802bc7c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bcb8:	68a3      	ldr	r3, [r4, #8]
 802bcba:	9e03      	ldr	r6, [sp, #12]
 802bcbc:	9f02      	ldr	r7, [sp, #8]
 802bcbe:	1af6      	subs	r6, r6, r3
 802bcc0:	68e3      	ldr	r3, [r4, #12]
 802bcc2:	9603      	str	r6, [sp, #12]
 802bcc4:	1aff      	subs	r7, r7, r3
 802bcc6:	f104 0314 	add.w	r3, r4, #20
 802bcca:	9300      	str	r3, [sp, #0]
 802bccc:	aa02      	add	r2, sp, #8
 802bcce:	f104 0310 	add.w	r3, r4, #16
 802bcd2:	a903      	add	r1, sp, #12
 802bcd4:	4620      	mov	r0, r4
 802bcd6:	9702      	str	r7, [sp, #8]
 802bcd8:	f7ff ffb8 	bl	802bc4c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bcdc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802bce0:	4605      	mov	r5, r0
 802bce2:	b97b      	cbnz	r3, 802bd04 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802bce4:	463a      	mov	r2, r7
 802bce6:	4631      	mov	r1, r6
 802bce8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bcec:	f7ff fe78 	bl	802b9e0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bcf0:	9b03      	ldr	r3, [sp, #12]
 802bcf2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802bcf6:	9b02      	ldr	r3, [sp, #8]
 802bcf8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802bcfc:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802bd00:	b005      	add	sp, #20
 802bd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bd04:	b110      	cbz	r0, 802bd0c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802bd06:	ea13 0200 	ands.w	r2, r3, r0
 802bd0a:	d11c      	bne.n	802bd46 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802bd0c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802bd10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802bd14:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802bd18:	b188      	cbz	r0, 802bd3e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802bd1a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802bd1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802bd22:	b913      	cbnz	r3, 802bd2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802bd24:	4630      	mov	r0, r6
 802bd26:	f001 f829 	bl	802cd7c <_ZN8touchgfx7Outline6moveToEii>
 802bd2a:	2300      	movs	r3, #0
 802bd2c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd30:	2301      	movs	r3, #1
 802bd32:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802bd36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802bd3a:	4630      	mov	r0, r6
 802bd3c:	e7d6      	b.n	802bcec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802bd3e:	4630      	mov	r0, r6
 802bd40:	f7ff fe4e 	bl	802b9e0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bd44:	e7f7      	b.n	802bd36 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802bd46:	4615      	mov	r5, r2
 802bd48:	e7d2      	b.n	802bcf0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802bd4a <_ZN8touchgfx6Canvas5closeEv>:
 802bd4a:	b538      	push	{r3, r4, r5, lr}
 802bd4c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802bd50:	4604      	mov	r4, r0
 802bd52:	b993      	cbnz	r3, 802bd7a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bd54:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802bd58:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802bd5c:	4213      	tst	r3, r2
 802bd5e:	d10c      	bne.n	802bd7a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bd60:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802bd64:	b123      	cbz	r3, 802bd70 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802bd66:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802bd6a:	4628      	mov	r0, r5
 802bd6c:	f7ff fe38 	bl	802b9e0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bd70:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802bd74:	4628      	mov	r0, r5
 802bd76:	f7ff fe33 	bl	802b9e0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bd7a:	2300      	movs	r3, #0
 802bd7c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd80:	bd38      	pop	{r3, r4, r5, pc}

0802bd82 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802bd82:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bd84:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bd88:	b085      	sub	sp, #20
 802bd8a:	4604      	mov	r4, r0
 802bd8c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bd90:	b353      	cbz	r3, 802bde8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802bd92:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802bd96:	b90b      	cbnz	r3, 802bd9c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802bd98:	f7ff ffd7 	bl	802bd4a <_ZN8touchgfx6Canvas5closeEv>
 802bd9c:	aa02      	add	r2, sp, #8
 802bd9e:	a903      	add	r1, sp, #12
 802bda0:	4620      	mov	r0, r4
 802bda2:	f7ff ff6b 	bl	802bc7c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bda6:	68a3      	ldr	r3, [r4, #8]
 802bda8:	9d03      	ldr	r5, [sp, #12]
 802bdaa:	9e02      	ldr	r6, [sp, #8]
 802bdac:	1aed      	subs	r5, r5, r3
 802bdae:	68e3      	ldr	r3, [r4, #12]
 802bdb0:	9503      	str	r5, [sp, #12]
 802bdb2:	1af6      	subs	r6, r6, r3
 802bdb4:	f104 0314 	add.w	r3, r4, #20
 802bdb8:	9300      	str	r3, [sp, #0]
 802bdba:	aa02      	add	r2, sp, #8
 802bdbc:	f104 0310 	add.w	r3, r4, #16
 802bdc0:	a903      	add	r1, sp, #12
 802bdc2:	4620      	mov	r0, r4
 802bdc4:	9602      	str	r6, [sp, #8]
 802bdc6:	f7ff ff41 	bl	802bc4c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bdca:	4607      	mov	r7, r0
 802bdcc:	b170      	cbz	r0, 802bdec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802bdce:	2301      	movs	r3, #1
 802bdd0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bdd4:	9a03      	ldr	r2, [sp, #12]
 802bdd6:	9b02      	ldr	r3, [sp, #8]
 802bdd8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802bddc:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802bde0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802bde4:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802bde8:	b005      	add	sp, #20
 802bdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bdec:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802bdf0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802bdf4:	b92b      	cbnz	r3, 802be02 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802bdf6:	4632      	mov	r2, r6
 802bdf8:	4629      	mov	r1, r5
 802bdfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bdfe:	f000 ffbd 	bl	802cd7c <_ZN8touchgfx7Outline6moveToEii>
 802be02:	2300      	movs	r3, #0
 802be04:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802be08:	2301      	movs	r3, #1
 802be0a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802be0e:	e7e1      	b.n	802bdd4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802be10 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802be14:	b087      	sub	sp, #28
 802be16:	4604      	mov	r4, r0
 802be18:	9105      	str	r1, [sp, #20]
 802be1a:	f001 f8f6 	bl	802d00a <_ZN8touchgfx7Outline8getCellsEv>
 802be1e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802be22:	4605      	mov	r5, r0
 802be24:	f1b9 0f00 	cmp.w	r9, #0
 802be28:	d103      	bne.n	802be32 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802be2a:	2001      	movs	r0, #1
 802be2c:	b007      	add	sp, #28
 802be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be32:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802be36:	2e00      	cmp	r6, #0
 802be38:	d139      	bne.n	802beae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802be3a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802be3e:	4640      	mov	r0, r8
 802be40:	f001 f9c8 	bl	802d1d4 <_ZN8touchgfx8Scanline5resetEv>
 802be44:	f109 33ff 	add.w	r3, r9, #4294967295
 802be48:	f105 0708 	add.w	r7, r5, #8
 802be4c:	9303      	str	r3, [sp, #12]
 802be4e:	f9b5 b000 	ldrsh.w	fp, [r5]
 802be52:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802be56:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802be5a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802be5e:	46da      	mov	sl, fp
 802be60:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802be64:	9b03      	ldr	r3, [sp, #12]
 802be66:	9504      	str	r5, [sp, #16]
 802be68:	3b01      	subs	r3, #1
 802be6a:	9303      	str	r3, [sp, #12]
 802be6c:	3301      	adds	r3, #1
 802be6e:	4416      	add	r6, r2
 802be70:	463d      	mov	r5, r7
 802be72:	d01e      	beq.n	802beb2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802be74:	3708      	adds	r7, #8
 802be76:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802be7a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802be7e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802be82:	4290      	cmp	r0, r2
 802be84:	d11e      	bne.n	802bec4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802be86:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802be8a:	4411      	add	r1, r2
 802be8c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802be90:	e7e8      	b.n	802be64 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802be92:	1c91      	adds	r1, r2, #2
 802be94:	f04f 0301 	mov.w	r3, #1
 802be98:	65e1      	str	r1, [r4, #92]	; 0x5c
 802be9a:	8053      	strh	r3, [r2, #2]
 802be9c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802be9e:	1c91      	adds	r1, r2, #2
 802bea0:	65a1      	str	r1, [r4, #88]	; 0x58
 802bea2:	f8a2 b002 	strh.w	fp, [r2, #2]
 802bea6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802bea8:	3201      	adds	r2, #1
 802beaa:	6562      	str	r2, [r4, #84]	; 0x54
 802beac:	e03a      	b.n	802bf24 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802beae:	2000      	movs	r0, #0
 802beb0:	e7bc      	b.n	802be2c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802beb2:	b951      	cbnz	r1, 802beca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802beb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802beb6:	2b00      	cmp	r3, #0
 802beb8:	d0b7      	beq.n	802be2a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802beba:	4641      	mov	r1, r8
 802bebc:	9805      	ldr	r0, [sp, #20]
 802bebe:	f7ff fd59 	bl	802b974 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802bec2:	e7b2      	b.n	802be2a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802bec4:	2900      	cmp	r1, #0
 802bec6:	d035      	beq.n	802bf34 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802bec8:	9504      	str	r5, [sp, #16]
 802beca:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802bece:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802bed2:	f7ff fd3b 	bl	802b94c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802bed6:	4605      	mov	r5, r0
 802bed8:	b330      	cbz	r0, 802bf28 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802beda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802bedc:	b182      	cbz	r2, 802bf00 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802bede:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802bee0:	4591      	cmp	r9, r2
 802bee2:	d00d      	beq.n	802bf00 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802bee4:	4641      	mov	r1, r8
 802bee6:	9805      	ldr	r0, [sp, #20]
 802bee8:	f7ff fd44 	bl	802b974 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802beec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802bef0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802bef2:	65e2      	str	r2, [r4, #92]	; 0x5c
 802bef4:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802bef8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802befa:	65a2      	str	r2, [r4, #88]	; 0x58
 802befc:	2300      	movs	r3, #0
 802befe:	6563      	str	r3, [r4, #84]	; 0x54
 802bf00:	f1bb 0f00 	cmp.w	fp, #0
 802bf04:	db10      	blt.n	802bf28 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802bf06:	f001 f939 	bl	802d17c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802bf0a:	4583      	cmp	fp, r0
 802bf0c:	da0c      	bge.n	802bf28 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802bf0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802bf10:	f802 500b 	strb.w	r5, [r2, fp]
 802bf14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802bf16:	3201      	adds	r2, #1
 802bf18:	4593      	cmp	fp, r2
 802bf1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802bf1c:	d1b9      	bne.n	802be92 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802bf1e:	8811      	ldrh	r1, [r2, #0]
 802bf20:	3101      	adds	r1, #1
 802bf22:	8011      	strh	r1, [r2, #0]
 802bf24:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802bf28:	9b03      	ldr	r3, [sp, #12]
 802bf2a:	3301      	adds	r3, #1
 802bf2c:	d0c2      	beq.n	802beb4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802bf2e:	9d04      	ldr	r5, [sp, #16]
 802bf30:	f10b 0a01 	add.w	sl, fp, #1
 802bf34:	f9b5 3000 	ldrsh.w	r3, [r5]
 802bf38:	4553      	cmp	r3, sl
 802bf3a:	dd88      	ble.n	802be4e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802bf3c:	01b1      	lsls	r1, r6, #6
 802bf3e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802bf42:	f7ff fd03 	bl	802b94c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802bf46:	4683      	mov	fp, r0
 802bf48:	2800      	cmp	r0, #0
 802bf4a:	d080      	beq.n	802be4e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802bf4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802bf4e:	b183      	cbz	r3, 802bf72 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802bf50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802bf52:	4599      	cmp	r9, r3
 802bf54:	d00d      	beq.n	802bf72 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802bf56:	4641      	mov	r1, r8
 802bf58:	9805      	ldr	r0, [sp, #20]
 802bf5a:	f7ff fd0b 	bl	802b974 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802bf5e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802bf62:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802bf66:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802bf68:	65e3      	str	r3, [r4, #92]	; 0x5c
 802bf6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802bf6c:	65a3      	str	r3, [r4, #88]	; 0x58
 802bf6e:	2300      	movs	r3, #0
 802bf70:	6563      	str	r3, [r4, #84]	; 0x54
 802bf72:	f9b5 3000 	ldrsh.w	r3, [r5]
 802bf76:	f8cd b000 	str.w	fp, [sp]
 802bf7a:	eba3 030a 	sub.w	r3, r3, sl
 802bf7e:	464a      	mov	r2, r9
 802bf80:	4651      	mov	r1, sl
 802bf82:	4640      	mov	r0, r8
 802bf84:	f001 f952 	bl	802d22c <_ZN8touchgfx8Scanline7addSpanEiijj>
 802bf88:	e761      	b.n	802be4e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802bf8a <_ZN8touchgfx6Canvas6renderEh>:
 802bf8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bf8c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bf90:	4604      	mov	r4, r0
 802bf92:	460d      	mov	r5, r1
 802bf94:	b913      	cbnz	r3, 802bf9c <_ZN8touchgfx6Canvas6renderEh+0x12>
 802bf96:	2001      	movs	r0, #1
 802bf98:	b003      	add	sp, #12
 802bf9a:	bd30      	pop	{r4, r5, pc}
 802bf9c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802bfa0:	2b00      	cmp	r3, #0
 802bfa2:	d12f      	bne.n	802c004 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802bfa4:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802bfa8:	2b00      	cmp	r3, #0
 802bfaa:	d0f4      	beq.n	802bf96 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802bfac:	6840      	ldr	r0, [r0, #4]
 802bfae:	6803      	ldr	r3, [r0, #0]
 802bfb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802bfb2:	4798      	blx	r3
 802bfb4:	fb10 f105 	smulbb	r1, r0, r5
 802bfb8:	b288      	uxth	r0, r1
 802bfba:	1c41      	adds	r1, r0, #1
 802bfbc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802bfc0:	120d      	asrs	r5, r1, #8
 802bfc2:	d0e8      	beq.n	802bf96 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802bfc4:	4620      	mov	r0, r4
 802bfc6:	f7ff fec0 	bl	802bd4a <_ZN8touchgfx6Canvas5closeEv>
 802bfca:	6860      	ldr	r0, [r4, #4]
 802bfcc:	6803      	ldr	r3, [r0, #0]
 802bfce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bfd0:	4798      	blx	r3
 802bfd2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802bfd6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802bfda:	80c3      	strh	r3, [r0, #6]
 802bfdc:	8082      	strh	r2, [r0, #4]
 802bfde:	6860      	ldr	r0, [r4, #4]
 802bfe0:	6803      	ldr	r3, [r0, #0]
 802bfe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bfe4:	4798      	blx	r3
 802bfe6:	7205      	strb	r5, [r0, #8]
 802bfe8:	6860      	ldr	r0, [r4, #4]
 802bfea:	6803      	ldr	r3, [r0, #0]
 802bfec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bfee:	4798      	blx	r3
 802bff0:	f104 0318 	add.w	r3, r4, #24
 802bff4:	e9cd 3000 	strd	r3, r0, [sp]
 802bff8:	4669      	mov	r1, sp
 802bffa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bffe:	f7ff ff07 	bl	802be10 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802c002:	e7c9      	b.n	802bf98 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802c004:	2000      	movs	r0, #0
 802c006:	e7c7      	b.n	802bf98 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802c008 <_ZN8touchgfx6CanvasD1Ev>:
 802c008:	b538      	push	{r3, r4, r5, lr}
 802c00a:	4605      	mov	r5, r0
 802c00c:	4b08      	ldr	r3, [pc, #32]	; (802c030 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802c00e:	f845 3b30 	str.w	r3, [r5], #48
 802c012:	4b08      	ldr	r3, [pc, #32]	; (802c034 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802c014:	4604      	mov	r4, r0
 802c016:	6818      	ldr	r0, [r3, #0]
 802c018:	6803      	ldr	r3, [r0, #0]
 802c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c01c:	4798      	blx	r3
 802c01e:	4628      	mov	r0, r5
 802c020:	f000 f814 	bl	802c04c <_ZN8touchgfx7OutlineD1Ev>
 802c024:	f104 0018 	add.w	r0, r4, #24
 802c028:	f001 f939 	bl	802d29e <_ZN8touchgfx15RenderingBufferD1Ev>
 802c02c:	4620      	mov	r0, r4
 802c02e:	bd38      	pop	{r3, r4, r5, pc}
 802c030:	08033514 	.word	0x08033514
 802c034:	200097a8 	.word	0x200097a8

0802c038 <_ZN8touchgfx6CanvasD0Ev>:
 802c038:	b510      	push	{r4, lr}
 802c03a:	4604      	mov	r4, r0
 802c03c:	f7ff ffe4 	bl	802c008 <_ZN8touchgfx6CanvasD1Ev>
 802c040:	4620      	mov	r0, r4
 802c042:	21bc      	movs	r1, #188	; 0xbc
 802c044:	f001 f94d 	bl	802d2e2 <_ZdlPvj>
 802c048:	4620      	mov	r0, r4
 802c04a:	bd10      	pop	{r4, pc}

0802c04c <_ZN8touchgfx7OutlineD1Ev>:
 802c04c:	4770      	bx	lr

0802c04e <_ZN8touchgfx7OutlineD0Ev>:
 802c04e:	b510      	push	{r4, lr}
 802c050:	2148      	movs	r1, #72	; 0x48
 802c052:	4604      	mov	r4, r0
 802c054:	f001 f945 	bl	802d2e2 <_ZdlPvj>
 802c058:	4620      	mov	r0, r4
 802c05a:	bd10      	pop	{r4, pc}

0802c05c <_ZN8touchgfx7Outline5resetEv>:
 802c05c:	b510      	push	{r4, lr}
 802c05e:	4604      	mov	r4, r0
 802c060:	f001 f8a4 	bl	802d1ac <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802c064:	60e0      	str	r0, [r4, #12]
 802c066:	f001 f8a7 	bl	802d1b8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802c06a:	68e3      	ldr	r3, [r4, #12]
 802c06c:	6123      	str	r3, [r4, #16]
 802c06e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c072:	82a3      	strh	r3, [r4, #20]
 802c074:	82e3      	strh	r3, [r4, #22]
 802c076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c078:	f023 0301 	bic.w	r3, r3, #1
 802c07c:	f043 0302 	orr.w	r3, r3, #2
 802c080:	63e3      	str	r3, [r4, #60]	; 0x3c
 802c082:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c086:	2200      	movs	r2, #0
 802c088:	08c0      	lsrs	r0, r0, #3
 802c08a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802c08e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c092:	6060      	str	r0, [r4, #4]
 802c094:	60a2      	str	r2, [r4, #8]
 802c096:	8322      	strh	r2, [r4, #24]
 802c098:	8362      	strh	r2, [r4, #26]
 802c09a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802c09e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c0a2:	bd10      	pop	{r4, pc}

0802c0a4 <_ZN8touchgfx7OutlineC1Ev>:
 802c0a4:	b510      	push	{r4, lr}
 802c0a6:	4b0f      	ldr	r3, [pc, #60]	; (802c0e4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802c0a8:	6003      	str	r3, [r0, #0]
 802c0aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802c0ae:	2300      	movs	r3, #0
 802c0b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802c0b4:	4604      	mov	r4, r0
 802c0b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802c0ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c0be:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802c0c2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802c0c6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802c0ca:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802c0ce:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802c0d2:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802c0d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802c0da:	f7ff ffbf 	bl	802c05c <_ZN8touchgfx7Outline5resetEv>
 802c0de:	4620      	mov	r0, r4
 802c0e0:	bd10      	pop	{r4, pc}
 802c0e2:	bf00      	nop
 802c0e4:	080335e4 	.word	0x080335e4

0802c0e8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c0ec:	b095      	sub	sp, #84	; 0x54
 802c0ee:	4604      	mov	r4, r0
 802c0f0:	981e      	ldr	r0, [sp, #120]	; 0x78
 802c0f2:	9304      	str	r3, [sp, #16]
 802c0f4:	1153      	asrs	r3, r2, #5
 802c0f6:	9300      	str	r3, [sp, #0]
 802c0f8:	1143      	asrs	r3, r0, #5
 802c0fa:	930c      	str	r3, [sp, #48]	; 0x30
 802c0fc:	f000 031f 	and.w	r3, r0, #31
 802c100:	9303      	str	r3, [sp, #12]
 802c102:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c104:	1155      	asrs	r5, r2, #5
 802c106:	42ab      	cmp	r3, r5
 802c108:	bfc4      	itt	gt
 802c10a:	462b      	movgt	r3, r5
 802c10c:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c10e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c110:	1155      	asrs	r5, r2, #5
 802c112:	42ab      	cmp	r3, r5
 802c114:	bfde      	ittt	le
 802c116:	462b      	movle	r3, r5
 802c118:	3301      	addle	r3, #1
 802c11a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c11c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c11e:	1145      	asrs	r5, r0, #5
 802c120:	42ab      	cmp	r3, r5
 802c122:	bfc4      	itt	gt
 802c124:	462b      	movgt	r3, r5
 802c126:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c12a:	1145      	asrs	r5, r0, #5
 802c12c:	42ab      	cmp	r3, r5
 802c12e:	bfde      	ittt	le
 802c130:	462b      	movle	r3, r5
 802c132:	3301      	addle	r3, #1
 802c134:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c136:	9b04      	ldr	r3, [sp, #16]
 802c138:	1157      	asrs	r7, r2, #5
 802c13a:	eba3 0a01 	sub.w	sl, r3, r1
 802c13e:	1143      	asrs	r3, r0, #5
 802c140:	429f      	cmp	r7, r3
 802c142:	f002 061f 	and.w	r6, r2, #31
 802c146:	ea4f 1561 	mov.w	r5, r1, asr #5
 802c14a:	f040 8122 	bne.w	802c392 <_ZN8touchgfx7Outline10renderLineEiiii+0x2aa>
 802c14e:	9b04      	ldr	r3, [sp, #16]
 802c150:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c154:	9b03      	ldr	r3, [sp, #12]
 802c156:	429e      	cmp	r6, r3
 802c158:	d131      	bne.n	802c1be <_ZN8touchgfx7Outline10renderLineEiiii+0xd6>
 802c15a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c15e:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c162:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c166:	fa0f fb8b 	sxth.w	fp, fp
 802c16a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c16e:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802c172:	4281      	cmp	r1, r0
 802c174:	f000 80eb 	beq.w	802c34e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c178:	8b60      	ldrh	r0, [r4, #26]
 802c17a:	8b21      	ldrh	r1, [r4, #24]
 802c17c:	4301      	orrs	r1, r0
 802c17e:	d00b      	beq.n	802c198 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c180:	2b00      	cmp	r3, #0
 802c182:	db09      	blt.n	802c198 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c184:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c186:	428b      	cmp	r3, r1
 802c188:	da06      	bge.n	802c198 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c18a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c18e:	4299      	cmp	r1, r3
 802c190:	d308      	bcc.n	802c1a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc>
 802c192:	2301      	movs	r3, #1
 802c194:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c198:	f8a4 b014 	strh.w	fp, [r4, #20]
 802c19c:	2300      	movs	r3, #0
 802c19e:	82e2      	strh	r2, [r4, #22]
 802c1a0:	8323      	strh	r3, [r4, #24]
 802c1a2:	e01f      	b.n	802c1e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c1a4:	f104 0314 	add.w	r3, r4, #20
 802c1a8:	cb03      	ldmia	r3!, {r0, r1}
 802c1aa:	6925      	ldr	r5, [r4, #16]
 802c1ac:	6028      	str	r0, [r5, #0]
 802c1ae:	6069      	str	r1, [r5, #4]
 802c1b0:	6923      	ldr	r3, [r4, #16]
 802c1b2:	3308      	adds	r3, #8
 802c1b4:	6123      	str	r3, [r4, #16]
 802c1b6:	68a3      	ldr	r3, [r4, #8]
 802c1b8:	3301      	adds	r3, #1
 802c1ba:	60a3      	str	r3, [r4, #8]
 802c1bc:	e7ec      	b.n	802c198 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c1be:	9b04      	ldr	r3, [sp, #16]
 802c1c0:	8b20      	ldrh	r0, [r4, #24]
 802c1c2:	8b62      	ldrh	r2, [r4, #26]
 802c1c4:	f003 031f 	and.w	r3, r3, #31
 802c1c8:	9305      	str	r3, [sp, #20]
 802c1ca:	9b03      	ldr	r3, [sp, #12]
 802c1cc:	45ab      	cmp	fp, r5
 802c1ce:	f001 011f 	and.w	r1, r1, #31
 802c1d2:	eba3 0306 	sub.w	r3, r3, r6
 802c1d6:	d107      	bne.n	802c1e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x100>
 802c1d8:	4418      	add	r0, r3
 802c1da:	8320      	strh	r0, [r4, #24]
 802c1dc:	9805      	ldr	r0, [sp, #20]
 802c1de:	4401      	add	r1, r0
 802c1e0:	fb03 2301 	mla	r3, r3, r1, r2
 802c1e4:	8363      	strh	r3, [r4, #26]
 802c1e6:	e0b2      	b.n	802c34e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c1e8:	f1ba 0f00 	cmp.w	sl, #0
 802c1ec:	db35      	blt.n	802c25a <_ZN8touchgfx7Outline10renderLineEiiii+0x172>
 802c1ee:	2701      	movs	r7, #1
 802c1f0:	f1c1 0c20 	rsb	ip, r1, #32
 802c1f4:	9702      	str	r7, [sp, #8]
 802c1f6:	fb03 f30c 	mul.w	r3, r3, ip
 802c1fa:	2720      	movs	r7, #32
 802c1fc:	9701      	str	r7, [sp, #4]
 802c1fe:	fb93 fcfa 	sdiv	ip, r3, sl
 802c202:	9f01      	ldr	r7, [sp, #4]
 802c204:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c208:	fb0a 331c 	mls	r3, sl, ip, r3
 802c20c:	2b00      	cmp	r3, #0
 802c20e:	bfb8      	it	lt
 802c210:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c214:	4439      	add	r1, r7
 802c216:	fb0c 2101 	mla	r1, ip, r1, r2
 802c21a:	9a02      	ldr	r2, [sp, #8]
 802c21c:	4415      	add	r5, r2
 802c21e:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c222:	9200      	str	r2, [sp, #0]
 802c224:	ea4f 4702 	mov.w	r7, r2, lsl #16
 802c228:	9704      	str	r7, [sp, #16]
 802c22a:	9a04      	ldr	r2, [sp, #16]
 802c22c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802c230:	fa0f fe85 	sxth.w	lr, r5
 802c234:	4460      	add	r0, ip
 802c236:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802c23a:	eb0e 0902 	add.w	r9, lr, r2
 802c23e:	bfb8      	it	lt
 802c240:	4453      	addlt	r3, sl
 802c242:	b200      	sxth	r0, r0
 802c244:	b209      	sxth	r1, r1
 802c246:	454f      	cmp	r7, r9
 802c248:	8320      	strh	r0, [r4, #24]
 802c24a:	8361      	strh	r1, [r4, #26]
 802c24c:	d10d      	bne.n	802c26a <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 802c24e:	4ba1      	ldr	r3, [pc, #644]	; (802c4d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ec>)
 802c250:	4aa1      	ldr	r2, [pc, #644]	; (802c4d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f0>)
 802c252:	48a2      	ldr	r0, [pc, #648]	; (802c4dc <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802c254:	2177      	movs	r1, #119	; 0x77
 802c256:	f001 fe63 	bl	802df20 <__assert_func>
 802c25a:	f04f 37ff 	mov.w	r7, #4294967295
 802c25e:	9702      	str	r7, [sp, #8]
 802c260:	434b      	muls	r3, r1
 802c262:	f1ca 0a00 	rsb	sl, sl, #0
 802c266:	2700      	movs	r7, #0
 802c268:	e7c8      	b.n	802c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0x114>
 802c26a:	ea50 0201 	orrs.w	r2, r0, r1
 802c26e:	d00c      	beq.n	802c28a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c270:	f1b8 0f00 	cmp.w	r8, #0
 802c274:	db09      	blt.n	802c28a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c276:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c278:	4588      	cmp	r8, r1
 802c27a:	da06      	bge.n	802c28a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c27c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c280:	4288      	cmp	r0, r1
 802c282:	d367      	bcc.n	802c354 <_ZN8touchgfx7Outline10renderLineEiiii+0x26c>
 802c284:	2101      	movs	r1, #1
 802c286:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c28a:	2100      	movs	r1, #0
 802c28c:	9a00      	ldr	r2, [sp, #0]
 802c28e:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c292:	45ab      	cmp	fp, r5
 802c294:	82e2      	strh	r2, [r4, #22]
 802c296:	8321      	strh	r1, [r4, #24]
 802c298:	8361      	strh	r1, [r4, #26]
 802c29a:	4466      	add	r6, ip
 802c29c:	d04e      	beq.n	802c33c <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 802c29e:	9a03      	ldr	r2, [sp, #12]
 802c2a0:	1b91      	subs	r1, r2, r6
 802c2a2:	448c      	add	ip, r1
 802c2a4:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802c2a8:	fb9c f7fa 	sdiv	r7, ip, sl
 802c2ac:	fb0a cc17 	mls	ip, sl, r7, ip
 802c2b0:	f1bc 0f00 	cmp.w	ip, #0
 802c2b4:	bfb8      	it	lt
 802c2b6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802c2ba:	f107 0201 	add.w	r2, r7, #1
 802c2be:	bfb8      	it	lt
 802c2c0:	44d4      	addlt	ip, sl
 802c2c2:	eba3 030a 	sub.w	r3, r3, sl
 802c2c6:	9207      	str	r2, [sp, #28]
 802c2c8:	f04f 0800 	mov.w	r8, #0
 802c2cc:	eb13 030c 	adds.w	r3, r3, ip
 802c2d0:	bf58      	it	pl
 802c2d2:	9807      	ldrpl	r0, [sp, #28]
 802c2d4:	9a02      	ldr	r2, [sp, #8]
 802c2d6:	bf48      	it	mi
 802c2d8:	4638      	movmi	r0, r7
 802c2da:	fa0f fe80 	sxth.w	lr, r0
 802c2de:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c2e2:	4415      	add	r5, r2
 802c2e4:	4406      	add	r6, r0
 802c2e6:	9a04      	ldr	r2, [sp, #16]
 802c2e8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c2ec:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c2f0:	fa0f f985 	sxth.w	r9, r5
 802c2f4:	4410      	add	r0, r2
 802c2f6:	444a      	add	r2, r9
 802c2f8:	bf58      	it	pl
 802c2fa:	eba3 030a 	subpl.w	r3, r3, sl
 802c2fe:	b209      	sxth	r1, r1
 802c300:	4290      	cmp	r0, r2
 802c302:	8361      	strh	r1, [r4, #26]
 802c304:	d0a3      	beq.n	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c306:	ea5e 0201 	orrs.w	r2, lr, r1
 802c30a:	d00d      	beq.n	802c328 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c30c:	9a00      	ldr	r2, [sp, #0]
 802c30e:	2a00      	cmp	r2, #0
 802c310:	db0a      	blt.n	802c328 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c312:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c314:	428a      	cmp	r2, r1
 802c316:	da07      	bge.n	802c328 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c318:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c31c:	4288      	cmp	r0, r1
 802c31e:	d329      	bcc.n	802c374 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 802c320:	f04f 0201 	mov.w	r2, #1
 802c324:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c328:	9a00      	ldr	r2, [sp, #0]
 802c32a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c32e:	45ab      	cmp	fp, r5
 802c330:	82e2      	strh	r2, [r4, #22]
 802c332:	f8a4 8018 	strh.w	r8, [r4, #24]
 802c336:	f8a4 801a 	strh.w	r8, [r4, #26]
 802c33a:	d1c7      	bne.n	802c2cc <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 802c33c:	9b03      	ldr	r3, [sp, #12]
 802c33e:	9a01      	ldr	r2, [sp, #4]
 802c340:	1b9e      	subs	r6, r3, r6
 802c342:	9b05      	ldr	r3, [sp, #20]
 802c344:	8326      	strh	r6, [r4, #24]
 802c346:	3320      	adds	r3, #32
 802c348:	1a9b      	subs	r3, r3, r2
 802c34a:	435e      	muls	r6, r3
 802c34c:	8366      	strh	r6, [r4, #26]
 802c34e:	b015      	add	sp, #84	; 0x54
 802c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c354:	f104 0714 	add.w	r7, r4, #20
 802c358:	cf03      	ldmia	r7!, {r0, r1}
 802c35a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c35e:	f8c8 0000 	str.w	r0, [r8]
 802c362:	f8c8 1004 	str.w	r1, [r8, #4]
 802c366:	6921      	ldr	r1, [r4, #16]
 802c368:	3108      	adds	r1, #8
 802c36a:	6121      	str	r1, [r4, #16]
 802c36c:	68a1      	ldr	r1, [r4, #8]
 802c36e:	3101      	adds	r1, #1
 802c370:	60a1      	str	r1, [r4, #8]
 802c372:	e78a      	b.n	802c28a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c374:	f104 0e14 	add.w	lr, r4, #20
 802c378:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c37c:	6922      	ldr	r2, [r4, #16]
 802c37e:	9206      	str	r2, [sp, #24]
 802c380:	6010      	str	r0, [r2, #0]
 802c382:	6051      	str	r1, [r2, #4]
 802c384:	6921      	ldr	r1, [r4, #16]
 802c386:	3108      	adds	r1, #8
 802c388:	6121      	str	r1, [r4, #16]
 802c38a:	68a1      	ldr	r1, [r4, #8]
 802c38c:	3101      	adds	r1, #1
 802c38e:	60a1      	str	r1, [r4, #8]
 802c390:	e7ca      	b.n	802c328 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c392:	eba0 0b02 	sub.w	fp, r0, r2
 802c396:	f1ba 0f00 	cmp.w	sl, #0
 802c39a:	f040 80a1 	bne.w	802c4e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>
 802c39e:	f1bb 0f00 	cmp.w	fp, #0
 802c3a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802c3a6:	8b62      	ldrh	r2, [r4, #26]
 802c3a8:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802c3ac:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802c3b0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802c3b4:	bfa8      	it	ge
 802c3b6:	f04f 0a20 	movge.w	sl, #32
 802c3ba:	8b21      	ldrh	r1, [r4, #24]
 802c3bc:	ebaa 0606 	sub.w	r6, sl, r6
 802c3c0:	4431      	add	r1, r6
 802c3c2:	fb06 2603 	mla	r6, r6, r3, r2
 802c3c6:	9a00      	ldr	r2, [sp, #0]
 802c3c8:	bfb4      	ite	lt
 802c3ca:	f04f 39ff 	movlt.w	r9, #4294967295
 802c3ce:	f04f 0901 	movge.w	r9, #1
 802c3d2:	444a      	add	r2, r9
 802c3d4:	b22d      	sxth	r5, r5
 802c3d6:	b217      	sxth	r7, r2
 802c3d8:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802c3dc:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802c3e0:	b209      	sxth	r1, r1
 802c3e2:	b236      	sxth	r6, r6
 802c3e4:	45f4      	cmp	ip, lr
 802c3e6:	8321      	strh	r1, [r4, #24]
 802c3e8:	8366      	strh	r6, [r4, #26]
 802c3ea:	f43f af30 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c3ee:	4331      	orrs	r1, r6
 802c3f0:	d00b      	beq.n	802c40a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c3f2:	2800      	cmp	r0, #0
 802c3f4:	db09      	blt.n	802c40a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c3f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c3f8:	4288      	cmp	r0, r1
 802c3fa:	da06      	bge.n	802c40a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c3fc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c400:	4288      	cmp	r0, r1
 802c402:	d33b      	bcc.n	802c47c <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 802c404:	2101      	movs	r1, #1
 802c406:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c40a:	f1aa 0610 	sub.w	r6, sl, #16
 802c40e:	0076      	lsls	r6, r6, #1
 802c410:	fb06 fc03 	mul.w	ip, r6, r3
 802c414:	fa0f fc8c 	sxth.w	ip, ip
 802c418:	b236      	sxth	r6, r6
 802c41a:	82e7      	strh	r7, [r4, #22]
 802c41c:	ea46 010c 	orr.w	r1, r6, ip
 802c420:	2700      	movs	r7, #0
 802c422:	82a5      	strh	r5, [r4, #20]
 802c424:	8327      	strh	r7, [r4, #24]
 802c426:	8367      	strh	r7, [r4, #26]
 802c428:	9100      	str	r1, [sp, #0]
 802c42a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802c42c:	428a      	cmp	r2, r1
 802c42e:	d046      	beq.n	802c4be <_ZN8touchgfx7Outline10renderLineEiiii+0x3d6>
 802c430:	444a      	add	r2, r9
 802c432:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802c436:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c43a:	8326      	strh	r6, [r4, #24]
 802c43c:	fa0f f882 	sxth.w	r8, r2
 802c440:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802c444:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802c448:	4570      	cmp	r0, lr
 802c44a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802c44e:	f43f aefe 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c452:	9800      	ldr	r0, [sp, #0]
 802c454:	b160      	cbz	r0, 802c470 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c456:	2900      	cmp	r1, #0
 802c458:	db0a      	blt.n	802c470 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c45a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802c45c:	4281      	cmp	r1, r0
 802c45e:	da07      	bge.n	802c470 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c460:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c464:	4288      	cmp	r0, r1
 802c466:	d319      	bcc.n	802c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b4>
 802c468:	f04f 0101 	mov.w	r1, #1
 802c46c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c470:	82a5      	strh	r5, [r4, #20]
 802c472:	f8a4 8016 	strh.w	r8, [r4, #22]
 802c476:	8327      	strh	r7, [r4, #24]
 802c478:	8367      	strh	r7, [r4, #26]
 802c47a:	e7d6      	b.n	802c42a <_ZN8touchgfx7Outline10renderLineEiiii+0x342>
 802c47c:	f104 0614 	add.w	r6, r4, #20
 802c480:	ce03      	ldmia	r6!, {r0, r1}
 802c482:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802c486:	f8cc 0000 	str.w	r0, [ip]
 802c48a:	f8cc 1004 	str.w	r1, [ip, #4]
 802c48e:	6921      	ldr	r1, [r4, #16]
 802c490:	3108      	adds	r1, #8
 802c492:	6121      	str	r1, [r4, #16]
 802c494:	68a1      	ldr	r1, [r4, #8]
 802c496:	3101      	adds	r1, #1
 802c498:	60a1      	str	r1, [r4, #8]
 802c49a:	e7b6      	b.n	802c40a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c49c:	f104 0e14 	add.w	lr, r4, #20
 802c4a0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c4a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802c4a8:	f8cb 0000 	str.w	r0, [fp]
 802c4ac:	f8cb 1004 	str.w	r1, [fp, #4]
 802c4b0:	6921      	ldr	r1, [r4, #16]
 802c4b2:	3108      	adds	r1, #8
 802c4b4:	6121      	str	r1, [r4, #16]
 802c4b6:	68a1      	ldr	r1, [r4, #8]
 802c4b8:	3101      	adds	r1, #1
 802c4ba:	60a1      	str	r1, [r4, #8]
 802c4bc:	e7d8      	b.n	802c470 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c4be:	9a03      	ldr	r2, [sp, #12]
 802c4c0:	8b61      	ldrh	r1, [r4, #26]
 802c4c2:	f1a2 0e20 	sub.w	lr, r2, #32
 802c4c6:	8b22      	ldrh	r2, [r4, #24]
 802c4c8:	44d6      	add	lr, sl
 802c4ca:	4472      	add	r2, lr
 802c4cc:	8322      	strh	r2, [r4, #24]
 802c4ce:	fb0e 1303 	mla	r3, lr, r3, r1
 802c4d2:	e687      	b.n	802c1e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c4d4:	0803356b 	.word	0x0803356b
 802c4d8:	080335ec 	.word	0x080335ec
 802c4dc:	0803359c 	.word	0x0803359c
 802c4e0:	f1bb 0f00 	cmp.w	fp, #0
 802c4e4:	f2c0 8124 	blt.w	802c730 <_ZN8touchgfx7Outline10renderLineEiiii+0x648>
 802c4e8:	2201      	movs	r2, #1
 802c4ea:	f1c6 0320 	rsb	r3, r6, #32
 802c4ee:	920b      	str	r2, [sp, #44]	; 0x2c
 802c4f0:	fb0a f303 	mul.w	r3, sl, r3
 802c4f4:	2220      	movs	r2, #32
 802c4f6:	fb93 fcfb 	sdiv	ip, r3, fp
 802c4fa:	fb0b 331c 	mls	r3, fp, ip, r3
 802c4fe:	2b00      	cmp	r3, #0
 802c500:	9308      	str	r3, [sp, #32]
 802c502:	bfbe      	ittt	lt
 802c504:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c508:	445b      	addlt	r3, fp
 802c50a:	9308      	strlt	r3, [sp, #32]
 802c50c:	eb0c 0301 	add.w	r3, ip, r1
 802c510:	9301      	str	r3, [sp, #4]
 802c512:	115b      	asrs	r3, r3, #5
 802c514:	9305      	str	r3, [sp, #20]
 802c516:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c51a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802c51e:	9202      	str	r2, [sp, #8]
 802c520:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802c524:	461f      	mov	r7, r3
 802c526:	9b02      	ldr	r3, [sp, #8]
 802c528:	42b3      	cmp	r3, r6
 802c52a:	f040 8117 	bne.w	802c75c <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802c52e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802c532:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c536:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c53a:	42b9      	cmp	r1, r7
 802c53c:	d016      	beq.n	802c56c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c53e:	8b60      	ldrh	r0, [r4, #26]
 802c540:	8b21      	ldrh	r1, [r4, #24]
 802c542:	4301      	orrs	r1, r0
 802c544:	d00d      	beq.n	802c562 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c546:	f1b8 0f00 	cmp.w	r8, #0
 802c54a:	db0a      	blt.n	802c562 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c54c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c54e:	4541      	cmp	r1, r8
 802c550:	dd07      	ble.n	802c562 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c552:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c556:	4288      	cmp	r0, r1
 802c558:	f0c0 80f3 	bcc.w	802c742 <_ZN8touchgfx7Outline10renderLineEiiii+0x65a>
 802c55c:	2101      	movs	r1, #1
 802c55e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c562:	82e3      	strh	r3, [r4, #22]
 802c564:	2300      	movs	r3, #0
 802c566:	82a2      	strh	r2, [r4, #20]
 802c568:	8323      	strh	r3, [r4, #24]
 802c56a:	8363      	strh	r3, [r4, #26]
 802c56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c56e:	9a00      	ldr	r2, [sp, #0]
 802c570:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c574:	441a      	add	r2, r3
 802c576:	4691      	mov	r9, r2
 802c578:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802c57c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c580:	fa0f f589 	sxth.w	r5, r9
 802c584:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c588:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c58c:	4281      	cmp	r1, r0
 802c58e:	d015      	beq.n	802c5bc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d4>
 802c590:	8b60      	ldrh	r0, [r4, #26]
 802c592:	8b21      	ldrh	r1, [r4, #24]
 802c594:	4301      	orrs	r1, r0
 802c596:	d00c      	beq.n	802c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c598:	2a00      	cmp	r2, #0
 802c59a:	db0a      	blt.n	802c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c59c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c59e:	428a      	cmp	r2, r1
 802c5a0:	da07      	bge.n	802c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c5a2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c5a6:	4291      	cmp	r1, r2
 802c5a8:	f0c0 81b4 	bcc.w	802c914 <_ZN8touchgfx7Outline10renderLineEiiii+0x82c>
 802c5ac:	2201      	movs	r2, #1
 802c5ae:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c5b2:	82a3      	strh	r3, [r4, #20]
 802c5b4:	2300      	movs	r3, #0
 802c5b6:	82e5      	strh	r5, [r4, #22]
 802c5b8:	8323      	strh	r3, [r4, #24]
 802c5ba:	8363      	strh	r3, [r4, #26]
 802c5bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c5be:	454b      	cmp	r3, r9
 802c5c0:	f000 808a 	beq.w	802c6d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 802c5c4:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802c5c8:	fb93 f2fb 	sdiv	r2, r3, fp
 802c5cc:	fb0b 3312 	mls	r3, fp, r2, r3
 802c5d0:	2b00      	cmp	r3, #0
 802c5d2:	9205      	str	r2, [sp, #20]
 802c5d4:	9307      	str	r3, [sp, #28]
 802c5d6:	da04      	bge.n	802c5e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4fa>
 802c5d8:	1e53      	subs	r3, r2, #1
 802c5da:	9305      	str	r3, [sp, #20]
 802c5dc:	9b07      	ldr	r3, [sp, #28]
 802c5de:	445b      	add	r3, fp
 802c5e0:	9307      	str	r3, [sp, #28]
 802c5e2:	9b08      	ldr	r3, [sp, #32]
 802c5e4:	eba3 030b 	sub.w	r3, r3, fp
 802c5e8:	9308      	str	r3, [sp, #32]
 802c5ea:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802c5ee:	f1c3 0320 	rsb	r3, r3, #32
 802c5f2:	930a      	str	r3, [sp, #40]	; 0x28
 802c5f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c5f6:	9b02      	ldr	r3, [sp, #8]
 802c5f8:	1a9b      	subs	r3, r3, r2
 802c5fa:	9309      	str	r3, [sp, #36]	; 0x24
 802c5fc:	f04f 0a00 	mov.w	sl, #0
 802c600:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802c604:	189b      	adds	r3, r3, r2
 802c606:	9308      	str	r3, [sp, #32]
 802c608:	bf5d      	ittte	pl
 802c60a:	eba3 030b 	subpl.w	r3, r3, fp
 802c60e:	9308      	strpl	r3, [sp, #32]
 802c610:	9b05      	ldrpl	r3, [sp, #20]
 802c612:	9b05      	ldrmi	r3, [sp, #20]
 802c614:	9902      	ldr	r1, [sp, #8]
 802c616:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802c61a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802c61e:	bf58      	it	pl
 802c620:	3301      	addpl	r3, #1
 802c622:	9300      	str	r3, [sp, #0]
 802c624:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c628:	4413      	add	r3, r2
 802c62a:	9301      	str	r3, [sp, #4]
 802c62c:	115b      	asrs	r3, r3, #5
 802c62e:	9306      	str	r3, [sp, #24]
 802c630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c632:	428b      	cmp	r3, r1
 802c634:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802c638:	f040 8186 	bne.w	802c948 <_ZN8touchgfx7Outline10renderLineEiiii+0x860>
 802c63c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802c640:	fa0f f389 	sxth.w	r3, r9
 802c644:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c648:	4541      	cmp	r1, r8
 802c64a:	d017      	beq.n	802c67c <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c64c:	8b60      	ldrh	r0, [r4, #26]
 802c64e:	8b21      	ldrh	r1, [r4, #24]
 802c650:	4301      	orrs	r1, r0
 802c652:	d00d      	beq.n	802c670 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c654:	2e00      	cmp	r6, #0
 802c656:	db0b      	blt.n	802c670 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c658:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c65a:	42b1      	cmp	r1, r6
 802c65c:	dd08      	ble.n	802c670 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c65e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c662:	4288      	cmp	r0, r1
 802c664:	f0c0 8163 	bcc.w	802c92e <_ZN8touchgfx7Outline10renderLineEiiii+0x846>
 802c668:	f04f 0101 	mov.w	r1, #1
 802c66c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c670:	82a2      	strh	r2, [r4, #20]
 802c672:	82e3      	strh	r3, [r4, #22]
 802c674:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c678:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c67c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c67e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c682:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c686:	4499      	add	r9, r3
 802c688:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802c68c:	fa0f f589 	sxth.w	r5, r9
 802c690:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c694:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c698:	4281      	cmp	r1, r0
 802c69a:	f43f add8 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c69e:	8b60      	ldrh	r0, [r4, #26]
 802c6a0:	8b21      	ldrh	r1, [r4, #24]
 802c6a2:	4301      	orrs	r1, r0
 802c6a4:	d00d      	beq.n	802c6c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c6a6:	2a00      	cmp	r2, #0
 802c6a8:	db0b      	blt.n	802c6c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c6aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c6ac:	428a      	cmp	r2, r1
 802c6ae:	da08      	bge.n	802c6c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c6b0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c6b4:	4291      	cmp	r1, r2
 802c6b6:	f0c0 8230 	bcc.w	802cb1a <_ZN8touchgfx7Outline10renderLineEiiii+0xa32>
 802c6ba:	f04f 0201 	mov.w	r2, #1
 802c6be:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c6c2:	82a3      	strh	r3, [r4, #20]
 802c6c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c6c6:	82e5      	strh	r5, [r4, #22]
 802c6c8:	454b      	cmp	r3, r9
 802c6ca:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c6ce:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c6d2:	f8dd c004 	ldr.w	ip, [sp, #4]
 802c6d6:	d193      	bne.n	802c600 <_ZN8touchgfx7Outline10renderLineEiiii+0x518>
 802c6d8:	9b02      	ldr	r3, [sp, #8]
 802c6da:	f1c3 0e20 	rsb	lr, r3, #32
 802c6de:	9b04      	ldr	r3, [sp, #16]
 802c6e0:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c6e4:	9b03      	ldr	r3, [sp, #12]
 802c6e6:	459e      	cmp	lr, r3
 802c6e8:	f040 8231 	bne.w	802cb4e <_ZN8touchgfx7Outline10renderLineEiiii+0xa66>
 802c6ec:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c6f0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c6f4:	fa0f f58b 	sxth.w	r5, fp
 802c6f8:	fa0f f289 	sxth.w	r2, r9
 802c6fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c700:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802c704:	4281      	cmp	r1, r0
 802c706:	f43f ae22 	beq.w	802c34e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c70a:	8b60      	ldrh	r0, [r4, #26]
 802c70c:	8b21      	ldrh	r1, [r4, #24]
 802c70e:	4301      	orrs	r1, r0
 802c710:	d00c      	beq.n	802c72c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c712:	2b00      	cmp	r3, #0
 802c714:	db0a      	blt.n	802c72c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c716:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c718:	428b      	cmp	r3, r1
 802c71a:	da07      	bge.n	802c72c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c71c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c720:	4299      	cmp	r1, r3
 802c722:	f0c0 8207 	bcc.w	802cb34 <_ZN8touchgfx7Outline10renderLineEiiii+0xa4c>
 802c726:	2301      	movs	r3, #1
 802c728:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c72c:	82a5      	strh	r5, [r4, #20]
 802c72e:	e535      	b.n	802c19c <_ZN8touchgfx7Outline10renderLineEiiii+0xb4>
 802c730:	f04f 32ff 	mov.w	r2, #4294967295
 802c734:	920b      	str	r2, [sp, #44]	; 0x2c
 802c736:	fb0a f306 	mul.w	r3, sl, r6
 802c73a:	f1cb 0b00 	rsb	fp, fp, #0
 802c73e:	2200      	movs	r2, #0
 802c740:	e6d9      	b.n	802c4f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40e>
 802c742:	f104 0514 	add.w	r5, r4, #20
 802c746:	cd03      	ldmia	r5!, {r0, r1}
 802c748:	6926      	ldr	r6, [r4, #16]
 802c74a:	6030      	str	r0, [r6, #0]
 802c74c:	6071      	str	r1, [r6, #4]
 802c74e:	6921      	ldr	r1, [r4, #16]
 802c750:	3108      	adds	r1, #8
 802c752:	6121      	str	r1, [r4, #16]
 802c754:	68a1      	ldr	r1, [r4, #8]
 802c756:	3101      	adds	r1, #1
 802c758:	60a1      	str	r1, [r4, #8]
 802c75a:	e702      	b.n	802c562 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c75c:	9b01      	ldr	r3, [sp, #4]
 802c75e:	8b20      	ldrh	r0, [r4, #24]
 802c760:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802c764:	f003 031f 	and.w	r3, r3, #31
 802c768:	930d      	str	r3, [sp, #52]	; 0x34
 802c76a:	9b02      	ldr	r3, [sp, #8]
 802c76c:	1b9a      	subs	r2, r3, r6
 802c76e:	9b05      	ldr	r3, [sp, #20]
 802c770:	42ab      	cmp	r3, r5
 802c772:	f001 011f 	and.w	r1, r1, #31
 802c776:	d107      	bne.n	802c788 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a0>
 802c778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c77a:	4419      	add	r1, r3
 802c77c:	4410      	add	r0, r2
 802c77e:	fb02 9201 	mla	r2, r2, r1, r9
 802c782:	8320      	strh	r0, [r4, #24]
 802c784:	8362      	strh	r2, [r4, #26]
 802c786:	e6f1      	b.n	802c56c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c788:	f1bc 0f00 	cmp.w	ip, #0
 802c78c:	f2c0 8099 	blt.w	802c8c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7da>
 802c790:	f1c1 0320 	rsb	r3, r1, #32
 802c794:	435a      	muls	r2, r3
 802c796:	2301      	movs	r3, #1
 802c798:	9309      	str	r3, [sp, #36]	; 0x24
 802c79a:	2320      	movs	r3, #32
 802c79c:	9307      	str	r3, [sp, #28]
 802c79e:	fb92 fefc 	sdiv	lr, r2, ip
 802c7a2:	9b07      	ldr	r3, [sp, #28]
 802c7a4:	fb0c 221e 	mls	r2, ip, lr, r2
 802c7a8:	2a00      	cmp	r2, #0
 802c7aa:	bfb8      	it	lt
 802c7ac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802c7b0:	4419      	add	r1, r3
 802c7b2:	fb0e 9101 	mla	r1, lr, r1, r9
 802c7b6:	b20b      	sxth	r3, r1
 802c7b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c7ba:	8363      	strh	r3, [r4, #26]
 802c7bc:	440d      	add	r5, r1
 802c7be:	f9bd 1000 	ldrsh.w	r1, [sp]
 802c7c2:	9106      	str	r1, [sp, #24]
 802c7c4:	fa0f f985 	sxth.w	r9, r5
 802c7c8:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802c7cc:	4470      	add	r0, lr
 802c7ce:	910a      	str	r1, [sp, #40]	; 0x28
 802c7d0:	4449      	add	r1, r9
 802c7d2:	bfb8      	it	lt
 802c7d4:	4462      	addlt	r2, ip
 802c7d6:	b200      	sxth	r0, r0
 802c7d8:	42b9      	cmp	r1, r7
 802c7da:	8320      	strh	r0, [r4, #24]
 802c7dc:	f43f ad37 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c7e0:	4303      	orrs	r3, r0
 802c7e2:	d00c      	beq.n	802c7fe <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c7e4:	f1b8 0f00 	cmp.w	r8, #0
 802c7e8:	db09      	blt.n	802c7fe <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c7ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c7ec:	4543      	cmp	r3, r8
 802c7ee:	dd06      	ble.n	802c7fe <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c7f0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c7f4:	4299      	cmp	r1, r3
 802c7f6:	d36c      	bcc.n	802c8d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 802c7f8:	2301      	movs	r3, #1
 802c7fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c7fe:	9b06      	ldr	r3, [sp, #24]
 802c800:	82e3      	strh	r3, [r4, #22]
 802c802:	2300      	movs	r3, #0
 802c804:	8323      	strh	r3, [r4, #24]
 802c806:	8363      	strh	r3, [r4, #26]
 802c808:	9b05      	ldr	r3, [sp, #20]
 802c80a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c80e:	42ab      	cmp	r3, r5
 802c810:	4476      	add	r6, lr
 802c812:	d04c      	beq.n	802c8ae <_ZN8touchgfx7Outline10renderLineEiiii+0x7c6>
 802c814:	9b02      	ldr	r3, [sp, #8]
 802c816:	1b9b      	subs	r3, r3, r6
 802c818:	4473      	add	r3, lr
 802c81a:	015b      	lsls	r3, r3, #5
 802c81c:	fb93 f8fc 	sdiv	r8, r3, ip
 802c820:	fb0c 3318 	mls	r3, ip, r8, r3
 802c824:	2b00      	cmp	r3, #0
 802c826:	bfb8      	it	lt
 802c828:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802c82c:	f108 0101 	add.w	r1, r8, #1
 802c830:	bfb8      	it	lt
 802c832:	4463      	addlt	r3, ip
 802c834:	eba2 020c 	sub.w	r2, r2, ip
 802c838:	910f      	str	r1, [sp, #60]	; 0x3c
 802c83a:	18d2      	adds	r2, r2, r3
 802c83c:	bf58      	it	pl
 802c83e:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802c840:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802c842:	bf48      	it	mi
 802c844:	4640      	movmi	r0, r8
 802c846:	fa0f fe80 	sxth.w	lr, r0
 802c84a:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c84e:	4406      	add	r6, r0
 802c850:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c852:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c856:	4405      	add	r5, r0
 802c858:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c85c:	fa0f f985 	sxth.w	r9, r5
 802c860:	4438      	add	r0, r7
 802c862:	444f      	add	r7, r9
 802c864:	bf58      	it	pl
 802c866:	eba2 020c 	subpl.w	r2, r2, ip
 802c86a:	b209      	sxth	r1, r1
 802c86c:	42b8      	cmp	r0, r7
 802c86e:	8361      	strh	r1, [r4, #26]
 802c870:	f43f aced 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c874:	ea5e 0101 	orrs.w	r1, lr, r1
 802c878:	d00e      	beq.n	802c898 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c87a:	9906      	ldr	r1, [sp, #24]
 802c87c:	2900      	cmp	r1, #0
 802c87e:	db0b      	blt.n	802c898 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c880:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c882:	9806      	ldr	r0, [sp, #24]
 802c884:	4288      	cmp	r0, r1
 802c886:	da07      	bge.n	802c898 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c888:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c88c:	4288      	cmp	r0, r1
 802c88e:	d330      	bcc.n	802c8f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x80a>
 802c890:	f04f 0101 	mov.w	r1, #1
 802c894:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c898:	9906      	ldr	r1, [sp, #24]
 802c89a:	82e1      	strh	r1, [r4, #22]
 802c89c:	f04f 0100 	mov.w	r1, #0
 802c8a0:	8321      	strh	r1, [r4, #24]
 802c8a2:	8361      	strh	r1, [r4, #26]
 802c8a4:	9905      	ldr	r1, [sp, #20]
 802c8a6:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c8aa:	42a9      	cmp	r1, r5
 802c8ac:	d1c5      	bne.n	802c83a <_ZN8touchgfx7Outline10renderLineEiiii+0x752>
 802c8ae:	9b02      	ldr	r3, [sp, #8]
 802c8b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 802c8b2:	1b9e      	subs	r6, r3, r6
 802c8b4:	9b07      	ldr	r3, [sp, #28]
 802c8b6:	8326      	strh	r6, [r4, #24]
 802c8b8:	3120      	adds	r1, #32
 802c8ba:	1ac9      	subs	r1, r1, r3
 802c8bc:	434e      	muls	r6, r1
 802c8be:	8366      	strh	r6, [r4, #26]
 802c8c0:	e654      	b.n	802c56c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 802c8c6:	9309      	str	r3, [sp, #36]	; 0x24
 802c8c8:	434a      	muls	r2, r1
 802c8ca:	f1cc 0c00 	rsb	ip, ip, #0
 802c8ce:	2300      	movs	r3, #0
 802c8d0:	e764      	b.n	802c79c <_ZN8touchgfx7Outline10renderLineEiiii+0x6b4>
 802c8d2:	f104 0314 	add.w	r3, r4, #20
 802c8d6:	cb03      	ldmia	r3!, {r0, r1}
 802c8d8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c8dc:	f8c8 0000 	str.w	r0, [r8]
 802c8e0:	f8c8 1004 	str.w	r1, [r8, #4]
 802c8e4:	6923      	ldr	r3, [r4, #16]
 802c8e6:	3308      	adds	r3, #8
 802c8e8:	6123      	str	r3, [r4, #16]
 802c8ea:	68a3      	ldr	r3, [r4, #8]
 802c8ec:	3301      	adds	r3, #1
 802c8ee:	60a3      	str	r3, [r4, #8]
 802c8f0:	e785      	b.n	802c7fe <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c8f2:	6921      	ldr	r1, [r4, #16]
 802c8f4:	910e      	str	r1, [sp, #56]	; 0x38
 802c8f6:	f104 0e14 	add.w	lr, r4, #20
 802c8fa:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c8fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802c900:	6038      	str	r0, [r7, #0]
 802c902:	6079      	str	r1, [r7, #4]
 802c904:	6921      	ldr	r1, [r4, #16]
 802c906:	3108      	adds	r1, #8
 802c908:	6121      	str	r1, [r4, #16]
 802c90a:	68a1      	ldr	r1, [r4, #8]
 802c90c:	3101      	adds	r1, #1
 802c90e:	4638      	mov	r0, r7
 802c910:	60a1      	str	r1, [r4, #8]
 802c912:	e7c1      	b.n	802c898 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c914:	f104 0214 	add.w	r2, r4, #20
 802c918:	ca03      	ldmia	r2!, {r0, r1}
 802c91a:	6926      	ldr	r6, [r4, #16]
 802c91c:	6030      	str	r0, [r6, #0]
 802c91e:	6071      	str	r1, [r6, #4]
 802c920:	6922      	ldr	r2, [r4, #16]
 802c922:	3208      	adds	r2, #8
 802c924:	6122      	str	r2, [r4, #16]
 802c926:	68a2      	ldr	r2, [r4, #8]
 802c928:	3201      	adds	r2, #1
 802c92a:	60a2      	str	r2, [r4, #8]
 802c92c:	e641      	b.n	802c5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c92e:	f104 0514 	add.w	r5, r4, #20
 802c932:	cd03      	ldmia	r5!, {r0, r1}
 802c934:	6926      	ldr	r6, [r4, #16]
 802c936:	6030      	str	r0, [r6, #0]
 802c938:	6071      	str	r1, [r6, #4]
 802c93a:	6921      	ldr	r1, [r4, #16]
 802c93c:	3108      	adds	r1, #8
 802c93e:	6121      	str	r1, [r4, #16]
 802c940:	68a1      	ldr	r1, [r4, #8]
 802c942:	3101      	adds	r1, #1
 802c944:	60a1      	str	r1, [r4, #8]
 802c946:	e693      	b.n	802c670 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c948:	9b01      	ldr	r3, [sp, #4]
 802c94a:	8b20      	ldrh	r0, [r4, #24]
 802c94c:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802c950:	f003 031f 	and.w	r3, r3, #31
 802c954:	9310      	str	r3, [sp, #64]	; 0x40
 802c956:	9b06      	ldr	r3, [sp, #24]
 802c958:	ea4f 176c 	mov.w	r7, ip, asr #5
 802c95c:	429f      	cmp	r7, r3
 802c95e:	f00c 0c1f 	and.w	ip, ip, #31
 802c962:	d10a      	bne.n	802c97a <_ZN8touchgfx7Outline10renderLineEiiii+0x892>
 802c964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c966:	4418      	add	r0, r3
 802c968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802c96a:	8320      	strh	r0, [r4, #24]
 802c96c:	449c      	add	ip, r3
 802c96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c970:	fb03 ee0c 	mla	lr, r3, ip, lr
 802c974:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802c978:	e680      	b.n	802c67c <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c97a:	9b00      	ldr	r3, [sp, #0]
 802c97c:	2b00      	cmp	r3, #0
 802c97e:	f2c0 80a2 	blt.w	802cac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 802c982:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c984:	f1cc 0320 	rsb	r3, ip, #32
 802c988:	434b      	muls	r3, r1
 802c98a:	2101      	movs	r1, #1
 802c98c:	910e      	str	r1, [sp, #56]	; 0x38
 802c98e:	2120      	movs	r1, #32
 802c990:	9a00      	ldr	r2, [sp, #0]
 802c992:	910d      	str	r1, [sp, #52]	; 0x34
 802c994:	fb93 f5f2 	sdiv	r5, r3, r2
 802c998:	990d      	ldr	r1, [sp, #52]	; 0x34
 802c99a:	fb02 3315 	mls	r3, r2, r5, r3
 802c99e:	2b00      	cmp	r3, #0
 802c9a0:	bfbc      	itt	lt
 802c9a2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802c9a6:	189b      	addlt	r3, r3, r2
 802c9a8:	448c      	add	ip, r1
 802c9aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c9ac:	fb05 ec0c 	mla	ip, r5, ip, lr
 802c9b0:	fa0f f18c 	sxth.w	r1, ip
 802c9b4:	4417      	add	r7, r2
 802c9b6:	fa0f fc89 	sxth.w	ip, r9
 802c9ba:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802c9be:	fa0f fe87 	sxth.w	lr, r7
 802c9c2:	4428      	add	r0, r5
 802c9c4:	920f      	str	r2, [sp, #60]	; 0x3c
 802c9c6:	4472      	add	r2, lr
 802c9c8:	b200      	sxth	r0, r0
 802c9ca:	4542      	cmp	r2, r8
 802c9cc:	8320      	strh	r0, [r4, #24]
 802c9ce:	8361      	strh	r1, [r4, #26]
 802c9d0:	f43f ac3d 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c9d4:	ea50 0201 	orrs.w	r2, r0, r1
 802c9d8:	d00c      	beq.n	802c9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c9da:	2e00      	cmp	r6, #0
 802c9dc:	db0a      	blt.n	802c9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c9de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c9e0:	42b1      	cmp	r1, r6
 802c9e2:	dd07      	ble.n	802c9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c9e4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c9e8:	4288      	cmp	r0, r1
 802c9ea:	d377      	bcc.n	802cadc <_ZN8touchgfx7Outline10renderLineEiiii+0x9f4>
 802c9ec:	f04f 0201 	mov.w	r2, #1
 802c9f0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c9f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c9f6:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c9fa:	1956      	adds	r6, r2, r5
 802c9fc:	9a06      	ldr	r2, [sp, #24]
 802c9fe:	f8a4 c016 	strh.w	ip, [r4, #22]
 802ca02:	42ba      	cmp	r2, r7
 802ca04:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ca08:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ca0c:	d04e      	beq.n	802caac <_ZN8touchgfx7Outline10renderLineEiiii+0x9c4>
 802ca0e:	9a02      	ldr	r2, [sp, #8]
 802ca10:	1b91      	subs	r1, r2, r6
 802ca12:	440d      	add	r5, r1
 802ca14:	9a00      	ldr	r2, [sp, #0]
 802ca16:	016d      	lsls	r5, r5, #5
 802ca18:	fb95 fef2 	sdiv	lr, r5, r2
 802ca1c:	fb02 551e 	mls	r5, r2, lr, r5
 802ca20:	2d00      	cmp	r5, #0
 802ca22:	bfb8      	it	lt
 802ca24:	18ad      	addlt	r5, r5, r2
 802ca26:	9a00      	ldr	r2, [sp, #0]
 802ca28:	bfb8      	it	lt
 802ca2a:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802ca2e:	1a9b      	subs	r3, r3, r2
 802ca30:	f10e 0201 	add.w	r2, lr, #1
 802ca34:	9213      	str	r2, [sp, #76]	; 0x4c
 802ca36:	195b      	adds	r3, r3, r5
 802ca38:	bf5e      	ittt	pl
 802ca3a:	9a00      	ldrpl	r2, [sp, #0]
 802ca3c:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802ca3e:	1a9b      	subpl	r3, r3, r2
 802ca40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ca42:	4417      	add	r7, r2
 802ca44:	bf48      	it	mi
 802ca46:	4670      	movmi	r0, lr
 802ca48:	b23a      	sxth	r2, r7
 802ca4a:	fa0f f880 	sxth.w	r8, r0
 802ca4e:	0141      	lsls	r1, r0, #5
 802ca50:	9211      	str	r2, [sp, #68]	; 0x44
 802ca52:	4406      	add	r6, r0
 802ca54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ca56:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802ca5a:	f8a4 8018 	strh.w	r8, [r4, #24]
 802ca5e:	1882      	adds	r2, r0, r2
 802ca60:	9212      	str	r2, [sp, #72]	; 0x48
 802ca62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802ca64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ca66:	4402      	add	r2, r0
 802ca68:	9812      	ldr	r0, [sp, #72]	; 0x48
 802ca6a:	b209      	sxth	r1, r1
 802ca6c:	4290      	cmp	r0, r2
 802ca6e:	8361      	strh	r1, [r4, #26]
 802ca70:	f43f abed 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ca74:	ea58 0201 	orrs.w	r2, r8, r1
 802ca78:	d00d      	beq.n	802ca96 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca7a:	f1bc 0f00 	cmp.w	ip, #0
 802ca7e:	db0a      	blt.n	802ca96 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ca82:	458c      	cmp	ip, r1
 802ca84:	da07      	bge.n	802ca96 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca86:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ca8a:	4288      	cmp	r0, r1
 802ca8c:	d336      	bcc.n	802cafc <_ZN8touchgfx7Outline10renderLineEiiii+0xa14>
 802ca8e:	f04f 0201 	mov.w	r2, #1
 802ca92:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ca96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ca98:	82a2      	strh	r2, [r4, #20]
 802ca9a:	9a06      	ldr	r2, [sp, #24]
 802ca9c:	f8a4 c016 	strh.w	ip, [r4, #22]
 802caa0:	42ba      	cmp	r2, r7
 802caa2:	f8a4 a018 	strh.w	sl, [r4, #24]
 802caa6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802caaa:	d1c4      	bne.n	802ca36 <_ZN8touchgfx7Outline10renderLineEiiii+0x94e>
 802caac:	9b02      	ldr	r3, [sp, #8]
 802caae:	1b9e      	subs	r6, r3, r6
 802cab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802cab2:	8326      	strh	r6, [r4, #24]
 802cab4:	f103 0c20 	add.w	ip, r3, #32
 802cab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802caba:	ebac 0c03 	sub.w	ip, ip, r3
 802cabe:	fb06 f60c 	mul.w	r6, r6, ip
 802cac2:	8366      	strh	r6, [r4, #26]
 802cac4:	e5da      	b.n	802c67c <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802cac6:	9a00      	ldr	r2, [sp, #0]
 802cac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802caca:	f04f 31ff 	mov.w	r1, #4294967295
 802cace:	4252      	negs	r2, r2
 802cad0:	910e      	str	r1, [sp, #56]	; 0x38
 802cad2:	fb03 f30c 	mul.w	r3, r3, ip
 802cad6:	9200      	str	r2, [sp, #0]
 802cad8:	2100      	movs	r1, #0
 802cada:	e759      	b.n	802c990 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a8>
 802cadc:	f104 0614 	add.w	r6, r4, #20
 802cae0:	ce03      	ldmia	r6!, {r0, r1}
 802cae2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802cae6:	f8c8 0000 	str.w	r0, [r8]
 802caea:	f8c8 1004 	str.w	r1, [r8, #4]
 802caee:	6921      	ldr	r1, [r4, #16]
 802caf0:	3108      	adds	r1, #8
 802caf2:	6121      	str	r1, [r4, #16]
 802caf4:	68a1      	ldr	r1, [r4, #8]
 802caf6:	3101      	adds	r1, #1
 802caf8:	60a1      	str	r1, [r4, #8]
 802cafa:	e77b      	b.n	802c9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802cafc:	f104 0814 	add.w	r8, r4, #20
 802cb00:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802cb04:	6922      	ldr	r2, [r4, #16]
 802cb06:	9212      	str	r2, [sp, #72]	; 0x48
 802cb08:	6010      	str	r0, [r2, #0]
 802cb0a:	6051      	str	r1, [r2, #4]
 802cb0c:	6921      	ldr	r1, [r4, #16]
 802cb0e:	3108      	adds	r1, #8
 802cb10:	6121      	str	r1, [r4, #16]
 802cb12:	68a1      	ldr	r1, [r4, #8]
 802cb14:	3101      	adds	r1, #1
 802cb16:	60a1      	str	r1, [r4, #8]
 802cb18:	e7bd      	b.n	802ca96 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802cb1a:	f104 0214 	add.w	r2, r4, #20
 802cb1e:	ca03      	ldmia	r2!, {r0, r1}
 802cb20:	6926      	ldr	r6, [r4, #16]
 802cb22:	6030      	str	r0, [r6, #0]
 802cb24:	6071      	str	r1, [r6, #4]
 802cb26:	6922      	ldr	r2, [r4, #16]
 802cb28:	3208      	adds	r2, #8
 802cb2a:	6122      	str	r2, [r4, #16]
 802cb2c:	68a2      	ldr	r2, [r4, #8]
 802cb2e:	3201      	adds	r2, #1
 802cb30:	60a2      	str	r2, [r4, #8]
 802cb32:	e5c6      	b.n	802c6c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802cb34:	f104 0314 	add.w	r3, r4, #20
 802cb38:	cb03      	ldmia	r3!, {r0, r1}
 802cb3a:	6926      	ldr	r6, [r4, #16]
 802cb3c:	6030      	str	r0, [r6, #0]
 802cb3e:	6071      	str	r1, [r6, #4]
 802cb40:	6923      	ldr	r3, [r4, #16]
 802cb42:	3308      	adds	r3, #8
 802cb44:	6123      	str	r3, [r4, #16]
 802cb46:	68a3      	ldr	r3, [r4, #8]
 802cb48:	3301      	adds	r3, #1
 802cb4a:	60a3      	str	r3, [r4, #8]
 802cb4c:	e5ee      	b.n	802c72c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802cb4e:	9b01      	ldr	r3, [sp, #4]
 802cb50:	8b20      	ldrh	r0, [r4, #24]
 802cb52:	8b66      	ldrh	r6, [r4, #26]
 802cb54:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802cb58:	f003 021f 	and.w	r2, r3, #31
 802cb5c:	9b04      	ldr	r3, [sp, #16]
 802cb5e:	f003 031f 	and.w	r3, r3, #31
 802cb62:	9305      	str	r3, [sp, #20]
 802cb64:	9b03      	ldr	r3, [sp, #12]
 802cb66:	45dc      	cmp	ip, fp
 802cb68:	eba3 050e 	sub.w	r5, r3, lr
 802cb6c:	d108      	bne.n	802cb80 <_ZN8touchgfx7Outline10renderLineEiiii+0xa98>
 802cb6e:	9b05      	ldr	r3, [sp, #20]
 802cb70:	441a      	add	r2, r3
 802cb72:	4428      	add	r0, r5
 802cb74:	fb05 6502 	mla	r5, r5, r2, r6
 802cb78:	8320      	strh	r0, [r4, #24]
 802cb7a:	8365      	strh	r5, [r4, #26]
 802cb7c:	f7ff bbe7 	b.w	802c34e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802cb80:	9b04      	ldr	r3, [sp, #16]
 802cb82:	9901      	ldr	r1, [sp, #4]
 802cb84:	1a5b      	subs	r3, r3, r1
 802cb86:	9300      	str	r3, [sp, #0]
 802cb88:	f100 809f 	bmi.w	802ccca <_ZN8touchgfx7Outline10renderLineEiiii+0xbe2>
 802cb8c:	f1c2 0120 	rsb	r1, r2, #32
 802cb90:	434d      	muls	r5, r1
 802cb92:	2101      	movs	r1, #1
 802cb94:	9102      	str	r1, [sp, #8]
 802cb96:	2120      	movs	r1, #32
 802cb98:	9b00      	ldr	r3, [sp, #0]
 802cb9a:	9101      	str	r1, [sp, #4]
 802cb9c:	fb95 f7f3 	sdiv	r7, r5, r3
 802cba0:	9901      	ldr	r1, [sp, #4]
 802cba2:	fb03 5517 	mls	r5, r3, r7, r5
 802cba6:	2d00      	cmp	r5, #0
 802cba8:	bfb8      	it	lt
 802cbaa:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cbae:	440a      	add	r2, r1
 802cbb0:	fb07 6202 	mla	r2, r7, r2, r6
 802cbb4:	b211      	sxth	r1, r2
 802cbb6:	9a02      	ldr	r2, [sp, #8]
 802cbb8:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802cbbc:	8361      	strh	r1, [r4, #26]
 802cbbe:	4494      	add	ip, r2
 802cbc0:	fa0f f289 	sxth.w	r2, r9
 802cbc4:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802cbc8:	bfb8      	it	lt
 802cbca:	18ed      	addlt	r5, r5, r3
 802cbcc:	fa0f f88c 	sxth.w	r8, ip
 802cbd0:	0413      	lsls	r3, r2, #16
 802cbd2:	4438      	add	r0, r7
 802cbd4:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802cbd8:	eb08 0a03 	add.w	sl, r8, r3
 802cbdc:	b200      	sxth	r0, r0
 802cbde:	45d1      	cmp	r9, sl
 802cbe0:	8320      	strh	r0, [r4, #24]
 802cbe2:	9304      	str	r3, [sp, #16]
 802cbe4:	f43f ab33 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cbe8:	ea50 0301 	orrs.w	r3, r0, r1
 802cbec:	d00b      	beq.n	802cc06 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cbee:	2e00      	cmp	r6, #0
 802cbf0:	db09      	blt.n	802cc06 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cbf2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cbf4:	428e      	cmp	r6, r1
 802cbf6:	da06      	bge.n	802cc06 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cbf8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cbfc:	4288      	cmp	r0, r1
 802cbfe:	d36d      	bcc.n	802ccdc <_ZN8touchgfx7Outline10renderLineEiiii+0xbf4>
 802cc00:	2101      	movs	r1, #1
 802cc02:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802cc06:	2100      	movs	r1, #0
 802cc08:	45e3      	cmp	fp, ip
 802cc0a:	f8a4 8014 	strh.w	r8, [r4, #20]
 802cc0e:	82e2      	strh	r2, [r4, #22]
 802cc10:	8321      	strh	r1, [r4, #24]
 802cc12:	8361      	strh	r1, [r4, #26]
 802cc14:	44be      	add	lr, r7
 802cc16:	d049      	beq.n	802ccac <_ZN8touchgfx7Outline10renderLineEiiii+0xbc4>
 802cc18:	9b03      	ldr	r3, [sp, #12]
 802cc1a:	eba3 060e 	sub.w	r6, r3, lr
 802cc1e:	443e      	add	r6, r7
 802cc20:	9b00      	ldr	r3, [sp, #0]
 802cc22:	0176      	lsls	r6, r6, #5
 802cc24:	fb96 f7f3 	sdiv	r7, r6, r3
 802cc28:	fb03 6617 	mls	r6, r3, r7, r6
 802cc2c:	428e      	cmp	r6, r1
 802cc2e:	bfb8      	it	lt
 802cc30:	18f6      	addlt	r6, r6, r3
 802cc32:	9b00      	ldr	r3, [sp, #0]
 802cc34:	bfb8      	it	lt
 802cc36:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cc3a:	1aed      	subs	r5, r5, r3
 802cc3c:	1c7b      	adds	r3, r7, #1
 802cc3e:	9307      	str	r3, [sp, #28]
 802cc40:	f04f 0900 	mov.w	r9, #0
 802cc44:	19ad      	adds	r5, r5, r6
 802cc46:	bf5e      	ittt	pl
 802cc48:	9b00      	ldrpl	r3, [sp, #0]
 802cc4a:	9807      	ldrpl	r0, [sp, #28]
 802cc4c:	1aed      	subpl	r5, r5, r3
 802cc4e:	9b02      	ldr	r3, [sp, #8]
 802cc50:	bf48      	it	mi
 802cc52:	4638      	movmi	r0, r7
 802cc54:	fa0f f880 	sxth.w	r8, r0
 802cc58:	0141      	lsls	r1, r0, #5
 802cc5a:	449c      	add	ip, r3
 802cc5c:	4486      	add	lr, r0
 802cc5e:	9b04      	ldr	r3, [sp, #16]
 802cc60:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802cc64:	f8a4 8018 	strh.w	r8, [r4, #24]
 802cc68:	fa0f fa8c 	sxth.w	sl, ip
 802cc6c:	4418      	add	r0, r3
 802cc6e:	4453      	add	r3, sl
 802cc70:	b209      	sxth	r1, r1
 802cc72:	4298      	cmp	r0, r3
 802cc74:	8361      	strh	r1, [r4, #26]
 802cc76:	f43f aaea 	beq.w	802c24e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cc7a:	ea58 0301 	orrs.w	r3, r8, r1
 802cc7e:	d00c      	beq.n	802cc9a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc80:	2a00      	cmp	r2, #0
 802cc82:	db0a      	blt.n	802cc9a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cc86:	428a      	cmp	r2, r1
 802cc88:	da07      	bge.n	802cc9a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc8a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cc8e:	4288      	cmp	r0, r1
 802cc90:	d334      	bcc.n	802ccfc <_ZN8touchgfx7Outline10renderLineEiiii+0xc14>
 802cc92:	f04f 0301 	mov.w	r3, #1
 802cc96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cc9a:	45e3      	cmp	fp, ip
 802cc9c:	f8a4 a014 	strh.w	sl, [r4, #20]
 802cca0:	82e2      	strh	r2, [r4, #22]
 802cca2:	f8a4 9018 	strh.w	r9, [r4, #24]
 802cca6:	f8a4 901a 	strh.w	r9, [r4, #26]
 802ccaa:	d1cb      	bne.n	802cc44 <_ZN8touchgfx7Outline10renderLineEiiii+0xb5c>
 802ccac:	9b03      	ldr	r3, [sp, #12]
 802ccae:	9e05      	ldr	r6, [sp, #20]
 802ccb0:	eba3 0e0e 	sub.w	lr, r3, lr
 802ccb4:	9b01      	ldr	r3, [sp, #4]
 802ccb6:	f8a4 e018 	strh.w	lr, [r4, #24]
 802ccba:	3620      	adds	r6, #32
 802ccbc:	1af6      	subs	r6, r6, r3
 802ccbe:	fb0e fe06 	mul.w	lr, lr, r6
 802ccc2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802ccc6:	f7ff bb42 	b.w	802c34e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802ccca:	9b00      	ldr	r3, [sp, #0]
 802cccc:	f04f 31ff 	mov.w	r1, #4294967295
 802ccd0:	425b      	negs	r3, r3
 802ccd2:	9102      	str	r1, [sp, #8]
 802ccd4:	4355      	muls	r5, r2
 802ccd6:	9300      	str	r3, [sp, #0]
 802ccd8:	2100      	movs	r1, #0
 802ccda:	e75d      	b.n	802cb98 <_ZN8touchgfx7Outline10renderLineEiiii+0xab0>
 802ccdc:	f104 0614 	add.w	r6, r4, #20
 802cce0:	ce03      	ldmia	r6!, {r0, r1}
 802cce2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802cce6:	f8c9 0000 	str.w	r0, [r9]
 802ccea:	f8c9 1004 	str.w	r1, [r9, #4]
 802ccee:	6921      	ldr	r1, [r4, #16]
 802ccf0:	3108      	adds	r1, #8
 802ccf2:	6121      	str	r1, [r4, #16]
 802ccf4:	68a1      	ldr	r1, [r4, #8]
 802ccf6:	3101      	adds	r1, #1
 802ccf8:	60a1      	str	r1, [r4, #8]
 802ccfa:	e784      	b.n	802cc06 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802ccfc:	f104 0814 	add.w	r8, r4, #20
 802cd00:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802cd04:	6923      	ldr	r3, [r4, #16]
 802cd06:	9306      	str	r3, [sp, #24]
 802cd08:	6018      	str	r0, [r3, #0]
 802cd0a:	6059      	str	r1, [r3, #4]
 802cd0c:	6921      	ldr	r1, [r4, #16]
 802cd0e:	3108      	adds	r1, #8
 802cd10:	6121      	str	r1, [r4, #16]
 802cd12:	68a1      	ldr	r1, [r4, #8]
 802cd14:	3101      	adds	r1, #1
 802cd16:	60a1      	str	r1, [r4, #8]
 802cd18:	e7bf      	b.n	802cc9a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cd1a:	bf00      	nop

0802cd1c <_ZN8touchgfx7Outline6lineToEii>:
 802cd1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802cd1e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802cd20:	079b      	lsls	r3, r3, #30
 802cd22:	4604      	mov	r4, r0
 802cd24:	460d      	mov	r5, r1
 802cd26:	4616      	mov	r6, r2
 802cd28:	d526      	bpl.n	802cd78 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802cd2a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802cd2e:	ea85 0001 	eor.w	r0, r5, r1
 802cd32:	ea86 0302 	eor.w	r3, r6, r2
 802cd36:	4303      	orrs	r3, r0
 802cd38:	d01e      	beq.n	802cd78 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802cd3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802cd3c:	9600      	str	r6, [sp, #0]
 802cd3e:	114b      	asrs	r3, r1, #5
 802cd40:	4283      	cmp	r3, r0
 802cd42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802cd44:	bfb8      	it	lt
 802cd46:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802cd48:	3301      	adds	r3, #1
 802cd4a:	4283      	cmp	r3, r0
 802cd4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802cd4e:	bfc8      	it	gt
 802cd50:	6363      	strgt	r3, [r4, #52]	; 0x34
 802cd52:	116b      	asrs	r3, r5, #5
 802cd54:	4283      	cmp	r3, r0
 802cd56:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802cd58:	bfb8      	it	lt
 802cd5a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802cd5c:	3301      	adds	r3, #1
 802cd5e:	4283      	cmp	r3, r0
 802cd60:	bfc8      	it	gt
 802cd62:	6363      	strgt	r3, [r4, #52]	; 0x34
 802cd64:	4620      	mov	r0, r4
 802cd66:	462b      	mov	r3, r5
 802cd68:	f7ff f9be 	bl	802c0e8 <_ZN8touchgfx7Outline10renderLineEiiii>
 802cd6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cd6e:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802cd72:	f043 0301 	orr.w	r3, r3, #1
 802cd76:	63e3      	str	r3, [r4, #60]	; 0x3c
 802cd78:	b002      	add	sp, #8
 802cd7a:	bd70      	pop	{r4, r5, r6, pc}

0802cd7c <_ZN8touchgfx7Outline6moveToEii>:
 802cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cd7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802cd80:	4615      	mov	r5, r2
 802cd82:	079a      	lsls	r2, r3, #30
 802cd84:	4604      	mov	r4, r0
 802cd86:	460e      	mov	r6, r1
 802cd88:	d401      	bmi.n	802cd8e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802cd8a:	f7ff f967 	bl	802c05c <_ZN8touchgfx7Outline5resetEv>
 802cd8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cd90:	07db      	lsls	r3, r3, #31
 802cd92:	d504      	bpl.n	802cd9e <_ZN8touchgfx7Outline6moveToEii+0x22>
 802cd94:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802cd98:	4620      	mov	r0, r4
 802cd9a:	f7ff ffbf 	bl	802cd1c <_ZN8touchgfx7Outline6lineToEii>
 802cd9e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802cda2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802cda6:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802cdaa:	f345 174f 	sbfx	r7, r5, #5, #16
 802cdae:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802cdb2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802cdb6:	428a      	cmp	r2, r1
 802cdb8:	d015      	beq.n	802cde6 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802cdba:	8b61      	ldrh	r1, [r4, #26]
 802cdbc:	8b22      	ldrh	r2, [r4, #24]
 802cdbe:	430a      	orrs	r2, r1
 802cdc0:	d00b      	beq.n	802cdda <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802cdc2:	2b00      	cmp	r3, #0
 802cdc4:	db09      	blt.n	802cdda <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802cdc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802cdc8:	4293      	cmp	r3, r2
 802cdca:	da06      	bge.n	802cdda <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802cdcc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802cdd0:	429a      	cmp	r2, r3
 802cdd2:	d30d      	bcc.n	802cdf0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802cdd4:	2301      	movs	r3, #1
 802cdd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cdda:	2300      	movs	r3, #0
 802cddc:	f8a4 c014 	strh.w	ip, [r4, #20]
 802cde0:	82e7      	strh	r7, [r4, #22]
 802cde2:	8323      	strh	r3, [r4, #24]
 802cde4:	8363      	strh	r3, [r4, #26]
 802cde6:	61e6      	str	r6, [r4, #28]
 802cde8:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802cdec:	62a5      	str	r5, [r4, #40]	; 0x28
 802cdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cdf0:	f104 0314 	add.w	r3, r4, #20
 802cdf4:	cb03      	ldmia	r3!, {r0, r1}
 802cdf6:	6922      	ldr	r2, [r4, #16]
 802cdf8:	6010      	str	r0, [r2, #0]
 802cdfa:	6051      	str	r1, [r2, #4]
 802cdfc:	6923      	ldr	r3, [r4, #16]
 802cdfe:	3308      	adds	r3, #8
 802ce00:	6123      	str	r3, [r4, #16]
 802ce02:	68a3      	ldr	r3, [r4, #8]
 802ce04:	3301      	adds	r3, #1
 802ce06:	60a3      	str	r3, [r4, #8]
 802ce08:	e7e7      	b.n	802cdda <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802ce0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802ce0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce0e:	b0d1      	sub	sp, #324	; 0x144
 802ce10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802ce14:	466c      	mov	r4, sp
 802ce16:	1a0d      	subs	r5, r1, r0
 802ce18:	2d48      	cmp	r5, #72	; 0x48
 802ce1a:	f100 0208 	add.w	r2, r0, #8
 802ce1e:	f340 80bb 	ble.w	802cf98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802ce22:	112d      	asrs	r5, r5, #4
 802ce24:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802ce28:	f9b0 8000 	ldrsh.w	r8, [r0]
 802ce2c:	681e      	ldr	r6, [r3, #0]
 802ce2e:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802ce32:	6006      	str	r6, [r0, #0]
 802ce34:	685e      	ldr	r6, [r3, #4]
 802ce36:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802ce3a:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802ce3e:	6046      	str	r6, [r0, #4]
 802ce40:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802ce44:	f8a3 e002 	strh.w	lr, [r3, #2]
 802ce48:	f8a3 c004 	strh.w	ip, [r3, #4]
 802ce4c:	80df      	strh	r7, [r3, #6]
 802ce4e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802ce52:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802ce56:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802ce5a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802ce5e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802ce62:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802ce66:	4565      	cmp	r5, ip
 802ce68:	f1a1 0308 	sub.w	r3, r1, #8
 802ce6c:	da0f      	bge.n	802ce8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802ce6e:	681d      	ldr	r5, [r3, #0]
 802ce70:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802ce74:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802ce78:	6015      	str	r5, [r2, #0]
 802ce7a:	685d      	ldr	r5, [r3, #4]
 802ce7c:	6055      	str	r5, [r2, #4]
 802ce7e:	f821 7c08 	strh.w	r7, [r1, #-8]
 802ce82:	f821 6c06 	strh.w	r6, [r1, #-6]
 802ce86:	f821 ec04 	strh.w	lr, [r1, #-4]
 802ce8a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802ce8e:	f9b0 7000 	ldrsh.w	r7, [r0]
 802ce92:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802ce96:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802ce9a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802ce9e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802cea2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802cea6:	45ac      	cmp	ip, r5
 802cea8:	da0d      	bge.n	802cec6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802ceaa:	6815      	ldr	r5, [r2, #0]
 802ceac:	6005      	str	r5, [r0, #0]
 802ceae:	6855      	ldr	r5, [r2, #4]
 802ceb0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802ceb4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802ceb8:	8107      	strh	r7, [r0, #8]
 802ceba:	6045      	str	r5, [r0, #4]
 802cebc:	8146      	strh	r6, [r0, #10]
 802cebe:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802cec2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802cec6:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802ceca:	f9b0 7000 	ldrsh.w	r7, [r0]
 802cece:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802ced2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802ced6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802ceda:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802cede:	4565      	cmp	r5, ip
 802cee0:	da0f      	bge.n	802cf02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802cee2:	681d      	ldr	r5, [r3, #0]
 802cee4:	6005      	str	r5, [r0, #0]
 802cee6:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802ceea:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802ceee:	685d      	ldr	r5, [r3, #4]
 802cef0:	6045      	str	r5, [r0, #4]
 802cef2:	f821 7c08 	strh.w	r7, [r1, #-8]
 802cef6:	f821 6c06 	strh.w	r6, [r1, #-6]
 802cefa:	f821 ec04 	strh.w	lr, [r1, #-4]
 802cefe:	f821 cc02 	strh.w	ip, [r1, #-2]
 802cf02:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802cf06:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802cf0a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802cf0e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802cf12:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802cf16:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802cf1a:	f102 0508 	add.w	r5, r2, #8
 802cf1e:	4556      	cmp	r6, sl
 802cf20:	462f      	mov	r7, r5
 802cf22:	db18      	blt.n	802cf56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802cf24:	3b08      	subs	r3, #8
 802cf26:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802cf2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802cf2e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802cf32:	45b2      	cmp	sl, r6
 802cf34:	dbf6      	blt.n	802cf24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802cf36:	42ab      	cmp	r3, r5
 802cf38:	681e      	ldr	r6, [r3, #0]
 802cf3a:	d30e      	bcc.n	802cf5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802cf3c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802cf40:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802cf44:	602e      	str	r6, [r5, #0]
 802cf46:	685e      	ldr	r6, [r3, #4]
 802cf48:	606e      	str	r6, [r5, #4]
 802cf4a:	f8a3 9000 	strh.w	r9, [r3]
 802cf4e:	f8a3 8002 	strh.w	r8, [r3, #2]
 802cf52:	809f      	strh	r7, [r3, #4]
 802cf54:	80da      	strh	r2, [r3, #6]
 802cf56:	462a      	mov	r2, r5
 802cf58:	e7d3      	b.n	802cf02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802cf5a:	6006      	str	r6, [r0, #0]
 802cf5c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802cf60:	685e      	ldr	r6, [r3, #4]
 802cf62:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802cf66:	6046      	str	r6, [r0, #4]
 802cf68:	80da      	strh	r2, [r3, #6]
 802cf6a:	1b4a      	subs	r2, r1, r5
 802cf6c:	1a1e      	subs	r6, r3, r0
 802cf6e:	10d2      	asrs	r2, r2, #3
 802cf70:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802cf74:	bfb8      	it	lt
 802cf76:	e9c4 0300 	strdlt	r0, r3, [r4]
 802cf7a:	f8a3 e000 	strh.w	lr, [r3]
 802cf7e:	f8a3 c002 	strh.w	ip, [r3, #2]
 802cf82:	f8a3 8004 	strh.w	r8, [r3, #4]
 802cf86:	bfaa      	itet	ge
 802cf88:	4607      	movge	r7, r0
 802cf8a:	460b      	movlt	r3, r1
 802cf8c:	e9c4 5100 	strdge	r5, r1, [r4]
 802cf90:	4638      	mov	r0, r7
 802cf92:	3408      	adds	r4, #8
 802cf94:	4619      	mov	r1, r3
 802cf96:	e73e      	b.n	802ce16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802cf98:	4291      	cmp	r1, r2
 802cf9a:	d926      	bls.n	802cfea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 802cf9c:	f1a2 0310 	sub.w	r3, r2, #16
 802cfa0:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802cfa4:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802cfa8:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802cfac:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802cfb0:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802cfb4:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802cfb8:	42ae      	cmp	r6, r5
 802cfba:	da14      	bge.n	802cfe6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802cfbc:	461d      	mov	r5, r3
 802cfbe:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802cfc2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802cfc6:	611e      	str	r6, [r3, #16]
 802cfc8:	686e      	ldr	r6, [r5, #4]
 802cfca:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802cfce:	f8a3 c008 	strh.w	ip, [r3, #8]
 802cfd2:	42a8      	cmp	r0, r5
 802cfd4:	615e      	str	r6, [r3, #20]
 802cfd6:	815f      	strh	r7, [r3, #10]
 802cfd8:	f8a3 800c 	strh.w	r8, [r3, #12]
 802cfdc:	f8a3 e00e 	strh.w	lr, [r3, #14]
 802cfe0:	f1a3 0308 	sub.w	r3, r3, #8
 802cfe4:	d1dc      	bne.n	802cfa0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 802cfe6:	3208      	adds	r2, #8
 802cfe8:	e7d6      	b.n	802cf98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802cfea:	466b      	mov	r3, sp
 802cfec:	429c      	cmp	r4, r3
 802cfee:	d903      	bls.n	802cff8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802cff0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802cff4:	3c08      	subs	r4, #8
 802cff6:	e70e      	b.n	802ce16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802cff8:	b051      	add	sp, #324	; 0x144
 802cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802cffe <_ZN8touchgfx7Outline9sortCellsEv>:
 802cffe:	6881      	ldr	r1, [r0, #8]
 802d000:	b111      	cbz	r1, 802d008 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802d002:	68c0      	ldr	r0, [r0, #12]
 802d004:	f7ff bf01 	b.w	802ce0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802d008:	4770      	bx	lr

0802d00a <_ZN8touchgfx7Outline8getCellsEv>:
 802d00a:	b510      	push	{r4, lr}
 802d00c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802d00e:	07da      	lsls	r2, r3, #31
 802d010:	4604      	mov	r4, r0
 802d012:	d507      	bpl.n	802d024 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802d014:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802d018:	f7ff fe80 	bl	802cd1c <_ZN8touchgfx7Outline6lineToEii>
 802d01c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d01e:	f023 0301 	bic.w	r3, r3, #1
 802d022:	63e3      	str	r3, [r4, #60]	; 0x3c
 802d024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d026:	079b      	lsls	r3, r3, #30
 802d028:	d51a      	bpl.n	802d060 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802d02a:	8b62      	ldrh	r2, [r4, #26]
 802d02c:	8b23      	ldrh	r3, [r4, #24]
 802d02e:	4313      	orrs	r3, r2
 802d030:	d00d      	beq.n	802d04e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802d032:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802d036:	2b00      	cmp	r3, #0
 802d038:	db09      	blt.n	802d04e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802d03a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802d03c:	4293      	cmp	r3, r2
 802d03e:	da06      	bge.n	802d04e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802d040:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802d044:	429a      	cmp	r2, r3
 802d046:	d80d      	bhi.n	802d064 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802d048:	2301      	movs	r3, #1
 802d04a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802d04e:	68a0      	ldr	r0, [r4, #8]
 802d050:	b138      	cbz	r0, 802d062 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802d052:	4620      	mov	r0, r4
 802d054:	f7ff ffd3 	bl	802cffe <_ZN8touchgfx7Outline9sortCellsEv>
 802d058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d05a:	f023 0302 	bic.w	r3, r3, #2
 802d05e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802d060:	68e0      	ldr	r0, [r4, #12]
 802d062:	bd10      	pop	{r4, pc}
 802d064:	f104 0314 	add.w	r3, r4, #20
 802d068:	cb03      	ldmia	r3!, {r0, r1}
 802d06a:	6922      	ldr	r2, [r4, #16]
 802d06c:	6010      	str	r0, [r2, #0]
 802d06e:	6051      	str	r1, [r2, #4]
 802d070:	6923      	ldr	r3, [r4, #16]
 802d072:	3308      	adds	r3, #8
 802d074:	6123      	str	r3, [r4, #16]
 802d076:	68a3      	ldr	r3, [r4, #8]
 802d078:	3301      	adds	r3, #1
 802d07a:	60a3      	str	r3, [r4, #8]
 802d07c:	e7e7      	b.n	802d04e <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

0802d080 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 802d080:	b538      	push	{r3, r4, r5, lr}
 802d082:	4c2b      	ldr	r4, [pc, #172]	; (802d130 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 802d084:	4b2b      	ldr	r3, [pc, #172]	; (802d134 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 802d086:	6821      	ldr	r1, [r4, #0]
 802d088:	681a      	ldr	r2, [r3, #0]
 802d08a:	4d2b      	ldr	r5, [pc, #172]	; (802d138 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802d08c:	4281      	cmp	r1, r0
 802d08e:	492b      	ldr	r1, [pc, #172]	; (802d13c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 802d090:	d108      	bne.n	802d0a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802d092:	682b      	ldr	r3, [r5, #0]
 802d094:	4293      	cmp	r3, r2
 802d096:	d105      	bne.n	802d0a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802d098:	6808      	ldr	r0, [r1, #0]
 802d09a:	280f      	cmp	r0, #15
 802d09c:	bf94      	ite	ls
 802d09e:	2000      	movls	r0, #0
 802d0a0:	2001      	movhi	r0, #1
 802d0a2:	bd38      	pop	{r3, r4, r5, pc}
 802d0a4:	4b26      	ldr	r3, [pc, #152]	; (802d140 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 802d0a6:	6020      	str	r0, [r4, #0]
 802d0a8:	681b      	ldr	r3, [r3, #0]
 802d0aa:	602a      	str	r2, [r5, #0]
 802d0ac:	4298      	cmp	r0, r3
 802d0ae:	d905      	bls.n	802d0bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 802d0b0:	4b24      	ldr	r3, [pc, #144]	; (802d144 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d0b2:	4a25      	ldr	r2, [pc, #148]	; (802d148 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d0b4:	2137      	movs	r1, #55	; 0x37
 802d0b6:	4825      	ldr	r0, [pc, #148]	; (802d14c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 802d0b8:	f000 ff32 	bl	802df20 <__assert_func>
 802d0bc:	f010 0403 	ands.w	r4, r0, #3
 802d0c0:	bf1f      	itttt	ne
 802d0c2:	f1c4 0504 	rsbne	r5, r4, #4
 802d0c6:	3b04      	subne	r3, #4
 802d0c8:	1952      	addne	r2, r2, r5
 802d0ca:	191b      	addne	r3, r3, r4
 802d0cc:	4402      	add	r2, r0
 802d0ce:	1a1b      	subs	r3, r3, r0
 802d0d0:	3001      	adds	r0, #1
 802d0d2:	f020 0401 	bic.w	r4, r0, #1
 802d0d6:	4d1e      	ldr	r5, [pc, #120]	; (802d150 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802d0d8:	42a3      	cmp	r3, r4
 802d0da:	602a      	str	r2, [r5, #0]
 802d0dc:	d203      	bcs.n	802d0e6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802d0de:	4b19      	ldr	r3, [pc, #100]	; (802d144 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d0e0:	4a19      	ldr	r2, [pc, #100]	; (802d148 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d0e2:	214a      	movs	r1, #74	; 0x4a
 802d0e4:	e7e7      	b.n	802d0b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d0e6:	f010 0002 	ands.w	r0, r0, #2
 802d0ea:	bf1f      	itttt	ne
 802d0ec:	f1c0 0504 	rsbne	r5, r0, #4
 802d0f0:	1952      	addne	r2, r2, r5
 802d0f2:	1f05      	subne	r5, r0, #4
 802d0f4:	195b      	addne	r3, r3, r5
 802d0f6:	1b1b      	subs	r3, r3, r4
 802d0f8:	4d16      	ldr	r5, [pc, #88]	; (802d154 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 802d0fa:	4422      	add	r2, r4
 802d0fc:	429c      	cmp	r4, r3
 802d0fe:	602a      	str	r2, [r5, #0]
 802d100:	d903      	bls.n	802d10a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 802d102:	4b10      	ldr	r3, [pc, #64]	; (802d144 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d104:	4a10      	ldr	r2, [pc, #64]	; (802d148 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d106:	215d      	movs	r1, #93	; 0x5d
 802d108:	e7d5      	b.n	802d0b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d10a:	b120      	cbz	r0, 802d116 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 802d10c:	f1c0 0504 	rsb	r5, r0, #4
 802d110:	3804      	subs	r0, #4
 802d112:	442a      	add	r2, r5
 802d114:	4403      	add	r3, r0
 802d116:	1b1b      	subs	r3, r3, r4
 802d118:	480f      	ldr	r0, [pc, #60]	; (802d158 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 802d11a:	600b      	str	r3, [r1, #0]
 802d11c:	4422      	add	r2, r4
 802d11e:	2b0f      	cmp	r3, #15
 802d120:	6002      	str	r2, [r0, #0]
 802d122:	d803      	bhi.n	802d12c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 802d124:	4b0d      	ldr	r3, [pc, #52]	; (802d15c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 802d126:	4a08      	ldr	r2, [pc, #32]	; (802d148 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d128:	2170      	movs	r1, #112	; 0x70
 802d12a:	e7c4      	b.n	802d0b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d12c:	2001      	movs	r0, #1
 802d12e:	e7b8      	b.n	802d0a2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 802d130:	200098ac 	.word	0x200098ac
 802d134:	200098a4 	.word	0x200098a4
 802d138:	200098b4 	.word	0x200098b4
 802d13c:	200098bc 	.word	0x200098bc
 802d140:	200098b8 	.word	0x200098b8
 802d144:	0803361c 	.word	0x0803361c
 802d148:	080336e4 	.word	0x080336e4
 802d14c:	08033655 	.word	0x08033655
 802d150:	200098c0 	.word	0x200098c0
 802d154:	200098b0 	.word	0x200098b0
 802d158:	200098a8 	.word	0x200098a8
 802d15c:	0803369f 	.word	0x0803369f

0802d160 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 802d160:	4b04      	ldr	r3, [pc, #16]	; (802d174 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 802d162:	6818      	ldr	r0, [r3, #0]
 802d164:	b120      	cbz	r0, 802d170 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 802d166:	4b04      	ldr	r3, [pc, #16]	; (802d178 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 802d168:	6818      	ldr	r0, [r3, #0]
 802d16a:	3000      	adds	r0, #0
 802d16c:	bf18      	it	ne
 802d16e:	2001      	movne	r0, #1
 802d170:	4770      	bx	lr
 802d172:	bf00      	nop
 802d174:	200098a4 	.word	0x200098a4
 802d178:	200098b8 	.word	0x200098b8

0802d17c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 802d17c:	4b01      	ldr	r3, [pc, #4]	; (802d184 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 802d17e:	6818      	ldr	r0, [r3, #0]
 802d180:	4770      	bx	lr
 802d182:	bf00      	nop
 802d184:	200098ac 	.word	0x200098ac

0802d188 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 802d188:	4b01      	ldr	r3, [pc, #4]	; (802d190 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 802d18a:	6818      	ldr	r0, [r3, #0]
 802d18c:	4770      	bx	lr
 802d18e:	bf00      	nop
 802d190:	200098b4 	.word	0x200098b4

0802d194 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 802d194:	4b01      	ldr	r3, [pc, #4]	; (802d19c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 802d196:	6818      	ldr	r0, [r3, #0]
 802d198:	4770      	bx	lr
 802d19a:	bf00      	nop
 802d19c:	200098c0 	.word	0x200098c0

0802d1a0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 802d1a0:	4b01      	ldr	r3, [pc, #4]	; (802d1a8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 802d1a2:	6818      	ldr	r0, [r3, #0]
 802d1a4:	4770      	bx	lr
 802d1a6:	bf00      	nop
 802d1a8:	200098b0 	.word	0x200098b0

0802d1ac <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 802d1ac:	4b01      	ldr	r3, [pc, #4]	; (802d1b4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 802d1ae:	6818      	ldr	r0, [r3, #0]
 802d1b0:	4770      	bx	lr
 802d1b2:	bf00      	nop
 802d1b4:	200098a8 	.word	0x200098a8

0802d1b8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 802d1b8:	4b01      	ldr	r3, [pc, #4]	; (802d1c0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 802d1ba:	6818      	ldr	r0, [r3, #0]
 802d1bc:	4770      	bx	lr
 802d1be:	bf00      	nop
 802d1c0:	200098bc 	.word	0x200098bc

0802d1c4 <_ZN8touchgfx8ScanlineD1Ev>:
 802d1c4:	4770      	bx	lr

0802d1c6 <_ZN8touchgfx8ScanlineD0Ev>:
 802d1c6:	b510      	push	{r4, lr}
 802d1c8:	2124      	movs	r1, #36	; 0x24
 802d1ca:	4604      	mov	r4, r0
 802d1cc:	f000 f889 	bl	802d2e2 <_ZdlPvj>
 802d1d0:	4620      	mov	r0, r4
 802d1d2:	bd10      	pop	{r4, pc}

0802d1d4 <_ZN8touchgfx8Scanline5resetEv>:
 802d1d4:	b510      	push	{r4, lr}
 802d1d6:	4604      	mov	r4, r0
 802d1d8:	f7ff ffd6 	bl	802d188 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802d1dc:	61a0      	str	r0, [r4, #24]
 802d1de:	f7ff ffd9 	bl	802d194 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802d1e2:	61e0      	str	r0, [r4, #28]
 802d1e4:	f7ff ffdc 	bl	802d1a0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802d1e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d1ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802d1f0:	69e3      	ldr	r3, [r4, #28]
 802d1f2:	6123      	str	r3, [r4, #16]
 802d1f4:	2300      	movs	r3, #0
 802d1f6:	6220      	str	r0, [r4, #32]
 802d1f8:	6160      	str	r0, [r4, #20]
 802d1fa:	60e3      	str	r3, [r4, #12]
 802d1fc:	bd10      	pop	{r4, pc}
	...

0802d200 <_ZN8touchgfx8ScanlineC1Ev>:
 802d200:	b510      	push	{r4, lr}
 802d202:	4b09      	ldr	r3, [pc, #36]	; (802d228 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802d204:	6003      	str	r3, [r0, #0]
 802d206:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d20a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802d20e:	2300      	movs	r3, #0
 802d210:	4604      	mov	r4, r0
 802d212:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802d216:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802d21a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802d21e:	f7ff ffd9 	bl	802d1d4 <_ZN8touchgfx8Scanline5resetEv>
 802d222:	4620      	mov	r0, r4
 802d224:	bd10      	pop	{r4, pc}
 802d226:	bf00      	nop
 802d228:	08033738 	.word	0x08033738

0802d22c <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802d22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d230:	1e0c      	subs	r4, r1, #0
 802d232:	4605      	mov	r5, r0
 802d234:	4617      	mov	r7, r2
 802d236:	461e      	mov	r6, r3
 802d238:	da03      	bge.n	802d242 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802d23a:	4426      	add	r6, r4
 802d23c:	2e01      	cmp	r6, #1
 802d23e:	d421      	bmi.n	802d284 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d240:	2400      	movs	r4, #0
 802d242:	f7ff ff9b 	bl	802d17c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d246:	42a0      	cmp	r0, r4
 802d248:	dd1c      	ble.n	802d284 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d24a:	f7ff ff97 	bl	802d17c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d24e:	eb04 0806 	add.w	r8, r4, r6
 802d252:	4580      	cmp	r8, r0
 802d254:	d902      	bls.n	802d25c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802d256:	f7ff ff91 	bl	802d17c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d25a:	1b06      	subs	r6, r0, r4
 802d25c:	69a8      	ldr	r0, [r5, #24]
 802d25e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802d262:	4632      	mov	r2, r6
 802d264:	4420      	add	r0, r4
 802d266:	f7f0 f83d 	bl	801d2e4 <_ZN8touchgfx6memsetEPvhm>
 802d26a:	686b      	ldr	r3, [r5, #4]
 802d26c:	3301      	adds	r3, #1
 802d26e:	42a3      	cmp	r3, r4
 802d270:	b2b2      	uxth	r2, r6
 802d272:	696b      	ldr	r3, [r5, #20]
 802d274:	d108      	bne.n	802d288 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802d276:	8819      	ldrh	r1, [r3, #0]
 802d278:	440a      	add	r2, r1
 802d27a:	801a      	strh	r2, [r3, #0]
 802d27c:	3c01      	subs	r4, #1
 802d27e:	4434      	add	r4, r6
 802d280:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d288:	1c99      	adds	r1, r3, #2
 802d28a:	6169      	str	r1, [r5, #20]
 802d28c:	805a      	strh	r2, [r3, #2]
 802d28e:	692b      	ldr	r3, [r5, #16]
 802d290:	1c9a      	adds	r2, r3, #2
 802d292:	612a      	str	r2, [r5, #16]
 802d294:	805c      	strh	r4, [r3, #2]
 802d296:	68eb      	ldr	r3, [r5, #12]
 802d298:	3301      	adds	r3, #1
 802d29a:	60eb      	str	r3, [r5, #12]
 802d29c:	e7ee      	b.n	802d27c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802d29e <_ZN8touchgfx15RenderingBufferD1Ev>:
 802d29e:	4770      	bx	lr

0802d2a0 <_ZN8touchgfx15RenderingBufferD0Ev>:
 802d2a0:	b510      	push	{r4, lr}
 802d2a2:	2118      	movs	r1, #24
 802d2a4:	4604      	mov	r4, r0
 802d2a6:	f000 f81c 	bl	802d2e2 <_ZdlPvj>
 802d2aa:	4620      	mov	r0, r4
 802d2ac:	bd10      	pop	{r4, pc}
	...

0802d2b0 <_ZN8touchgfx15RenderingBufferC1Ev>:
 802d2b0:	4a04      	ldr	r2, [pc, #16]	; (802d2c4 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802d2b2:	6002      	str	r2, [r0, #0]
 802d2b4:	2200      	movs	r2, #0
 802d2b6:	6042      	str	r2, [r0, #4]
 802d2b8:	7202      	strb	r2, [r0, #8]
 802d2ba:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802d2be:	6142      	str	r2, [r0, #20]
 802d2c0:	4770      	bx	lr
 802d2c2:	bf00      	nop
 802d2c4:	08033748 	.word	0x08033748

0802d2c8 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802d2c8:	60c3      	str	r3, [r0, #12]
 802d2ca:	9b00      	ldr	r3, [sp, #0]
 802d2cc:	6103      	str	r3, [r0, #16]
 802d2ce:	9b01      	ldr	r3, [sp, #4]
 802d2d0:	6041      	str	r1, [r0, #4]
 802d2d2:	7202      	strb	r2, [r0, #8]
 802d2d4:	6143      	str	r3, [r0, #20]
 802d2d6:	4770      	bx	lr

0802d2d8 <__aeabi_atexit>:
 802d2d8:	460b      	mov	r3, r1
 802d2da:	4601      	mov	r1, r0
 802d2dc:	4618      	mov	r0, r3
 802d2de:	f000 be4b 	b.w	802df78 <__cxa_atexit>

0802d2e2 <_ZdlPvj>:
 802d2e2:	f000 b812 	b.w	802d30a <_ZdlPv>

0802d2e6 <__cxa_guard_acquire>:
 802d2e6:	6803      	ldr	r3, [r0, #0]
 802d2e8:	07db      	lsls	r3, r3, #31
 802d2ea:	d406      	bmi.n	802d2fa <__cxa_guard_acquire+0x14>
 802d2ec:	7843      	ldrb	r3, [r0, #1]
 802d2ee:	b103      	cbz	r3, 802d2f2 <__cxa_guard_acquire+0xc>
 802d2f0:	deff      	udf	#255	; 0xff
 802d2f2:	2301      	movs	r3, #1
 802d2f4:	7043      	strb	r3, [r0, #1]
 802d2f6:	4618      	mov	r0, r3
 802d2f8:	4770      	bx	lr
 802d2fa:	2000      	movs	r0, #0
 802d2fc:	4770      	bx	lr

0802d2fe <__cxa_guard_release>:
 802d2fe:	2301      	movs	r3, #1
 802d300:	6003      	str	r3, [r0, #0]
 802d302:	4770      	bx	lr

0802d304 <__cxa_pure_virtual>:
 802d304:	b508      	push	{r3, lr}
 802d306:	f000 f80f 	bl	802d328 <_ZSt9terminatev>

0802d30a <_ZdlPv>:
 802d30a:	f000 bf81 	b.w	802e210 <free>

0802d30e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d30e:	b508      	push	{r3, lr}
 802d310:	4780      	blx	r0
 802d312:	f000 fdfd 	bl	802df10 <abort>
	...

0802d318 <_ZSt13get_terminatev>:
 802d318:	4b02      	ldr	r3, [pc, #8]	; (802d324 <_ZSt13get_terminatev+0xc>)
 802d31a:	6818      	ldr	r0, [r3, #0]
 802d31c:	f3bf 8f5b 	dmb	ish
 802d320:	4770      	bx	lr
 802d322:	bf00      	nop
 802d324:	20000094 	.word	0x20000094

0802d328 <_ZSt9terminatev>:
 802d328:	b508      	push	{r3, lr}
 802d32a:	f7ff fff5 	bl	802d318 <_ZSt13get_terminatev>
 802d32e:	f7ff ffee 	bl	802d30e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802d334 <ceilf>:
 802d334:	ee10 3a10 	vmov	r3, s0
 802d338:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d33c:	3a7f      	subs	r2, #127	; 0x7f
 802d33e:	2a16      	cmp	r2, #22
 802d340:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d344:	dc2a      	bgt.n	802d39c <ceilf+0x68>
 802d346:	2a00      	cmp	r2, #0
 802d348:	da11      	bge.n	802d36e <ceilf+0x3a>
 802d34a:	eddf 7a19 	vldr	s15, [pc, #100]	; 802d3b0 <ceilf+0x7c>
 802d34e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d352:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d35a:	dd05      	ble.n	802d368 <ceilf+0x34>
 802d35c:	2b00      	cmp	r3, #0
 802d35e:	db23      	blt.n	802d3a8 <ceilf+0x74>
 802d360:	2900      	cmp	r1, #0
 802d362:	bf18      	it	ne
 802d364:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802d368:	ee00 3a10 	vmov	s0, r3
 802d36c:	4770      	bx	lr
 802d36e:	4911      	ldr	r1, [pc, #68]	; (802d3b4 <ceilf+0x80>)
 802d370:	4111      	asrs	r1, r2
 802d372:	420b      	tst	r3, r1
 802d374:	d0fa      	beq.n	802d36c <ceilf+0x38>
 802d376:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802d3b0 <ceilf+0x7c>
 802d37a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d37e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d386:	ddef      	ble.n	802d368 <ceilf+0x34>
 802d388:	2b00      	cmp	r3, #0
 802d38a:	bfc2      	ittt	gt
 802d38c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802d390:	fa40 f202 	asrgt.w	r2, r0, r2
 802d394:	189b      	addgt	r3, r3, r2
 802d396:	ea23 0301 	bic.w	r3, r3, r1
 802d39a:	e7e5      	b.n	802d368 <ceilf+0x34>
 802d39c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d3a0:	d3e4      	bcc.n	802d36c <ceilf+0x38>
 802d3a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d3a6:	4770      	bx	lr
 802d3a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802d3ac:	e7dc      	b.n	802d368 <ceilf+0x34>
 802d3ae:	bf00      	nop
 802d3b0:	7149f2ca 	.word	0x7149f2ca
 802d3b4:	007fffff 	.word	0x007fffff

0802d3b8 <cosf>:
 802d3b8:	ee10 3a10 	vmov	r3, s0
 802d3bc:	b507      	push	{r0, r1, r2, lr}
 802d3be:	4a1c      	ldr	r2, [pc, #112]	; (802d430 <cosf+0x78>)
 802d3c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d3c4:	4293      	cmp	r3, r2
 802d3c6:	dc04      	bgt.n	802d3d2 <cosf+0x1a>
 802d3c8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802d434 <cosf+0x7c>
 802d3cc:	f000 f9f4 	bl	802d7b8 <__kernel_cosf>
 802d3d0:	e004      	b.n	802d3dc <cosf+0x24>
 802d3d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d3d6:	db04      	blt.n	802d3e2 <cosf+0x2a>
 802d3d8:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d3dc:	b003      	add	sp, #12
 802d3de:	f85d fb04 	ldr.w	pc, [sp], #4
 802d3e2:	4668      	mov	r0, sp
 802d3e4:	f000 f8ac 	bl	802d540 <__ieee754_rem_pio2f>
 802d3e8:	f000 0003 	and.w	r0, r0, #3
 802d3ec:	2801      	cmp	r0, #1
 802d3ee:	d007      	beq.n	802d400 <cosf+0x48>
 802d3f0:	2802      	cmp	r0, #2
 802d3f2:	d00e      	beq.n	802d412 <cosf+0x5a>
 802d3f4:	b9a0      	cbnz	r0, 802d420 <cosf+0x68>
 802d3f6:	eddd 0a01 	vldr	s1, [sp, #4]
 802d3fa:	ed9d 0a00 	vldr	s0, [sp]
 802d3fe:	e7e5      	b.n	802d3cc <cosf+0x14>
 802d400:	eddd 0a01 	vldr	s1, [sp, #4]
 802d404:	ed9d 0a00 	vldr	s0, [sp]
 802d408:	f000 fcc0 	bl	802dd8c <__kernel_sinf>
 802d40c:	eeb1 0a40 	vneg.f32	s0, s0
 802d410:	e7e4      	b.n	802d3dc <cosf+0x24>
 802d412:	eddd 0a01 	vldr	s1, [sp, #4]
 802d416:	ed9d 0a00 	vldr	s0, [sp]
 802d41a:	f000 f9cd 	bl	802d7b8 <__kernel_cosf>
 802d41e:	e7f5      	b.n	802d40c <cosf+0x54>
 802d420:	eddd 0a01 	vldr	s1, [sp, #4]
 802d424:	ed9d 0a00 	vldr	s0, [sp]
 802d428:	2001      	movs	r0, #1
 802d42a:	f000 fcaf 	bl	802dd8c <__kernel_sinf>
 802d42e:	e7d5      	b.n	802d3dc <cosf+0x24>
 802d430:	3f490fd8 	.word	0x3f490fd8
 802d434:	00000000 	.word	0x00000000

0802d438 <floorf>:
 802d438:	ee10 3a10 	vmov	r3, s0
 802d43c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d440:	3a7f      	subs	r2, #127	; 0x7f
 802d442:	2a16      	cmp	r2, #22
 802d444:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d448:	dc2a      	bgt.n	802d4a0 <floorf+0x68>
 802d44a:	2a00      	cmp	r2, #0
 802d44c:	da11      	bge.n	802d472 <floorf+0x3a>
 802d44e:	eddf 7a18 	vldr	s15, [pc, #96]	; 802d4b0 <floorf+0x78>
 802d452:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d456:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d45e:	dd05      	ble.n	802d46c <floorf+0x34>
 802d460:	2b00      	cmp	r3, #0
 802d462:	da23      	bge.n	802d4ac <floorf+0x74>
 802d464:	4a13      	ldr	r2, [pc, #76]	; (802d4b4 <floorf+0x7c>)
 802d466:	2900      	cmp	r1, #0
 802d468:	bf18      	it	ne
 802d46a:	4613      	movne	r3, r2
 802d46c:	ee00 3a10 	vmov	s0, r3
 802d470:	4770      	bx	lr
 802d472:	4911      	ldr	r1, [pc, #68]	; (802d4b8 <floorf+0x80>)
 802d474:	4111      	asrs	r1, r2
 802d476:	420b      	tst	r3, r1
 802d478:	d0fa      	beq.n	802d470 <floorf+0x38>
 802d47a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802d4b0 <floorf+0x78>
 802d47e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d482:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d48a:	ddef      	ble.n	802d46c <floorf+0x34>
 802d48c:	2b00      	cmp	r3, #0
 802d48e:	bfbe      	ittt	lt
 802d490:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802d494:	fa40 f202 	asrlt.w	r2, r0, r2
 802d498:	189b      	addlt	r3, r3, r2
 802d49a:	ea23 0301 	bic.w	r3, r3, r1
 802d49e:	e7e5      	b.n	802d46c <floorf+0x34>
 802d4a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d4a4:	d3e4      	bcc.n	802d470 <floorf+0x38>
 802d4a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d4aa:	4770      	bx	lr
 802d4ac:	2300      	movs	r3, #0
 802d4ae:	e7dd      	b.n	802d46c <floorf+0x34>
 802d4b0:	7149f2ca 	.word	0x7149f2ca
 802d4b4:	bf800000 	.word	0xbf800000
 802d4b8:	007fffff 	.word	0x007fffff

0802d4bc <sinf>:
 802d4bc:	ee10 3a10 	vmov	r3, s0
 802d4c0:	b507      	push	{r0, r1, r2, lr}
 802d4c2:	4a1d      	ldr	r2, [pc, #116]	; (802d538 <sinf+0x7c>)
 802d4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d4c8:	4293      	cmp	r3, r2
 802d4ca:	dc05      	bgt.n	802d4d8 <sinf+0x1c>
 802d4cc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802d53c <sinf+0x80>
 802d4d0:	2000      	movs	r0, #0
 802d4d2:	f000 fc5b 	bl	802dd8c <__kernel_sinf>
 802d4d6:	e004      	b.n	802d4e2 <sinf+0x26>
 802d4d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d4dc:	db04      	blt.n	802d4e8 <sinf+0x2c>
 802d4de:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d4e2:	b003      	add	sp, #12
 802d4e4:	f85d fb04 	ldr.w	pc, [sp], #4
 802d4e8:	4668      	mov	r0, sp
 802d4ea:	f000 f829 	bl	802d540 <__ieee754_rem_pio2f>
 802d4ee:	f000 0003 	and.w	r0, r0, #3
 802d4f2:	2801      	cmp	r0, #1
 802d4f4:	d008      	beq.n	802d508 <sinf+0x4c>
 802d4f6:	2802      	cmp	r0, #2
 802d4f8:	d00d      	beq.n	802d516 <sinf+0x5a>
 802d4fa:	b9b0      	cbnz	r0, 802d52a <sinf+0x6e>
 802d4fc:	eddd 0a01 	vldr	s1, [sp, #4]
 802d500:	ed9d 0a00 	vldr	s0, [sp]
 802d504:	2001      	movs	r0, #1
 802d506:	e7e4      	b.n	802d4d2 <sinf+0x16>
 802d508:	eddd 0a01 	vldr	s1, [sp, #4]
 802d50c:	ed9d 0a00 	vldr	s0, [sp]
 802d510:	f000 f952 	bl	802d7b8 <__kernel_cosf>
 802d514:	e7e5      	b.n	802d4e2 <sinf+0x26>
 802d516:	eddd 0a01 	vldr	s1, [sp, #4]
 802d51a:	ed9d 0a00 	vldr	s0, [sp]
 802d51e:	2001      	movs	r0, #1
 802d520:	f000 fc34 	bl	802dd8c <__kernel_sinf>
 802d524:	eeb1 0a40 	vneg.f32	s0, s0
 802d528:	e7db      	b.n	802d4e2 <sinf+0x26>
 802d52a:	eddd 0a01 	vldr	s1, [sp, #4]
 802d52e:	ed9d 0a00 	vldr	s0, [sp]
 802d532:	f000 f941 	bl	802d7b8 <__kernel_cosf>
 802d536:	e7f5      	b.n	802d524 <sinf+0x68>
 802d538:	3f490fd8 	.word	0x3f490fd8
 802d53c:	00000000 	.word	0x00000000

0802d540 <__ieee754_rem_pio2f>:
 802d540:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d542:	ee10 6a10 	vmov	r6, s0
 802d546:	4b8e      	ldr	r3, [pc, #568]	; (802d780 <__ieee754_rem_pio2f+0x240>)
 802d548:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802d54c:	429d      	cmp	r5, r3
 802d54e:	b087      	sub	sp, #28
 802d550:	eef0 7a40 	vmov.f32	s15, s0
 802d554:	4604      	mov	r4, r0
 802d556:	dc05      	bgt.n	802d564 <__ieee754_rem_pio2f+0x24>
 802d558:	2300      	movs	r3, #0
 802d55a:	ed80 0a00 	vstr	s0, [r0]
 802d55e:	6043      	str	r3, [r0, #4]
 802d560:	2000      	movs	r0, #0
 802d562:	e01a      	b.n	802d59a <__ieee754_rem_pio2f+0x5a>
 802d564:	4b87      	ldr	r3, [pc, #540]	; (802d784 <__ieee754_rem_pio2f+0x244>)
 802d566:	429d      	cmp	r5, r3
 802d568:	dc46      	bgt.n	802d5f8 <__ieee754_rem_pio2f+0xb8>
 802d56a:	2e00      	cmp	r6, #0
 802d56c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802d788 <__ieee754_rem_pio2f+0x248>
 802d570:	4b86      	ldr	r3, [pc, #536]	; (802d78c <__ieee754_rem_pio2f+0x24c>)
 802d572:	f025 050f 	bic.w	r5, r5, #15
 802d576:	dd1f      	ble.n	802d5b8 <__ieee754_rem_pio2f+0x78>
 802d578:	429d      	cmp	r5, r3
 802d57a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d57e:	d00e      	beq.n	802d59e <__ieee754_rem_pio2f+0x5e>
 802d580:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802d790 <__ieee754_rem_pio2f+0x250>
 802d584:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802d588:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d58c:	ed80 0a00 	vstr	s0, [r0]
 802d590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d594:	2001      	movs	r0, #1
 802d596:	edc4 7a01 	vstr	s15, [r4, #4]
 802d59a:	b007      	add	sp, #28
 802d59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d59e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802d794 <__ieee754_rem_pio2f+0x254>
 802d5a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802d798 <__ieee754_rem_pio2f+0x258>
 802d5a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d5aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802d5ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d5b2:	edc0 6a00 	vstr	s13, [r0]
 802d5b6:	e7eb      	b.n	802d590 <__ieee754_rem_pio2f+0x50>
 802d5b8:	429d      	cmp	r5, r3
 802d5ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d5be:	d00e      	beq.n	802d5de <__ieee754_rem_pio2f+0x9e>
 802d5c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802d790 <__ieee754_rem_pio2f+0x250>
 802d5c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 802d5c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d5cc:	ed80 0a00 	vstr	s0, [r0]
 802d5d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d5d4:	f04f 30ff 	mov.w	r0, #4294967295
 802d5d8:	edc4 7a01 	vstr	s15, [r4, #4]
 802d5dc:	e7dd      	b.n	802d59a <__ieee754_rem_pio2f+0x5a>
 802d5de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802d794 <__ieee754_rem_pio2f+0x254>
 802d5e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802d798 <__ieee754_rem_pio2f+0x258>
 802d5e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d5ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 802d5ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d5f2:	edc0 6a00 	vstr	s13, [r0]
 802d5f6:	e7eb      	b.n	802d5d0 <__ieee754_rem_pio2f+0x90>
 802d5f8:	4b68      	ldr	r3, [pc, #416]	; (802d79c <__ieee754_rem_pio2f+0x25c>)
 802d5fa:	429d      	cmp	r5, r3
 802d5fc:	dc72      	bgt.n	802d6e4 <__ieee754_rem_pio2f+0x1a4>
 802d5fe:	f000 fc0d 	bl	802de1c <fabsf>
 802d602:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802d7a0 <__ieee754_rem_pio2f+0x260>
 802d606:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d60a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d60e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d616:	ee17 0a90 	vmov	r0, s15
 802d61a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802d788 <__ieee754_rem_pio2f+0x248>
 802d61e:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d622:	281f      	cmp	r0, #31
 802d624:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802d790 <__ieee754_rem_pio2f+0x250>
 802d628:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d62c:	eeb1 6a47 	vneg.f32	s12, s14
 802d630:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d634:	ee16 2a90 	vmov	r2, s13
 802d638:	dc1c      	bgt.n	802d674 <__ieee754_rem_pio2f+0x134>
 802d63a:	495a      	ldr	r1, [pc, #360]	; (802d7a4 <__ieee754_rem_pio2f+0x264>)
 802d63c:	1e47      	subs	r7, r0, #1
 802d63e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802d642:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802d646:	428b      	cmp	r3, r1
 802d648:	d014      	beq.n	802d674 <__ieee754_rem_pio2f+0x134>
 802d64a:	6022      	str	r2, [r4, #0]
 802d64c:	ed94 7a00 	vldr	s14, [r4]
 802d650:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d654:	2e00      	cmp	r6, #0
 802d656:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d65a:	ed84 0a01 	vstr	s0, [r4, #4]
 802d65e:	da9c      	bge.n	802d59a <__ieee754_rem_pio2f+0x5a>
 802d660:	eeb1 7a47 	vneg.f32	s14, s14
 802d664:	eeb1 0a40 	vneg.f32	s0, s0
 802d668:	ed84 7a00 	vstr	s14, [r4]
 802d66c:	ed84 0a01 	vstr	s0, [r4, #4]
 802d670:	4240      	negs	r0, r0
 802d672:	e792      	b.n	802d59a <__ieee754_rem_pio2f+0x5a>
 802d674:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d678:	15eb      	asrs	r3, r5, #23
 802d67a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802d67e:	2d08      	cmp	r5, #8
 802d680:	dde3      	ble.n	802d64a <__ieee754_rem_pio2f+0x10a>
 802d682:	eddf 7a44 	vldr	s15, [pc, #272]	; 802d794 <__ieee754_rem_pio2f+0x254>
 802d686:	eef0 6a40 	vmov.f32	s13, s0
 802d68a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802d68e:	ee30 0a66 	vsub.f32	s0, s0, s13
 802d692:	eea6 0a27 	vfma.f32	s0, s12, s15
 802d696:	eddf 7a40 	vldr	s15, [pc, #256]	; 802d798 <__ieee754_rem_pio2f+0x258>
 802d69a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802d69e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802d6a2:	eef0 7a40 	vmov.f32	s15, s0
 802d6a6:	ee15 2a90 	vmov	r2, s11
 802d6aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d6ae:	1a5b      	subs	r3, r3, r1
 802d6b0:	2b19      	cmp	r3, #25
 802d6b2:	dc04      	bgt.n	802d6be <__ieee754_rem_pio2f+0x17e>
 802d6b4:	edc4 5a00 	vstr	s11, [r4]
 802d6b8:	eeb0 0a66 	vmov.f32	s0, s13
 802d6bc:	e7c6      	b.n	802d64c <__ieee754_rem_pio2f+0x10c>
 802d6be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802d7a8 <__ieee754_rem_pio2f+0x268>
 802d6c2:	eeb0 0a66 	vmov.f32	s0, s13
 802d6c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d6ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d6ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 802d7ac <__ieee754_rem_pio2f+0x26c>
 802d6d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d6d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d6da:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d6de:	ed84 7a00 	vstr	s14, [r4]
 802d6e2:	e7b3      	b.n	802d64c <__ieee754_rem_pio2f+0x10c>
 802d6e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802d6e8:	db06      	blt.n	802d6f8 <__ieee754_rem_pio2f+0x1b8>
 802d6ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d6ee:	edc0 7a01 	vstr	s15, [r0, #4]
 802d6f2:	edc0 7a00 	vstr	s15, [r0]
 802d6f6:	e733      	b.n	802d560 <__ieee754_rem_pio2f+0x20>
 802d6f8:	15ea      	asrs	r2, r5, #23
 802d6fa:	3a86      	subs	r2, #134	; 0x86
 802d6fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d700:	ee07 3a90 	vmov	s15, r3
 802d704:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d708:	eddf 6a29 	vldr	s13, [pc, #164]	; 802d7b0 <__ieee754_rem_pio2f+0x270>
 802d70c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d714:	ed8d 7a03 	vstr	s14, [sp, #12]
 802d718:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d71c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d720:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d728:	ed8d 7a04 	vstr	s14, [sp, #16]
 802d72c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d730:	eef5 7a40 	vcmp.f32	s15, #0.0
 802d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d738:	edcd 7a05 	vstr	s15, [sp, #20]
 802d73c:	d11e      	bne.n	802d77c <__ieee754_rem_pio2f+0x23c>
 802d73e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802d742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d746:	bf14      	ite	ne
 802d748:	2302      	movne	r3, #2
 802d74a:	2301      	moveq	r3, #1
 802d74c:	4919      	ldr	r1, [pc, #100]	; (802d7b4 <__ieee754_rem_pio2f+0x274>)
 802d74e:	9101      	str	r1, [sp, #4]
 802d750:	2102      	movs	r1, #2
 802d752:	9100      	str	r1, [sp, #0]
 802d754:	a803      	add	r0, sp, #12
 802d756:	4621      	mov	r1, r4
 802d758:	f000 f88e 	bl	802d878 <__kernel_rem_pio2f>
 802d75c:	2e00      	cmp	r6, #0
 802d75e:	f6bf af1c 	bge.w	802d59a <__ieee754_rem_pio2f+0x5a>
 802d762:	edd4 7a00 	vldr	s15, [r4]
 802d766:	eef1 7a67 	vneg.f32	s15, s15
 802d76a:	edc4 7a00 	vstr	s15, [r4]
 802d76e:	edd4 7a01 	vldr	s15, [r4, #4]
 802d772:	eef1 7a67 	vneg.f32	s15, s15
 802d776:	edc4 7a01 	vstr	s15, [r4, #4]
 802d77a:	e779      	b.n	802d670 <__ieee754_rem_pio2f+0x130>
 802d77c:	2303      	movs	r3, #3
 802d77e:	e7e5      	b.n	802d74c <__ieee754_rem_pio2f+0x20c>
 802d780:	3f490fd8 	.word	0x3f490fd8
 802d784:	4016cbe3 	.word	0x4016cbe3
 802d788:	3fc90f80 	.word	0x3fc90f80
 802d78c:	3fc90fd0 	.word	0x3fc90fd0
 802d790:	37354443 	.word	0x37354443
 802d794:	37354400 	.word	0x37354400
 802d798:	2e85a308 	.word	0x2e85a308
 802d79c:	43490f80 	.word	0x43490f80
 802d7a0:	3f22f984 	.word	0x3f22f984
 802d7a4:	08033750 	.word	0x08033750
 802d7a8:	2e85a300 	.word	0x2e85a300
 802d7ac:	248d3132 	.word	0x248d3132
 802d7b0:	43800000 	.word	0x43800000
 802d7b4:	080337d0 	.word	0x080337d0

0802d7b8 <__kernel_cosf>:
 802d7b8:	ee10 3a10 	vmov	r3, s0
 802d7bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d7c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802d7c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802d7c8:	da05      	bge.n	802d7d6 <__kernel_cosf+0x1e>
 802d7ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802d7ce:	ee17 2a90 	vmov	r2, s15
 802d7d2:	2a00      	cmp	r2, #0
 802d7d4:	d03d      	beq.n	802d852 <__kernel_cosf+0x9a>
 802d7d6:	ee60 5a00 	vmul.f32	s11, s0, s0
 802d7da:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802d858 <__kernel_cosf+0xa0>
 802d7de:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802d85c <__kernel_cosf+0xa4>
 802d7e2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802d860 <__kernel_cosf+0xa8>
 802d7e6:	4a1f      	ldr	r2, [pc, #124]	; (802d864 <__kernel_cosf+0xac>)
 802d7e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802d7ec:	4293      	cmp	r3, r2
 802d7ee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802d868 <__kernel_cosf+0xb0>
 802d7f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 802d7f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802d86c <__kernel_cosf+0xb4>
 802d7fa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802d7fe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802d870 <__kernel_cosf+0xb8>
 802d802:	eee7 7a25 	vfma.f32	s15, s14, s11
 802d806:	eeb0 7a66 	vmov.f32	s14, s13
 802d80a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802d80e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802d812:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802d816:	ee67 6a25 	vmul.f32	s13, s14, s11
 802d81a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802d81e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d822:	dc04      	bgt.n	802d82e <__kernel_cosf+0x76>
 802d824:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802d828:	ee36 0a47 	vsub.f32	s0, s12, s14
 802d82c:	4770      	bx	lr
 802d82e:	4a11      	ldr	r2, [pc, #68]	; (802d874 <__kernel_cosf+0xbc>)
 802d830:	4293      	cmp	r3, r2
 802d832:	bfda      	itte	le
 802d834:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802d838:	ee06 3a90 	vmovle	s13, r3
 802d83c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802d840:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d844:	ee36 0a66 	vsub.f32	s0, s12, s13
 802d848:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d84c:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d850:	4770      	bx	lr
 802d852:	eeb0 0a46 	vmov.f32	s0, s12
 802d856:	4770      	bx	lr
 802d858:	ad47d74e 	.word	0xad47d74e
 802d85c:	310f74f6 	.word	0x310f74f6
 802d860:	3d2aaaab 	.word	0x3d2aaaab
 802d864:	3e999999 	.word	0x3e999999
 802d868:	b493f27c 	.word	0xb493f27c
 802d86c:	37d00d01 	.word	0x37d00d01
 802d870:	bab60b61 	.word	0xbab60b61
 802d874:	3f480000 	.word	0x3f480000

0802d878 <__kernel_rem_pio2f>:
 802d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d87c:	ed2d 8b04 	vpush	{d8-d9}
 802d880:	b0d7      	sub	sp, #348	; 0x15c
 802d882:	4616      	mov	r6, r2
 802d884:	4698      	mov	r8, r3
 802d886:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802d888:	4bbb      	ldr	r3, [pc, #748]	; (802db78 <__kernel_rem_pio2f+0x300>)
 802d88a:	9001      	str	r0, [sp, #4]
 802d88c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 802d890:	1d33      	adds	r3, r6, #4
 802d892:	460d      	mov	r5, r1
 802d894:	f108 39ff 	add.w	r9, r8, #4294967295
 802d898:	db29      	blt.n	802d8ee <__kernel_rem_pio2f+0x76>
 802d89a:	1ef1      	subs	r1, r6, #3
 802d89c:	bf48      	it	mi
 802d89e:	1d31      	addmi	r1, r6, #4
 802d8a0:	10c9      	asrs	r1, r1, #3
 802d8a2:	1c4c      	adds	r4, r1, #1
 802d8a4:	00e3      	lsls	r3, r4, #3
 802d8a6:	9302      	str	r3, [sp, #8]
 802d8a8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802d8aa:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 802db88 <__kernel_rem_pio2f+0x310>
 802d8ae:	eba1 0009 	sub.w	r0, r1, r9
 802d8b2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802d8b6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802d8ba:	eb07 0c09 	add.w	ip, r7, r9
 802d8be:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 802d8c2:	2300      	movs	r3, #0
 802d8c4:	4563      	cmp	r3, ip
 802d8c6:	dd14      	ble.n	802d8f2 <__kernel_rem_pio2f+0x7a>
 802d8c8:	ab1a      	add	r3, sp, #104	; 0x68
 802d8ca:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 802d8ce:	46cc      	mov	ip, r9
 802d8d0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 802d8d4:	f1c8 0b01 	rsb	fp, r8, #1
 802d8d8:	eb0b 020c 	add.w	r2, fp, ip
 802d8dc:	4297      	cmp	r7, r2
 802d8de:	db27      	blt.n	802d930 <__kernel_rem_pio2f+0xb8>
 802d8e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d8e4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802db88 <__kernel_rem_pio2f+0x310>
 802d8e8:	4618      	mov	r0, r3
 802d8ea:	2200      	movs	r2, #0
 802d8ec:	e016      	b.n	802d91c <__kernel_rem_pio2f+0xa4>
 802d8ee:	2100      	movs	r1, #0
 802d8f0:	e7d7      	b.n	802d8a2 <__kernel_rem_pio2f+0x2a>
 802d8f2:	42d8      	cmn	r0, r3
 802d8f4:	bf5d      	ittte	pl
 802d8f6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 802d8fa:	ee07 2a90 	vmovpl	s15, r2
 802d8fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d902:	eef0 7a47 	vmovmi.f32	s15, s14
 802d906:	ecea 7a01 	vstmia	sl!, {s15}
 802d90a:	3301      	adds	r3, #1
 802d90c:	e7da      	b.n	802d8c4 <__kernel_rem_pio2f+0x4c>
 802d90e:	ecfe 6a01 	vldmia	lr!, {s13}
 802d912:	ed90 7a00 	vldr	s14, [r0]
 802d916:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d91a:	3201      	adds	r2, #1
 802d91c:	454a      	cmp	r2, r9
 802d91e:	f1a0 0004 	sub.w	r0, r0, #4
 802d922:	ddf4      	ble.n	802d90e <__kernel_rem_pio2f+0x96>
 802d924:	ecea 7a01 	vstmia	sl!, {s15}
 802d928:	3304      	adds	r3, #4
 802d92a:	f10c 0c01 	add.w	ip, ip, #1
 802d92e:	e7d3      	b.n	802d8d8 <__kernel_rem_pio2f+0x60>
 802d930:	ab06      	add	r3, sp, #24
 802d932:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802d936:	9304      	str	r3, [sp, #16]
 802d938:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802d93a:	eddf 8a92 	vldr	s17, [pc, #584]	; 802db84 <__kernel_rem_pio2f+0x30c>
 802d93e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802db80 <__kernel_rem_pio2f+0x308>
 802d942:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802d946:	9303      	str	r3, [sp, #12]
 802d948:	46ba      	mov	sl, r7
 802d94a:	ab56      	add	r3, sp, #344	; 0x158
 802d94c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802d950:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802d954:	ab06      	add	r3, sp, #24
 802d956:	4618      	mov	r0, r3
 802d958:	4652      	mov	r2, sl
 802d95a:	2a00      	cmp	r2, #0
 802d95c:	dc51      	bgt.n	802da02 <__kernel_rem_pio2f+0x18a>
 802d95e:	4620      	mov	r0, r4
 802d960:	9305      	str	r3, [sp, #20]
 802d962:	f000 fa63 	bl	802de2c <scalbnf>
 802d966:	eeb0 8a40 	vmov.f32	s16, s0
 802d96a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802d96e:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d972:	f7ff fd61 	bl	802d438 <floorf>
 802d976:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802d97a:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d97e:	2c00      	cmp	r4, #0
 802d980:	9b05      	ldr	r3, [sp, #20]
 802d982:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d986:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802d98a:	edcd 7a00 	vstr	s15, [sp]
 802d98e:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d992:	dd4b      	ble.n	802da2c <__kernel_rem_pio2f+0x1b4>
 802d994:	f10a 3cff 	add.w	ip, sl, #4294967295
 802d998:	aa06      	add	r2, sp, #24
 802d99a:	f1c4 0e08 	rsb	lr, r4, #8
 802d99e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d9a2:	ee17 1a90 	vmov	r1, s15
 802d9a6:	fa42 f00e 	asr.w	r0, r2, lr
 802d9aa:	4401      	add	r1, r0
 802d9ac:	9100      	str	r1, [sp, #0]
 802d9ae:	fa00 f00e 	lsl.w	r0, r0, lr
 802d9b2:	a906      	add	r1, sp, #24
 802d9b4:	1a12      	subs	r2, r2, r0
 802d9b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802d9ba:	f1c4 0007 	rsb	r0, r4, #7
 802d9be:	fa42 fb00 	asr.w	fp, r2, r0
 802d9c2:	f1bb 0f00 	cmp.w	fp, #0
 802d9c6:	dd43      	ble.n	802da50 <__kernel_rem_pio2f+0x1d8>
 802d9c8:	9a00      	ldr	r2, [sp, #0]
 802d9ca:	f04f 0e00 	mov.w	lr, #0
 802d9ce:	3201      	adds	r2, #1
 802d9d0:	9200      	str	r2, [sp, #0]
 802d9d2:	4670      	mov	r0, lr
 802d9d4:	45f2      	cmp	sl, lr
 802d9d6:	dc6c      	bgt.n	802dab2 <__kernel_rem_pio2f+0x23a>
 802d9d8:	2c00      	cmp	r4, #0
 802d9da:	dd04      	ble.n	802d9e6 <__kernel_rem_pio2f+0x16e>
 802d9dc:	2c01      	cmp	r4, #1
 802d9de:	d079      	beq.n	802dad4 <__kernel_rem_pio2f+0x25c>
 802d9e0:	2c02      	cmp	r4, #2
 802d9e2:	f000 8082 	beq.w	802daea <__kernel_rem_pio2f+0x272>
 802d9e6:	f1bb 0f02 	cmp.w	fp, #2
 802d9ea:	d131      	bne.n	802da50 <__kernel_rem_pio2f+0x1d8>
 802d9ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d9f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d9f4:	b360      	cbz	r0, 802da50 <__kernel_rem_pio2f+0x1d8>
 802d9f6:	4620      	mov	r0, r4
 802d9f8:	f000 fa18 	bl	802de2c <scalbnf>
 802d9fc:	ee38 8a40 	vsub.f32	s16, s16, s0
 802da00:	e026      	b.n	802da50 <__kernel_rem_pio2f+0x1d8>
 802da02:	ee60 7a28 	vmul.f32	s15, s0, s17
 802da06:	3a01      	subs	r2, #1
 802da08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802da0c:	a942      	add	r1, sp, #264	; 0x108
 802da0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802da12:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802da16:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802da1a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802da1e:	eca0 0a01 	vstmia	r0!, {s0}
 802da22:	ed9c 0a00 	vldr	s0, [ip]
 802da26:	ee37 0a80 	vadd.f32	s0, s15, s0
 802da2a:	e796      	b.n	802d95a <__kernel_rem_pio2f+0xe2>
 802da2c:	d107      	bne.n	802da3e <__kernel_rem_pio2f+0x1c6>
 802da2e:	f10a 32ff 	add.w	r2, sl, #4294967295
 802da32:	a906      	add	r1, sp, #24
 802da34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802da38:	ea4f 2b22 	mov.w	fp, r2, asr #8
 802da3c:	e7c1      	b.n	802d9c2 <__kernel_rem_pio2f+0x14a>
 802da3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802da42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802da46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802da4a:	da2f      	bge.n	802daac <__kernel_rem_pio2f+0x234>
 802da4c:	f04f 0b00 	mov.w	fp, #0
 802da50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802da54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802da58:	f040 8098 	bne.w	802db8c <__kernel_rem_pio2f+0x314>
 802da5c:	f10a 33ff 	add.w	r3, sl, #4294967295
 802da60:	469c      	mov	ip, r3
 802da62:	2200      	movs	r2, #0
 802da64:	45bc      	cmp	ip, r7
 802da66:	da48      	bge.n	802dafa <__kernel_rem_pio2f+0x282>
 802da68:	2a00      	cmp	r2, #0
 802da6a:	d05f      	beq.n	802db2c <__kernel_rem_pio2f+0x2b4>
 802da6c:	aa06      	add	r2, sp, #24
 802da6e:	3c08      	subs	r4, #8
 802da70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802da74:	2900      	cmp	r1, #0
 802da76:	d07d      	beq.n	802db74 <__kernel_rem_pio2f+0x2fc>
 802da78:	4620      	mov	r0, r4
 802da7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802da7e:	9301      	str	r3, [sp, #4]
 802da80:	f000 f9d4 	bl	802de2c <scalbnf>
 802da84:	9b01      	ldr	r3, [sp, #4]
 802da86:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 802db84 <__kernel_rem_pio2f+0x30c>
 802da8a:	4619      	mov	r1, r3
 802da8c:	2900      	cmp	r1, #0
 802da8e:	f280 80af 	bge.w	802dbf0 <__kernel_rem_pio2f+0x378>
 802da92:	4618      	mov	r0, r3
 802da94:	2400      	movs	r4, #0
 802da96:	2800      	cmp	r0, #0
 802da98:	f2c0 80d0 	blt.w	802dc3c <__kernel_rem_pio2f+0x3c4>
 802da9c:	a942      	add	r1, sp, #264	; 0x108
 802da9e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 802daa2:	4a36      	ldr	r2, [pc, #216]	; (802db7c <__kernel_rem_pio2f+0x304>)
 802daa4:	eddf 7a38 	vldr	s15, [pc, #224]	; 802db88 <__kernel_rem_pio2f+0x310>
 802daa8:	2100      	movs	r1, #0
 802daaa:	e0bb      	b.n	802dc24 <__kernel_rem_pio2f+0x3ac>
 802daac:	f04f 0b02 	mov.w	fp, #2
 802dab0:	e78a      	b.n	802d9c8 <__kernel_rem_pio2f+0x150>
 802dab2:	681a      	ldr	r2, [r3, #0]
 802dab4:	b948      	cbnz	r0, 802daca <__kernel_rem_pio2f+0x252>
 802dab6:	b11a      	cbz	r2, 802dac0 <__kernel_rem_pio2f+0x248>
 802dab8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802dabc:	601a      	str	r2, [r3, #0]
 802dabe:	2201      	movs	r2, #1
 802dac0:	f10e 0e01 	add.w	lr, lr, #1
 802dac4:	3304      	adds	r3, #4
 802dac6:	4610      	mov	r0, r2
 802dac8:	e784      	b.n	802d9d4 <__kernel_rem_pio2f+0x15c>
 802daca:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802dace:	601a      	str	r2, [r3, #0]
 802dad0:	4602      	mov	r2, r0
 802dad2:	e7f5      	b.n	802dac0 <__kernel_rem_pio2f+0x248>
 802dad4:	f10a 3cff 	add.w	ip, sl, #4294967295
 802dad8:	ab06      	add	r3, sp, #24
 802dada:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802dade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802dae2:	aa06      	add	r2, sp, #24
 802dae4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802dae8:	e77d      	b.n	802d9e6 <__kernel_rem_pio2f+0x16e>
 802daea:	f10a 3cff 	add.w	ip, sl, #4294967295
 802daee:	ab06      	add	r3, sp, #24
 802daf0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802daf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802daf8:	e7f3      	b.n	802dae2 <__kernel_rem_pio2f+0x26a>
 802dafa:	a906      	add	r1, sp, #24
 802dafc:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 802db00:	f10c 3cff 	add.w	ip, ip, #4294967295
 802db04:	4302      	orrs	r2, r0
 802db06:	e7ad      	b.n	802da64 <__kernel_rem_pio2f+0x1ec>
 802db08:	3001      	adds	r0, #1
 802db0a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802db0e:	2a00      	cmp	r2, #0
 802db10:	d0fa      	beq.n	802db08 <__kernel_rem_pio2f+0x290>
 802db12:	a91a      	add	r1, sp, #104	; 0x68
 802db14:	eb0a 0208 	add.w	r2, sl, r8
 802db18:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802db1c:	f10a 0301 	add.w	r3, sl, #1
 802db20:	eb0a 0100 	add.w	r1, sl, r0
 802db24:	4299      	cmp	r1, r3
 802db26:	da04      	bge.n	802db32 <__kernel_rem_pio2f+0x2ba>
 802db28:	468a      	mov	sl, r1
 802db2a:	e70e      	b.n	802d94a <__kernel_rem_pio2f+0xd2>
 802db2c:	9b04      	ldr	r3, [sp, #16]
 802db2e:	2001      	movs	r0, #1
 802db30:	e7eb      	b.n	802db0a <__kernel_rem_pio2f+0x292>
 802db32:	9803      	ldr	r0, [sp, #12]
 802db34:	f8dd c004 	ldr.w	ip, [sp, #4]
 802db38:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802db3c:	9000      	str	r0, [sp, #0]
 802db3e:	ee07 0a90 	vmov	s15, r0
 802db42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802db46:	2000      	movs	r0, #0
 802db48:	ece2 7a01 	vstmia	r2!, {s15}
 802db4c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802db88 <__kernel_rem_pio2f+0x310>
 802db50:	4696      	mov	lr, r2
 802db52:	4548      	cmp	r0, r9
 802db54:	dd06      	ble.n	802db64 <__kernel_rem_pio2f+0x2ec>
 802db56:	a842      	add	r0, sp, #264	; 0x108
 802db58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802db5c:	edc0 7a00 	vstr	s15, [r0]
 802db60:	3301      	adds	r3, #1
 802db62:	e7df      	b.n	802db24 <__kernel_rem_pio2f+0x2ac>
 802db64:	ecfc 6a01 	vldmia	ip!, {s13}
 802db68:	ed3e 7a01 	vldmdb	lr!, {s14}
 802db6c:	3001      	adds	r0, #1
 802db6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802db72:	e7ee      	b.n	802db52 <__kernel_rem_pio2f+0x2da>
 802db74:	3b01      	subs	r3, #1
 802db76:	e779      	b.n	802da6c <__kernel_rem_pio2f+0x1f4>
 802db78:	08033b14 	.word	0x08033b14
 802db7c:	08033ae8 	.word	0x08033ae8
 802db80:	43800000 	.word	0x43800000
 802db84:	3b800000 	.word	0x3b800000
 802db88:	00000000 	.word	0x00000000
 802db8c:	9b02      	ldr	r3, [sp, #8]
 802db8e:	eeb0 0a48 	vmov.f32	s0, s16
 802db92:	1b98      	subs	r0, r3, r6
 802db94:	f000 f94a 	bl	802de2c <scalbnf>
 802db98:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802db80 <__kernel_rem_pio2f+0x308>
 802db9c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802dba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802dba4:	db1b      	blt.n	802dbde <__kernel_rem_pio2f+0x366>
 802dba6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802db84 <__kernel_rem_pio2f+0x30c>
 802dbaa:	ee60 7a27 	vmul.f32	s15, s0, s15
 802dbae:	aa06      	add	r2, sp, #24
 802dbb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802dbb4:	a906      	add	r1, sp, #24
 802dbb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802dbba:	3408      	adds	r4, #8
 802dbbc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802dbc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802dbc4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802dbc8:	ee10 3a10 	vmov	r3, s0
 802dbcc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802dbd0:	ee17 2a90 	vmov	r2, s15
 802dbd4:	f10a 0301 	add.w	r3, sl, #1
 802dbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802dbdc:	e74c      	b.n	802da78 <__kernel_rem_pio2f+0x200>
 802dbde:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802dbe2:	aa06      	add	r2, sp, #24
 802dbe4:	ee10 3a10 	vmov	r3, s0
 802dbe8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802dbec:	4653      	mov	r3, sl
 802dbee:	e743      	b.n	802da78 <__kernel_rem_pio2f+0x200>
 802dbf0:	aa42      	add	r2, sp, #264	; 0x108
 802dbf2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802dbf6:	aa06      	add	r2, sp, #24
 802dbf8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802dbfc:	9201      	str	r2, [sp, #4]
 802dbfe:	ee07 2a90 	vmov	s15, r2
 802dc02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802dc06:	3901      	subs	r1, #1
 802dc08:	ee67 7a80 	vmul.f32	s15, s15, s0
 802dc0c:	ee20 0a07 	vmul.f32	s0, s0, s14
 802dc10:	edc0 7a00 	vstr	s15, [r0]
 802dc14:	e73a      	b.n	802da8c <__kernel_rem_pio2f+0x214>
 802dc16:	ecf2 6a01 	vldmia	r2!, {s13}
 802dc1a:	ecb6 7a01 	vldmia	r6!, {s14}
 802dc1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802dc22:	3101      	adds	r1, #1
 802dc24:	42b9      	cmp	r1, r7
 802dc26:	dc01      	bgt.n	802dc2c <__kernel_rem_pio2f+0x3b4>
 802dc28:	428c      	cmp	r4, r1
 802dc2a:	daf4      	bge.n	802dc16 <__kernel_rem_pio2f+0x39e>
 802dc2c:	aa56      	add	r2, sp, #344	; 0x158
 802dc2e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802dc32:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802dc36:	3801      	subs	r0, #1
 802dc38:	3401      	adds	r4, #1
 802dc3a:	e72c      	b.n	802da96 <__kernel_rem_pio2f+0x21e>
 802dc3c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802dc3e:	2a02      	cmp	r2, #2
 802dc40:	dc0a      	bgt.n	802dc58 <__kernel_rem_pio2f+0x3e0>
 802dc42:	2a00      	cmp	r2, #0
 802dc44:	dc61      	bgt.n	802dd0a <__kernel_rem_pio2f+0x492>
 802dc46:	d03c      	beq.n	802dcc2 <__kernel_rem_pio2f+0x44a>
 802dc48:	9b00      	ldr	r3, [sp, #0]
 802dc4a:	f003 0007 	and.w	r0, r3, #7
 802dc4e:	b057      	add	sp, #348	; 0x15c
 802dc50:	ecbd 8b04 	vpop	{d8-d9}
 802dc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dc58:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802dc5a:	2a03      	cmp	r2, #3
 802dc5c:	d1f4      	bne.n	802dc48 <__kernel_rem_pio2f+0x3d0>
 802dc5e:	aa2e      	add	r2, sp, #184	; 0xb8
 802dc60:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dc64:	4608      	mov	r0, r1
 802dc66:	461c      	mov	r4, r3
 802dc68:	2c00      	cmp	r4, #0
 802dc6a:	f1a0 0004 	sub.w	r0, r0, #4
 802dc6e:	dc59      	bgt.n	802dd24 <__kernel_rem_pio2f+0x4ac>
 802dc70:	4618      	mov	r0, r3
 802dc72:	2801      	cmp	r0, #1
 802dc74:	f1a1 0104 	sub.w	r1, r1, #4
 802dc78:	dc64      	bgt.n	802dd44 <__kernel_rem_pio2f+0x4cc>
 802dc7a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 802db88 <__kernel_rem_pio2f+0x310>
 802dc7e:	2b01      	cmp	r3, #1
 802dc80:	dc70      	bgt.n	802dd64 <__kernel_rem_pio2f+0x4ec>
 802dc82:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802dc86:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802dc8a:	f1bb 0f00 	cmp.w	fp, #0
 802dc8e:	d172      	bne.n	802dd76 <__kernel_rem_pio2f+0x4fe>
 802dc90:	edc5 6a00 	vstr	s13, [r5]
 802dc94:	ed85 7a01 	vstr	s14, [r5, #4]
 802dc98:	edc5 7a02 	vstr	s15, [r5, #8]
 802dc9c:	e7d4      	b.n	802dc48 <__kernel_rem_pio2f+0x3d0>
 802dc9e:	aa2e      	add	r2, sp, #184	; 0xb8
 802dca0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dca4:	ed91 7a00 	vldr	s14, [r1]
 802dca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dcac:	3b01      	subs	r3, #1
 802dcae:	2b00      	cmp	r3, #0
 802dcb0:	daf5      	bge.n	802dc9e <__kernel_rem_pio2f+0x426>
 802dcb2:	f1bb 0f00 	cmp.w	fp, #0
 802dcb6:	d001      	beq.n	802dcbc <__kernel_rem_pio2f+0x444>
 802dcb8:	eef1 7a67 	vneg.f32	s15, s15
 802dcbc:	edc5 7a00 	vstr	s15, [r5]
 802dcc0:	e7c2      	b.n	802dc48 <__kernel_rem_pio2f+0x3d0>
 802dcc2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802db88 <__kernel_rem_pio2f+0x310>
 802dcc6:	e7f2      	b.n	802dcae <__kernel_rem_pio2f+0x436>
 802dcc8:	aa2e      	add	r2, sp, #184	; 0xb8
 802dcca:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802dcce:	edd0 7a00 	vldr	s15, [r0]
 802dcd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 802dcd6:	3901      	subs	r1, #1
 802dcd8:	2900      	cmp	r1, #0
 802dcda:	daf5      	bge.n	802dcc8 <__kernel_rem_pio2f+0x450>
 802dcdc:	f1bb 0f00 	cmp.w	fp, #0
 802dce0:	d017      	beq.n	802dd12 <__kernel_rem_pio2f+0x49a>
 802dce2:	eef1 7a47 	vneg.f32	s15, s14
 802dce6:	edc5 7a00 	vstr	s15, [r5]
 802dcea:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802dcee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dcf2:	a82f      	add	r0, sp, #188	; 0xbc
 802dcf4:	2101      	movs	r1, #1
 802dcf6:	428b      	cmp	r3, r1
 802dcf8:	da0e      	bge.n	802dd18 <__kernel_rem_pio2f+0x4a0>
 802dcfa:	f1bb 0f00 	cmp.w	fp, #0
 802dcfe:	d001      	beq.n	802dd04 <__kernel_rem_pio2f+0x48c>
 802dd00:	eef1 7a67 	vneg.f32	s15, s15
 802dd04:	edc5 7a01 	vstr	s15, [r5, #4]
 802dd08:	e79e      	b.n	802dc48 <__kernel_rem_pio2f+0x3d0>
 802dd0a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 802db88 <__kernel_rem_pio2f+0x310>
 802dd0e:	4619      	mov	r1, r3
 802dd10:	e7e2      	b.n	802dcd8 <__kernel_rem_pio2f+0x460>
 802dd12:	eef0 7a47 	vmov.f32	s15, s14
 802dd16:	e7e6      	b.n	802dce6 <__kernel_rem_pio2f+0x46e>
 802dd18:	ecb0 7a01 	vldmia	r0!, {s14}
 802dd1c:	3101      	adds	r1, #1
 802dd1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dd22:	e7e8      	b.n	802dcf6 <__kernel_rem_pio2f+0x47e>
 802dd24:	edd0 7a00 	vldr	s15, [r0]
 802dd28:	edd0 6a01 	vldr	s13, [r0, #4]
 802dd2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802dd30:	3c01      	subs	r4, #1
 802dd32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dd36:	ed80 7a00 	vstr	s14, [r0]
 802dd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dd3e:	edc0 7a01 	vstr	s15, [r0, #4]
 802dd42:	e791      	b.n	802dc68 <__kernel_rem_pio2f+0x3f0>
 802dd44:	edd1 7a00 	vldr	s15, [r1]
 802dd48:	edd1 6a01 	vldr	s13, [r1, #4]
 802dd4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802dd50:	3801      	subs	r0, #1
 802dd52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dd56:	ed81 7a00 	vstr	s14, [r1]
 802dd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dd5e:	edc1 7a01 	vstr	s15, [r1, #4]
 802dd62:	e786      	b.n	802dc72 <__kernel_rem_pio2f+0x3fa>
 802dd64:	aa2e      	add	r2, sp, #184	; 0xb8
 802dd66:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dd6a:	ed91 7a00 	vldr	s14, [r1]
 802dd6e:	3b01      	subs	r3, #1
 802dd70:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dd74:	e783      	b.n	802dc7e <__kernel_rem_pio2f+0x406>
 802dd76:	eef1 6a66 	vneg.f32	s13, s13
 802dd7a:	eeb1 7a47 	vneg.f32	s14, s14
 802dd7e:	edc5 6a00 	vstr	s13, [r5]
 802dd82:	ed85 7a01 	vstr	s14, [r5, #4]
 802dd86:	eef1 7a67 	vneg.f32	s15, s15
 802dd8a:	e785      	b.n	802dc98 <__kernel_rem_pio2f+0x420>

0802dd8c <__kernel_sinf>:
 802dd8c:	ee10 3a10 	vmov	r3, s0
 802dd90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802dd94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802dd98:	da04      	bge.n	802dda4 <__kernel_sinf+0x18>
 802dd9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802dd9e:	ee17 3a90 	vmov	r3, s15
 802dda2:	b35b      	cbz	r3, 802ddfc <__kernel_sinf+0x70>
 802dda4:	ee20 7a00 	vmul.f32	s14, s0, s0
 802dda8:	eddf 7a15 	vldr	s15, [pc, #84]	; 802de00 <__kernel_sinf+0x74>
 802ddac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802de04 <__kernel_sinf+0x78>
 802ddb0:	eea7 6a27 	vfma.f32	s12, s14, s15
 802ddb4:	eddf 7a14 	vldr	s15, [pc, #80]	; 802de08 <__kernel_sinf+0x7c>
 802ddb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 802ddbc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802de0c <__kernel_sinf+0x80>
 802ddc0:	eea7 6a87 	vfma.f32	s12, s15, s14
 802ddc4:	eddf 7a12 	vldr	s15, [pc, #72]	; 802de10 <__kernel_sinf+0x84>
 802ddc8:	ee60 6a07 	vmul.f32	s13, s0, s14
 802ddcc:	eee6 7a07 	vfma.f32	s15, s12, s14
 802ddd0:	b930      	cbnz	r0, 802dde0 <__kernel_sinf+0x54>
 802ddd2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802de14 <__kernel_sinf+0x88>
 802ddd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 802ddda:	eea6 0a26 	vfma.f32	s0, s12, s13
 802ddde:	4770      	bx	lr
 802dde0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802dde4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802dde8:	eee0 7a86 	vfma.f32	s15, s1, s12
 802ddec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802ddf0:	eddf 7a09 	vldr	s15, [pc, #36]	; 802de18 <__kernel_sinf+0x8c>
 802ddf4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802ddf8:	ee30 0a60 	vsub.f32	s0, s0, s1
 802ddfc:	4770      	bx	lr
 802ddfe:	bf00      	nop
 802de00:	2f2ec9d3 	.word	0x2f2ec9d3
 802de04:	b2d72f34 	.word	0xb2d72f34
 802de08:	3638ef1b 	.word	0x3638ef1b
 802de0c:	b9500d01 	.word	0xb9500d01
 802de10:	3c088889 	.word	0x3c088889
 802de14:	be2aaaab 	.word	0xbe2aaaab
 802de18:	3e2aaaab 	.word	0x3e2aaaab

0802de1c <fabsf>:
 802de1c:	ee10 3a10 	vmov	r3, s0
 802de20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802de24:	ee00 3a10 	vmov	s0, r3
 802de28:	4770      	bx	lr
	...

0802de2c <scalbnf>:
 802de2c:	ee10 3a10 	vmov	r3, s0
 802de30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802de34:	d025      	beq.n	802de82 <scalbnf+0x56>
 802de36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802de3a:	d302      	bcc.n	802de42 <scalbnf+0x16>
 802de3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 802de40:	4770      	bx	lr
 802de42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802de46:	d122      	bne.n	802de8e <scalbnf+0x62>
 802de48:	4b2a      	ldr	r3, [pc, #168]	; (802def4 <scalbnf+0xc8>)
 802de4a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802def8 <scalbnf+0xcc>
 802de4e:	4298      	cmp	r0, r3
 802de50:	ee20 0a27 	vmul.f32	s0, s0, s15
 802de54:	db16      	blt.n	802de84 <scalbnf+0x58>
 802de56:	ee10 3a10 	vmov	r3, s0
 802de5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802de5e:	3a19      	subs	r2, #25
 802de60:	4402      	add	r2, r0
 802de62:	2afe      	cmp	r2, #254	; 0xfe
 802de64:	dd15      	ble.n	802de92 <scalbnf+0x66>
 802de66:	ee10 3a10 	vmov	r3, s0
 802de6a:	eddf 7a24 	vldr	s15, [pc, #144]	; 802defc <scalbnf+0xd0>
 802de6e:	eddf 6a24 	vldr	s13, [pc, #144]	; 802df00 <scalbnf+0xd4>
 802de72:	2b00      	cmp	r3, #0
 802de74:	eeb0 7a67 	vmov.f32	s14, s15
 802de78:	bfb8      	it	lt
 802de7a:	eef0 7a66 	vmovlt.f32	s15, s13
 802de7e:	ee27 0a27 	vmul.f32	s0, s14, s15
 802de82:	4770      	bx	lr
 802de84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802df04 <scalbnf+0xd8>
 802de88:	ee20 0a27 	vmul.f32	s0, s0, s15
 802de8c:	4770      	bx	lr
 802de8e:	0dd2      	lsrs	r2, r2, #23
 802de90:	e7e6      	b.n	802de60 <scalbnf+0x34>
 802de92:	2a00      	cmp	r2, #0
 802de94:	dd06      	ble.n	802dea4 <scalbnf+0x78>
 802de96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802de9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802de9e:	ee00 3a10 	vmov	s0, r3
 802dea2:	4770      	bx	lr
 802dea4:	f112 0f16 	cmn.w	r2, #22
 802dea8:	da1a      	bge.n	802dee0 <scalbnf+0xb4>
 802deaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 802deae:	4298      	cmp	r0, r3
 802deb0:	ee10 3a10 	vmov	r3, s0
 802deb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802deb8:	dd0a      	ble.n	802ded0 <scalbnf+0xa4>
 802deba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802defc <scalbnf+0xd0>
 802debe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802df00 <scalbnf+0xd4>
 802dec2:	eef0 7a40 	vmov.f32	s15, s0
 802dec6:	2b00      	cmp	r3, #0
 802dec8:	bf18      	it	ne
 802deca:	eeb0 0a47 	vmovne.f32	s0, s14
 802dece:	e7db      	b.n	802de88 <scalbnf+0x5c>
 802ded0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802df04 <scalbnf+0xd8>
 802ded4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802df08 <scalbnf+0xdc>
 802ded8:	eef0 7a40 	vmov.f32	s15, s0
 802dedc:	2b00      	cmp	r3, #0
 802dede:	e7f3      	b.n	802dec8 <scalbnf+0x9c>
 802dee0:	3219      	adds	r2, #25
 802dee2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802dee6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802deea:	eddf 7a08 	vldr	s15, [pc, #32]	; 802df0c <scalbnf+0xe0>
 802deee:	ee07 3a10 	vmov	s14, r3
 802def2:	e7c4      	b.n	802de7e <scalbnf+0x52>
 802def4:	ffff3cb0 	.word	0xffff3cb0
 802def8:	4c000000 	.word	0x4c000000
 802defc:	7149f2ca 	.word	0x7149f2ca
 802df00:	f149f2ca 	.word	0xf149f2ca
 802df04:	0da24260 	.word	0x0da24260
 802df08:	8da24260 	.word	0x8da24260
 802df0c:	33000000 	.word	0x33000000

0802df10 <abort>:
 802df10:	b508      	push	{r3, lr}
 802df12:	2006      	movs	r0, #6
 802df14:	f000 fde4 	bl	802eae0 <raise>
 802df18:	2001      	movs	r0, #1
 802df1a:	f7d6 f961 	bl	80041e0 <_exit>
	...

0802df20 <__assert_func>:
 802df20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802df22:	4614      	mov	r4, r2
 802df24:	461a      	mov	r2, r3
 802df26:	4b09      	ldr	r3, [pc, #36]	; (802df4c <__assert_func+0x2c>)
 802df28:	681b      	ldr	r3, [r3, #0]
 802df2a:	4605      	mov	r5, r0
 802df2c:	68d8      	ldr	r0, [r3, #12]
 802df2e:	b14c      	cbz	r4, 802df44 <__assert_func+0x24>
 802df30:	4b07      	ldr	r3, [pc, #28]	; (802df50 <__assert_func+0x30>)
 802df32:	9100      	str	r1, [sp, #0]
 802df34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802df38:	4906      	ldr	r1, [pc, #24]	; (802df54 <__assert_func+0x34>)
 802df3a:	462b      	mov	r3, r5
 802df3c:	f000 f906 	bl	802e14c <fiprintf>
 802df40:	f7ff ffe6 	bl	802df10 <abort>
 802df44:	4b04      	ldr	r3, [pc, #16]	; (802df58 <__assert_func+0x38>)
 802df46:	461c      	mov	r4, r3
 802df48:	e7f3      	b.n	802df32 <__assert_func+0x12>
 802df4a:	bf00      	nop
 802df4c:	20000098 	.word	0x20000098
 802df50:	08033b20 	.word	0x08033b20
 802df54:	08033b2d 	.word	0x08033b2d
 802df58:	08033b5b 	.word	0x08033b5b

0802df5c <atexit>:
 802df5c:	2300      	movs	r3, #0
 802df5e:	4601      	mov	r1, r0
 802df60:	461a      	mov	r2, r3
 802df62:	4618      	mov	r0, r3
 802df64:	f000 bef6 	b.w	802ed54 <__register_exitproc>

0802df68 <calloc>:
 802df68:	4b02      	ldr	r3, [pc, #8]	; (802df74 <calloc+0xc>)
 802df6a:	460a      	mov	r2, r1
 802df6c:	4601      	mov	r1, r0
 802df6e:	6818      	ldr	r0, [r3, #0]
 802df70:	f000 b96c 	b.w	802e24c <_calloc_r>
 802df74:	20000098 	.word	0x20000098

0802df78 <__cxa_atexit>:
 802df78:	b510      	push	{r4, lr}
 802df7a:	4c05      	ldr	r4, [pc, #20]	; (802df90 <__cxa_atexit+0x18>)
 802df7c:	4613      	mov	r3, r2
 802df7e:	b12c      	cbz	r4, 802df8c <__cxa_atexit+0x14>
 802df80:	460a      	mov	r2, r1
 802df82:	4601      	mov	r1, r0
 802df84:	2002      	movs	r0, #2
 802df86:	f000 fee5 	bl	802ed54 <__register_exitproc>
 802df8a:	bd10      	pop	{r4, pc}
 802df8c:	4620      	mov	r0, r4
 802df8e:	e7fc      	b.n	802df8a <__cxa_atexit+0x12>
 802df90:	0802ed55 	.word	0x0802ed55

0802df94 <__errno>:
 802df94:	4b01      	ldr	r3, [pc, #4]	; (802df9c <__errno+0x8>)
 802df96:	6818      	ldr	r0, [r3, #0]
 802df98:	4770      	bx	lr
 802df9a:	bf00      	nop
 802df9c:	20000098 	.word	0x20000098

0802dfa0 <std>:
 802dfa0:	2300      	movs	r3, #0
 802dfa2:	b510      	push	{r4, lr}
 802dfa4:	4604      	mov	r4, r0
 802dfa6:	e9c0 3300 	strd	r3, r3, [r0]
 802dfaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dfae:	6083      	str	r3, [r0, #8]
 802dfb0:	8181      	strh	r1, [r0, #12]
 802dfb2:	6643      	str	r3, [r0, #100]	; 0x64
 802dfb4:	81c2      	strh	r2, [r0, #14]
 802dfb6:	6183      	str	r3, [r0, #24]
 802dfb8:	4619      	mov	r1, r3
 802dfba:	2208      	movs	r2, #8
 802dfbc:	305c      	adds	r0, #92	; 0x5c
 802dfbe:	f000 f93d 	bl	802e23c <memset>
 802dfc2:	4b05      	ldr	r3, [pc, #20]	; (802dfd8 <std+0x38>)
 802dfc4:	6263      	str	r3, [r4, #36]	; 0x24
 802dfc6:	4b05      	ldr	r3, [pc, #20]	; (802dfdc <std+0x3c>)
 802dfc8:	62a3      	str	r3, [r4, #40]	; 0x28
 802dfca:	4b05      	ldr	r3, [pc, #20]	; (802dfe0 <std+0x40>)
 802dfcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802dfce:	4b05      	ldr	r3, [pc, #20]	; (802dfe4 <std+0x44>)
 802dfd0:	6224      	str	r4, [r4, #32]
 802dfd2:	6323      	str	r3, [r4, #48]	; 0x30
 802dfd4:	bd10      	pop	{r4, pc}
 802dfd6:	bf00      	nop
 802dfd8:	0802eb19 	.word	0x0802eb19
 802dfdc:	0802eb3b 	.word	0x0802eb3b
 802dfe0:	0802eb73 	.word	0x0802eb73
 802dfe4:	0802eb97 	.word	0x0802eb97

0802dfe8 <_cleanup_r>:
 802dfe8:	4901      	ldr	r1, [pc, #4]	; (802dff0 <_cleanup_r+0x8>)
 802dfea:	f000 b8c1 	b.w	802e170 <_fwalk_reent>
 802dfee:	bf00      	nop
 802dff0:	0802ef45 	.word	0x0802ef45

0802dff4 <__sfmoreglue>:
 802dff4:	b570      	push	{r4, r5, r6, lr}
 802dff6:	1e4a      	subs	r2, r1, #1
 802dff8:	2568      	movs	r5, #104	; 0x68
 802dffa:	4355      	muls	r5, r2
 802dffc:	460e      	mov	r6, r1
 802dffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e002:	f000 f983 	bl	802e30c <_malloc_r>
 802e006:	4604      	mov	r4, r0
 802e008:	b140      	cbz	r0, 802e01c <__sfmoreglue+0x28>
 802e00a:	2100      	movs	r1, #0
 802e00c:	e9c0 1600 	strd	r1, r6, [r0]
 802e010:	300c      	adds	r0, #12
 802e012:	60a0      	str	r0, [r4, #8]
 802e014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e018:	f000 f910 	bl	802e23c <memset>
 802e01c:	4620      	mov	r0, r4
 802e01e:	bd70      	pop	{r4, r5, r6, pc}

0802e020 <__sfp_lock_acquire>:
 802e020:	4801      	ldr	r0, [pc, #4]	; (802e028 <__sfp_lock_acquire+0x8>)
 802e022:	f000 b8ea 	b.w	802e1fa <__retarget_lock_acquire_recursive>
 802e026:	bf00      	nop
 802e028:	2000b624 	.word	0x2000b624

0802e02c <__sfp_lock_release>:
 802e02c:	4801      	ldr	r0, [pc, #4]	; (802e034 <__sfp_lock_release+0x8>)
 802e02e:	f000 b8e6 	b.w	802e1fe <__retarget_lock_release_recursive>
 802e032:	bf00      	nop
 802e034:	2000b624 	.word	0x2000b624

0802e038 <__sinit_lock_acquire>:
 802e038:	4801      	ldr	r0, [pc, #4]	; (802e040 <__sinit_lock_acquire+0x8>)
 802e03a:	f000 b8de 	b.w	802e1fa <__retarget_lock_acquire_recursive>
 802e03e:	bf00      	nop
 802e040:	2000b61f 	.word	0x2000b61f

0802e044 <__sinit_lock_release>:
 802e044:	4801      	ldr	r0, [pc, #4]	; (802e04c <__sinit_lock_release+0x8>)
 802e046:	f000 b8da 	b.w	802e1fe <__retarget_lock_release_recursive>
 802e04a:	bf00      	nop
 802e04c:	2000b61f 	.word	0x2000b61f

0802e050 <__sinit>:
 802e050:	b510      	push	{r4, lr}
 802e052:	4604      	mov	r4, r0
 802e054:	f7ff fff0 	bl	802e038 <__sinit_lock_acquire>
 802e058:	69a3      	ldr	r3, [r4, #24]
 802e05a:	b11b      	cbz	r3, 802e064 <__sinit+0x14>
 802e05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e060:	f7ff bff0 	b.w	802e044 <__sinit_lock_release>
 802e064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e068:	6523      	str	r3, [r4, #80]	; 0x50
 802e06a:	4b13      	ldr	r3, [pc, #76]	; (802e0b8 <__sinit+0x68>)
 802e06c:	4a13      	ldr	r2, [pc, #76]	; (802e0bc <__sinit+0x6c>)
 802e06e:	681b      	ldr	r3, [r3, #0]
 802e070:	62a2      	str	r2, [r4, #40]	; 0x28
 802e072:	42a3      	cmp	r3, r4
 802e074:	bf04      	itt	eq
 802e076:	2301      	moveq	r3, #1
 802e078:	61a3      	streq	r3, [r4, #24]
 802e07a:	4620      	mov	r0, r4
 802e07c:	f000 f820 	bl	802e0c0 <__sfp>
 802e080:	6060      	str	r0, [r4, #4]
 802e082:	4620      	mov	r0, r4
 802e084:	f000 f81c 	bl	802e0c0 <__sfp>
 802e088:	60a0      	str	r0, [r4, #8]
 802e08a:	4620      	mov	r0, r4
 802e08c:	f000 f818 	bl	802e0c0 <__sfp>
 802e090:	2200      	movs	r2, #0
 802e092:	60e0      	str	r0, [r4, #12]
 802e094:	2104      	movs	r1, #4
 802e096:	6860      	ldr	r0, [r4, #4]
 802e098:	f7ff ff82 	bl	802dfa0 <std>
 802e09c:	68a0      	ldr	r0, [r4, #8]
 802e09e:	2201      	movs	r2, #1
 802e0a0:	2109      	movs	r1, #9
 802e0a2:	f7ff ff7d 	bl	802dfa0 <std>
 802e0a6:	68e0      	ldr	r0, [r4, #12]
 802e0a8:	2202      	movs	r2, #2
 802e0aa:	2112      	movs	r1, #18
 802e0ac:	f7ff ff78 	bl	802dfa0 <std>
 802e0b0:	2301      	movs	r3, #1
 802e0b2:	61a3      	str	r3, [r4, #24]
 802e0b4:	e7d2      	b.n	802e05c <__sinit+0xc>
 802e0b6:	bf00      	nop
 802e0b8:	08033bbc 	.word	0x08033bbc
 802e0bc:	0802dfe9 	.word	0x0802dfe9

0802e0c0 <__sfp>:
 802e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e0c2:	4607      	mov	r7, r0
 802e0c4:	f7ff ffac 	bl	802e020 <__sfp_lock_acquire>
 802e0c8:	4b1e      	ldr	r3, [pc, #120]	; (802e144 <__sfp+0x84>)
 802e0ca:	681e      	ldr	r6, [r3, #0]
 802e0cc:	69b3      	ldr	r3, [r6, #24]
 802e0ce:	b913      	cbnz	r3, 802e0d6 <__sfp+0x16>
 802e0d0:	4630      	mov	r0, r6
 802e0d2:	f7ff ffbd 	bl	802e050 <__sinit>
 802e0d6:	3648      	adds	r6, #72	; 0x48
 802e0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e0dc:	3b01      	subs	r3, #1
 802e0de:	d503      	bpl.n	802e0e8 <__sfp+0x28>
 802e0e0:	6833      	ldr	r3, [r6, #0]
 802e0e2:	b30b      	cbz	r3, 802e128 <__sfp+0x68>
 802e0e4:	6836      	ldr	r6, [r6, #0]
 802e0e6:	e7f7      	b.n	802e0d8 <__sfp+0x18>
 802e0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e0ec:	b9d5      	cbnz	r5, 802e124 <__sfp+0x64>
 802e0ee:	4b16      	ldr	r3, [pc, #88]	; (802e148 <__sfp+0x88>)
 802e0f0:	60e3      	str	r3, [r4, #12]
 802e0f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e0f6:	6665      	str	r5, [r4, #100]	; 0x64
 802e0f8:	f000 f87e 	bl	802e1f8 <__retarget_lock_init_recursive>
 802e0fc:	f7ff ff96 	bl	802e02c <__sfp_lock_release>
 802e100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e108:	6025      	str	r5, [r4, #0]
 802e10a:	61a5      	str	r5, [r4, #24]
 802e10c:	2208      	movs	r2, #8
 802e10e:	4629      	mov	r1, r5
 802e110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e114:	f000 f892 	bl	802e23c <memset>
 802e118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e120:	4620      	mov	r0, r4
 802e122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e124:	3468      	adds	r4, #104	; 0x68
 802e126:	e7d9      	b.n	802e0dc <__sfp+0x1c>
 802e128:	2104      	movs	r1, #4
 802e12a:	4638      	mov	r0, r7
 802e12c:	f7ff ff62 	bl	802dff4 <__sfmoreglue>
 802e130:	4604      	mov	r4, r0
 802e132:	6030      	str	r0, [r6, #0]
 802e134:	2800      	cmp	r0, #0
 802e136:	d1d5      	bne.n	802e0e4 <__sfp+0x24>
 802e138:	f7ff ff78 	bl	802e02c <__sfp_lock_release>
 802e13c:	230c      	movs	r3, #12
 802e13e:	603b      	str	r3, [r7, #0]
 802e140:	e7ee      	b.n	802e120 <__sfp+0x60>
 802e142:	bf00      	nop
 802e144:	08033bbc 	.word	0x08033bbc
 802e148:	ffff0001 	.word	0xffff0001

0802e14c <fiprintf>:
 802e14c:	b40e      	push	{r1, r2, r3}
 802e14e:	b503      	push	{r0, r1, lr}
 802e150:	4601      	mov	r1, r0
 802e152:	ab03      	add	r3, sp, #12
 802e154:	4805      	ldr	r0, [pc, #20]	; (802e16c <fiprintf+0x20>)
 802e156:	f853 2b04 	ldr.w	r2, [r3], #4
 802e15a:	6800      	ldr	r0, [r0, #0]
 802e15c:	9301      	str	r3, [sp, #4]
 802e15e:	f000 f959 	bl	802e414 <_vfiprintf_r>
 802e162:	b002      	add	sp, #8
 802e164:	f85d eb04 	ldr.w	lr, [sp], #4
 802e168:	b003      	add	sp, #12
 802e16a:	4770      	bx	lr
 802e16c:	20000098 	.word	0x20000098

0802e170 <_fwalk_reent>:
 802e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e174:	4606      	mov	r6, r0
 802e176:	4688      	mov	r8, r1
 802e178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e17c:	2700      	movs	r7, #0
 802e17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e182:	f1b9 0901 	subs.w	r9, r9, #1
 802e186:	d505      	bpl.n	802e194 <_fwalk_reent+0x24>
 802e188:	6824      	ldr	r4, [r4, #0]
 802e18a:	2c00      	cmp	r4, #0
 802e18c:	d1f7      	bne.n	802e17e <_fwalk_reent+0xe>
 802e18e:	4638      	mov	r0, r7
 802e190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e194:	89ab      	ldrh	r3, [r5, #12]
 802e196:	2b01      	cmp	r3, #1
 802e198:	d907      	bls.n	802e1aa <_fwalk_reent+0x3a>
 802e19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e19e:	3301      	adds	r3, #1
 802e1a0:	d003      	beq.n	802e1aa <_fwalk_reent+0x3a>
 802e1a2:	4629      	mov	r1, r5
 802e1a4:	4630      	mov	r0, r6
 802e1a6:	47c0      	blx	r8
 802e1a8:	4307      	orrs	r7, r0
 802e1aa:	3568      	adds	r5, #104	; 0x68
 802e1ac:	e7e9      	b.n	802e182 <_fwalk_reent+0x12>
	...

0802e1b0 <__libc_init_array>:
 802e1b0:	b570      	push	{r4, r5, r6, lr}
 802e1b2:	4d0d      	ldr	r5, [pc, #52]	; (802e1e8 <__libc_init_array+0x38>)
 802e1b4:	4c0d      	ldr	r4, [pc, #52]	; (802e1ec <__libc_init_array+0x3c>)
 802e1b6:	1b64      	subs	r4, r4, r5
 802e1b8:	10a4      	asrs	r4, r4, #2
 802e1ba:	2600      	movs	r6, #0
 802e1bc:	42a6      	cmp	r6, r4
 802e1be:	d109      	bne.n	802e1d4 <__libc_init_array+0x24>
 802e1c0:	4d0b      	ldr	r5, [pc, #44]	; (802e1f0 <__libc_init_array+0x40>)
 802e1c2:	4c0c      	ldr	r4, [pc, #48]	; (802e1f4 <__libc_init_array+0x44>)
 802e1c4:	f000 ffb0 	bl	802f128 <_init>
 802e1c8:	1b64      	subs	r4, r4, r5
 802e1ca:	10a4      	asrs	r4, r4, #2
 802e1cc:	2600      	movs	r6, #0
 802e1ce:	42a6      	cmp	r6, r4
 802e1d0:	d105      	bne.n	802e1de <__libc_init_array+0x2e>
 802e1d2:	bd70      	pop	{r4, r5, r6, pc}
 802e1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 802e1d8:	4798      	blx	r3
 802e1da:	3601      	adds	r6, #1
 802e1dc:	e7ee      	b.n	802e1bc <__libc_init_array+0xc>
 802e1de:	f855 3b04 	ldr.w	r3, [r5], #4
 802e1e2:	4798      	blx	r3
 802e1e4:	3601      	adds	r6, #1
 802e1e6:	e7f2      	b.n	802e1ce <__libc_init_array+0x1e>
 802e1e8:	080f1c74 	.word	0x080f1c74
 802e1ec:	080f1c74 	.word	0x080f1c74
 802e1f0:	080f1c74 	.word	0x080f1c74
 802e1f4:	080f1c88 	.word	0x080f1c88

0802e1f8 <__retarget_lock_init_recursive>:
 802e1f8:	4770      	bx	lr

0802e1fa <__retarget_lock_acquire_recursive>:
 802e1fa:	4770      	bx	lr

0802e1fc <__retarget_lock_release>:
 802e1fc:	4770      	bx	lr

0802e1fe <__retarget_lock_release_recursive>:
 802e1fe:	4770      	bx	lr

0802e200 <malloc>:
 802e200:	4b02      	ldr	r3, [pc, #8]	; (802e20c <malloc+0xc>)
 802e202:	4601      	mov	r1, r0
 802e204:	6818      	ldr	r0, [r3, #0]
 802e206:	f000 b881 	b.w	802e30c <_malloc_r>
 802e20a:	bf00      	nop
 802e20c:	20000098 	.word	0x20000098

0802e210 <free>:
 802e210:	4b02      	ldr	r3, [pc, #8]	; (802e21c <free+0xc>)
 802e212:	4601      	mov	r1, r0
 802e214:	6818      	ldr	r0, [r3, #0]
 802e216:	f000 b829 	b.w	802e26c <_free_r>
 802e21a:	bf00      	nop
 802e21c:	20000098 	.word	0x20000098

0802e220 <memcpy>:
 802e220:	440a      	add	r2, r1
 802e222:	4291      	cmp	r1, r2
 802e224:	f100 33ff 	add.w	r3, r0, #4294967295
 802e228:	d100      	bne.n	802e22c <memcpy+0xc>
 802e22a:	4770      	bx	lr
 802e22c:	b510      	push	{r4, lr}
 802e22e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e232:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e236:	4291      	cmp	r1, r2
 802e238:	d1f9      	bne.n	802e22e <memcpy+0xe>
 802e23a:	bd10      	pop	{r4, pc}

0802e23c <memset>:
 802e23c:	4402      	add	r2, r0
 802e23e:	4603      	mov	r3, r0
 802e240:	4293      	cmp	r3, r2
 802e242:	d100      	bne.n	802e246 <memset+0xa>
 802e244:	4770      	bx	lr
 802e246:	f803 1b01 	strb.w	r1, [r3], #1
 802e24a:	e7f9      	b.n	802e240 <memset+0x4>

0802e24c <_calloc_r>:
 802e24c:	b513      	push	{r0, r1, r4, lr}
 802e24e:	434a      	muls	r2, r1
 802e250:	4611      	mov	r1, r2
 802e252:	9201      	str	r2, [sp, #4]
 802e254:	f000 f85a 	bl	802e30c <_malloc_r>
 802e258:	4604      	mov	r4, r0
 802e25a:	b118      	cbz	r0, 802e264 <_calloc_r+0x18>
 802e25c:	9a01      	ldr	r2, [sp, #4]
 802e25e:	2100      	movs	r1, #0
 802e260:	f7ff ffec 	bl	802e23c <memset>
 802e264:	4620      	mov	r0, r4
 802e266:	b002      	add	sp, #8
 802e268:	bd10      	pop	{r4, pc}
	...

0802e26c <_free_r>:
 802e26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e26e:	2900      	cmp	r1, #0
 802e270:	d048      	beq.n	802e304 <_free_r+0x98>
 802e272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e276:	9001      	str	r0, [sp, #4]
 802e278:	2b00      	cmp	r3, #0
 802e27a:	f1a1 0404 	sub.w	r4, r1, #4
 802e27e:	bfb8      	it	lt
 802e280:	18e4      	addlt	r4, r4, r3
 802e282:	f000 ff11 	bl	802f0a8 <__malloc_lock>
 802e286:	4a20      	ldr	r2, [pc, #128]	; (802e308 <_free_r+0x9c>)
 802e288:	9801      	ldr	r0, [sp, #4]
 802e28a:	6813      	ldr	r3, [r2, #0]
 802e28c:	4615      	mov	r5, r2
 802e28e:	b933      	cbnz	r3, 802e29e <_free_r+0x32>
 802e290:	6063      	str	r3, [r4, #4]
 802e292:	6014      	str	r4, [r2, #0]
 802e294:	b003      	add	sp, #12
 802e296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e29a:	f000 bf0b 	b.w	802f0b4 <__malloc_unlock>
 802e29e:	42a3      	cmp	r3, r4
 802e2a0:	d90b      	bls.n	802e2ba <_free_r+0x4e>
 802e2a2:	6821      	ldr	r1, [r4, #0]
 802e2a4:	1862      	adds	r2, r4, r1
 802e2a6:	4293      	cmp	r3, r2
 802e2a8:	bf04      	itt	eq
 802e2aa:	681a      	ldreq	r2, [r3, #0]
 802e2ac:	685b      	ldreq	r3, [r3, #4]
 802e2ae:	6063      	str	r3, [r4, #4]
 802e2b0:	bf04      	itt	eq
 802e2b2:	1852      	addeq	r2, r2, r1
 802e2b4:	6022      	streq	r2, [r4, #0]
 802e2b6:	602c      	str	r4, [r5, #0]
 802e2b8:	e7ec      	b.n	802e294 <_free_r+0x28>
 802e2ba:	461a      	mov	r2, r3
 802e2bc:	685b      	ldr	r3, [r3, #4]
 802e2be:	b10b      	cbz	r3, 802e2c4 <_free_r+0x58>
 802e2c0:	42a3      	cmp	r3, r4
 802e2c2:	d9fa      	bls.n	802e2ba <_free_r+0x4e>
 802e2c4:	6811      	ldr	r1, [r2, #0]
 802e2c6:	1855      	adds	r5, r2, r1
 802e2c8:	42a5      	cmp	r5, r4
 802e2ca:	d10b      	bne.n	802e2e4 <_free_r+0x78>
 802e2cc:	6824      	ldr	r4, [r4, #0]
 802e2ce:	4421      	add	r1, r4
 802e2d0:	1854      	adds	r4, r2, r1
 802e2d2:	42a3      	cmp	r3, r4
 802e2d4:	6011      	str	r1, [r2, #0]
 802e2d6:	d1dd      	bne.n	802e294 <_free_r+0x28>
 802e2d8:	681c      	ldr	r4, [r3, #0]
 802e2da:	685b      	ldr	r3, [r3, #4]
 802e2dc:	6053      	str	r3, [r2, #4]
 802e2de:	4421      	add	r1, r4
 802e2e0:	6011      	str	r1, [r2, #0]
 802e2e2:	e7d7      	b.n	802e294 <_free_r+0x28>
 802e2e4:	d902      	bls.n	802e2ec <_free_r+0x80>
 802e2e6:	230c      	movs	r3, #12
 802e2e8:	6003      	str	r3, [r0, #0]
 802e2ea:	e7d3      	b.n	802e294 <_free_r+0x28>
 802e2ec:	6825      	ldr	r5, [r4, #0]
 802e2ee:	1961      	adds	r1, r4, r5
 802e2f0:	428b      	cmp	r3, r1
 802e2f2:	bf04      	itt	eq
 802e2f4:	6819      	ldreq	r1, [r3, #0]
 802e2f6:	685b      	ldreq	r3, [r3, #4]
 802e2f8:	6063      	str	r3, [r4, #4]
 802e2fa:	bf04      	itt	eq
 802e2fc:	1949      	addeq	r1, r1, r5
 802e2fe:	6021      	streq	r1, [r4, #0]
 802e300:	6054      	str	r4, [r2, #4]
 802e302:	e7c7      	b.n	802e294 <_free_r+0x28>
 802e304:	b003      	add	sp, #12
 802e306:	bd30      	pop	{r4, r5, pc}
 802e308:	200098c4 	.word	0x200098c4

0802e30c <_malloc_r>:
 802e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e30e:	1ccd      	adds	r5, r1, #3
 802e310:	f025 0503 	bic.w	r5, r5, #3
 802e314:	3508      	adds	r5, #8
 802e316:	2d0c      	cmp	r5, #12
 802e318:	bf38      	it	cc
 802e31a:	250c      	movcc	r5, #12
 802e31c:	2d00      	cmp	r5, #0
 802e31e:	4606      	mov	r6, r0
 802e320:	db01      	blt.n	802e326 <_malloc_r+0x1a>
 802e322:	42a9      	cmp	r1, r5
 802e324:	d903      	bls.n	802e32e <_malloc_r+0x22>
 802e326:	230c      	movs	r3, #12
 802e328:	6033      	str	r3, [r6, #0]
 802e32a:	2000      	movs	r0, #0
 802e32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e32e:	f000 febb 	bl	802f0a8 <__malloc_lock>
 802e332:	4921      	ldr	r1, [pc, #132]	; (802e3b8 <_malloc_r+0xac>)
 802e334:	680a      	ldr	r2, [r1, #0]
 802e336:	4614      	mov	r4, r2
 802e338:	b99c      	cbnz	r4, 802e362 <_malloc_r+0x56>
 802e33a:	4f20      	ldr	r7, [pc, #128]	; (802e3bc <_malloc_r+0xb0>)
 802e33c:	683b      	ldr	r3, [r7, #0]
 802e33e:	b923      	cbnz	r3, 802e34a <_malloc_r+0x3e>
 802e340:	4621      	mov	r1, r4
 802e342:	4630      	mov	r0, r6
 802e344:	f000 fb94 	bl	802ea70 <_sbrk_r>
 802e348:	6038      	str	r0, [r7, #0]
 802e34a:	4629      	mov	r1, r5
 802e34c:	4630      	mov	r0, r6
 802e34e:	f000 fb8f 	bl	802ea70 <_sbrk_r>
 802e352:	1c43      	adds	r3, r0, #1
 802e354:	d123      	bne.n	802e39e <_malloc_r+0x92>
 802e356:	230c      	movs	r3, #12
 802e358:	6033      	str	r3, [r6, #0]
 802e35a:	4630      	mov	r0, r6
 802e35c:	f000 feaa 	bl	802f0b4 <__malloc_unlock>
 802e360:	e7e3      	b.n	802e32a <_malloc_r+0x1e>
 802e362:	6823      	ldr	r3, [r4, #0]
 802e364:	1b5b      	subs	r3, r3, r5
 802e366:	d417      	bmi.n	802e398 <_malloc_r+0x8c>
 802e368:	2b0b      	cmp	r3, #11
 802e36a:	d903      	bls.n	802e374 <_malloc_r+0x68>
 802e36c:	6023      	str	r3, [r4, #0]
 802e36e:	441c      	add	r4, r3
 802e370:	6025      	str	r5, [r4, #0]
 802e372:	e004      	b.n	802e37e <_malloc_r+0x72>
 802e374:	6863      	ldr	r3, [r4, #4]
 802e376:	42a2      	cmp	r2, r4
 802e378:	bf0c      	ite	eq
 802e37a:	600b      	streq	r3, [r1, #0]
 802e37c:	6053      	strne	r3, [r2, #4]
 802e37e:	4630      	mov	r0, r6
 802e380:	f000 fe98 	bl	802f0b4 <__malloc_unlock>
 802e384:	f104 000b 	add.w	r0, r4, #11
 802e388:	1d23      	adds	r3, r4, #4
 802e38a:	f020 0007 	bic.w	r0, r0, #7
 802e38e:	1ac2      	subs	r2, r0, r3
 802e390:	d0cc      	beq.n	802e32c <_malloc_r+0x20>
 802e392:	1a1b      	subs	r3, r3, r0
 802e394:	50a3      	str	r3, [r4, r2]
 802e396:	e7c9      	b.n	802e32c <_malloc_r+0x20>
 802e398:	4622      	mov	r2, r4
 802e39a:	6864      	ldr	r4, [r4, #4]
 802e39c:	e7cc      	b.n	802e338 <_malloc_r+0x2c>
 802e39e:	1cc4      	adds	r4, r0, #3
 802e3a0:	f024 0403 	bic.w	r4, r4, #3
 802e3a4:	42a0      	cmp	r0, r4
 802e3a6:	d0e3      	beq.n	802e370 <_malloc_r+0x64>
 802e3a8:	1a21      	subs	r1, r4, r0
 802e3aa:	4630      	mov	r0, r6
 802e3ac:	f000 fb60 	bl	802ea70 <_sbrk_r>
 802e3b0:	3001      	adds	r0, #1
 802e3b2:	d1dd      	bne.n	802e370 <_malloc_r+0x64>
 802e3b4:	e7cf      	b.n	802e356 <_malloc_r+0x4a>
 802e3b6:	bf00      	nop
 802e3b8:	200098c4 	.word	0x200098c4
 802e3bc:	200098c8 	.word	0x200098c8

0802e3c0 <__sfputc_r>:
 802e3c0:	6893      	ldr	r3, [r2, #8]
 802e3c2:	3b01      	subs	r3, #1
 802e3c4:	2b00      	cmp	r3, #0
 802e3c6:	b410      	push	{r4}
 802e3c8:	6093      	str	r3, [r2, #8]
 802e3ca:	da08      	bge.n	802e3de <__sfputc_r+0x1e>
 802e3cc:	6994      	ldr	r4, [r2, #24]
 802e3ce:	42a3      	cmp	r3, r4
 802e3d0:	db01      	blt.n	802e3d6 <__sfputc_r+0x16>
 802e3d2:	290a      	cmp	r1, #10
 802e3d4:	d103      	bne.n	802e3de <__sfputc_r+0x1e>
 802e3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e3da:	f000 bbe9 	b.w	802ebb0 <__swbuf_r>
 802e3de:	6813      	ldr	r3, [r2, #0]
 802e3e0:	1c58      	adds	r0, r3, #1
 802e3e2:	6010      	str	r0, [r2, #0]
 802e3e4:	7019      	strb	r1, [r3, #0]
 802e3e6:	4608      	mov	r0, r1
 802e3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e3ec:	4770      	bx	lr

0802e3ee <__sfputs_r>:
 802e3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e3f0:	4606      	mov	r6, r0
 802e3f2:	460f      	mov	r7, r1
 802e3f4:	4614      	mov	r4, r2
 802e3f6:	18d5      	adds	r5, r2, r3
 802e3f8:	42ac      	cmp	r4, r5
 802e3fa:	d101      	bne.n	802e400 <__sfputs_r+0x12>
 802e3fc:	2000      	movs	r0, #0
 802e3fe:	e007      	b.n	802e410 <__sfputs_r+0x22>
 802e400:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e404:	463a      	mov	r2, r7
 802e406:	4630      	mov	r0, r6
 802e408:	f7ff ffda 	bl	802e3c0 <__sfputc_r>
 802e40c:	1c43      	adds	r3, r0, #1
 802e40e:	d1f3      	bne.n	802e3f8 <__sfputs_r+0xa>
 802e410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e414 <_vfiprintf_r>:
 802e414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e418:	460d      	mov	r5, r1
 802e41a:	b09d      	sub	sp, #116	; 0x74
 802e41c:	4614      	mov	r4, r2
 802e41e:	4698      	mov	r8, r3
 802e420:	4606      	mov	r6, r0
 802e422:	b118      	cbz	r0, 802e42c <_vfiprintf_r+0x18>
 802e424:	6983      	ldr	r3, [r0, #24]
 802e426:	b90b      	cbnz	r3, 802e42c <_vfiprintf_r+0x18>
 802e428:	f7ff fe12 	bl	802e050 <__sinit>
 802e42c:	4b89      	ldr	r3, [pc, #548]	; (802e654 <_vfiprintf_r+0x240>)
 802e42e:	429d      	cmp	r5, r3
 802e430:	d11b      	bne.n	802e46a <_vfiprintf_r+0x56>
 802e432:	6875      	ldr	r5, [r6, #4]
 802e434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e436:	07d9      	lsls	r1, r3, #31
 802e438:	d405      	bmi.n	802e446 <_vfiprintf_r+0x32>
 802e43a:	89ab      	ldrh	r3, [r5, #12]
 802e43c:	059a      	lsls	r2, r3, #22
 802e43e:	d402      	bmi.n	802e446 <_vfiprintf_r+0x32>
 802e440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e442:	f7ff feda 	bl	802e1fa <__retarget_lock_acquire_recursive>
 802e446:	89ab      	ldrh	r3, [r5, #12]
 802e448:	071b      	lsls	r3, r3, #28
 802e44a:	d501      	bpl.n	802e450 <_vfiprintf_r+0x3c>
 802e44c:	692b      	ldr	r3, [r5, #16]
 802e44e:	b9eb      	cbnz	r3, 802e48c <_vfiprintf_r+0x78>
 802e450:	4629      	mov	r1, r5
 802e452:	4630      	mov	r0, r6
 802e454:	f000 fc10 	bl	802ec78 <__swsetup_r>
 802e458:	b1c0      	cbz	r0, 802e48c <_vfiprintf_r+0x78>
 802e45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e45c:	07dc      	lsls	r4, r3, #31
 802e45e:	d50e      	bpl.n	802e47e <_vfiprintf_r+0x6a>
 802e460:	f04f 30ff 	mov.w	r0, #4294967295
 802e464:	b01d      	add	sp, #116	; 0x74
 802e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e46a:	4b7b      	ldr	r3, [pc, #492]	; (802e658 <_vfiprintf_r+0x244>)
 802e46c:	429d      	cmp	r5, r3
 802e46e:	d101      	bne.n	802e474 <_vfiprintf_r+0x60>
 802e470:	68b5      	ldr	r5, [r6, #8]
 802e472:	e7df      	b.n	802e434 <_vfiprintf_r+0x20>
 802e474:	4b79      	ldr	r3, [pc, #484]	; (802e65c <_vfiprintf_r+0x248>)
 802e476:	429d      	cmp	r5, r3
 802e478:	bf08      	it	eq
 802e47a:	68f5      	ldreq	r5, [r6, #12]
 802e47c:	e7da      	b.n	802e434 <_vfiprintf_r+0x20>
 802e47e:	89ab      	ldrh	r3, [r5, #12]
 802e480:	0598      	lsls	r0, r3, #22
 802e482:	d4ed      	bmi.n	802e460 <_vfiprintf_r+0x4c>
 802e484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e486:	f7ff feba 	bl	802e1fe <__retarget_lock_release_recursive>
 802e48a:	e7e9      	b.n	802e460 <_vfiprintf_r+0x4c>
 802e48c:	2300      	movs	r3, #0
 802e48e:	9309      	str	r3, [sp, #36]	; 0x24
 802e490:	2320      	movs	r3, #32
 802e492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e496:	f8cd 800c 	str.w	r8, [sp, #12]
 802e49a:	2330      	movs	r3, #48	; 0x30
 802e49c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e660 <_vfiprintf_r+0x24c>
 802e4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e4a4:	f04f 0901 	mov.w	r9, #1
 802e4a8:	4623      	mov	r3, r4
 802e4aa:	469a      	mov	sl, r3
 802e4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e4b0:	b10a      	cbz	r2, 802e4b6 <_vfiprintf_r+0xa2>
 802e4b2:	2a25      	cmp	r2, #37	; 0x25
 802e4b4:	d1f9      	bne.n	802e4aa <_vfiprintf_r+0x96>
 802e4b6:	ebba 0b04 	subs.w	fp, sl, r4
 802e4ba:	d00b      	beq.n	802e4d4 <_vfiprintf_r+0xc0>
 802e4bc:	465b      	mov	r3, fp
 802e4be:	4622      	mov	r2, r4
 802e4c0:	4629      	mov	r1, r5
 802e4c2:	4630      	mov	r0, r6
 802e4c4:	f7ff ff93 	bl	802e3ee <__sfputs_r>
 802e4c8:	3001      	adds	r0, #1
 802e4ca:	f000 80aa 	beq.w	802e622 <_vfiprintf_r+0x20e>
 802e4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e4d0:	445a      	add	r2, fp
 802e4d2:	9209      	str	r2, [sp, #36]	; 0x24
 802e4d4:	f89a 3000 	ldrb.w	r3, [sl]
 802e4d8:	2b00      	cmp	r3, #0
 802e4da:	f000 80a2 	beq.w	802e622 <_vfiprintf_r+0x20e>
 802e4de:	2300      	movs	r3, #0
 802e4e0:	f04f 32ff 	mov.w	r2, #4294967295
 802e4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e4e8:	f10a 0a01 	add.w	sl, sl, #1
 802e4ec:	9304      	str	r3, [sp, #16]
 802e4ee:	9307      	str	r3, [sp, #28]
 802e4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e4f4:	931a      	str	r3, [sp, #104]	; 0x68
 802e4f6:	4654      	mov	r4, sl
 802e4f8:	2205      	movs	r2, #5
 802e4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e4fe:	4858      	ldr	r0, [pc, #352]	; (802e660 <_vfiprintf_r+0x24c>)
 802e500:	f7d1 fe7e 	bl	8000200 <memchr>
 802e504:	9a04      	ldr	r2, [sp, #16]
 802e506:	b9d8      	cbnz	r0, 802e540 <_vfiprintf_r+0x12c>
 802e508:	06d1      	lsls	r1, r2, #27
 802e50a:	bf44      	itt	mi
 802e50c:	2320      	movmi	r3, #32
 802e50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e512:	0713      	lsls	r3, r2, #28
 802e514:	bf44      	itt	mi
 802e516:	232b      	movmi	r3, #43	; 0x2b
 802e518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e51c:	f89a 3000 	ldrb.w	r3, [sl]
 802e520:	2b2a      	cmp	r3, #42	; 0x2a
 802e522:	d015      	beq.n	802e550 <_vfiprintf_r+0x13c>
 802e524:	9a07      	ldr	r2, [sp, #28]
 802e526:	4654      	mov	r4, sl
 802e528:	2000      	movs	r0, #0
 802e52a:	f04f 0c0a 	mov.w	ip, #10
 802e52e:	4621      	mov	r1, r4
 802e530:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e534:	3b30      	subs	r3, #48	; 0x30
 802e536:	2b09      	cmp	r3, #9
 802e538:	d94e      	bls.n	802e5d8 <_vfiprintf_r+0x1c4>
 802e53a:	b1b0      	cbz	r0, 802e56a <_vfiprintf_r+0x156>
 802e53c:	9207      	str	r2, [sp, #28]
 802e53e:	e014      	b.n	802e56a <_vfiprintf_r+0x156>
 802e540:	eba0 0308 	sub.w	r3, r0, r8
 802e544:	fa09 f303 	lsl.w	r3, r9, r3
 802e548:	4313      	orrs	r3, r2
 802e54a:	9304      	str	r3, [sp, #16]
 802e54c:	46a2      	mov	sl, r4
 802e54e:	e7d2      	b.n	802e4f6 <_vfiprintf_r+0xe2>
 802e550:	9b03      	ldr	r3, [sp, #12]
 802e552:	1d19      	adds	r1, r3, #4
 802e554:	681b      	ldr	r3, [r3, #0]
 802e556:	9103      	str	r1, [sp, #12]
 802e558:	2b00      	cmp	r3, #0
 802e55a:	bfbb      	ittet	lt
 802e55c:	425b      	neglt	r3, r3
 802e55e:	f042 0202 	orrlt.w	r2, r2, #2
 802e562:	9307      	strge	r3, [sp, #28]
 802e564:	9307      	strlt	r3, [sp, #28]
 802e566:	bfb8      	it	lt
 802e568:	9204      	strlt	r2, [sp, #16]
 802e56a:	7823      	ldrb	r3, [r4, #0]
 802e56c:	2b2e      	cmp	r3, #46	; 0x2e
 802e56e:	d10c      	bne.n	802e58a <_vfiprintf_r+0x176>
 802e570:	7863      	ldrb	r3, [r4, #1]
 802e572:	2b2a      	cmp	r3, #42	; 0x2a
 802e574:	d135      	bne.n	802e5e2 <_vfiprintf_r+0x1ce>
 802e576:	9b03      	ldr	r3, [sp, #12]
 802e578:	1d1a      	adds	r2, r3, #4
 802e57a:	681b      	ldr	r3, [r3, #0]
 802e57c:	9203      	str	r2, [sp, #12]
 802e57e:	2b00      	cmp	r3, #0
 802e580:	bfb8      	it	lt
 802e582:	f04f 33ff 	movlt.w	r3, #4294967295
 802e586:	3402      	adds	r4, #2
 802e588:	9305      	str	r3, [sp, #20]
 802e58a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e670 <_vfiprintf_r+0x25c>
 802e58e:	7821      	ldrb	r1, [r4, #0]
 802e590:	2203      	movs	r2, #3
 802e592:	4650      	mov	r0, sl
 802e594:	f7d1 fe34 	bl	8000200 <memchr>
 802e598:	b140      	cbz	r0, 802e5ac <_vfiprintf_r+0x198>
 802e59a:	2340      	movs	r3, #64	; 0x40
 802e59c:	eba0 000a 	sub.w	r0, r0, sl
 802e5a0:	fa03 f000 	lsl.w	r0, r3, r0
 802e5a4:	9b04      	ldr	r3, [sp, #16]
 802e5a6:	4303      	orrs	r3, r0
 802e5a8:	3401      	adds	r4, #1
 802e5aa:	9304      	str	r3, [sp, #16]
 802e5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e5b0:	482c      	ldr	r0, [pc, #176]	; (802e664 <_vfiprintf_r+0x250>)
 802e5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e5b6:	2206      	movs	r2, #6
 802e5b8:	f7d1 fe22 	bl	8000200 <memchr>
 802e5bc:	2800      	cmp	r0, #0
 802e5be:	d03f      	beq.n	802e640 <_vfiprintf_r+0x22c>
 802e5c0:	4b29      	ldr	r3, [pc, #164]	; (802e668 <_vfiprintf_r+0x254>)
 802e5c2:	bb1b      	cbnz	r3, 802e60c <_vfiprintf_r+0x1f8>
 802e5c4:	9b03      	ldr	r3, [sp, #12]
 802e5c6:	3307      	adds	r3, #7
 802e5c8:	f023 0307 	bic.w	r3, r3, #7
 802e5cc:	3308      	adds	r3, #8
 802e5ce:	9303      	str	r3, [sp, #12]
 802e5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e5d2:	443b      	add	r3, r7
 802e5d4:	9309      	str	r3, [sp, #36]	; 0x24
 802e5d6:	e767      	b.n	802e4a8 <_vfiprintf_r+0x94>
 802e5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 802e5dc:	460c      	mov	r4, r1
 802e5de:	2001      	movs	r0, #1
 802e5e0:	e7a5      	b.n	802e52e <_vfiprintf_r+0x11a>
 802e5e2:	2300      	movs	r3, #0
 802e5e4:	3401      	adds	r4, #1
 802e5e6:	9305      	str	r3, [sp, #20]
 802e5e8:	4619      	mov	r1, r3
 802e5ea:	f04f 0c0a 	mov.w	ip, #10
 802e5ee:	4620      	mov	r0, r4
 802e5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e5f4:	3a30      	subs	r2, #48	; 0x30
 802e5f6:	2a09      	cmp	r2, #9
 802e5f8:	d903      	bls.n	802e602 <_vfiprintf_r+0x1ee>
 802e5fa:	2b00      	cmp	r3, #0
 802e5fc:	d0c5      	beq.n	802e58a <_vfiprintf_r+0x176>
 802e5fe:	9105      	str	r1, [sp, #20]
 802e600:	e7c3      	b.n	802e58a <_vfiprintf_r+0x176>
 802e602:	fb0c 2101 	mla	r1, ip, r1, r2
 802e606:	4604      	mov	r4, r0
 802e608:	2301      	movs	r3, #1
 802e60a:	e7f0      	b.n	802e5ee <_vfiprintf_r+0x1da>
 802e60c:	ab03      	add	r3, sp, #12
 802e60e:	9300      	str	r3, [sp, #0]
 802e610:	462a      	mov	r2, r5
 802e612:	4b16      	ldr	r3, [pc, #88]	; (802e66c <_vfiprintf_r+0x258>)
 802e614:	a904      	add	r1, sp, #16
 802e616:	4630      	mov	r0, r6
 802e618:	f3af 8000 	nop.w
 802e61c:	4607      	mov	r7, r0
 802e61e:	1c78      	adds	r0, r7, #1
 802e620:	d1d6      	bne.n	802e5d0 <_vfiprintf_r+0x1bc>
 802e622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e624:	07d9      	lsls	r1, r3, #31
 802e626:	d405      	bmi.n	802e634 <_vfiprintf_r+0x220>
 802e628:	89ab      	ldrh	r3, [r5, #12]
 802e62a:	059a      	lsls	r2, r3, #22
 802e62c:	d402      	bmi.n	802e634 <_vfiprintf_r+0x220>
 802e62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e630:	f7ff fde5 	bl	802e1fe <__retarget_lock_release_recursive>
 802e634:	89ab      	ldrh	r3, [r5, #12]
 802e636:	065b      	lsls	r3, r3, #25
 802e638:	f53f af12 	bmi.w	802e460 <_vfiprintf_r+0x4c>
 802e63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e63e:	e711      	b.n	802e464 <_vfiprintf_r+0x50>
 802e640:	ab03      	add	r3, sp, #12
 802e642:	9300      	str	r3, [sp, #0]
 802e644:	462a      	mov	r2, r5
 802e646:	4b09      	ldr	r3, [pc, #36]	; (802e66c <_vfiprintf_r+0x258>)
 802e648:	a904      	add	r1, sp, #16
 802e64a:	4630      	mov	r0, r6
 802e64c:	f000 f880 	bl	802e750 <_printf_i>
 802e650:	e7e4      	b.n	802e61c <_vfiprintf_r+0x208>
 802e652:	bf00      	nop
 802e654:	08033b7c 	.word	0x08033b7c
 802e658:	08033b9c 	.word	0x08033b9c
 802e65c:	08033b5c 	.word	0x08033b5c
 802e660:	08033bc0 	.word	0x08033bc0
 802e664:	08033bca 	.word	0x08033bca
 802e668:	00000000 	.word	0x00000000
 802e66c:	0802e3ef 	.word	0x0802e3ef
 802e670:	08033bc6 	.word	0x08033bc6

0802e674 <_printf_common>:
 802e674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e678:	4616      	mov	r6, r2
 802e67a:	4699      	mov	r9, r3
 802e67c:	688a      	ldr	r2, [r1, #8]
 802e67e:	690b      	ldr	r3, [r1, #16]
 802e680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e684:	4293      	cmp	r3, r2
 802e686:	bfb8      	it	lt
 802e688:	4613      	movlt	r3, r2
 802e68a:	6033      	str	r3, [r6, #0]
 802e68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e690:	4607      	mov	r7, r0
 802e692:	460c      	mov	r4, r1
 802e694:	b10a      	cbz	r2, 802e69a <_printf_common+0x26>
 802e696:	3301      	adds	r3, #1
 802e698:	6033      	str	r3, [r6, #0]
 802e69a:	6823      	ldr	r3, [r4, #0]
 802e69c:	0699      	lsls	r1, r3, #26
 802e69e:	bf42      	ittt	mi
 802e6a0:	6833      	ldrmi	r3, [r6, #0]
 802e6a2:	3302      	addmi	r3, #2
 802e6a4:	6033      	strmi	r3, [r6, #0]
 802e6a6:	6825      	ldr	r5, [r4, #0]
 802e6a8:	f015 0506 	ands.w	r5, r5, #6
 802e6ac:	d106      	bne.n	802e6bc <_printf_common+0x48>
 802e6ae:	f104 0a19 	add.w	sl, r4, #25
 802e6b2:	68e3      	ldr	r3, [r4, #12]
 802e6b4:	6832      	ldr	r2, [r6, #0]
 802e6b6:	1a9b      	subs	r3, r3, r2
 802e6b8:	42ab      	cmp	r3, r5
 802e6ba:	dc26      	bgt.n	802e70a <_printf_common+0x96>
 802e6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e6c0:	1e13      	subs	r3, r2, #0
 802e6c2:	6822      	ldr	r2, [r4, #0]
 802e6c4:	bf18      	it	ne
 802e6c6:	2301      	movne	r3, #1
 802e6c8:	0692      	lsls	r2, r2, #26
 802e6ca:	d42b      	bmi.n	802e724 <_printf_common+0xb0>
 802e6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e6d0:	4649      	mov	r1, r9
 802e6d2:	4638      	mov	r0, r7
 802e6d4:	47c0      	blx	r8
 802e6d6:	3001      	adds	r0, #1
 802e6d8:	d01e      	beq.n	802e718 <_printf_common+0xa4>
 802e6da:	6823      	ldr	r3, [r4, #0]
 802e6dc:	68e5      	ldr	r5, [r4, #12]
 802e6de:	6832      	ldr	r2, [r6, #0]
 802e6e0:	f003 0306 	and.w	r3, r3, #6
 802e6e4:	2b04      	cmp	r3, #4
 802e6e6:	bf08      	it	eq
 802e6e8:	1aad      	subeq	r5, r5, r2
 802e6ea:	68a3      	ldr	r3, [r4, #8]
 802e6ec:	6922      	ldr	r2, [r4, #16]
 802e6ee:	bf0c      	ite	eq
 802e6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e6f4:	2500      	movne	r5, #0
 802e6f6:	4293      	cmp	r3, r2
 802e6f8:	bfc4      	itt	gt
 802e6fa:	1a9b      	subgt	r3, r3, r2
 802e6fc:	18ed      	addgt	r5, r5, r3
 802e6fe:	2600      	movs	r6, #0
 802e700:	341a      	adds	r4, #26
 802e702:	42b5      	cmp	r5, r6
 802e704:	d11a      	bne.n	802e73c <_printf_common+0xc8>
 802e706:	2000      	movs	r0, #0
 802e708:	e008      	b.n	802e71c <_printf_common+0xa8>
 802e70a:	2301      	movs	r3, #1
 802e70c:	4652      	mov	r2, sl
 802e70e:	4649      	mov	r1, r9
 802e710:	4638      	mov	r0, r7
 802e712:	47c0      	blx	r8
 802e714:	3001      	adds	r0, #1
 802e716:	d103      	bne.n	802e720 <_printf_common+0xac>
 802e718:	f04f 30ff 	mov.w	r0, #4294967295
 802e71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e720:	3501      	adds	r5, #1
 802e722:	e7c6      	b.n	802e6b2 <_printf_common+0x3e>
 802e724:	18e1      	adds	r1, r4, r3
 802e726:	1c5a      	adds	r2, r3, #1
 802e728:	2030      	movs	r0, #48	; 0x30
 802e72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e72e:	4422      	add	r2, r4
 802e730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e738:	3302      	adds	r3, #2
 802e73a:	e7c7      	b.n	802e6cc <_printf_common+0x58>
 802e73c:	2301      	movs	r3, #1
 802e73e:	4622      	mov	r2, r4
 802e740:	4649      	mov	r1, r9
 802e742:	4638      	mov	r0, r7
 802e744:	47c0      	blx	r8
 802e746:	3001      	adds	r0, #1
 802e748:	d0e6      	beq.n	802e718 <_printf_common+0xa4>
 802e74a:	3601      	adds	r6, #1
 802e74c:	e7d9      	b.n	802e702 <_printf_common+0x8e>
	...

0802e750 <_printf_i>:
 802e750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e754:	460c      	mov	r4, r1
 802e756:	4691      	mov	r9, r2
 802e758:	7e27      	ldrb	r7, [r4, #24]
 802e75a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802e75c:	2f78      	cmp	r7, #120	; 0x78
 802e75e:	4680      	mov	r8, r0
 802e760:	469a      	mov	sl, r3
 802e762:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e766:	d807      	bhi.n	802e778 <_printf_i+0x28>
 802e768:	2f62      	cmp	r7, #98	; 0x62
 802e76a:	d80a      	bhi.n	802e782 <_printf_i+0x32>
 802e76c:	2f00      	cmp	r7, #0
 802e76e:	f000 80d8 	beq.w	802e922 <_printf_i+0x1d2>
 802e772:	2f58      	cmp	r7, #88	; 0x58
 802e774:	f000 80a3 	beq.w	802e8be <_printf_i+0x16e>
 802e778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e780:	e03a      	b.n	802e7f8 <_printf_i+0xa8>
 802e782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e786:	2b15      	cmp	r3, #21
 802e788:	d8f6      	bhi.n	802e778 <_printf_i+0x28>
 802e78a:	a001      	add	r0, pc, #4	; (adr r0, 802e790 <_printf_i+0x40>)
 802e78c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802e790:	0802e7e9 	.word	0x0802e7e9
 802e794:	0802e7fd 	.word	0x0802e7fd
 802e798:	0802e779 	.word	0x0802e779
 802e79c:	0802e779 	.word	0x0802e779
 802e7a0:	0802e779 	.word	0x0802e779
 802e7a4:	0802e779 	.word	0x0802e779
 802e7a8:	0802e7fd 	.word	0x0802e7fd
 802e7ac:	0802e779 	.word	0x0802e779
 802e7b0:	0802e779 	.word	0x0802e779
 802e7b4:	0802e779 	.word	0x0802e779
 802e7b8:	0802e779 	.word	0x0802e779
 802e7bc:	0802e909 	.word	0x0802e909
 802e7c0:	0802e82d 	.word	0x0802e82d
 802e7c4:	0802e8eb 	.word	0x0802e8eb
 802e7c8:	0802e779 	.word	0x0802e779
 802e7cc:	0802e779 	.word	0x0802e779
 802e7d0:	0802e92b 	.word	0x0802e92b
 802e7d4:	0802e779 	.word	0x0802e779
 802e7d8:	0802e82d 	.word	0x0802e82d
 802e7dc:	0802e779 	.word	0x0802e779
 802e7e0:	0802e779 	.word	0x0802e779
 802e7e4:	0802e8f3 	.word	0x0802e8f3
 802e7e8:	680b      	ldr	r3, [r1, #0]
 802e7ea:	1d1a      	adds	r2, r3, #4
 802e7ec:	681b      	ldr	r3, [r3, #0]
 802e7ee:	600a      	str	r2, [r1, #0]
 802e7f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e7f8:	2301      	movs	r3, #1
 802e7fa:	e0a3      	b.n	802e944 <_printf_i+0x1f4>
 802e7fc:	6825      	ldr	r5, [r4, #0]
 802e7fe:	6808      	ldr	r0, [r1, #0]
 802e800:	062e      	lsls	r6, r5, #24
 802e802:	f100 0304 	add.w	r3, r0, #4
 802e806:	d50a      	bpl.n	802e81e <_printf_i+0xce>
 802e808:	6805      	ldr	r5, [r0, #0]
 802e80a:	600b      	str	r3, [r1, #0]
 802e80c:	2d00      	cmp	r5, #0
 802e80e:	da03      	bge.n	802e818 <_printf_i+0xc8>
 802e810:	232d      	movs	r3, #45	; 0x2d
 802e812:	426d      	negs	r5, r5
 802e814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e818:	485e      	ldr	r0, [pc, #376]	; (802e994 <_printf_i+0x244>)
 802e81a:	230a      	movs	r3, #10
 802e81c:	e019      	b.n	802e852 <_printf_i+0x102>
 802e81e:	f015 0f40 	tst.w	r5, #64	; 0x40
 802e822:	6805      	ldr	r5, [r0, #0]
 802e824:	600b      	str	r3, [r1, #0]
 802e826:	bf18      	it	ne
 802e828:	b22d      	sxthne	r5, r5
 802e82a:	e7ef      	b.n	802e80c <_printf_i+0xbc>
 802e82c:	680b      	ldr	r3, [r1, #0]
 802e82e:	6825      	ldr	r5, [r4, #0]
 802e830:	1d18      	adds	r0, r3, #4
 802e832:	6008      	str	r0, [r1, #0]
 802e834:	0628      	lsls	r0, r5, #24
 802e836:	d501      	bpl.n	802e83c <_printf_i+0xec>
 802e838:	681d      	ldr	r5, [r3, #0]
 802e83a:	e002      	b.n	802e842 <_printf_i+0xf2>
 802e83c:	0669      	lsls	r1, r5, #25
 802e83e:	d5fb      	bpl.n	802e838 <_printf_i+0xe8>
 802e840:	881d      	ldrh	r5, [r3, #0]
 802e842:	4854      	ldr	r0, [pc, #336]	; (802e994 <_printf_i+0x244>)
 802e844:	2f6f      	cmp	r7, #111	; 0x6f
 802e846:	bf0c      	ite	eq
 802e848:	2308      	moveq	r3, #8
 802e84a:	230a      	movne	r3, #10
 802e84c:	2100      	movs	r1, #0
 802e84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e852:	6866      	ldr	r6, [r4, #4]
 802e854:	60a6      	str	r6, [r4, #8]
 802e856:	2e00      	cmp	r6, #0
 802e858:	bfa2      	ittt	ge
 802e85a:	6821      	ldrge	r1, [r4, #0]
 802e85c:	f021 0104 	bicge.w	r1, r1, #4
 802e860:	6021      	strge	r1, [r4, #0]
 802e862:	b90d      	cbnz	r5, 802e868 <_printf_i+0x118>
 802e864:	2e00      	cmp	r6, #0
 802e866:	d04d      	beq.n	802e904 <_printf_i+0x1b4>
 802e868:	4616      	mov	r6, r2
 802e86a:	fbb5 f1f3 	udiv	r1, r5, r3
 802e86e:	fb03 5711 	mls	r7, r3, r1, r5
 802e872:	5dc7      	ldrb	r7, [r0, r7]
 802e874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e878:	462f      	mov	r7, r5
 802e87a:	42bb      	cmp	r3, r7
 802e87c:	460d      	mov	r5, r1
 802e87e:	d9f4      	bls.n	802e86a <_printf_i+0x11a>
 802e880:	2b08      	cmp	r3, #8
 802e882:	d10b      	bne.n	802e89c <_printf_i+0x14c>
 802e884:	6823      	ldr	r3, [r4, #0]
 802e886:	07df      	lsls	r7, r3, #31
 802e888:	d508      	bpl.n	802e89c <_printf_i+0x14c>
 802e88a:	6923      	ldr	r3, [r4, #16]
 802e88c:	6861      	ldr	r1, [r4, #4]
 802e88e:	4299      	cmp	r1, r3
 802e890:	bfde      	ittt	le
 802e892:	2330      	movle	r3, #48	; 0x30
 802e894:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e898:	f106 36ff 	addle.w	r6, r6, #4294967295
 802e89c:	1b92      	subs	r2, r2, r6
 802e89e:	6122      	str	r2, [r4, #16]
 802e8a0:	f8cd a000 	str.w	sl, [sp]
 802e8a4:	464b      	mov	r3, r9
 802e8a6:	aa03      	add	r2, sp, #12
 802e8a8:	4621      	mov	r1, r4
 802e8aa:	4640      	mov	r0, r8
 802e8ac:	f7ff fee2 	bl	802e674 <_printf_common>
 802e8b0:	3001      	adds	r0, #1
 802e8b2:	d14c      	bne.n	802e94e <_printf_i+0x1fe>
 802e8b4:	f04f 30ff 	mov.w	r0, #4294967295
 802e8b8:	b004      	add	sp, #16
 802e8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e8be:	4835      	ldr	r0, [pc, #212]	; (802e994 <_printf_i+0x244>)
 802e8c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802e8c4:	6823      	ldr	r3, [r4, #0]
 802e8c6:	680e      	ldr	r6, [r1, #0]
 802e8c8:	061f      	lsls	r7, r3, #24
 802e8ca:	f856 5b04 	ldr.w	r5, [r6], #4
 802e8ce:	600e      	str	r6, [r1, #0]
 802e8d0:	d514      	bpl.n	802e8fc <_printf_i+0x1ac>
 802e8d2:	07d9      	lsls	r1, r3, #31
 802e8d4:	bf44      	itt	mi
 802e8d6:	f043 0320 	orrmi.w	r3, r3, #32
 802e8da:	6023      	strmi	r3, [r4, #0]
 802e8dc:	b91d      	cbnz	r5, 802e8e6 <_printf_i+0x196>
 802e8de:	6823      	ldr	r3, [r4, #0]
 802e8e0:	f023 0320 	bic.w	r3, r3, #32
 802e8e4:	6023      	str	r3, [r4, #0]
 802e8e6:	2310      	movs	r3, #16
 802e8e8:	e7b0      	b.n	802e84c <_printf_i+0xfc>
 802e8ea:	6823      	ldr	r3, [r4, #0]
 802e8ec:	f043 0320 	orr.w	r3, r3, #32
 802e8f0:	6023      	str	r3, [r4, #0]
 802e8f2:	2378      	movs	r3, #120	; 0x78
 802e8f4:	4828      	ldr	r0, [pc, #160]	; (802e998 <_printf_i+0x248>)
 802e8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e8fa:	e7e3      	b.n	802e8c4 <_printf_i+0x174>
 802e8fc:	065e      	lsls	r6, r3, #25
 802e8fe:	bf48      	it	mi
 802e900:	b2ad      	uxthmi	r5, r5
 802e902:	e7e6      	b.n	802e8d2 <_printf_i+0x182>
 802e904:	4616      	mov	r6, r2
 802e906:	e7bb      	b.n	802e880 <_printf_i+0x130>
 802e908:	680b      	ldr	r3, [r1, #0]
 802e90a:	6826      	ldr	r6, [r4, #0]
 802e90c:	6960      	ldr	r0, [r4, #20]
 802e90e:	1d1d      	adds	r5, r3, #4
 802e910:	600d      	str	r5, [r1, #0]
 802e912:	0635      	lsls	r5, r6, #24
 802e914:	681b      	ldr	r3, [r3, #0]
 802e916:	d501      	bpl.n	802e91c <_printf_i+0x1cc>
 802e918:	6018      	str	r0, [r3, #0]
 802e91a:	e002      	b.n	802e922 <_printf_i+0x1d2>
 802e91c:	0671      	lsls	r1, r6, #25
 802e91e:	d5fb      	bpl.n	802e918 <_printf_i+0x1c8>
 802e920:	8018      	strh	r0, [r3, #0]
 802e922:	2300      	movs	r3, #0
 802e924:	6123      	str	r3, [r4, #16]
 802e926:	4616      	mov	r6, r2
 802e928:	e7ba      	b.n	802e8a0 <_printf_i+0x150>
 802e92a:	680b      	ldr	r3, [r1, #0]
 802e92c:	1d1a      	adds	r2, r3, #4
 802e92e:	600a      	str	r2, [r1, #0]
 802e930:	681e      	ldr	r6, [r3, #0]
 802e932:	6862      	ldr	r2, [r4, #4]
 802e934:	2100      	movs	r1, #0
 802e936:	4630      	mov	r0, r6
 802e938:	f7d1 fc62 	bl	8000200 <memchr>
 802e93c:	b108      	cbz	r0, 802e942 <_printf_i+0x1f2>
 802e93e:	1b80      	subs	r0, r0, r6
 802e940:	6060      	str	r0, [r4, #4]
 802e942:	6863      	ldr	r3, [r4, #4]
 802e944:	6123      	str	r3, [r4, #16]
 802e946:	2300      	movs	r3, #0
 802e948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e94c:	e7a8      	b.n	802e8a0 <_printf_i+0x150>
 802e94e:	6923      	ldr	r3, [r4, #16]
 802e950:	4632      	mov	r2, r6
 802e952:	4649      	mov	r1, r9
 802e954:	4640      	mov	r0, r8
 802e956:	47d0      	blx	sl
 802e958:	3001      	adds	r0, #1
 802e95a:	d0ab      	beq.n	802e8b4 <_printf_i+0x164>
 802e95c:	6823      	ldr	r3, [r4, #0]
 802e95e:	079b      	lsls	r3, r3, #30
 802e960:	d413      	bmi.n	802e98a <_printf_i+0x23a>
 802e962:	68e0      	ldr	r0, [r4, #12]
 802e964:	9b03      	ldr	r3, [sp, #12]
 802e966:	4298      	cmp	r0, r3
 802e968:	bfb8      	it	lt
 802e96a:	4618      	movlt	r0, r3
 802e96c:	e7a4      	b.n	802e8b8 <_printf_i+0x168>
 802e96e:	2301      	movs	r3, #1
 802e970:	4632      	mov	r2, r6
 802e972:	4649      	mov	r1, r9
 802e974:	4640      	mov	r0, r8
 802e976:	47d0      	blx	sl
 802e978:	3001      	adds	r0, #1
 802e97a:	d09b      	beq.n	802e8b4 <_printf_i+0x164>
 802e97c:	3501      	adds	r5, #1
 802e97e:	68e3      	ldr	r3, [r4, #12]
 802e980:	9903      	ldr	r1, [sp, #12]
 802e982:	1a5b      	subs	r3, r3, r1
 802e984:	42ab      	cmp	r3, r5
 802e986:	dcf2      	bgt.n	802e96e <_printf_i+0x21e>
 802e988:	e7eb      	b.n	802e962 <_printf_i+0x212>
 802e98a:	2500      	movs	r5, #0
 802e98c:	f104 0619 	add.w	r6, r4, #25
 802e990:	e7f5      	b.n	802e97e <_printf_i+0x22e>
 802e992:	bf00      	nop
 802e994:	08033bd1 	.word	0x08033bd1
 802e998:	08033be2 	.word	0x08033be2

0802e99c <cleanup_glue>:
 802e99c:	b538      	push	{r3, r4, r5, lr}
 802e99e:	460c      	mov	r4, r1
 802e9a0:	6809      	ldr	r1, [r1, #0]
 802e9a2:	4605      	mov	r5, r0
 802e9a4:	b109      	cbz	r1, 802e9aa <cleanup_glue+0xe>
 802e9a6:	f7ff fff9 	bl	802e99c <cleanup_glue>
 802e9aa:	4621      	mov	r1, r4
 802e9ac:	4628      	mov	r0, r5
 802e9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e9b2:	f7ff bc5b 	b.w	802e26c <_free_r>
	...

0802e9b8 <_reclaim_reent>:
 802e9b8:	4b2c      	ldr	r3, [pc, #176]	; (802ea6c <_reclaim_reent+0xb4>)
 802e9ba:	681b      	ldr	r3, [r3, #0]
 802e9bc:	4283      	cmp	r3, r0
 802e9be:	b570      	push	{r4, r5, r6, lr}
 802e9c0:	4604      	mov	r4, r0
 802e9c2:	d051      	beq.n	802ea68 <_reclaim_reent+0xb0>
 802e9c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e9c6:	b143      	cbz	r3, 802e9da <_reclaim_reent+0x22>
 802e9c8:	68db      	ldr	r3, [r3, #12]
 802e9ca:	2b00      	cmp	r3, #0
 802e9cc:	d14a      	bne.n	802ea64 <_reclaim_reent+0xac>
 802e9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e9d0:	6819      	ldr	r1, [r3, #0]
 802e9d2:	b111      	cbz	r1, 802e9da <_reclaim_reent+0x22>
 802e9d4:	4620      	mov	r0, r4
 802e9d6:	f7ff fc49 	bl	802e26c <_free_r>
 802e9da:	6961      	ldr	r1, [r4, #20]
 802e9dc:	b111      	cbz	r1, 802e9e4 <_reclaim_reent+0x2c>
 802e9de:	4620      	mov	r0, r4
 802e9e0:	f7ff fc44 	bl	802e26c <_free_r>
 802e9e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e9e6:	b111      	cbz	r1, 802e9ee <_reclaim_reent+0x36>
 802e9e8:	4620      	mov	r0, r4
 802e9ea:	f7ff fc3f 	bl	802e26c <_free_r>
 802e9ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e9f0:	b111      	cbz	r1, 802e9f8 <_reclaim_reent+0x40>
 802e9f2:	4620      	mov	r0, r4
 802e9f4:	f7ff fc3a 	bl	802e26c <_free_r>
 802e9f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e9fa:	b111      	cbz	r1, 802ea02 <_reclaim_reent+0x4a>
 802e9fc:	4620      	mov	r0, r4
 802e9fe:	f7ff fc35 	bl	802e26c <_free_r>
 802ea02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ea04:	b111      	cbz	r1, 802ea0c <_reclaim_reent+0x54>
 802ea06:	4620      	mov	r0, r4
 802ea08:	f7ff fc30 	bl	802e26c <_free_r>
 802ea0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802ea0e:	b111      	cbz	r1, 802ea16 <_reclaim_reent+0x5e>
 802ea10:	4620      	mov	r0, r4
 802ea12:	f7ff fc2b 	bl	802e26c <_free_r>
 802ea16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802ea18:	b111      	cbz	r1, 802ea20 <_reclaim_reent+0x68>
 802ea1a:	4620      	mov	r0, r4
 802ea1c:	f7ff fc26 	bl	802e26c <_free_r>
 802ea20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ea22:	b111      	cbz	r1, 802ea2a <_reclaim_reent+0x72>
 802ea24:	4620      	mov	r0, r4
 802ea26:	f7ff fc21 	bl	802e26c <_free_r>
 802ea2a:	69a3      	ldr	r3, [r4, #24]
 802ea2c:	b1e3      	cbz	r3, 802ea68 <_reclaim_reent+0xb0>
 802ea2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ea30:	4620      	mov	r0, r4
 802ea32:	4798      	blx	r3
 802ea34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802ea36:	b1b9      	cbz	r1, 802ea68 <_reclaim_reent+0xb0>
 802ea38:	4620      	mov	r0, r4
 802ea3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ea3e:	f7ff bfad 	b.w	802e99c <cleanup_glue>
 802ea42:	5949      	ldr	r1, [r1, r5]
 802ea44:	b941      	cbnz	r1, 802ea58 <_reclaim_reent+0xa0>
 802ea46:	3504      	adds	r5, #4
 802ea48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ea4a:	2d80      	cmp	r5, #128	; 0x80
 802ea4c:	68d9      	ldr	r1, [r3, #12]
 802ea4e:	d1f8      	bne.n	802ea42 <_reclaim_reent+0x8a>
 802ea50:	4620      	mov	r0, r4
 802ea52:	f7ff fc0b 	bl	802e26c <_free_r>
 802ea56:	e7ba      	b.n	802e9ce <_reclaim_reent+0x16>
 802ea58:	680e      	ldr	r6, [r1, #0]
 802ea5a:	4620      	mov	r0, r4
 802ea5c:	f7ff fc06 	bl	802e26c <_free_r>
 802ea60:	4631      	mov	r1, r6
 802ea62:	e7ef      	b.n	802ea44 <_reclaim_reent+0x8c>
 802ea64:	2500      	movs	r5, #0
 802ea66:	e7ef      	b.n	802ea48 <_reclaim_reent+0x90>
 802ea68:	bd70      	pop	{r4, r5, r6, pc}
 802ea6a:	bf00      	nop
 802ea6c:	20000098 	.word	0x20000098

0802ea70 <_sbrk_r>:
 802ea70:	b538      	push	{r3, r4, r5, lr}
 802ea72:	4d06      	ldr	r5, [pc, #24]	; (802ea8c <_sbrk_r+0x1c>)
 802ea74:	2300      	movs	r3, #0
 802ea76:	4604      	mov	r4, r0
 802ea78:	4608      	mov	r0, r1
 802ea7a:	602b      	str	r3, [r5, #0]
 802ea7c:	f7d5 fc28 	bl	80042d0 <_sbrk>
 802ea80:	1c43      	adds	r3, r0, #1
 802ea82:	d102      	bne.n	802ea8a <_sbrk_r+0x1a>
 802ea84:	682b      	ldr	r3, [r5, #0]
 802ea86:	b103      	cbz	r3, 802ea8a <_sbrk_r+0x1a>
 802ea88:	6023      	str	r3, [r4, #0]
 802ea8a:	bd38      	pop	{r3, r4, r5, pc}
 802ea8c:	2000b628 	.word	0x2000b628

0802ea90 <_raise_r>:
 802ea90:	291f      	cmp	r1, #31
 802ea92:	b538      	push	{r3, r4, r5, lr}
 802ea94:	4604      	mov	r4, r0
 802ea96:	460d      	mov	r5, r1
 802ea98:	d904      	bls.n	802eaa4 <_raise_r+0x14>
 802ea9a:	2316      	movs	r3, #22
 802ea9c:	6003      	str	r3, [r0, #0]
 802ea9e:	f04f 30ff 	mov.w	r0, #4294967295
 802eaa2:	bd38      	pop	{r3, r4, r5, pc}
 802eaa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802eaa6:	b112      	cbz	r2, 802eaae <_raise_r+0x1e>
 802eaa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802eaac:	b94b      	cbnz	r3, 802eac2 <_raise_r+0x32>
 802eaae:	4620      	mov	r0, r4
 802eab0:	f000 f830 	bl	802eb14 <_getpid_r>
 802eab4:	462a      	mov	r2, r5
 802eab6:	4601      	mov	r1, r0
 802eab8:	4620      	mov	r0, r4
 802eaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802eabe:	f000 b817 	b.w	802eaf0 <_kill_r>
 802eac2:	2b01      	cmp	r3, #1
 802eac4:	d00a      	beq.n	802eadc <_raise_r+0x4c>
 802eac6:	1c59      	adds	r1, r3, #1
 802eac8:	d103      	bne.n	802ead2 <_raise_r+0x42>
 802eaca:	2316      	movs	r3, #22
 802eacc:	6003      	str	r3, [r0, #0]
 802eace:	2001      	movs	r0, #1
 802ead0:	e7e7      	b.n	802eaa2 <_raise_r+0x12>
 802ead2:	2400      	movs	r4, #0
 802ead4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ead8:	4628      	mov	r0, r5
 802eada:	4798      	blx	r3
 802eadc:	2000      	movs	r0, #0
 802eade:	e7e0      	b.n	802eaa2 <_raise_r+0x12>

0802eae0 <raise>:
 802eae0:	4b02      	ldr	r3, [pc, #8]	; (802eaec <raise+0xc>)
 802eae2:	4601      	mov	r1, r0
 802eae4:	6818      	ldr	r0, [r3, #0]
 802eae6:	f7ff bfd3 	b.w	802ea90 <_raise_r>
 802eaea:	bf00      	nop
 802eaec:	20000098 	.word	0x20000098

0802eaf0 <_kill_r>:
 802eaf0:	b538      	push	{r3, r4, r5, lr}
 802eaf2:	4d07      	ldr	r5, [pc, #28]	; (802eb10 <_kill_r+0x20>)
 802eaf4:	2300      	movs	r3, #0
 802eaf6:	4604      	mov	r4, r0
 802eaf8:	4608      	mov	r0, r1
 802eafa:	4611      	mov	r1, r2
 802eafc:	602b      	str	r3, [r5, #0]
 802eafe:	f7d5 fb5f 	bl	80041c0 <_kill>
 802eb02:	1c43      	adds	r3, r0, #1
 802eb04:	d102      	bne.n	802eb0c <_kill_r+0x1c>
 802eb06:	682b      	ldr	r3, [r5, #0]
 802eb08:	b103      	cbz	r3, 802eb0c <_kill_r+0x1c>
 802eb0a:	6023      	str	r3, [r4, #0]
 802eb0c:	bd38      	pop	{r3, r4, r5, pc}
 802eb0e:	bf00      	nop
 802eb10:	2000b628 	.word	0x2000b628

0802eb14 <_getpid_r>:
 802eb14:	f7d5 bb4c 	b.w	80041b0 <_getpid>

0802eb18 <__sread>:
 802eb18:	b510      	push	{r4, lr}
 802eb1a:	460c      	mov	r4, r1
 802eb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb20:	f000 face 	bl	802f0c0 <_read_r>
 802eb24:	2800      	cmp	r0, #0
 802eb26:	bfab      	itete	ge
 802eb28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802eb2a:	89a3      	ldrhlt	r3, [r4, #12]
 802eb2c:	181b      	addge	r3, r3, r0
 802eb2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802eb32:	bfac      	ite	ge
 802eb34:	6563      	strge	r3, [r4, #84]	; 0x54
 802eb36:	81a3      	strhlt	r3, [r4, #12]
 802eb38:	bd10      	pop	{r4, pc}

0802eb3a <__swrite>:
 802eb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802eb3e:	461f      	mov	r7, r3
 802eb40:	898b      	ldrh	r3, [r1, #12]
 802eb42:	05db      	lsls	r3, r3, #23
 802eb44:	4605      	mov	r5, r0
 802eb46:	460c      	mov	r4, r1
 802eb48:	4616      	mov	r6, r2
 802eb4a:	d505      	bpl.n	802eb58 <__swrite+0x1e>
 802eb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb50:	2302      	movs	r3, #2
 802eb52:	2200      	movs	r2, #0
 802eb54:	f000 fa32 	bl	802efbc <_lseek_r>
 802eb58:	89a3      	ldrh	r3, [r4, #12]
 802eb5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802eb5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802eb62:	81a3      	strh	r3, [r4, #12]
 802eb64:	4632      	mov	r2, r6
 802eb66:	463b      	mov	r3, r7
 802eb68:	4628      	mov	r0, r5
 802eb6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802eb6e:	f000 b871 	b.w	802ec54 <_write_r>

0802eb72 <__sseek>:
 802eb72:	b510      	push	{r4, lr}
 802eb74:	460c      	mov	r4, r1
 802eb76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb7a:	f000 fa1f 	bl	802efbc <_lseek_r>
 802eb7e:	1c43      	adds	r3, r0, #1
 802eb80:	89a3      	ldrh	r3, [r4, #12]
 802eb82:	bf15      	itete	ne
 802eb84:	6560      	strne	r0, [r4, #84]	; 0x54
 802eb86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802eb8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802eb8e:	81a3      	strheq	r3, [r4, #12]
 802eb90:	bf18      	it	ne
 802eb92:	81a3      	strhne	r3, [r4, #12]
 802eb94:	bd10      	pop	{r4, pc}

0802eb96 <__sclose>:
 802eb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb9a:	f000 b93d 	b.w	802ee18 <_close_r>

0802eb9e <strcpy>:
 802eb9e:	4603      	mov	r3, r0
 802eba0:	f811 2b01 	ldrb.w	r2, [r1], #1
 802eba4:	f803 2b01 	strb.w	r2, [r3], #1
 802eba8:	2a00      	cmp	r2, #0
 802ebaa:	d1f9      	bne.n	802eba0 <strcpy+0x2>
 802ebac:	4770      	bx	lr
	...

0802ebb0 <__swbuf_r>:
 802ebb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ebb2:	460e      	mov	r6, r1
 802ebb4:	4614      	mov	r4, r2
 802ebb6:	4605      	mov	r5, r0
 802ebb8:	b118      	cbz	r0, 802ebc2 <__swbuf_r+0x12>
 802ebba:	6983      	ldr	r3, [r0, #24]
 802ebbc:	b90b      	cbnz	r3, 802ebc2 <__swbuf_r+0x12>
 802ebbe:	f7ff fa47 	bl	802e050 <__sinit>
 802ebc2:	4b21      	ldr	r3, [pc, #132]	; (802ec48 <__swbuf_r+0x98>)
 802ebc4:	429c      	cmp	r4, r3
 802ebc6:	d12b      	bne.n	802ec20 <__swbuf_r+0x70>
 802ebc8:	686c      	ldr	r4, [r5, #4]
 802ebca:	69a3      	ldr	r3, [r4, #24]
 802ebcc:	60a3      	str	r3, [r4, #8]
 802ebce:	89a3      	ldrh	r3, [r4, #12]
 802ebd0:	071a      	lsls	r2, r3, #28
 802ebd2:	d52f      	bpl.n	802ec34 <__swbuf_r+0x84>
 802ebd4:	6923      	ldr	r3, [r4, #16]
 802ebd6:	b36b      	cbz	r3, 802ec34 <__swbuf_r+0x84>
 802ebd8:	6923      	ldr	r3, [r4, #16]
 802ebda:	6820      	ldr	r0, [r4, #0]
 802ebdc:	1ac0      	subs	r0, r0, r3
 802ebde:	6963      	ldr	r3, [r4, #20]
 802ebe0:	b2f6      	uxtb	r6, r6
 802ebe2:	4283      	cmp	r3, r0
 802ebe4:	4637      	mov	r7, r6
 802ebe6:	dc04      	bgt.n	802ebf2 <__swbuf_r+0x42>
 802ebe8:	4621      	mov	r1, r4
 802ebea:	4628      	mov	r0, r5
 802ebec:	f000 f9aa 	bl	802ef44 <_fflush_r>
 802ebf0:	bb30      	cbnz	r0, 802ec40 <__swbuf_r+0x90>
 802ebf2:	68a3      	ldr	r3, [r4, #8]
 802ebf4:	3b01      	subs	r3, #1
 802ebf6:	60a3      	str	r3, [r4, #8]
 802ebf8:	6823      	ldr	r3, [r4, #0]
 802ebfa:	1c5a      	adds	r2, r3, #1
 802ebfc:	6022      	str	r2, [r4, #0]
 802ebfe:	701e      	strb	r6, [r3, #0]
 802ec00:	6963      	ldr	r3, [r4, #20]
 802ec02:	3001      	adds	r0, #1
 802ec04:	4283      	cmp	r3, r0
 802ec06:	d004      	beq.n	802ec12 <__swbuf_r+0x62>
 802ec08:	89a3      	ldrh	r3, [r4, #12]
 802ec0a:	07db      	lsls	r3, r3, #31
 802ec0c:	d506      	bpl.n	802ec1c <__swbuf_r+0x6c>
 802ec0e:	2e0a      	cmp	r6, #10
 802ec10:	d104      	bne.n	802ec1c <__swbuf_r+0x6c>
 802ec12:	4621      	mov	r1, r4
 802ec14:	4628      	mov	r0, r5
 802ec16:	f000 f995 	bl	802ef44 <_fflush_r>
 802ec1a:	b988      	cbnz	r0, 802ec40 <__swbuf_r+0x90>
 802ec1c:	4638      	mov	r0, r7
 802ec1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ec20:	4b0a      	ldr	r3, [pc, #40]	; (802ec4c <__swbuf_r+0x9c>)
 802ec22:	429c      	cmp	r4, r3
 802ec24:	d101      	bne.n	802ec2a <__swbuf_r+0x7a>
 802ec26:	68ac      	ldr	r4, [r5, #8]
 802ec28:	e7cf      	b.n	802ebca <__swbuf_r+0x1a>
 802ec2a:	4b09      	ldr	r3, [pc, #36]	; (802ec50 <__swbuf_r+0xa0>)
 802ec2c:	429c      	cmp	r4, r3
 802ec2e:	bf08      	it	eq
 802ec30:	68ec      	ldreq	r4, [r5, #12]
 802ec32:	e7ca      	b.n	802ebca <__swbuf_r+0x1a>
 802ec34:	4621      	mov	r1, r4
 802ec36:	4628      	mov	r0, r5
 802ec38:	f000 f81e 	bl	802ec78 <__swsetup_r>
 802ec3c:	2800      	cmp	r0, #0
 802ec3e:	d0cb      	beq.n	802ebd8 <__swbuf_r+0x28>
 802ec40:	f04f 37ff 	mov.w	r7, #4294967295
 802ec44:	e7ea      	b.n	802ec1c <__swbuf_r+0x6c>
 802ec46:	bf00      	nop
 802ec48:	08033b7c 	.word	0x08033b7c
 802ec4c:	08033b9c 	.word	0x08033b9c
 802ec50:	08033b5c 	.word	0x08033b5c

0802ec54 <_write_r>:
 802ec54:	b538      	push	{r3, r4, r5, lr}
 802ec56:	4d07      	ldr	r5, [pc, #28]	; (802ec74 <_write_r+0x20>)
 802ec58:	4604      	mov	r4, r0
 802ec5a:	4608      	mov	r0, r1
 802ec5c:	4611      	mov	r1, r2
 802ec5e:	2200      	movs	r2, #0
 802ec60:	602a      	str	r2, [r5, #0]
 802ec62:	461a      	mov	r2, r3
 802ec64:	f7d5 fae3 	bl	800422e <_write>
 802ec68:	1c43      	adds	r3, r0, #1
 802ec6a:	d102      	bne.n	802ec72 <_write_r+0x1e>
 802ec6c:	682b      	ldr	r3, [r5, #0]
 802ec6e:	b103      	cbz	r3, 802ec72 <_write_r+0x1e>
 802ec70:	6023      	str	r3, [r4, #0]
 802ec72:	bd38      	pop	{r3, r4, r5, pc}
 802ec74:	2000b628 	.word	0x2000b628

0802ec78 <__swsetup_r>:
 802ec78:	4b32      	ldr	r3, [pc, #200]	; (802ed44 <__swsetup_r+0xcc>)
 802ec7a:	b570      	push	{r4, r5, r6, lr}
 802ec7c:	681d      	ldr	r5, [r3, #0]
 802ec7e:	4606      	mov	r6, r0
 802ec80:	460c      	mov	r4, r1
 802ec82:	b125      	cbz	r5, 802ec8e <__swsetup_r+0x16>
 802ec84:	69ab      	ldr	r3, [r5, #24]
 802ec86:	b913      	cbnz	r3, 802ec8e <__swsetup_r+0x16>
 802ec88:	4628      	mov	r0, r5
 802ec8a:	f7ff f9e1 	bl	802e050 <__sinit>
 802ec8e:	4b2e      	ldr	r3, [pc, #184]	; (802ed48 <__swsetup_r+0xd0>)
 802ec90:	429c      	cmp	r4, r3
 802ec92:	d10f      	bne.n	802ecb4 <__swsetup_r+0x3c>
 802ec94:	686c      	ldr	r4, [r5, #4]
 802ec96:	89a3      	ldrh	r3, [r4, #12]
 802ec98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ec9c:	0719      	lsls	r1, r3, #28
 802ec9e:	d42c      	bmi.n	802ecfa <__swsetup_r+0x82>
 802eca0:	06dd      	lsls	r5, r3, #27
 802eca2:	d411      	bmi.n	802ecc8 <__swsetup_r+0x50>
 802eca4:	2309      	movs	r3, #9
 802eca6:	6033      	str	r3, [r6, #0]
 802eca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802ecac:	81a3      	strh	r3, [r4, #12]
 802ecae:	f04f 30ff 	mov.w	r0, #4294967295
 802ecb2:	e03e      	b.n	802ed32 <__swsetup_r+0xba>
 802ecb4:	4b25      	ldr	r3, [pc, #148]	; (802ed4c <__swsetup_r+0xd4>)
 802ecb6:	429c      	cmp	r4, r3
 802ecb8:	d101      	bne.n	802ecbe <__swsetup_r+0x46>
 802ecba:	68ac      	ldr	r4, [r5, #8]
 802ecbc:	e7eb      	b.n	802ec96 <__swsetup_r+0x1e>
 802ecbe:	4b24      	ldr	r3, [pc, #144]	; (802ed50 <__swsetup_r+0xd8>)
 802ecc0:	429c      	cmp	r4, r3
 802ecc2:	bf08      	it	eq
 802ecc4:	68ec      	ldreq	r4, [r5, #12]
 802ecc6:	e7e6      	b.n	802ec96 <__swsetup_r+0x1e>
 802ecc8:	0758      	lsls	r0, r3, #29
 802ecca:	d512      	bpl.n	802ecf2 <__swsetup_r+0x7a>
 802eccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ecce:	b141      	cbz	r1, 802ece2 <__swsetup_r+0x6a>
 802ecd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ecd4:	4299      	cmp	r1, r3
 802ecd6:	d002      	beq.n	802ecde <__swsetup_r+0x66>
 802ecd8:	4630      	mov	r0, r6
 802ecda:	f7ff fac7 	bl	802e26c <_free_r>
 802ecde:	2300      	movs	r3, #0
 802ece0:	6363      	str	r3, [r4, #52]	; 0x34
 802ece2:	89a3      	ldrh	r3, [r4, #12]
 802ece4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802ece8:	81a3      	strh	r3, [r4, #12]
 802ecea:	2300      	movs	r3, #0
 802ecec:	6063      	str	r3, [r4, #4]
 802ecee:	6923      	ldr	r3, [r4, #16]
 802ecf0:	6023      	str	r3, [r4, #0]
 802ecf2:	89a3      	ldrh	r3, [r4, #12]
 802ecf4:	f043 0308 	orr.w	r3, r3, #8
 802ecf8:	81a3      	strh	r3, [r4, #12]
 802ecfa:	6923      	ldr	r3, [r4, #16]
 802ecfc:	b94b      	cbnz	r3, 802ed12 <__swsetup_r+0x9a>
 802ecfe:	89a3      	ldrh	r3, [r4, #12]
 802ed00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802ed04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ed08:	d003      	beq.n	802ed12 <__swsetup_r+0x9a>
 802ed0a:	4621      	mov	r1, r4
 802ed0c:	4630      	mov	r0, r6
 802ed0e:	f000 f98b 	bl	802f028 <__smakebuf_r>
 802ed12:	89a0      	ldrh	r0, [r4, #12]
 802ed14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ed18:	f010 0301 	ands.w	r3, r0, #1
 802ed1c:	d00a      	beq.n	802ed34 <__swsetup_r+0xbc>
 802ed1e:	2300      	movs	r3, #0
 802ed20:	60a3      	str	r3, [r4, #8]
 802ed22:	6963      	ldr	r3, [r4, #20]
 802ed24:	425b      	negs	r3, r3
 802ed26:	61a3      	str	r3, [r4, #24]
 802ed28:	6923      	ldr	r3, [r4, #16]
 802ed2a:	b943      	cbnz	r3, 802ed3e <__swsetup_r+0xc6>
 802ed2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ed30:	d1ba      	bne.n	802eca8 <__swsetup_r+0x30>
 802ed32:	bd70      	pop	{r4, r5, r6, pc}
 802ed34:	0781      	lsls	r1, r0, #30
 802ed36:	bf58      	it	pl
 802ed38:	6963      	ldrpl	r3, [r4, #20]
 802ed3a:	60a3      	str	r3, [r4, #8]
 802ed3c:	e7f4      	b.n	802ed28 <__swsetup_r+0xb0>
 802ed3e:	2000      	movs	r0, #0
 802ed40:	e7f7      	b.n	802ed32 <__swsetup_r+0xba>
 802ed42:	bf00      	nop
 802ed44:	20000098 	.word	0x20000098
 802ed48:	08033b7c 	.word	0x08033b7c
 802ed4c:	08033b9c 	.word	0x08033b9c
 802ed50:	08033b5c 	.word	0x08033b5c

0802ed54 <__register_exitproc>:
 802ed54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ed58:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802ee14 <__register_exitproc+0xc0>
 802ed5c:	4606      	mov	r6, r0
 802ed5e:	f8d8 0000 	ldr.w	r0, [r8]
 802ed62:	461f      	mov	r7, r3
 802ed64:	460d      	mov	r5, r1
 802ed66:	4691      	mov	r9, r2
 802ed68:	f7ff fa47 	bl	802e1fa <__retarget_lock_acquire_recursive>
 802ed6c:	4b25      	ldr	r3, [pc, #148]	; (802ee04 <__register_exitproc+0xb0>)
 802ed6e:	681c      	ldr	r4, [r3, #0]
 802ed70:	b934      	cbnz	r4, 802ed80 <__register_exitproc+0x2c>
 802ed72:	4c25      	ldr	r4, [pc, #148]	; (802ee08 <__register_exitproc+0xb4>)
 802ed74:	601c      	str	r4, [r3, #0]
 802ed76:	4b25      	ldr	r3, [pc, #148]	; (802ee0c <__register_exitproc+0xb8>)
 802ed78:	b113      	cbz	r3, 802ed80 <__register_exitproc+0x2c>
 802ed7a:	681b      	ldr	r3, [r3, #0]
 802ed7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802ed80:	6863      	ldr	r3, [r4, #4]
 802ed82:	2b1f      	cmp	r3, #31
 802ed84:	dd07      	ble.n	802ed96 <__register_exitproc+0x42>
 802ed86:	f8d8 0000 	ldr.w	r0, [r8]
 802ed8a:	f7ff fa38 	bl	802e1fe <__retarget_lock_release_recursive>
 802ed8e:	f04f 30ff 	mov.w	r0, #4294967295
 802ed92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ed96:	b34e      	cbz	r6, 802edec <__register_exitproc+0x98>
 802ed98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802ed9c:	b988      	cbnz	r0, 802edc2 <__register_exitproc+0x6e>
 802ed9e:	4b1c      	ldr	r3, [pc, #112]	; (802ee10 <__register_exitproc+0xbc>)
 802eda0:	b923      	cbnz	r3, 802edac <__register_exitproc+0x58>
 802eda2:	f8d8 0000 	ldr.w	r0, [r8]
 802eda6:	f7ff fa29 	bl	802e1fc <__retarget_lock_release>
 802edaa:	e7f0      	b.n	802ed8e <__register_exitproc+0x3a>
 802edac:	f44f 7084 	mov.w	r0, #264	; 0x108
 802edb0:	f7ff fa26 	bl	802e200 <malloc>
 802edb4:	2800      	cmp	r0, #0
 802edb6:	d0f4      	beq.n	802eda2 <__register_exitproc+0x4e>
 802edb8:	2300      	movs	r3, #0
 802edba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802edbe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802edc2:	6863      	ldr	r3, [r4, #4]
 802edc4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802edc8:	2201      	movs	r2, #1
 802edca:	409a      	lsls	r2, r3
 802edcc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802edd0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802edd4:	4313      	orrs	r3, r2
 802edd6:	2e02      	cmp	r6, #2
 802edd8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802eddc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802ede0:	bf02      	ittt	eq
 802ede2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802ede6:	431a      	orreq	r2, r3
 802ede8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802edec:	6863      	ldr	r3, [r4, #4]
 802edee:	f8d8 0000 	ldr.w	r0, [r8]
 802edf2:	1c5a      	adds	r2, r3, #1
 802edf4:	3302      	adds	r3, #2
 802edf6:	6062      	str	r2, [r4, #4]
 802edf8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802edfc:	f7ff f9ff 	bl	802e1fe <__retarget_lock_release_recursive>
 802ee00:	2000      	movs	r0, #0
 802ee02:	e7c6      	b.n	802ed92 <__register_exitproc+0x3e>
 802ee04:	20009a60 	.word	0x20009a60
 802ee08:	200099d4 	.word	0x200099d4
 802ee0c:	08033bf4 	.word	0x08033bf4
 802ee10:	0802e201 	.word	0x0802e201
 802ee14:	200000fc 	.word	0x200000fc

0802ee18 <_close_r>:
 802ee18:	b538      	push	{r3, r4, r5, lr}
 802ee1a:	4d06      	ldr	r5, [pc, #24]	; (802ee34 <_close_r+0x1c>)
 802ee1c:	2300      	movs	r3, #0
 802ee1e:	4604      	mov	r4, r0
 802ee20:	4608      	mov	r0, r1
 802ee22:	602b      	str	r3, [r5, #0]
 802ee24:	f7d5 fa1f 	bl	8004266 <_close>
 802ee28:	1c43      	adds	r3, r0, #1
 802ee2a:	d102      	bne.n	802ee32 <_close_r+0x1a>
 802ee2c:	682b      	ldr	r3, [r5, #0]
 802ee2e:	b103      	cbz	r3, 802ee32 <_close_r+0x1a>
 802ee30:	6023      	str	r3, [r4, #0]
 802ee32:	bd38      	pop	{r3, r4, r5, pc}
 802ee34:	2000b628 	.word	0x2000b628

0802ee38 <__sflush_r>:
 802ee38:	898a      	ldrh	r2, [r1, #12]
 802ee3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ee3e:	4605      	mov	r5, r0
 802ee40:	0710      	lsls	r0, r2, #28
 802ee42:	460c      	mov	r4, r1
 802ee44:	d458      	bmi.n	802eef8 <__sflush_r+0xc0>
 802ee46:	684b      	ldr	r3, [r1, #4]
 802ee48:	2b00      	cmp	r3, #0
 802ee4a:	dc05      	bgt.n	802ee58 <__sflush_r+0x20>
 802ee4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ee4e:	2b00      	cmp	r3, #0
 802ee50:	dc02      	bgt.n	802ee58 <__sflush_r+0x20>
 802ee52:	2000      	movs	r0, #0
 802ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ee58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ee5a:	2e00      	cmp	r6, #0
 802ee5c:	d0f9      	beq.n	802ee52 <__sflush_r+0x1a>
 802ee5e:	2300      	movs	r3, #0
 802ee60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ee64:	682f      	ldr	r7, [r5, #0]
 802ee66:	602b      	str	r3, [r5, #0]
 802ee68:	d032      	beq.n	802eed0 <__sflush_r+0x98>
 802ee6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ee6c:	89a3      	ldrh	r3, [r4, #12]
 802ee6e:	075a      	lsls	r2, r3, #29
 802ee70:	d505      	bpl.n	802ee7e <__sflush_r+0x46>
 802ee72:	6863      	ldr	r3, [r4, #4]
 802ee74:	1ac0      	subs	r0, r0, r3
 802ee76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ee78:	b10b      	cbz	r3, 802ee7e <__sflush_r+0x46>
 802ee7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ee7c:	1ac0      	subs	r0, r0, r3
 802ee7e:	2300      	movs	r3, #0
 802ee80:	4602      	mov	r2, r0
 802ee82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ee84:	6a21      	ldr	r1, [r4, #32]
 802ee86:	4628      	mov	r0, r5
 802ee88:	47b0      	blx	r6
 802ee8a:	1c43      	adds	r3, r0, #1
 802ee8c:	89a3      	ldrh	r3, [r4, #12]
 802ee8e:	d106      	bne.n	802ee9e <__sflush_r+0x66>
 802ee90:	6829      	ldr	r1, [r5, #0]
 802ee92:	291d      	cmp	r1, #29
 802ee94:	d82c      	bhi.n	802eef0 <__sflush_r+0xb8>
 802ee96:	4a2a      	ldr	r2, [pc, #168]	; (802ef40 <__sflush_r+0x108>)
 802ee98:	40ca      	lsrs	r2, r1
 802ee9a:	07d6      	lsls	r6, r2, #31
 802ee9c:	d528      	bpl.n	802eef0 <__sflush_r+0xb8>
 802ee9e:	2200      	movs	r2, #0
 802eea0:	6062      	str	r2, [r4, #4]
 802eea2:	04d9      	lsls	r1, r3, #19
 802eea4:	6922      	ldr	r2, [r4, #16]
 802eea6:	6022      	str	r2, [r4, #0]
 802eea8:	d504      	bpl.n	802eeb4 <__sflush_r+0x7c>
 802eeaa:	1c42      	adds	r2, r0, #1
 802eeac:	d101      	bne.n	802eeb2 <__sflush_r+0x7a>
 802eeae:	682b      	ldr	r3, [r5, #0]
 802eeb0:	b903      	cbnz	r3, 802eeb4 <__sflush_r+0x7c>
 802eeb2:	6560      	str	r0, [r4, #84]	; 0x54
 802eeb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802eeb6:	602f      	str	r7, [r5, #0]
 802eeb8:	2900      	cmp	r1, #0
 802eeba:	d0ca      	beq.n	802ee52 <__sflush_r+0x1a>
 802eebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802eec0:	4299      	cmp	r1, r3
 802eec2:	d002      	beq.n	802eeca <__sflush_r+0x92>
 802eec4:	4628      	mov	r0, r5
 802eec6:	f7ff f9d1 	bl	802e26c <_free_r>
 802eeca:	2000      	movs	r0, #0
 802eecc:	6360      	str	r0, [r4, #52]	; 0x34
 802eece:	e7c1      	b.n	802ee54 <__sflush_r+0x1c>
 802eed0:	6a21      	ldr	r1, [r4, #32]
 802eed2:	2301      	movs	r3, #1
 802eed4:	4628      	mov	r0, r5
 802eed6:	47b0      	blx	r6
 802eed8:	1c41      	adds	r1, r0, #1
 802eeda:	d1c7      	bne.n	802ee6c <__sflush_r+0x34>
 802eedc:	682b      	ldr	r3, [r5, #0]
 802eede:	2b00      	cmp	r3, #0
 802eee0:	d0c4      	beq.n	802ee6c <__sflush_r+0x34>
 802eee2:	2b1d      	cmp	r3, #29
 802eee4:	d001      	beq.n	802eeea <__sflush_r+0xb2>
 802eee6:	2b16      	cmp	r3, #22
 802eee8:	d101      	bne.n	802eeee <__sflush_r+0xb6>
 802eeea:	602f      	str	r7, [r5, #0]
 802eeec:	e7b1      	b.n	802ee52 <__sflush_r+0x1a>
 802eeee:	89a3      	ldrh	r3, [r4, #12]
 802eef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802eef4:	81a3      	strh	r3, [r4, #12]
 802eef6:	e7ad      	b.n	802ee54 <__sflush_r+0x1c>
 802eef8:	690f      	ldr	r7, [r1, #16]
 802eefa:	2f00      	cmp	r7, #0
 802eefc:	d0a9      	beq.n	802ee52 <__sflush_r+0x1a>
 802eefe:	0793      	lsls	r3, r2, #30
 802ef00:	680e      	ldr	r6, [r1, #0]
 802ef02:	bf08      	it	eq
 802ef04:	694b      	ldreq	r3, [r1, #20]
 802ef06:	600f      	str	r7, [r1, #0]
 802ef08:	bf18      	it	ne
 802ef0a:	2300      	movne	r3, #0
 802ef0c:	eba6 0807 	sub.w	r8, r6, r7
 802ef10:	608b      	str	r3, [r1, #8]
 802ef12:	f1b8 0f00 	cmp.w	r8, #0
 802ef16:	dd9c      	ble.n	802ee52 <__sflush_r+0x1a>
 802ef18:	6a21      	ldr	r1, [r4, #32]
 802ef1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ef1c:	4643      	mov	r3, r8
 802ef1e:	463a      	mov	r2, r7
 802ef20:	4628      	mov	r0, r5
 802ef22:	47b0      	blx	r6
 802ef24:	2800      	cmp	r0, #0
 802ef26:	dc06      	bgt.n	802ef36 <__sflush_r+0xfe>
 802ef28:	89a3      	ldrh	r3, [r4, #12]
 802ef2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ef2e:	81a3      	strh	r3, [r4, #12]
 802ef30:	f04f 30ff 	mov.w	r0, #4294967295
 802ef34:	e78e      	b.n	802ee54 <__sflush_r+0x1c>
 802ef36:	4407      	add	r7, r0
 802ef38:	eba8 0800 	sub.w	r8, r8, r0
 802ef3c:	e7e9      	b.n	802ef12 <__sflush_r+0xda>
 802ef3e:	bf00      	nop
 802ef40:	20400001 	.word	0x20400001

0802ef44 <_fflush_r>:
 802ef44:	b538      	push	{r3, r4, r5, lr}
 802ef46:	690b      	ldr	r3, [r1, #16]
 802ef48:	4605      	mov	r5, r0
 802ef4a:	460c      	mov	r4, r1
 802ef4c:	b913      	cbnz	r3, 802ef54 <_fflush_r+0x10>
 802ef4e:	2500      	movs	r5, #0
 802ef50:	4628      	mov	r0, r5
 802ef52:	bd38      	pop	{r3, r4, r5, pc}
 802ef54:	b118      	cbz	r0, 802ef5e <_fflush_r+0x1a>
 802ef56:	6983      	ldr	r3, [r0, #24]
 802ef58:	b90b      	cbnz	r3, 802ef5e <_fflush_r+0x1a>
 802ef5a:	f7ff f879 	bl	802e050 <__sinit>
 802ef5e:	4b14      	ldr	r3, [pc, #80]	; (802efb0 <_fflush_r+0x6c>)
 802ef60:	429c      	cmp	r4, r3
 802ef62:	d11b      	bne.n	802ef9c <_fflush_r+0x58>
 802ef64:	686c      	ldr	r4, [r5, #4]
 802ef66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ef6a:	2b00      	cmp	r3, #0
 802ef6c:	d0ef      	beq.n	802ef4e <_fflush_r+0xa>
 802ef6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ef70:	07d0      	lsls	r0, r2, #31
 802ef72:	d404      	bmi.n	802ef7e <_fflush_r+0x3a>
 802ef74:	0599      	lsls	r1, r3, #22
 802ef76:	d402      	bmi.n	802ef7e <_fflush_r+0x3a>
 802ef78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ef7a:	f7ff f93e 	bl	802e1fa <__retarget_lock_acquire_recursive>
 802ef7e:	4628      	mov	r0, r5
 802ef80:	4621      	mov	r1, r4
 802ef82:	f7ff ff59 	bl	802ee38 <__sflush_r>
 802ef86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ef88:	07da      	lsls	r2, r3, #31
 802ef8a:	4605      	mov	r5, r0
 802ef8c:	d4e0      	bmi.n	802ef50 <_fflush_r+0xc>
 802ef8e:	89a3      	ldrh	r3, [r4, #12]
 802ef90:	059b      	lsls	r3, r3, #22
 802ef92:	d4dd      	bmi.n	802ef50 <_fflush_r+0xc>
 802ef94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ef96:	f7ff f932 	bl	802e1fe <__retarget_lock_release_recursive>
 802ef9a:	e7d9      	b.n	802ef50 <_fflush_r+0xc>
 802ef9c:	4b05      	ldr	r3, [pc, #20]	; (802efb4 <_fflush_r+0x70>)
 802ef9e:	429c      	cmp	r4, r3
 802efa0:	d101      	bne.n	802efa6 <_fflush_r+0x62>
 802efa2:	68ac      	ldr	r4, [r5, #8]
 802efa4:	e7df      	b.n	802ef66 <_fflush_r+0x22>
 802efa6:	4b04      	ldr	r3, [pc, #16]	; (802efb8 <_fflush_r+0x74>)
 802efa8:	429c      	cmp	r4, r3
 802efaa:	bf08      	it	eq
 802efac:	68ec      	ldreq	r4, [r5, #12]
 802efae:	e7da      	b.n	802ef66 <_fflush_r+0x22>
 802efb0:	08033b7c 	.word	0x08033b7c
 802efb4:	08033b9c 	.word	0x08033b9c
 802efb8:	08033b5c 	.word	0x08033b5c

0802efbc <_lseek_r>:
 802efbc:	b538      	push	{r3, r4, r5, lr}
 802efbe:	4d07      	ldr	r5, [pc, #28]	; (802efdc <_lseek_r+0x20>)
 802efc0:	4604      	mov	r4, r0
 802efc2:	4608      	mov	r0, r1
 802efc4:	4611      	mov	r1, r2
 802efc6:	2200      	movs	r2, #0
 802efc8:	602a      	str	r2, [r5, #0]
 802efca:	461a      	mov	r2, r3
 802efcc:	f7d5 f972 	bl	80042b4 <_lseek>
 802efd0:	1c43      	adds	r3, r0, #1
 802efd2:	d102      	bne.n	802efda <_lseek_r+0x1e>
 802efd4:	682b      	ldr	r3, [r5, #0]
 802efd6:	b103      	cbz	r3, 802efda <_lseek_r+0x1e>
 802efd8:	6023      	str	r3, [r4, #0]
 802efda:	bd38      	pop	{r3, r4, r5, pc}
 802efdc:	2000b628 	.word	0x2000b628

0802efe0 <__swhatbuf_r>:
 802efe0:	b570      	push	{r4, r5, r6, lr}
 802efe2:	460e      	mov	r6, r1
 802efe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802efe8:	2900      	cmp	r1, #0
 802efea:	b096      	sub	sp, #88	; 0x58
 802efec:	4614      	mov	r4, r2
 802efee:	461d      	mov	r5, r3
 802eff0:	da07      	bge.n	802f002 <__swhatbuf_r+0x22>
 802eff2:	2300      	movs	r3, #0
 802eff4:	602b      	str	r3, [r5, #0]
 802eff6:	89b3      	ldrh	r3, [r6, #12]
 802eff8:	061a      	lsls	r2, r3, #24
 802effa:	d410      	bmi.n	802f01e <__swhatbuf_r+0x3e>
 802effc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802f000:	e00e      	b.n	802f020 <__swhatbuf_r+0x40>
 802f002:	466a      	mov	r2, sp
 802f004:	f000 f86e 	bl	802f0e4 <_fstat_r>
 802f008:	2800      	cmp	r0, #0
 802f00a:	dbf2      	blt.n	802eff2 <__swhatbuf_r+0x12>
 802f00c:	9a01      	ldr	r2, [sp, #4]
 802f00e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802f012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802f016:	425a      	negs	r2, r3
 802f018:	415a      	adcs	r2, r3
 802f01a:	602a      	str	r2, [r5, #0]
 802f01c:	e7ee      	b.n	802effc <__swhatbuf_r+0x1c>
 802f01e:	2340      	movs	r3, #64	; 0x40
 802f020:	2000      	movs	r0, #0
 802f022:	6023      	str	r3, [r4, #0]
 802f024:	b016      	add	sp, #88	; 0x58
 802f026:	bd70      	pop	{r4, r5, r6, pc}

0802f028 <__smakebuf_r>:
 802f028:	898b      	ldrh	r3, [r1, #12]
 802f02a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802f02c:	079d      	lsls	r5, r3, #30
 802f02e:	4606      	mov	r6, r0
 802f030:	460c      	mov	r4, r1
 802f032:	d507      	bpl.n	802f044 <__smakebuf_r+0x1c>
 802f034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802f038:	6023      	str	r3, [r4, #0]
 802f03a:	6123      	str	r3, [r4, #16]
 802f03c:	2301      	movs	r3, #1
 802f03e:	6163      	str	r3, [r4, #20]
 802f040:	b002      	add	sp, #8
 802f042:	bd70      	pop	{r4, r5, r6, pc}
 802f044:	ab01      	add	r3, sp, #4
 802f046:	466a      	mov	r2, sp
 802f048:	f7ff ffca 	bl	802efe0 <__swhatbuf_r>
 802f04c:	9900      	ldr	r1, [sp, #0]
 802f04e:	4605      	mov	r5, r0
 802f050:	4630      	mov	r0, r6
 802f052:	f7ff f95b 	bl	802e30c <_malloc_r>
 802f056:	b948      	cbnz	r0, 802f06c <__smakebuf_r+0x44>
 802f058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f05c:	059a      	lsls	r2, r3, #22
 802f05e:	d4ef      	bmi.n	802f040 <__smakebuf_r+0x18>
 802f060:	f023 0303 	bic.w	r3, r3, #3
 802f064:	f043 0302 	orr.w	r3, r3, #2
 802f068:	81a3      	strh	r3, [r4, #12]
 802f06a:	e7e3      	b.n	802f034 <__smakebuf_r+0xc>
 802f06c:	4b0d      	ldr	r3, [pc, #52]	; (802f0a4 <__smakebuf_r+0x7c>)
 802f06e:	62b3      	str	r3, [r6, #40]	; 0x28
 802f070:	89a3      	ldrh	r3, [r4, #12]
 802f072:	6020      	str	r0, [r4, #0]
 802f074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f078:	81a3      	strh	r3, [r4, #12]
 802f07a:	9b00      	ldr	r3, [sp, #0]
 802f07c:	6163      	str	r3, [r4, #20]
 802f07e:	9b01      	ldr	r3, [sp, #4]
 802f080:	6120      	str	r0, [r4, #16]
 802f082:	b15b      	cbz	r3, 802f09c <__smakebuf_r+0x74>
 802f084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f088:	4630      	mov	r0, r6
 802f08a:	f000 f83d 	bl	802f108 <_isatty_r>
 802f08e:	b128      	cbz	r0, 802f09c <__smakebuf_r+0x74>
 802f090:	89a3      	ldrh	r3, [r4, #12]
 802f092:	f023 0303 	bic.w	r3, r3, #3
 802f096:	f043 0301 	orr.w	r3, r3, #1
 802f09a:	81a3      	strh	r3, [r4, #12]
 802f09c:	89a0      	ldrh	r0, [r4, #12]
 802f09e:	4305      	orrs	r5, r0
 802f0a0:	81a5      	strh	r5, [r4, #12]
 802f0a2:	e7cd      	b.n	802f040 <__smakebuf_r+0x18>
 802f0a4:	0802dfe9 	.word	0x0802dfe9

0802f0a8 <__malloc_lock>:
 802f0a8:	4801      	ldr	r0, [pc, #4]	; (802f0b0 <__malloc_lock+0x8>)
 802f0aa:	f7ff b8a6 	b.w	802e1fa <__retarget_lock_acquire_recursive>
 802f0ae:	bf00      	nop
 802f0b0:	2000b620 	.word	0x2000b620

0802f0b4 <__malloc_unlock>:
 802f0b4:	4801      	ldr	r0, [pc, #4]	; (802f0bc <__malloc_unlock+0x8>)
 802f0b6:	f7ff b8a2 	b.w	802e1fe <__retarget_lock_release_recursive>
 802f0ba:	bf00      	nop
 802f0bc:	2000b620 	.word	0x2000b620

0802f0c0 <_read_r>:
 802f0c0:	b538      	push	{r3, r4, r5, lr}
 802f0c2:	4d07      	ldr	r5, [pc, #28]	; (802f0e0 <_read_r+0x20>)
 802f0c4:	4604      	mov	r4, r0
 802f0c6:	4608      	mov	r0, r1
 802f0c8:	4611      	mov	r1, r2
 802f0ca:	2200      	movs	r2, #0
 802f0cc:	602a      	str	r2, [r5, #0]
 802f0ce:	461a      	mov	r2, r3
 802f0d0:	f7d5 f890 	bl	80041f4 <_read>
 802f0d4:	1c43      	adds	r3, r0, #1
 802f0d6:	d102      	bne.n	802f0de <_read_r+0x1e>
 802f0d8:	682b      	ldr	r3, [r5, #0]
 802f0da:	b103      	cbz	r3, 802f0de <_read_r+0x1e>
 802f0dc:	6023      	str	r3, [r4, #0]
 802f0de:	bd38      	pop	{r3, r4, r5, pc}
 802f0e0:	2000b628 	.word	0x2000b628

0802f0e4 <_fstat_r>:
 802f0e4:	b538      	push	{r3, r4, r5, lr}
 802f0e6:	4d07      	ldr	r5, [pc, #28]	; (802f104 <_fstat_r+0x20>)
 802f0e8:	2300      	movs	r3, #0
 802f0ea:	4604      	mov	r4, r0
 802f0ec:	4608      	mov	r0, r1
 802f0ee:	4611      	mov	r1, r2
 802f0f0:	602b      	str	r3, [r5, #0]
 802f0f2:	f7d5 f8c4 	bl	800427e <_fstat>
 802f0f6:	1c43      	adds	r3, r0, #1
 802f0f8:	d102      	bne.n	802f100 <_fstat_r+0x1c>
 802f0fa:	682b      	ldr	r3, [r5, #0]
 802f0fc:	b103      	cbz	r3, 802f100 <_fstat_r+0x1c>
 802f0fe:	6023      	str	r3, [r4, #0]
 802f100:	bd38      	pop	{r3, r4, r5, pc}
 802f102:	bf00      	nop
 802f104:	2000b628 	.word	0x2000b628

0802f108 <_isatty_r>:
 802f108:	b538      	push	{r3, r4, r5, lr}
 802f10a:	4d06      	ldr	r5, [pc, #24]	; (802f124 <_isatty_r+0x1c>)
 802f10c:	2300      	movs	r3, #0
 802f10e:	4604      	mov	r4, r0
 802f110:	4608      	mov	r0, r1
 802f112:	602b      	str	r3, [r5, #0]
 802f114:	f7d5 f8c3 	bl	800429e <_isatty>
 802f118:	1c43      	adds	r3, r0, #1
 802f11a:	d102      	bne.n	802f122 <_isatty_r+0x1a>
 802f11c:	682b      	ldr	r3, [r5, #0]
 802f11e:	b103      	cbz	r3, 802f122 <_isatty_r+0x1a>
 802f120:	6023      	str	r3, [r4, #0]
 802f122:	bd38      	pop	{r3, r4, r5, pc}
 802f124:	2000b628 	.word	0x2000b628

0802f128 <_init>:
 802f128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f12a:	bf00      	nop
 802f12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f12e:	bc08      	pop	{r3}
 802f130:	469e      	mov	lr, r3
 802f132:	4770      	bx	lr

0802f134 <_fini>:
 802f134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f136:	bf00      	nop
 802f138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f13a:	bc08      	pop	{r3}
 802f13c:	469e      	mov	lr, r3
 802f13e:	4770      	bx	lr
