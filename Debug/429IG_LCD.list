
429IG_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d940  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a94  0802daf0  0802daf0  0003daf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009178  08032584  08032584  00042584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000008  0803b6fc  0803b6fc  0004b6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000679a8  0803b704  0803b704  0004b704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000140  080a30ac  080a30ac  000b30ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080a31ec  080a31ec  000c0110  2**0
                  CONTENTS
  8 .ARM          00000008  080a31ec  080a31ec  000b31ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080a31f4  080a31f4  000c0110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080a31f4  080a31f4  000b31f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080a3208  080a3208  000b3208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000110  20000000  080a3210  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00007d8c  20000110  080a3320  000c0110  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20007e9c  080a3320  000c7e9c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000c0110  2**0
                  CONTENTS, READONLY
 16 .debug_info   000999c7  00000000  00000000  000c0140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00011096  00000000  00000000  00159b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003d48  00000000  00000000  0016aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003828  00000000  00000000  0016e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003468a  00000000  00000000  00172110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004abae  00000000  00000000  001a679a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011247c  00000000  00000000  001f1348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  003037c4  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010b60  00000000  00000000  00303898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802dad8 	.word	0x0802dad8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	0802dad8 	.word	0x0802dad8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void Mount_SD (const TCHAR* path)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <Mount_SD+0x24>)
 80005b6:	f009 fe2b 	bl	800a210 <f_mount>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <Mount_SD+0x28>)
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200069d8 	.word	0x200069d8
 80005d0:	20006c1c 	.word	0x20006c1c

080005d4 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	2000      	movs	r0, #0
 80005e2:	f009 fe15 	bl	800a210 <f_mount>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <Unmount_SD+0x24>)
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20006c1c 	.word	0x20006c1c

080005fc <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8000602:	2014      	movs	r0, #20
 8000604:	f02c f898 	bl	802c738 <malloc>
 8000608:	4603      	mov	r3, r0
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <Format_SD+0xb4>)
 800060e:	4929      	ldr	r1, [pc, #164]	; (80006b4 <Format_SD+0xb8>)
 8000610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000612:	f02c fca3 	bl	802cf5c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800061a:	4618      	mov	r0, r3
 800061c:	f00a f8a0 	bl	800a760 <f_opendir>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <Format_SD+0xbc>)
 8000626:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <Format_SD+0xbc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d136      	bne.n	800069e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4922      	ldr	r1, [pc, #136]	; (80006bc <Format_SD+0xc0>)
 8000634:	4618      	mov	r0, r3
 8000636:	f00a f937 	bl	800a8a8 <f_readdir>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <Format_SD+0xbc>)
 8000640:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <Format_SD+0xbc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d125      	bne.n	8000696 <Format_SD+0x9a>
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Format_SD+0xc0>)
 800064c:	7a5b      	ldrb	r3, [r3, #9]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d021      	beq.n	8000696 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <Format_SD+0xc0>)
 8000654:	7a1b      	ldrb	r3, [r3, #8]
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	2b00      	cmp	r3, #0
 800065c:	d011      	beq.n	8000682 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800065e:	4918      	ldr	r1, [pc, #96]	; (80006c0 <Format_SD+0xc4>)
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <Format_SD+0xc8>)
 8000662:	f7ff fdc5 	bl	80001f0 <strcmp>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d012      	beq.n	8000692 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <Format_SD+0xc4>)
 800066e:	f00a f99e 	bl	800a9ae <f_unlink>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <Format_SD+0xbc>)
 8000678:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <Format_SD+0xbc>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b07      	cmp	r3, #7
 8000680:	e7d6      	b.n	8000630 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <Format_SD+0xc4>)
 8000684:	f00a f993 	bl	800a9ae <f_unlink>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <Format_SD+0xbc>)
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e7ce      	b.n	8000630 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000692:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000694:	e7cc      	b.n	8000630 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f00a f8da 	bl	800a852 <f_closedir>
    }
    free(path);
 800069e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006a0:	f02c f852 	bl	802c748 <free>
    return fresult;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <Format_SD+0xbc>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3738      	adds	r7, #56	; 0x38
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	0802db20 	.word	0x0802db20
 80006b4:	0802daf0 	.word	0x0802daf0
 80006b8:	20006c1c 	.word	0x20006c1c
 80006bc:	200069c0 	.word	0x200069c0
 80006c0:	200069c9 	.word	0x200069c9
 80006c4:	0802daf4 	.word	0x0802daf4

080006c8 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80006d0:	493b      	ldr	r1, [pc, #236]	; (80007c0 <Create_File+0xf8>)
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f00a f92b 	bl	800a92e <f_stat>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <Create_File+0xfc>)
 80006de:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80006e0:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <Create_File+0xfc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10f      	bne.n	8000708 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f02c f825 	bl	802c738 <malloc>
 80006ee:	4603      	mov	r3, r0
 80006f0:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4934      	ldr	r1, [pc, #208]	; (80007c8 <Create_File+0x100>)
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f02c fc30 	bl	802cf5c <siprintf>
		free(buf);
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f02c f823 	bl	802c748 <free>
	    return fresult;
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <Create_File+0xfc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	e057      	b.n	80007b8 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000708:	220b      	movs	r2, #11
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	482f      	ldr	r0, [pc, #188]	; (80007cc <Create_File+0x104>)
 800070e:	f009 fde3 	bl	800a2d8 <f_open>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <Create_File+0xfc>)
 8000718:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <Create_File+0xfc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d012      	beq.n	8000748 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f02c f808 	bl	802c738 <malloc>
 8000728:	4603      	mov	r3, r0
 800072a:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <Create_File+0xfc>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4926      	ldr	r1, [pc, #152]	; (80007d0 <Create_File+0x108>)
 8000736:	6938      	ldr	r0, [r7, #16]
 8000738:	f02c fc10 	bl	802cf5c <siprintf>
			free(buf);
 800073c:	6938      	ldr	r0, [r7, #16]
 800073e:	f02c f803 	bl	802c748 <free>
		    return fresult;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <Create_File+0xfc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	e037      	b.n	80007b8 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f02b fff5 	bl	802c738 <malloc>
 800074e:	4603      	mov	r3, r0
 8000750:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	491f      	ldr	r1, [pc, #124]	; (80007d4 <Create_File+0x10c>)
 8000756:	69f8      	ldr	r0, [r7, #28]
 8000758:	f02c fc00 	bl	802cf5c <siprintf>
			free(buf);
 800075c:	69f8      	ldr	r0, [r7, #28]
 800075e:	f02b fff3 	bl	802c748 <free>
		}

		fresult = f_close(&fil);
 8000762:	481a      	ldr	r0, [pc, #104]	; (80007cc <Create_File+0x104>)
 8000764:	f009 ffcd 	bl	800a702 <f_close>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <Create_File+0xfc>)
 800076e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <Create_File+0xfc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d010      	beq.n	800079a <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8000778:	2064      	movs	r0, #100	; 0x64
 800077a:	f02b ffdd 	bl	802c738 <malloc>
 800077e:	4603      	mov	r3, r0
 8000780:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <Create_File+0xfc>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4913      	ldr	r1, [pc, #76]	; (80007d8 <Create_File+0x110>)
 800078c:	6978      	ldr	r0, [r7, #20]
 800078e:	f02c fbe5 	bl	802cf5c <siprintf>
			free(buf);
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f02b ffd8 	bl	802c748 <free>
 8000798:	e00c      	b.n	80007b4 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f02b ffcc 	bl	802c738 <malloc>
 80007a0:	4603      	mov	r3, r0
 80007a2:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <Create_File+0x114>)
 80007a8:	69b8      	ldr	r0, [r7, #24]
 80007aa:	f02c fbd7 	bl	802cf5c <siprintf>
			free(buf);
 80007ae:	69b8      	ldr	r0, [r7, #24]
 80007b0:	f02b ffca 	bl	802c748 <free>
		}
	}
    return fresult;
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <Create_File+0xfc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200069c0 	.word	0x200069c0
 80007c4:	20006c1c 	.word	0x20006c1c
 80007c8:	0802dc9c 	.word	0x0802dc9c
 80007cc:	20006c24 	.word	0x20006c24
 80007d0:	0802dcd4 	.word	0x0802dcd4
 80007d4:	0802dcfc 	.word	0x0802dcfc
 80007d8:	0802dd3c 	.word	0x0802dd3c
 80007dc:	0802dc7c 	.word	0x0802dc7c

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f001 fba2 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f842 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 fb74 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f0:	f000 faec 	bl	8000dcc <MX_DMA_Init>
  MX_LTDC_Init();
 80007f4:	f000 f962 	bl	8000abc <MX_LTDC_Init>
  MX_TIM4_Init();
 80007f8:	f000 fa66 	bl	8000cc8 <MX_TIM4_Init>
  MX_DMA2D_Init();
 80007fc:	f000 f8d6 	bl	80009ac <MX_DMA2D_Init>
  MX_FMC_Init();
 8000800:	f000 fb0c 	bl	8000e1c <MX_FMC_Init>
  MX_CRC_Init();
 8000804:	f000 f8be 	bl	8000984 <MX_CRC_Init>
  MX_FATFS_Init();
 8000808:	f007 fc02 	bl	8008010 <MX_FATFS_Init>
  MX_I2C2_Init();
 800080c:	f000 f916 	bl	8000a3c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000810:	f000 fa24 	bl	8000c5c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000814:	f000 fab0 	bl	8000d78 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 8000818:	f000 f9d4 	bl	8000bc4 <MX_SDIO_SD_Init>
  MX_TouchGFX_Init();
 800081c:	f00d feae 	bl	800e57c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000820:	2104      	movs	r1, #4
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <main+0x74>)
 8000824:	f005 fd80 	bl	8006328 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000828:	f00a fa5a 	bl	800ace0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <main+0x78>)
 800082e:	2100      	movs	r1, #0
 8000830:	480a      	ldr	r0, [pc, #40]	; (800085c <main+0x7c>)
 8000832:	f00a fad6 	bl	800ade2 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <main+0x80>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800083c:	4a09      	ldr	r2, [pc, #36]	; (8000864 <main+0x84>)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x88>)
 8000842:	f00a face 	bl	800ade2 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <main+0x8c>)
 800084a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800084c:	f00a fa8e 	bl	800ad6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000850:	e7fe      	b.n	8000850 <main+0x70>
 8000852:	bf00      	nop
 8000854:	20006cb8 	.word	0x20006cb8
 8000858:	0802e978 	.word	0x0802e978
 800085c:	080010d9 	.word	0x080010d9
 8000860:	20006cb4 	.word	0x20006cb4
 8000864:	0802e99c 	.word	0x0802e99c
 8000868:	0800e589 	.word	0x0800e589
 800086c:	20006eb0 	.word	0x20006eb0

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a0      	sub	sp, #128	; 0x80
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f02b ff78 	bl	802c774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2230      	movs	r2, #48	; 0x30
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f02b ff69 	bl	802c774 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <SystemClock_Config+0x10c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a34      	ldr	r2, [pc, #208]	; (800097c <SystemClock_Config+0x10c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <SystemClock_Config+0x10c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <SystemClock_Config+0x110>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <SystemClock_Config+0x110>)
 80008c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <SystemClock_Config+0x110>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008ee:	230f      	movs	r3, #15
 80008f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008f2:	23d8      	movs	r3, #216	; 0xd8
 80008f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008fa:	2308      	movs	r3, #8
 80008fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000902:	4618      	mov	r0, r3
 8000904:	f003 f984 	bl	8003c10 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800090e:	f000 fcab 	bl	8001268 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000912:	f003 f92d 	bl	8003b70 <HAL_PWREx_EnableOverDrive>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800091c:	f000 fca4 	bl	8001268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000930:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800093c:	2105      	movs	r1, #5
 800093e:	4618      	mov	r0, r3
 8000940:	f003 fbde 	bl	8004100 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800094a:	f000 fc8d 	bl	8001268 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800094e:	2308      	movs	r3, #8
 8000950:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 120;
 8000952:	2378      	movs	r3, #120	; 0x78
 8000954:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800095a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fdcd 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000970:	f000 fc7a 	bl	8001268 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3780      	adds	r7, #128	; 0x80
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_CRC_Init+0x20>)
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <MX_CRC_Init+0x24>)
 800098c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_CRC_Init+0x20>)
 8000990:	f001 fc14 	bl	80021bc <HAL_CRC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800099a:	f000 fc65 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20006d00 	.word	0x20006d00
 80009a8:	40023000 	.word	0x40023000

080009ac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009b2:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <MX_DMA2D_Init+0x8c>)
 80009b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009bc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_DMA2D_Init+0x88>)
 80009fc:	f001 ff98 	bl	8002930 <HAL_DMA2D_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8000a06:	f000 fc2f 	bl	8001268 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_DMA2D_Init+0x88>)
 8000a0e:	f002 f8e9 	bl	8002be4 <HAL_DMA2D_ConfigLayer>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8000a18:	f000 fc26 	bl	8001268 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_DMA2D_Init+0x88>)
 8000a20:	f002 f8e0 	bl	8002be4 <HAL_DMA2D_ConfigLayer>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8000a2a:	f000 fc1d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000785c 	.word	0x2000785c
 8000a38:	4002b000 	.word	0x4002b000

08000a3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C2_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C2_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a7a:	f002 fb23 	bl	80030c4 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 fbf0 	bl	8001268 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a8c:	f002 fc5e 	bl	800334c <HAL_I2CEx_ConfigAnalogFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a96:	f000 fbe7 	bl	8001268 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C2_Init+0x74>)
 8000a9e:	f002 fc91 	bl	80033c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 fbde 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20006d08 	.word	0x20006d08
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2234      	movs	r2, #52	; 0x34
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f02b fe53 	bl	802c774 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000ad0:	4a3b      	ldr	r2, [pc, #236]	; (8000bc0 <MX_LTDC_Init+0x104>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000ad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ada:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000adc:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000af0:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 80;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000afe:	2250      	movs	r2, #80	; 0x50
 8000b00:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 40;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b04:	2228      	movs	r2, #40	; 0x28
 8000b06:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 880;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b0a:	f44f 725c 	mov.w	r2, #880	; 0x370
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 520;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b12:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1080;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b1a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 542;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b22:	f240 221e 	movw	r2, #542	; 0x21e
 8000b26:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000b42:	f002 fc7f 	bl	8003444 <HAL_LTDC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000b4c:	f000 fb8c 	bl	8001268 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000b54:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b58:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000b5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b62:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b68:	23ff      	movs	r3, #255	; 0xff
 8000b6a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b74:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b7a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8000b80:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000b86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_LTDC_Init+0x100>)
 8000ba6:	f002 fdd5 	bl	8003754 <HAL_LTDC_ConfigLayer>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000bb0:	f000 fb5a 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20006e08 	.word	0x20006e08
 8000bc0:	40016800 	.word	0x40016800

08000bc4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <MX_SDIO_SD_Init+0x84>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

	disk.is_initialized[0] =0;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_SDIO_SD_Init+0x88>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	hsd.Init.ClockDiv = 4;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000c00:	f003 fe3e 	bl	8004880 <HAL_SD_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SDIO_SD_Init+0x4a>
		Error_Handler();
 8000c0a:	f000 fb2d 	bl	8001268 <Error_Handler>
	}

	if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8000c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_SDIO_SD_Init+0x80>)
 8000c14:	f004 fc0a 	bl	800542c <HAL_SD_ConfigWideBusOperation>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_SDIO_SD_Init+0x5e>
		Error_Handler();
 8000c1e:	f000 fb23 	bl	8001268 <Error_Handler>
	}

	Mount_SD("0:/");
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <MX_SDIO_SD_Init+0x8c>)
 8000c24:	f7ff fcc0 	bl	80005a8 <Mount_SD>
	Format_SD();
 8000c28:	f7ff fce8 	bl	80005fc <Format_SD>
	Create_File("FILE1.TXT");
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <MX_SDIO_SD_Init+0x90>)
 8000c2e:	f7ff fd4b 	bl	80006c8 <Create_File>
	Create_File("FILE2.TXT");
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <MX_SDIO_SD_Init+0x94>)
 8000c34:	f7ff fd48 	bl	80006c8 <Create_File>
	Unmount_SD("0:/");
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_SDIO_SD_Init+0x8c>)
 8000c3a:	f7ff fccb 	bl	80005d4 <Unmount_SD>

	//f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
  /* USER CODE END SDIO_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200077d8 	.word	0x200077d8
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	20000164 	.word	0x20000164
 8000c50:	0802de90 	.word	0x0802de90
 8000c54:	0802de94 	.word	0x0802de94
 8000c58:	0802dea0 	.word	0x0802dea0

08000c5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <MX_SPI1_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_SPI1_Init+0x64>)
 8000cae:	f005 f999 	bl	8005fe4 <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cb8:	f000 fad6 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000789c 	.word	0x2000789c
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <MX_TIM4_Init+0xac>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000cf2:	2259      	movs	r2, #89	; 0x59
 8000cf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000cfe:	22f9      	movs	r2, #249	; 0xf9
 8000d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000d10:	f005 faba 	bl	8006288 <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000d1a:	f000 faa5 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000d2e:	f006 f827 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000d38:	f000 fa96 	bl	8001268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8000d40:	23f9      	movs	r3, #249	; 0xf9
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000d54:	f005 fcb8 	bl	80066c8 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d5e:	f000 fa83 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM4_Init+0xa8>)
 8000d64:	f000 fe04 	bl	8001970 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20006cb8 	.word	0x20006cb8
 8000d74:	40000800 	.word	0x40000800

08000d78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART1_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART1_UART_Init+0x4c>)
 8000db0:	f006 f876 	bl	8006ea0 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 fa55 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20006eb4 	.word	0x20006eb4
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_DMA_Init+0x4c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <MX_DMA_Init+0x4c>)
 8000ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_DMA_Init+0x4c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2105      	movs	r1, #5
 8000df2:	203b      	movs	r0, #59	; 0x3b
 8000df4:	f001 f9b8 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000df8:	203b      	movs	r0, #59	; 0x3b
 8000dfa:	f001 f9d1 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2045      	movs	r0, #69	; 0x45
 8000e04:	f001 f9b0 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e08:	2045      	movs	r0, #69	; 0x45
 8000e0a:	f001 f9c9 	bl	80021a0 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e38:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <MX_FMC_Init+0xb8>)
 8000e3a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e50:	2210      	movs	r2, #16
 8000e52:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e5c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e60:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000e84:	2308      	movs	r3, #8
 8000e86:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8000e88:	2306      	movs	r3, #6
 8000e8a:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 8000e90:	2305      	movs	r3, #5
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000ea4:	f005 f81b 	bl	8005ede <HAL_SDRAM_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000eae:	f000 f9db 	bl	8001268 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <MX_FMC_Init+0xb4>)
 8000eb8:	f000 f9f8 	bl	80012ac <SDRAM_Initialization_Sequence>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_FMC_Init+0xaa>
		Error_Handler();
 8000ec2:	f000 f9d1 	bl	8001268 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3730      	adds	r7, #48	; 0x30
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200078f4 	.word	0x200078f4
 8000ed4:	a0000140 	.word	0xa0000140

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
 8000ef2:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a72      	ldr	r2, [pc, #456]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a6b      	ldr	r2, [pc, #428]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	4b65      	ldr	r3, [pc, #404]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a64      	ldr	r2, [pc, #400]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	4b5e      	ldr	r3, [pc, #376]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a56      	ldr	r2, [pc, #344]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a3a      	ldr	r2, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <MX_GPIO_Init+0x1e8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2108      	movs	r1, #8
 8000fee:	4835      	ldr	r0, [pc, #212]	; (80010c4 <MX_GPIO_Init+0x1ec>)
 8000ff0:	f002 f84e 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	4833      	ldr	r0, [pc, #204]	; (80010c8 <MX_GPIO_Init+0x1f0>)
 8000ffa:	f002 f849 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PD4_GPIO_Port, LED_PD4_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2110      	movs	r1, #16
 8001002:	4832      	ldr	r0, [pc, #200]	; (80010cc <MX_GPIO_Init+0x1f4>)
 8001004:	f002 f844 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDIO_SD_Pin */
  GPIO_InitStruct.Pin = SDIO_SD_Pin;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDIO_SD_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	482d      	ldr	r0, [pc, #180]	; (80010d0 <MX_GPIO_Init+0x1f8>)
 800101c:	f001 fe74 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001020:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001032:	2309      	movs	r3, #9
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4825      	ldr	r0, [pc, #148]	; (80010d4 <MX_GPIO_Init+0x1fc>)
 800103e:	f001 fe63 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001042:	2308      	movs	r3, #8
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001046:	2311      	movs	r3, #17
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	481a      	ldr	r0, [pc, #104]	; (80010c4 <MX_GPIO_Init+0x1ec>)
 800105a:	f001 fe55 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 800105e:	2308      	movs	r3, #8
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4814      	ldr	r0, [pc, #80]	; (80010c8 <MX_GPIO_Init+0x1f0>)
 8001076:	f001 fe47 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PD4_Pin */
  GPIO_InitStruct.Pin = LED_PD4_Pin;
 800107a:	2310      	movs	r3, #16
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_PD4_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_GPIO_Init+0x1f4>)
 8001092:	f001 fe39 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010a8:	2309      	movs	r3, #9
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4808      	ldr	r0, [pc, #32]	; (80010d4 <MX_GPIO_Init+0x1fc>)
 80010b4:	f001 fe28 	bl	8002d08 <HAL_GPIO_Init>

}
 80010b8:	bf00      	nop
 80010ba:	3738      	adds	r7, #56	; 0x38
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021800 	.word	0x40021800
 80010c8:	40022000 	.word	0x40022000
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40020400 	.word	0x40020400

080010d8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
//		osDelay(100);
//		HAL_GPIO_TogglePin(LED_PD4_GPIO_Port, LED_PD4_Pin);
//		osDelay(100);


		Current_Status.MAP = 10;
 80010e0:	4b57      	ldr	r3, [pc, #348]	; (8001240 <StartDefaultTask+0x168>)
 80010e2:	220a      	movs	r2, #10
 80010e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		Current_Status.IAT = 10;
 80010e8:	4b55      	ldr	r3, [pc, #340]	; (8001240 <StartDefaultTask+0x168>)
 80010ea:	220a      	movs	r2, #10
 80010ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Current_Status.OILP = 10;
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <StartDefaultTask+0x168>)
 80010f2:	220a      	movs	r2, #10
 80010f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Current_Status.FUELP = 10;
 80010f8:	4b51      	ldr	r3, [pc, #324]	; (8001240 <StartDefaultTask+0x168>)
 80010fa:	220a      	movs	r2, #10
 80010fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Current_Status.BATT = 10;
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <StartDefaultTask+0x168>)
 8001102:	220a      	movs	r2, #10
 8001104:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		Current_Status.BARO = 10;
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <StartDefaultTask+0x168>)
 800110a:	220a      	movs	r2, #10
 800110c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		Current_Status.TPS = 10;
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <StartDefaultTask+0x168>)
 8001112:	220a      	movs	r2, #10
 8001114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		Current_Status.LAMBDA1 = 10;
 8001118:	4b49      	ldr	r3, [pc, #292]	; (8001240 <StartDefaultTask+0x168>)
 800111a:	220a      	movs	r2, #10
 800111c:	849a      	strh	r2, [r3, #36]	; 0x24
		Current_Status.LAMBDA2 = 10;
 800111e:	4b48      	ldr	r3, [pc, #288]	; (8001240 <StartDefaultTask+0x168>)
 8001120:	220a      	movs	r2, #10
 8001122:	84da      	strh	r2, [r3, #38]	; 0x26

		Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <StartDefaultTask+0x168>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800112c:	d804      	bhi.n	8001138 <StartDefaultTask+0x60>
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <StartDefaultTask+0x168>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	3319      	adds	r3, #25
 8001134:	b29b      	uxth	r3, r3
 8001136:	e000      	b.n	800113a <StartDefaultTask+0x62>
 8001138:	2300      	movs	r3, #0
 800113a:	4a41      	ldr	r2, [pc, #260]	; (8001240 <StartDefaultTask+0x168>)
 800113c:	8013      	strh	r3, [r2, #0]


		Current_Status.ECT = Current_Status.RPM;
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <StartDefaultTask+0x168>)
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <StartDefaultTask+0x168>)
 8001144:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Current_Status.IND_HIGH = !Current_Status.IND_HIGH;
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <StartDefaultTask+0x168>)
 800114a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf0c      	ite	eq
 8001152:	2301      	moveq	r3, #1
 8001154:	2300      	movne	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <StartDefaultTask+0x168>)
 800115c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		Current_Status.IND_LOW = !Current_Status.IND_LOW;
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <StartDefaultTask+0x168>)
 8001162:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <StartDefaultTask+0x168>)
 8001174:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		Current_Status.IND_DTC = !Current_Status.IND_DTC;
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <StartDefaultTask+0x168>)
 800117a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	b29a      	uxth	r2, r3
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <StartDefaultTask+0x168>)
 800118c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		Current_Status.IND_BATT = !Current_Status.IND_BATT;
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <StartDefaultTask+0x168>)
 8001192:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <StartDefaultTask+0x168>)
 80011a4:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		Current_Status.IND_FUEL = !Current_Status.IND_FUEL;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <StartDefaultTask+0x168>)
 80011aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <StartDefaultTask+0x168>)
 80011bc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		Current_Status.IND_OIL = !Current_Status.IND_OIL;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <StartDefaultTask+0x168>)
 80011c2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <StartDefaultTask+0x168>)
 80011d4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		Current_Status.IND_PARK = !Current_Status.IND_PARK;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <StartDefaultTask+0x168>)
 80011da:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <StartDefaultTask+0x168>)
 80011ec:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		Current_Status.IND_ECT = !Current_Status.IND_ECT;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <StartDefaultTask+0x168>)
 80011f2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <StartDefaultTask+0x168>)
 8001204:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		Current_Status.IND_LEFT = !Current_Status.IND_LEFT;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <StartDefaultTask+0x168>)
 800120a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf0c      	ite	eq
 8001212:	2301      	moveq	r3, #1
 8001214:	2300      	movne	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <StartDefaultTask+0x168>)
 800121c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		Current_Status.IND_RIGHT = !Current_Status.IND_RIGHT;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <StartDefaultTask+0x168>)
 8001222:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b03      	ldr	r3, [pc, #12]	; (8001240 <StartDefaultTask+0x168>)
 8001234:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		osDelay(25);
 8001238:	2019      	movs	r0, #25
 800123a:	f009 fe85 	bl	800af48 <osDelay>
		Current_Status.MAP = 10;
 800123e:	e74f      	b.n	80010e0 <StartDefaultTask+0x8>
 8001240:	20006d5c 	.word	0x20006d5c

08001244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001256:	f000 fe8b 	bl	8001f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40002000 	.word	0x40002000

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <SDRAM_delay>:
#include "sdram.h"

void SDRAM_delay(__IO uint32_t nCount)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]

  for(index = (100000 * nCount); index != 0; index--);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <SDRAM_delay+0x34>)
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e002      	b.n	8001292 <SDRAM_delay+0x1e>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3b01      	subs	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f9      	bne.n	800128c <SDRAM_delay+0x18>

}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	000186a0 	.word	0x000186a0

080012ac <SDRAM_Initialization_Sequence>:

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ��
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2208      	movs	r2, #8
 80012c4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80012d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f004 fe58 	bl	8005f8e <HAL_SDRAM_SendCommand>
  SDRAM_delay(1);		// ��ʱ�ȴ�
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff ffc8 	bl	8001274 <SDRAM_delay>

  /* Configure a PALL (precharge all) command */
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2202      	movs	r2, #2
 80012e8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2208      	movs	r2, #8
 80012ee:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f004 fe43 	bl	8005f8e <HAL_SDRAM_SendCommand>

  /* Configure a Auto-Refresh command */
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2203      	movs	r2, #3
 800130c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2208      	movs	r2, #8
 8001312:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2208      	movs	r2, #8
 8001318:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 8001320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f004 fe31 	bl	8005f8e <HAL_SDRAM_SendCommand>

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 800132c:	f240 2331 	movw	r3, #561	; 0x231
 8001330:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2204      	movs	r2, #4
 8001336:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2208      	movs	r2, #8
 800133c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800134a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f004 fe1c 	bl	8005f8e <HAL_SDRAM_SendCommand>

  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼�����
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6153      	str	r3, [r2, #20]
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_MspInit+0x54>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_MspInit+0x54>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x54>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_MspInit+0x54>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_MspInit+0x54>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_MspInit+0x54>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210f      	movs	r1, #15
 80013b6:	f06f 0001 	mvn.w	r0, #1
 80013ba:	f000 fed5 	bl	8002168 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10d      	bne.n	80013fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_CRC_MspInit+0x40>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_CRC_MspInit+0x40>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_CRC_MspInit+0x40>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023000 	.word	0x40023000
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_DMA2D_MspInit+0x48>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d115      	bne.n	800144e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_DMA2D_MspInit+0x4c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <HAL_DMA2D_MspInit+0x4c>)
 800142c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_DMA2D_MspInit+0x4c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2105      	movs	r1, #5
 8001442:	205a      	movs	r0, #90	; 0x5a
 8001444:	f000 fe90 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001448:	205a      	movs	r0, #90	; 0x5a
 800144a:	f000 fea9 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	4002b000 	.word	0x4002b000
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800149e:	2330      	movs	r3, #48	; 0x30
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ae:	2304      	movs	r3, #4
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_I2C_MspInit+0x8c>)
 80014ba:	f001 fc25 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_I2C_MspInit+0x88>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40005800 	.word	0x40005800
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021c00 	.word	0x40021c00

080014f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a64      	ldr	r2, [pc, #400]	; (80016a0 <HAL_LTDC_MspInit+0x1b0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 80c1 	bne.w	8001696 <HAL_LTDC_MspInit+0x1a6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
 8001518:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800151e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001522:	6453      	str	r3, [r2, #68]	; 0x44
 8001524:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800152c:	623b      	str	r3, [r7, #32]
 800152e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6313      	str	r3, [r2, #48]	; 0x30
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6313      	str	r3, [r2, #48]	; 0x30
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 800158e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 80015aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <HAL_LTDC_MspInit+0x1b4>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80015bc:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ce:	230e      	movs	r3, #14
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4833      	ldr	r0, [pc, #204]	; (80016a8 <HAL_LTDC_MspInit+0x1b8>)
 80015da:	f001 fb95 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f0:	230e      	movs	r3, #14
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	482c      	ldr	r0, [pc, #176]	; (80016ac <HAL_LTDC_MspInit+0x1bc>)
 80015fc:	f001 fb84 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001600:	2302      	movs	r3, #2
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001610:	2309      	movs	r3, #9
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4825      	ldr	r0, [pc, #148]	; (80016b0 <HAL_LTDC_MspInit+0x1c0>)
 800161c:	f001 fb74 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001632:	230e      	movs	r3, #14
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	481d      	ldr	r0, [pc, #116]	; (80016b4 <HAL_LTDC_MspInit+0x1c4>)
 800163e:	f001 fb63 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8001642:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001654:	230e      	movs	r3, #14
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	4815      	ldr	r0, [pc, #84]	; (80016b4 <HAL_LTDC_MspInit+0x1c4>)
 8001660:	f001 fb52 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001664:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166e:	2301      	movs	r3, #1
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001676:	230e      	movs	r3, #14
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <HAL_LTDC_MspInit+0x1c8>)
 8001682:	f001 fb41 	bl	8002d08 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	2058      	movs	r0, #88	; 0x58
 800168c:	f000 fd6c 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001690:	2058      	movs	r0, #88	; 0x58
 8001692:	f000 fd85 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3738      	adds	r7, #56	; 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40016800 	.word	0x40016800
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40021c00 	.word	0x40021c00
 80016b8:	40021800 	.word	0x40021800

080016bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a68      	ldr	r2, [pc, #416]	; (800187c <HAL_SD_MspInit+0x1c0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	f040 80c9 	bne.w	8001872 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	4b66      	ldr	r3, [pc, #408]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	4a65      	ldr	r2, [pc, #404]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 80016ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ee:	6453      	str	r3, [r2, #68]	; 0x44
 80016f0:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	4a5e      	ldr	r2, [pc, #376]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6313      	str	r3, [r2, #48]	; 0x30
 800170c:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4a57      	ldr	r2, [pc, #348]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	4b55      	ldr	r3, [pc, #340]	; (8001880 <HAL_SD_MspInit+0x1c4>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001734:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001738:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173e:	2301      	movs	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001746:	230c      	movs	r3, #12
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	484c      	ldr	r0, [pc, #304]	; (8001884 <HAL_SD_MspInit+0x1c8>)
 8001752:	f001 fad9 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001756:	2304      	movs	r3, #4
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175e:	2301      	movs	r3, #1
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001766:	230c      	movs	r3, #12
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4845      	ldr	r0, [pc, #276]	; (8001888 <HAL_SD_MspInit+0x1cc>)
 8001772:	f001 fac9 	bl	8002d08 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001776:	4b45      	ldr	r3, [pc, #276]	; (800188c <HAL_SD_MspInit+0x1d0>)
 8001778:	4a45      	ldr	r2, [pc, #276]	; (8001890 <HAL_SD_MspInit+0x1d4>)
 800177a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800177c:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_SD_MspInit+0x1d0>)
 800177e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001782:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001784:	4b41      	ldr	r3, [pc, #260]	; (800188c <HAL_SD_MspInit+0x1d0>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_SD_MspInit+0x1d0>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001790:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_SD_MspInit+0x1d0>)
 8001792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001796:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001798:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_SD_MspInit+0x1d0>)
 800179a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80017a8:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017bc:	2203      	movs	r2, #3
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80017d0:	482e      	ldr	r0, [pc, #184]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017d2:	f000 fd0f 	bl	80021f4 <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80017dc:	f7ff fd44 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
 80017e6:	4a29      	ldr	r2, [pc, #164]	; (800188c <HAL_SD_MspInit+0x1d0>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <HAL_SD_MspInit+0x1dc>)
 80017f0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 80017f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 80017fc:	2240      	movs	r2, #64	; 0x40
 80017fe:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001814:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001818:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001820:	2220      	movs	r2, #32
 8001822:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 800182c:	2204      	movs	r2, #4
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001832:	2203      	movs	r2, #3
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001838:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001840:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001846:	4813      	ldr	r0, [pc, #76]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 8001848:	f000 fcd4 	bl	80021f4 <HAL_DMA_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001852:	f7ff fd09 	bl	8001268 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_SD_MspInit+0x1d8>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	2031      	movs	r0, #49	; 0x31
 8001868:	f000 fc7e 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800186c:	2031      	movs	r0, #49	; 0x31
 800186e:	f000 fc97 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40023800 	.word	0x40023800
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	20006c54 	.word	0x20006c54
 8001890:	40026458 	.word	0x40026458
 8001894:	20007778 	.word	0x20007778
 8001898:	400264a0 	.word	0x400264a0

0800189c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_SPI_MspInit+0x84>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12b      	bne.n	8001916 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_SPI_MspInit+0x88>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_SPI_MspInit+0x88>)
 80018c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_SPI_MspInit+0x88>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_SPI_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_SPI_MspInit+0x88>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_SPI_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018f6:	2338      	movs	r3, #56	; 0x38
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001906:	2305      	movs	r3, #5
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_SPI_MspInit+0x8c>)
 8001912:	f001 f9f9 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40013000 	.word	0x40013000
 8001924:	40023800 	.word	0x40023800
 8001928:	40020400 	.word	0x40020400

0800192c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_TIM_PWM_MspInit+0x3c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10d      	bne.n	800195a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_TIM_PWM_MspInit+0x40>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_TIM_PWM_MspInit+0x40>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_TIM_PWM_MspInit+0x40>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40000800 	.word	0x40000800
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_TIM_MspPostInit+0x68>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11e      	bne.n	80019d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_TIM_MspPostInit+0x70>)
 80019cc:	f001 f99c 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_UART_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_UART_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a50:	2307      	movs	r3, #7
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_UART_MspInit+0x8c>)
 8001a5c:	f001 f954 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_FMC_MspInit+0x114>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d177      	bne.n	8001b80 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_FMC_MspInit+0x114>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <HAL_FMC_MspInit+0x118>)
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	4a3b      	ldr	r2, [pc, #236]	; (8001b8c <HAL_FMC_MspInit+0x118>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6393      	str	r3, [r2, #56]	; 0x38
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_FMC_MspInit+0x118>)
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ab2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ab6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4830      	ldr	r0, [pc, #192]	; (8001b90 <HAL_FMC_MspInit+0x11c>)
 8001ace:	f001 f91b 	bl	8002d08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <HAL_FMC_MspInit+0x120>)
 8001aec:	f001 f90c 	bl	8002d08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001af0:	f248 1337 	movw	r3, #33079	; 0x8137
 8001af4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b02:	230c      	movs	r3, #12
 8001b04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4823      	ldr	r0, [pc, #140]	; (8001b98 <HAL_FMC_MspInit+0x124>)
 8001b0c:	f001 f8fc 	bl	8002d08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b10:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b22:	230c      	movs	r3, #12
 8001b24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481c      	ldr	r0, [pc, #112]	; (8001b9c <HAL_FMC_MspInit+0x128>)
 8001b2c:	f001 f8ec 	bl	8002d08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b30:	23c0      	movs	r3, #192	; 0xc0
 8001b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b40:	230c      	movs	r3, #12
 8001b42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <HAL_FMC_MspInit+0x12c>)
 8001b4a:	f001 f8dd 	bl	8002d08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001b4e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b60:	230c      	movs	r3, #12
 8001b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <HAL_FMC_MspInit+0x130>)
 8001b6a:	f001 f8cd 	bl	8002d08 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	2030      	movs	r0, #48	; 0x30
 8001b74:	f000 faf8 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8001b78:	2030      	movs	r0, #48	; 0x30
 8001b7a:	f000 fb11 	bl	80021a0 <HAL_NVIC_EnableIRQ>
 8001b7e:	e000      	b.n	8001b82 <HAL_FMC_MspInit+0x10e>
    return;
 8001b80:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000012c 	.word	0x2000012c
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001bb0:	f7ff ff60 	bl	8001a74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	202d      	movs	r0, #45	; 0x2d
 8001bd2:	f000 fac9 	bl	8002168 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001bd6:	202d      	movs	r0, #45	; 0x2d
 8001bd8:	f000 fae2 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_InitTick+0xa4>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_InitTick+0xa4>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_InitTick+0xa4>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf8:	f107 0210 	add.w	r2, r7, #16
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fc4c 	bl	80044a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c08:	f002 fc22 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_InitTick+0xa8>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9b      	lsrs	r3, r3, #18
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_InitTick+0xac>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_InitTick+0xb0>)
 8001c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_InitTick+0xac>)
 8001c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_InitTick+0xac>)
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_InitTick+0xac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_InitTick+0xac>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <HAL_InitTick+0xac>)
 8001c42:	f004 fa58 	bl	80060f6 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_InitTick+0xac>)
 8001c4e:	f004 faab 	bl	80061a8 <HAL_TIM_Base_Start_IT>
 8001c52:	4603      	mov	r3, r0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	20007928 	.word	0x20007928
 8001c6c:	40002000 	.word	0x40002000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ca2:	f004 fc09 	bl	80064b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20007928 	.word	0x20007928

08001cb0 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <FMC_IRQHandler+0x10>)
 8001cb6:	f004 f946 	bl	8005f46 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200078f4 	.word	0x200078f4

08001cc4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <SDIO_IRQHandler+0x10>)
 8001cca:	f003 f84f 	bl	8004d6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200077d8 	.word	0x200077d8

08001cd8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <DMA2_Stream3_IRQHandler+0x10>)
 8001cde:	f000 fbb1 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20006c54 	.word	0x20006c54

08001cec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <DMA2_Stream6_IRQHandler+0x10>)
 8001cf2:	f000 fba7 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20007778 	.word	0x20007778

08001d00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <LTDC_IRQHandler+0x10>)
 8001d06:	f001 fc6d 	bl	80035e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20006e08 	.word	0x20006e08

08001d14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA2D_IRQHandler+0x10>)
 8001d1a:	f000 fe52 	bl	80029c2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000785c 	.word	0x2000785c

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d42:	f02a fcbd 	bl	802c6c0 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
	}

return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
	}
	return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
	return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e06:	605a      	str	r2, [r3, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_isatty>:

int _isatty(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f02a fc22 	bl	802c6c0 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20030000 	.word	0x20030000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	20000130 	.word	0x20000130
 8001eb0:	20007ea0 	.word	0x20007ea0

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ffd7 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f02a fbf3 	bl	802c6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe fc69 	bl	80007e0 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f10:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001f1c:	080a3210 	.word	0x080a3210
  ldr r2, =_sbss
 8001f20:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001f24:	20007e9c 	.word	0x20007e9c

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_Init+0x40>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_Init+0x40>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x40>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f8fc 	bl	8002152 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff fe2e 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fa08 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	20007970 	.word	0x20007970

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20007970 	.word	0x20007970

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000000c 	.word	0x2000000c

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff4c 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800217a:	f7ff ff61 	bl	8002040 <__NVIC_GetPriorityGrouping>
 800217e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	6978      	ldr	r0, [r7, #20]
 8002186:	f7ff ffb1 	bl	80020ec <NVIC_EncodePriority>
 800218a:	4602      	mov	r2, r0
 800218c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff80 	bl	8002098 <__NVIC_SetPriority>
}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff54 	bl	800205c <__NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	795b      	ldrb	r3, [r3, #5]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff f8f4 	bl	80013cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff feca 	bl	8001f98 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e099      	b.n	8002344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e00f      	b.n	8002252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff feb1 	bl	8001f98 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b05      	cmp	r3, #5
 800223e:	d908      	bls.n	8002252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e078      	b.n	8002344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_DMA_Init+0x158>)
 800226c:	4013      	ands	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	4313      	orrs	r3, r2
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d117      	bne.n	8002316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fa9d 	bl	8002838 <DMA_CheckFifoParam>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002312:	2301      	movs	r3, #1
 8002314:	e016      	b.n	8002344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa54 	bl	80027cc <DMA_CalcBaseAndBitshift>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	223f      	movs	r2, #63	; 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	f010803f 	.word	0xf010803f

08002350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Start_IT+0x26>
 8002372:	2302      	movs	r3, #2
 8002374:	e040      	b.n	80023f8 <HAL_DMA_Start_IT+0xa8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12f      	bne.n	80023ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f9e6 	bl	8002770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0216 	orr.w	r2, r2, #22
 80023be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e005      	b.n	80023f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d004      	beq.n	800241e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00c      	b.n	8002438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002450:	4b92      	ldr	r3, [pc, #584]	; (800269c <HAL_DMA_IRQHandler+0x258>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a92      	ldr	r2, [pc, #584]	; (80026a0 <HAL_DMA_IRQHandler+0x25c>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a9b      	lsrs	r3, r3, #10
 800245c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	2208      	movs	r2, #8
 8002470:	409a      	lsls	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01a      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0204 	bic.w	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2208      	movs	r2, #8
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d012      	beq.n	80024e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2201      	movs	r2, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2204      	movs	r2, #4
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d012      	beq.n	800251c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2204      	movs	r2, #4
 800250a:	409a      	lsls	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0204 	orr.w	r2, r3, #4
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	2210      	movs	r2, #16
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d043      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d03c      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	2210      	movs	r2, #16
 8002540:	409a      	lsls	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d018      	beq.n	8002586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d024      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
 8002572:	e01f      	b.n	80025b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
 8002584:	e016      	b.n	80025b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0208 	bic.w	r2, r2, #8
 80025a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2220      	movs	r2, #32
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 808e 	beq.w	80026e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8086 	beq.w	80026e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	2220      	movs	r2, #32
 80025dc:	409a      	lsls	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d136      	bne.n	800265c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0216 	bic.w	r2, r2, #22
 80025fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800260c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <HAL_DMA_IRQHandler+0x1da>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0208 	bic.w	r2, r2, #8
 800262c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	223f      	movs	r2, #63	; 0x3f
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	2b00      	cmp	r3, #0
 8002650:	d07d      	beq.n	800274e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
        }
        return;
 800265a:	e078      	b.n	800274e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01c      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	2b00      	cmp	r3, #0
 800267e:	d030      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e02b      	b.n	80026e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d027      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
 800269a:	e022      	b.n	80026e2 <HAL_DMA_IRQHandler+0x29e>
 800269c:	20000004 	.word	0x20000004
 80026a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0210 	bic.w	r2, r2, #16
 80026c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d032      	beq.n	8002750 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d022      	beq.n	800273c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	429a      	cmp	r2, r3
 8002718:	d307      	bcc.n	800272a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f2      	bne.n	800270e <HAL_DMA_IRQHandler+0x2ca>
 8002728:	e000      	b.n	800272c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800272a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
 800274c:	e000      	b.n	8002750 <HAL_DMA_IRQHandler+0x30c>
        return;
 800274e:	bf00      	nop
    }
  }
}
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop

08002758 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800278c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d108      	bne.n	80027b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ae:	e007      	b.n	80027c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3b10      	subs	r3, #16
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <DMA_CalcBaseAndBitshift+0x64>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <DMA_CalcBaseAndBitshift+0x68>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d909      	bls.n	800280e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	; 0x58
 800280c:	e007      	b.n	800281e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	aaaaaaab 	.word	0xaaaaaaab
 8002834:	0802e9d8 	.word	0x0802e9d8

08002838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <DMA_CheckFifoParam+0x5a>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d856      	bhi.n	8002906 <DMA_CheckFifoParam+0xce>
 8002858:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <DMA_CheckFifoParam+0x28>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002871 	.word	0x08002871
 8002864:	08002883 	.word	0x08002883
 8002868:	08002871 	.word	0x08002871
 800286c:	08002907 	.word	0x08002907
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d046      	beq.n	800290a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002880:	e043      	b.n	800290a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800288a:	d140      	bne.n	800290e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e03d      	b.n	800290e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289a:	d121      	bne.n	80028e0 <DMA_CheckFifoParam+0xa8>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d837      	bhi.n	8002912 <DMA_CheckFifoParam+0xda>
 80028a2:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <DMA_CheckFifoParam+0x70>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028bf 	.word	0x080028bf
 80028b0:	080028b9 	.word	0x080028b9
 80028b4:	080028d1 	.word	0x080028d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e030      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d025      	beq.n	8002916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e022      	b.n	8002916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028de:	e01c      	b.n	800291a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d903      	bls.n	80028ee <DMA_CheckFifoParam+0xb6>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d003      	beq.n	80028f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028ec:	e018      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      break;
 80028f2:	e015      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e00b      	b.n	800291e <DMA_CheckFifoParam+0xe6>
      break;
 8002906:	bf00      	nop
 8002908:	e00a      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290a:	bf00      	nop
 800290c:	e008      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800290e:	bf00      	nop
 8002910:	e006      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e004      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e002      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;   
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
    }
  } 
  
  return status; 
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e03b      	b.n	80029ba <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fd5a 	bl	8001410 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	f023 0107 	bic.w	r1, r3, #7
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800299a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68d1      	ldr	r1, [r2, #12]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d026      	beq.n	8002a32 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d021      	beq.n	8002a32 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029fc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2204      	movs	r2, #4
 8002a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d026      	beq.n	8002a8a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d026      	beq.n	8002ae2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d021      	beq.n	8002ae2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f853 	bl	8002bba <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d024      	beq.n	8002b68 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01f      	beq.n	8002b68 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b36:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01f      	beq.n	8002bb2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01a      	beq.n	8002bb2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f80e 	bl	8002bce <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA2D_ConfigLayer+0x20>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e079      	b.n	8002cf8 <HAL_DMA2D_ConfigLayer+0x114>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	3318      	adds	r3, #24
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c2e:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_DMA2D_ConfigLayer+0x120>)
 8002c30:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b0a      	cmp	r3, #10
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA2D_ConfigLayer+0x5e>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d107      	bne.n	8002c52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e005      	b.n	8002c5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d120      	bne.n	8002ca6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	ea02 0103 	and.w	r1, r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b0a      	cmp	r3, #10
 8002c8c:	d003      	beq.n	8002c96 <HAL_DMA2D_ConfigLayer+0xb2>
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b09      	cmp	r3, #9
 8002c94:	d127      	bne.n	8002ce6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca4:	e01f      	b.n	8002ce6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	ea02 0103 	and.w	r1, r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b0a      	cmp	r3, #10
 8002cce:	d003      	beq.n	8002cd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	d106      	bne.n	8002ce6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ce4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	ff03000f 	.word	0xff03000f

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e177      	b.n	8003014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 8166 	bne.w	800300e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80c0 	beq.w	800300e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_GPIO_Init+0x324>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_GPIO_Init+0x324>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_GPIO_Init+0x324>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_GPIO_Init+0x32c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d037      	beq.n	8002f46 <HAL_GPIO_Init+0x23e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_GPIO_Init+0x23a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_GPIO_Init+0x334>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <HAL_GPIO_Init+0x236>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a55      	ldr	r2, [pc, #340]	; (8003040 <HAL_GPIO_Init+0x338>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d025      	beq.n	8002f3a <HAL_GPIO_Init+0x232>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a54      	ldr	r2, [pc, #336]	; (8003044 <HAL_GPIO_Init+0x33c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_GPIO_Init+0x22e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a53      	ldr	r2, [pc, #332]	; (8003048 <HAL_GPIO_Init+0x340>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x22a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x344>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	; (8003050 <HAL_GPIO_Init+0x348>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_GPIO_Init+0x34c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x21a>
 8002f1e:	2309      	movs	r3, #9
 8002f20:	e012      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f22:	230a      	movs	r3, #10
 8002f24:	e010      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00e      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00c      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00a      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f32:	2305      	movs	r3, #5
 8002f34:	e008      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e004      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f46:	2300      	movs	r3, #0
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f002 0203 	and.w	r2, r2, #3
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4093      	lsls	r3, r2
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f58:	4935      	ldr	r1, [pc, #212]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_GPIO_Init+0x354>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8a:	4a34      	ldr	r2, [pc, #208]	; (800305c <HAL_GPIO_Init+0x354>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f90:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_GPIO_Init+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_GPIO_Init+0x354>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <HAL_GPIO_Init+0x354>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	f67f ae84 	bls.w	8002d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40013800 	.word	0x40013800
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40021400 	.word	0x40021400
 800304c:	40021800 	.word	0x40021800
 8003050:	40021c00 	.word	0x40021c00
 8003054:	40022000 	.word	0x40022000
 8003058:	40022400 	.word	0x40022400
 800305c:	40013c00 	.word	0x40013c00

08003060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e001      	b.n	8003082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e12b      	b.n	800332e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe f9b8 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f001 f992 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a81      	ldr	r2, [pc, #516]	; (8003338 <HAL_I2C_Init+0x274>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <HAL_I2C_Init+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a80      	ldr	r2, [pc, #512]	; (800333c <HAL_I2C_Init+0x278>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e006      	b.n	8003156 <HAL_I2C_Init+0x92>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a7d      	ldr	r2, [pc, #500]	; (8003340 <HAL_I2C_Init+0x27c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0e7      	b.n	800332e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a78      	ldr	r2, [pc, #480]	; (8003344 <HAL_I2C_Init+0x280>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a6a      	ldr	r2, [pc, #424]	; (8003338 <HAL_I2C_Init+0x274>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d802      	bhi.n	8003198 <HAL_I2C_Init+0xd4>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	e009      	b.n	80031ac <HAL_I2C_Init+0xe8>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a69      	ldr	r2, [pc, #420]	; (8003348 <HAL_I2C_Init+0x284>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	495c      	ldr	r1, [pc, #368]	; (8003338 <HAL_I2C_Init+0x274>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d819      	bhi.n	8003200 <HAL_I2C_Init+0x13c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e59      	subs	r1, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e0:	400b      	ands	r3, r1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_I2C_Init+0x138>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	e051      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e04f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_I2C_Init+0x168>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e58      	subs	r0, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	440b      	add	r3, r1
 8003216:	fbb0 f3f3 	udiv	r3, r0, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e012      	b.n	8003252 <HAL_I2C_Init+0x18e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	0099      	lsls	r1, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x196>
 8003256:	2301      	movs	r3, #1
 8003258:	e022      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10e      	bne.n	8003280 <HAL_I2C_Init+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1e58      	subs	r0, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	440b      	add	r3, r1
 8003270:	fbb0 f3f3 	udiv	r3, r0, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6809      	ldr	r1, [r1, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6911      	ldr	r1, [r2, #16]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	000186a0 	.word	0x000186a0
 800333c:	001e847f 	.word	0x001e847f
 8003340:	003d08ff 	.word	0x003d08ff
 8003344:	431bde83 	.word	0x431bde83
 8003348:	10624dd3 	.word	0x10624dd3

0800334c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	d129      	bne.n	80033b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2224      	movs	r2, #36	; 0x24
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0210 	bic.w	r2, r2, #16
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d12a      	bne.n	8003434 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2224      	movs	r2, #36	; 0x24
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80033fe:	89fb      	ldrh	r3, [r7, #14]
 8003400:	f023 030f 	bic.w	r3, r3, #15
 8003404:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b29a      	uxth	r2, r3
 800340a:	89fb      	ldrh	r3, [r7, #14]
 800340c:	4313      	orrs	r3, r2
 800340e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	89fa      	ldrh	r2, [r7, #14]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0bf      	b.n	80035d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe f840 	bl	80014f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003486:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800349c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_LTDC_Init+0x19c>)
 80034b8:	400b      	ands	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68d9      	ldr	r1, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_LTDC_Init+0x19c>)
 80034e6:	400b      	ands	r3, r1
 80034e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68d9      	ldr	r1, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1a      	ldr	r2, [r3, #32]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_LTDC_Init+0x19c>)
 8003514:	400b      	ands	r3, r1
 8003516:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6959      	ldr	r1, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_LTDC_Init+0x19c>)
 8003542:	400b      	ands	r3, r1
 8003544:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6959      	ldr	r1, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0206 	orr.w	r2, r2, #6
 80035b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	f000f800 	.word	0xf000f800

080035e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d023      	beq.n	800364e <HAL_LTDC_IRQHandler+0x6a>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01e      	beq.n	800364e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2204      	movs	r2, #4
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f86f 	bl	800372c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <HAL_LTDC_IRQHandler+0xbc>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01e      	beq.n	80036a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0202 	bic.w	r2, r2, #2
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2202      	movs	r2, #2
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003680:	f043 0202 	orr.w	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2204      	movs	r2, #4
 800368e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f846 	bl	800372c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01b      	beq.n	80036e2 <HAL_LTDC_IRQHandler+0xfe>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d016      	beq.n	80036e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f012 f905 	bl	80158ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_LTDC_IRQHandler+0x140>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0208 	bic.w	r2, r2, #8
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2208      	movs	r2, #8
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f80e 	bl	8003740 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_LTDC_ConfigLayer+0x1a>
 800376a:	2302      	movs	r3, #2
 800376c:	e02c      	b.n	80037c8 <HAL_LTDC_ConfigLayer+0x74>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2202      	movs	r2, #2
 800377a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2134      	movs	r1, #52	; 0x34
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4614      	mov	r4, r2
 8003792:	461d      	mov	r5, r3
 8003794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800379a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800379c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800379e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f849 	bl	8003840 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2201      	movs	r2, #1
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bdb0      	pop	{r4, r5, r7, pc}

080037d0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_LTDC_ProgramLineEvent+0x18>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e023      	b.n	8003830 <HAL_LTDC_ProgramLineEvent+0x60>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40016800 	.word	0x40016800

08003840 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	4413      	add	r3, r2
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	01db      	lsls	r3, r3, #7
 800386c:	4413      	add	r3, r2
 800386e:	3384      	adds	r3, #132	; 0x84
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	4611      	mov	r1, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	01d2      	lsls	r2, r2, #7
 800387c:	440a      	add	r2, r1
 800387e:	3284      	adds	r2, #132	; 0x84
 8003880:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003884:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003896:	4413      	add	r3, r2
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4619      	mov	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	440b      	add	r3, r1
 80038a6:	3384      	adds	r3, #132	; 0x84
 80038a8:	4619      	mov	r1, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038be:	4413      	add	r3, r2
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	01db      	lsls	r3, r3, #7
 80038ce:	4413      	add	r3, r2
 80038d0:	3384      	adds	r3, #132	; 0x84
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	4611      	mov	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	01d2      	lsls	r2, r2, #7
 80038de:	440a      	add	r2, r1
 80038e0:	3284      	adds	r2, #132	; 0x84
 80038e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80038e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f6:	4413      	add	r3, r2
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	440b      	add	r3, r1
 8003906:	3384      	adds	r3, #132	; 0x84
 8003908:	4619      	mov	r1, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	01db      	lsls	r3, r3, #7
 800391a:	4413      	add	r3, r2
 800391c:	3384      	adds	r3, #132	; 0x84
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	4611      	mov	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	01d2      	lsls	r2, r2, #7
 800392a:	440a      	add	r2, r1
 800392c:	3284      	adds	r2, #132	; 0x84
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	4413      	add	r3, r2
 8003940:	3384      	adds	r3, #132	; 0x84
 8003942:	461a      	mov	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	01db      	lsls	r3, r3, #7
 8003970:	4413      	add	r3, r2
 8003972:	3384      	adds	r3, #132	; 0x84
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	01db      	lsls	r3, r3, #7
 8003980:	4413      	add	r3, r2
 8003982:	3384      	adds	r3, #132	; 0x84
 8003984:	461a      	mov	r2, r3
 8003986:	2300      	movs	r3, #0
 8003988:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003990:	461a      	mov	r2, r3
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	431a      	orrs	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	01db      	lsls	r3, r3, #7
 80039a4:	440b      	add	r3, r1
 80039a6:	3384      	adds	r3, #132	; 0x84
 80039a8:	4619      	mov	r1, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	4413      	add	r3, r2
 80039bc:	3384      	adds	r3, #132	; 0x84
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4611      	mov	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	01d2      	lsls	r2, r2, #7
 80039ca:	440a      	add	r2, r1
 80039cc:	3284      	adds	r2, #132	; 0x84
 80039ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	01db      	lsls	r3, r3, #7
 80039de:	4413      	add	r3, r2
 80039e0:	3384      	adds	r3, #132	; 0x84
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	01db      	lsls	r3, r3, #7
 80039f4:	4413      	add	r3, r2
 80039f6:	3384      	adds	r3, #132	; 0x84
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	4611      	mov	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	01d2      	lsls	r2, r2, #7
 8003a04:	440a      	add	r2, r1
 8003a06:	3284      	adds	r2, #132	; 0x84
 8003a08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a0c:	f023 0307 	bic.w	r3, r3, #7
 8003a10:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	6809      	ldr	r1, [r1, #0]
 8003a1e:	4608      	mov	r0, r1
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	01c9      	lsls	r1, r1, #7
 8003a24:	4401      	add	r1, r0
 8003a26:	3184      	adds	r1, #132	; 0x84
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	01db      	lsls	r3, r3, #7
 8003a36:	4413      	add	r3, r2
 8003a38:	3384      	adds	r3, #132	; 0x84
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	01db      	lsls	r3, r3, #7
 8003a46:	4413      	add	r3, r2
 8003a48:	3384      	adds	r3, #132	; 0x84
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	01db      	lsls	r3, r3, #7
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3384      	adds	r3, #132	; 0x84
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e01b      	b.n	8003aac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e014      	b.n	8003aac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d00b      	beq.n	8003aa2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d007      	beq.n	8003aa2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d003      	beq.n	8003aa2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a9e:	2b07      	cmp	r3, #7
 8003aa0:	d102      	bne.n	8003aa8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e001      	b.n	8003aac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	01db      	lsls	r3, r3, #7
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3384      	adds	r3, #132	; 0x84
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	01d2      	lsls	r2, r2, #7
 8003ac6:	440a      	add	r2, r1
 8003ac8:	3284      	adds	r2, #132	; 0x84
 8003aca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	041a      	lsls	r2, r3, #16
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1acb      	subs	r3, r1, r3
 8003ae6:	69f9      	ldr	r1, [r7, #28]
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	3303      	adds	r3, #3
 8003aee:	68f9      	ldr	r1, [r7, #12]
 8003af0:	6809      	ldr	r1, [r1, #0]
 8003af2:	4608      	mov	r0, r1
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	01c9      	lsls	r1, r1, #7
 8003af8:	4401      	add	r1, r0
 8003afa:	3184      	adds	r1, #132	; 0x84
 8003afc:	4313      	orrs	r3, r2
 8003afe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	01db      	lsls	r3, r3, #7
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3384      	adds	r3, #132	; 0x84
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	4611      	mov	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	01d2      	lsls	r2, r2, #7
 8003b1a:	440a      	add	r2, r1
 8003b1c:	3284      	adds	r2, #132	; 0x84
 8003b1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b22:	f023 0307 	bic.w	r3, r3, #7
 8003b26:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	01db      	lsls	r3, r3, #7
 8003b32:	4413      	add	r3, r2
 8003b34:	3384      	adds	r3, #132	; 0x84
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	01db      	lsls	r3, r3, #7
 8003b48:	4413      	add	r3, r2
 8003b4a:	3384      	adds	r3, #132	; 0x84
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	4611      	mov	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	01d2      	lsls	r2, r2, #7
 8003b58:	440a      	add	r2, r1
 8003b5a:	3284      	adds	r2, #132	; 0x84
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4a1f      	ldr	r2, [pc, #124]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7fe f9fc 	bl	8001f98 <HAL_GetTick>
 8003ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ba2:	e009      	b.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ba4:	f7fe f9f8 	bl	8001f98 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb2:	d901      	bls.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e01f      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bcc:	f7fe f9e4 	bl	8001f98 <HAL_GetTick>
 8003bd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bd2:	e009      	b.n	8003be8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bd4:	f7fe f9e0 	bl	8001f98 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be2:	d901      	bls.n	8003be8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e007      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	420e0040 	.word	0x420e0040
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	420e0044 	.word	0x420e0044

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e264      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d075      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2e:	4ba3      	ldr	r3, [pc, #652]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d00c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3a:	4ba0      	ldr	r3, [pc, #640]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d112      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4b9d      	ldr	r3, [pc, #628]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4b99      	ldr	r3, [pc, #612]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d05b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d157      	bne.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e23f      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x74>
 8003c76:	4b91      	ldr	r3, [pc, #580]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a90      	ldr	r2, [pc, #576]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x98>
 8003c8e:	4b8b      	ldr	r3, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a8a      	ldr	r2, [pc, #552]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a87      	ldr	r2, [pc, #540]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003ca8:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a83      	ldr	r2, [pc, #524]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b81      	ldr	r3, [pc, #516]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a80      	ldr	r2, [pc, #512]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f966 	bl	8001f98 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe f962 	bl	8001f98 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e204      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f952 	bl	8001f98 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe f94e 	bl	8001f98 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1f0      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b6c      	ldr	r3, [pc, #432]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d063      	beq.n	8003dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d26:	4b65      	ldr	r3, [pc, #404]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b62      	ldr	r3, [pc, #392]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1c4      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4952      	ldr	r1, [pc, #328]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e03a      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCC_OscConfig+0x2b0>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe f907 	bl	8001f98 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fe f903 	bl	8001f98 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1a5      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4940      	ldr	r1, [pc, #256]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
 8003dc0:	e015      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <HAL_RCC_OscConfig+0x2b0>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f8e6 	bl	8001f98 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7fe f8e2 	bl	8001f98 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e184      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d030      	beq.n	8003e5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_RCC_OscConfig+0x2b4>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fe f8c6 	bl	8001f98 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e10:	f7fe f8c2 	bl	8001f98 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e164      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x200>
 8003e2e:	e015      	b.n	8003e5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_OscConfig+0x2b4>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fe f8af 	bl	8001f98 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe f8ab 	bl	8001f98 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e14d      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a0 	beq.w	8003faa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x2b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d121      	bne.n	8003eea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_RCC_OscConfig+0x2b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <HAL_RCC_OscConfig+0x2b8>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb2:	f7fe f871 	bl	8001f98 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	e011      	b.n	8003ede <HAL_RCC_OscConfig+0x2ce>
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
 8003ec8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ecc:	f7fe f864 	bl	8001f98 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e106      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_RCC_OscConfig+0x4e4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2f0>
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a80      	ldr	r2, [pc, #512]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	e01c      	b.n	8003f3a <HAL_RCC_OscConfig+0x32a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d10c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x312>
 8003f08:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a77      	ldr	r2, [pc, #476]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	e00b      	b.n	8003f3a <HAL_RCC_OscConfig+0x32a>
 8003f22:	4b75      	ldr	r3, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a74      	ldr	r2, [pc, #464]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a71      	ldr	r2, [pc, #452]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d015      	beq.n	8003f6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe f829 	bl	8001f98 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe f825 	bl	8001f98 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0c5      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ee      	beq.n	8003f4a <HAL_RCC_OscConfig+0x33a>
 8003f6c:	e014      	b.n	8003f98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f813 	bl	8001f98 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe f80f 	bl	8001f98 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0af      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ee      	bne.n	8003f76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 809b 	beq.w	80040ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d05c      	beq.n	800407a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d141      	bne.n	800404c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fd ffe3 	bl	8001f98 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fd ffdf 	bl	8001f98 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e081      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	019b      	lsls	r3, r3, #6
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	3b01      	subs	r3, #1
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	4937      	ldr	r1, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd ffb8 	bl	8001f98 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd ffb4 	bl	8001f98 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e056      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b2e      	ldr	r3, [pc, #184]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x41c>
 800404a:	e04e      	b.n	80040ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fd ffa1 	bl	8001f98 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fd ff9d 	bl	8001f98 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e03f      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x44a>
 8004078:	e037      	b.n	80040ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e032      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_RCC_OscConfig+0x4e8>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d028      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d121      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d11a      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	3b01      	subs	r3, #1
 80040d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40007000 	.word	0x40007000
 80040f8:	40023800 	.word	0x40023800
 80040fc:	42470060 	.word	0x42470060

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cc      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d90c      	bls.n	800413c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800415e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d044      	beq.n	8004220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d003      	beq.n	80041be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e067      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4934      	ldr	r1, [pc, #208]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fd fed2 	bl	8001f98 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fd fece 	bl	8001f98 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d20c      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f821 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fd fc88 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00
 80042bc:	40023800 	.word	0x40023800
 80042c0:	0802e9c0 	.word	0x0802e9c0
 80042c4:	20000004 	.word	0x20000004
 80042c8:	20000008 	.word	0x20000008

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	b5b0      	push	{r4, r5, r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d2:	2100      	movs	r1, #0
 80042d4:	6079      	str	r1, [r7, #4]
 80042d6:	2100      	movs	r1, #0
 80042d8:	60f9      	str	r1, [r7, #12]
 80042da:	2100      	movs	r1, #0
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042de:	2100      	movs	r1, #0
 80042e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e2:	4952      	ldr	r1, [pc, #328]	; (800442c <HAL_RCC_GetSysClockFreq+0x160>)
 80042e4:	6889      	ldr	r1, [r1, #8]
 80042e6:	f001 010c 	and.w	r1, r1, #12
 80042ea:	2908      	cmp	r1, #8
 80042ec:	d00d      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0x3e>
 80042ee:	2908      	cmp	r1, #8
 80042f0:	f200 8094 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x150>
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d002      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0x32>
 80042f8:	2904      	cmp	r1, #4
 80042fa:	d003      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x38>
 80042fc:	e08e      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042fe:	4b4c      	ldr	r3, [pc, #304]	; (8004430 <HAL_RCC_GetSysClockFreq+0x164>)
 8004300:	60bb      	str	r3, [r7, #8]
       break;
 8004302:	e08e      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004304:	4b4b      	ldr	r3, [pc, #300]	; (8004434 <HAL_RCC_GetSysClockFreq+0x168>)
 8004306:	60bb      	str	r3, [r7, #8]
      break;
 8004308:	e08b      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430a:	4948      	ldr	r1, [pc, #288]	; (800442c <HAL_RCC_GetSysClockFreq+0x160>)
 800430c:	6849      	ldr	r1, [r1, #4]
 800430e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004312:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004314:	4945      	ldr	r1, [pc, #276]	; (800442c <HAL_RCC_GetSysClockFreq+0x160>)
 8004316:	6849      	ldr	r1, [r1, #4]
 8004318:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800431c:	2900      	cmp	r1, #0
 800431e:	d024      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004320:	4942      	ldr	r1, [pc, #264]	; (800442c <HAL_RCC_GetSysClockFreq+0x160>)
 8004322:	6849      	ldr	r1, [r1, #4]
 8004324:	0989      	lsrs	r1, r1, #6
 8004326:	4608      	mov	r0, r1
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004330:	f04f 0500 	mov.w	r5, #0
 8004334:	ea00 0204 	and.w	r2, r0, r4
 8004338:	ea01 0305 	and.w	r3, r1, r5
 800433c:	493d      	ldr	r1, [pc, #244]	; (8004434 <HAL_RCC_GetSysClockFreq+0x168>)
 800433e:	fb01 f003 	mul.w	r0, r1, r3
 8004342:	2100      	movs	r1, #0
 8004344:	fb01 f102 	mul.w	r1, r1, r2
 8004348:	1844      	adds	r4, r0, r1
 800434a:	493a      	ldr	r1, [pc, #232]	; (8004434 <HAL_RCC_GetSysClockFreq+0x168>)
 800434c:	fba2 0101 	umull	r0, r1, r2, r1
 8004350:	1863      	adds	r3, r4, r1
 8004352:	4619      	mov	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	461a      	mov	r2, r3
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	f7fb ffa8 	bl	80002b0 <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4613      	mov	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e04a      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436a:	4b30      	ldr	r3, [pc, #192]	; (800442c <HAL_RCC_GetSysClockFreq+0x160>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	461a      	mov	r2, r3
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	f240 10ff 	movw	r0, #511	; 0x1ff
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	ea02 0400 	and.w	r4, r2, r0
 8004382:	ea03 0501 	and.w	r5, r3, r1
 8004386:	4620      	mov	r0, r4
 8004388:	4629      	mov	r1, r5
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	014b      	lsls	r3, r1, #5
 8004394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004398:	0142      	lsls	r2, r0, #5
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	1b00      	subs	r0, r0, r4
 80043a0:	eb61 0105 	sbc.w	r1, r1, r5
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	018b      	lsls	r3, r1, #6
 80043ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043b2:	0182      	lsls	r2, r0, #6
 80043b4:	1a12      	subs	r2, r2, r0
 80043b6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ba:	f04f 0000 	mov.w	r0, #0
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	00d9      	lsls	r1, r3, #3
 80043c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c8:	00d0      	lsls	r0, r2, #3
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	1912      	adds	r2, r2, r4
 80043d0:	eb45 0303 	adc.w	r3, r5, r3
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	0299      	lsls	r1, r3, #10
 80043de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043e2:	0290      	lsls	r0, r2, #10
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	f7fb ff5c 	bl	80002b0 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCC_GetSysClockFreq+0x160>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	60bb      	str	r3, [r7, #8]
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <HAL_RCC_GetSysClockFreq+0x164>)
 800441e:	60bb      	str	r3, [r7, #8]
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	68bb      	ldr	r3, [r7, #8]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bdb0      	pop	{r4, r5, r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	00f42400 	.word	0x00f42400
 8004434:	017d7840 	.word	0x017d7840

08004438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_RCC_GetHCLKFreq+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004454:	f7ff fff0 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0a9b      	lsrs	r3, r3, #10
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4903      	ldr	r1, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	0802e9d0 	.word	0x0802e9d0

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800447c:	f7ff ffdc 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0b5b      	lsrs	r3, r3, #13
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK2Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	0802e9d0 	.word	0x0802e9d0

080044a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	220f      	movs	r2, #15
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0203 	and.w	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_GetClockConfig+0x5c>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <HAL_RCC_GetClockConfig+0x60>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	40023c00 	.word	0x40023c00

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d075      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004538:	4bad      	ldr	r3, [pc, #692]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453e:	f7fd fd2b 	bl	8001f98 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004546:	f7fd fd27 	bl	8001f98 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e18b      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004558:	4ba6      	ldr	r3, [pc, #664]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	019a      	lsls	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	071b      	lsls	r3, r3, #28
 800457c:	499d      	ldr	r1, [pc, #628]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004590:	4b98      	ldr	r3, [pc, #608]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	431a      	orrs	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	071b      	lsls	r3, r3, #28
 80045b0:	4990      	ldr	r1, [pc, #576]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045b8:	4b8e      	ldr	r3, [pc, #568]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045be:	f023 021f 	bic.w	r2, r3, #31
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	498a      	ldr	r1, [pc, #552]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	019a      	lsls	r2, r3, #6
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	061b      	lsls	r3, r3, #24
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4980      	ldr	r1, [pc, #512]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f8:	4b7d      	ldr	r3, [pc, #500]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fe:	f7fd fccb 	bl	8001f98 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004606:	f7fd fcc7 	bl	8001f98 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e12b      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004618:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004638:	2b00      	cmp	r3, #0
 800463a:	d079      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800463c:	4b6e      	ldr	r3, [pc, #440]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004642:	f7fd fca9 	bl	8001f98 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800464a:	f7fd fca5 	bl	8001f98 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e109      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800465c:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004668:	d0ef      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d020      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	0f1b      	lsrs	r3, r3, #28
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	019a      	lsls	r2, r3, #6
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	431a      	orrs	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	071b      	lsls	r3, r3, #28
 8004696:	4957      	ldr	r1, [pc, #348]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800469e:	4b55      	ldr	r3, [pc, #340]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	4950      	ldr	r1, [pc, #320]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046c4:	4b4b      	ldr	r3, [pc, #300]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	0e1b      	lsrs	r3, r3, #24
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	019a      	lsls	r2, r3, #6
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	061b      	lsls	r3, r3, #24
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	071b      	lsls	r3, r3, #28
 80046e4:	4943      	ldr	r1, [pc, #268]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	493e      	ldr	r1, [pc, #248]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004704:	2201      	movs	r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004708:	f7fd fc46 	bl	8001f98 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004710:	f7fd fc42 	bl	8001f98 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e0a6      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472e:	d1ef      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 808d 	beq.w	8004858 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a27      	ldr	r2, [pc, #156]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004766:	f7fd fc17 	bl	8001f98 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800476e:	f7fd fc13 	bl	8001f98 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e077      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004794:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d039      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d032      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047b4:	4b12      	ldr	r3, [pc, #72]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d11e      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047d2:	f7fd fbe1 	bl	8001f98 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	e014      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fd fbdd 	bl	8001f98 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d90b      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e03f      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80047f0:	42470068 	.word	0x42470068
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470070 	.word	0x42470070
 80047fc:	40007000 	.word	0x40007000
 8004800:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0e4      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800481c:	d10d      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800481e:	4b16      	ldr	r3, [pc, #88]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	4911      	ldr	r1, [pc, #68]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004840:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	4909      	ldr	r1, [pc, #36]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004854:	4313      	orrs	r3, r2
 8004856:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800486c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	424711e0 	.word	0x424711e0

08004880 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fc ff09 	bl	80016bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2203      	movs	r2, #3
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f814 	bl	80048e0 <HAL_SD_InitCard>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e00a      	b.n	80048d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b08e      	sub	sp, #56	; 0x38
 80048e4:	af04      	add	r7, sp, #16
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80048fc:	2376      	movs	r3, #118	; 0x76
 80048fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681d      	ldr	r5, [r3, #0]
 8004904:	466c      	mov	r4, sp
 8004906:	f107 0314 	add.w	r3, r7, #20
 800490a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800490e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004912:	f107 0308 	add.w	r3, r7, #8
 8004916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004918:	4628      	mov	r0, r5
 800491a:	f002 fe05 	bl	8007528 <SDIO_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e04c      	b.n	80049ca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_SD_InitCard+0xf4>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f002 fe3d 	bl	80075ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004940:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_SD_InitCard+0xf4>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 f804 	bl	8005954 <SD_PowerON>
 800494c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e02e      	b.n	80049ca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 ff25 	bl	80057bc <SD_InitCard>
 8004972:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e01b      	b.n	80049ca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800499a:	4618      	mov	r0, r3
 800499c:	f002 fea0 	bl	80076e0 <SDMMC_CmdBlockLength>
 80049a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <HAL_SD_InitCard+0xf8>)
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3728      	adds	r7, #40	; 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	422580a0 	.word	0x422580a0
 80049d8:	004005ff 	.word	0x004005ff

080049dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	; 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0c0      	b.n	8004b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 80b9 	bne.w	8004b84 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d907      	bls.n	8004a36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e0a7      	b.n	8004b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004a54:	f043 0302 	orr.w	r3, r3, #2
 8004a58:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a4c      	ldr	r2, [pc, #304]	; (8004b90 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a4b      	ldr	r2, [pc, #300]	; (8004b94 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004a68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2200      	movs	r2, #0
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3380      	adds	r3, #128	; 0x80
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	f7fd fc51 	bl	8002350 <HAL_DMA_Start_IT>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a33      	ldr	r2, [pc, #204]	; (8004b98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e050      	b.n	8004b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	; (8004b9c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d002      	beq.n	8004af8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	025b      	lsls	r3, r3, #9
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
 8004afc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	025b      	lsls	r3, r3, #9
 8004b02:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b04:	2390      	movs	r3, #144	; 0x90
 8004b06:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f107 0210 	add.w	r2, r7, #16
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 fdb2 	bl	8007688 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d90a      	bls.n	8004b40 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2282      	movs	r2, #130	; 0x82
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b36:	4618      	mov	r0, r3
 8004b38:	f002 fe16 	bl	8007768 <SDMMC_CmdReadMultiBlock>
 8004b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b3e:	e009      	b.n	8004b54 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2281      	movs	r2, #129	; 0x81
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f002 fde9 	bl	8007724 <SDMMC_CmdReadSingleBlock>
 8004b52:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	; (8004b98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e002      	b.n	8004b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	080055cb 	.word	0x080055cb
 8004b94:	0800563d 	.word	0x0800563d
 8004b98:	004005ff 	.word	0x004005ff
 8004b9c:	4225858c 	.word	0x4225858c

08004ba0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0c5      	b.n	8004d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f040 80be 	bne.w	8004d52 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d907      	bls.n	8004bfa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0ac      	b.n	8004d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	4a4d      	ldr	r2, [pc, #308]	; (8004d60 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004c2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	2200      	movs	r2, #0
 8004c34:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d002      	beq.n	8004c44 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	025b      	lsls	r3, r3, #9
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d90a      	bls.n	8004c60 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	22a0      	movs	r2, #160	; 0xa0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c56:	4618      	mov	r0, r3
 8004c58:	f002 fdca 	bl	80077f0 <SDMMC_CmdWriteMultiBlock>
 8004c5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c5e:	e009      	b.n	8004c74 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2290      	movs	r2, #144	; 0x90
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f002 fd9d 	bl	80077ac <SDMMC_CmdWriteSingleBlock>
 8004c72:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d012      	beq.n	8004ca0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e059      	b.n	8004d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004ca0:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	2240      	movs	r2, #64	; 0x40
 8004cac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3380      	adds	r3, #128	; 0x80
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	025b      	lsls	r3, r3, #9
 8004cdc:	089b      	lsrs	r3, r3, #2
 8004cde:	f7fd fb37 	bl	8002350 <HAL_DMA_Start_IT>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01c      	beq.n	8004d22 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004cf6:	f023 0302 	bic.w	r3, r3, #2
 8004cfa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e018      	b.n	8004d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	025b      	lsls	r3, r3, #9
 8004d2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d2e:	2390      	movs	r3, #144	; 0x90
 8004d30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f107 0210 	add.w	r2, r7, #16
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 fc9d 	bl	8007688 <SDIO_ConfigData>

      return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	; 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	080055a1 	.word	0x080055a1
 8004d60:	0800563d 	.word	0x0800563d
 8004d64:	004005ff 	.word	0x004005ff
 8004d68:	4225858c 	.word	0x4225858c

08004d6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_SD_IRQHandler+0x2e>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fffd 	bl	8005d92 <SD_Read_IT>
 8004d98:	e165      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 808f 	beq.w	8004ec8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004dc2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004dc6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d039      	beq.n	8004e56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_SD_IRQHandler+0x8a>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d011      	beq.n	8004e1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 fd1a 	bl	8007834 <SDMMC_CmdStopTransfer>
 8004e00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f92f 	bl	8005078 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <HAL_SD_IRQHandler+0xda>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f003 f996 	bl	8008178 <HAL_SD_RxCpltCallback>
 8004e4c:	e10b      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f003 f988 	bl	8008164 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e54:	e107      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8102 	beq.w	8005066 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f002 fcdf 	bl	8007834 <SDMMC_CmdStopTransfer>
 8004e76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8f4 	bl	8005078 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 80e5 	bne.w	8005066 <HAL_SD_IRQHandler+0x2fa>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 80df 	bne.w	8005066 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0208 	bic.w	r2, r2, #8
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f003 f94f 	bl	8008164 <HAL_SD_TxCpltCallback>
}
 8004ec6:	e0ce      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_SD_IRQHandler+0x17c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 ffa7 	bl	8005e34 <SD_Write_IT>
 8004ee6:	e0be      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eee:	f240 233a 	movw	r3, #570	; 0x23a
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80b6 	beq.w	8005066 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	f043 0202 	orr.w	r2, r3, #2
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	f043 0208 	orr.w	r2, r3, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	f043 0208 	orr.w	r2, r3, #8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f240 723a 	movw	r2, #1850	; 0x73a
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004f94:	f023 0302 	bic.w	r3, r3, #2
 8004f98:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f002 fc48 	bl	8007834 <SDMMC_CmdStopTransfer>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f855 	bl	8005078 <HAL_SD_ErrorCallback>
}
 8004fce:	e04a      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d045      	beq.n	8005066 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_SD_IRQHandler+0x282>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d011      	beq.n	8005012 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_SD_IRQHandler+0x304>)
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd fa00 	bl	8002400 <HAL_DMA_Abort_IT>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02f      	beq.n	8005066 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fb68 	bl	80056e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005010:	e029      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_SD_IRQHandler+0x2ba>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d011      	beq.n	800504a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <HAL_SD_IRQHandler+0x308>)
 800502c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd f9e4 	bl	8002400 <HAL_DMA_Abort_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d013      	beq.n	8005066 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb83 	bl	800574e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005048:	e00d      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f003 f876 	bl	8008150 <HAL_SD_AbortCallback>
}
 8005064:	e7ff      	b.n	8005066 <HAL_SD_IRQHandler+0x2fa>
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	080056e1 	.word	0x080056e1
 8005074:	0800574f 	.word	0x0800574f

08005078 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800509a:	0f9b      	lsrs	r3, r3, #30
 800509c:	b2da      	uxtb	r2, r3
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a6:	0e9b      	lsrs	r3, r3, #26
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b8:	0e1b      	lsrs	r3, r3, #24
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ec:	0d1b      	lsrs	r3, r3, #20
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	b2da      	uxtb	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510a:	0bdb      	lsrs	r3, r3, #15
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	b2da      	uxtb	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800511c:	0b9b      	lsrs	r3, r3, #14
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512e:	0b5b      	lsrs	r3, r3, #13
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	b2da      	uxtb	r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005140:	0b1b      	lsrs	r3, r3, #12
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	b2da      	uxtb	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	2b00      	cmp	r3, #0
 800515a:	d163      	bne.n	8005224 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005160:	009a      	lsls	r2, r3, #2
 8005162:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800516c:	0f92      	lsrs	r2, r2, #30
 800516e:	431a      	orrs	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005178:	0edb      	lsrs	r3, r3, #27
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	b2da      	uxtb	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518a:	0e1b      	lsrs	r3, r3, #24
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	b2da      	uxtb	r2, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519c:	0d5b      	lsrs	r3, r3, #21
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ae:	0c9b      	lsrs	r3, r3, #18
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c0:	0bdb      	lsrs	r3, r3, #15
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	7e1b      	ldrb	r3, [r3, #24]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	3302      	adds	r3, #2
 80051e4:	2201      	movs	r2, #1
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80051ee:	fb02 f203 	mul.w	r2, r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	7a1b      	ldrb	r3, [r3, #8]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	2201      	movs	r2, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005210:	0a52      	lsrs	r2, r2, #9
 8005212:	fb02 f203 	mul.w	r2, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005220:	661a      	str	r2, [r3, #96]	; 0x60
 8005222:	e031      	b.n	8005288 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11d      	bne.n	8005268 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	3301      	adds	r3, #1
 8005248:	029a      	lsls	r2, r3, #10
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	661a      	str	r2, [r3, #96]	; 0x60
 8005266:	e00f      	b.n	8005288 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a58      	ldr	r2, [pc, #352]	; (80053d0 <HAL_SD_GetCardCSD+0x344>)
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e09d      	b.n	80053c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528c:	0b9b      	lsrs	r3, r3, #14
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	b2da      	uxtb	r2, r3
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529e:	09db      	lsrs	r3, r3, #7
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	0fdb      	lsrs	r3, r3, #31
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	0f5b      	lsrs	r3, r3, #29
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	0e9b      	lsrs	r3, r3, #26
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	0d9b      	lsrs	r3, r3, #22
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	0d5b      	lsrs	r3, r3, #21
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	b2da      	uxtb	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	0bdb      	lsrs	r3, r3, #15
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	b2da      	uxtb	r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	0b9b      	lsrs	r3, r3, #14
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	0b5b      	lsrs	r3, r3, #13
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536e:	0b1b      	lsrs	r3, r3, #12
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	0a9b      	lsrs	r3, r3, #10
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	004005ff 	.word	0x004005ff

080053d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b08e      	sub	sp, #56	; 0x38
 8005430:	af04      	add	r7, sp, #16
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005448:	2b03      	cmp	r3, #3
 800544a:	d02e      	beq.n	80054aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	d106      	bne.n	8005462 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
 8005460:	e029      	b.n	80054b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d10a      	bne.n	8005480 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fb28 	bl	8005ac0 <SD_WideBus_Enable>
 8005470:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
 800547e:	e01a      	b.n	80054b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb65 	bl	8005b56 <SD_WideBus_Disable>
 800548c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
 800549a:	e00c      	b.n	80054b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
 80054a8:	e005      	b.n	80054b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a26      	ldr	r2, [pc, #152]	; (800555c <HAL_SD_ConfigWideBusOperation+0x130>)
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80054d4:	e01f      	b.n	8005516 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681d      	ldr	r5, [r3, #0]
 80054fc:	466c      	mov	r4, sp
 80054fe:	f107 0314 	add.w	r3, r7, #20
 8005502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005510:	4628      	mov	r0, r5
 8005512:	f002 f809 	bl	8007528 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551e:	4618      	mov	r0, r3
 8005520:	f002 f8de 	bl	80076e0 <SDMMC_CmdBlockLength>
 8005524:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00c      	beq.n	8005546 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800554e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005552:	4618      	mov	r0, r3
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bdb0      	pop	{r4, r5, r7, pc}
 800555a:	bf00      	nop
 800555c:	004005ff 	.word	0x004005ff

08005560 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800556c:	f107 030c 	add.w	r3, r7, #12
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa7c 	bl	8005a70 <SD_SendStatus>
 8005578:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0a5b      	lsrs	r3, r3, #9
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005596:	693b      	ldr	r3, [r7, #16]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	2b82      	cmp	r3, #130	; 0x82
 80055de:	d111      	bne.n	8005604 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f002 f925 	bl	8007834 <SDMMC_CmdStopTransfer>
 80055ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff fd3a 	bl	8005078 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0208 	bic.w	r2, r2, #8
 8005612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f240 523a 	movw	r2, #1338	; 0x53a
 800561c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f002 fda3 	bl	8008178 <HAL_SD_RxCpltCallback>
#endif
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fd f884 	bl	8002758 <HAL_DMA_GetError>
 8005650:	4603      	mov	r3, r0
 8005652:	2b02      	cmp	r3, #2
 8005654:	d03e      	beq.n	80056d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <SD_DMAError+0x36>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d12d      	bne.n	80056ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a19      	ldr	r2, [pc, #100]	; (80056dc <SD_DMAError+0xa0>)
 8005678:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005688:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f7ff ff62 	bl	8005560 <HAL_SD_GetCardState>
 800569c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b06      	cmp	r3, #6
 80056a2:	d002      	beq.n	80056aa <SD_DMAError+0x6e>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d10a      	bne.n	80056c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f002 f8c0 	bl	8007834 <SDMMC_CmdStopTransfer>
 80056b4:	4602      	mov	r2, r0
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	431a      	orrs	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f7ff fcd2 	bl	8005078 <HAL_SD_ErrorCallback>
#endif
  }
}
 80056d4:	bf00      	nop
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	004005ff 	.word	0x004005ff

080056e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff31 	bl	8005560 <HAL_SD_GetCardState>
 80056fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d002      	beq.n	800571a <SD_DMATxAbort+0x3a>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b05      	cmp	r3, #5
 8005718:	d10a      	bne.n	8005730 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f002 f888 	bl	8007834 <SDMMC_CmdStopTransfer>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f002 fd09 	bl	8008150 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800573e:	e002      	b.n	8005746 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff fc99 	bl	8005078 <HAL_SD_ErrorCallback>
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f240 523a 	movw	r2, #1338	; 0x53a
 8005764:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff fefa 	bl	8005560 <HAL_SD_GetCardState>
 800576c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b06      	cmp	r3, #6
 8005780:	d002      	beq.n	8005788 <SD_DMARxAbort+0x3a>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b05      	cmp	r3, #5
 8005786:	d10a      	bne.n	800579e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4618      	mov	r0, r3
 800578e:	f002 f851 	bl	8007834 <SDMMC_CmdStopTransfer>
 8005792:	4602      	mov	r2, r0
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f002 fcd2 	bl	8008150 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80057ac:	e002      	b.n	80057b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fc62 	bl	8005078 <HAL_SD_ErrorCallback>
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057bc:	b5b0      	push	{r4, r5, r7, lr}
 80057be:	b094      	sub	sp, #80	; 0x50
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80057c4:	2301      	movs	r3, #1
 80057c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 ff03 	bl	80075d8 <SDIO_GetPowerState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80057dc:	e0b6      	b.n	800594c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d02f      	beq.n	8005846 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f002 f92c 	bl	8007a48 <SDMMC_CmdSendCID>
 80057f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <SD_InitCard+0x40>
    {
      return errorstate;
 80057f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fa:	e0a7      	b.n	800594c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 ff2d 	bl	8007662 <SDIO_GetResponse>
 8005808:	4602      	mov	r2, r0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2104      	movs	r1, #4
 8005814:	4618      	mov	r0, r3
 8005816:	f001 ff24 	bl	8007662 <SDIO_GetResponse>
 800581a:	4602      	mov	r2, r0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2108      	movs	r1, #8
 8005826:	4618      	mov	r0, r3
 8005828:	f001 ff1b 	bl	8007662 <SDIO_GetResponse>
 800582c:	4602      	mov	r2, r0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	210c      	movs	r1, #12
 8005838:	4618      	mov	r0, r3
 800583a:	f001 ff12 	bl	8007662 <SDIO_GetResponse>
 800583e:	4602      	mov	r2, r0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	2b03      	cmp	r3, #3
 800584c:	d00d      	beq.n	800586a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f107 020e 	add.w	r2, r7, #14
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f002 f932 	bl	8007ac2 <SDMMC_CmdSetRelAdd>
 800585e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <SD_InitCard+0xae>
    {
      return errorstate;
 8005866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005868:	e070      	b.n	800594c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	2b03      	cmp	r3, #3
 8005870:	d036      	beq.n	80058e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f002 f8fc 	bl	8007a84 <SDMMC_CmdSendCSD>
 800588c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800588e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	e059      	b.n	800594c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fedf 	bl	8007662 <SDIO_GetResponse>
 80058a4:	4602      	mov	r2, r0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2104      	movs	r1, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fed6 	bl	8007662 <SDIO_GetResponse>
 80058b6:	4602      	mov	r2, r0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2108      	movs	r1, #8
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fecd 	bl	8007662 <SDIO_GetResponse>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	210c      	movs	r1, #12
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fec4 	bl	8007662 <SDIO_GetResponse>
 80058da:	4602      	mov	r2, r0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2104      	movs	r1, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 febb 	bl	8007662 <SDIO_GetResponse>
 80058ec:	4603      	mov	r3, r0
 80058ee:	0d1a      	lsrs	r2, r3, #20
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fbc6 	bl	800508c <HAL_SD_GetCardCSD>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800590a:	e01f      	b.n	800594c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	461a      	mov	r2, r3
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	4608      	mov	r0, r1
 800591e:	f001 ffab 	bl	8007878 <SDMMC_CmdSelDesel>
 8005922:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <SD_InitCard+0x172>
  {
    return errorstate;
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	e00e      	b.n	800594c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	466c      	mov	r4, sp
 8005936:	f103 0210 	add.w	r2, r3, #16
 800593a:	ca07      	ldmia	r2, {r0, r1, r2}
 800593c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005940:	3304      	adds	r3, #4
 8005942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005944:	4628      	mov	r0, r5
 8005946:	f001 fdef 	bl	8007528 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3740      	adds	r7, #64	; 0x40
 8005950:	46bd      	mov	sp, r7
 8005952:	bdb0      	pop	{r4, r5, r7, pc}

08005954 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f001 ffa6 	bl	80078be <SDMMC_CmdGoIdleState>
 8005972:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <SD_PowerON+0x2a>
  {
    return errorstate;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	e072      	b.n	8005a64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f001 ffb9 	bl	80078fa <SDMMC_CmdOperCond>
 8005988:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00d      	beq.n	80059ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f001 ff8f 	bl	80078be <SDMMC_CmdGoIdleState>
 80059a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	e05b      	b.n	8005a64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d137      	bne.n	8005a2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 ffb9 	bl	8007938 <SDMMC_CmdAppCommand>
 80059c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02d      	beq.n	8005a2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059d2:	e047      	b.n	8005a64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 ffac 	bl	8007938 <SDMMC_CmdAppCommand>
 80059e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <SD_PowerON+0x98>
    {
      return errorstate;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	e03b      	b.n	8005a64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	491e      	ldr	r1, [pc, #120]	; (8005a6c <SD_PowerON+0x118>)
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 ffc2 	bl	800797c <SDMMC_CmdAppOperCommand>
 80059f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a04:	e02e      	b.n	8005a64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 fe28 	bl	8007662 <SDIO_GetResponse>
 8005a12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	0fdb      	lsrs	r3, r3, #31
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <SD_PowerON+0xcc>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <SD_PowerON+0xce>
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]

    count++;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d802      	bhi.n	8005a3a <SD_PowerON+0xe6>
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0cc      	beq.n	80059d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d902      	bls.n	8005a4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a48:	e00c      	b.n	8005a64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
 8005a5a:	e002      	b.n	8005a62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	c1100000 	.word	0xc1100000

08005a70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a84:	e018      	b.n	8005ab8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f002 f836 	bl	8007b04 <SDMMC_CmdSendStatus>
 8005a98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	e009      	b.n	8005ab8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fdd9 	bl	8007662 <SDIO_GetResponse>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 fdc3 	bl	8007662 <SDIO_GetResponse>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae6:	d102      	bne.n	8005aee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005aec:	e02f      	b.n	8005b4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f879 	bl	8005bec <SD_FindSCR>
 8005afa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	e023      	b.n	8005b4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01c      	beq.n	8005b4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	041b      	lsls	r3, r3, #16
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f001 ff0b 	bl	8007938 <SDMMC_CmdAppCommand>
 8005b22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	e00f      	b.n	8005b4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 ff44 	bl	80079c2 <SDMMC_CmdBusWidth>
 8005b3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	e003      	b.n	8005b4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e001      	b.n	8005b4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	2300      	movs	r3, #0
 8005b64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fd78 	bl	8007662 <SDIO_GetResponse>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b7c:	d102      	bne.n	8005b84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b82:	e02f      	b.n	8005be4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f82e 	bl	8005bec <SD_FindSCR>
 8005b90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	e023      	b.n	8005be4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01c      	beq.n	8005be0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f001 fec0 	bl	8007938 <SDMMC_CmdAppCommand>
 8005bb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	e00f      	b.n	8005be4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fef9 	bl	80079c2 <SDMMC_CmdBusWidth>
 8005bd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	e003      	b.n	8005be4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e001      	b.n	8005be4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005be0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b08f      	sub	sp, #60	; 0x3c
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005bf6:	f7fc f9cf 	bl	8001f98 <HAL_GetTick>
 8005bfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005c00:	2300      	movs	r3, #0
 8005c02:	60bb      	str	r3, [r7, #8]
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2108      	movs	r1, #8
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fd64 	bl	80076e0 <SDMMC_CmdBlockLength>
 8005c18:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	e0b2      	b.n	8005d8a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2c:	041b      	lsls	r3, r3, #16
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f001 fe81 	bl	8007938 <SDMMC_CmdAppCommand>
 8005c36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	e0a3      	b.n	8005d8a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005c48:	2308      	movs	r3, #8
 8005c4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005c4c:	2330      	movs	r3, #48	; 0x30
 8005c4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005c50:	2302      	movs	r3, #2
 8005c52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f107 0210 	add.w	r2, r7, #16
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fd0e 	bl	8007688 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 fec8 	bl	8007a06 <SDMMC_CmdSendSCR>
 8005c76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d02a      	beq.n	8005cd4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	e083      	b.n	8005d8a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00f      	beq.n	8005cb0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	f107 0208 	add.w	r2, r7, #8
 8005c9c:	18d4      	adds	r4, r2, r3
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	f001 fc6d 	bl	800757e <SDIO_ReadFIFO>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	6023      	str	r3, [r4, #0]
      index++;
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	3301      	adds	r3, #1
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
 8005cae:	e006      	b.n	8005cbe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d012      	beq.n	8005ce4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005cbe:	f7fc f96b 	bl	8001f98 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d102      	bne.n	8005cd4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cd2:	e05a      	b.n	8005d8a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0cf      	beq.n	8005c82 <SD_FindSCR+0x96>
 8005ce2:	e000      	b.n	8005ce6 <SD_FindSCR+0xfa>
      break;
 8005ce4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	e044      	b.n	8005d8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2202      	movs	r2, #2
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d16:	2302      	movs	r3, #2
 8005d18:	e037      	b.n	8005d8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005d30:	2320      	movs	r3, #32
 8005d32:	e02a      	b.n	8005d8a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	061a      	lsls	r2, r3, #24
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	0e1b      	lsrs	r3, r3, #24
 8005d5a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	601a      	str	r2, [r3, #0]
    scr++;
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	3304      	adds	r3, #4
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	061a      	lsls	r2, r3, #24
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	0e1b      	lsrs	r3, r3, #24
 8005d82:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	373c      	adds	r7, #60	; 0x3c
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd90      	pop	{r4, r7, pc}

08005d92 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03f      	beq.n	8005e2c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e033      	b.n	8005e1a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fbe1 	bl	800757e <SDIO_ReadFIFO>
 8005dbc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0e1b      	lsrs	r3, r3, #24
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	d9c8      	bls.n	8005db2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d043      	beq.n	8005ed6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e037      	b.n	8005ec4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3301      	adds	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	041a      	lsls	r2, r3, #16
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	061a      	lsls	r2, r3, #24
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f107 0208 	add.w	r2, r7, #8
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fb6d 	bl	8007598 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b07      	cmp	r3, #7
 8005ec8:	d9c4      	bls.n	8005e54 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e025      	b.n	8005f3e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb fe4e 	bl	8001ba8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f001 f9d4 	bl	80072cc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	f001 fa3f 	bl	80073b2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10a      	bne.n	8005f72 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f80c 	bl	8005f7a <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	615a      	str	r2, [r3, #20]
  }
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d101      	bne.n	8005faa <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e018      	b.n	8005fdc <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fa78 	bl	80074b0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d104      	bne.n	8005fd2 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2205      	movs	r2, #5
 8005fcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005fd0:	e003      	b.n	8005fda <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e07b      	b.n	80060ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d108      	bne.n	8006010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006006:	d009      	beq.n	800601c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	61da      	str	r2, [r3, #28]
 800600e:	e005      	b.n	800601c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb fc30 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	ea42 0103 	orr.w	r1, r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	f003 0104 	and.w	r1, r3, #4
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0210 	and.w	r2, r3, #16
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e041      	b.n	800618c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f839 	bl	8006194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 fbad 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e04e      	b.n	800625e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a23      	ldr	r2, [pc, #140]	; (800626c <HAL_TIM_Base_Start_IT+0xc4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ea:	d01d      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_TIM_Base_Start_IT+0xc8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <HAL_TIM_Base_Start_IT+0xcc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_TIM_Base_Start_IT+0xd0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	; (800627c <HAL_TIM_Base_Start_IT+0xd4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_TIM_Base_Start_IT+0xd8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_TIM_Base_Start_IT+0xdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d010      	beq.n	800625c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e007      	b.n	800625c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40001800 	.word	0x40001800

08006288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e041      	b.n	800631e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb fb3c 	bl	800192c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 fae4 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_TIM_PWM_Start+0x24>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e022      	b.n	8006392 <HAL_TIM_PWM_Start+0x6a>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d109      	bne.n	8006366 <HAL_TIM_PWM_Start+0x3e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	e015      	b.n	8006392 <HAL_TIM_PWM_Start+0x6a>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start+0x58>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e008      	b.n	8006392 <HAL_TIM_PWM_Start+0x6a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07c      	b.n	8006494 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <HAL_TIM_PWM_Start+0x82>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a8:	e013      	b.n	80063d2 <HAL_TIM_PWM_Start+0xaa>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start+0x92>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b8:	e00b      	b.n	80063d2 <HAL_TIM_PWM_Start+0xaa>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d104      	bne.n	80063ca <HAL_TIM_PWM_Start+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c8:	e003      	b.n	80063d2 <HAL_TIM_PWM_Start+0xaa>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2201      	movs	r2, #1
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fcaa 	bl	8006d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a2d      	ldr	r2, [pc, #180]	; (800649c <HAL_TIM_PWM_Start+0x174>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIM_PWM_Start+0xcc>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <HAL_TIM_PWM_Start+0x178>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_PWM_Start+0xd0>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <HAL_TIM_PWM_Start+0xd2>
 80063f8:	2300      	movs	r3, #0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800640c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a22      	ldr	r2, [pc, #136]	; (800649c <HAL_TIM_PWM_Start+0x174>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006420:	d01d      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_TIM_PWM_Start+0x17c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <HAL_TIM_PWM_Start+0x180>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_TIM_PWM_Start+0x184>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <HAL_TIM_PWM_Start+0x178>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a18      	ldr	r2, [pc, #96]	; (80064b0 <HAL_TIM_PWM_Start+0x188>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_TIM_PWM_Start+0x136>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a16      	ldr	r2, [pc, #88]	; (80064b4 <HAL_TIM_PWM_Start+0x18c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b06      	cmp	r3, #6
 800646e:	d010      	beq.n	8006492 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006480:	e007      	b.n	8006492 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40001800 	.word	0x40001800

080064b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d122      	bne.n	8006514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d11b      	bne.n	8006514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0202 	mvn.w	r2, #2
 80064e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9ac 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f99e 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9af 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b04      	cmp	r3, #4
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b04      	cmp	r3, #4
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0204 	mvn.w	r2, #4
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f982 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f974 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f985 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b08      	cmp	r3, #8
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0208 	mvn.w	r2, #8
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2204      	movs	r2, #4
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f958 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f94a 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f95b 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b10      	cmp	r3, #16
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0210 	mvn.w	r2, #16
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2208      	movs	r2, #8
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f92e 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f920 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f931 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d10e      	bne.n	800663c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0201 	mvn.w	r2, #1
 8006634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fa fe04 	bl	8001244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d10e      	bne.n	8006668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006654:	2b80      	cmp	r3, #128	; 0x80
 8006656:	d107      	bne.n	8006668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fc12 	bl	8006e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d10e      	bne.n	8006694 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d107      	bne.n	8006694 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800668c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8f6 	bl	8006880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d10e      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d107      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0220 	mvn.w	r2, #32
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fbdc 	bl	8006e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066de:	2302      	movs	r3, #2
 80066e0:	e0ac      	b.n	800683c <HAL_TIM_PWM_ConfigChannel+0x174>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	f200 809f 	bhi.w	8006830 <HAL_TIM_PWM_ConfigChannel+0x168>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	0800672d 	.word	0x0800672d
 80066fc:	08006831 	.word	0x08006831
 8006700:	08006831 	.word	0x08006831
 8006704:	08006831 	.word	0x08006831
 8006708:	0800676d 	.word	0x0800676d
 800670c:	08006831 	.word	0x08006831
 8006710:	08006831 	.word	0x08006831
 8006714:	08006831 	.word	0x08006831
 8006718:	080067af 	.word	0x080067af
 800671c:	08006831 	.word	0x08006831
 8006720:	08006831 	.word	0x08006831
 8006724:	08006831 	.word	0x08006831
 8006728:	080067ef 	.word	0x080067ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f94e 	bl	80069d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0208 	orr.w	r2, r2, #8
 8006746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0204 	bic.w	r2, r2, #4
 8006756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	619a      	str	r2, [r3, #24]
      break;
 800676a:	e062      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f99e 	bl	8006ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6999      	ldr	r1, [r3, #24]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	619a      	str	r2, [r3, #24]
      break;
 80067ac:	e041      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f9f3 	bl	8006ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0208 	orr.w	r2, r2, #8
 80067c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0204 	bic.w	r2, r2, #4
 80067d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	61da      	str	r2, [r3, #28]
      break;
 80067ec:	e021      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fa47 	bl	8006c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69d9      	ldr	r1, [r3, #28]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	021a      	lsls	r2, r3, #8
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	61da      	str	r2, [r3, #28]
      break;
 800682e:	e000      	b.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3c      	ldr	r2, [pc, #240]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3b      	ldr	r2, [pc, #236]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3a      	ldr	r2, [pc, #232]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d108      	bne.n	80068e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2f      	ldr	r2, [pc, #188]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d027      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d023      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a29      	ldr	r2, [pc, #164]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d017      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a28      	ldr	r2, [pc, #160]	; (80069bc <TIM_Base_SetConfig+0x128>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_Base_SetConfig+0x130>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0x134>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a24      	ldr	r2, [pc, #144]	; (80069cc <TIM_Base_SetConfig+0x138>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <TIM_Base_SetConfig+0x13c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_Base_SetConfig+0xf8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d103      	bne.n	8006994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	615a      	str	r2, [r3, #20]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800
 80069c8:	40001800 	.word	0x40001800
 80069cc:	40001c00 	.word	0x40001c00
 80069d0:	40002000 	.word	0x40002000

080069d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0302 	bic.w	r3, r3, #2
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a20      	ldr	r2, [pc, #128]	; (8006aac <TIM_OC1_SetConfig+0xd8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC1_SetConfig+0x64>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a1f      	ldr	r2, [pc, #124]	; (8006ab0 <TIM_OC1_SetConfig+0xdc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d10c      	bne.n	8006a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 0308 	bic.w	r3, r3, #8
 8006a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 0304 	bic.w	r3, r3, #4
 8006a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a15      	ldr	r2, [pc, #84]	; (8006aac <TIM_OC1_SetConfig+0xd8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_OC1_SetConfig+0x8e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <TIM_OC1_SetConfig+0xdc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40010400 	.word	0x40010400

08006ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0210 	bic.w	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0320 	bic.w	r3, r3, #32
 8006afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <TIM_OC2_SetConfig+0xe4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC2_SetConfig+0x68>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a21      	ldr	r2, [pc, #132]	; (8006b9c <TIM_OC2_SetConfig+0xe8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10d      	bne.n	8006b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <TIM_OC2_SetConfig+0xe4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC2_SetConfig+0x94>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <TIM_OC2_SetConfig+0xe8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d113      	bne.n	8006b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400

08006ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <TIM_OC3_SetConfig+0xe0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <TIM_OC3_SetConfig+0x66>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <TIM_OC3_SetConfig+0xe4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10d      	bne.n	8006c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <TIM_OC3_SetConfig+0xe0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_OC3_SetConfig+0x92>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <TIM_OC3_SetConfig+0xe4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d113      	bne.n	8006c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	621a      	str	r2, [r3, #32]
}
 8006c74:	bf00      	nop
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40010400 	.word	0x40010400

08006c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	031b      	lsls	r3, r3, #12
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <TIM_OC4_SetConfig+0xa4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC4_SetConfig+0x68>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a11      	ldr	r2, [pc, #68]	; (8006d30 <TIM_OC4_SetConfig+0xa8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d109      	bne.n	8006d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	019b      	lsls	r3, r3, #6
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40010400 	.word	0x40010400

08006d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2201      	movs	r2, #1
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1a      	ldr	r2, [r3, #32]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	401a      	ands	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e05a      	b.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de4:	d01d      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d10c      	bne.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40001800 	.word	0x40001800

08006e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e03f      	b.n	8006f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fa fd8c 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2224      	movs	r2, #36	; 0x24
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f829 	bl	8006f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	b09f      	sub	sp, #124	; 0x7c
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f52:	68d9      	ldr	r1, [r3, #12]
 8006f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	ea40 0301 	orr.w	r3, r0, r1
 8006f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	431a      	orrs	r2, r3
 8006f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f80:	f021 010c 	bic.w	r1, r1, #12
 8006f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9a:	6999      	ldr	r1, [r3, #24]
 8006f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	ea40 0301 	orr.w	r3, r0, r1
 8006fa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4bc5      	ldr	r3, [pc, #788]	; (80072c0 <UART_SetConfig+0x384>)
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d004      	beq.n	8006fba <UART_SetConfig+0x7e>
 8006fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4bc3      	ldr	r3, [pc, #780]	; (80072c4 <UART_SetConfig+0x388>)
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d103      	bne.n	8006fc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fba:	f7fd fa5d 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8006fbe:	6778      	str	r0, [r7, #116]	; 0x74
 8006fc0:	e002      	b.n	8006fc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fd fa45 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd0:	f040 80b6 	bne.w	8007140 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd6:	461c      	mov	r4, r3
 8006fd8:	f04f 0500 	mov.w	r5, #0
 8006fdc:	4622      	mov	r2, r4
 8006fde:	462b      	mov	r3, r5
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	6439      	str	r1, [r7, #64]	; 0x40
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fec:	1912      	adds	r2, r2, r4
 8006fee:	eb45 0303 	adc.w	r3, r5, r3
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	00d9      	lsls	r1, r3, #3
 8006ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007000:	00d0      	lsls	r0, r2, #3
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	1911      	adds	r1, r2, r4
 8007008:	6639      	str	r1, [r7, #96]	; 0x60
 800700a:	416b      	adcs	r3, r5
 800700c:	667b      	str	r3, [r7, #100]	; 0x64
 800700e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	461a      	mov	r2, r3
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	1891      	adds	r1, r2, r2
 800701a:	63b9      	str	r1, [r7, #56]	; 0x38
 800701c:	415b      	adcs	r3, r3
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007024:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007028:	f7f9 f942 	bl	80002b0 <__aeabi_uldivmod>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4ba5      	ldr	r3, [pc, #660]	; (80072c8 <UART_SetConfig+0x38c>)
 8007032:	fba3 2302 	umull	r2, r3, r3, r2
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	011e      	lsls	r6, r3, #4
 800703a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703c:	461c      	mov	r4, r3
 800703e:	f04f 0500 	mov.w	r5, #0
 8007042:	4622      	mov	r2, r4
 8007044:	462b      	mov	r3, r5
 8007046:	1891      	adds	r1, r2, r2
 8007048:	6339      	str	r1, [r7, #48]	; 0x30
 800704a:	415b      	adcs	r3, r3
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
 800704e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007052:	1912      	adds	r2, r2, r4
 8007054:	eb45 0303 	adc.w	r3, r5, r3
 8007058:	f04f 0000 	mov.w	r0, #0
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	00d9      	lsls	r1, r3, #3
 8007062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007066:	00d0      	lsls	r0, r2, #3
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	1911      	adds	r1, r2, r4
 800706e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007070:	416b      	adcs	r3, r5
 8007072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	461a      	mov	r2, r3
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	1891      	adds	r1, r2, r2
 8007080:	62b9      	str	r1, [r7, #40]	; 0x28
 8007082:	415b      	adcs	r3, r3
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800708a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800708e:	f7f9 f90f 	bl	80002b0 <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4b8c      	ldr	r3, [pc, #560]	; (80072c8 <UART_SetConfig+0x38c>)
 8007098:	fba3 1302 	umull	r1, r3, r3, r2
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	2164      	movs	r1, #100	; 0x64
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	3332      	adds	r3, #50	; 0x32
 80070aa:	4a87      	ldr	r2, [pc, #540]	; (80072c8 <UART_SetConfig+0x38c>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070b8:	441e      	add	r6, r3
 80070ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070bc:	4618      	mov	r0, r3
 80070be:	f04f 0100 	mov.w	r1, #0
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	1894      	adds	r4, r2, r2
 80070c8:	623c      	str	r4, [r7, #32]
 80070ca:	415b      	adcs	r3, r3
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
 80070ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070d2:	1812      	adds	r2, r2, r0
 80070d4:	eb41 0303 	adc.w	r3, r1, r3
 80070d8:	f04f 0400 	mov.w	r4, #0
 80070dc:	f04f 0500 	mov.w	r5, #0
 80070e0:	00dd      	lsls	r5, r3, #3
 80070e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070e6:	00d4      	lsls	r4, r2, #3
 80070e8:	4622      	mov	r2, r4
 80070ea:	462b      	mov	r3, r5
 80070ec:	1814      	adds	r4, r2, r0
 80070ee:	653c      	str	r4, [r7, #80]	; 0x50
 80070f0:	414b      	adcs	r3, r1
 80070f2:	657b      	str	r3, [r7, #84]	; 0x54
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	461a      	mov	r2, r3
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	1891      	adds	r1, r2, r2
 8007100:	61b9      	str	r1, [r7, #24]
 8007102:	415b      	adcs	r3, r3
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800710a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800710e:	f7f9 f8cf 	bl	80002b0 <__aeabi_uldivmod>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <UART_SetConfig+0x38c>)
 8007118:	fba3 1302 	umull	r1, r3, r3, r2
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	2164      	movs	r1, #100	; 0x64
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	3332      	adds	r3, #50	; 0x32
 800712a:	4a67      	ldr	r2, [pc, #412]	; (80072c8 <UART_SetConfig+0x38c>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f003 0207 	and.w	r2, r3, #7
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4432      	add	r2, r6
 800713c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800713e:	e0b9      	b.n	80072b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007142:	461c      	mov	r4, r3
 8007144:	f04f 0500 	mov.w	r5, #0
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	1891      	adds	r1, r2, r2
 800714e:	6139      	str	r1, [r7, #16]
 8007150:	415b      	adcs	r3, r3
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007158:	1912      	adds	r2, r2, r4
 800715a:	eb45 0303 	adc.w	r3, r5, r3
 800715e:	f04f 0000 	mov.w	r0, #0
 8007162:	f04f 0100 	mov.w	r1, #0
 8007166:	00d9      	lsls	r1, r3, #3
 8007168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800716c:	00d0      	lsls	r0, r2, #3
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	eb12 0804 	adds.w	r8, r2, r4
 8007176:	eb43 0905 	adc.w	r9, r3, r5
 800717a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4618      	mov	r0, r3
 8007180:	f04f 0100 	mov.w	r1, #0
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	008b      	lsls	r3, r1, #2
 800718e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007192:	0082      	lsls	r2, r0, #2
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	f7f9 f88a 	bl	80002b0 <__aeabi_uldivmod>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4b49      	ldr	r3, [pc, #292]	; (80072c8 <UART_SetConfig+0x38c>)
 80071a2:	fba3 2302 	umull	r2, r3, r3, r2
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	011e      	lsls	r6, r3, #4
 80071aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ac:	4618      	mov	r0, r3
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	1894      	adds	r4, r2, r2
 80071b8:	60bc      	str	r4, [r7, #8]
 80071ba:	415b      	adcs	r3, r3
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c2:	1812      	adds	r2, r2, r0
 80071c4:	eb41 0303 	adc.w	r3, r1, r3
 80071c8:	f04f 0400 	mov.w	r4, #0
 80071cc:	f04f 0500 	mov.w	r5, #0
 80071d0:	00dd      	lsls	r5, r3, #3
 80071d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071d6:	00d4      	lsls	r4, r2, #3
 80071d8:	4622      	mov	r2, r4
 80071da:	462b      	mov	r3, r5
 80071dc:	1814      	adds	r4, r2, r0
 80071de:	64bc      	str	r4, [r7, #72]	; 0x48
 80071e0:	414b      	adcs	r3, r1
 80071e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f04f 0100 	mov.w	r1, #0
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	008b      	lsls	r3, r1, #2
 80071f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071fc:	0082      	lsls	r2, r0, #2
 80071fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007202:	f7f9 f855 	bl	80002b0 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4b2f      	ldr	r3, [pc, #188]	; (80072c8 <UART_SetConfig+0x38c>)
 800720c:	fba3 1302 	umull	r1, r3, r3, r2
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	2164      	movs	r1, #100	; 0x64
 8007214:	fb01 f303 	mul.w	r3, r1, r3
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	3332      	adds	r3, #50	; 0x32
 800721e:	4a2a      	ldr	r2, [pc, #168]	; (80072c8 <UART_SetConfig+0x38c>)
 8007220:	fba2 2303 	umull	r2, r3, r2, r3
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800722a:	441e      	add	r6, r3
 800722c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722e:	4618      	mov	r0, r3
 8007230:	f04f 0100 	mov.w	r1, #0
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	1894      	adds	r4, r2, r2
 800723a:	603c      	str	r4, [r7, #0]
 800723c:	415b      	adcs	r3, r3
 800723e:	607b      	str	r3, [r7, #4]
 8007240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007244:	1812      	adds	r2, r2, r0
 8007246:	eb41 0303 	adc.w	r3, r1, r3
 800724a:	f04f 0400 	mov.w	r4, #0
 800724e:	f04f 0500 	mov.w	r5, #0
 8007252:	00dd      	lsls	r5, r3, #3
 8007254:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007258:	00d4      	lsls	r4, r2, #3
 800725a:	4622      	mov	r2, r4
 800725c:	462b      	mov	r3, r5
 800725e:	eb12 0a00 	adds.w	sl, r2, r0
 8007262:	eb43 0b01 	adc.w	fp, r3, r1
 8007266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	f04f 0100 	mov.w	r1, #0
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	008b      	lsls	r3, r1, #2
 800727a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800727e:	0082      	lsls	r2, r0, #2
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 f814 	bl	80002b0 <__aeabi_uldivmod>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <UART_SetConfig+0x38c>)
 800728e:	fba3 1302 	umull	r1, r3, r3, r2
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2164      	movs	r1, #100	; 0x64
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	3332      	adds	r3, #50	; 0x32
 80072a0:	4a09      	ldr	r2, [pc, #36]	; (80072c8 <UART_SetConfig+0x38c>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	f003 020f 	and.w	r2, r3, #15
 80072ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4432      	add	r2, r6
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	377c      	adds	r7, #124	; 0x7c
 80072b8:	46bd      	mov	sp, r7
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	bf00      	nop
 80072c0:	40011000 	.word	0x40011000
 80072c4:	40011400 	.word	0x40011400
 80072c8:	51eb851f 	.word	0x51eb851f

080072cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d029      	beq.n	800733a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072f6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007300:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007306:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800730c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007312:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007318:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800731e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007324:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800732a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e034      	b.n	80073a4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007346:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007350:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007356:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800736a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800736e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007378:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800737e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007384:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800738a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007390:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b087      	sub	sp, #28
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d02e      	beq.n	800742a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80073d8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80073e8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80073f2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80073fc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	3b01      	subs	r3, #1
 8007404:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007406:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	3b01      	subs	r3, #1
 800740e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007410:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	3b01      	subs	r3, #1
 8007418:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800741a:	4313      	orrs	r3, r2
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	e03b      	b.n	80074a2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800743a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	3b01      	subs	r3, #1
 8007442:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	3b01      	subs	r3, #1
 800744a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800744c:	4313      	orrs	r3, r2
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007460:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007470:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	3b01      	subs	r3, #1
 8007478:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800747a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	3b01      	subs	r3, #1
 8007482:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007484:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	3b01      	subs	r3, #1
 800748c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800748e:	4313      	orrs	r3, r2
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074cc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80074d6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80074e8:	f7fa fd56 	bl	8001f98 <HAL_GetTick>
 80074ec:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074ee:	e010      	b.n	8007512 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d00c      	beq.n	8007512 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <FMC_SDRAM_SendCommand+0x5e>
 80074fe:	f7fa fd4b 	bl	8001f98 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d201      	bcs.n	8007512 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e006      	b.n	8007520 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b20      	cmp	r3, #32
 800751c:	d0e8      	beq.n	80074f0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007528:	b084      	sub	sp, #16
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	f107 001c 	add.w	r0, r7, #28
 8007536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800753e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007540:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007542:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007546:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800754a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800754e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007552:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	b004      	add	sp, #16
 800757c:	4770      	bx	lr

0800757e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2203      	movs	r2, #3
 80075c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80075c8:	2002      	movs	r0, #2
 80075ca:	f7fa fcf1 	bl	8001fb0 <HAL_Delay>
  
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0303 	and.w	r3, r3, #3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007612:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007618:	431a      	orrs	r2, r3
                       Command->CPSM);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800761e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800762e:	f023 030f 	bic.w	r3, r3, #15
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	b2db      	uxtb	r3, r3
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3314      	adds	r3, #20
 8007670:	461a      	mov	r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	4413      	add	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
}  
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80076b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80076ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0

}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076ee:	2310      	movs	r3, #16
 80076f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076f2:	2340      	movs	r3, #64	; 0x40
 80076f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007700:	f107 0308 	add.w	r3, r7, #8
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff ff74 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800770c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007710:	2110      	movs	r1, #16
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa44 	bl	8007ba0 <SDMMC_GetCmdResp1>
 8007718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800771a:	69fb      	ldr	r3, [r7, #28]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007732:	2311      	movs	r3, #17
 8007734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007736:	2340      	movs	r3, #64	; 0x40
 8007738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800773e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007744:	f107 0308 	add.w	r3, r7, #8
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff52 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007750:	f241 3288 	movw	r2, #5000	; 0x1388
 8007754:	2111      	movs	r1, #17
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa22 	bl	8007ba0 <SDMMC_GetCmdResp1>
 800775c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800775e:	69fb      	ldr	r3, [r7, #28]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3720      	adds	r7, #32
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007776:	2312      	movs	r3, #18
 8007778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007788:	f107 0308 	add.w	r3, r7, #8
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff ff30 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007794:	f241 3288 	movw	r2, #5000	; 0x1388
 8007798:	2112      	movs	r1, #18
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa00 	bl	8007ba0 <SDMMC_GetCmdResp1>
 80077a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077a2:	69fb      	ldr	r3, [r7, #28]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077ba:	2318      	movs	r3, #24
 80077bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077cc:	f107 0308 	add.w	r3, r7, #8
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff ff0e 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80077d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077dc:	2118      	movs	r1, #24
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9de 	bl	8007ba0 <SDMMC_GetCmdResp1>
 80077e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077e6:	69fb      	ldr	r3, [r7, #28]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80077fe:	2319      	movs	r3, #25
 8007800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007802:	2340      	movs	r3, #64	; 0x40
 8007804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800780a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff feec 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	2119      	movs	r1, #25
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9bc 	bl	8007ba0 <SDMMC_GetCmdResp1>
 8007828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800782a:	69fb      	ldr	r3, [r7, #28]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007840:	230c      	movs	r3, #12
 8007842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007844:	2340      	movs	r3, #64	; 0x40
 8007846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800784c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fecb 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800785e:	4a05      	ldr	r2, [pc, #20]	; (8007874 <SDMMC_CmdStopTransfer+0x40>)
 8007860:	210c      	movs	r1, #12
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f99c 	bl	8007ba0 <SDMMC_GetCmdResp1>
 8007868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800786a:	69fb      	ldr	r3, [r7, #28]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	05f5e100 	.word	0x05f5e100

08007878 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007888:	2307      	movs	r3, #7
 800788a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800788c:	2340      	movs	r3, #64	; 0x40
 800788e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007898:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	4619      	mov	r1, r3
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff fea7 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80078a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078aa:	2107      	movs	r1, #7
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f977 	bl	8007ba0 <SDMMC_GetCmdResp1>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3728      	adds	r7, #40	; 0x28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b088      	sub	sp, #32
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078dc:	f107 0308 	add.w	r3, r7, #8
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fe86 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f92d 	bl	8007b48 <SDMMC_GetCmdError>
 80078ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f0:	69fb      	ldr	r3, [r7, #28]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007902:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007908:	2308      	movs	r3, #8
 800790a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fe67 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fb24 	bl	8007f74 <SDMMC_GetCmdResp7>
 800792c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800792e:	69fb      	ldr	r3, [r7, #28]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007946:	2337      	movs	r3, #55	; 0x37
 8007948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800794a:	2340      	movs	r3, #64	; 0x40
 800794c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007958:	f107 0308 	add.w	r3, r7, #8
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff fe48 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007964:	f241 3288 	movw	r2, #5000	; 0x1388
 8007968:	2137      	movs	r1, #55	; 0x37
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f918 	bl	8007ba0 <SDMMC_GetCmdResp1>
 8007970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007972:	69fb      	ldr	r3, [r7, #28]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800798c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007992:	2329      	movs	r3, #41	; 0x29
 8007994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007996:	2340      	movs	r3, #64	; 0x40
 8007998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800799e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079a4:	f107 0308 	add.w	r3, r7, #8
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fe22 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa2b 	bl	8007e0c <SDMMC_GetCmdResp3>
 80079b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079b8:	69fb      	ldr	r3, [r7, #28]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b088      	sub	sp, #32
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80079d0:	2306      	movs	r3, #6
 80079d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079d4:	2340      	movs	r3, #64	; 0x40
 80079d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fe03 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80079ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f2:	2106      	movs	r1, #6
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f8d3 	bl	8007ba0 <SDMMC_GetCmdResp1>
 80079fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079fc:	69fb      	ldr	r3, [r7, #28]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b088      	sub	sp, #32
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007a12:	2333      	movs	r3, #51	; 0x33
 8007a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a16:	2340      	movs	r3, #64	; 0x40
 8007a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fde2 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a34:	2133      	movs	r1, #51	; 0x33
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8b2 	bl	8007ba0 <SDMMC_GetCmdResp1>
 8007a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a54:	2302      	movs	r3, #2
 8007a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a58:	23c0      	movs	r3, #192	; 0xc0
 8007a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fdc1 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f982 	bl	8007d7c <SDMMC_GetCmdResp2>
 8007a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a7a:	69fb      	ldr	r3, [r7, #28]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3720      	adds	r7, #32
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a92:	2309      	movs	r3, #9
 8007a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a96:	23c0      	movs	r3, #192	; 0xc0
 8007a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aa4:	f107 0308 	add.w	r3, r7, #8
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fda2 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f963 	bl	8007d7c <SDMMC_GetCmdResp2>
 8007ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b088      	sub	sp, #32
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ad4:	2340      	movs	r3, #64	; 0x40
 8007ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fd83 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	2103      	movs	r1, #3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f9c8 	bl	8007e88 <SDMMC_GetCmdResp6>
 8007af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afa:	69fb      	ldr	r3, [r7, #28]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b12:	230d      	movs	r3, #13
 8007b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b16:	2340      	movs	r3, #64	; 0x40
 8007b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fd62 	bl	80075f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b34:	210d      	movs	r1, #13
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f832 	bl	8007ba0 <SDMMC_GetCmdResp1>
 8007b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b50:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <SDMMC_GetCmdError+0x50>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a11      	ldr	r2, [pc, #68]	; (8007b9c <SDMMC_GetCmdError+0x54>)
 8007b56:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5a:	0a5b      	lsrs	r3, r3, #9
 8007b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b60:	fb02 f303 	mul.w	r3, r2, r3
 8007b64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	60fa      	str	r2, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b74:	e009      	b.n	8007b8a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f1      	beq.n	8007b66 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	22c5      	movs	r2, #197	; 0xc5
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20000004 	.word	0x20000004
 8007b9c:	10624dd3 	.word	0x10624dd3

08007ba0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007bae:	4b70      	ldr	r3, [pc, #448]	; (8007d70 <SDMMC_GetCmdResp1+0x1d0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a70      	ldr	r2, [pc, #448]	; (8007d74 <SDMMC_GetCmdResp1+0x1d4>)
 8007bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb8:	0a5a      	lsrs	r2, r3, #9
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	1e5a      	subs	r2, r3, #1
 8007bc6:	61fa      	str	r2, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bd0:	e0c9      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0ef      	beq.n	8007bc2 <SDMMC_GetCmdResp1+0x22>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1ea      	bne.n	8007bc2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bfe:	2304      	movs	r3, #4
 8007c00:	e0b1      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e0a6      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	22c5      	movs	r2, #197	; 0xc5
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fd12 	bl	8007648 <SDIO_GetCommandResponse>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461a      	mov	r2, r3
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d001      	beq.n	8007c32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e099      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c32:	2100      	movs	r1, #0
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff fd14 	bl	8007662 <SDIO_GetResponse>
 8007c3a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4b4e      	ldr	r3, [pc, #312]	; (8007d78 <SDMMC_GetCmdResp1+0x1d8>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e08d      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da02      	bge.n	8007c56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c54:	e087      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	e080      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	e079      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c80:	e071      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c90:	e069      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca0:	e061      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cb0:	e059      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cc0:	e051      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cd0:	e049      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ce0:	e041      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf0:	e039      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d00:	e031      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d10:	e029      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d20:	e021      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d30:	e019      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d40:	e011      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d50:	e009      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d60:	e001      	b.n	8007d66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3720      	adds	r7, #32
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000004 	.word	0x20000004
 8007d74:	10624dd3 	.word	0x10624dd3
 8007d78:	fdffe008 	.word	0xfdffe008

08007d7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <SDMMC_GetCmdResp2+0x88>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a1f      	ldr	r2, [pc, #124]	; (8007e08 <SDMMC_GetCmdResp2+0x8c>)
 8007d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8e:	0a5b      	lsrs	r3, r3, #9
 8007d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d94:	fb02 f303 	mul.w	r3, r2, r3
 8007d98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1e5a      	subs	r2, r3, #1
 8007d9e:	60fa      	str	r2, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007da4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007da8:	e026      	b.n	8007df8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ef      	beq.n	8007d9a <SDMMC_GetCmdResp2+0x1e>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1ea      	bne.n	8007d9a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dd6:	2304      	movs	r3, #4
 8007dd8:	e00e      	b.n	8007df8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e003      	b.n	8007df8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	22c5      	movs	r2, #197	; 0xc5
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	20000004 	.word	0x20000004
 8007e08:	10624dd3 	.word	0x10624dd3

08007e0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e14:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <SDMMC_GetCmdResp3+0x74>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1a      	ldr	r2, [pc, #104]	; (8007e84 <SDMMC_GetCmdResp3+0x78>)
 8007e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1e:	0a5b      	lsrs	r3, r3, #9
 8007e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e24:	fb02 f303 	mul.w	r3, r2, r3
 8007e28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	1e5a      	subs	r2, r3, #1
 8007e2e:	60fa      	str	r2, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e38:	e01b      	b.n	8007e72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0ef      	beq.n	8007e2a <SDMMC_GetCmdResp3+0x1e>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1ea      	bne.n	8007e2a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2204      	movs	r2, #4
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e66:	2304      	movs	r3, #4
 8007e68:	e003      	b.n	8007e72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	22c5      	movs	r2, #197	; 0xc5
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000004 	.word	0x20000004
 8007e84:	10624dd3 	.word	0x10624dd3

08007e88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	460b      	mov	r3, r1
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e96:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <SDMMC_GetCmdResp6+0xe4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a35      	ldr	r2, [pc, #212]	; (8007f70 <SDMMC_GetCmdResp6+0xe8>)
 8007e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea6:	fb02 f303 	mul.w	r3, r2, r3
 8007eaa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	1e5a      	subs	r2, r3, #1
 8007eb0:	61fa      	str	r2, [r7, #28]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eba:	e052      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0ef      	beq.n	8007eac <SDMMC_GetCmdResp6+0x24>
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1ea      	bne.n	8007eac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ee8:	2304      	movs	r3, #4
 8007eea:	e03a      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e02f      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff fba0 	bl	8007648 <SDIO_GetCommandResponse>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d001      	beq.n	8007f16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e025      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	22c5      	movs	r2, #197	; 0xc5
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fb9f 	bl	8007662 <SDIO_GetResponse>
 8007f24:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d106      	bne.n	8007f3e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e011      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f4c:	e009      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f5c:	e001      	b.n	8007f62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000004 	.word	0x20000004
 8007f70:	10624dd3 	.word	0x10624dd3

08007f74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f7c:	4b22      	ldr	r3, [pc, #136]	; (8008008 <SDMMC_GetCmdResp7+0x94>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a22      	ldr	r2, [pc, #136]	; (800800c <SDMMC_GetCmdResp7+0x98>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	0a5b      	lsrs	r3, r3, #9
 8007f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1e5a      	subs	r2, r3, #1
 8007f96:	60fa      	str	r2, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fa0:	e02c      	b.n	8007ffc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0ef      	beq.n	8007f92 <SDMMC_GetCmdResp7+0x1e>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1ea      	bne.n	8007f92 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fce:	2304      	movs	r3, #4
 8007fd0:	e014      	b.n	8007ffc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e009      	b.n	8007ffc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2240      	movs	r2, #64	; 0x40
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ffa:	2300      	movs	r3, #0
  
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20000004 	.word	0x20000004
 800800c:	10624dd3 	.word	0x10624dd3

08008010 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008014:	4908      	ldr	r1, [pc, #32]	; (8008038 <MX_FATFS_Init+0x28>)
 8008016:	4809      	ldr	r0, [pc, #36]	; (800803c <MX_FATFS_Init+0x2c>)
 8008018:	f002 fdc8 	bl	800abac <FATFS_LinkDriver>
 800801c:	4603      	mov	r3, r0
 800801e:	461a      	mov	r2, r3
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <MX_FATFS_Init+0x30>)
 8008022:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008024:	4907      	ldr	r1, [pc, #28]	; (8008044 <MX_FATFS_Init+0x34>)
 8008026:	4808      	ldr	r0, [pc, #32]	; (8008048 <MX_FATFS_Init+0x38>)
 8008028:	f002 fdc0 	bl	800abac <FATFS_LinkDriver>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <MX_FATFS_Init+0x3c>)
 8008032:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008034:	bf00      	nop
 8008036:	bd80      	pop	{r7, pc}
 8008038:	2000797c 	.word	0x2000797c
 800803c:	0802e9e0 	.word	0x0802e9e0
 8008040:	20007978 	.word	0x20007978
 8008044:	20007974 	.word	0x20007974
 8008048:	20000010 	.word	0x20000010
 800804c:	20007980 	.word	0x20007980

08008050 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008054:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008056:	4618      	mov	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800806a:	f000 f896 	bl	800819a <BSP_SD_IsDetected>
 800806e:	4603      	mov	r3, r0
 8008070:	2b01      	cmp	r3, #1
 8008072:	d001      	beq.n	8008078 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e012      	b.n	800809e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008078:	480b      	ldr	r0, [pc, #44]	; (80080a8 <BSP_SD_Init+0x48>)
 800807a:	f7fc fc01 	bl	8004880 <HAL_SD_Init>
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800808c:	4806      	ldr	r0, [pc, #24]	; (80080a8 <BSP_SD_Init+0x48>)
 800808e:	f7fd f9cd 	bl	800542c <HAL_SD_ConfigWideBusOperation>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800809c:	79fb      	ldrb	r3, [r7, #7]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200077d8 	.word	0x200077d8

080080ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	68f9      	ldr	r1, [r7, #12]
 80080c2:	4806      	ldr	r0, [pc, #24]	; (80080dc <BSP_SD_ReadBlocks_DMA+0x30>)
 80080c4:	f7fc fc8a 	bl	80049dc <HAL_SD_ReadBlocks_DMA>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200077d8 	.word	0x200077d8

080080e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	68f9      	ldr	r1, [r7, #12]
 80080f6:	4806      	ldr	r0, [pc, #24]	; (8008110 <BSP_SD_WriteBlocks_DMA+0x30>)
 80080f8:	f7fc fd52 	bl	8004ba0 <HAL_SD_WriteBlocks_DMA>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	200077d8 	.word	0x200077d8

08008114 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008118:	4805      	ldr	r0, [pc, #20]	; (8008130 <BSP_SD_GetCardState+0x1c>)
 800811a:	f7fd fa21 	bl	8005560 <HAL_SD_GetCardState>
 800811e:	4603      	mov	r3, r0
 8008120:	2b04      	cmp	r3, #4
 8008122:	bf14      	ite	ne
 8008124:	2301      	movne	r3, #1
 8008126:	2300      	moveq	r3, #0
 8008128:	b2db      	uxtb	r3, r3
}
 800812a:	4618      	mov	r0, r3
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200077d8 	.word	0x200077d8

08008134 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4803      	ldr	r0, [pc, #12]	; (800814c <BSP_SD_GetCardInfo+0x18>)
 8008140:	f7fd f948 	bl	80053d4 <HAL_SD_GetCardInfo>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200077d8 	.word	0x200077d8

08008150 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008158:	f000 f818 	bl	800818c <BSP_SD_AbortCallback>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800816c:	f000 f9b4 	bl	80084d8 <BSP_SD_WriteCpltCallback>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008180:	f000 f9bc 	bl	80084fc <BSP_SD_ReadCpltCallback>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0

}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80081a0:	2301      	movs	r3, #1
 80081a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80081a4:	f000 f80c 	bl	80081c0 <BSP_PlatformIsDetected>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80081ae:	2300      	movs	r3, #0
 80081b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	b2db      	uxtb	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80081c6:	2301      	movs	r3, #1
 80081c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80081ca:	2140      	movs	r1, #64	; 0x40
 80081cc:	4806      	ldr	r0, [pc, #24]	; (80081e8 <BSP_PlatformIsDetected+0x28>)
 80081ce:	f7fa ff47 	bl	8003060 <HAL_GPIO_ReadPin>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80081d8:	2300      	movs	r3, #0
 80081da:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80081dc:	79fb      	ldrb	r3, [r7, #7]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40021400 	.word	0x40021400

080081ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80081f4:	f002 fde0 	bl	800adb8 <osKernelGetTickCount>
 80081f8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80081fa:	e006      	b.n	800820a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081fc:	f7ff ff8a 	bl	8008114 <BSP_SD_GetCardState>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008206:	2300      	movs	r3, #0
 8008208:	e009      	b.n	800821e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800820a:	f002 fdd5 	bl	800adb8 <osKernelGetTickCount>
 800820e:	4602      	mov	r2, r0
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d8f0      	bhi.n	80081fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008232:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <SD_CheckStatus+0x38>)
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008238:	f7ff ff6c 	bl	8008114 <BSP_SD_GetCardState>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d107      	bne.n	8008252 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <SD_CheckStatus+0x38>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4b04      	ldr	r3, [pc, #16]	; (8008260 <SD_CheckStatus+0x38>)
 8008250:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008252:	4b03      	ldr	r3, [pc, #12]	; (8008260 <SD_CheckStatus+0x38>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b2db      	uxtb	r3, r3
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	2000000d 	.word	0x2000000d

08008264 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800826e:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <SD_initialize+0x7c>)
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008274:	f002 fd58 	bl	800ad28 <osKernelGetState>
 8008278:	4603      	mov	r3, r0
 800827a:	2b02      	cmp	r3, #2
 800827c:	d129      	bne.n	80082d2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800827e:	f7ff feef 	bl	8008060 <BSP_SD_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d107      	bne.n	8008298 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff ffcc 	bl	8008228 <SD_CheckStatus>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <SD_initialize+0x7c>)
 8008296:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008298:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <SD_initialize+0x7c>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d017      	beq.n	80082d2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80082a2:	4b10      	ldr	r3, [pc, #64]	; (80082e4 <SD_initialize+0x80>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d107      	bne.n	80082ba <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80082aa:	2200      	movs	r2, #0
 80082ac:	2102      	movs	r1, #2
 80082ae:	200a      	movs	r0, #10
 80082b0:	f002 ffa8 	bl	800b204 <osMessageQueueNew>
 80082b4:	4603      	mov	r3, r0
 80082b6:	4a0b      	ldr	r2, [pc, #44]	; (80082e4 <SD_initialize+0x80>)
 80082b8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <SD_initialize+0x80>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d107      	bne.n	80082d2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80082c2:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <SD_initialize+0x7c>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f043 0301 	orr.w	r3, r3, #1
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <SD_initialize+0x7c>)
 80082d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80082d2:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <SD_initialize+0x7c>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	b2db      	uxtb	r3, r3
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	2000000d 	.word	0x2000000d
 80082e4:	20000134 	.word	0x20000134

080082e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff ff97 	bl	8008228 <SD_CheckStatus>
 80082fa:	4603      	mov	r3, r0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008318:	f247 5030 	movw	r0, #30000	; 0x7530
 800831c:	f7ff ff66 	bl	80081ec <SD_CheckStatusWithTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	da01      	bge.n	800832a <SD_read+0x26>
  {
    return res;
 8008326:	7ffb      	ldrb	r3, [r7, #31]
 8008328:	e02f      	b.n	800838a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	68b8      	ldr	r0, [r7, #8]
 8008330:	f7ff febc 	bl	80080ac <BSP_SD_ReadBlocks_DMA>
 8008334:	4603      	mov	r3, r0
 8008336:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008338:	7fbb      	ldrb	r3, [r7, #30]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d124      	bne.n	8008388 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800833e:	4b15      	ldr	r3, [pc, #84]	; (8008394 <SD_read+0x90>)
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f107 0112 	add.w	r1, r7, #18
 8008346:	f247 5330 	movw	r3, #30000	; 0x7530
 800834a:	2200      	movs	r2, #0
 800834c:	f003 f82e 	bl	800b3ac <osMessageQueueGet>
 8008350:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d117      	bne.n	8008388 <SD_read+0x84>
 8008358:	8a7b      	ldrh	r3, [r7, #18]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d114      	bne.n	8008388 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800835e:	f002 fd2b 	bl	800adb8 <osKernelGetTickCount>
 8008362:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008364:	e007      	b.n	8008376 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008366:	f7ff fed5 	bl	8008114 <BSP_SD_GetCardState>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <SD_read+0x72>
              {
                res = RES_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008374:	e008      	b.n	8008388 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008376:	f002 fd1f 	bl	800adb8 <osKernelGetTickCount>
 800837a:	4602      	mov	r2, r0
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f247 522f 	movw	r2, #29999	; 0x752f
 8008384:	4293      	cmp	r3, r2
 8008386:	d9ee      	bls.n	8008366 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008388:	7ffb      	ldrb	r3, [r7, #31]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3720      	adds	r7, #32
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000134 	.word	0x20000134

08008398 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80083ac:	f247 5030 	movw	r0, #30000	; 0x7530
 80083b0:	f7ff ff1c 	bl	80081ec <SD_CheckStatusWithTimeout>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	da01      	bge.n	80083be <SD_write+0x26>
  {
    return res;
 80083ba:	7ffb      	ldrb	r3, [r7, #31]
 80083bc:	e02d      	b.n	800841a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	68b8      	ldr	r0, [r7, #8]
 80083c4:	f7ff fe8c 	bl	80080e0 <BSP_SD_WriteBlocks_DMA>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d124      	bne.n	8008418 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <SD_write+0x8c>)
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	f107 0112 	add.w	r1, r7, #18
 80083d6:	f247 5330 	movw	r3, #30000	; 0x7530
 80083da:	2200      	movs	r2, #0
 80083dc:	f002 ffe6 	bl	800b3ac <osMessageQueueGet>
 80083e0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d117      	bne.n	8008418 <SD_write+0x80>
 80083e8:	8a7b      	ldrh	r3, [r7, #18]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d114      	bne.n	8008418 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80083ee:	f002 fce3 	bl	800adb8 <osKernelGetTickCount>
 80083f2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083f4:	e007      	b.n	8008406 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083f6:	f7ff fe8d 	bl	8008114 <BSP_SD_GetCardState>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <SD_write+0x6e>
          {
            res = RES_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	77fb      	strb	r3, [r7, #31]
            break;
 8008404:	e008      	b.n	8008418 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008406:	f002 fcd7 	bl	800adb8 <osKernelGetTickCount>
 800840a:	4602      	mov	r2, r0
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	f247 522f 	movw	r2, #29999	; 0x752f
 8008414:	4293      	cmp	r3, r2
 8008416:	d9ee      	bls.n	80083f6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8008418:	7ffb      	ldrb	r3, [r7, #31]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000134 	.word	0x20000134

08008428 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	; 0x30
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	603a      	str	r2, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
 8008434:	460b      	mov	r3, r1
 8008436:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800843e:	4b25      	ldr	r3, [pc, #148]	; (80084d4 <SD_ioctl+0xac>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <SD_ioctl+0x28>
 800844c:	2303      	movs	r3, #3
 800844e:	e03c      	b.n	80084ca <SD_ioctl+0xa2>

  switch (cmd)
 8008450:	79bb      	ldrb	r3, [r7, #6]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d834      	bhi.n	80084c0 <SD_ioctl+0x98>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <SD_ioctl+0x34>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800846d 	.word	0x0800846d
 8008460:	08008475 	.word	0x08008475
 8008464:	0800848d 	.word	0x0800848d
 8008468:	080084a7 	.word	0x080084a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008472:	e028      	b.n	80084c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff fe5b 	bl	8008134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800847e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800848a:	e01c      	b.n	80084c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fe4f 	bl	8008134 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	b29a      	uxth	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084a4:	e00f      	b.n	80084c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fe42 	bl	8008134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	0a5a      	lsrs	r2, r3, #9
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084be:	e002      	b.n	80084c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80084c0:	2304      	movs	r3, #4
 80084c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80084c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3730      	adds	r7, #48	; 0x30
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	2000000d 	.word	0x2000000d

080084d8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80084de:	2302      	movs	r3, #2
 80084e0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <BSP_SD_WriteCpltCallback+0x20>)
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	1db9      	adds	r1, r7, #6
 80084e8:	2300      	movs	r3, #0
 80084ea:	2200      	movs	r2, #0
 80084ec:	f002 fefe 	bl	800b2ec <osMessageQueuePut>
#endif
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000134 	.word	0x20000134

080084fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8008502:	2301      	movs	r3, #1
 8008504:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <BSP_SD_ReadCpltCallback+0x20>)
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	1db9      	adds	r1, r7, #6
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	f002 feec 	bl	800b2ec <osMessageQueuePut>
#endif
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20000134 	.word	0x20000134

08008520 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <USER_initialize+0x24>)
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <USER_initialize+0x24>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	2000000e 	.word	0x2000000e

08008548 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008552:	4b06      	ldr	r3, [pc, #24]	; (800856c <USER_status+0x24>)
 8008554:	2201      	movs	r2, #1
 8008556:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008558:	4b04      	ldr	r3, [pc, #16]	; (800856c <USER_status+0x24>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	2000000e 	.word	0x2000000e

08008570 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008580:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800859e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	603a      	str	r2, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
 80085b8:	460b      	mov	r3, r1
 80085ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
    return res;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
	...

080085d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	4a08      	ldr	r2, [pc, #32]	; (8008600 <disk_status+0x30>)
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	79fa      	ldrb	r2, [r7, #7]
 80085e8:	4905      	ldr	r1, [pc, #20]	; (8008600 <disk_status+0x30>)
 80085ea:	440a      	add	r2, r1
 80085ec:	7b12      	ldrb	r2, [r2, #12]
 80085ee:	4610      	mov	r0, r2
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20000164 	.word	0x20000164

08008604 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]

    if(disk.is_initialized[pdrv] == 0)
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	4a0d      	ldr	r2, [pc, #52]	; (800864c <disk_initialize+0x48>)
 8008616:	5cd3      	ldrb	r3, [r2, r3]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d111      	bne.n	8008640 <disk_initialize+0x3c>
    {
      disk.is_initialized[pdrv] = 1;
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	4a0b      	ldr	r2, [pc, #44]	; (800864c <disk_initialize+0x48>)
 8008620:	2101      	movs	r1, #1
 8008622:	54d1      	strb	r1, [r2, r3]
      stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	4a09      	ldr	r2, [pc, #36]	; (800864c <disk_initialize+0x48>)
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	79fa      	ldrb	r2, [r7, #7]
 8008632:	4906      	ldr	r1, [pc, #24]	; (800864c <disk_initialize+0x48>)
 8008634:	440a      	add	r2, r1
 8008636:	7b12      	ldrb	r2, [r2, #12]
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
    }
    return stat;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000164 	.word	0x20000164

08008650 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4a0a      	ldr	r2, [pc, #40]	; (800868c <disk_read+0x3c>)
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	689c      	ldr	r4, [r3, #8]
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	4a07      	ldr	r2, [pc, #28]	; (800868c <disk_read+0x3c>)
 8008670:	4413      	add	r3, r2
 8008672:	7b18      	ldrb	r0, [r3, #12]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	47a0      	blx	r4
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	bd90      	pop	{r4, r7, pc}
 800868a:	bf00      	nop
 800868c:	20000164 	.word	0x20000164

08008690 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <disk_write+0x3c>)
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	68dc      	ldr	r4, [r3, #12]
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4a07      	ldr	r2, [pc, #28]	; (80086cc <disk_write+0x3c>)
 80086b0:	4413      	add	r3, r2
 80086b2:	7b18      	ldrb	r0, [r3, #12]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	47a0      	blx	r4
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]
  return res;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd90      	pop	{r4, r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000164 	.word	0x20000164

080086d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	603a      	str	r2, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
 80086dc:	460b      	mov	r3, r1
 80086de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	4a09      	ldr	r2, [pc, #36]	; (8008708 <disk_ioctl+0x38>)
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	79fa      	ldrb	r2, [r7, #7]
 80086ee:	4906      	ldr	r1, [pc, #24]	; (8008708 <disk_ioctl+0x38>)
 80086f0:	440a      	add	r2, r1
 80086f2:	7b10      	ldrb	r0, [r2, #12]
 80086f4:	79b9      	ldrb	r1, [r7, #6]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4798      	blx	r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000164 	.word	0x20000164

0800870c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3301      	adds	r3, #1
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800871c:	89fb      	ldrh	r3, [r7, #14]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	b21a      	sxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b21b      	sxth	r3, r3
 8008728:	4313      	orrs	r3, r2
 800872a:	b21b      	sxth	r3, r3
 800872c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800872e:	89fb      	ldrh	r3, [r7, #14]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3303      	adds	r3, #3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	3202      	adds	r2, #2
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	3201      	adds	r2, #1
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
	return rv;
 8008774:	68fb      	ldr	r3, [r7, #12]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	887a      	ldrh	r2, [r7, #2]
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	887b      	ldrh	r3, [r7, #2]
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	887a      	ldrh	r2, [r7, #2]
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	701a      	strb	r2, [r3, #0]
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	0a1b      	lsrs	r3, r3, #8
 80087d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	701a      	strb	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00d      	beq.n	8008846 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	1c53      	adds	r3, r2, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	1c59      	adds	r1, r3, #1
 8008834:	6179      	str	r1, [r7, #20]
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3b01      	subs	r3, #1
 800883e:	607b      	str	r3, [r7, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f1      	bne.n	800882a <mem_cpy+0x1a>
	}
}
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008852:	b480      	push	{r7}
 8008854:	b087      	sub	sp, #28
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	617a      	str	r2, [r7, #20]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3b01      	subs	r3, #1
 8008872:	607b      	str	r3, [r7, #4]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f3      	bne.n	8008862 <mem_set+0x10>
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008888:	b480      	push	{r7}
 800888a:	b089      	sub	sp, #36	; 0x24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	61fa      	str	r2, [r7, #28]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	4619      	mov	r1, r3
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	61ba      	str	r2, [r7, #24]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	1acb      	subs	r3, r1, r3
 80088b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <mem_cmp+0x40>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0eb      	beq.n	80088a0 <mem_cmp+0x18>

	return r;
 80088c8:	697b      	ldr	r3, [r7, #20]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3724      	adds	r7, #36	; 0x24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80088e0:	e002      	b.n	80088e8 <chk_chr+0x12>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3301      	adds	r3, #1
 80088e6:	607b      	str	r3, [r7, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <chk_chr+0x26>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d1f2      	bne.n	80088e2 <chk_chr+0xc>
	return *str;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	781b      	ldrb	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <lock_fs+0x22>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	4618      	mov	r0, r3
 8008920:	f002 f97a 	bl	800ac18 <ff_req_grant>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <lock_fs+0x22>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <lock_fs+0x24>
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00d      	beq.n	8008966 <unlock_fs+0x2e>
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	2b0c      	cmp	r3, #12
 800894e:	d00a      	beq.n	8008966 <unlock_fs+0x2e>
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	2b0b      	cmp	r3, #11
 8008954:	d007      	beq.n	8008966 <unlock_fs+0x2e>
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	2b0f      	cmp	r3, #15
 800895a:	d004      	beq.n	8008966 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4618      	mov	r0, r3
 8008962:	f002 f96e 	bl	800ac42 <ff_rel_grant>
	}
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800897a:	2300      	movs	r3, #0
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e029      	b.n	80089d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008984:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <chk_lock+0xb4>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	4413      	add	r3, r2
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d01d      	beq.n	80089ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008992:	4a24      	ldr	r2, [pc, #144]	; (8008a24 <chk_lock+0xb4>)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	4413      	add	r3, r2
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d116      	bne.n	80089d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80089a4:	4a1f      	ldr	r2, [pc, #124]	; (8008a24 <chk_lock+0xb4>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d10c      	bne.n	80089d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089b8:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <chk_lock+0xb4>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	4413      	add	r3, r2
 80089c0:	3308      	adds	r3, #8
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d102      	bne.n	80089d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089cc:	e007      	b.n	80089de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80089ce:	2301      	movs	r3, #1
 80089d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d9d2      	bls.n	8008984 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d109      	bne.n	80089f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d102      	bne.n	80089f0 <chk_lock+0x80>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d101      	bne.n	80089f4 <chk_lock+0x84>
 80089f0:	2300      	movs	r3, #0
 80089f2:	e010      	b.n	8008a16 <chk_lock+0xa6>
 80089f4:	2312      	movs	r3, #18
 80089f6:	e00e      	b.n	8008a16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d108      	bne.n	8008a10 <chk_lock+0xa0>
 80089fe:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <chk_lock+0xb4>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	4413      	add	r3, r2
 8008a06:	330c      	adds	r3, #12
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0e:	d101      	bne.n	8008a14 <chk_lock+0xa4>
 8008a10:	2310      	movs	r3, #16
 8008a12:	e000      	b.n	8008a16 <chk_lock+0xa6>
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000144 	.word	0x20000144

08008a28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
 8008a32:	e002      	b.n	8008a3a <enq_lock+0x12>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3301      	adds	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d806      	bhi.n	8008a4e <enq_lock+0x26>
 8008a40:	4a09      	ldr	r2, [pc, #36]	; (8008a68 <enq_lock+0x40>)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	4413      	add	r3, r2
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f2      	bne.n	8008a34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	bf14      	ite	ne
 8008a54:	2301      	movne	r3, #1
 8008a56:	2300      	moveq	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000144 	.word	0x20000144

08008a6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e01f      	b.n	8008abc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008a7c:	4a41      	ldr	r2, [pc, #260]	; (8008b84 <inc_lock+0x118>)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	4413      	add	r3, r2
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d113      	bne.n	8008ab6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008a8e:	4a3d      	ldr	r2, [pc, #244]	; (8008b84 <inc_lock+0x118>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	4413      	add	r3, r2
 8008a96:	3304      	adds	r3, #4
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d109      	bne.n	8008ab6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008aa2:	4a38      	ldr	r2, [pc, #224]	; (8008b84 <inc_lock+0x118>)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	4413      	add	r3, r2
 8008aaa:	3308      	adds	r3, #8
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d006      	beq.n	8008ac4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d9dc      	bls.n	8008a7c <inc_lock+0x10>
 8008ac2:	e000      	b.n	8008ac6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ac4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d132      	bne.n	8008b32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e002      	b.n	8008ad8 <inc_lock+0x6c>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d806      	bhi.n	8008aec <inc_lock+0x80>
 8008ade:	4a29      	ldr	r2, [pc, #164]	; (8008b84 <inc_lock+0x118>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	4413      	add	r3, r2
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f2      	bne.n	8008ad2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d101      	bne.n	8008af6 <inc_lock+0x8a>
 8008af2:	2300      	movs	r3, #0
 8008af4:	e040      	b.n	8008b78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4922      	ldr	r1, [pc, #136]	; (8008b84 <inc_lock+0x118>)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	440b      	add	r3, r1
 8008b02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	491e      	ldr	r1, [pc, #120]	; (8008b84 <inc_lock+0x118>)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	440b      	add	r3, r1
 8008b10:	3304      	adds	r3, #4
 8008b12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	491a      	ldr	r1, [pc, #104]	; (8008b84 <inc_lock+0x118>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	440b      	add	r3, r1
 8008b20:	3308      	adds	r3, #8
 8008b22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <inc_lock+0x118>)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	4413      	add	r3, r2
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	2200      	movs	r2, #0
 8008b30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d009      	beq.n	8008b4c <inc_lock+0xe0>
 8008b38:	4a12      	ldr	r2, [pc, #72]	; (8008b84 <inc_lock+0x118>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	4413      	add	r3, r2
 8008b40:	330c      	adds	r3, #12
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <inc_lock+0xe0>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e015      	b.n	8008b78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d108      	bne.n	8008b64 <inc_lock+0xf8>
 8008b52:	4a0c      	ldr	r2, [pc, #48]	; (8008b84 <inc_lock+0x118>)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	4413      	add	r3, r2
 8008b5a:	330c      	adds	r3, #12
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	e001      	b.n	8008b68 <inc_lock+0xfc>
 8008b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b68:	4906      	ldr	r1, [pc, #24]	; (8008b84 <inc_lock+0x118>)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	440b      	add	r3, r1
 8008b70:	330c      	adds	r3, #12
 8008b72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	20000144 	.word	0x20000144

08008b88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d825      	bhi.n	8008be8 <dec_lock+0x60>
		n = Files[i].ctr;
 8008b9c:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <dec_lock+0x74>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	4413      	add	r3, r2
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008baa:	89fb      	ldrh	r3, [r7, #14]
 8008bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb0:	d101      	bne.n	8008bb6 <dec_lock+0x2e>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008bb6:	89fb      	ldrh	r3, [r7, #14]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <dec_lock+0x3a>
 8008bbc:	89fb      	ldrh	r3, [r7, #14]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008bc2:	4a0e      	ldr	r2, [pc, #56]	; (8008bfc <dec_lock+0x74>)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	011b      	lsls	r3, r3, #4
 8008bc8:	4413      	add	r3, r2
 8008bca:	330c      	adds	r3, #12
 8008bcc:	89fa      	ldrh	r2, [r7, #14]
 8008bce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008bd0:	89fb      	ldrh	r3, [r7, #14]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d105      	bne.n	8008be2 <dec_lock+0x5a>
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <dec_lock+0x74>)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	4413      	add	r3, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	737b      	strb	r3, [r7, #13]
 8008be6:	e001      	b.n	8008bec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008be8:	2302      	movs	r3, #2
 8008bea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008bec:	7b7b      	ldrb	r3, [r7, #13]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000144 	.word	0x20000144

08008c00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e010      	b.n	8008c30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c0e:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <clear_lock+0x44>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	4413      	add	r3, r2
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d105      	bne.n	8008c2a <clear_lock+0x2a>
 8008c1e:	4a09      	ldr	r2, [pc, #36]	; (8008c44 <clear_lock+0x44>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	4413      	add	r3, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d9eb      	bls.n	8008c0e <clear_lock+0xe>
	}
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	20000144 	.word	0x20000144

08008c48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	78db      	ldrb	r3, [r3, #3]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d034      	beq.n	8008cc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7858      	ldrb	r0, [r3, #1]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	f7ff fd0e 	bl	8008690 <disk_write>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	73fb      	strb	r3, [r7, #15]
 8008c7e:	e022      	b.n	8008cc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	1ad2      	subs	r2, r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d217      	bcs.n	8008cc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	789b      	ldrb	r3, [r3, #2]
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	e010      	b.n	8008cc0 <sync_window+0x78>
					wsect += fs->fsize;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7858      	ldrb	r0, [r3, #1]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	f7ff fceb 	bl	8008690 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d8eb      	bhi.n	8008c9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d01b      	beq.n	8008d20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ffad 	bl	8008c48 <sync_window>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d113      	bne.n	8008d20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	7858      	ldrb	r0, [r3, #1]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008d02:	2301      	movs	r3, #1
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	f7ff fca3 	bl	8008650 <disk_read>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d10:	f04f 33ff 	mov.w	r3, #4294967295
 8008d14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff ff87 	bl	8008c48 <sync_window>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d158      	bne.n	8008df6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d148      	bne.n	8008dde <sync_fs+0xb2>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d144      	bne.n	8008dde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3334      	adds	r3, #52	; 0x34
 8008d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff fd77 	bl	8008852 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3334      	adds	r3, #52	; 0x34
 8008d68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fd06 	bl	8008782 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3334      	adds	r3, #52	; 0x34
 8008d7a:	4921      	ldr	r1, [pc, #132]	; (8008e00 <sync_fs+0xd4>)
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff fd1b 	bl	80087b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3334      	adds	r3, #52	; 0x34
 8008d86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008d8a:	491e      	ldr	r1, [pc, #120]	; (8008e04 <sync_fs+0xd8>)
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff fd13 	bl	80087b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3334      	adds	r3, #52	; 0x34
 8008d96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7ff fd09 	bl	80087b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3334      	adds	r3, #52	; 0x34
 8008daa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7ff fcff 	bl	80087b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7858      	ldrb	r0, [r3, #1]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f7ff fc5c 	bl	8008690 <disk_write>
			fs->fsi_flag = 0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fc72 	bl	80086d0 <disk_ioctl>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <sync_fs+0xca>
 8008df2:	2301      	movs	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	41615252 	.word	0x41615252
 8008e04:	61417272 	.word	0x61417272

08008e08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	3b02      	subs	r3, #2
 8008e16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	3b02      	subs	r3, #2
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d301      	bcc.n	8008e28 <clust2sect+0x20>
 8008e24:	2300      	movs	r3, #0
 8008e26:	e008      	b.n	8008e3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	895b      	ldrh	r3, [r3, #10]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	fb03 f202 	mul.w	r2, r3, r2
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	4413      	add	r3, r2
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d904      	bls.n	8008e66 <get_fat+0x20>
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d302      	bcc.n	8008e6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008e66:	2301      	movs	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	e08f      	b.n	8008f8c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d062      	beq.n	8008f40 <get_fat+0xfa>
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	dc7c      	bgt.n	8008f78 <get_fat+0x132>
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d002      	beq.n	8008e88 <get_fat+0x42>
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d042      	beq.n	8008f0c <get_fat+0xc6>
 8008e86:	e077      	b.n	8008f78 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	085b      	lsrs	r3, r3, #1
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	0a5b      	lsrs	r3, r3, #9
 8008e9e:	4413      	add	r3, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6938      	ldr	r0, [r7, #16]
 8008ea4:	f7ff ff14 	bl	8008cd0 <move_window>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d167      	bne.n	8008f7e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	60fa      	str	r2, [r7, #12]
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ec0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	0a5b      	lsrs	r3, r3, #9
 8008eca:	4413      	add	r3, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6938      	ldr	r0, [r7, #16]
 8008ed0:	f7ff fefe 	bl	8008cd0 <move_window>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d153      	bne.n	8008f82 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	461a      	mov	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <get_fat+0xbc>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	e002      	b.n	8008f08 <get_fat+0xc2>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f08:	617b      	str	r3, [r7, #20]
			break;
 8008f0a:	e03f      	b.n	8008f8c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	4413      	add	r3, r2
 8008f16:	4619      	mov	r1, r3
 8008f18:	6938      	ldr	r0, [r7, #16]
 8008f1a:	f7ff fed9 	bl	8008cd0 <move_window>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d130      	bne.n	8008f86 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008f32:	4413      	add	r3, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff fbe9 	bl	800870c <ld_word>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	617b      	str	r3, [r7, #20]
			break;
 8008f3e:	e025      	b.n	8008f8c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	09db      	lsrs	r3, r3, #7
 8008f48:	4413      	add	r3, r2
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6938      	ldr	r0, [r7, #16]
 8008f4e:	f7ff febf 	bl	8008cd0 <move_window>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d118      	bne.n	8008f8a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008f66:	4413      	add	r3, r2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fbe7 	bl	800873c <ld_dword>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f74:	617b      	str	r3, [r7, #20]
			break;
 8008f76:	e009      	b.n	8008f8c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008f78:	2301      	movs	r3, #1
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	e006      	b.n	8008f8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f7e:	bf00      	nop
 8008f80:	e004      	b.n	8008f8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f82:	bf00      	nop
 8008f84:	e002      	b.n	8008f8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f8a:	bf00      	nop
		}
	}

	return val;
 8008f8c:	697b      	ldr	r3, [r7, #20]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008f96:	b590      	push	{r4, r7, lr}
 8008f98:	b089      	sub	sp, #36	; 0x24
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	f240 80d2 	bls.w	8009152 <put_fat+0x1bc>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	f080 80cc 	bcs.w	8009152 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	f000 8096 	beq.w	80090f0 <put_fat+0x15a>
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	f300 80cd 	bgt.w	8009164 <put_fat+0x1ce>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d002      	beq.n	8008fd4 <put_fat+0x3e>
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d06e      	beq.n	80090b0 <put_fat+0x11a>
 8008fd2:	e0c7      	b.n	8009164 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	61bb      	str	r3, [r7, #24]
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	085b      	lsrs	r3, r3, #1
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	4413      	add	r3, r2
 8008fe0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	0a5b      	lsrs	r3, r3, #9
 8008fea:	4413      	add	r3, r2
 8008fec:	4619      	mov	r1, r3
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f7ff fe6e 	bl	8008cd0 <move_window>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ff8:	7ffb      	ldrb	r3, [r7, #31]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 80ab 	bne.w	8009156 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	1c59      	adds	r1, r3, #1
 800900a:	61b9      	str	r1, [r7, #24]
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	4413      	add	r3, r2
 8009012:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00d      	beq.n	800903a <put_fat+0xa4>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	b25b      	sxtb	r3, r3
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	b25a      	sxtb	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	b25b      	sxtb	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b25b      	sxtb	r3, r3
 8009036:	b2db      	uxtb	r3, r3
 8009038:	e001      	b.n	800903e <put_fat+0xa8>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	0a5b      	lsrs	r3, r3, #9
 8009050:	4413      	add	r3, r2
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7ff fe3b 	bl	8008cd0 <move_window>
 800905a:	4603      	mov	r3, r0
 800905c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d17a      	bne.n	800915a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009070:	4413      	add	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <put_fat+0xf0>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	091b      	lsrs	r3, r3, #4
 8009082:	b2db      	uxtb	r3, r3
 8009084:	e00e      	b.n	80090a4 <put_fat+0x10e>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b25b      	sxtb	r3, r3
 800908c:	f023 030f 	bic.w	r3, r3, #15
 8009090:	b25a      	sxtb	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	0a1b      	lsrs	r3, r3, #8
 8009096:	b25b      	sxtb	r3, r3
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	b25b      	sxtb	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b25b      	sxtb	r3, r3
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	70da      	strb	r2, [r3, #3]
			break;
 80090ae:	e059      	b.n	8009164 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	0a1b      	lsrs	r3, r3, #8
 80090b8:	4413      	add	r3, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7ff fe07 	bl	8008cd0 <move_window>
 80090c2:	4603      	mov	r3, r0
 80090c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090c6:	7ffb      	ldrb	r3, [r7, #31]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d148      	bne.n	800915e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80090da:	4413      	add	r3, r2
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	b292      	uxth	r2, r2
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff fb4d 	bl	8008782 <st_word>
			fs->wflag = 1;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	70da      	strb	r2, [r3, #3]
			break;
 80090ee:	e039      	b.n	8009164 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	09db      	lsrs	r3, r3, #7
 80090f8:	4413      	add	r3, r2
 80090fa:	4619      	mov	r1, r3
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff fde7 	bl	8008cd0 <move_window>
 8009102:	4603      	mov	r3, r0
 8009104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009106:	7ffb      	ldrb	r3, [r7, #31]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d12a      	bne.n	8009162 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009120:	4413      	add	r3, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fb0a 	bl	800873c <ld_dword>
 8009128:	4603      	mov	r3, r0
 800912a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800912e:	4323      	orrs	r3, r4
 8009130:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009140:	4413      	add	r3, r2
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fb37 	bl	80087b8 <st_dword>
			fs->wflag = 1;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	70da      	strb	r2, [r3, #3]
			break;
 8009150:	e008      	b.n	8009164 <put_fat+0x1ce>
		}
	}
 8009152:	bf00      	nop
 8009154:	e006      	b.n	8009164 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009156:	bf00      	nop
 8009158:	e004      	b.n	8009164 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800915a:	bf00      	nop
 800915c:	e002      	b.n	8009164 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800915e:	bf00      	nop
 8009160:	e000      	b.n	8009164 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009162:	bf00      	nop
	return res;
 8009164:	7ffb      	ldrb	r3, [r7, #31]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3724      	adds	r7, #36	; 0x24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd90      	pop	{r4, r7, pc}

0800916e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b088      	sub	sp, #32
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d904      	bls.n	8009194 <remove_chain+0x26>
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	429a      	cmp	r2, r3
 8009192:	d301      	bcc.n	8009198 <remove_chain+0x2a>
 8009194:	2302      	movs	r3, #2
 8009196:	e04b      	b.n	8009230 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00c      	beq.n	80091b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	69b8      	ldr	r0, [r7, #24]
 80091a6:	f7ff fef6 	bl	8008f96 <put_fat>
 80091aa:	4603      	mov	r3, r0
 80091ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091ae:	7ffb      	ldrb	r3, [r7, #31]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <remove_chain+0x4a>
 80091b4:	7ffb      	ldrb	r3, [r7, #31]
 80091b6:	e03b      	b.n	8009230 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7ff fe43 	bl	8008e46 <get_fat>
 80091c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d031      	beq.n	800922c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <remove_chain+0x64>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e02e      	b.n	8009230 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d8:	d101      	bne.n	80091de <remove_chain+0x70>
 80091da:	2301      	movs	r3, #1
 80091dc:	e028      	b.n	8009230 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80091de:	2200      	movs	r2, #0
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	69b8      	ldr	r0, [r7, #24]
 80091e4:	f7ff fed7 	bl	8008f96 <put_fat>
 80091e8:	4603      	mov	r3, r0
 80091ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80091ec:	7ffb      	ldrb	r3, [r7, #31]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <remove_chain+0x88>
 80091f2:	7ffb      	ldrb	r3, [r7, #31]
 80091f4:	e01c      	b.n	8009230 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	695a      	ldr	r2, [r3, #20]
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	3b02      	subs	r3, #2
 8009200:	429a      	cmp	r2, r3
 8009202:	d20b      	bcs.n	800921c <remove_chain+0xae>
			fs->free_clst++;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	791b      	ldrb	r3, [r3, #4]
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	b2da      	uxtb	r2, r3
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	429a      	cmp	r2, r3
 8009228:	d3c6      	bcc.n	80091b8 <remove_chain+0x4a>
 800922a:	e000      	b.n	800922e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800922c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10d      	bne.n	800926a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <create_chain+0x2c>
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	429a      	cmp	r2, r3
 8009262:	d31b      	bcc.n	800929c <create_chain+0x64>
 8009264:	2301      	movs	r3, #1
 8009266:	61bb      	str	r3, [r7, #24]
 8009268:	e018      	b.n	800929c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fdea 	bl	8008e46 <get_fat>
 8009272:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d801      	bhi.n	800927e <create_chain+0x46>
 800927a:	2301      	movs	r3, #1
 800927c:	e070      	b.n	8009360 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d101      	bne.n	800928a <create_chain+0x52>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e06a      	b.n	8009360 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	429a      	cmp	r2, r3
 8009292:	d201      	bcs.n	8009298 <create_chain+0x60>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	e063      	b.n	8009360 <create_chain+0x128>
		scl = clst;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	3301      	adds	r3, #1
 80092a4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d307      	bcc.n	80092c0 <create_chain+0x88>
				ncl = 2;
 80092b0:	2302      	movs	r3, #2
 80092b2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d901      	bls.n	80092c0 <create_chain+0x88>
 80092bc:	2300      	movs	r3, #0
 80092be:	e04f      	b.n	8009360 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092c0:	69f9      	ldr	r1, [r7, #28]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff fdbf 	bl	8008e46 <get_fat>
 80092c8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00e      	beq.n	80092ee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d003      	beq.n	80092de <create_chain+0xa6>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d101      	bne.n	80092e2 <create_chain+0xaa>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	e03e      	b.n	8009360 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d1da      	bne.n	80092a0 <create_chain+0x68>
 80092ea:	2300      	movs	r3, #0
 80092ec:	e038      	b.n	8009360 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80092ee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80092f0:	f04f 32ff 	mov.w	r2, #4294967295
 80092f4:	69f9      	ldr	r1, [r7, #28]
 80092f6:	6938      	ldr	r0, [r7, #16]
 80092f8:	f7ff fe4d 	bl	8008f96 <put_fat>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009300:	7dfb      	ldrb	r3, [r7, #23]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <create_chain+0xe2>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f7ff fe40 	bl	8008f96 <put_fat>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d116      	bne.n	800934e <create_chain+0x116>
		fs->last_clst = ncl;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	69fa      	ldr	r2, [r7, #28]
 8009324:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	695a      	ldr	r2, [r3, #20]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	3b02      	subs	r3, #2
 8009330:	429a      	cmp	r2, r3
 8009332:	d804      	bhi.n	800933e <create_chain+0x106>
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	791b      	ldrb	r3, [r3, #4]
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	711a      	strb	r2, [r3, #4]
 800934c:	e007      	b.n	800935e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d102      	bne.n	800935a <create_chain+0x122>
 8009354:	f04f 33ff 	mov.w	r3, #4294967295
 8009358:	e000      	b.n	800935c <create_chain+0x124>
 800935a:	2301      	movs	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800935e:	69fb      	ldr	r3, [r7, #28]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800937e:	d204      	bcs.n	800938a <dir_sdi+0x22>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	f003 031f 	and.w	r3, r3, #31
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <dir_sdi+0x26>
		return FR_INT_ERR;
 800938a:	2302      	movs	r3, #2
 800938c:	e063      	b.n	8009456 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <dir_sdi+0x46>
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d902      	bls.n	80093ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	095b      	lsrs	r3, r3, #5
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	8912      	ldrh	r2, [r2, #8]
 80093bc:	4293      	cmp	r3, r2
 80093be:	d301      	bcc.n	80093c4 <dir_sdi+0x5c>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e048      	b.n	8009456 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	61da      	str	r2, [r3, #28]
 80093cc:	e029      	b.n	8009422 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	895b      	ldrh	r3, [r3, #10]
 80093d2:	025b      	lsls	r3, r3, #9
 80093d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093d6:	e019      	b.n	800940c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fd32 	bl	8008e46 <get_fat>
 80093e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ea:	d101      	bne.n	80093f0 <dir_sdi+0x88>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e032      	b.n	8009456 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d904      	bls.n	8009400 <dir_sdi+0x98>
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d301      	bcc.n	8009404 <dir_sdi+0x9c>
 8009400:	2302      	movs	r3, #2
 8009402:	e028      	b.n	8009456 <dir_sdi+0xee>
			ofs -= csz;
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	429a      	cmp	r2, r3
 8009412:	d2e1      	bcs.n	80093d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	6938      	ldr	r0, [r7, #16]
 8009418:	f7ff fcf6 	bl	8008e08 <clust2sect>
 800941c:	4602      	mov	r2, r0
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <dir_sdi+0xcc>
 8009430:	2302      	movs	r3, #2
 8009432:	e010      	b.n	8009456 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	0a5b      	lsrs	r3, r3, #9
 800943c:	441a      	add	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944e:	441a      	add	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	3320      	adds	r3, #32
 8009474:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <dir_next+0x28>
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009484:	d301      	bcc.n	800948a <dir_next+0x2c>
 8009486:	2304      	movs	r3, #4
 8009488:	e0aa      	b.n	80095e0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009490:	2b00      	cmp	r3, #0
 8009492:	f040 8098 	bne.w	80095c6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10b      	bne.n	80094c0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	8912      	ldrh	r2, [r2, #8]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	f0c0 8088 	bcc.w	80095c6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	61da      	str	r2, [r3, #28]
 80094bc:	2304      	movs	r3, #4
 80094be:	e08f      	b.n	80095e0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	0a5b      	lsrs	r3, r3, #9
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	8952      	ldrh	r2, [r2, #10]
 80094c8:	3a01      	subs	r2, #1
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d17a      	bne.n	80095c6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	4619      	mov	r1, r3
 80094d8:	4610      	mov	r0, r2
 80094da:	f7ff fcb4 	bl	8008e46 <get_fat>
 80094de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d801      	bhi.n	80094ea <dir_next+0x8c>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e07a      	b.n	80095e0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d101      	bne.n	80094f6 <dir_next+0x98>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e074      	b.n	80095e0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d358      	bcc.n	80095b2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	61da      	str	r2, [r3, #28]
 800950c:	2304      	movs	r3, #4
 800950e:	e067      	b.n	80095e0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f7ff fe8d 	bl	8009238 <create_chain>
 800951e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <dir_next+0xcc>
 8009526:	2307      	movs	r3, #7
 8009528:	e05a      	b.n	80095e0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <dir_next+0xd6>
 8009530:	2302      	movs	r3, #2
 8009532:	e055      	b.n	80095e0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d101      	bne.n	8009540 <dir_next+0xe2>
 800953c:	2301      	movs	r3, #1
 800953e:	e04f      	b.n	80095e0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff fb81 	bl	8008c48 <sync_window>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <dir_next+0xf2>
 800954c:	2301      	movs	r3, #1
 800954e:	e047      	b.n	80095e0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3334      	adds	r3, #52	; 0x34
 8009554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff f979 	bl	8008852 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009560:	2300      	movs	r3, #0
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	6979      	ldr	r1, [r7, #20]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7ff fc4e 	bl	8008e08 <clust2sect>
 800956c:	4602      	mov	r2, r0
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	631a      	str	r2, [r3, #48]	; 0x30
 8009572:	e012      	b.n	800959a <dir_next+0x13c>
						fs->wflag = 1;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2201      	movs	r2, #1
 8009578:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff fb64 	bl	8008c48 <sync_window>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <dir_next+0x12c>
 8009586:	2301      	movs	r3, #1
 8009588:	e02a      	b.n	80095e0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	3301      	adds	r3, #1
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	631a      	str	r2, [r3, #48]	; 0x30
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	895b      	ldrh	r3, [r3, #10]
 800959e:	461a      	mov	r2, r3
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d3e6      	bcc.n	8009574 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	1ad2      	subs	r2, r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fc24 	bl	8008e08 <clust2sect>
 80095c0:	4602      	mov	r2, r0
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d8:	441a      	add	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80095f8:	2100      	movs	r1, #0
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff feb4 	bl	8009368 <dir_sdi>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d12b      	bne.n	8009662 <dir_alloc+0x7a>
		n = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	4619      	mov	r1, r3
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7ff fb5b 	bl	8008cd0 <move_window>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11d      	bne.n	8009660 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2be5      	cmp	r3, #229	; 0xe5
 800962c:	d004      	beq.n	8009638 <dir_alloc+0x50>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d107      	bne.n	8009648 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	3301      	adds	r3, #1
 800963c:	613b      	str	r3, [r7, #16]
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d102      	bne.n	800964c <dir_alloc+0x64>
 8009646:	e00c      	b.n	8009662 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009648:	2300      	movs	r3, #0
 800964a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800964c:	2101      	movs	r1, #1
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff ff05 	bl	800945e <dir_next>
 8009654:	4603      	mov	r3, r0
 8009656:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0d7      	beq.n	800960e <dir_alloc+0x26>
 800965e:	e000      	b.n	8009662 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009660:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2b04      	cmp	r3, #4
 8009666:	d101      	bne.n	800966c <dir_alloc+0x84>
 8009668:	2307      	movs	r3, #7
 800966a:	75fb      	strb	r3, [r7, #23]
	return res;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	331a      	adds	r3, #26
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff f841 	bl	800870c <ld_word>
 800968a:	4603      	mov	r3, r0
 800968c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b03      	cmp	r3, #3
 8009694:	d109      	bne.n	80096aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	3314      	adds	r3, #20
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff f836 	bl	800870c <ld_word>
 80096a0:	4603      	mov	r3, r0
 80096a2:	041b      	lsls	r3, r3, #16
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	331a      	adds	r3, #26
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	b292      	uxth	r2, r2
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff f859 	bl	8008782 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d109      	bne.n	80096ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f103 0214 	add.w	r2, r3, #20
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	0c1b      	lsrs	r3, r3, #16
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7ff f84b 	bl	8008782 <st_word>
	}
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80096fe:	2304      	movs	r3, #4
 8009700:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009708:	e03c      	b.n	8009784 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	4619      	mov	r1, r3
 8009710:	6938      	ldr	r0, [r7, #16]
 8009712:	f7ff fadd 	bl	8008cd0 <move_window>
 8009716:	4603      	mov	r3, r0
 8009718:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d136      	bne.n	800978e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d102      	bne.n	8009734 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800972e:	2304      	movs	r3, #4
 8009730:	75fb      	strb	r3, [r7, #23]
 8009732:	e031      	b.n	8009798 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	330b      	adds	r3, #11
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009740:	73bb      	strb	r3, [r7, #14]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7bba      	ldrb	r2, [r7, #14]
 8009746:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	2be5      	cmp	r3, #229	; 0xe5
 800974c:	d011      	beq.n	8009772 <dir_read+0x7e>
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	2b2e      	cmp	r3, #46	; 0x2e
 8009752:	d00e      	beq.n	8009772 <dir_read+0x7e>
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b0f      	cmp	r3, #15
 8009758:	d00b      	beq.n	8009772 <dir_read+0x7e>
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	f023 0320 	bic.w	r3, r3, #32
 8009760:	2b08      	cmp	r3, #8
 8009762:	bf0c      	ite	eq
 8009764:	2301      	moveq	r3, #1
 8009766:	2300      	movne	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	4293      	cmp	r3, r2
 8009770:	d00f      	beq.n	8009792 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009772:	2100      	movs	r1, #0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fe72 	bl	800945e <dir_next>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d108      	bne.n	8009796 <dir_read+0xa2>
	while (dp->sect) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1be      	bne.n	800970a <dir_read+0x16>
 800978c:	e004      	b.n	8009798 <dir_read+0xa4>
		if (res != FR_OK) break;
 800978e:	bf00      	nop
 8009790:	e002      	b.n	8009798 <dir_read+0xa4>
				break;
 8009792:	bf00      	nop
 8009794:	e000      	b.n	8009798 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009796:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <dir_read+0xb0>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	61da      	str	r2, [r3, #28]
	return res;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b086      	sub	sp, #24
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80097bc:	2100      	movs	r1, #0
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7ff fdd2 	bl	8009368 <dir_sdi>
 80097c4:	4603      	mov	r3, r0
 80097c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <dir_find+0x24>
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	e03e      	b.n	8009850 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6938      	ldr	r0, [r7, #16]
 80097da:	f7ff fa79 	bl	8008cd0 <move_window>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d12f      	bne.n	8009848 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <dir_find+0x4e>
 80097f6:	2304      	movs	r3, #4
 80097f8:	75fb      	strb	r3, [r7, #23]
 80097fa:	e028      	b.n	800984e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	330b      	adds	r3, #11
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009808:	b2da      	uxtb	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	330b      	adds	r3, #11
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10a      	bne.n	8009834 <dir_find+0x86>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a18      	ldr	r0, [r3, #32]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3324      	adds	r3, #36	; 0x24
 8009826:	220b      	movs	r2, #11
 8009828:	4619      	mov	r1, r3
 800982a:	f7ff f82d 	bl	8008888 <mem_cmp>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00b      	beq.n	800984c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009834:	2100      	movs	r1, #0
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff fe11 	bl	800945e <dir_next>
 800983c:	4603      	mov	r3, r0
 800983e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c5      	beq.n	80097d2 <dir_find+0x24>
 8009846:	e002      	b.n	800984e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009848:	bf00      	nop
 800984a:	e000      	b.n	800984e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800984c:	bf00      	nop

	return res;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009866:	2101      	movs	r1, #1
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff febd 	bl	80095e8 <dir_alloc>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d11c      	bne.n	80098b2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	4619      	mov	r1, r3
 800987e:	68b8      	ldr	r0, [r7, #8]
 8009880:	f7ff fa26 	bl	8008cd0 <move_window>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d111      	bne.n	80098b2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	2220      	movs	r2, #32
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe ffdb 	bl	8008852 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a18      	ldr	r0, [r3, #32]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3324      	adds	r3, #36	; 0x24
 80098a4:	220b      	movs	r2, #11
 80098a6:	4619      	mov	r1, r3
 80098a8:	f7fe ffb2 	bl	8008810 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2201      	movs	r2, #1
 80098b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	4619      	mov	r1, r3
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff f9fd 	bl	8008cd0 <move_window>
 80098d6:	4603      	mov	r3, r0
 80098d8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80098da:	7afb      	ldrb	r3, [r7, #11]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	22e5      	movs	r2, #229	; 0xe5
 80098e6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2201      	movs	r2, #1
 80098ec:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80098ee:	7afb      	ldrb	r3, [r7, #11]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2200      	movs	r2, #0
 8009906:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d04e      	beq.n	80099ae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	613b      	str	r3, [r7, #16]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009918:	e021      	b.n	800995e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1a      	ldr	r2, [r3, #32]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1c59      	adds	r1, r3, #1
 8009922:	6179      	str	r1, [r7, #20]
 8009924:	4413      	add	r3, r2
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b20      	cmp	r3, #32
 800992e:	d100      	bne.n	8009932 <get_fileinfo+0x3a>
 8009930:	e015      	b.n	800995e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	2b05      	cmp	r3, #5
 8009936:	d101      	bne.n	800993c <get_fileinfo+0x44>
 8009938:	23e5      	movs	r3, #229	; 0xe5
 800993a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2b09      	cmp	r3, #9
 8009940:	d106      	bne.n	8009950 <get_fileinfo+0x58>
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	613a      	str	r2, [r7, #16]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	4413      	add	r3, r2
 800994c:	222e      	movs	r2, #46	; 0x2e
 800994e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	613a      	str	r2, [r7, #16]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4413      	add	r3, r2
 800995a:	7bfa      	ldrb	r2, [r7, #15]
 800995c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b0a      	cmp	r3, #10
 8009962:	d9da      	bls.n	800991a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	4413      	add	r3, r2
 800996a:	3309      	adds	r3, #9
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a1b      	ldr	r3, [r3, #32]
 8009974:	7ada      	ldrb	r2, [r3, #11]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	331c      	adds	r3, #28
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fedb 	bl	800873c <ld_dword>
 8009986:	4602      	mov	r2, r0
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	3316      	adds	r3, #22
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fed2 	bl	800873c <ld_dword>
 8009998:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	b29a      	uxth	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	80da      	strh	r2, [r3, #6]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	809a      	strh	r2, [r3, #4]
 80099ac:	e000      	b.n	80099b0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099ae:	bf00      	nop
}
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3324      	adds	r3, #36	; 0x24
 80099cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80099ce:	220b      	movs	r2, #11
 80099d0:	2120      	movs	r1, #32
 80099d2:	68b8      	ldr	r0, [r7, #8]
 80099d4:	f7fe ff3d 	bl	8008852 <mem_set>
	si = i = 0; ni = 8;
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	2308      	movs	r3, #8
 80099e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	61fa      	str	r2, [r7, #28]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80099f2:	7efb      	ldrb	r3, [r7, #27]
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d94b      	bls.n	8009a90 <create_name+0xd8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80099f8:	7efb      	ldrb	r3, [r7, #27]
 80099fa:	2b2f      	cmp	r3, #47	; 0x2f
 80099fc:	d006      	beq.n	8009a0c <create_name+0x54>
 80099fe:	7efb      	ldrb	r3, [r7, #27]
 8009a00:	2b5c      	cmp	r3, #92	; 0x5c
 8009a02:	d110      	bne.n	8009a26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009a04:	e002      	b.n	8009a0c <create_name+0x54>
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	61fb      	str	r3, [r7, #28]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	4413      	add	r3, r2
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b2f      	cmp	r3, #47	; 0x2f
 8009a16:	d0f6      	beq.n	8009a06 <create_name+0x4e>
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b5c      	cmp	r3, #92	; 0x5c
 8009a22:	d0f0      	beq.n	8009a06 <create_name+0x4e>
			break;
 8009a24:	e035      	b.n	8009a92 <create_name+0xda>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009a26:	7efb      	ldrb	r3, [r7, #27]
 8009a28:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2a:	d003      	beq.n	8009a34 <create_name+0x7c>
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d30c      	bcc.n	8009a4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2b0b      	cmp	r3, #11
 8009a38:	d002      	beq.n	8009a40 <create_name+0x88>
 8009a3a:	7efb      	ldrb	r3, [r7, #27]
 8009a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3e:	d001      	beq.n	8009a44 <create_name+0x8c>
 8009a40:	2306      	movs	r3, #6
 8009a42:	e041      	b.n	8009ac8 <create_name+0x110>
			i = 8; ni = 11;				/* Goto extension */
 8009a44:	2308      	movs	r3, #8
 8009a46:	613b      	str	r3, [r7, #16]
 8009a48:	230b      	movs	r3, #11
 8009a4a:	617b      	str	r3, [r7, #20]
			continue;
 8009a4c:	e01f      	b.n	8009a8e <create_name+0xd6>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009a4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da01      	bge.n	8009a5a <create_name+0xa2>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
 8009a56:	2306      	movs	r3, #6
 8009a58:	e036      	b.n	8009ac8 <create_name+0x110>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a5a:	7efb      	ldrb	r3, [r7, #27]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	481c      	ldr	r0, [pc, #112]	; (8009ad0 <create_name+0x118>)
 8009a60:	f7fe ff39 	bl	80088d6 <chk_chr>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <create_name+0xb6>
 8009a6a:	2306      	movs	r3, #6
 8009a6c:	e02c      	b.n	8009ac8 <create_name+0x110>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a6e:	7efb      	ldrb	r3, [r7, #27]
 8009a70:	2b60      	cmp	r3, #96	; 0x60
 8009a72:	d905      	bls.n	8009a80 <create_name+0xc8>
 8009a74:	7efb      	ldrb	r3, [r7, #27]
 8009a76:	2b7a      	cmp	r3, #122	; 0x7a
 8009a78:	d802      	bhi.n	8009a80 <create_name+0xc8>
 8009a7a:	7efb      	ldrb	r3, [r7, #27]
 8009a7c:	3b20      	subs	r3, #32
 8009a7e:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	613a      	str	r2, [r7, #16]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	7efa      	ldrb	r2, [r7, #27]
 8009a8c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009a8e:	e7a9      	b.n	80099e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a90:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	441a      	add	r2, r3
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <create_name+0xee>
 8009aa2:	2306      	movs	r3, #6
 8009aa4:	e010      	b.n	8009ac8 <create_name+0x110>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2be5      	cmp	r3, #229	; 0xe5
 8009aac:	d102      	bne.n	8009ab4 <create_name+0xfc>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ab4:	7efb      	ldrb	r3, [r7, #27]
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	d801      	bhi.n	8009abe <create_name+0x106>
 8009aba:	2204      	movs	r2, #4
 8009abc:	e000      	b.n	8009ac0 <create_name+0x108>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	330b      	adds	r3, #11
 8009ac4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009ac6:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	0802deac 	.word	0x0802deac

08009ad4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ae8:	e002      	b.n	8009af0 <follow_path+0x1c>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b2f      	cmp	r3, #47	; 0x2f
 8009af6:	d0f8      	beq.n	8009aea <follow_path+0x16>
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b5c      	cmp	r3, #92	; 0x5c
 8009afe:	d0f4      	beq.n	8009aea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2200      	movs	r2, #0
 8009b04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b1f      	cmp	r3, #31
 8009b0c:	d80a      	bhi.n	8009b24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2280      	movs	r2, #128	; 0x80
 8009b12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009b16:	2100      	movs	r1, #0
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff fc25 	bl	8009368 <dir_sdi>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75fb      	strb	r3, [r7, #23]
 8009b22:	e043      	b.n	8009bac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b24:	463b      	mov	r3, r7
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff ff45 	bl	80099b8 <create_name>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d134      	bne.n	8009ba2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff fe38 	bl	80097ae <dir_find>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d127      	bne.n	8009ba6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d122      	bne.n	8009ba6 <follow_path+0xd2>
 8009b60:	2305      	movs	r3, #5
 8009b62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b64:	e01f      	b.n	8009ba6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11c      	bne.n	8009baa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	799b      	ldrb	r3, [r3, #6]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b7c:	2305      	movs	r3, #5
 8009b7e:	75fb      	strb	r3, [r7, #23]
 8009b80:	e014      	b.n	8009bac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b90:	4413      	add	r3, r2
 8009b92:	4619      	mov	r1, r3
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff fd6e 	bl	8009676 <ld_clust>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ba0:	e7c0      	b.n	8009b24 <follow_path+0x50>
			if (res != FR_OK) break;
 8009ba2:	bf00      	nop
 8009ba4:	e002      	b.n	8009bac <follow_path+0xd8>
				break;
 8009ba6:	bf00      	nop
 8009ba8:	e000      	b.n	8009bac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009baa:	bf00      	nop
			}
		}
	}

	return res;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b087      	sub	sp, #28
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d031      	beq.n	8009c30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	e002      	b.n	8009bda <get_ldnumber+0x24>
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d903      	bls.n	8009bea <get_ldnumber+0x34>
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b3a      	cmp	r3, #58	; 0x3a
 8009be8:	d1f4      	bne.n	8009bd4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b3a      	cmp	r3, #58	; 0x3a
 8009bf0:	d11c      	bne.n	8009c2c <get_ldnumber+0x76>
			tp = *path;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	60fa      	str	r2, [r7, #12]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	3b30      	subs	r3, #48	; 0x30
 8009c02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b09      	cmp	r3, #9
 8009c08:	d80e      	bhi.n	8009c28 <get_ldnumber+0x72>
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d10a      	bne.n	8009c28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d807      	bhi.n	8009c28 <get_ldnumber+0x72>
					vol = (int)i;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	e002      	b.n	8009c32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009c30:	693b      	ldr	r3, [r7, #16]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	371c      	adds	r7, #28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
	...

08009c40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	70da      	strb	r2, [r3, #3]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff f838 	bl	8008cd0 <move_window>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <check_fs+0x2a>
 8009c66:	2304      	movs	r3, #4
 8009c68:	e038      	b.n	8009cdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3334      	adds	r3, #52	; 0x34
 8009c6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fd4a 	bl	800870c <ld_word>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d001      	beq.n	8009c88 <check_fs+0x48>
 8009c84:	2303      	movs	r3, #3
 8009c86:	e029      	b.n	8009cdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c8e:	2be9      	cmp	r3, #233	; 0xe9
 8009c90:	d009      	beq.n	8009ca6 <check_fs+0x66>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c98:	2beb      	cmp	r3, #235	; 0xeb
 8009c9a:	d11e      	bne.n	8009cda <check_fs+0x9a>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009ca2:	2b90      	cmp	r3, #144	; 0x90
 8009ca4:	d119      	bne.n	8009cda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3334      	adds	r3, #52	; 0x34
 8009caa:	3336      	adds	r3, #54	; 0x36
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fd45 	bl	800873c <ld_dword>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009cb8:	4a0a      	ldr	r2, [pc, #40]	; (8009ce4 <check_fs+0xa4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d101      	bne.n	8009cc2 <check_fs+0x82>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e00c      	b.n	8009cdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3334      	adds	r3, #52	; 0x34
 8009cc6:	3352      	adds	r3, #82	; 0x52
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fd37 	bl	800873c <ld_dword>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	4a05      	ldr	r2, [pc, #20]	; (8009ce8 <check_fs+0xa8>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d101      	bne.n	8009cda <check_fs+0x9a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e000      	b.n	8009cdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009cda:	2302      	movs	r3, #2
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	00544146 	.word	0x00544146
 8009ce8:	33544146 	.word	0x33544146

08009cec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b096      	sub	sp, #88	; 0x58
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7ff ff58 	bl	8009bb6 <get_ldnumber>
 8009d06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da01      	bge.n	8009d12 <find_volume+0x26>
 8009d0e:	230b      	movs	r3, #11
 8009d10:	e22c      	b.n	800a16c <find_volume+0x480>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009d12:	4aac      	ldr	r2, [pc, #688]	; (8009fc4 <find_volume+0x2d8>)
 8009d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <find_volume+0x3a>
 8009d22:	230c      	movs	r3, #12
 8009d24:	e222      	b.n	800a16c <find_volume+0x480>

	ENTER_FF(fs);						/* Lock the volume */
 8009d26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d28:	f7fe fdf0 	bl	800890c <lock_fs>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <find_volume+0x4a>
 8009d32:	230f      	movs	r3, #15
 8009d34:	e21a      	b.n	800a16c <find_volume+0x480>
	*rfs = fs;							/* Return pointer to the file system object */
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d3a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	f023 0301 	bic.w	r3, r3, #1
 8009d42:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01a      	beq.n	8009d82 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fe fc3d 	bl	80085d0 <disk_status>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10c      	bne.n	8009d82 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d007      	beq.n	8009d7e <find_volume+0x92>
 8009d6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009d7a:	230a      	movs	r3, #10
 8009d7c:	e1f6      	b.n	800a16c <find_volume+0x480>
			}
			return FR_OK;				/* The file system object is valid */
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e1f4      	b.n	800a16c <find_volume+0x480>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	785b      	ldrb	r3, [r3, #1]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fc35 	bl	8008604 <disk_initialize>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009da0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009dac:	2303      	movs	r3, #3
 8009dae:	e1dd      	b.n	800a16c <find_volume+0x480>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <find_volume+0xda>
 8009db6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dba:	f003 0304 	and.w	r3, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009dc2:	230a      	movs	r3, #10
 8009dc4:	e1d2      	b.n	800a16c <find_volume+0x480>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009dca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dce:	f7ff ff37 	bl	8009c40 <check_fs>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d14b      	bne.n	8009e78 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009de0:	2300      	movs	r3, #0
 8009de2:	643b      	str	r3, [r7, #64]	; 0x40
 8009de4:	e01f      	b.n	8009e26 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dee:	011b      	lsls	r3, r3, #4
 8009df0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009df4:	4413      	add	r3, r2
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d006      	beq.n	8009e10 <find_volume+0x124>
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	3308      	adds	r3, #8
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fc98 	bl	800873c <ld_dword>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	e000      	b.n	8009e12 <find_volume+0x126>
 8009e10:	2200      	movs	r2, #0
 8009e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e22:	3301      	adds	r3, #1
 8009e24:	643b      	str	r3, [r7, #64]	; 0x40
 8009e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d9dc      	bls.n	8009de6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <find_volume+0x150>
 8009e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009e44:	4413      	add	r3, r2
 8009e46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e4a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <find_volume+0x172>
 8009e52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e56:	f7ff fef3 	bl	8009c40 <check_fs>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	e000      	b.n	8009e60 <find_volume+0x174>
 8009e5e:	2303      	movs	r3, #3
 8009e60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d905      	bls.n	8009e78 <find_volume+0x18c>
 8009e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6e:	3301      	adds	r3, #1
 8009e70:	643b      	str	r3, [r7, #64]	; 0x40
 8009e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d9e1      	bls.n	8009e3c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d101      	bne.n	8009e84 <find_volume+0x198>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e173      	b.n	800a16c <find_volume+0x480>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d901      	bls.n	8009e90 <find_volume+0x1a4>
 8009e8c:	230d      	movs	r3, #13
 8009e8e:	e16d      	b.n	800a16c <find_volume+0x480>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	3334      	adds	r3, #52	; 0x34
 8009e94:	330b      	adds	r3, #11
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fc38 	bl	800870c <ld_word>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea2:	d001      	beq.n	8009ea8 <find_volume+0x1bc>
 8009ea4:	230d      	movs	r3, #13
 8009ea6:	e161      	b.n	800a16c <find_volume+0x480>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	3334      	adds	r3, #52	; 0x34
 8009eac:	3316      	adds	r3, #22
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fc2c 	bl	800870c <ld_word>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <find_volume+0x1e0>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	3334      	adds	r3, #52	; 0x34
 8009ec2:	3324      	adds	r3, #36	; 0x24
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe fc39 	bl	800873c <ld_dword>
 8009eca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ed0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	789b      	ldrb	r3, [r3, #2]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d005      	beq.n	8009ef0 <find_volume+0x204>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee6:	789b      	ldrb	r3, [r3, #2]
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d001      	beq.n	8009ef0 <find_volume+0x204>
 8009eec:	230d      	movs	r3, #13
 8009eee:	e13d      	b.n	800a16c <find_volume+0x480>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	789b      	ldrb	r3, [r3, #2]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef8:	fb02 f303 	mul.w	r3, r2, r3
 8009efc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	895b      	ldrh	r3, [r3, #10]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d008      	beq.n	8009f24 <find_volume+0x238>
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	895b      	ldrh	r3, [r3, #10]
 8009f16:	461a      	mov	r2, r3
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	895b      	ldrh	r3, [r3, #10]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	4013      	ands	r3, r2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <find_volume+0x23c>
 8009f24:	230d      	movs	r3, #13
 8009f26:	e121      	b.n	800a16c <find_volume+0x480>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	3334      	adds	r3, #52	; 0x34
 8009f2c:	3311      	adds	r3, #17
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fbec 	bl	800870c <ld_word>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3e:	891b      	ldrh	r3, [r3, #8]
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <find_volume+0x262>
 8009f4a:	230d      	movs	r3, #13
 8009f4c:	e10e      	b.n	800a16c <find_volume+0x480>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	3334      	adds	r3, #52	; 0x34
 8009f52:	3313      	adds	r3, #19
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fbd9 	bl	800870c <ld_word>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <find_volume+0x286>
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	3334      	adds	r3, #52	; 0x34
 8009f68:	3320      	adds	r3, #32
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fbe6 	bl	800873c <ld_dword>
 8009f70:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	3334      	adds	r3, #52	; 0x34
 8009f76:	330e      	adds	r3, #14
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fbc7 	bl	800870c <ld_word>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <find_volume+0x2a0>
 8009f88:	230d      	movs	r3, #13
 8009f8a:	e0ef      	b.n	800a16c <find_volume+0x480>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f90:	4413      	add	r3, r2
 8009f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f94:	8912      	ldrh	r2, [r2, #8]
 8009f96:	0912      	lsrs	r2, r2, #4
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d201      	bcs.n	8009faa <find_volume+0x2be>
 8009fa6:	230d      	movs	r3, #13
 8009fa8:	e0e0      	b.n	800a16c <find_volume+0x480>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fb2:	8952      	ldrh	r2, [r2, #10]
 8009fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fb8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d103      	bne.n	8009fc8 <find_volume+0x2dc>
 8009fc0:	230d      	movs	r3, #13
 8009fc2:	e0d3      	b.n	800a16c <find_volume+0x480>
 8009fc4:	20000138 	.word	0x20000138
		fmt = FS_FAT32;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d802      	bhi.n	8009fde <find_volume+0x2f2>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d802      	bhi.n	8009fee <find_volume+0x302>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	1c9a      	adds	r2, r3, #2
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ffa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009ffc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a000:	441a      	add	r2, r3
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00a:	441a      	add	r2, r3
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a014:	2b03      	cmp	r3, #3
 800a016:	d11e      	bne.n	800a056 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	3334      	adds	r3, #52	; 0x34
 800a01c:	332a      	adds	r3, #42	; 0x2a
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fb74 	bl	800870c <ld_word>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <find_volume+0x342>
 800a02a:	230d      	movs	r3, #13
 800a02c:	e09e      	b.n	800a16c <find_volume+0x480>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	891b      	ldrh	r3, [r3, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <find_volume+0x34e>
 800a036:	230d      	movs	r3, #13
 800a038:	e098      	b.n	800a16c <find_volume+0x480>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	3334      	adds	r3, #52	; 0x34
 800a03e:	332c      	adds	r3, #44	; 0x2c
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fb7b 	bl	800873c <ld_dword>
 800a046:	4602      	mov	r2, r0
 800a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	647b      	str	r3, [r7, #68]	; 0x44
 800a054:	e01f      	b.n	800a096 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	891b      	ldrh	r3, [r3, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <find_volume+0x376>
 800a05e:	230d      	movs	r3, #13
 800a060:	e084      	b.n	800a16c <find_volume+0x480>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a068:	441a      	add	r2, r3
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a06e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a072:	2b02      	cmp	r3, #2
 800a074:	d103      	bne.n	800a07e <find_volume+0x392>
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	e00a      	b.n	800a094 <find_volume+0x3a8>
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	699a      	ldr	r2, [r3, #24]
 800a082:	4613      	mov	r3, r2
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	4413      	add	r3, r2
 800a088:	085a      	lsrs	r2, r3, #1
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a094:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a098:	69da      	ldr	r2, [r3, #28]
 800a09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a0a0:	0a5b      	lsrs	r3, r3, #9
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d201      	bcs.n	800a0aa <find_volume+0x3be>
 800a0a6:	230d      	movs	r3, #13
 800a0a8:	e060      	b.n	800a16c <find_volume+0x480>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b0:	615a      	str	r2, [r3, #20]
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	695a      	ldr	r2, [r3, #20]
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	2280      	movs	r2, #128	; 0x80
 800a0be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d13f      	bne.n	800a148 <find_volume+0x45c>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	3334      	adds	r3, #52	; 0x34
 800a0cc:	3330      	adds	r3, #48	; 0x30
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fb1c 	bl	800870c <ld_word>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d136      	bne.n	800a148 <find_volume+0x45c>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0dc:	3301      	adds	r3, #1
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0e2:	f7fe fdf5 	bl	8008cd0 <move_window>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d12d      	bne.n	800a148 <find_volume+0x45c>
		{
			fs->fsi_flag = 0;
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	3334      	adds	r3, #52	; 0x34
 800a0f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fb06 	bl	800870c <ld_word>
 800a100:	4603      	mov	r3, r0
 800a102:	461a      	mov	r2, r3
 800a104:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a108:	429a      	cmp	r2, r3
 800a10a:	d11d      	bne.n	800a148 <find_volume+0x45c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	3334      	adds	r3, #52	; 0x34
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fb13 	bl	800873c <ld_dword>
 800a116:	4603      	mov	r3, r0
 800a118:	4a16      	ldr	r2, [pc, #88]	; (800a174 <find_volume+0x488>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d114      	bne.n	800a148 <find_volume+0x45c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	3334      	adds	r3, #52	; 0x34
 800a122:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fb08 	bl	800873c <ld_dword>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4a12      	ldr	r2, [pc, #72]	; (800a178 <find_volume+0x48c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d109      	bne.n	800a148 <find_volume+0x45c>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	3334      	adds	r3, #52	; 0x34
 800a138:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fafd 	bl	800873c <ld_dword>
 800a142:	4602      	mov	r2, r0
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a14e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a150:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <find_volume+0x490>)
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	3301      	adds	r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	4b08      	ldr	r3, [pc, #32]	; (800a17c <find_volume+0x490>)
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	4b07      	ldr	r3, [pc, #28]	; (800a17c <find_volume+0x490>)
 800a15e:	881a      	ldrh	r2, [r3, #0]
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a166:	f7fe fd4b 	bl	8008c00 <clear_lock>
#endif
	return FR_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3758      	adds	r7, #88	; 0x58
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	41615252 	.word	0x41615252
 800a178:	61417272 	.word	0x61417272
 800a17c:	20000140 	.word	0x20000140

0800a180 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a18a:	2309      	movs	r3, #9
 800a18c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d02e      	beq.n	800a1f2 <validate+0x72>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d02a      	beq.n	800a1f2 <validate+0x72>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d025      	beq.n	800a1f2 <validate+0x72>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	889a      	ldrh	r2, [r3, #4]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	88db      	ldrh	r3, [r3, #6]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d11e      	bne.n	800a1f2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fe fba7 	bl	800890c <lock_fs>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d014      	beq.n	800a1ee <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fa00 	bl	80085d0 <disk_status>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <validate+0x60>
				res = FR_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]
 800a1de:	e008      	b.n	800a1f2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fba6 	bl	8008938 <unlock_fs>
 800a1ec:	e001      	b.n	800a1f2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a1ee:	230f      	movs	r3, #15
 800a1f0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <validate+0x7e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	e000      	b.n	800a200 <validate+0x80>
 800a1fe:	2300      	movs	r3, #0
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	6013      	str	r3, [r2, #0]
	return res;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a222:	f107 0310 	add.w	r3, r7, #16
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff fcc5 	bl	8009bb6 <get_ldnumber>
 800a22c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	2b00      	cmp	r3, #0
 800a232:	da01      	bge.n	800a238 <f_mount+0x28>
 800a234:	230b      	movs	r3, #11
 800a236:	e048      	b.n	800a2ca <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a238:	4a26      	ldr	r2, [pc, #152]	; (800a2d4 <f_mount+0xc4>)
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a240:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00f      	beq.n	800a268 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a248:	69b8      	ldr	r0, [r7, #24]
 800a24a:	f7fe fcd9 	bl	8008c00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fcd4 	bl	800ac00 <ff_del_syncobj>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <f_mount+0x52>
 800a25e:	2302      	movs	r3, #2
 800a260:	e033      	b.n	800a2ca <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00f      	beq.n	800a28e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	b2da      	uxtb	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	330c      	adds	r3, #12
 800a27c:	4619      	mov	r1, r3
 800a27e:	4610      	mov	r0, r2
 800a280:	f000 fca3 	bl	800abca <ff_cre_syncobj>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <f_mount+0x7e>
 800a28a:	2302      	movs	r3, #2
 800a28c:	e01d      	b.n	800a2ca <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4910      	ldr	r1, [pc, #64]	; (800a2d4 <f_mount+0xc4>)
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <f_mount+0x94>
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d001      	beq.n	800a2a8 <f_mount+0x98>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e010      	b.n	800a2ca <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a2a8:	f107 010c 	add.w	r1, r7, #12
 800a2ac:	f107 0308 	add.w	r3, r7, #8
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff fd1a 	bl	8009cec <find_volume>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	7dfa      	ldrb	r2, [r7, #23]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fb38 	bl	8008938 <unlock_fs>
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3720      	adds	r7, #32
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000138 	.word	0x20000138

0800a2d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b098      	sub	sp, #96	; 0x60
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <f_open+0x18>
 800a2ec:	2309      	movs	r3, #9
 800a2ee:	e19b      	b.n	800a628 <f_open+0x350>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a2f8:	79fa      	ldrb	r2, [r7, #7]
 800a2fa:	f107 0110 	add.w	r1, r7, #16
 800a2fe:	f107 0308 	add.w	r3, r7, #8
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fcf2 	bl	8009cec <find_volume>
 800a308:	4603      	mov	r3, r0
 800a30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a30e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a312:	2b00      	cmp	r3, #0
 800a314:	f040 8178 	bne.w	800a608 <f_open+0x330>
		dj.obj.fs = fs;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fbd5 	bl	8009ad4 <follow_path>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a334:	2b00      	cmp	r3, #0
 800a336:	d11a      	bne.n	800a36e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a338:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a33c:	b25b      	sxtb	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	da03      	bge.n	800a34a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a342:	2306      	movs	r3, #6
 800a344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a348:	e011      	b.n	800a36e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	2b00      	cmp	r3, #0
 800a352:	bf14      	ite	ne
 800a354:	2301      	movne	r3, #1
 800a356:	2300      	moveq	r3, #0
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe fb04 	bl	8008970 <chk_lock>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	f003 031c 	and.w	r3, r3, #28
 800a374:	2b00      	cmp	r3, #0
 800a376:	d07f      	beq.n	800a478 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a384:	2b04      	cmp	r3, #4
 800a386:	d10e      	bne.n	800a3a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a388:	f7fe fb4e 	bl	8008a28 <enq_lock>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <f_open+0xc8>
 800a392:	f107 0314 	add.w	r3, r7, #20
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fa5e 	bl	8009858 <dir_register>
 800a39c:	4603      	mov	r3, r0
 800a39e:	e000      	b.n	800a3a2 <f_open+0xca>
 800a3a0:	2312      	movs	r3, #18
 800a3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	f043 0308 	orr.w	r3, r3, #8
 800a3ac:	71fb      	strb	r3, [r7, #7]
 800a3ae:	e010      	b.n	800a3d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a3b0:	7ebb      	ldrb	r3, [r7, #26]
 800a3b2:	f003 0311 	and.w	r3, r3, #17
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <f_open+0xea>
					res = FR_DENIED;
 800a3ba:	2307      	movs	r3, #7
 800a3bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3c0:	e007      	b.n	800a3d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <f_open+0xfa>
 800a3cc:	2308      	movs	r3, #8
 800a3ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a3d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d168      	bne.n	800a4ac <f_open+0x1d4>
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	f003 0308 	and.w	r3, r3, #8
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d063      	beq.n	800a4ac <f_open+0x1d4>
				dw = GET_FATTIME();
 800a3e4:	f7fd fe34 	bl	8008050 <get_fattime>
 800a3e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	330e      	adds	r3, #14
 800a3ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe f9e1 	bl	80087b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	3316      	adds	r3, #22
 800a3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe f9db 	bl	80087b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a404:	330b      	adds	r3, #11
 800a406:	2220      	movs	r2, #32
 800a408:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a40e:	4611      	mov	r1, r2
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff f930 	bl	8009676 <ld_clust>
 800a416:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a41c:	2200      	movs	r2, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff f948 	bl	80096b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	331c      	adds	r3, #28
 800a428:	2100      	movs	r1, #0
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe f9c4 	bl	80087b8 <st_dword>
					fs->wflag = 1;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2201      	movs	r2, #1
 800a434:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d037      	beq.n	800a4ac <f_open+0x1d4>
						dw = fs->winsect;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a440:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a442:	f107 0314 	add.w	r3, r7, #20
 800a446:	2200      	movs	r2, #0
 800a448:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fe8f 	bl	800916e <remove_chain>
 800a450:	4603      	mov	r3, r0
 800a452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d126      	bne.n	800a4ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fc34 	bl	8008cd0 <move_window>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a472:	3a01      	subs	r2, #1
 800a474:	611a      	str	r2, [r3, #16]
 800a476:	e019      	b.n	800a4ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d115      	bne.n	800a4ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a480:	7ebb      	ldrb	r3, [r7, #26]
 800a482:	f003 0310 	and.w	r3, r3, #16
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a48a:	2304      	movs	r3, #4
 800a48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a490:	e00c      	b.n	800a4ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <f_open+0x1d4>
 800a49c:	7ebb      	ldrb	r3, [r7, #26]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <f_open+0x1d4>
						res = FR_DENIED;
 800a4a6:	2307      	movs	r3, #7
 800a4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a4ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d128      	bne.n	800a506 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	f003 0308 	and.w	r3, r3, #8
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	f023 0301 	bic.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf14      	ite	ne
 800a4de:	2301      	movne	r3, #1
 800a4e0:	2300      	moveq	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	f107 0314 	add.w	r3, r7, #20
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe fabd 	bl	8008a6c <inc_lock>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <f_open+0x22e>
 800a500:	2302      	movs	r3, #2
 800a502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d17c      	bne.n	800a608 <f_open+0x330>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f7ff f8ae 	bl	8009676 <ld_clust>
 800a51a:	4602      	mov	r2, r0
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a522:	331c      	adds	r3, #28
 800a524:	4618      	mov	r0, r3
 800a526:	f7fe f909 	bl	800873c <ld_dword>
 800a52a:	4602      	mov	r2, r0
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	88da      	ldrh	r2, [r3, #6]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	79fa      	ldrb	r2, [r7, #7]
 800a548:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a55c:	79fb      	ldrb	r3, [r7, #7]
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b00      	cmp	r3, #0
 800a564:	d050      	beq.n	800a608 <f_open+0x330>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d04c      	beq.n	800a608 <f_open+0x330>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	895b      	ldrh	r3, [r3, #10]
 800a57a:	025b      	lsls	r3, r3, #9
 800a57c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	657b      	str	r3, [r7, #84]	; 0x54
 800a58a:	e016      	b.n	800a5ba <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a590:	4618      	mov	r0, r3
 800a592:	f7fe fc58 	bl	8008e46 <get_fat>
 800a596:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d802      	bhi.n	800a5a4 <f_open+0x2cc>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a5a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d102      	bne.n	800a5b2 <f_open+0x2da>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d103      	bne.n	800a5ca <f_open+0x2f2>
 800a5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d8e0      	bhi.n	800a58c <f_open+0x2b4>
				}
				fp->clust = clst;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5ce:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d117      	bne.n	800a608 <f_open+0x330>
 800a5d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d012      	beq.n	800a608 <f_open+0x330>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fc0e 	bl	8008e08 <clust2sect>
 800a5ec:	6478      	str	r0, [r7, #68]	; 0x44
 800a5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d103      	bne.n	800a5fc <f_open+0x324>
						res = FR_INT_ERR;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a5fa:	e005      	b.n	800a608 <f_open+0x330>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fe:	0a5a      	lsrs	r2, r3, #9
 800a600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a602:	441a      	add	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <f_open+0x33e>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a61c:	4611      	mov	r1, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fe f98a 	bl	8008938 <unlock_fs>
 800a624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3760      	adds	r7, #96	; 0x60
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f107 0208 	add.w	r2, r7, #8
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fd9d 	bl	800a180 <validate>
 800a646:	4603      	mov	r3, r0
 800a648:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a64a:	7dfb      	ldrb	r3, [r7, #23]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d14d      	bne.n	800a6ec <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	7d1b      	ldrb	r3, [r3, #20]
 800a654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d047      	beq.n	800a6ec <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a65c:	f7fd fcf8 	bl	8008050 <get_fattime>
 800a660:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f7fe fb30 	bl	8008cd0 <move_window>
 800a670:	4603      	mov	r3, r0
 800a672:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d138      	bne.n	800a6ec <f_sync+0xbc>
					dir = fp->dir_ptr;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	330b      	adds	r3, #11
 800a684:	781a      	ldrb	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	330b      	adds	r3, #11
 800a68a:	f042 0220 	orr.w	r2, r2, #32
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	461a      	mov	r2, r3
 800a69c:	68f9      	ldr	r1, [r7, #12]
 800a69e:	f7ff f809 	bl	80096b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f103 021c 	add.w	r2, r3, #28
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	f7fe f882 	bl	80087b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3316      	adds	r3, #22
 800a6b8:	6939      	ldr	r1, [r7, #16]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe f87c 	bl	80087b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3312      	adds	r3, #18
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe f85b 	bl	8008782 <st_word>
					fs->wflag = 1;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fe fb29 	bl	8008d2c <sync_fs>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7d1b      	ldrb	r3, [r3, #20]
 800a6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	7dfa      	ldrb	r2, [r7, #23]
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe f920 	bl	8008938 <unlock_fs>
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff ff90 	bl	800a630 <f_sync>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d11d      	bne.n	800a756 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f107 0208 	add.w	r2, r7, #8
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff fd2c 	bl	800a180 <validate>
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d111      	bne.n	800a756 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fa26 	bl	8008b88 <dec_lock>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f7fe f8f1 	bl	8008938 <unlock_fs>
#endif
		}
	}
	return res;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <f_opendir+0x14>
 800a770:	2309      	movs	r3, #9
 800a772:	e06a      	b.n	800a84a <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a778:	f107 010c 	add.w	r1, r7, #12
 800a77c:	463b      	mov	r3, r7
 800a77e:	2200      	movs	r2, #0
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff fab3 	bl	8009cec <find_volume>
 800a786:	4603      	mov	r3, r0
 800a788:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d14f      	bne.n	800a830 <f_opendir+0xd0>
		obj->fs = fs;
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff f99a 	bl	8009ad4 <follow_path>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d13d      	bne.n	800a826 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7b0:	b25b      	sxtb	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	db12      	blt.n	800a7dc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	799b      	ldrb	r3, [r3, #6]
 800a7ba:	f003 0310 	and.w	r3, r3, #16
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	f7fe ff53 	bl	8009676 <ld_clust>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	609a      	str	r2, [r3, #8]
 800a7d6:	e001      	b.n	800a7dc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a7d8:	2305      	movs	r3, #5
 800a7da:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d121      	bne.n	800a826 <f_opendir+0xc6>
				obj->id = fs->id;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	88da      	ldrh	r2, [r3, #6]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fe fdbb 	bl	8009368 <dir_sdi>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d114      	bne.n	800a826 <f_opendir+0xc6>
					if (obj->sclust) {
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00d      	beq.n	800a820 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a804:	2100      	movs	r1, #0
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7fe f930 	bl	8008a6c <inc_lock>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d105      	bne.n	800a826 <f_opendir+0xc6>
 800a81a:	2312      	movs	r3, #18
 800a81c:	75fb      	strb	r3, [r7, #23]
 800a81e:	e002      	b.n	800a826 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2200      	movs	r2, #0
 800a824:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	2b04      	cmp	r3, #4
 800a82a:	d101      	bne.n	800a830 <f_opendir+0xd0>
 800a82c:	2305      	movs	r3, #5
 800a82e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <f_opendir+0xdc>
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	7dfa      	ldrb	r2, [r7, #23]
 800a840:	4611      	mov	r1, r2
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe f878 	bl	8008938 <unlock_fs>
 800a848:	7dfb      	ldrb	r3, [r7, #23]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f107 0208 	add.w	r2, r7, #8
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff fc8c 	bl	800a180 <validate>
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d115      	bne.n	800a89e <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe f982 	bl	8008b88 <dec_lock>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2100      	movs	r1, #0
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe f84d 	bl	8008938 <unlock_fs>
#endif
	}
	return res;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f107 0208 	add.w	r2, r7, #8
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fc60 	bl	800a180 <validate>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d126      	bne.n	800a918 <f_readdir+0x70>
		if (!fno) {
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7fe fd48 	bl	8009368 <dir_sdi>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73fb      	strb	r3, [r7, #15]
 800a8dc:	e01c      	b.n	800a918 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a8de:	2100      	movs	r1, #0
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7fe ff07 	bl	80096f4 <dir_read>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d101      	bne.n	800a8f4 <f_readdir+0x4c>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10e      	bne.n	800a918 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7fe fffb 	bl	80098f8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a902:	2100      	movs	r1, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fe fdaa 	bl	800945e <dir_next>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b04      	cmp	r3, #4
 800a912:	d101      	bne.n	800a918 <f_readdir+0x70>
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	7bfa      	ldrb	r2, [r7, #15]
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe f80a 	bl	8008938 <unlock_fs>
 800a924:	7bfb      	ldrb	r3, [r7, #15]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b090      	sub	sp, #64	; 0x40
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800a938:	f107 010c 	add.w	r1, r7, #12
 800a93c:	1d3b      	adds	r3, r7, #4
 800a93e:	2200      	movs	r2, #0
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff f9d3 	bl	8009cec <find_volume>
 800a946:	4603      	mov	r3, r0
 800a948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800a94c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11f      	bne.n	800a994 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	f107 030c 	add.w	r3, r7, #12
 800a95a:	4611      	mov	r1, r2
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff f8b9 	bl	8009ad4 <follow_path>
 800a962:	4603      	mov	r3, r0
 800a964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800a968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a970:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a974:	b25b      	sxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	da03      	bge.n	800a982 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a97a:	2306      	movs	r3, #6
 800a97c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a980:	e008      	b.n	800a994 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <f_stat+0x66>
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe ffb2 	bl	80098f8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fd ffcb 	bl	8008938 <unlock_fs>
 800a9a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3740      	adds	r7, #64	; 0x40
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b09e      	sub	sp, #120	; 0x78
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a9ba:	f107 010c 	add.w	r1, r7, #12
 800a9be:	1d3b      	adds	r3, r7, #4
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff f992 	bl	8009cec <find_volume>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800a9d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 808e 	bne.w	800aaf8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff f875 	bl	8009ad4 <follow_path>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a9f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d108      	bne.n	800aa0a <f_unlink+0x5c>
 800a9f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd ffb6 	bl	8008970 <chk_lock>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800aa0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d172      	bne.n	800aaf8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800aa12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa16:	b25b      	sxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da03      	bge.n	800aa24 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800aa1c:	2306      	movs	r3, #6
 800aa1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800aa22:	e008      	b.n	800aa36 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800aa24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800aa30:	2307      	movs	r3, #7
 800aa32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800aa36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d134      	bne.n	800aaa8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fe16 	bl	8009676 <ld_clust>
 800aa4a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800aa4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d027      	beq.n	800aaa8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800aa5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa5e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800aa60:	f107 0310 	add.w	r3, r7, #16
 800aa64:	2100      	movs	r1, #0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fc7e 	bl	8009368 <dir_sdi>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800aa72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d116      	bne.n	800aaa8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800aa7a:	f107 0310 	add.w	r3, r7, #16
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe fe37 	bl	80096f4 <dir_read>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800aa8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <f_unlink+0xec>
 800aa94:	2307      	movs	r3, #7
 800aa96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800aa9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d102      	bne.n	800aaa8 <f_unlink+0xfa>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800aaa8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d123      	bne.n	800aaf8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800aab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe ff01 	bl	80098bc <dir_remove>
 800aaba:	4603      	mov	r3, r0
 800aabc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800aac0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10c      	bne.n	800aae2 <f_unlink+0x134>
 800aac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d009      	beq.n	800aae2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800aace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aad2:	2200      	movs	r2, #0
 800aad4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fb49 	bl	800916e <remove_chain>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800aae2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <f_unlink+0x14a>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe f91d 	bl	8008d2c <sync_fs>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd ff19 	bl	8008938 <unlock_fs>
 800ab06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3778      	adds	r7, #120	; 0x78
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ab2a:	4b1f      	ldr	r3, [pc, #124]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab2c:	7b9b      	ldrb	r3, [r3, #14]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d831      	bhi.n	800ab98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab34:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab36:	7b9b      	ldrb	r3, [r3, #14]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab3e:	2100      	movs	r1, #0
 800ab40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab42:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab44:	7b9b      	ldrb	r3, [r3, #14]
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab54:	7b9b      	ldrb	r3, [r3, #14]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab5c:	4413      	add	r3, r2
 800ab5e:	79fa      	ldrb	r2, [r7, #7]
 800ab60:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800ab62:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab64:	7b9b      	ldrb	r3, [r3, #14]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	b2d1      	uxtb	r1, r2
 800ab6c:	4a0e      	ldr	r2, [pc, #56]	; (800aba8 <FATFS_LinkDriverEx+0x94>)
 800ab6e:	7391      	strb	r1, [r2, #14]
 800ab70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab72:	7dbb      	ldrb	r3, [r7, #22]
 800ab74:	3330      	adds	r3, #48	; 0x30
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	223a      	movs	r2, #58	; 0x3a
 800ab82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	3302      	adds	r3, #2
 800ab88:	222f      	movs	r2, #47	; 0x2f
 800ab8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	3303      	adds	r3, #3
 800ab90:	2200      	movs	r2, #0
 800ab92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	20000164 	.word	0x20000164

0800abac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800abb6:	2200      	movs	r2, #0
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff ffaa 	bl	800ab14 <FATFS_LinkDriverEx>
 800abc0:	4603      	mov	r3, r0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	4603      	mov	r3, r0
 800abd2:	6039      	str	r1, [r7, #0]
 800abd4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800abd6:	2200      	movs	r2, #0
 800abd8:	2101      	movs	r1, #1
 800abda:	2001      	movs	r0, #1
 800abdc:	f000 f9cf 	bl	800af7e <osSemaphoreNew>
 800abe0:	4602      	mov	r2, r0
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	bf14      	ite	ne
 800abee:	2301      	movne	r3, #1
 800abf0:	2300      	moveq	r3, #0
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	60fb      	str	r3, [r7, #12]

    return ret;
 800abf6:	68fb      	ldr	r3, [r7, #12]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fad7 	bl	800b1bc <osSemaphoreDelete>
#endif
    return 1;
 800ac0e:	2301      	movs	r3, #1
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800ac24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fa31 	bl	800b090 <osSemaphoreAcquire>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ac34:	2301      	movs	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ac38:	68fb      	ldr	r3, [r7, #12]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa72 	bl	800b134 <osSemaphoreRelease>
#endif
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <__NVIC_SetPriority>:
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	6039      	str	r1, [r7, #0]
 800ac62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	db0a      	blt.n	800ac82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	490c      	ldr	r1, [pc, #48]	; (800aca4 <__NVIC_SetPriority+0x4c>)
 800ac72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac76:	0112      	lsls	r2, r2, #4
 800ac78:	b2d2      	uxtb	r2, r2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac80:	e00a      	b.n	800ac98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	4908      	ldr	r1, [pc, #32]	; (800aca8 <__NVIC_SetPriority+0x50>)
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	f003 030f 	and.w	r3, r3, #15
 800ac8e:	3b04      	subs	r3, #4
 800ac90:	0112      	lsls	r2, r2, #4
 800ac92:	b2d2      	uxtb	r2, r2
 800ac94:	440b      	add	r3, r1
 800ac96:	761a      	strb	r2, [r3, #24]
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	e000e100 	.word	0xe000e100
 800aca8:	e000ed00 	.word	0xe000ed00

0800acac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800acb0:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <SysTick_Handler+0x1c>)
 800acb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800acb4:	f002 ff36 	bl	800db24 <xTaskGetSchedulerState>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d001      	beq.n	800acc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800acbe:	f001 f863 	bl	800bd88 <xPortSysTickHandler>
  }
}
 800acc2:	bf00      	nop
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	e000e010 	.word	0xe000e010

0800accc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800acd0:	2100      	movs	r1, #0
 800acd2:	f06f 0004 	mvn.w	r0, #4
 800acd6:	f7ff ffbf 	bl	800ac58 <__NVIC_SetPriority>
#endif
}
 800acda:	bf00      	nop
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ace6:	f3ef 8305 	mrs	r3, IPSR
 800acea:	603b      	str	r3, [r7, #0]
  return(result);
 800acec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acf2:	f06f 0305 	mvn.w	r3, #5
 800acf6:	607b      	str	r3, [r7, #4]
 800acf8:	e00c      	b.n	800ad14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acfa:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <osKernelInitialize+0x44>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d105      	bne.n	800ad0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad02:	4b08      	ldr	r3, [pc, #32]	; (800ad24 <osKernelInitialize+0x44>)
 800ad04:	2201      	movs	r2, #1
 800ad06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	607b      	str	r3, [r7, #4]
 800ad0c:	e002      	b.n	800ad14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad14:	687b      	ldr	r3, [r7, #4]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	20000174 	.word	0x20000174

0800ad28 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ad2e:	f002 fef9 	bl	800db24 <xTaskGetSchedulerState>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <osKernelGetState+0x1a>
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d105      	bne.n	800ad48 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	607b      	str	r3, [r7, #4]
      break;
 800ad40:	e00c      	b.n	800ad5c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ad42:	2303      	movs	r3, #3
 800ad44:	607b      	str	r3, [r7, #4]
      break;
 800ad46:	e009      	b.n	800ad5c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ad48:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <osKernelGetState+0x40>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d102      	bne.n	800ad56 <osKernelGetState+0x2e>
        state = osKernelReady;
 800ad50:	2301      	movs	r3, #1
 800ad52:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ad54:	e001      	b.n	800ad5a <osKernelGetState+0x32>
        state = osKernelInactive;
 800ad56:	2300      	movs	r3, #0
 800ad58:	607b      	str	r3, [r7, #4]
      break;
 800ad5a:	bf00      	nop
  }

  return (state);
 800ad5c:	687b      	ldr	r3, [r7, #4]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000174 	.word	0x20000174

0800ad6c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad72:	f3ef 8305 	mrs	r3, IPSR
 800ad76:	603b      	str	r3, [r7, #0]
  return(result);
 800ad78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad7e:	f06f 0305 	mvn.w	r3, #5
 800ad82:	607b      	str	r3, [r7, #4]
 800ad84:	e010      	b.n	800ada8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad86:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <osKernelStart+0x48>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d109      	bne.n	800ada2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad8e:	f7ff ff9d 	bl	800accc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <osKernelStart+0x48>)
 800ad94:	2202      	movs	r2, #2
 800ad96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad98:	f002 fa6a 	bl	800d270 <vTaskStartScheduler>
      stat = osOK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	607b      	str	r3, [r7, #4]
 800ada0:	e002      	b.n	800ada8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ada2:	f04f 33ff 	mov.w	r3, #4294967295
 800ada6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ada8:	687b      	ldr	r3, [r7, #4]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000174 	.word	0x20000174

0800adb8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adbe:	f3ef 8305 	mrs	r3, IPSR
 800adc2:	603b      	str	r3, [r7, #0]
  return(result);
 800adc4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800adca:	f002 fb73 	bl	800d4b4 <xTaskGetTickCountFromISR>
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	e002      	b.n	800add8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800add2:	f002 fb5f 	bl	800d494 <xTaskGetTickCount>
 800add6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800add8:	687b      	ldr	r3, [r7, #4]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b08e      	sub	sp, #56	; 0x38
 800ade6:	af04      	add	r7, sp, #16
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf2:	f3ef 8305 	mrs	r3, IPSR
 800adf6:	617b      	str	r3, [r7, #20]
  return(result);
 800adf8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d17e      	bne.n	800aefc <osThreadNew+0x11a>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d07b      	beq.n	800aefc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae04:	2380      	movs	r3, #128	; 0x80
 800ae06:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae08:	2318      	movs	r3, #24
 800ae0a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae10:	f04f 33ff 	mov.w	r3, #4294967295
 800ae14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d045      	beq.n	800aea8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <osThreadNew+0x48>
        name = attr->name;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d008      	beq.n	800ae50 <osThreadNew+0x6e>
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	2b38      	cmp	r3, #56	; 0x38
 800ae42:	d805      	bhi.n	800ae50 <osThreadNew+0x6e>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <osThreadNew+0x72>
        return (NULL);
 800ae50:	2300      	movs	r3, #0
 800ae52:	e054      	b.n	800aefe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	089b      	lsrs	r3, r3, #2
 800ae62:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00e      	beq.n	800ae8a <osThreadNew+0xa8>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	2b5b      	cmp	r3, #91	; 0x5b
 800ae72:	d90a      	bls.n	800ae8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d006      	beq.n	800ae8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <osThreadNew+0xa8>
        mem = 1;
 800ae84:	2301      	movs	r3, #1
 800ae86:	61bb      	str	r3, [r7, #24]
 800ae88:	e010      	b.n	800aeac <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10c      	bne.n	800aeac <osThreadNew+0xca>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d108      	bne.n	800aeac <osThreadNew+0xca>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <osThreadNew+0xca>
          mem = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61bb      	str	r3, [r7, #24]
 800aea6:	e001      	b.n	800aeac <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d110      	bne.n	800aed4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeba:	9202      	str	r2, [sp, #8]
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	6a3a      	ldr	r2, [r7, #32]
 800aec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f001 fffb 	bl	800cec4 <xTaskCreateStatic>
 800aece:	4603      	mov	r3, r0
 800aed0:	613b      	str	r3, [r7, #16]
 800aed2:	e013      	b.n	800aefc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d110      	bne.n	800aefc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	b29a      	uxth	r2, r3
 800aede:	f107 0310 	add.w	r3, r7, #16
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f002 f846 	bl	800cf7e <xTaskCreate>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d001      	beq.n	800aefc <osThreadNew+0x11a>
            hTask = NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aefc:	693b      	ldr	r3, [r7, #16]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af0e:	f3ef 8305 	mrs	r3, IPSR
 800af12:	603b      	str	r3, [r7, #0]
  return(result);
 800af14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <osThreadYield+0x1a>
    stat = osErrorISR;
 800af1a:	f06f 0305 	mvn.w	r3, #5
 800af1e:	607b      	str	r3, [r7, #4]
 800af20:	e009      	b.n	800af36 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800af22:	2300      	movs	r3, #0
 800af24:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800af26:	4b07      	ldr	r3, [pc, #28]	; (800af44 <osThreadYield+0x3c>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800af36:	687b      	ldr	r3, [r7, #4]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af50:	f3ef 8305 	mrs	r3, IPSR
 800af54:	60bb      	str	r3, [r7, #8]
  return(result);
 800af56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <osDelay+0x1c>
    stat = osErrorISR;
 800af5c:	f06f 0305 	mvn.w	r3, #5
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e007      	b.n	800af74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af64:	2300      	movs	r3, #0
 800af66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d002      	beq.n	800af74 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f002 f94a 	bl	800d208 <vTaskDelay>
    }
  }

  return (stat);
 800af74:	68fb      	ldr	r3, [r7, #12]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af7e:	b580      	push	{r7, lr}
 800af80:	b08a      	sub	sp, #40	; 0x28
 800af82:	af02      	add	r7, sp, #8
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	60b9      	str	r1, [r7, #8]
 800af88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af8e:	f3ef 8305 	mrs	r3, IPSR
 800af92:	613b      	str	r3, [r7, #16]
  return(result);
 800af94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af96:	2b00      	cmp	r3, #0
 800af98:	d175      	bne.n	800b086 <osSemaphoreNew+0x108>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d072      	beq.n	800b086 <osSemaphoreNew+0x108>
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d86e      	bhi.n	800b086 <osSemaphoreNew+0x108>
    mem = -1;
 800afa8:	f04f 33ff 	mov.w	r3, #4294967295
 800afac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d015      	beq.n	800afe0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d006      	beq.n	800afca <osSemaphoreNew+0x4c>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	2b4f      	cmp	r3, #79	; 0x4f
 800afc2:	d902      	bls.n	800afca <osSemaphoreNew+0x4c>
        mem = 1;
 800afc4:	2301      	movs	r3, #1
 800afc6:	61bb      	str	r3, [r7, #24]
 800afc8:	e00c      	b.n	800afe4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d108      	bne.n	800afe4 <osSemaphoreNew+0x66>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <osSemaphoreNew+0x66>
          mem = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	61bb      	str	r3, [r7, #24]
 800afde:	e001      	b.n	800afe4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afea:	d04c      	beq.n	800b086 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d128      	bne.n	800b044 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d10a      	bne.n	800b00e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	2203      	movs	r2, #3
 800affe:	9200      	str	r2, [sp, #0]
 800b000:	2200      	movs	r2, #0
 800b002:	2100      	movs	r1, #0
 800b004:	2001      	movs	r0, #1
 800b006:	f000 ffb7 	bl	800bf78 <xQueueGenericCreateStatic>
 800b00a:	61f8      	str	r0, [r7, #28]
 800b00c:	e005      	b.n	800b01a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b00e:	2203      	movs	r2, #3
 800b010:	2100      	movs	r1, #0
 800b012:	2001      	movs	r0, #1
 800b014:	f001 f828 	bl	800c068 <xQueueGenericCreate>
 800b018:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d022      	beq.n	800b066 <osSemaphoreNew+0xe8>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01f      	beq.n	800b066 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b026:	2300      	movs	r3, #0
 800b028:	2200      	movs	r2, #0
 800b02a:	2100      	movs	r1, #0
 800b02c:	69f8      	ldr	r0, [r7, #28]
 800b02e:	f001 f8e3 	bl	800c1f8 <xQueueGenericSend>
 800b032:	4603      	mov	r3, r0
 800b034:	2b01      	cmp	r3, #1
 800b036:	d016      	beq.n	800b066 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b038:	69f8      	ldr	r0, [r7, #28]
 800b03a:	f001 fd6f 	bl	800cb1c <vQueueDelete>
            hSemaphore = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
 800b042:	e010      	b.n	800b066 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d108      	bne.n	800b05c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	461a      	mov	r2, r3
 800b050:	68b9      	ldr	r1, [r7, #8]
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f001 f865 	bl	800c122 <xQueueCreateCountingSemaphoreStatic>
 800b058:	61f8      	str	r0, [r7, #28]
 800b05a:	e004      	b.n	800b066 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f001 f896 	bl	800c190 <xQueueCreateCountingSemaphore>
 800b064:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00c      	beq.n	800b086 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <osSemaphoreNew+0xfc>
          name = attr->name;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	e001      	b.n	800b07e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b07e:	6979      	ldr	r1, [r7, #20]
 800b080:	69f8      	ldr	r0, [r7, #28]
 800b082:	f001 fe97 	bl	800cdb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b086:	69fb      	ldr	r3, [r7, #28]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3720      	adds	r7, #32
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d103      	bne.n	800b0b0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b0a8:	f06f 0303 	mvn.w	r3, #3
 800b0ac:	617b      	str	r3, [r7, #20]
 800b0ae:	e039      	b.n	800b124 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0b0:	f3ef 8305 	mrs	r3, IPSR
 800b0b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d022      	beq.n	800b102 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b0c2:	f06f 0303 	mvn.w	r3, #3
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	e02c      	b.n	800b124 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b0ce:	f107 0308 	add.w	r3, r7, #8
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6938      	ldr	r0, [r7, #16]
 800b0d8:	f001 fca0 	bl	800ca1c <xQueueReceiveFromISR>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d003      	beq.n	800b0ea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b0e2:	f06f 0302 	mvn.w	r3, #2
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e01c      	b.n	800b124 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d019      	beq.n	800b124 <osSemaphoreAcquire+0x94>
 800b0f0:	4b0f      	ldr	r3, [pc, #60]	; (800b130 <osSemaphoreAcquire+0xa0>)
 800b0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	e010      	b.n	800b124 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6938      	ldr	r0, [r7, #16]
 800b106:	f001 fb7d 	bl	800c804 <xQueueSemaphoreTake>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d009      	beq.n	800b124 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b116:	f06f 0301 	mvn.w	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e002      	b.n	800b124 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b11e:	f06f 0302 	mvn.w	r3, #2
 800b122:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b124:	697b      	ldr	r3, [r7, #20]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d103      	bne.n	800b152 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b14a:	f06f 0303 	mvn.w	r3, #3
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e02c      	b.n	800b1ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b152:	f3ef 8305 	mrs	r3, IPSR
 800b156:	60fb      	str	r3, [r7, #12]
  return(result);
 800b158:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01a      	beq.n	800b194 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b15e:	2300      	movs	r3, #0
 800b160:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b162:	f107 0308 	add.w	r3, r7, #8
 800b166:	4619      	mov	r1, r3
 800b168:	6938      	ldr	r0, [r7, #16]
 800b16a:	f001 f9de 	bl	800c52a <xQueueGiveFromISR>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b01      	cmp	r3, #1
 800b172:	d003      	beq.n	800b17c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b174:	f06f 0302 	mvn.w	r3, #2
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	e017      	b.n	800b1ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d014      	beq.n	800b1ac <osSemaphoreRelease+0x78>
 800b182:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <osSemaphoreRelease+0x84>)
 800b184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	e00b      	b.n	800b1ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b194:	2300      	movs	r3, #0
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	6938      	ldr	r0, [r7, #16]
 800b19c:	f001 f82c 	bl	800c1f8 <xQueueGenericSend>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d002      	beq.n	800b1ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b1a6:	f06f 0302 	mvn.w	r3, #2
 800b1aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b1ac:	697b      	ldr	r3, [r7, #20]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	e000ed04 	.word	0xe000ed04

0800b1bc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c8:	f3ef 8305 	mrs	r3, IPSR
 800b1cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b1d4:	f06f 0305 	mvn.w	r3, #5
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	e00e      	b.n	800b1fa <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d103      	bne.n	800b1ea <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b1e2:	f06f 0303 	mvn.w	r3, #3
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	e007      	b.n	800b1fa <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f001 fe0c 	bl	800ce08 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b1f4:	6938      	ldr	r0, [r7, #16]
 800b1f6:	f001 fc91 	bl	800cb1c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b1fa:	697b      	ldr	r3, [r7, #20]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3718      	adds	r7, #24
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	; 0x28
 800b208:	af02      	add	r7, sp, #8
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b210:	2300      	movs	r3, #0
 800b212:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b214:	f3ef 8305 	mrs	r3, IPSR
 800b218:	613b      	str	r3, [r7, #16]
  return(result);
 800b21a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d15f      	bne.n	800b2e0 <osMessageQueueNew+0xdc>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d05c      	beq.n	800b2e0 <osMessageQueueNew+0xdc>
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d059      	beq.n	800b2e0 <osMessageQueueNew+0xdc>
    mem = -1;
 800b22c:	f04f 33ff 	mov.w	r3, #4294967295
 800b230:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d029      	beq.n	800b28c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d012      	beq.n	800b266 <osMessageQueueNew+0x62>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	2b4f      	cmp	r3, #79	; 0x4f
 800b246:	d90e      	bls.n	800b266 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	695a      	ldr	r2, [r3, #20]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	fb01 f303 	mul.w	r3, r1, r3
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d302      	bcc.n	800b266 <osMessageQueueNew+0x62>
        mem = 1;
 800b260:	2301      	movs	r3, #1
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	e014      	b.n	800b290 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d110      	bne.n	800b290 <osMessageQueueNew+0x8c>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10c      	bne.n	800b290 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d108      	bne.n	800b290 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d104      	bne.n	800b290 <osMessageQueueNew+0x8c>
          mem = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	61bb      	str	r3, [r7, #24]
 800b28a:	e001      	b.n	800b290 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d10b      	bne.n	800b2ae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	691a      	ldr	r2, [r3, #16]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	2100      	movs	r1, #0
 800b2a0:	9100      	str	r1, [sp, #0]
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 fe67 	bl	800bf78 <xQueueGenericCreateStatic>
 800b2aa:	61f8      	str	r0, [r7, #28]
 800b2ac:	e008      	b.n	800b2c0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d105      	bne.n	800b2c0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 fed5 	bl	800c068 <xQueueGenericCreate>
 800b2be:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00c      	beq.n	800b2e0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d003      	beq.n	800b2d4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	e001      	b.n	800b2d8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b2d8:	6979      	ldr	r1, [r7, #20]
 800b2da:	69f8      	ldr	r0, [r7, #28]
 800b2dc:	f001 fd6a 	bl	800cdb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b2e0:	69fb      	ldr	r3, [r7, #28]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3720      	adds	r7, #32
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b300:	2300      	movs	r3, #0
 800b302:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b304:	f3ef 8305 	mrs	r3, IPSR
 800b308:	617b      	str	r3, [r7, #20]
  return(result);
 800b30a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d028      	beq.n	800b362 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <osMessageQueuePut+0x36>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <osMessageQueuePut+0x36>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b322:	f06f 0303 	mvn.w	r3, #3
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	e038      	b.n	800b39c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b32a:	2300      	movs	r3, #0
 800b32c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b32e:	f107 0210 	add.w	r2, r7, #16
 800b332:	2300      	movs	r3, #0
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	69b8      	ldr	r0, [r7, #24]
 800b338:	f001 f85c 	bl	800c3f4 <xQueueGenericSendFromISR>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d003      	beq.n	800b34a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b342:	f06f 0302 	mvn.w	r3, #2
 800b346:	61fb      	str	r3, [r7, #28]
 800b348:	e028      	b.n	800b39c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d025      	beq.n	800b39c <osMessageQueuePut+0xb0>
 800b350:	4b15      	ldr	r3, [pc, #84]	; (800b3a8 <osMessageQueuePut+0xbc>)
 800b352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	e01c      	b.n	800b39c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <osMessageQueuePut+0x82>
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d103      	bne.n	800b376 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b36e:	f06f 0303 	mvn.w	r3, #3
 800b372:	61fb      	str	r3, [r7, #28]
 800b374:	e012      	b.n	800b39c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b376:	2300      	movs	r3, #0
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	69b8      	ldr	r0, [r7, #24]
 800b37e:	f000 ff3b 	bl	800c1f8 <xQueueGenericSend>
 800b382:	4603      	mov	r3, r0
 800b384:	2b01      	cmp	r3, #1
 800b386:	d009      	beq.n	800b39c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b38e:	f06f 0301 	mvn.w	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	e002      	b.n	800b39c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b396:	f06f 0302 	mvn.w	r3, #2
 800b39a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b39c:	69fb      	ldr	r3, [r7, #28]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	e000ed04 	.word	0xe000ed04

0800b3ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3c2:	f3ef 8305 	mrs	r3, IPSR
 800b3c6:	617b      	str	r3, [r7, #20]
  return(result);
 800b3c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d028      	beq.n	800b420 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <osMessageQueueGet+0x34>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <osMessageQueueGet+0x34>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b3e0:	f06f 0303 	mvn.w	r3, #3
 800b3e4:	61fb      	str	r3, [r7, #28]
 800b3e6:	e037      	b.n	800b458 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b3ec:	f107 0310 	add.w	r3, r7, #16
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	68b9      	ldr	r1, [r7, #8]
 800b3f4:	69b8      	ldr	r0, [r7, #24]
 800b3f6:	f001 fb11 	bl	800ca1c <xQueueReceiveFromISR>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d003      	beq.n	800b408 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b400:	f06f 0302 	mvn.w	r3, #2
 800b404:	61fb      	str	r3, [r7, #28]
 800b406:	e027      	b.n	800b458 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d024      	beq.n	800b458 <osMessageQueueGet+0xac>
 800b40e:	4b15      	ldr	r3, [pc, #84]	; (800b464 <osMessageQueueGet+0xb8>)
 800b410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	e01b      	b.n	800b458 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <osMessageQueueGet+0x80>
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d103      	bne.n	800b434 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b42c:	f06f 0303 	mvn.w	r3, #3
 800b430:	61fb      	str	r3, [r7, #28]
 800b432:	e011      	b.n	800b458 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	69b8      	ldr	r0, [r7, #24]
 800b43a:	f001 f903 	bl	800c644 <xQueueReceive>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b01      	cmp	r3, #1
 800b442:	d009      	beq.n	800b458 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b44a:	f06f 0301 	mvn.w	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	e002      	b.n	800b458 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b452:	f06f 0302 	mvn.w	r3, #2
 800b456:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b458:	69fb      	ldr	r3, [r7, #28]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3720      	adds	r7, #32
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4a07      	ldr	r2, [pc, #28]	; (800b494 <vApplicationGetIdleTaskMemory+0x2c>)
 800b478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	4a06      	ldr	r2, [pc, #24]	; (800b498 <vApplicationGetIdleTaskMemory+0x30>)
 800b47e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2280      	movs	r2, #128	; 0x80
 800b484:	601a      	str	r2, [r3, #0]
}
 800b486:	bf00      	nop
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	20000178 	.word	0x20000178
 800b498:	200001d4 	.word	0x200001d4

0800b49c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4a07      	ldr	r2, [pc, #28]	; (800b4c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b4ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	4a06      	ldr	r2, [pc, #24]	; (800b4cc <vApplicationGetTimerTaskMemory+0x30>)
 800b4b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ba:	601a      	str	r2, [r3, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	200003d4 	.word	0x200003d4
 800b4cc:	20000430 	.word	0x20000430

0800b4d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	; 0x28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4dc:	f001 ff2e 	bl	800d33c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4e0:	4b5b      	ldr	r3, [pc, #364]	; (800b650 <pvPortMalloc+0x180>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4e8:	f000 f920 	bl	800b72c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4ec:	4b59      	ldr	r3, [pc, #356]	; (800b654 <pvPortMalloc+0x184>)
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f040 8093 	bne.w	800b620 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01d      	beq.n	800b53c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b500:	2208      	movs	r2, #8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4413      	add	r3, r2
 800b506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f003 0307 	and.w	r3, r3, #7
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d014      	beq.n	800b53c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f023 0307 	bic.w	r3, r3, #7
 800b518:	3308      	adds	r3, #8
 800b51a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d06e      	beq.n	800b620 <pvPortMalloc+0x150>
 800b542:	4b45      	ldr	r3, [pc, #276]	; (800b658 <pvPortMalloc+0x188>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d869      	bhi.n	800b620 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b54c:	4b43      	ldr	r3, [pc, #268]	; (800b65c <pvPortMalloc+0x18c>)
 800b54e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b550:	4b42      	ldr	r3, [pc, #264]	; (800b65c <pvPortMalloc+0x18c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b556:	e004      	b.n	800b562 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d903      	bls.n	800b574 <pvPortMalloc+0xa4>
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f1      	bne.n	800b558 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b574:	4b36      	ldr	r3, [pc, #216]	; (800b650 <pvPortMalloc+0x180>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d050      	beq.n	800b620 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2208      	movs	r2, #8
 800b584:	4413      	add	r3, r2
 800b586:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	1ad2      	subs	r2, r2, r3
 800b598:	2308      	movs	r3, #8
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d91f      	bls.n	800b5e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	f003 0307 	and.w	r3, r3, #7
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00a      	beq.n	800b5c8 <pvPortMalloc+0xf8>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	613b      	str	r3, [r7, #16]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	1ad2      	subs	r2, r2, r3
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5da:	69b8      	ldr	r0, [r7, #24]
 800b5dc:	f000 f908 	bl	800b7f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5e0:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <pvPortMalloc+0x188>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	4a1b      	ldr	r2, [pc, #108]	; (800b658 <pvPortMalloc+0x188>)
 800b5ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5ee:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <pvPortMalloc+0x188>)
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <pvPortMalloc+0x190>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d203      	bcs.n	800b602 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5fa:	4b17      	ldr	r3, [pc, #92]	; (800b658 <pvPortMalloc+0x188>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a18      	ldr	r2, [pc, #96]	; (800b660 <pvPortMalloc+0x190>)
 800b600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	4b13      	ldr	r3, [pc, #76]	; (800b654 <pvPortMalloc+0x184>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b616:	4b13      	ldr	r3, [pc, #76]	; (800b664 <pvPortMalloc+0x194>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3301      	adds	r3, #1
 800b61c:	4a11      	ldr	r2, [pc, #68]	; (800b664 <pvPortMalloc+0x194>)
 800b61e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b620:	f001 fe9a 	bl	800d358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <pvPortMalloc+0x174>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	60fb      	str	r3, [r7, #12]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <pvPortMalloc+0x172>
	return pvReturn;
 800b644:	69fb      	ldr	r3, [r7, #28]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3728      	adds	r7, #40	; 0x28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20004438 	.word	0x20004438
 800b654:	2000444c 	.word	0x2000444c
 800b658:	2000443c 	.word	0x2000443c
 800b65c:	20004430 	.word	0x20004430
 800b660:	20004440 	.word	0x20004440
 800b664:	20004444 	.word	0x20004444

0800b668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d04d      	beq.n	800b716 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b67a:	2308      	movs	r3, #8
 800b67c:	425b      	negs	r3, r3
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4413      	add	r3, r2
 800b682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	4b24      	ldr	r3, [pc, #144]	; (800b720 <vPortFree+0xb8>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4013      	ands	r3, r2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10a      	bne.n	800b6ac <vPortFree+0x44>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	60fb      	str	r3, [r7, #12]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <vPortFree+0x62>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	60bb      	str	r3, [r7, #8]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	4b14      	ldr	r3, [pc, #80]	; (800b720 <vPortFree+0xb8>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01e      	beq.n	800b716 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d11a      	bne.n	800b716 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	4b0e      	ldr	r3, [pc, #56]	; (800b720 <vPortFree+0xb8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	43db      	mvns	r3, r3
 800b6ea:	401a      	ands	r2, r3
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6f0:	f001 fe24 	bl	800d33c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <vPortFree+0xbc>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	4a09      	ldr	r2, [pc, #36]	; (800b724 <vPortFree+0xbc>)
 800b700:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b702:	6938      	ldr	r0, [r7, #16]
 800b704:	f000 f874 	bl	800b7f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b708:	4b07      	ldr	r3, [pc, #28]	; (800b728 <vPortFree+0xc0>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3301      	adds	r3, #1
 800b70e:	4a06      	ldr	r2, [pc, #24]	; (800b728 <vPortFree+0xc0>)
 800b710:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b712:	f001 fe21 	bl	800d358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b716:	bf00      	nop
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	2000444c 	.word	0x2000444c
 800b724:	2000443c 	.word	0x2000443c
 800b728:	20004448 	.word	0x20004448

0800b72c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b732:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b738:	4b27      	ldr	r3, [pc, #156]	; (800b7d8 <prvHeapInit+0xac>)
 800b73a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f003 0307 	and.w	r3, r3, #7
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00c      	beq.n	800b760 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3307      	adds	r3, #7
 800b74a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 0307 	bic.w	r3, r3, #7
 800b752:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	4a1f      	ldr	r2, [pc, #124]	; (800b7d8 <prvHeapInit+0xac>)
 800b75c:	4413      	add	r3, r2
 800b75e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b764:	4a1d      	ldr	r2, [pc, #116]	; (800b7dc <prvHeapInit+0xb0>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b76a:	4b1c      	ldr	r3, [pc, #112]	; (800b7dc <prvHeapInit+0xb0>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	4413      	add	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b778:	2208      	movs	r2, #8
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f023 0307 	bic.w	r3, r3, #7
 800b786:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	4a15      	ldr	r2, [pc, #84]	; (800b7e0 <prvHeapInit+0xb4>)
 800b78c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b78e:	4b14      	ldr	r3, [pc, #80]	; (800b7e0 <prvHeapInit+0xb4>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2200      	movs	r2, #0
 800b794:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b796:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <prvHeapInit+0xb4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7ac:	4b0c      	ldr	r3, [pc, #48]	; (800b7e0 <prvHeapInit+0xb4>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4a0a      	ldr	r2, [pc, #40]	; (800b7e4 <prvHeapInit+0xb8>)
 800b7ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	4a09      	ldr	r2, [pc, #36]	; (800b7e8 <prvHeapInit+0xbc>)
 800b7c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <prvHeapInit+0xc0>)
 800b7c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b7ca:	601a      	str	r2, [r3, #0]
}
 800b7cc:	bf00      	nop
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	20000830 	.word	0x20000830
 800b7dc:	20004430 	.word	0x20004430
 800b7e0:	20004438 	.word	0x20004438
 800b7e4:	20004440 	.word	0x20004440
 800b7e8:	2000443c 	.word	0x2000443c
 800b7ec:	2000444c 	.word	0x2000444c

0800b7f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7f8:	4b28      	ldr	r3, [pc, #160]	; (800b89c <prvInsertBlockIntoFreeList+0xac>)
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	e002      	b.n	800b804 <prvInsertBlockIntoFreeList+0x14>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60fb      	str	r3, [r7, #12]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d8f7      	bhi.n	800b7fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d108      	bne.n	800b832 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	441a      	add	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	441a      	add	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d118      	bne.n	800b878 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <prvInsertBlockIntoFreeList+0xb0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d00d      	beq.n	800b86e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	441a      	add	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	e008      	b.n	800b880 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b86e:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <prvInsertBlockIntoFreeList+0xb0>)
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	e003      	b.n	800b880 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	429a      	cmp	r2, r3
 800b886:	d002      	beq.n	800b88e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b88e:	bf00      	nop
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	20004430 	.word	0x20004430
 800b8a0:	20004438 	.word	0x20004438

0800b8a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f103 0208 	add.w	r2, r3, #8
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f103 0208 	add.w	r2, r3, #8
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f103 0208 	add.w	r2, r3, #8
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8f2:	bf00      	nop
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8fe:	b480      	push	{r7}
 800b900:	b085      	sub	sp, #20
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	689a      	ldr	r2, [r3, #8]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	683a      	ldr	r2, [r7, #0]
 800b922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	1c5a      	adds	r2, r3, #1
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	601a      	str	r2, [r3, #0]
}
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95c:	d103      	bne.n	800b966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	e00c      	b.n	800b980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	3308      	adds	r3, #8
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	e002      	b.n	800b974 <vListInsert+0x2e>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d2f6      	bcs.n	800b96e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	601a      	str	r2, [r3, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	6892      	ldr	r2, [r2, #8]
 800b9ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	6852      	ldr	r2, [r2, #4]
 800b9d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d103      	bne.n	800b9ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	1e5a      	subs	r2, r3, #1
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	3b04      	subs	r3, #4
 800ba1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3b04      	subs	r3, #4
 800ba2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f023 0201 	bic.w	r2, r3, #1
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3b04      	subs	r3, #4
 800ba3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba3c:	4a0c      	ldr	r2, [pc, #48]	; (800ba70 <pxPortInitialiseStack+0x64>)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3b14      	subs	r3, #20
 800ba46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3b04      	subs	r3, #4
 800ba52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f06f 0202 	mvn.w	r2, #2
 800ba5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3b20      	subs	r3, #32
 800ba60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba62:	68fb      	ldr	r3, [r7, #12]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	0800ba75 	.word	0x0800ba75

0800ba74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba7e:	4b12      	ldr	r3, [pc, #72]	; (800bac8 <prvTaskExitError+0x54>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba86:	d00a      	beq.n	800ba9e <prvTaskExitError+0x2a>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	60fb      	str	r3, [r7, #12]
}
 800ba9a:	bf00      	nop
 800ba9c:	e7fe      	b.n	800ba9c <prvTaskExitError+0x28>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	60bb      	str	r3, [r7, #8]
}
 800bab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bab2:	bf00      	nop
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0fc      	beq.n	800bab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	20000024 	.word	0x20000024
 800bacc:	00000000 	.word	0x00000000

0800bad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <pxCurrentTCBConst2>)
 800bad2:	6819      	ldr	r1, [r3, #0]
 800bad4:	6808      	ldr	r0, [r1, #0]
 800bad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bada:	f380 8809 	msr	PSP, r0
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f04f 0000 	mov.w	r0, #0
 800bae6:	f380 8811 	msr	BASEPRI, r0
 800baea:	4770      	bx	lr
 800baec:	f3af 8000 	nop.w

0800baf0 <pxCurrentTCBConst2>:
 800baf0:	20004458 	.word	0x20004458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop

0800baf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800baf8:	4808      	ldr	r0, [pc, #32]	; (800bb1c <prvPortStartFirstTask+0x24>)
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	6800      	ldr	r0, [r0, #0]
 800bafe:	f380 8808 	msr	MSP, r0
 800bb02:	f04f 0000 	mov.w	r0, #0
 800bb06:	f380 8814 	msr	CONTROL, r0
 800bb0a:	b662      	cpsie	i
 800bb0c:	b661      	cpsie	f
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	df00      	svc	0
 800bb18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb1a:	bf00      	nop
 800bb1c:	e000ed08 	.word	0xe000ed08

0800bb20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb26:	4b46      	ldr	r3, [pc, #280]	; (800bc40 <xPortStartScheduler+0x120>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a46      	ldr	r2, [pc, #280]	; (800bc44 <xPortStartScheduler+0x124>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d10a      	bne.n	800bb46 <xPortStartScheduler+0x26>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	613b      	str	r3, [r7, #16]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb46:	4b3e      	ldr	r3, [pc, #248]	; (800bc40 <xPortStartScheduler+0x120>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a3f      	ldr	r2, [pc, #252]	; (800bc48 <xPortStartScheduler+0x128>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10a      	bne.n	800bb66 <xPortStartScheduler+0x46>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60fb      	str	r3, [r7, #12]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb66:	4b39      	ldr	r3, [pc, #228]	; (800bc4c <xPortStartScheduler+0x12c>)
 800bb68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	22ff      	movs	r2, #255	; 0xff
 800bb76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	4b31      	ldr	r3, [pc, #196]	; (800bc50 <xPortStartScheduler+0x130>)
 800bb8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb8e:	4b31      	ldr	r3, [pc, #196]	; (800bc54 <xPortStartScheduler+0x134>)
 800bb90:	2207      	movs	r2, #7
 800bb92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb94:	e009      	b.n	800bbaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb96:	4b2f      	ldr	r3, [pc, #188]	; (800bc54 <xPortStartScheduler+0x134>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	4a2d      	ldr	r2, [pc, #180]	; (800bc54 <xPortStartScheduler+0x134>)
 800bb9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb2:	2b80      	cmp	r3, #128	; 0x80
 800bbb4:	d0ef      	beq.n	800bb96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbb6:	4b27      	ldr	r3, [pc, #156]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f1c3 0307 	rsb	r3, r3, #7
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	d00a      	beq.n	800bbd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	60bb      	str	r3, [r7, #8]
}
 800bbd4:	bf00      	nop
 800bbd6:	e7fe      	b.n	800bbd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbd8:	4b1e      	ldr	r3, [pc, #120]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	021b      	lsls	r3, r3, #8
 800bbde:	4a1d      	ldr	r2, [pc, #116]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbe2:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbea:	4a1a      	ldr	r2, [pc, #104]	; (800bc54 <xPortStartScheduler+0x134>)
 800bbec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbf6:	4b18      	ldr	r3, [pc, #96]	; (800bc58 <xPortStartScheduler+0x138>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <xPortStartScheduler+0x138>)
 800bbfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc02:	4b15      	ldr	r3, [pc, #84]	; (800bc58 <xPortStartScheduler+0x138>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a14      	ldr	r2, [pc, #80]	; (800bc58 <xPortStartScheduler+0x138>)
 800bc08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc0e:	f000 f8dd 	bl	800bdcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc12:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <xPortStartScheduler+0x13c>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc18:	f000 f8fc 	bl	800be14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc1c:	4b10      	ldr	r3, [pc, #64]	; (800bc60 <xPortStartScheduler+0x140>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a0f      	ldr	r2, [pc, #60]	; (800bc60 <xPortStartScheduler+0x140>)
 800bc22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc28:	f7ff ff66 	bl	800baf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc2c:	f001 fd0e 	bl	800d64c <vTaskSwitchContext>
	prvTaskExitError();
 800bc30:	f7ff ff20 	bl	800ba74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	e000ed00 	.word	0xe000ed00
 800bc44:	410fc271 	.word	0x410fc271
 800bc48:	410fc270 	.word	0x410fc270
 800bc4c:	e000e400 	.word	0xe000e400
 800bc50:	20004450 	.word	0x20004450
 800bc54:	20004454 	.word	0x20004454
 800bc58:	e000ed20 	.word	0xe000ed20
 800bc5c:	20000024 	.word	0x20000024
 800bc60:	e000ef34 	.word	0xe000ef34

0800bc64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	607b      	str	r3, [r7, #4]
}
 800bc7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc7e:	4b0f      	ldr	r3, [pc, #60]	; (800bcbc <vPortEnterCritical+0x58>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3301      	adds	r3, #1
 800bc84:	4a0d      	ldr	r2, [pc, #52]	; (800bcbc <vPortEnterCritical+0x58>)
 800bc86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc88:	4b0c      	ldr	r3, [pc, #48]	; (800bcbc <vPortEnterCritical+0x58>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d10f      	bne.n	800bcb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc90:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <vPortEnterCritical+0x5c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	603b      	str	r3, [r7, #0]
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <vPortEnterCritical+0x4a>
	}
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	20000024 	.word	0x20000024
 800bcc0:	e000ed04 	.word	0xe000ed04

0800bcc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcca:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <vPortExitCritical+0x50>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <vPortExitCritical+0x24>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	607b      	str	r3, [r7, #4]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <vPortExitCritical+0x50>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	4a09      	ldr	r2, [pc, #36]	; (800bd14 <vPortExitCritical+0x50>)
 800bcf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcf2:	4b08      	ldr	r3, [pc, #32]	; (800bd14 <vPortExitCritical+0x50>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d105      	bne.n	800bd06 <vPortExitCritical+0x42>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd06:	bf00      	nop
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20000024 	.word	0x20000024
	...

0800bd20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd20:	f3ef 8009 	mrs	r0, PSP
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	4b15      	ldr	r3, [pc, #84]	; (800bd80 <pxCurrentTCBConst>)
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	f01e 0f10 	tst.w	lr, #16
 800bd30:	bf08      	it	eq
 800bd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3a:	6010      	str	r0, [r2, #0]
 800bd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd44:	f380 8811 	msr	BASEPRI, r0
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f001 fc7c 	bl	800d64c <vTaskSwitchContext>
 800bd54:	f04f 0000 	mov.w	r0, #0
 800bd58:	f380 8811 	msr	BASEPRI, r0
 800bd5c:	bc09      	pop	{r0, r3}
 800bd5e:	6819      	ldr	r1, [r3, #0]
 800bd60:	6808      	ldr	r0, [r1, #0]
 800bd62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd66:	f01e 0f10 	tst.w	lr, #16
 800bd6a:	bf08      	it	eq
 800bd6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd70:	f380 8809 	msr	PSP, r0
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	f3af 8000 	nop.w

0800bd80 <pxCurrentTCBConst>:
 800bd80:	20004458 	.word	0x20004458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop

0800bd88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	607b      	str	r3, [r7, #4]
}
 800bda0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bda2:	f001 fb99 	bl	800d4d8 <xTaskIncrementTick>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdac:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <xPortSysTickHandler+0x40>)
 800bdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	f383 8811 	msr	BASEPRI, r3
}
 800bdbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	e000ed04 	.word	0xe000ed04

0800bdcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdcc:	b480      	push	{r7}
 800bdce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <vPortSetupTimerInterrupt+0x34>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <vPortSetupTimerInterrupt+0x38>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bddc:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <vPortSetupTimerInterrupt+0x3c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a0a      	ldr	r2, [pc, #40]	; (800be0c <vPortSetupTimerInterrupt+0x40>)
 800bde2:	fba2 2303 	umull	r2, r3, r2, r3
 800bde6:	099b      	lsrs	r3, r3, #6
 800bde8:	4a09      	ldr	r2, [pc, #36]	; (800be10 <vPortSetupTimerInterrupt+0x44>)
 800bdea:	3b01      	subs	r3, #1
 800bdec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdee:	4b04      	ldr	r3, [pc, #16]	; (800be00 <vPortSetupTimerInterrupt+0x34>)
 800bdf0:	2207      	movs	r2, #7
 800bdf2:	601a      	str	r2, [r3, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	e000e010 	.word	0xe000e010
 800be04:	e000e018 	.word	0xe000e018
 800be08:	20000004 	.word	0x20000004
 800be0c:	10624dd3 	.word	0x10624dd3
 800be10:	e000e014 	.word	0xe000e014

0800be14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be24 <vPortEnableVFP+0x10>
 800be18:	6801      	ldr	r1, [r0, #0]
 800be1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be1e:	6001      	str	r1, [r0, #0]
 800be20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be22:	bf00      	nop
 800be24:	e000ed88 	.word	0xe000ed88

0800be28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be2e:	f3ef 8305 	mrs	r3, IPSR
 800be32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b0f      	cmp	r3, #15
 800be38:	d914      	bls.n	800be64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be3a:	4a17      	ldr	r2, [pc, #92]	; (800be98 <vPortValidateInterruptPriority+0x70>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be44:	4b15      	ldr	r3, [pc, #84]	; (800be9c <vPortValidateInterruptPriority+0x74>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	7afa      	ldrb	r2, [r7, #11]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d20a      	bcs.n	800be64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	607b      	str	r3, [r7, #4]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <vPortValidateInterruptPriority+0x78>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <vPortValidateInterruptPriority+0x7c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d90a      	bls.n	800be8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	603b      	str	r3, [r7, #0]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <vPortValidateInterruptPriority+0x60>
	}
 800be8a:	bf00      	nop
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	e000e3f0 	.word	0xe000e3f0
 800be9c:	20004450 	.word	0x20004450
 800bea0:	e000ed0c 	.word	0xe000ed0c
 800bea4:	20004454 	.word	0x20004454

0800bea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10a      	bne.n	800bed2 <xQueueGenericReset+0x2a>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	60bb      	str	r3, [r7, #8]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bed2:	f7ff fec7 	bl	800bc64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bede:	68f9      	ldr	r1, [r7, #12]
 800bee0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bee2:	fb01 f303 	mul.w	r3, r1, r3
 800bee6:	441a      	add	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf02:	3b01      	subs	r3, #1
 800bf04:	68f9      	ldr	r1, [r7, #12]
 800bf06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf08:	fb01 f303 	mul.w	r3, r1, r3
 800bf0c:	441a      	add	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	22ff      	movs	r2, #255	; 0xff
 800bf16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	22ff      	movs	r2, #255	; 0xff
 800bf1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d114      	bne.n	800bf52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01a      	beq.n	800bf66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3310      	adds	r3, #16
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 fc37 	bl	800d7a8 <xTaskRemoveFromEventList>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d012      	beq.n	800bf66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf40:	4b0c      	ldr	r3, [pc, #48]	; (800bf74 <xQueueGenericReset+0xcc>)
 800bf42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	e009      	b.n	800bf66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3310      	adds	r3, #16
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff fca4 	bl	800b8a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	3324      	adds	r3, #36	; 0x24
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7ff fc9f 	bl	800b8a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf66:	f7ff fead 	bl	800bcc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf6a:	2301      	movs	r3, #1
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	e000ed04 	.word	0xe000ed04

0800bf78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08e      	sub	sp, #56	; 0x38
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <xQueueGenericCreateStatic+0x52>
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <xQueueGenericCreateStatic+0x56>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e000      	b.n	800bfd0 <xQueueGenericCreateStatic+0x58>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	623b      	str	r3, [r7, #32]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d102      	bne.n	800bff6 <xQueueGenericCreateStatic+0x7e>
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <xQueueGenericCreateStatic+0x82>
 800bff6:	2301      	movs	r3, #1
 800bff8:	e000      	b.n	800bffc <xQueueGenericCreateStatic+0x84>
 800bffa:	2300      	movs	r3, #0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	61fb      	str	r3, [r7, #28]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c016:	2350      	movs	r3, #80	; 0x50
 800c018:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	2b50      	cmp	r3, #80	; 0x50
 800c01e:	d00a      	beq.n	800c036 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	61bb      	str	r3, [r7, #24]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c036:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00d      	beq.n	800c05e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c04a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	4613      	mov	r3, r2
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 f83f 	bl	800c0dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c060:	4618      	mov	r0, r3
 800c062:	3730      	adds	r7, #48	; 0x30
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08a      	sub	sp, #40	; 0x28
 800c06c:	af02      	add	r7, sp, #8
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	4613      	mov	r3, r2
 800c074:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	613b      	str	r3, [r7, #16]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	fb02 f303 	mul.w	r3, r2, r3
 800c09a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	3350      	adds	r3, #80	; 0x50
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fa15 	bl	800b4d0 <pvPortMalloc>
 800c0a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d011      	beq.n	800c0d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	3350      	adds	r3, #80	; 0x50
 800c0b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0c0:	79fa      	ldrb	r2, [r7, #7]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	68b9      	ldr	r1, [r7, #8]
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f805 	bl	800c0dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0d2:	69bb      	ldr	r3, [r7, #24]
	}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d103      	bne.n	800c0f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	e002      	b.n	800c0fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c10a:	2101      	movs	r1, #1
 800c10c:	69b8      	ldr	r0, [r7, #24]
 800c10e:	f7ff fecb 	bl	800bea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	78fa      	ldrb	r2, [r7, #3]
 800c116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c11a:	bf00      	nop
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c122:	b580      	push	{r7, lr}
 800c124:	b08a      	sub	sp, #40	; 0x28
 800c126:	af02      	add	r7, sp, #8
 800c128:	60f8      	str	r0, [r7, #12]
 800c12a:	60b9      	str	r1, [r7, #8]
 800c12c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	61bb      	str	r3, [r7, #24]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d90a      	bls.n	800c168 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	617b      	str	r3, [r7, #20]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c168:	2302      	movs	r3, #2
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	2100      	movs	r1, #0
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f7ff ff00 	bl	800bf78 <xQueueGenericCreateStatic>
 800c178:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c186:	69fb      	ldr	r3, [r7, #28]
	}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10a      	bne.n	800c1b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d90a      	bls.n	800c1d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	60fb      	str	r3, [r7, #12]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff ff45 	bl	800c068 <xQueueGenericCreate>
 800c1de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1ec:	697b      	ldr	r3, [r7, #20]
	}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08e      	sub	sp, #56	; 0x38
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c206:	2300      	movs	r3, #0
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <xQueueGenericSend+0x32>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d103      	bne.n	800c238 <xQueueGenericSend+0x40>
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <xQueueGenericSend+0x44>
 800c238:	2301      	movs	r3, #1
 800c23a:	e000      	b.n	800c23e <xQueueGenericSend+0x46>
 800c23c:	2300      	movs	r3, #0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <xQueueGenericSend+0x60>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d103      	bne.n	800c266 <xQueueGenericSend+0x6e>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c262:	2b01      	cmp	r3, #1
 800c264:	d101      	bne.n	800c26a <xQueueGenericSend+0x72>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <xQueueGenericSend+0x74>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xQueueGenericSend+0x8e>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	623b      	str	r3, [r7, #32]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c286:	f001 fc4d 	bl	800db24 <xTaskGetSchedulerState>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d102      	bne.n	800c296 <xQueueGenericSend+0x9e>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <xQueueGenericSend+0xa2>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericSend+0xa4>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	61fb      	str	r3, [r7, #28]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2b6:	f7ff fcd5 	bl	800bc64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d302      	bcc.n	800c2cc <xQueueGenericSend+0xd4>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d129      	bne.n	800c320 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	68b9      	ldr	r1, [r7, #8]
 800c2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2d2:	f000 fc5e 	bl	800cb92 <prvCopyDataToQueue>
 800c2d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d010      	beq.n	800c302 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	3324      	adds	r3, #36	; 0x24
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f001 fa5f 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d013      	beq.n	800c318 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2f0:	4b3f      	ldr	r3, [pc, #252]	; (800c3f0 <xQueueGenericSend+0x1f8>)
 800c2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	e00a      	b.n	800c318 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d007      	beq.n	800c318 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c308:	4b39      	ldr	r3, [pc, #228]	; (800c3f0 <xQueueGenericSend+0x1f8>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c318:	f7ff fcd4 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 800c31c:	2301      	movs	r3, #1
 800c31e:	e063      	b.n	800c3e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d103      	bne.n	800c32e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c326:	f7ff fccd 	bl	800bcc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e05c      	b.n	800c3e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c334:	f107 0314 	add.w	r3, r7, #20
 800c338:	4618      	mov	r0, r3
 800c33a:	f001 fa99 	bl	800d870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c33e:	2301      	movs	r3, #1
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c342:	f7ff fcbf 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c346:	f000 fff9 	bl	800d33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c34a:	f7ff fc8b 	bl	800bc64 <vPortEnterCritical>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c354:	b25b      	sxtb	r3, r3
 800c356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35a:	d103      	bne.n	800c364 <xQueueGenericSend+0x16c>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c36a:	b25b      	sxtb	r3, r3
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c370:	d103      	bne.n	800c37a <xQueueGenericSend+0x182>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c37a:	f7ff fca3 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c37e:	1d3a      	adds	r2, r7, #4
 800c380:	f107 0314 	add.w	r3, r7, #20
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f001 fa88 	bl	800d89c <xTaskCheckForTimeOut>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d124      	bne.n	800c3dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c394:	f000 fcf5 	bl	800cd82 <prvIsQueueFull>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d018      	beq.n	800c3d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	3310      	adds	r3, #16
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f001 f9ae 	bl	800d708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ae:	f000 fc80 	bl	800ccb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3b2:	f000 ffd1 	bl	800d358 <xTaskResumeAll>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f47f af7c 	bne.w	800c2b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c3be:	4b0c      	ldr	r3, [pc, #48]	; (800c3f0 <xQueueGenericSend+0x1f8>)
 800c3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	e772      	b.n	800c2b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3d2:	f000 fc6e 	bl	800ccb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3d6:	f000 ffbf 	bl	800d358 <xTaskResumeAll>
 800c3da:	e76c      	b.n	800c2b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3de:	f000 fc68 	bl	800ccb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3e2:	f000 ffb9 	bl	800d358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3738      	adds	r7, #56	; 0x38
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b090      	sub	sp, #64	; 0x40
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
 800c400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10a      	bne.n	800c422 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d103      	bne.n	800c430 <xQueueGenericSendFromISR+0x3c>
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <xQueueGenericSendFromISR+0x40>
 800c430:	2301      	movs	r3, #1
 800c432:	e000      	b.n	800c436 <xQueueGenericSendFromISR+0x42>
 800c434:	2300      	movs	r3, #0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10a      	bne.n	800c450 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b02      	cmp	r3, #2
 800c454:	d103      	bne.n	800c45e <xQueueGenericSendFromISR+0x6a>
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d101      	bne.n	800c462 <xQueueGenericSendFromISR+0x6e>
 800c45e:	2301      	movs	r3, #1
 800c460:	e000      	b.n	800c464 <xQueueGenericSendFromISR+0x70>
 800c462:	2300      	movs	r3, #0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10a      	bne.n	800c47e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	623b      	str	r3, [r7, #32]
}
 800c47a:	bf00      	nop
 800c47c:	e7fe      	b.n	800c47c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c47e:	f7ff fcd3 	bl	800be28 <vPortValidateInterruptPriority>
	__asm volatile
 800c482:	f3ef 8211 	mrs	r2, BASEPRI
 800c486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	61fa      	str	r2, [r7, #28]
 800c498:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c49a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c49c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d302      	bcc.n	800c4b0 <xQueueGenericSendFromISR+0xbc>
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d12f      	bne.n	800c510 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	68b9      	ldr	r1, [r7, #8]
 800c4c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4c6:	f000 fb64 	bl	800cb92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d2:	d112      	bne.n	800c4fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d016      	beq.n	800c50a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	3324      	adds	r3, #36	; 0x24
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f001 f961 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00e      	beq.n	800c50a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	e007      	b.n	800c50a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4fe:	3301      	adds	r3, #1
 800c500:	b2db      	uxtb	r3, r3
 800c502:	b25a      	sxtb	r2, r3
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c50a:	2301      	movs	r3, #1
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c50e:	e001      	b.n	800c514 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c510:	2300      	movs	r3, #0
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c516:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f383 8811 	msr	BASEPRI, r3
}
 800c51e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c522:	4618      	mov	r0, r3
 800c524:	3740      	adds	r7, #64	; 0x40
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b08e      	sub	sp, #56	; 0x38
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10a      	bne.n	800c554 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	623b      	str	r3, [r7, #32]
}
 800c550:	bf00      	nop
 800c552:	e7fe      	b.n	800c552 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00a      	beq.n	800c572 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	61fb      	str	r3, [r7, #28]
}
 800c56e:	bf00      	nop
 800c570:	e7fe      	b.n	800c570 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d103      	bne.n	800c582 <xQueueGiveFromISR+0x58>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <xQueueGiveFromISR+0x5c>
 800c582:	2301      	movs	r3, #1
 800c584:	e000      	b.n	800c588 <xQueueGiveFromISR+0x5e>
 800c586:	2300      	movs	r3, #0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	61bb      	str	r3, [r7, #24]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5a2:	f7ff fc41 	bl	800be28 <vPortValidateInterruptPriority>
	__asm volatile
 800c5a6:	f3ef 8211 	mrs	r2, BASEPRI
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	617a      	str	r2, [r7, #20]
 800c5bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c5be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d22b      	bcs.n	800c62a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ec:	d112      	bne.n	800c614 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d016      	beq.n	800c624 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	3324      	adds	r3, #36	; 0x24
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f001 f8d4 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00e      	beq.n	800c624 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2201      	movs	r2, #1
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	e007      	b.n	800c624 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c618:	3301      	adds	r3, #1
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	b25a      	sxtb	r2, r3
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c624:	2301      	movs	r3, #1
 800c626:	637b      	str	r3, [r7, #52]	; 0x34
 800c628:	e001      	b.n	800c62e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	637b      	str	r3, [r7, #52]	; 0x34
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f383 8811 	msr	BASEPRI, r3
}
 800c638:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3738      	adds	r7, #56	; 0x38
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08c      	sub	sp, #48	; 0x30
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c650:	2300      	movs	r3, #0
 800c652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <xQueueReceive+0x30>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	623b      	str	r3, [r7, #32]
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d103      	bne.n	800c682 <xQueueReceive+0x3e>
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <xQueueReceive+0x42>
 800c682:	2301      	movs	r3, #1
 800c684:	e000      	b.n	800c688 <xQueueReceive+0x44>
 800c686:	2300      	movs	r3, #0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10a      	bne.n	800c6a2 <xQueueReceive+0x5e>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	61fb      	str	r3, [r7, #28]
}
 800c69e:	bf00      	nop
 800c6a0:	e7fe      	b.n	800c6a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6a2:	f001 fa3f 	bl	800db24 <xTaskGetSchedulerState>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <xQueueReceive+0x6e>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d101      	bne.n	800c6b6 <xQueueReceive+0x72>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e000      	b.n	800c6b8 <xQueueReceive+0x74>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10a      	bne.n	800c6d2 <xQueueReceive+0x8e>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	61bb      	str	r3, [r7, #24]
}
 800c6ce:	bf00      	nop
 800c6d0:	e7fe      	b.n	800c6d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6d2:	f7ff fac7 	bl	800bc64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d01f      	beq.n	800c722 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6e2:	68b9      	ldr	r1, [r7, #8]
 800c6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e6:	f000 fabe 	bl	800cc66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	1e5a      	subs	r2, r3, #1
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00f      	beq.n	800c71a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	3310      	adds	r3, #16
 800c6fe:	4618      	mov	r0, r3
 800c700:	f001 f852 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d007      	beq.n	800c71a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c70a:	4b3d      	ldr	r3, [pc, #244]	; (800c800 <xQueueReceive+0x1bc>)
 800c70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c71a:	f7ff fad3 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 800c71e:	2301      	movs	r3, #1
 800c720:	e069      	b.n	800c7f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d103      	bne.n	800c730 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c728:	f7ff facc 	bl	800bcc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c72c:	2300      	movs	r3, #0
 800c72e:	e062      	b.n	800c7f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c736:	f107 0310 	add.w	r3, r7, #16
 800c73a:	4618      	mov	r0, r3
 800c73c:	f001 f898 	bl	800d870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c740:	2301      	movs	r3, #1
 800c742:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c744:	f7ff fabe 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c748:	f000 fdf8 	bl	800d33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c74c:	f7ff fa8a 	bl	800bc64 <vPortEnterCritical>
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c756:	b25b      	sxtb	r3, r3
 800c758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75c:	d103      	bne.n	800c766 <xQueueReceive+0x122>
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c76c:	b25b      	sxtb	r3, r3
 800c76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c772:	d103      	bne.n	800c77c <xQueueReceive+0x138>
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	2200      	movs	r2, #0
 800c778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c77c:	f7ff faa2 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c780:	1d3a      	adds	r2, r7, #4
 800c782:	f107 0310 	add.w	r3, r7, #16
 800c786:	4611      	mov	r1, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f001 f887 	bl	800d89c <xTaskCheckForTimeOut>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d123      	bne.n	800c7dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c796:	f000 fade 	bl	800cd56 <prvIsQueueEmpty>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d017      	beq.n	800c7d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	3324      	adds	r3, #36	; 0x24
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 ffad 	bl	800d708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7b0:	f000 fa7f 	bl	800ccb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7b4:	f000 fdd0 	bl	800d358 <xTaskResumeAll>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d189      	bne.n	800c6d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c7be:	4b10      	ldr	r3, [pc, #64]	; (800c800 <xQueueReceive+0x1bc>)
 800c7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	e780      	b.n	800c6d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d2:	f000 fa6e 	bl	800ccb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7d6:	f000 fdbf 	bl	800d358 <xTaskResumeAll>
 800c7da:	e77a      	b.n	800c6d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7de:	f000 fa68 	bl	800ccb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7e2:	f000 fdb9 	bl	800d358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7e8:	f000 fab5 	bl	800cd56 <prvIsQueueEmpty>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f43f af6f 	beq.w	800c6d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3730      	adds	r7, #48	; 0x30
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08e      	sub	sp, #56	; 0x38
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c80e:	2300      	movs	r3, #0
 800c810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c816:	2300      	movs	r3, #0
 800c818:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	623b      	str	r3, [r7, #32]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61fb      	str	r3, [r7, #28]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c854:	f001 f966 	bl	800db24 <xTaskGetSchedulerState>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d102      	bne.n	800c864 <xQueueSemaphoreTake+0x60>
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <xQueueSemaphoreTake+0x64>
 800c864:	2301      	movs	r3, #1
 800c866:	e000      	b.n	800c86a <xQueueSemaphoreTake+0x66>
 800c868:	2300      	movs	r3, #0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10a      	bne.n	800c884 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	61bb      	str	r3, [r7, #24]
}
 800c880:	bf00      	nop
 800c882:	e7fe      	b.n	800c882 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c884:	f7ff f9ee 	bl	800bc64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	2b00      	cmp	r3, #0
 800c892:	d024      	beq.n	800c8de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	1e5a      	subs	r2, r3, #1
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d104      	bne.n	800c8ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c8a4:	f001 fab4 	bl	800de10 <pvTaskIncrementMutexHeldCount>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00f      	beq.n	800c8d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	3310      	adds	r3, #16
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 ff74 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d007      	beq.n	800c8d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c8c6:	4b54      	ldr	r3, [pc, #336]	; (800ca18 <xQueueSemaphoreTake+0x214>)
 800c8c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8cc:	601a      	str	r2, [r3, #0]
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8d6:	f7ff f9f5 	bl	800bcc4 <vPortExitCritical>
				return pdPASS;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e097      	b.n	800ca0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d111      	bne.n	800c908 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00a      	beq.n	800c900 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	617b      	str	r3, [r7, #20]
}
 800c8fc:	bf00      	nop
 800c8fe:	e7fe      	b.n	800c8fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c900:	f7ff f9e0 	bl	800bcc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c904:	2300      	movs	r3, #0
 800c906:	e082      	b.n	800ca0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c90e:	f107 030c 	add.w	r3, r7, #12
 800c912:	4618      	mov	r0, r3
 800c914:	f000 ffac 	bl	800d870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c918:	2301      	movs	r3, #1
 800c91a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c91c:	f7ff f9d2 	bl	800bcc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c920:	f000 fd0c 	bl	800d33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c924:	f7ff f99e 	bl	800bc64 <vPortEnterCritical>
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c92e:	b25b      	sxtb	r3, r3
 800c930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c934:	d103      	bne.n	800c93e <xQueueSemaphoreTake+0x13a>
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c944:	b25b      	sxtb	r3, r3
 800c946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94a:	d103      	bne.n	800c954 <xQueueSemaphoreTake+0x150>
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c954:	f7ff f9b6 	bl	800bcc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c958:	463a      	mov	r2, r7
 800c95a:	f107 030c 	add.w	r3, r7, #12
 800c95e:	4611      	mov	r1, r2
 800c960:	4618      	mov	r0, r3
 800c962:	f000 ff9b 	bl	800d89c <xTaskCheckForTimeOut>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d132      	bne.n	800c9d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c96e:	f000 f9f2 	bl	800cd56 <prvIsQueueEmpty>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d026      	beq.n	800c9c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d109      	bne.n	800c994 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c980:	f7ff f970 	bl	800bc64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	4618      	mov	r0, r3
 800c98a:	f001 f8e9 	bl	800db60 <xTaskPriorityInherit>
 800c98e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c990:	f7ff f998 	bl	800bcc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	3324      	adds	r3, #36	; 0x24
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 feb3 	bl	800d708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a4:	f000 f985 	bl	800ccb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9a8:	f000 fcd6 	bl	800d358 <xTaskResumeAll>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f47f af68 	bne.w	800c884 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c9b4:	4b18      	ldr	r3, [pc, #96]	; (800ca18 <xQueueSemaphoreTake+0x214>)
 800c9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	e75e      	b.n	800c884 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9c8:	f000 f973 	bl	800ccb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9cc:	f000 fcc4 	bl	800d358 <xTaskResumeAll>
 800c9d0:	e758      	b.n	800c884 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c9d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9d4:	f000 f96d 	bl	800ccb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9d8:	f000 fcbe 	bl	800d358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9de:	f000 f9ba 	bl	800cd56 <prvIsQueueEmpty>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f43f af4d 	beq.w	800c884 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00d      	beq.n	800ca0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c9f0:	f7ff f938 	bl	800bc64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9f6:	f000 f8b4 	bl	800cb62 <prvGetDisinheritPriorityAfterTimeout>
 800c9fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca02:	4618      	mov	r0, r3
 800ca04:	f001 f982 	bl	800dd0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ca08:	f7ff f95c 	bl	800bcc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3738      	adds	r7, #56	; 0x38
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b08e      	sub	sp, #56	; 0x38
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10a      	bne.n	800ca48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	623b      	str	r3, [r7, #32]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d103      	bne.n	800ca56 <xQueueReceiveFromISR+0x3a>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <xQueueReceiveFromISR+0x3e>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e000      	b.n	800ca5c <xQueueReceiveFromISR+0x40>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	61fb      	str	r3, [r7, #28]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca76:	f7ff f9d7 	bl	800be28 <vPortValidateInterruptPriority>
	__asm volatile
 800ca7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	61ba      	str	r2, [r7, #24]
 800ca90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d02f      	beq.n	800cb02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800caac:	68b9      	ldr	r1, [r7, #8]
 800caae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cab0:	f000 f8d9 	bl	800cc66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab6:	1e5a      	subs	r2, r3, #1
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cabc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac4:	d112      	bne.n	800caec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d016      	beq.n	800cafc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	3310      	adds	r3, #16
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 fe68 	bl	800d7a8 <xTaskRemoveFromEventList>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00e      	beq.n	800cafc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00b      	beq.n	800cafc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	e007      	b.n	800cafc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800caec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf0:	3301      	adds	r3, #1
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	b25a      	sxtb	r2, r3
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cafc:	2301      	movs	r3, #1
 800cafe:	637b      	str	r3, [r7, #52]	; 0x34
 800cb00:	e001      	b.n	800cb06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	637b      	str	r3, [r7, #52]	; 0x34
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f383 8811 	msr	BASEPRI, r3
}
 800cb10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3738      	adds	r7, #56	; 0x38
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10a      	bne.n	800cb44 <vQueueDelete+0x28>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	60bb      	str	r3, [r7, #8]
}
 800cb40:	bf00      	nop
 800cb42:	e7fe      	b.n	800cb42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 f95f 	bl	800ce08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f7fe fd87 	bl	800b668 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb5a:	bf00      	nop
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d006      	beq.n	800cb80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cb7c:	60fb      	str	r3, [r7, #12]
 800cb7e:	e001      	b.n	800cb84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb84:	68fb      	ldr	r3, [r7, #12]
	}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b086      	sub	sp, #24
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10d      	bne.n	800cbcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d14d      	bne.n	800cc54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f001 f837 	bl	800dc30 <xTaskPriorityDisinherit>
 800cbc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	609a      	str	r2, [r3, #8]
 800cbca:	e043      	b.n	800cc54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d119      	bne.n	800cc06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6858      	ldr	r0, [r3, #4]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbda:	461a      	mov	r2, r3
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	f01f fdbb 	bl	802c758 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbea:	441a      	add	r2, r3
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d32b      	bcc.n	800cc54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	605a      	str	r2, [r3, #4]
 800cc04:	e026      	b.n	800cc54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	68d8      	ldr	r0, [r3, #12]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0e:	461a      	mov	r2, r3
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	f01f fda1 	bl	802c758 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	68da      	ldr	r2, [r3, #12]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1e:	425b      	negs	r3, r3
 800cc20:	441a      	add	r2, r3
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	68da      	ldr	r2, [r3, #12]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d207      	bcs.n	800cc42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	689a      	ldr	r2, [r3, #8]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3a:	425b      	negs	r3, r3
 800cc3c:	441a      	add	r2, r3
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d105      	bne.n	800cc54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d002      	beq.n	800cc54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc5c:	697b      	ldr	r3, [r7, #20]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d018      	beq.n	800ccaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	68da      	ldr	r2, [r3, #12]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc80:	441a      	add	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68da      	ldr	r2, [r3, #12]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d303      	bcc.n	800cc9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68d9      	ldr	r1, [r3, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	461a      	mov	r2, r3
 800cca4:	6838      	ldr	r0, [r7, #0]
 800cca6:	f01f fd57 	bl	802c758 <memcpy>
	}
}
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ccba:	f7fe ffd3 	bl	800bc64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccc6:	e011      	b.n	800ccec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d012      	beq.n	800ccf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	3324      	adds	r3, #36	; 0x24
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fd67 	bl	800d7a8 <xTaskRemoveFromEventList>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cce0:	f000 fe3e 	bl	800d960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	dce9      	bgt.n	800ccc8 <prvUnlockQueue+0x16>
 800ccf4:	e000      	b.n	800ccf8 <prvUnlockQueue+0x46>
					break;
 800ccf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	22ff      	movs	r2, #255	; 0xff
 800ccfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd00:	f7fe ffe0 	bl	800bcc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd04:	f7fe ffae 	bl	800bc64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd10:	e011      	b.n	800cd36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d012      	beq.n	800cd40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	3310      	adds	r3, #16
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 fd42 	bl	800d7a8 <xTaskRemoveFromEventList>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d001      	beq.n	800cd2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd2a:	f000 fe19 	bl	800d960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd2e:	7bbb      	ldrb	r3, [r7, #14]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dce9      	bgt.n	800cd12 <prvUnlockQueue+0x60>
 800cd3e:	e000      	b.n	800cd42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	22ff      	movs	r2, #255	; 0xff
 800cd46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd4a:	f7fe ffbb 	bl	800bcc4 <vPortExitCritical>
}
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b084      	sub	sp, #16
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd5e:	f7fe ff81 	bl	800bc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d102      	bne.n	800cd70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e001      	b.n	800cd74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd74:	f7fe ffa6 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800cd78:	68fb      	ldr	r3, [r7, #12]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd8a:	f7fe ff6b 	bl	800bc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d102      	bne.n	800cda0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	e001      	b.n	800cda4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cda0:	2300      	movs	r3, #0
 800cda2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cda4:	f7fe ff8e 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800cda8:	68fb      	ldr	r3, [r7, #12]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
	...

0800cdb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	e014      	b.n	800cdee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cdc4:	4a0f      	ldr	r2, [pc, #60]	; (800ce04 <vQueueAddToRegistry+0x50>)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10b      	bne.n	800cde8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cdd0:	490c      	ldr	r1, [pc, #48]	; (800ce04 <vQueueAddToRegistry+0x50>)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cdda:	4a0a      	ldr	r2, [pc, #40]	; (800ce04 <vQueueAddToRegistry+0x50>)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	4413      	add	r3, r2
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cde6:	e006      	b.n	800cdf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3301      	adds	r3, #1
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2b07      	cmp	r3, #7
 800cdf2:	d9e7      	bls.n	800cdc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	20007e4c 	.word	0x20007e4c

0800ce08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce10:	2300      	movs	r3, #0
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	e016      	b.n	800ce44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ce16:	4a10      	ldr	r2, [pc, #64]	; (800ce58 <vQueueUnregisterQueue+0x50>)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	4413      	add	r3, r2
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d10b      	bne.n	800ce3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ce26:	4a0c      	ldr	r2, [pc, #48]	; (800ce58 <vQueueUnregisterQueue+0x50>)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ce30:	4a09      	ldr	r2, [pc, #36]	; (800ce58 <vQueueUnregisterQueue+0x50>)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	00db      	lsls	r3, r3, #3
 800ce36:	4413      	add	r3, r2
 800ce38:	2200      	movs	r2, #0
 800ce3a:	605a      	str	r2, [r3, #4]
				break;
 800ce3c:	e006      	b.n	800ce4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3301      	adds	r3, #1
 800ce42:	60fb      	str	r3, [r7, #12]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b07      	cmp	r3, #7
 800ce48:	d9e5      	bls.n	800ce16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ce4a:	bf00      	nop
 800ce4c:	bf00      	nop
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr
 800ce58:	20007e4c 	.word	0x20007e4c

0800ce5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce6c:	f7fe fefa 	bl	800bc64 <vPortEnterCritical>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce76:	b25b      	sxtb	r3, r3
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d103      	bne.n	800ce86 <vQueueWaitForMessageRestricted+0x2a>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce8c:	b25b      	sxtb	r3, r3
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d103      	bne.n	800ce9c <vQueueWaitForMessageRestricted+0x40>
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce9c:	f7fe ff12 	bl	800bcc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d106      	bne.n	800ceb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	3324      	adds	r3, #36	; 0x24
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f000 fc4d 	bl	800d750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceb6:	6978      	ldr	r0, [r7, #20]
 800ceb8:	f7ff fefb 	bl	800ccb2 <prvUnlockQueue>
	}
 800cebc:	bf00      	nop
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b08e      	sub	sp, #56	; 0x38
 800cec8:	af04      	add	r7, sp, #16
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
 800ced0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ced2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <xTaskCreateStatic+0x2a>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	623b      	str	r3, [r7, #32]
}
 800ceea:	bf00      	nop
 800ceec:	e7fe      	b.n	800ceec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <xTaskCreateStatic+0x46>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	61fb      	str	r3, [r7, #28]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf0a:	235c      	movs	r3, #92	; 0x5c
 800cf0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b5c      	cmp	r3, #92	; 0x5c
 800cf12:	d00a      	beq.n	800cf2a <xTaskCreateStatic+0x66>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	61bb      	str	r3, [r7, #24]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01e      	beq.n	800cf70 <xTaskCreateStatic+0xac>
 800cf32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01b      	beq.n	800cf70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	2202      	movs	r2, #2
 800cf46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9303      	str	r3, [sp, #12]
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	9302      	str	r3, [sp, #8]
 800cf52:	f107 0314 	add.w	r3, r7, #20
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	68b9      	ldr	r1, [r7, #8]
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f000 f850 	bl	800d008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf6a:	f000 f8dd 	bl	800d128 <prvAddNewTaskToReadyList>
 800cf6e:	e001      	b.n	800cf74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf74:	697b      	ldr	r3, [r7, #20]
	}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3728      	adds	r7, #40	; 0x28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b08c      	sub	sp, #48	; 0x30
 800cf82:	af04      	add	r7, sp, #16
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	60b9      	str	r1, [r7, #8]
 800cf88:	603b      	str	r3, [r7, #0]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe fa9c 	bl	800b4d0 <pvPortMalloc>
 800cf98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00e      	beq.n	800cfbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cfa0:	205c      	movs	r0, #92	; 0x5c
 800cfa2:	f7fe fa95 	bl	800b4d0 <pvPortMalloc>
 800cfa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	631a      	str	r2, [r3, #48]	; 0x30
 800cfb4:	e005      	b.n	800cfc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfb6:	6978      	ldr	r0, [r7, #20]
 800cfb8:	f7fe fb56 	bl	800b668 <vPortFree>
 800cfbc:	e001      	b.n	800cfc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d017      	beq.n	800cff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfd0:	88fa      	ldrh	r2, [r7, #6]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9303      	str	r3, [sp, #12]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f000 f80e 	bl	800d008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfec:	69f8      	ldr	r0, [r7, #28]
 800cfee:	f000 f89b 	bl	800d128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cff2:	2301      	movs	r3, #1
 800cff4:	61bb      	str	r3, [r7, #24]
 800cff6:	e002      	b.n	800cffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295
 800cffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cffe:	69bb      	ldr	r3, [r7, #24]
	}
 800d000:	4618      	mov	r0, r3
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	461a      	mov	r2, r3
 800d020:	21a5      	movs	r1, #165	; 0xa5
 800d022:	f01f fba7 	bl	802c774 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d030:	3b01      	subs	r3, #1
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	f023 0307 	bic.w	r3, r3, #7
 800d03e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	f003 0307 	and.w	r3, r3, #7
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	617b      	str	r3, [r7, #20]
}
 800d05c:	bf00      	nop
 800d05e:	e7fe      	b.n	800d05e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d01f      	beq.n	800d0a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d066:	2300      	movs	r3, #0
 800d068:	61fb      	str	r3, [r7, #28]
 800d06a:	e012      	b.n	800d092 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	4413      	add	r3, r2
 800d072:	7819      	ldrb	r1, [r3, #0]
 800d074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	4413      	add	r3, r2
 800d07a:	3334      	adds	r3, #52	; 0x34
 800d07c:	460a      	mov	r2, r1
 800d07e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	4413      	add	r3, r2
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d006      	beq.n	800d09a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	3301      	adds	r3, #1
 800d090:	61fb      	str	r3, [r7, #28]
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	2b0f      	cmp	r3, #15
 800d096:	d9e9      	bls.n	800d06c <prvInitialiseNewTask+0x64>
 800d098:	e000      	b.n	800d09c <prvInitialiseNewTask+0x94>
			{
				break;
 800d09a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0a4:	e003      	b.n	800d0ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	2b37      	cmp	r3, #55	; 0x37
 800d0b2:	d901      	bls.n	800d0b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0b4:	2337      	movs	r3, #55	; 0x37
 800d0b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fe fc08 	bl	800b8e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	3318      	adds	r3, #24
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe fc03 	bl	800b8e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	68f9      	ldr	r1, [r7, #12]
 800d106:	69b8      	ldr	r0, [r7, #24]
 800d108:	f7fe fc80 	bl	800ba0c <pxPortInitialiseStack>
 800d10c:	4602      	mov	r2, r0
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d11c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d11e:	bf00      	nop
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d130:	f7fe fd98 	bl	800bc64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d134:	4b2d      	ldr	r3, [pc, #180]	; (800d1ec <prvAddNewTaskToReadyList+0xc4>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3301      	adds	r3, #1
 800d13a:	4a2c      	ldr	r2, [pc, #176]	; (800d1ec <prvAddNewTaskToReadyList+0xc4>)
 800d13c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d13e:	4b2c      	ldr	r3, [pc, #176]	; (800d1f0 <prvAddNewTaskToReadyList+0xc8>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d109      	bne.n	800d15a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d146:	4a2a      	ldr	r2, [pc, #168]	; (800d1f0 <prvAddNewTaskToReadyList+0xc8>)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d14c:	4b27      	ldr	r3, [pc, #156]	; (800d1ec <prvAddNewTaskToReadyList+0xc4>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d110      	bne.n	800d176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d154:	f000 fc28 	bl	800d9a8 <prvInitialiseTaskLists>
 800d158:	e00d      	b.n	800d176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d15a:	4b26      	ldr	r3, [pc, #152]	; (800d1f4 <prvAddNewTaskToReadyList+0xcc>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d109      	bne.n	800d176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d162:	4b23      	ldr	r3, [pc, #140]	; (800d1f0 <prvAddNewTaskToReadyList+0xc8>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d802      	bhi.n	800d176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d170:	4a1f      	ldr	r2, [pc, #124]	; (800d1f0 <prvAddNewTaskToReadyList+0xc8>)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d176:	4b20      	ldr	r3, [pc, #128]	; (800d1f8 <prvAddNewTaskToReadyList+0xd0>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3301      	adds	r3, #1
 800d17c:	4a1e      	ldr	r2, [pc, #120]	; (800d1f8 <prvAddNewTaskToReadyList+0xd0>)
 800d17e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d180:	4b1d      	ldr	r3, [pc, #116]	; (800d1f8 <prvAddNewTaskToReadyList+0xd0>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18c:	4b1b      	ldr	r3, [pc, #108]	; (800d1fc <prvAddNewTaskToReadyList+0xd4>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	429a      	cmp	r2, r3
 800d192:	d903      	bls.n	800d19c <prvAddNewTaskToReadyList+0x74>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d198:	4a18      	ldr	r2, [pc, #96]	; (800d1fc <prvAddNewTaskToReadyList+0xd4>)
 800d19a:	6013      	str	r3, [r2, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4a15      	ldr	r2, [pc, #84]	; (800d200 <prvAddNewTaskToReadyList+0xd8>)
 800d1aa:	441a      	add	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	f7fe fba3 	bl	800b8fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1b8:	f7fe fd84 	bl	800bcc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <prvAddNewTaskToReadyList+0xcc>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00e      	beq.n	800d1e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1c4:	4b0a      	ldr	r3, [pc, #40]	; (800d1f0 <prvAddNewTaskToReadyList+0xc8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d207      	bcs.n	800d1e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1d2:	4b0c      	ldr	r3, [pc, #48]	; (800d204 <prvAddNewTaskToReadyList+0xdc>)
 800d1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d8:	601a      	str	r2, [r3, #0]
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1e2:	bf00      	nop
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	2000492c 	.word	0x2000492c
 800d1f0:	20004458 	.word	0x20004458
 800d1f4:	20004938 	.word	0x20004938
 800d1f8:	20004948 	.word	0x20004948
 800d1fc:	20004934 	.word	0x20004934
 800d200:	2000445c 	.word	0x2000445c
 800d204:	e000ed04 	.word	0xe000ed04

0800d208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d017      	beq.n	800d24a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d21a:	4b13      	ldr	r3, [pc, #76]	; (800d268 <vTaskDelay+0x60>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00a      	beq.n	800d238 <vTaskDelay+0x30>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	60bb      	str	r3, [r7, #8]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d238:	f000 f880 	bl	800d33c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d23c:	2100      	movs	r1, #0
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fdfa 	bl	800de38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d244:	f000 f888 	bl	800d358 <xTaskResumeAll>
 800d248:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d107      	bne.n	800d260 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d250:	4b06      	ldr	r3, [pc, #24]	; (800d26c <vTaskDelay+0x64>)
 800d252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d256:	601a      	str	r2, [r3, #0]
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d260:	bf00      	nop
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	20004954 	.word	0x20004954
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	; 0x28
 800d274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d276:	2300      	movs	r3, #0
 800d278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d27e:	463a      	mov	r2, r7
 800d280:	1d39      	adds	r1, r7, #4
 800d282:	f107 0308 	add.w	r3, r7, #8
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe f8ee 	bl	800b468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	9202      	str	r2, [sp, #8]
 800d294:	9301      	str	r3, [sp, #4]
 800d296:	2300      	movs	r3, #0
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	2300      	movs	r3, #0
 800d29c:	460a      	mov	r2, r1
 800d29e:	4921      	ldr	r1, [pc, #132]	; (800d324 <vTaskStartScheduler+0xb4>)
 800d2a0:	4821      	ldr	r0, [pc, #132]	; (800d328 <vTaskStartScheduler+0xb8>)
 800d2a2:	f7ff fe0f 	bl	800cec4 <xTaskCreateStatic>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4a20      	ldr	r2, [pc, #128]	; (800d32c <vTaskStartScheduler+0xbc>)
 800d2aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2ac:	4b1f      	ldr	r3, [pc, #124]	; (800d32c <vTaskStartScheduler+0xbc>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	617b      	str	r3, [r7, #20]
 800d2b8:	e001      	b.n	800d2be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d102      	bne.n	800d2ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2c4:	f000 fe0c 	bl	800dee0 <xTimerCreateTimerTask>
 800d2c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d116      	bne.n	800d2fe <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	613b      	str	r3, [r7, #16]
}
 800d2e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2e4:	4b12      	ldr	r3, [pc, #72]	; (800d330 <vTaskStartScheduler+0xc0>)
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2ec:	4b11      	ldr	r3, [pc, #68]	; (800d334 <vTaskStartScheduler+0xc4>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2f2:	4b11      	ldr	r3, [pc, #68]	; (800d338 <vTaskStartScheduler+0xc8>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2f8:	f7fe fc12 	bl	800bb20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2fc:	e00e      	b.n	800d31c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d304:	d10a      	bne.n	800d31c <vTaskStartScheduler+0xac>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	60fb      	str	r3, [r7, #12]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <vTaskStartScheduler+0xaa>
}
 800d31c:	bf00      	nop
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	0802def0 	.word	0x0802def0
 800d328:	0800d979 	.word	0x0800d979
 800d32c:	20004950 	.word	0x20004950
 800d330:	2000494c 	.word	0x2000494c
 800d334:	20004938 	.word	0x20004938
 800d338:	20004930 	.word	0x20004930

0800d33c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d33c:	b480      	push	{r7}
 800d33e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d340:	4b04      	ldr	r3, [pc, #16]	; (800d354 <vTaskSuspendAll+0x18>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3301      	adds	r3, #1
 800d346:	4a03      	ldr	r2, [pc, #12]	; (800d354 <vTaskSuspendAll+0x18>)
 800d348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d34a:	bf00      	nop
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	20004954 	.word	0x20004954

0800d358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d362:	2300      	movs	r3, #0
 800d364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d366:	4b42      	ldr	r3, [pc, #264]	; (800d470 <xTaskResumeAll+0x118>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10a      	bne.n	800d384 <xTaskResumeAll+0x2c>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	603b      	str	r3, [r7, #0]
}
 800d380:	bf00      	nop
 800d382:	e7fe      	b.n	800d382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d384:	f7fe fc6e 	bl	800bc64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d388:	4b39      	ldr	r3, [pc, #228]	; (800d470 <xTaskResumeAll+0x118>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4a38      	ldr	r2, [pc, #224]	; (800d470 <xTaskResumeAll+0x118>)
 800d390:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d392:	4b37      	ldr	r3, [pc, #220]	; (800d470 <xTaskResumeAll+0x118>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d162      	bne.n	800d460 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d39a:	4b36      	ldr	r3, [pc, #216]	; (800d474 <xTaskResumeAll+0x11c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d05e      	beq.n	800d460 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3a2:	e02f      	b.n	800d404 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a4:	4b34      	ldr	r3, [pc, #208]	; (800d478 <xTaskResumeAll+0x120>)
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3318      	adds	r3, #24
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fe fb01 	bl	800b9b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fe fafc 	bl	800b9b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c4:	4b2d      	ldr	r3, [pc, #180]	; (800d47c <xTaskResumeAll+0x124>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d903      	bls.n	800d3d4 <xTaskResumeAll+0x7c>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d0:	4a2a      	ldr	r2, [pc, #168]	; (800d47c <xTaskResumeAll+0x124>)
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4a27      	ldr	r2, [pc, #156]	; (800d480 <xTaskResumeAll+0x128>)
 800d3e2:	441a      	add	r2, r3
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	f7fe fa87 	bl	800b8fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f4:	4b23      	ldr	r3, [pc, #140]	; (800d484 <xTaskResumeAll+0x12c>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d302      	bcc.n	800d404 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3fe:	4b22      	ldr	r3, [pc, #136]	; (800d488 <xTaskResumeAll+0x130>)
 800d400:	2201      	movs	r2, #1
 800d402:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d404:	4b1c      	ldr	r3, [pc, #112]	; (800d478 <xTaskResumeAll+0x120>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1cb      	bne.n	800d3a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d412:	f000 fb67 	bl	800dae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d416:	4b1d      	ldr	r3, [pc, #116]	; (800d48c <xTaskResumeAll+0x134>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d010      	beq.n	800d444 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d422:	f000 f859 	bl	800d4d8 <xTaskIncrementTick>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d42c:	4b16      	ldr	r3, [pc, #88]	; (800d488 <xTaskResumeAll+0x130>)
 800d42e:	2201      	movs	r2, #1
 800d430:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3b01      	subs	r3, #1
 800d436:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1f1      	bne.n	800d422 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d43e:	4b13      	ldr	r3, [pc, #76]	; (800d48c <xTaskResumeAll+0x134>)
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d444:	4b10      	ldr	r3, [pc, #64]	; (800d488 <xTaskResumeAll+0x130>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d009      	beq.n	800d460 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d44c:	2301      	movs	r3, #1
 800d44e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d450:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <xTaskResumeAll+0x138>)
 800d452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d460:	f7fe fc30 	bl	800bcc4 <vPortExitCritical>

	return xAlreadyYielded;
 800d464:	68bb      	ldr	r3, [r7, #8]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	20004954 	.word	0x20004954
 800d474:	2000492c 	.word	0x2000492c
 800d478:	200048ec 	.word	0x200048ec
 800d47c:	20004934 	.word	0x20004934
 800d480:	2000445c 	.word	0x2000445c
 800d484:	20004458 	.word	0x20004458
 800d488:	20004940 	.word	0x20004940
 800d48c:	2000493c 	.word	0x2000493c
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d49a:	4b05      	ldr	r3, [pc, #20]	; (800d4b0 <xTaskGetTickCount+0x1c>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4a0:	687b      	ldr	r3, [r7, #4]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	370c      	adds	r7, #12
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	20004930 	.word	0x20004930

0800d4b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4ba:	f7fe fcb5 	bl	800be28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d4be:	2300      	movs	r3, #0
 800d4c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d4c2:	4b04      	ldr	r3, [pc, #16]	; (800d4d4 <xTaskGetTickCountFromISR+0x20>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4c8:	683b      	ldr	r3, [r7, #0]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20004930 	.word	0x20004930

0800d4d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4e2:	4b4f      	ldr	r3, [pc, #316]	; (800d620 <xTaskIncrementTick+0x148>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f040 808f 	bne.w	800d60a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4ec:	4b4d      	ldr	r3, [pc, #308]	; (800d624 <xTaskIncrementTick+0x14c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4f4:	4a4b      	ldr	r2, [pc, #300]	; (800d624 <xTaskIncrementTick+0x14c>)
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d120      	bne.n	800d542 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d500:	4b49      	ldr	r3, [pc, #292]	; (800d628 <xTaskIncrementTick+0x150>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <xTaskIncrementTick+0x48>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	603b      	str	r3, [r7, #0]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <xTaskIncrementTick+0x46>
 800d520:	4b41      	ldr	r3, [pc, #260]	; (800d628 <xTaskIncrementTick+0x150>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	4b41      	ldr	r3, [pc, #260]	; (800d62c <xTaskIncrementTick+0x154>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a3f      	ldr	r2, [pc, #252]	; (800d628 <xTaskIncrementTick+0x150>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	4a3f      	ldr	r2, [pc, #252]	; (800d62c <xTaskIncrementTick+0x154>)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6013      	str	r3, [r2, #0]
 800d534:	4b3e      	ldr	r3, [pc, #248]	; (800d630 <xTaskIncrementTick+0x158>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	4a3d      	ldr	r2, [pc, #244]	; (800d630 <xTaskIncrementTick+0x158>)
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	f000 fad1 	bl	800dae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d542:	4b3c      	ldr	r3, [pc, #240]	; (800d634 <xTaskIncrementTick+0x15c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	693a      	ldr	r2, [r7, #16]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d349      	bcc.n	800d5e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d54c:	4b36      	ldr	r3, [pc, #216]	; (800d628 <xTaskIncrementTick+0x150>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d104      	bne.n	800d560 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d556:	4b37      	ldr	r3, [pc, #220]	; (800d634 <xTaskIncrementTick+0x15c>)
 800d558:	f04f 32ff 	mov.w	r2, #4294967295
 800d55c:	601a      	str	r2, [r3, #0]
					break;
 800d55e:	e03f      	b.n	800d5e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d560:	4b31      	ldr	r3, [pc, #196]	; (800d628 <xTaskIncrementTick+0x150>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d203      	bcs.n	800d580 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d578:	4a2e      	ldr	r2, [pc, #184]	; (800d634 <xTaskIncrementTick+0x15c>)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d57e:	e02f      	b.n	800d5e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	3304      	adds	r3, #4
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe fa17 	bl	800b9b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d004      	beq.n	800d59c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	3318      	adds	r3, #24
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe fa0e 	bl	800b9b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a0:	4b25      	ldr	r3, [pc, #148]	; (800d638 <xTaskIncrementTick+0x160>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d903      	bls.n	800d5b0 <xTaskIncrementTick+0xd8>
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ac:	4a22      	ldr	r2, [pc, #136]	; (800d638 <xTaskIncrementTick+0x160>)
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4a1f      	ldr	r2, [pc, #124]	; (800d63c <xTaskIncrementTick+0x164>)
 800d5be:	441a      	add	r2, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	f7fe f999 	bl	800b8fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	; (800d640 <xTaskIncrementTick+0x168>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d3b8      	bcc.n	800d54c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5de:	e7b5      	b.n	800d54c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5e0:	4b17      	ldr	r3, [pc, #92]	; (800d640 <xTaskIncrementTick+0x168>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e6:	4915      	ldr	r1, [pc, #84]	; (800d63c <xTaskIncrementTick+0x164>)
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	440b      	add	r3, r1
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d901      	bls.n	800d5fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5fc:	4b11      	ldr	r3, [pc, #68]	; (800d644 <xTaskIncrementTick+0x16c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d007      	beq.n	800d614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d604:	2301      	movs	r3, #1
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	e004      	b.n	800d614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d60a:	4b0f      	ldr	r3, [pc, #60]	; (800d648 <xTaskIncrementTick+0x170>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3301      	adds	r3, #1
 800d610:	4a0d      	ldr	r2, [pc, #52]	; (800d648 <xTaskIncrementTick+0x170>)
 800d612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d614:	697b      	ldr	r3, [r7, #20]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3718      	adds	r7, #24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	20004954 	.word	0x20004954
 800d624:	20004930 	.word	0x20004930
 800d628:	200048e4 	.word	0x200048e4
 800d62c:	200048e8 	.word	0x200048e8
 800d630:	20004944 	.word	0x20004944
 800d634:	2000494c 	.word	0x2000494c
 800d638:	20004934 	.word	0x20004934
 800d63c:	2000445c 	.word	0x2000445c
 800d640:	20004458 	.word	0x20004458
 800d644:	20004940 	.word	0x20004940
 800d648:	2000493c 	.word	0x2000493c

0800d64c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d652:	4b28      	ldr	r3, [pc, #160]	; (800d6f4 <vTaskSwitchContext+0xa8>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d65a:	4b27      	ldr	r3, [pc, #156]	; (800d6f8 <vTaskSwitchContext+0xac>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d660:	e041      	b.n	800d6e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d662:	4b25      	ldr	r3, [pc, #148]	; (800d6f8 <vTaskSwitchContext+0xac>)
 800d664:	2200      	movs	r2, #0
 800d666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d668:	4b24      	ldr	r3, [pc, #144]	; (800d6fc <vTaskSwitchContext+0xb0>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	60fb      	str	r3, [r7, #12]
 800d66e:	e010      	b.n	800d692 <vTaskSwitchContext+0x46>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10a      	bne.n	800d68c <vTaskSwitchContext+0x40>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	607b      	str	r3, [r7, #4]
}
 800d688:	bf00      	nop
 800d68a:	e7fe      	b.n	800d68a <vTaskSwitchContext+0x3e>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	3b01      	subs	r3, #1
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	491b      	ldr	r1, [pc, #108]	; (800d700 <vTaskSwitchContext+0xb4>)
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4613      	mov	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	440b      	add	r3, r1
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0e4      	beq.n	800d670 <vTaskSwitchContext+0x24>
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4a13      	ldr	r2, [pc, #76]	; (800d700 <vTaskSwitchContext+0xb4>)
 800d6b2:	4413      	add	r3, r2
 800d6b4:	60bb      	str	r3, [r7, #8]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	685a      	ldr	r2, [r3, #4]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	605a      	str	r2, [r3, #4]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d104      	bne.n	800d6d6 <vTaskSwitchContext+0x8a>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	605a      	str	r2, [r3, #4]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	4a09      	ldr	r2, [pc, #36]	; (800d704 <vTaskSwitchContext+0xb8>)
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	4a06      	ldr	r2, [pc, #24]	; (800d6fc <vTaskSwitchContext+0xb0>)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6013      	str	r3, [r2, #0]
}
 800d6e6:	bf00      	nop
 800d6e8:	3714      	adds	r7, #20
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	20004954 	.word	0x20004954
 800d6f8:	20004940 	.word	0x20004940
 800d6fc:	20004934 	.word	0x20004934
 800d700:	2000445c 	.word	0x2000445c
 800d704:	20004458 	.word	0x20004458

0800d708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	60fb      	str	r3, [r7, #12]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d72e:	4b07      	ldr	r3, [pc, #28]	; (800d74c <vTaskPlaceOnEventList+0x44>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3318      	adds	r3, #24
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7fe f905 	bl	800b946 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d73c:	2101      	movs	r1, #1
 800d73e:	6838      	ldr	r0, [r7, #0]
 800d740:	f000 fb7a 	bl	800de38 <prvAddCurrentTaskToDelayedList>
}
 800d744:	bf00      	nop
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20004458 	.word	0x20004458

0800d750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10a      	bne.n	800d778 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	617b      	str	r3, [r7, #20]
}
 800d774:	bf00      	nop
 800d776:	e7fe      	b.n	800d776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d778:	4b0a      	ldr	r3, [pc, #40]	; (800d7a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3318      	adds	r3, #24
 800d77e:	4619      	mov	r1, r3
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7fe f8bc 	bl	800b8fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d78c:	f04f 33ff 	mov.w	r3, #4294967295
 800d790:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	68b8      	ldr	r0, [r7, #8]
 800d796:	f000 fb4f 	bl	800de38 <prvAddCurrentTaskToDelayedList>
	}
 800d79a:	bf00      	nop
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20004458 	.word	0x20004458

0800d7a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	60fb      	str	r3, [r7, #12]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	3318      	adds	r3, #24
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe f8ed 	bl	800b9b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7de:	4b1e      	ldr	r3, [pc, #120]	; (800d858 <xTaskRemoveFromEventList+0xb0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d11d      	bne.n	800d822 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe f8e4 	bl	800b9b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	4b19      	ldr	r3, [pc, #100]	; (800d85c <xTaskRemoveFromEventList+0xb4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d903      	bls.n	800d804 <xTaskRemoveFromEventList+0x5c>
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	4a16      	ldr	r2, [pc, #88]	; (800d85c <xTaskRemoveFromEventList+0xb4>)
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	4a13      	ldr	r2, [pc, #76]	; (800d860 <xTaskRemoveFromEventList+0xb8>)
 800d812:	441a      	add	r2, r3
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	3304      	adds	r3, #4
 800d818:	4619      	mov	r1, r3
 800d81a:	4610      	mov	r0, r2
 800d81c:	f7fe f86f 	bl	800b8fe <vListInsertEnd>
 800d820:	e005      	b.n	800d82e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	3318      	adds	r3, #24
 800d826:	4619      	mov	r1, r3
 800d828:	480e      	ldr	r0, [pc, #56]	; (800d864 <xTaskRemoveFromEventList+0xbc>)
 800d82a:	f7fe f868 	bl	800b8fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	4b0d      	ldr	r3, [pc, #52]	; (800d868 <xTaskRemoveFromEventList+0xc0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	429a      	cmp	r2, r3
 800d83a:	d905      	bls.n	800d848 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d83c:	2301      	movs	r3, #1
 800d83e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d840:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <xTaskRemoveFromEventList+0xc4>)
 800d842:	2201      	movs	r2, #1
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	e001      	b.n	800d84c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d84c:	697b      	ldr	r3, [r7, #20]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20004954 	.word	0x20004954
 800d85c:	20004934 	.word	0x20004934
 800d860:	2000445c 	.word	0x2000445c
 800d864:	200048ec 	.word	0x200048ec
 800d868:	20004458 	.word	0x20004458
 800d86c:	20004940 	.word	0x20004940

0800d870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d878:	4b06      	ldr	r3, [pc, #24]	; (800d894 <vTaskInternalSetTimeOutState+0x24>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <vTaskInternalSetTimeOutState+0x28>)
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	605a      	str	r2, [r3, #4]
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	20004944 	.word	0x20004944
 800d898:	20004930 	.word	0x20004930

0800d89c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b088      	sub	sp, #32
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	613b      	str	r3, [r7, #16]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	60fb      	str	r3, [r7, #12]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8de:	f7fe f9c1 	bl	800bc64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8e2:	4b1d      	ldr	r3, [pc, #116]	; (800d958 <xTaskCheckForTimeOut+0xbc>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	69ba      	ldr	r2, [r7, #24]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fa:	d102      	bne.n	800d902 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	61fb      	str	r3, [r7, #28]
 800d900:	e023      	b.n	800d94a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	4b15      	ldr	r3, [pc, #84]	; (800d95c <xTaskCheckForTimeOut+0xc0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d007      	beq.n	800d91e <xTaskCheckForTimeOut+0x82>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	429a      	cmp	r2, r3
 800d916:	d302      	bcc.n	800d91e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d918:	2301      	movs	r3, #1
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	e015      	b.n	800d94a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	429a      	cmp	r2, r3
 800d926:	d20b      	bcs.n	800d940 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	1ad2      	subs	r2, r2, r3
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff ff9b 	bl	800d870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d93a:	2300      	movs	r3, #0
 800d93c:	61fb      	str	r3, [r7, #28]
 800d93e:	e004      	b.n	800d94a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d946:	2301      	movs	r3, #1
 800d948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d94a:	f7fe f9bb 	bl	800bcc4 <vPortExitCritical>

	return xReturn;
 800d94e:	69fb      	ldr	r3, [r7, #28]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20004930 	.word	0x20004930
 800d95c:	20004944 	.word	0x20004944

0800d960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d960:	b480      	push	{r7}
 800d962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d964:	4b03      	ldr	r3, [pc, #12]	; (800d974 <vTaskMissedYield+0x14>)
 800d966:	2201      	movs	r2, #1
 800d968:	601a      	str	r2, [r3, #0]
}
 800d96a:	bf00      	nop
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	20004940 	.word	0x20004940

0800d978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d980:	f000 f852 	bl	800da28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <prvIdleTask+0x28>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d9f9      	bls.n	800d980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d98c:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <prvIdleTask+0x2c>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d99c:	e7f0      	b.n	800d980 <prvIdleTask+0x8>
 800d99e:	bf00      	nop
 800d9a0:	2000445c 	.word	0x2000445c
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	607b      	str	r3, [r7, #4]
 800d9b2:	e00c      	b.n	800d9ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4413      	add	r3, r2
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	4a12      	ldr	r2, [pc, #72]	; (800da08 <prvInitialiseTaskLists+0x60>)
 800d9c0:	4413      	add	r3, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fd ff6e 	bl	800b8a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	607b      	str	r3, [r7, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b37      	cmp	r3, #55	; 0x37
 800d9d2:	d9ef      	bls.n	800d9b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9d4:	480d      	ldr	r0, [pc, #52]	; (800da0c <prvInitialiseTaskLists+0x64>)
 800d9d6:	f7fd ff65 	bl	800b8a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9da:	480d      	ldr	r0, [pc, #52]	; (800da10 <prvInitialiseTaskLists+0x68>)
 800d9dc:	f7fd ff62 	bl	800b8a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9e0:	480c      	ldr	r0, [pc, #48]	; (800da14 <prvInitialiseTaskLists+0x6c>)
 800d9e2:	f7fd ff5f 	bl	800b8a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9e6:	480c      	ldr	r0, [pc, #48]	; (800da18 <prvInitialiseTaskLists+0x70>)
 800d9e8:	f7fd ff5c 	bl	800b8a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9ec:	480b      	ldr	r0, [pc, #44]	; (800da1c <prvInitialiseTaskLists+0x74>)
 800d9ee:	f7fd ff59 	bl	800b8a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9f2:	4b0b      	ldr	r3, [pc, #44]	; (800da20 <prvInitialiseTaskLists+0x78>)
 800d9f4:	4a05      	ldr	r2, [pc, #20]	; (800da0c <prvInitialiseTaskLists+0x64>)
 800d9f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9f8:	4b0a      	ldr	r3, [pc, #40]	; (800da24 <prvInitialiseTaskLists+0x7c>)
 800d9fa:	4a05      	ldr	r2, [pc, #20]	; (800da10 <prvInitialiseTaskLists+0x68>)
 800d9fc:	601a      	str	r2, [r3, #0]
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	2000445c 	.word	0x2000445c
 800da0c:	200048bc 	.word	0x200048bc
 800da10:	200048d0 	.word	0x200048d0
 800da14:	200048ec 	.word	0x200048ec
 800da18:	20004900 	.word	0x20004900
 800da1c:	20004918 	.word	0x20004918
 800da20:	200048e4 	.word	0x200048e4
 800da24:	200048e8 	.word	0x200048e8

0800da28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da2e:	e019      	b.n	800da64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da30:	f7fe f918 	bl	800bc64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da34:	4b10      	ldr	r3, [pc, #64]	; (800da78 <prvCheckTasksWaitingTermination+0x50>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	4618      	mov	r0, r3
 800da42:	f7fd ffb9 	bl	800b9b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da46:	4b0d      	ldr	r3, [pc, #52]	; (800da7c <prvCheckTasksWaitingTermination+0x54>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	4a0b      	ldr	r2, [pc, #44]	; (800da7c <prvCheckTasksWaitingTermination+0x54>)
 800da4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da50:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <prvCheckTasksWaitingTermination+0x58>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3b01      	subs	r3, #1
 800da56:	4a0a      	ldr	r2, [pc, #40]	; (800da80 <prvCheckTasksWaitingTermination+0x58>)
 800da58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da5a:	f7fe f933 	bl	800bcc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f810 	bl	800da84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <prvCheckTasksWaitingTermination+0x58>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1e1      	bne.n	800da30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da6c:	bf00      	nop
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	20004900 	.word	0x20004900
 800da7c:	2000492c 	.word	0x2000492c
 800da80:	20004914 	.word	0x20004914

0800da84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da92:	2b00      	cmp	r3, #0
 800da94:	d108      	bne.n	800daa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fd fde4 	bl	800b668 <vPortFree>
				vPortFree( pxTCB );
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f7fd fde1 	bl	800b668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800daa6:	e018      	b.n	800dada <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d103      	bne.n	800daba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7fd fdd8 	bl	800b668 <vPortFree>
	}
 800dab8:	e00f      	b.n	800dada <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d00a      	beq.n	800dada <prvDeleteTCB+0x56>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	60fb      	str	r3, [r7, #12]
}
 800dad6:	bf00      	nop
 800dad8:	e7fe      	b.n	800dad8 <prvDeleteTCB+0x54>
	}
 800dada:	bf00      	nop
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
	...

0800dae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daea:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <prvResetNextTaskUnblockTime+0x38>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d104      	bne.n	800dafe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <prvResetNextTaskUnblockTime+0x3c>)
 800daf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dafa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dafc:	e008      	b.n	800db10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dafe:	4b07      	ldr	r3, [pc, #28]	; (800db1c <prvResetNextTaskUnblockTime+0x38>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	4a04      	ldr	r2, [pc, #16]	; (800db20 <prvResetNextTaskUnblockTime+0x3c>)
 800db0e:	6013      	str	r3, [r2, #0]
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	200048e4 	.word	0x200048e4
 800db20:	2000494c 	.word	0x2000494c

0800db24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db2a:	4b0b      	ldr	r3, [pc, #44]	; (800db58 <xTaskGetSchedulerState+0x34>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d102      	bne.n	800db38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db32:	2301      	movs	r3, #1
 800db34:	607b      	str	r3, [r7, #4]
 800db36:	e008      	b.n	800db4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db38:	4b08      	ldr	r3, [pc, #32]	; (800db5c <xTaskGetSchedulerState+0x38>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db40:	2302      	movs	r3, #2
 800db42:	607b      	str	r3, [r7, #4]
 800db44:	e001      	b.n	800db4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db46:	2300      	movs	r3, #0
 800db48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db4a:	687b      	ldr	r3, [r7, #4]
	}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	20004938 	.word	0x20004938
 800db5c:	20004954 	.word	0x20004954

0800db60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db6c:	2300      	movs	r3, #0
 800db6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d051      	beq.n	800dc1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7a:	4b2a      	ldr	r3, [pc, #168]	; (800dc24 <xTaskPriorityInherit+0xc4>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db80:	429a      	cmp	r2, r3
 800db82:	d241      	bcs.n	800dc08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	699b      	ldr	r3, [r3, #24]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	db06      	blt.n	800db9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db8c:	4b25      	ldr	r3, [pc, #148]	; (800dc24 <xTaskPriorityInherit+0xc4>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6959      	ldr	r1, [r3, #20]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba2:	4613      	mov	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4413      	add	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4a1f      	ldr	r2, [pc, #124]	; (800dc28 <xTaskPriorityInherit+0xc8>)
 800dbac:	4413      	add	r3, r2
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	d122      	bne.n	800dbf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fd fefe 	bl	800b9b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbbc:	4b19      	ldr	r3, [pc, #100]	; (800dc24 <xTaskPriorityInherit+0xc4>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbca:	4b18      	ldr	r3, [pc, #96]	; (800dc2c <xTaskPriorityInherit+0xcc>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d903      	bls.n	800dbda <xTaskPriorityInherit+0x7a>
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd6:	4a15      	ldr	r2, [pc, #84]	; (800dc2c <xTaskPriorityInherit+0xcc>)
 800dbd8:	6013      	str	r3, [r2, #0]
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbde:	4613      	mov	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4a10      	ldr	r2, [pc, #64]	; (800dc28 <xTaskPriorityInherit+0xc8>)
 800dbe8:	441a      	add	r2, r3
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	f7fd fe84 	bl	800b8fe <vListInsertEnd>
 800dbf6:	e004      	b.n	800dc02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbf8:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <xTaskPriorityInherit+0xc4>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc02:	2301      	movs	r3, #1
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e008      	b.n	800dc1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc0c:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <xTaskPriorityInherit+0xc4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d201      	bcs.n	800dc1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc16:	2301      	movs	r3, #1
 800dc18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
	}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	20004458 	.word	0x20004458
 800dc28:	2000445c 	.word	0x2000445c
 800dc2c:	20004934 	.word	0x20004934

0800dc30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d056      	beq.n	800dcf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc46:	4b2e      	ldr	r3, [pc, #184]	; (800dd00 <xTaskPriorityDisinherit+0xd0>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d00a      	beq.n	800dc66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	60fb      	str	r3, [r7, #12]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10a      	bne.n	800dc84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	60bb      	str	r3, [r7, #8]
}
 800dc80:	bf00      	nop
 800dc82:	e7fe      	b.n	800dc82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc88:	1e5a      	subs	r2, r3, #1
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d02c      	beq.n	800dcf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d128      	bne.n	800dcf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	3304      	adds	r3, #4
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fd fe86 	bl	800b9b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc4:	4b0f      	ldr	r3, [pc, #60]	; (800dd04 <xTaskPriorityDisinherit+0xd4>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d903      	bls.n	800dcd4 <xTaskPriorityDisinherit+0xa4>
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	4a0c      	ldr	r2, [pc, #48]	; (800dd04 <xTaskPriorityDisinherit+0xd4>)
 800dcd2:	6013      	str	r3, [r2, #0]
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd8:	4613      	mov	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	4a09      	ldr	r2, [pc, #36]	; (800dd08 <xTaskPriorityDisinherit+0xd8>)
 800dce2:	441a      	add	r2, r3
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	3304      	adds	r3, #4
 800dce8:	4619      	mov	r1, r3
 800dcea:	4610      	mov	r0, r2
 800dcec:	f7fd fe07 	bl	800b8fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcf4:	697b      	ldr	r3, [r7, #20]
	}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	20004458 	.word	0x20004458
 800dd04:	20004934 	.word	0x20004934
 800dd08:	2000445c 	.word	0x2000445c

0800dd0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d06a      	beq.n	800ddfa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	60fb      	str	r3, [r7, #12]
}
 800dd3e:	bf00      	nop
 800dd40:	e7fe      	b.n	800dd40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d902      	bls.n	800dd52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	61fb      	str	r3, [r7, #28]
 800dd50:	e002      	b.n	800dd58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5c:	69fa      	ldr	r2, [r7, #28]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d04b      	beq.n	800ddfa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d146      	bne.n	800ddfa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd6c:	4b25      	ldr	r3, [pc, #148]	; (800de04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	69ba      	ldr	r2, [r7, #24]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d10a      	bne.n	800dd8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	60bb      	str	r3, [r7, #8]
}
 800dd88:	bf00      	nop
 800dd8a:	e7fe      	b.n	800dd8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	69fa      	ldr	r2, [r7, #28]
 800dd96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	db04      	blt.n	800ddaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	6959      	ldr	r1, [r3, #20]
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4a13      	ldr	r2, [pc, #76]	; (800de08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddba:	4413      	add	r3, r2
 800ddbc:	4299      	cmp	r1, r3
 800ddbe:	d11c      	bne.n	800ddfa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fd fdf7 	bl	800b9b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddce:	4b0f      	ldr	r3, [pc, #60]	; (800de0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d903      	bls.n	800ddde <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddda:	4a0c      	ldr	r2, [pc, #48]	; (800de0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dddc:	6013      	str	r3, [r2, #0]
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde2:	4613      	mov	r3, r2
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4a07      	ldr	r2, [pc, #28]	; (800de08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddec:	441a      	add	r2, r3
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	f7fd fd82 	bl	800b8fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddfa:	bf00      	nop
 800ddfc:	3720      	adds	r7, #32
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20004458 	.word	0x20004458
 800de08:	2000445c 	.word	0x2000445c
 800de0c:	20004934 	.word	0x20004934

0800de10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800de10:	b480      	push	{r7}
 800de12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800de14:	4b07      	ldr	r3, [pc, #28]	; (800de34 <pvTaskIncrementMutexHeldCount+0x24>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de1c:	4b05      	ldr	r3, [pc, #20]	; (800de34 <pvTaskIncrementMutexHeldCount+0x24>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de22:	3201      	adds	r2, #1
 800de24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de26:	4b03      	ldr	r3, [pc, #12]	; (800de34 <pvTaskIncrementMutexHeldCount+0x24>)
 800de28:	681b      	ldr	r3, [r3, #0]
	}
 800de2a:	4618      	mov	r0, r3
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr
 800de34:	20004458 	.word	0x20004458

0800de38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de42:	4b21      	ldr	r3, [pc, #132]	; (800dec8 <prvAddCurrentTaskToDelayedList+0x90>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de48:	4b20      	ldr	r3, [pc, #128]	; (800decc <prvAddCurrentTaskToDelayedList+0x94>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3304      	adds	r3, #4
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fd fdb2 	bl	800b9b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5a:	d10a      	bne.n	800de72 <prvAddCurrentTaskToDelayedList+0x3a>
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d007      	beq.n	800de72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de62:	4b1a      	ldr	r3, [pc, #104]	; (800decc <prvAddCurrentTaskToDelayedList+0x94>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3304      	adds	r3, #4
 800de68:	4619      	mov	r1, r3
 800de6a:	4819      	ldr	r0, [pc, #100]	; (800ded0 <prvAddCurrentTaskToDelayedList+0x98>)
 800de6c:	f7fd fd47 	bl	800b8fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de70:	e026      	b.n	800dec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4413      	add	r3, r2
 800de78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de7a:	4b14      	ldr	r3, [pc, #80]	; (800decc <prvAddCurrentTaskToDelayedList+0x94>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	429a      	cmp	r2, r3
 800de88:	d209      	bcs.n	800de9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de8a:	4b12      	ldr	r3, [pc, #72]	; (800ded4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	4b0f      	ldr	r3, [pc, #60]	; (800decc <prvAddCurrentTaskToDelayedList+0x94>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3304      	adds	r3, #4
 800de94:	4619      	mov	r1, r3
 800de96:	4610      	mov	r0, r2
 800de98:	f7fd fd55 	bl	800b946 <vListInsert>
}
 800de9c:	e010      	b.n	800dec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de9e:	4b0e      	ldr	r3, [pc, #56]	; (800ded8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	4b0a      	ldr	r3, [pc, #40]	; (800decc <prvAddCurrentTaskToDelayedList+0x94>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f7fd fd4b 	bl	800b946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <prvAddCurrentTaskToDelayedList+0xa4>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d202      	bcs.n	800dec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800deba:	4a08      	ldr	r2, [pc, #32]	; (800dedc <prvAddCurrentTaskToDelayedList+0xa4>)
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	6013      	str	r3, [r2, #0]
}
 800dec0:	bf00      	nop
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20004930 	.word	0x20004930
 800decc:	20004458 	.word	0x20004458
 800ded0:	20004918 	.word	0x20004918
 800ded4:	200048e8 	.word	0x200048e8
 800ded8:	200048e4 	.word	0x200048e4
 800dedc:	2000494c 	.word	0x2000494c

0800dee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	; 0x28
 800dee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dee6:	2300      	movs	r3, #0
 800dee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800deea:	f000 fb07 	bl	800e4fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800deee:	4b1c      	ldr	r3, [pc, #112]	; (800df60 <xTimerCreateTimerTask+0x80>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d021      	beq.n	800df3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800defe:	1d3a      	adds	r2, r7, #4
 800df00:	f107 0108 	add.w	r1, r7, #8
 800df04:	f107 030c 	add.w	r3, r7, #12
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fd fac7 	bl	800b49c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	9202      	str	r2, [sp, #8]
 800df16:	9301      	str	r3, [sp, #4]
 800df18:	2302      	movs	r3, #2
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	2300      	movs	r3, #0
 800df1e:	460a      	mov	r2, r1
 800df20:	4910      	ldr	r1, [pc, #64]	; (800df64 <xTimerCreateTimerTask+0x84>)
 800df22:	4811      	ldr	r0, [pc, #68]	; (800df68 <xTimerCreateTimerTask+0x88>)
 800df24:	f7fe ffce 	bl	800cec4 <xTaskCreateStatic>
 800df28:	4603      	mov	r3, r0
 800df2a:	4a10      	ldr	r2, [pc, #64]	; (800df6c <xTimerCreateTimerTask+0x8c>)
 800df2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df2e:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <xTimerCreateTimerTask+0x8c>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d001      	beq.n	800df3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df36:	2301      	movs	r3, #1
 800df38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10a      	bne.n	800df56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	613b      	str	r3, [r7, #16]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df56:	697b      	ldr	r3, [r7, #20]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3718      	adds	r7, #24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	20004988 	.word	0x20004988
 800df64:	0802def8 	.word	0x0802def8
 800df68:	0800e0a5 	.word	0x0800e0a5
 800df6c:	2000498c 	.word	0x2000498c

0800df70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b08a      	sub	sp, #40	; 0x28
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
 800df7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df7e:	2300      	movs	r3, #0
 800df80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10a      	bne.n	800df9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	623b      	str	r3, [r7, #32]
}
 800df9a:	bf00      	nop
 800df9c:	e7fe      	b.n	800df9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df9e:	4b1a      	ldr	r3, [pc, #104]	; (800e008 <xTimerGenericCommand+0x98>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d02a      	beq.n	800dffc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2b05      	cmp	r3, #5
 800dfb6:	dc18      	bgt.n	800dfea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dfb8:	f7ff fdb4 	bl	800db24 <xTaskGetSchedulerState>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d109      	bne.n	800dfd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dfc2:	4b11      	ldr	r3, [pc, #68]	; (800e008 <xTimerGenericCommand+0x98>)
 800dfc4:	6818      	ldr	r0, [r3, #0]
 800dfc6:	f107 0110 	add.w	r1, r7, #16
 800dfca:	2300      	movs	r3, #0
 800dfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfce:	f7fe f913 	bl	800c1f8 <xQueueGenericSend>
 800dfd2:	6278      	str	r0, [r7, #36]	; 0x24
 800dfd4:	e012      	b.n	800dffc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dfd6:	4b0c      	ldr	r3, [pc, #48]	; (800e008 <xTimerGenericCommand+0x98>)
 800dfd8:	6818      	ldr	r0, [r3, #0]
 800dfda:	f107 0110 	add.w	r1, r7, #16
 800dfde:	2300      	movs	r3, #0
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f7fe f909 	bl	800c1f8 <xQueueGenericSend>
 800dfe6:	6278      	str	r0, [r7, #36]	; 0x24
 800dfe8:	e008      	b.n	800dffc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dfea:	4b07      	ldr	r3, [pc, #28]	; (800e008 <xTimerGenericCommand+0x98>)
 800dfec:	6818      	ldr	r0, [r3, #0]
 800dfee:	f107 0110 	add.w	r1, r7, #16
 800dff2:	2300      	movs	r3, #0
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	f7fe f9fd 	bl	800c3f4 <xQueueGenericSendFromISR>
 800dffa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3728      	adds	r7, #40	; 0x28
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20004988 	.word	0x20004988

0800e00c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b088      	sub	sp, #32
 800e010:	af02      	add	r7, sp, #8
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e016:	4b22      	ldr	r3, [pc, #136]	; (800e0a0 <prvProcessExpiredTimer+0x94>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	3304      	adds	r3, #4
 800e024:	4618      	mov	r0, r3
 800e026:	f7fd fcc7 	bl	800b9b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e030:	f003 0304 	and.w	r3, r3, #4
 800e034:	2b00      	cmp	r3, #0
 800e036:	d022      	beq.n	800e07e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	699a      	ldr	r2, [r3, #24]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	18d1      	adds	r1, r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	6978      	ldr	r0, [r7, #20]
 800e046:	f000 f8d1 	bl	800e1ec <prvInsertTimerInActiveList>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d01f      	beq.n	800e090 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e050:	2300      	movs	r3, #0
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	2300      	movs	r3, #0
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	2100      	movs	r1, #0
 800e05a:	6978      	ldr	r0, [r7, #20]
 800e05c:	f7ff ff88 	bl	800df70 <xTimerGenericCommand>
 800e060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d113      	bne.n	800e090 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06c:	f383 8811 	msr	BASEPRI, r3
 800e070:	f3bf 8f6f 	isb	sy
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	60fb      	str	r3, [r7, #12]
}
 800e07a:	bf00      	nop
 800e07c:	e7fe      	b.n	800e07c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e084:	f023 0301 	bic.w	r3, r3, #1
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	6a1b      	ldr	r3, [r3, #32]
 800e094:	6978      	ldr	r0, [r7, #20]
 800e096:	4798      	blx	r3
}
 800e098:	bf00      	nop
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	20004980 	.word	0x20004980

0800e0a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0ac:	f107 0308 	add.w	r3, r7, #8
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f000 f857 	bl	800e164 <prvGetNextExpireTime>
 800e0b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f803 	bl	800e0c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0c2:	f000 f8d5 	bl	800e270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0c6:	e7f1      	b.n	800e0ac <prvTimerTask+0x8>

0800e0c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e0d2:	f7ff f933 	bl	800d33c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0d6:	f107 0308 	add.w	r3, r7, #8
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f000 f866 	bl	800e1ac <prvSampleTimeNow>
 800e0e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d130      	bne.n	800e14a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10a      	bne.n	800e104 <prvProcessTimerOrBlockTask+0x3c>
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d806      	bhi.n	800e104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e0f6:	f7ff f92f 	bl	800d358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0fa:	68f9      	ldr	r1, [r7, #12]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7ff ff85 	bl	800e00c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e102:	e024      	b.n	800e14e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d008      	beq.n	800e11c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e10a:	4b13      	ldr	r3, [pc, #76]	; (800e158 <prvProcessTimerOrBlockTask+0x90>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <prvProcessTimerOrBlockTask+0x50>
 800e114:	2301      	movs	r3, #1
 800e116:	e000      	b.n	800e11a <prvProcessTimerOrBlockTask+0x52>
 800e118:	2300      	movs	r3, #0
 800e11a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e11c:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <prvProcessTimerOrBlockTask+0x94>)
 800e11e:	6818      	ldr	r0, [r3, #0]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	4619      	mov	r1, r3
 800e12a:	f7fe fe97 	bl	800ce5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e12e:	f7ff f913 	bl	800d358 <xTaskResumeAll>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e138:	4b09      	ldr	r3, [pc, #36]	; (800e160 <prvProcessTimerOrBlockTask+0x98>)
 800e13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13e:	601a      	str	r2, [r3, #0]
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	f3bf 8f6f 	isb	sy
}
 800e148:	e001      	b.n	800e14e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e14a:	f7ff f905 	bl	800d358 <xTaskResumeAll>
}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20004984 	.word	0x20004984
 800e15c:	20004988 	.word	0x20004988
 800e160:	e000ed04 	.word	0xe000ed04

0800e164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e16c:	4b0e      	ldr	r3, [pc, #56]	; (800e1a8 <prvGetNextExpireTime+0x44>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <prvGetNextExpireTime+0x16>
 800e176:	2201      	movs	r2, #1
 800e178:	e000      	b.n	800e17c <prvGetNextExpireTime+0x18>
 800e17a:	2200      	movs	r2, #0
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d105      	bne.n	800e194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e188:	4b07      	ldr	r3, [pc, #28]	; (800e1a8 <prvGetNextExpireTime+0x44>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	e001      	b.n	800e198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e194:	2300      	movs	r3, #0
 800e196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e198:	68fb      	ldr	r3, [r7, #12]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	20004980 	.word	0x20004980

0800e1ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e1b4:	f7ff f96e 	bl	800d494 <xTaskGetTickCount>
 800e1b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e1ba:	4b0b      	ldr	r3, [pc, #44]	; (800e1e8 <prvSampleTimeNow+0x3c>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d205      	bcs.n	800e1d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e1c4:	f000 f936 	bl	800e434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	e002      	b.n	800e1d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e1d6:	4a04      	ldr	r2, [pc, #16]	; (800e1e8 <prvSampleTimeNow+0x3c>)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20004990 	.word	0x20004990

0800e1ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
 800e1f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d812      	bhi.n	800e238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	1ad2      	subs	r2, r2, r3
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d302      	bcc.n	800e226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e220:	2301      	movs	r3, #1
 800e222:	617b      	str	r3, [r7, #20]
 800e224:	e01b      	b.n	800e25e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e226:	4b10      	ldr	r3, [pc, #64]	; (800e268 <prvInsertTimerInActiveList+0x7c>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3304      	adds	r3, #4
 800e22e:	4619      	mov	r1, r3
 800e230:	4610      	mov	r0, r2
 800e232:	f7fd fb88 	bl	800b946 <vListInsert>
 800e236:	e012      	b.n	800e25e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d206      	bcs.n	800e24e <prvInsertTimerInActiveList+0x62>
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	429a      	cmp	r2, r3
 800e246:	d302      	bcc.n	800e24e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e248:	2301      	movs	r3, #1
 800e24a:	617b      	str	r3, [r7, #20]
 800e24c:	e007      	b.n	800e25e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e24e:	4b07      	ldr	r3, [pc, #28]	; (800e26c <prvInsertTimerInActiveList+0x80>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3304      	adds	r3, #4
 800e256:	4619      	mov	r1, r3
 800e258:	4610      	mov	r0, r2
 800e25a:	f7fd fb74 	bl	800b946 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e25e:	697b      	ldr	r3, [r7, #20]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	20004984 	.word	0x20004984
 800e26c:	20004980 	.word	0x20004980

0800e270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08e      	sub	sp, #56	; 0x38
 800e274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e276:	e0ca      	b.n	800e40e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	da18      	bge.n	800e2b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e27e:	1d3b      	adds	r3, r7, #4
 800e280:	3304      	adds	r3, #4
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	61fb      	str	r3, [r7, #28]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a6:	6850      	ldr	r0, [r2, #4]
 800e2a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2aa:	6892      	ldr	r2, [r2, #8]
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f2c0 80aa 	blt.w	800e40c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fd fb75 	bl	800b9b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2ce:	463b      	mov	r3, r7
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff ff6b 	bl	800e1ac <prvSampleTimeNow>
 800e2d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b09      	cmp	r3, #9
 800e2dc:	f200 8097 	bhi.w	800e40e <prvProcessReceivedCommands+0x19e>
 800e2e0:	a201      	add	r2, pc, #4	; (adr r2, 800e2e8 <prvProcessReceivedCommands+0x78>)
 800e2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e6:	bf00      	nop
 800e2e8:	0800e311 	.word	0x0800e311
 800e2ec:	0800e311 	.word	0x0800e311
 800e2f0:	0800e311 	.word	0x0800e311
 800e2f4:	0800e385 	.word	0x0800e385
 800e2f8:	0800e399 	.word	0x0800e399
 800e2fc:	0800e3e3 	.word	0x0800e3e3
 800e300:	0800e311 	.word	0x0800e311
 800e304:	0800e311 	.word	0x0800e311
 800e308:	0800e385 	.word	0x0800e385
 800e30c:	0800e399 	.word	0x0800e399
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e316:	f043 0301 	orr.w	r3, r3, #1
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	699b      	ldr	r3, [r3, #24]
 800e328:	18d1      	adds	r1, r2, r3
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e32e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e330:	f7ff ff5c 	bl	800e1ec <prvInsertTimerInActiveList>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d069      	beq.n	800e40e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33c:	6a1b      	ldr	r3, [r3, #32]
 800e33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e348:	f003 0304 	and.w	r3, r3, #4
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d05e      	beq.n	800e40e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	699b      	ldr	r3, [r3, #24]
 800e356:	441a      	add	r2, r3
 800e358:	2300      	movs	r3, #0
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	2300      	movs	r3, #0
 800e35e:	2100      	movs	r1, #0
 800e360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e362:	f7ff fe05 	bl	800df70 <xTimerGenericCommand>
 800e366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e368:	6a3b      	ldr	r3, [r7, #32]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d14f      	bne.n	800e40e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	61bb      	str	r3, [r7, #24]
}
 800e380:	bf00      	nop
 800e382:	e7fe      	b.n	800e382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e38a:	f023 0301 	bic.w	r3, r3, #1
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e396:	e03a      	b.n	800e40e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e39e:	f043 0301 	orr.w	r3, r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10a      	bne.n	800e3ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	617b      	str	r3, [r7, #20]
}
 800e3ca:	bf00      	nop
 800e3cc:	e7fe      	b.n	800e3cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d0:	699a      	ldr	r2, [r3, #24]
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	18d1      	adds	r1, r2, r3
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3dc:	f7ff ff06 	bl	800e1ec <prvInsertTimerInActiveList>
					break;
 800e3e0:	e015      	b.n	800e40e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3e8:	f003 0302 	and.w	r3, r3, #2
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d103      	bne.n	800e3f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3f2:	f7fd f939 	bl	800b668 <vPortFree>
 800e3f6:	e00a      	b.n	800e40e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3fe:	f023 0301 	bic.w	r3, r3, #1
 800e402:	b2da      	uxtb	r2, r3
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e40a:	e000      	b.n	800e40e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e40c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e40e:	4b08      	ldr	r3, [pc, #32]	; (800e430 <prvProcessReceivedCommands+0x1c0>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	1d39      	adds	r1, r7, #4
 800e414:	2200      	movs	r2, #0
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe f914 	bl	800c644 <xQueueReceive>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f47f af2a 	bne.w	800e278 <prvProcessReceivedCommands+0x8>
	}
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	3730      	adds	r7, #48	; 0x30
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20004988 	.word	0x20004988

0800e434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e43a:	e048      	b.n	800e4ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e43c:	4b2d      	ldr	r3, [pc, #180]	; (800e4f4 <prvSwitchTimerLists+0xc0>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e446:	4b2b      	ldr	r3, [pc, #172]	; (800e4f4 <prvSwitchTimerLists+0xc0>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	3304      	adds	r3, #4
 800e454:	4618      	mov	r0, r3
 800e456:	f7fd faaf 	bl	800b9b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6a1b      	ldr	r3, [r3, #32]
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e468:	f003 0304 	and.w	r3, r3, #4
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d02e      	beq.n	800e4ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	4413      	add	r3, r2
 800e478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d90e      	bls.n	800e4a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e48e:	4b19      	ldr	r3, [pc, #100]	; (800e4f4 <prvSwitchTimerLists+0xc0>)
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3304      	adds	r3, #4
 800e496:	4619      	mov	r1, r3
 800e498:	4610      	mov	r0, r2
 800e49a:	f7fd fa54 	bl	800b946 <vListInsert>
 800e49e:	e016      	b.n	800e4ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7ff fd60 	bl	800df70 <xTimerGenericCommand>
 800e4b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10a      	bne.n	800e4ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	603b      	str	r3, [r7, #0]
}
 800e4ca:	bf00      	nop
 800e4cc:	e7fe      	b.n	800e4cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <prvSwitchTimerLists+0xc0>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1b1      	bne.n	800e43c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e4d8:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <prvSwitchTimerLists+0xc0>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e4de:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <prvSwitchTimerLists+0xc4>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a04      	ldr	r2, [pc, #16]	; (800e4f4 <prvSwitchTimerLists+0xc0>)
 800e4e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e4e6:	4a04      	ldr	r2, [pc, #16]	; (800e4f8 <prvSwitchTimerLists+0xc4>)
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	6013      	str	r3, [r2, #0]
}
 800e4ec:	bf00      	nop
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20004980 	.word	0x20004980
 800e4f8:	20004984 	.word	0x20004984

0800e4fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e502:	f7fd fbaf 	bl	800bc64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e506:	4b15      	ldr	r3, [pc, #84]	; (800e55c <prvCheckForValidListAndQueue+0x60>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d120      	bne.n	800e550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e50e:	4814      	ldr	r0, [pc, #80]	; (800e560 <prvCheckForValidListAndQueue+0x64>)
 800e510:	f7fd f9c8 	bl	800b8a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e514:	4813      	ldr	r0, [pc, #76]	; (800e564 <prvCheckForValidListAndQueue+0x68>)
 800e516:	f7fd f9c5 	bl	800b8a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e51a:	4b13      	ldr	r3, [pc, #76]	; (800e568 <prvCheckForValidListAndQueue+0x6c>)
 800e51c:	4a10      	ldr	r2, [pc, #64]	; (800e560 <prvCheckForValidListAndQueue+0x64>)
 800e51e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e520:	4b12      	ldr	r3, [pc, #72]	; (800e56c <prvCheckForValidListAndQueue+0x70>)
 800e522:	4a10      	ldr	r2, [pc, #64]	; (800e564 <prvCheckForValidListAndQueue+0x68>)
 800e524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e526:	2300      	movs	r3, #0
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	4b11      	ldr	r3, [pc, #68]	; (800e570 <prvCheckForValidListAndQueue+0x74>)
 800e52c:	4a11      	ldr	r2, [pc, #68]	; (800e574 <prvCheckForValidListAndQueue+0x78>)
 800e52e:	2110      	movs	r1, #16
 800e530:	200a      	movs	r0, #10
 800e532:	f7fd fd21 	bl	800bf78 <xQueueGenericCreateStatic>
 800e536:	4603      	mov	r3, r0
 800e538:	4a08      	ldr	r2, [pc, #32]	; (800e55c <prvCheckForValidListAndQueue+0x60>)
 800e53a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e53c:	4b07      	ldr	r3, [pc, #28]	; (800e55c <prvCheckForValidListAndQueue+0x60>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d005      	beq.n	800e550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e544:	4b05      	ldr	r3, [pc, #20]	; (800e55c <prvCheckForValidListAndQueue+0x60>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	490b      	ldr	r1, [pc, #44]	; (800e578 <prvCheckForValidListAndQueue+0x7c>)
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fc32 	bl	800cdb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e550:	f7fd fbb8 	bl	800bcc4 <vPortExitCritical>
}
 800e554:	bf00      	nop
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	20004988 	.word	0x20004988
 800e560:	20004958 	.word	0x20004958
 800e564:	2000496c 	.word	0x2000496c
 800e568:	20004980 	.word	0x20004980
 800e56c:	20004984 	.word	0x20004984
 800e570:	20004a34 	.word	0x20004a34
 800e574:	20004994 	.word	0x20004994
 800e578:	0802df00 	.word	0x0802df00

0800e57c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800e580:	f006 fe46 	bl	8015210 <touchgfx_init>
}
 800e584:	bf00      	nop
 800e586:	bd80      	pop	{r7, pc}

0800e588 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800e590:	f006 fe68 	bl	8015264 <touchgfx_taskEntry>
}
 800e594:	bf00      	nop
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
    {
 800e5a4:	4a04      	ldr	r2, [pc, #16]	; (800e5b8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	601a      	str	r2, [r3, #0]
    }
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr
 800e5b8:	0802ea10 	.word	0x0802ea10

0800e5bc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
    }
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff ffe9 	bl	800e59c <_ZN8touchgfx12FontProviderD1Ev>
 800e5ca:	2104      	movs	r1, #4
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f01d fa26 	bl	802ba1e <_ZdlPvj>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e5e8:	887b      	ldrh	r3, [r7, #2]
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d010      	beq.n	800e610 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	dc13      	bgt.n	800e61a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d002      	beq.n	800e5fc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d005      	beq.n	800e606 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800e5fa:	e00e      	b.n	800e61a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_VALUES:
        // bahnschrift_55_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e5fc:	f004 fd96 	bl	801312c <_ZN17TypedTextDatabase8getFontsEv>
 800e600:	4603      	mov	r3, r0
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	e00a      	b.n	800e61c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_LABEL:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e606:	f004 fd91 	bl	801312c <_ZN17TypedTextDatabase8getFontsEv>
 800e60a:	4603      	mov	r3, r0
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	e005      	b.n	800e61c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e610:	f004 fd8c 	bl	801312c <_ZN17TypedTextDatabase8getFontsEv>
 800e614:	4603      	mov	r3, r0
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	e000      	b.n	800e61c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800e61a:	2300      	movs	r3, #0
    }
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_LABEL = 1;  // bahnschrift_20_4bpp
    static const touchgfx::FontId SENSOR_UNIT = 1;   // bahnschrift_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	4a05      	ldr	r2, [pc, #20]	; (800e644 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff ffb1 	bl	800e59c <_ZN8touchgfx12FontProviderD1Ev>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4618      	mov	r0, r3
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	0802e9fc 	.word	0x0802e9fc

0800e648 <_ZN23ApplicationFontProviderD0Ev>:
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7ff ffe7 	bl	800e624 <_ZN23ApplicationFontProviderD1Ev>
 800e656:	2104      	movs	r1, #4
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f01d f9e0 	bl	802ba1e <_ZdlPvj>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
    {
 800e670:	4a04      	ldr	r2, [pc, #16]	; (800e684 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	601a      	str	r2, [r3, #0]
    }
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4618      	mov	r0, r3
 800e67a:	370c      	adds	r7, #12
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	0802ed78 	.word	0x0802ed78

0800e688 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
    }
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7ff ffe9 	bl	800e668 <_ZN8touchgfx4FontD1Ev>
 800e696:	2110      	movs	r1, #16
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f01d f9c0 	bl	802ba1e <_ZdlPvj>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800e6b4:	887b      	ldrh	r3, [r7, #2]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e010      	b.n	800e6e0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	681c      	ldr	r4, [r3, #0]
 800e6ce:	f107 030f 	add.w	r3, r7, #15
 800e6d2:	f107 0210 	add.w	r2, r7, #16
 800e6d6:	8879      	ldrh	r1, [r7, #2]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	47a0      	blx	r4
 800e6dc:	6178      	str	r0, [r7, #20]
        return glyph;
 800e6de:	697b      	ldr	r3, [r7, #20]
    }
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	371c      	adds	r7, #28
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd90      	pop	{r4, r7, pc}

0800e6e8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	895b      	ldrh	r3, [r3, #10]
    }
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	899b      	ldrh	r3, [r3, #12]
    }
 800e70c:	4618      	mov	r0, r3
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	889b      	ldrh	r3, [r3, #4]
    }
 800e724:	4618      	mov	r0, r3
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	889a      	ldrh	r2, [r3, #4]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	799b      	ldrb	r3, [r3, #6]
 800e740:	b29b      	uxth	r3, r3
 800e742:	4413      	add	r3, r2
 800e744:	b29b      	uxth	r3, r3
    }
 800e746:	4618      	mov	r0, r3
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800e752:	b480      	push	{r7}
 800e754:	b083      	sub	sp, #12
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	79db      	ldrb	r3, [r3, #7]
 800e75e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e762:	b2db      	uxtb	r3, r3
    }
 800e764:	4618      	mov	r0, r3
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	79db      	ldrb	r3, [r3, #7]
 800e77c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e780:	b2db      	uxtb	r3, r3
    }
 800e782:	4618      	mov	r0, r3
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
	...

0800e790 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	4a05      	ldr	r2, [pc, #20]	; (800e7b0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7ff ff61 	bl	800e668 <_ZN8touchgfx4FontD1Ev>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	080309cc 	.word	0x080309cc

0800e7b4 <_ZN8touchgfx9ConstFontD0Ev>:
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff ffe7 	bl	800e790 <_ZN8touchgfx9ConstFontD1Ev>
 800e7c2:	2118      	movs	r1, #24
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f01d f92a 	bl	802ba1e <_ZdlPvj>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	4a05      	ldr	r2, [pc, #20]	; (800e7f4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7ff ffd3 	bl	800e790 <_ZN8touchgfx9ConstFontD1Ev>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0802ea34 	.word	0x0802ea34

0800e7f8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7ff ffe7 	bl	800e7d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e806:	2128      	movs	r1, #40	; 0x28
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f01d f908 	bl	802ba1e <_ZdlPvj>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
    {
 800e820:	4a04      	ldr	r2, [pc, #16]	; (800e834 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	601a      	str	r2, [r3, #0]
    }
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	0802ea24 	.word	0x0802ea24

0800e838 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
    }
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff ffe9 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
 800e846:	2108      	movs	r1, #8
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f01d f8e8 	bl	802ba1e <_ZdlPvj>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a1b      	ldr	r3, [r3, #32]
    }
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800e87c:	4618      	mov	r0, r3
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08c      	sub	sp, #48	; 0x30
 800e88c:	af08      	add	r7, sp, #32
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	4611      	mov	r1, r2
 800e894:	461a      	mov	r2, r3
 800e896:	460b      	mov	r3, r1
 800e898:	80fb      	strh	r3, [r7, #6]
 800e89a:	4613      	mov	r3, r2
 800e89c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	88b9      	ldrh	r1, [r7, #4]
 800e8a2:	88fa      	ldrh	r2, [r7, #6]
 800e8a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e8a6:	9306      	str	r3, [sp, #24]
 800e8a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e8aa:	9305      	str	r3, [sp, #20]
 800e8ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8b6:	9303      	str	r3, [sp, #12]
 800e8b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8bc:	9302      	str	r3, [sp, #8]
 800e8be:	7f3b      	ldrb	r3, [r7, #28]
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	7e3b      	ldrb	r3, [r7, #24]
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	68b9      	ldr	r1, [r7, #8]
 800e8ca:	f00d f969 	bl	801bba0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e8ce:	4a0a      	ldr	r2, [pc, #40]	; (800e8f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d8:	619a      	str	r2, [r3, #24]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8de:	61da      	str	r2, [r3, #28]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8e4:	621a      	str	r2, [r3, #32]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8ea:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	0802ea34 	.word	0x0802ea34

0800e8fc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	889b      	ldrh	r3, [r3, #4]
 800e910:	0adb      	lsrs	r3, r3, #11
 800e912:	b29b      	uxth	r3, r3
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	4413      	add	r3, r2
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4413      	add	r3, r2
}
 800e922:	4618      	mov	r0, r3
 800e924:	3714      	adds	r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e92e:	b480      	push	{r7}
 800e930:	b089      	sub	sp, #36	; 0x24
 800e932:	af00      	add	r7, sp, #0
 800e934:	60f8      	str	r0, [r7, #12]
 800e936:	460b      	mov	r3, r1
 800e938:	607a      	str	r2, [r7, #4]
 800e93a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	7b1b      	ldrb	r3, [r3, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d101      	bne.n	800e94e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	e030      	b.n	800e9b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	69da      	ldr	r2, [r3, #28]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	7b5b      	ldrb	r3, [r3, #13]
 800e95a:	021b      	lsls	r3, r3, #8
 800e95c:	b21b      	sxth	r3, r3
 800e95e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e962:	b219      	sxth	r1, r3
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	7adb      	ldrb	r3, [r3, #11]
 800e968:	b21b      	sxth	r3, r3
 800e96a:	430b      	orrs	r3, r1
 800e96c:	b21b      	sxth	r3, r3
 800e96e:	b29b      	uxth	r3, r3
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	7b1b      	ldrb	r3, [r3, #12]
 800e97a:	837b      	strh	r3, [r7, #26]
 800e97c:	8b7b      	ldrh	r3, [r7, #26]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d015      	beq.n	800e9ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	897a      	ldrh	r2, [r7, #10]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d103      	bne.n	800e994 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e992:	e00d      	b.n	800e9b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	897a      	ldrh	r2, [r7, #10]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d306      	bcc.n	800e9ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e99e:	8b7b      	ldrh	r3, [r7, #26]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	837b      	strh	r3, [r7, #26]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	61fb      	str	r3, [r7, #28]
 800e9aa:	e7e7      	b.n	800e97c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e9ac:	bf00      	nop
        }
    }
    return 0;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3724      	adds	r7, #36	; 0x24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <__tcf_0>:

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	4801      	ldr	r0, [pc, #4]	; (800e9c8 <__tcf_0+0xc>)
 800e9c2:	f7ff ff07 	bl	800e7d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	20004a84 	.word	0x20004a84

0800e9cc <_Z27getFont_bahnschrift_20_4bppv>:
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08c      	sub	sp, #48	; 0x30
 800e9d0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800e9d2:	4b1f      	ldr	r3, [pc, #124]	; (800ea50 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	f3bf 8f5b 	dmb	ish
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	f003 0301 	and.w	r3, r3, #1
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bf0c      	ite	eq
 800e9e4:	2301      	moveq	r3, #1
 800e9e6:	2300      	movne	r3, #0
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d02c      	beq.n	800ea48 <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800e9ee:	4818      	ldr	r0, [pc, #96]	; (800ea50 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800e9f0:	f01d f817 	bl	802ba22 <__cxa_guard_acquire>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	bf14      	ite	ne
 800e9fa:	2301      	movne	r3, #1
 800e9fc:	2300      	moveq	r3, #0
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d021      	beq.n	800ea48 <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800ea04:	2300      	movs	r3, #0
 800ea06:	930a      	str	r3, [sp, #40]	; 0x28
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9308      	str	r3, [sp, #32]
 800ea10:	2300      	movs	r3, #0
 800ea12:	9307      	str	r3, [sp, #28]
 800ea14:	4b0f      	ldr	r3, [pc, #60]	; (800ea54 <_Z27getFont_bahnschrift_20_4bppv+0x88>)
 800ea16:	9306      	str	r3, [sp, #24]
 800ea18:	4b0f      	ldr	r3, [pc, #60]	; (800ea58 <_Z27getFont_bahnschrift_20_4bppv+0x8c>)
 800ea1a:	9305      	str	r3, [sp, #20]
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	9304      	str	r3, [sp, #16]
 800ea20:	2301      	movs	r3, #1
 800ea22:	9303      	str	r3, [sp, #12]
 800ea24:	2301      	movs	r3, #1
 800ea26:	9302      	str	r3, [sp, #8]
 800ea28:	2304      	movs	r3, #4
 800ea2a:	9301      	str	r3, [sp, #4]
 800ea2c:	2304      	movs	r3, #4
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	2314      	movs	r3, #20
 800ea32:	2246      	movs	r2, #70	; 0x46
 800ea34:	4909      	ldr	r1, [pc, #36]	; (800ea5c <_Z27getFont_bahnschrift_20_4bppv+0x90>)
 800ea36:	480a      	ldr	r0, [pc, #40]	; (800ea60 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
 800ea38:	f7ff ff26 	bl	800e888 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ea3c:	4804      	ldr	r0, [pc, #16]	; (800ea50 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800ea3e:	f01c fffc 	bl	802ba3a <__cxa_guard_release>
 800ea42:	4808      	ldr	r0, [pc, #32]	; (800ea64 <_Z27getFont_bahnschrift_20_4bppv+0x98>)
 800ea44:	f01d fe28 	bl	802c698 <atexit>
    return bahnschrift_20_4bpp;
 800ea48:	4b05      	ldr	r3, [pc, #20]	; (800ea60 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	20004aac 	.word	0x20004aac
 800ea54:	0803b6fc 	.word	0x0803b6fc
 800ea58:	0802ea84 	.word	0x0802ea84
 800ea5c:	0803af54 	.word	0x0803af54
 800ea60:	20004a84 	.word	0x20004a84
 800ea64:	0800e9bd 	.word	0x0800e9bd

0800ea68 <__tcf_0>:

touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	4801      	ldr	r0, [pc, #4]	; (800ea74 <__tcf_0+0xc>)
 800ea6e:	f7ff feb1 	bl	800e7d4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	20004ab0 	.word	0x20004ab0

0800ea78 <_Z27getFont_bahnschrift_55_4bppv>:
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b08c      	sub	sp, #48	; 0x30
 800ea7c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800ea7e:	4b1f      	ldr	r3, [pc, #124]	; (800eafc <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f3bf 8f5b 	dmb	ish
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	bf0c      	ite	eq
 800ea90:	2301      	moveq	r3, #1
 800ea92:	2300      	movne	r3, #0
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d02c      	beq.n	800eaf4 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800ea9a:	4818      	ldr	r0, [pc, #96]	; (800eafc <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800ea9c:	f01c ffc1 	bl	802ba22 <__cxa_guard_acquire>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	bf14      	ite	ne
 800eaa6:	2301      	movne	r3, #1
 800eaa8:	2300      	moveq	r3, #0
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d021      	beq.n	800eaf4 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800eab0:	2300      	movs	r3, #0
 800eab2:	930a      	str	r3, [sp, #40]	; 0x28
 800eab4:	2300      	movs	r3, #0
 800eab6:	9309      	str	r3, [sp, #36]	; 0x24
 800eab8:	2300      	movs	r3, #0
 800eaba:	9308      	str	r3, [sp, #32]
 800eabc:	2300      	movs	r3, #0
 800eabe:	9307      	str	r3, [sp, #28]
 800eac0:	4b0f      	ldr	r3, [pc, #60]	; (800eb00 <_Z27getFont_bahnschrift_55_4bppv+0x88>)
 800eac2:	9306      	str	r3, [sp, #24]
 800eac4:	4b0f      	ldr	r3, [pc, #60]	; (800eb04 <_Z27getFont_bahnschrift_55_4bppv+0x8c>)
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	2301      	movs	r3, #1
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	2301      	movs	r3, #1
 800eace:	9303      	str	r3, [sp, #12]
 800ead0:	2301      	movs	r3, #1
 800ead2:	9302      	str	r3, [sp, #8]
 800ead4:	2304      	movs	r3, #4
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	230b      	movs	r3, #11
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	2337      	movs	r3, #55	; 0x37
 800eade:	2246      	movs	r2, #70	; 0x46
 800eae0:	4909      	ldr	r1, [pc, #36]	; (800eb08 <_Z27getFont_bahnschrift_55_4bppv+0x90>)
 800eae2:	480a      	ldr	r0, [pc, #40]	; (800eb0c <_Z27getFont_bahnschrift_55_4bppv+0x94>)
 800eae4:	f7ff fed0 	bl	800e888 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800eae8:	4804      	ldr	r0, [pc, #16]	; (800eafc <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800eaea:	f01c ffa6 	bl	802ba3a <__cxa_guard_release>
 800eaee:	4808      	ldr	r0, [pc, #32]	; (800eb10 <_Z27getFont_bahnschrift_55_4bppv+0x98>)
 800eaf0:	f01d fdd2 	bl	802c698 <atexit>
    return bahnschrift_55_4bpp;
 800eaf4:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <_Z27getFont_bahnschrift_55_4bppv+0x94>)
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	20004ad8 	.word	0x20004ad8
 800eb00:	0803b700 	.word	0x0803b700
 800eb04:	0802ea88 	.word	0x0802ea88
 800eb08:	0803b328 	.word	0x0803b328
 800eb0c:	20004ab0 	.word	0x20004ab0
 800eb10:	0800ea69 	.word	0x0800ea69

0800eb14 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
    {
    }
 800eb36:	bf00      	nop
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800eb42:	b480      	push	{r7}
 800eb44:	b083      	sub	sp, #12
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
 800eb4a:	6039      	str	r1, [r7, #0]
    {
    }
 800eb4c:	bf00      	nop
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
    {
    }
 800eb62:	bf00      	nop
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	460b      	mov	r3, r1
 800eb78:	70fb      	strb	r3, [r7, #3]
    {
    }
 800eb7a:	bf00      	nop
 800eb7c:	370c      	adds	r7, #12
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr

0800eb86 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800eb86:	b480      	push	{r7}
 800eb88:	b083      	sub	sp, #12
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
    {
    }
 800eb8e:	bf00      	nop
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800eb9a:	b480      	push	{r7}
 800eb9c:	b083      	sub	sp, #12
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
    {
    }
 800eba2:	bf00      	nop
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
	...

0800ebb0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
    {
 800ebb8:	4a04      	ldr	r2, [pc, #16]	; (800ebcc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
    }
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	0802eb94 	.word	0x0802eb94

0800ebd0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
    }
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7ff ffe9 	bl	800ebb0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ebde:	2104      	movs	r1, #4
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f01c ff1c 	bl	802ba1e <_ZdlPvj>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	683a      	ldr	r2, [r7, #0]
 800ec16:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ec1a:	6810      	ldr	r0, [r2, #0]
 800ec1c:	6851      	ldr	r1, [r2, #4]
 800ec1e:	c303      	stmia	r3!, {r0, r1}
    }
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
    {
 800ec34:	4a04      	ldr	r2, [pc, #16]	; (800ec48 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	601a      	str	r2, [r3, #0]
    }
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	0802eb7c 	.word	0x0802eb7c

0800ec4c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
    }
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ffe9 	bl	800ec2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ec5a:	2104      	movs	r1, #4
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f01c fede 	bl	802ba1e <_ZdlPvj>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ec74:	4a07      	ldr	r2, [pc, #28]	; (800ec94 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	605a      	str	r2, [r3, #4]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	721a      	strb	r2, [r3, #8]
    {
    }
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr
 800ec94:	0802eb58 	.word	0x0802eb58

0800ec98 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
    {
 800eca0:	4a04      	ldr	r2, [pc, #16]	; (800ecb4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
    }
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	0802eb58 	.word	0x0802eb58

0800ecb8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
    }
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff ffe9 	bl	800ec98 <_ZN8touchgfx10TransitionD1Ev>
 800ecc6:	210c      	movs	r1, #12
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f01c fea8 	bl	802ba1e <_ZdlPvj>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
    {
    }
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
    {
    }
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
    {
    }
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800ed1c:	f00b fec0 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 800ed20:	4603      	mov	r3, r0
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	3230      	adds	r2, #48	; 0x30
 800ed26:	6812      	ldr	r2, [r2, #0]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	4790      	blx	r2
    }
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	683a      	ldr	r2, [r7, #0]
 800ed42:	605a      	str	r2, [r3, #4]
    }
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	4a05      	ldr	r2, [pc, #20]	; (800ed70 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	601a      	str	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7ff ff25 	bl	800ebb0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	08030834 	.word	0x08030834

0800ed74 <_ZN8touchgfx11ApplicationD0Ev>:
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff ffe7 	bl	800ed50 <_ZN8touchgfx11ApplicationD1Ev>
 800ed82:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f01c fe49 	bl	802ba1e <_ZdlPvj>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
	...

0800ed98 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f00b fee4 	bl	801ab70 <_ZN8touchgfx11ApplicationC1Ev>
 800eda8:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	601a      	str	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a04      	ldr	r2, [pc, #16]	; (800edd4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800edc2:	6013      	str	r3, [r2, #0]
    }
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4618      	mov	r0, r3
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	0802eb14 	.word	0x0802eb14
 800edd4:	2000674c 	.word	0x2000674c

0800edd8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 f804 	bl	800edee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ede6:	bf00      	nop
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800edee:	b580      	push	{r7, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00f      	beq.n	800ee20 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	330c      	adds	r3, #12
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4610      	mov	r0, r2
 800ee14:	4798      	blx	r3
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e000      	b.n	800ee22 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ee20:	2300      	movs	r3, #0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00e      	beq.n	800ee44 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3308      	adds	r3, #8
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800ee44:	bf00      	nop
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	601a      	str	r2, [r3, #0]
    }
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	4a05      	ldr	r2, [pc, #20]	; (800ee88 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff ff69 	bl	800ed50 <_ZN8touchgfx11ApplicationD1Ev>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0802eb14 	.word	0x0802eb14

0800ee8c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff ffe7 	bl	800ee68 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ee9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f01c fdbd 	bl	802ba1e <_ZdlPvj>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4618      	mov	r0, r3
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	4a08      	ldr	r2, [pc, #32]	; (800eedc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eec4:	4618      	mov	r0, r3
 800eec6:	f000 fae5 	bl	800f494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff ffcb 	bl	800ee68 <_ZN8touchgfx14MVPApplicationD1Ev>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4618      	mov	r0, r3
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	0802eab8 	.word	0x0802eab8

0800eee0 <_ZN23FrontendApplicationBaseD0Ev>:
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f7ff ffe1 	bl	800eeb0 <_ZN23FrontendApplicationBaseD1Ev>
 800eeee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f01c fd93 	bl	802ba1e <_ZdlPvj>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	3708      	adds	r7, #8
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ef02:	b480      	push	{r7}
 800ef04:	b083      	sub	sp, #12
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	721a      	strb	r2, [r3, #8]
    }
 800ef10:	bf00      	nop
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	605a      	str	r2, [r3, #4]
    }
 800ef2c:	bf00      	nop
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
    {
        return instance;
 800ef3c:	4b03      	ldr	r3, [pc, #12]	; (800ef4c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
    }
 800ef40:	4618      	mov	r0, r3
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	20006700 	.word	0x20006700

0800ef50 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ef50:	b480      	push	{r7}
 800ef52:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ef54:	4b0b      	ldr	r3, [pc, #44]	; (800ef84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d008      	beq.n	800ef72 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ef60:	4b08      	ldr	r3, [pc, #32]	; (800ef84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d003      	beq.n	800ef72 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ef6a:	4b06      	ldr	r3, [pc, #24]	; (800ef84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef70:	e002      	b.n	800ef78 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800ef72:	4b04      	ldr	r3, [pc, #16]	; (800ef84 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	689b      	ldr	r3, [r3, #8]
    }
 800ef78:	4618      	mov	r0, r3
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	20006700 	.word	0x20006700

0800ef88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fefe 	bl	800ed98 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ef9c:	4a13      	ldr	r2, [pc, #76]	; (800efec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800efa8:	4618      	mov	r0, r3
 800efaa:	f000 f89f 	bl	800f0ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800efbe:	f7ff ffbb 	bl	800ef38 <_ZN8touchgfx3HAL11getInstanceEv>
 800efc2:	4603      	mov	r3, r0
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	3208      	adds	r2, #8
 800efc8:	6812      	ldr	r2, [r2, #0]
 800efca:	2100      	movs	r1, #0
 800efcc:	4618      	mov	r0, r3
 800efce:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800efd0:	2000      	movs	r0, #0
 800efd2:	f004 f833 	bl	801303c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800efd6:	f7ff ffbb 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 800efda:	4603      	mov	r3, r0
 800efdc:	4618      	mov	r0, r3
 800efde:	f013 ff5c 	bl	8022e9a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	4618      	mov	r0, r3
 800efe6:	3710      	adds	r7, #16
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	0802eab8 	.word	0x0802eab8

0800eff0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4618      	mov	r0, r3
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	683a      	ldr	r2, [r7, #0]
 800f016:	4611      	mov	r1, r2
 800f018:	4618      	mov	r0, r3
 800f01a:	f7ff ffe9 	bl	800eff0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	685a      	ldr	r2, [r3, #4]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	605a      	str	r2, [r3, #4]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	3308      	adds	r3, #8
 800f02c:	3208      	adds	r2, #8
 800f02e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f032:	e883 0003 	stmia.w	r3, {r0, r1}
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800f040:	b590      	push	{r4, r7, lr}
 800f042:	b089      	sub	sp, #36	; 0x24
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800f04e:	4b10      	ldr	r3, [pc, #64]	; (800f090 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800f050:	61bb      	str	r3, [r7, #24]
 800f052:	2300      	movs	r3, #0
 800f054:	61fb      	str	r3, [r7, #28]
 800f056:	f107 0008 	add.w	r0, r7, #8
 800f05a:	f107 0318 	add.w	r3, r7, #24
 800f05e:	cb0c      	ldmia	r3, {r2, r3}
 800f060:	6879      	ldr	r1, [r7, #4]
 800f062:	f000 f85f 	bl	800f124 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f066:	f107 0308 	add.w	r3, r7, #8
 800f06a:	4619      	mov	r1, r3
 800f06c:	4620      	mov	r0, r4
 800f06e:	f7ff ffcb 	bl	800f008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f072:	f107 0308 	add.w	r3, r7, #8
 800f076:	4618      	mov	r0, r3
 800f078:	f000 fa0c 	bl	800f494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800f088:	bf00      	nop
 800f08a:	3724      	adds	r7, #36	; 0x24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd90      	pop	{r4, r7, pc}
 800f090:	0800f095 	.word	0x0800f095

0800f094 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af02      	add	r7, sp, #8
 800f09a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	4b04      	ldr	r3, [pc, #16]	; (800f0c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800f0b4:	4804      	ldr	r0, [pc, #16]	; (800f0c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800f0b6:	f000 f867 	bl	800f188 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f0ba:	bf00      	nop
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20006740 	.word	0x20006740
 800f0c8:	2000673c 	.word	0x2000673c

0800f0cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	4a04      	ldr	r2, [pc, #16]	; (800f0e8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	0802eb7c 	.word	0x0802eb7c

0800f0ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff ffe8 	bl	800f0cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f0fc:	4a08      	ldr	r2, [pc, #32]	; (800f120 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	605a      	str	r2, [r3, #4]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	609a      	str	r2, [r3, #8]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	60da      	str	r2, [r3, #12]
    {
    }
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	0802eafc 	.word	0x0802eafc

0800f124 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	4639      	mov	r1, r7
 800f130:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4618      	mov	r0, r3
 800f138:	f7ff ffc8 	bl	800f0cc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f13c:	4a08      	ldr	r2, [pc, #32]	; (800f160 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	605a      	str	r2, [r3, #4]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	3308      	adds	r3, #8
 800f14c:	463a      	mov	r2, r7
 800f14e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f152:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	0802eafc 	.word	0x0802eafc

0800f164 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4618      	mov	r0, r3
 800f170:	f7ff fd7c 	bl	800ec6c <_ZN8touchgfx10TransitionC1Ev>
 800f174:	4a03      	ldr	r2, [pc, #12]	; (800f184 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	601a      	str	r2, [r3, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	0802ea94 	.word	0x0802ea94

0800f188 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f188:	b590      	push	{r4, r7, lr}
 800f18a:	b08f      	sub	sp, #60	; 0x3c
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	689a      	ldr	r2, [r3, #8]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3320      	adds	r3, #32
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	4798      	blx	r3
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	f5b3 6f53 	cmp.w	r3, #3376	; 0xd30
 800f1ae:	d205      	bcs.n	800f1bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800f1b0:	4b7e      	ldr	r3, [pc, #504]	; (800f3ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800f1b2:	4a7f      	ldr	r2, [pc, #508]	; (800f3b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f1b4:	21a3      	movs	r1, #163	; 0xa3
 800f1b6:	487f      	ldr	r0, [pc, #508]	; (800f3b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f1b8:	f01d fa50 	bl	802c65c <__assert_func>
 800f1bc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685a      	ldr	r2, [r3, #4]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3320      	adds	r3, #32
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4798      	blx	r3
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b0f      	cmp	r3, #15
 800f1d4:	d805      	bhi.n	800f1e2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800f1d6:	4b78      	ldr	r3, [pc, #480]	; (800f3b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f1d8:	4a75      	ldr	r2, [pc, #468]	; (800f3b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f1da:	21a4      	movs	r1, #164	; 0xa4
 800f1dc:	4875      	ldr	r0, [pc, #468]	; (800f3b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f1de:	f01d fa3d 	bl	802c65c <__assert_func>
 800f1e2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	68da      	ldr	r2, [r3, #12]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3320      	adds	r3, #32
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4610      	mov	r0, r2
 800f1f4:	4798      	blx	r3
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b0b      	cmp	r3, #11
 800f1fa:	d805      	bhi.n	800f208 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800f1fc:	4b6f      	ldr	r3, [pc, #444]	; (800f3bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800f1fe:	4a6c      	ldr	r2, [pc, #432]	; (800f3b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f200:	21a5      	movs	r1, #165	; 0xa5
 800f202:	486c      	ldr	r0, [pc, #432]	; (800f3b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f204:	f01d fa2a 	bl	802c65c <__assert_func>
 800f208:	bf00      	nop
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	627b      	str	r3, [r7, #36]	; 0x24
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f216:	f00b fc43 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 800f21a:	4603      	mov	r3, r0
 800f21c:	4618      	mov	r0, r3
 800f21e:	f00b fc8d 	bl	801ab3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f222:	6a3b      	ldr	r3, [r7, #32]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d008      	beq.n	800f23c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	330c      	adds	r3, #12
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
    if (*currentTrans)
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800f244:	6a3b      	ldr	r3, [r7, #32]
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4610      	mov	r0, r2
 800f252:	4798      	blx	r3
    if (*currentScreen)
 800f254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d008      	beq.n	800f26e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	3314      	adds	r3, #20
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4610      	mov	r0, r2
 800f26c:	4798      	blx	r3
    if (*currentPresenter)
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d008      	beq.n	800f288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800f276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	3304      	adds	r3, #4
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4610      	mov	r0, r2
 800f286:	4798      	blx	r3
    if (*currentScreen)
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d007      	beq.n	800f2a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4610      	mov	r0, r2
 800f29e:	4798      	blx	r3
    if (*currentPresenter)
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d008      	beq.n	800f2ba <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3308      	adds	r3, #8
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	4798      	blx	r3
}
 800f2ba:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f000 f87c 	bl	800f3c0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	200c      	movs	r0, #12
 800f2ce:	f7ff fc21 	bl	800eb14 <_ZnwjPv>
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	f7ff ff45 	bl	800f164 <_ZN8touchgfx12NoTransitionC1Ev>
 800f2da:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f000 f87f 	bl	800f3e6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f44f 6053 	mov.w	r0, #3376	; 0xd30
 800f2f0:	f7ff fc10 	bl	800eb14 <_ZnwjPv>
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f004 f8d4 	bl	80134a4 <_ZN11Screen1ViewC1Ev>
 800f2fc:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	2100      	movs	r1, #0
 800f304:	4618      	mov	r0, r3
 800f306:	f000 f881 	bl	800f40c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4619      	mov	r1, r3
 800f30e:	2010      	movs	r0, #16
 800f310:	f7ff fc00 	bl	800eb14 <_ZnwjPv>
 800f314:	4604      	mov	r4, r0
 800f316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f318:	4620      	mov	r0, r4
 800f31a:	f004 f847 	bl	80133ac <_ZN16Screen1PresenterC1ER11Screen1View>
 800f31e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f324:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f32a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f330:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	3304      	adds	r3, #4
 800f33c:	e000      	b.n	800f340 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800f33e:	2300      	movs	r3, #0
 800f340:	4619      	mov	r1, r3
 800f342:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f344:	f7ff fd82 	bl	800ee4c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	3304      	adds	r3, #4
 800f34c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f34e:	4618      	mov	r0, r3
 800f350:	f7ff fde4 	bl	800ef1c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f358:	4618      	mov	r0, r3
 800f35a:	f000 f86a 	bl	800f432 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	61fb      	str	r3, [r7, #28]
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	61bb      	str	r3, [r7, #24]
 800f366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f368:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	330c      	adds	r3, #12
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	69f8      	ldr	r0, [r7, #28]
 800f374:	4798      	blx	r3
    newPresenter->activate();
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	69b8      	ldr	r0, [r7, #24]
 800f37e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f380:	6979      	ldr	r1, [r7, #20]
 800f382:	69f8      	ldr	r0, [r7, #28]
 800f384:	f00d f8b3 	bl	801c4ee <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3310      	adds	r3, #16
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6978      	ldr	r0, [r7, #20]
 800f392:	4798      	blx	r3
    newTransition->invalidate();
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3314      	adds	r3, #20
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6978      	ldr	r0, [r7, #20]
 800f39e:	4798      	blx	r3
}
 800f3a0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	373c      	adds	r7, #60	; 0x3c
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd90      	pop	{r4, r7, pc}
 800f3ac:	0802df08 	.word	0x0802df08
 800f3b0:	0802df98 	.word	0x0802df98
 800f3b4:	0802e09c 	.word	0x0802e09c
 800f3b8:	0802e0e0 	.word	0x0802e0e0
 800f3bc:	0802e184 	.word	0x0802e184

0800f3c0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	3324      	adds	r3, #36	; 0x24
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	887a      	ldrh	r2, [r7, #2]
 800f3d6:	4611      	mov	r1, r2
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	4798      	blx	r3
 800f3dc:	4603      	mov	r3, r0
    }
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	3324      	adds	r3, #36	; 0x24
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	887a      	ldrh	r2, [r7, #2]
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	4798      	blx	r3
 800f402:	4603      	mov	r3, r0
    }
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	460b      	mov	r3, r1
 800f416:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	3324      	adds	r3, #36	; 0x24
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	887a      	ldrh	r2, [r7, #2]
 800f422:	4611      	mov	r1, r2
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	4798      	blx	r3
 800f428:	4603      	mov	r3, r0
    }
 800f42a:	4618      	mov	r0, r3
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f432:	b480      	push	{r7}
 800f434:	b083      	sub	sp, #12
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f442:	bf00      	nop
 800f444:	370c      	adds	r7, #12
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
	...

0800f450 <_ZN8touchgfx12NoTransitionD1Ev>:
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	4a05      	ldr	r2, [pc, #20]	; (800f470 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	f7ff fc19 	bl	800ec98 <_ZN8touchgfx10TransitionD1Ev>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	0802ea94 	.word	0x0802ea94

0800f474 <_ZN8touchgfx12NoTransitionD0Ev>:
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff ffe7 	bl	800f450 <_ZN8touchgfx12NoTransitionD1Ev>
 800f482:	210c      	movs	r1, #12
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f01c faca 	bl	802ba1e <_ZdlPvj>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4618      	mov	r0, r3
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	4a05      	ldr	r2, [pc, #20]	; (800f4b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff fbc1 	bl	800ec2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	0802eafc 	.word	0x0802eafc

0800f4b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ffe7 	bl	800f494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f4c6:	2110      	movs	r1, #16
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f01c faa8 	bl	802ba1e <_ZdlPvj>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	68d2      	ldr	r2, [r2, #12]
 800f4e8:	1052      	asrs	r2, r2, #1
 800f4ea:	1899      	adds	r1, r3, r2
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	e00a      	b.n	800f514 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	68d2      	ldr	r2, [r2, #12]
 800f506:	1052      	asrs	r2, r2, #1
 800f508:	4413      	add	r3, r2
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	6892      	ldr	r2, [r2, #8]
 800f510:	4413      	add	r3, r2
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4608      	mov	r0, r1
 800f516:	4798      	blx	r3
    }
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d010      	beq.n	800f552 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d107      	bne.n	800f548 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	f003 0301 	and.w	r3, r3, #1
 800f540:	2b00      	cmp	r3, #0
 800f542:	d101      	bne.n	800f548 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f544:	2301      	movs	r3, #1
 800f546:	e000      	b.n	800f54a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f548:	2300      	movs	r3, #0
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d001      	beq.n	800f552 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f54e:	2301      	movs	r3, #1
 800f550:	e000      	b.n	800f554 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f552:	2300      	movs	r3, #0
    }
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800f560:	b480      	push	{r7}
 800f562:	b083      	sub	sp, #12
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
        : color(col)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	601a      	str	r2, [r3, #0]
    {
    }
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	801a      	strh	r2, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	805a      	strh	r2, [r3, #2]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	809a      	strh	r2, [r3, #4]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	80da      	strh	r2, [r3, #6]
    {
    }
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	887a      	ldrh	r2, [r7, #2]
 800f5bc:	801a      	strh	r2, [r3, #0]
    {
    }
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800f5d4:	4a14      	ldr	r2, [pc, #80]	; (800f628 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7ff ffcd 	bl	800f57e <_ZN8touchgfx4RectC1Ev>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	330c      	adds	r3, #12
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff ffc8 	bl	800f57e <_ZN8touchgfx4RectC1Ev>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	615a      	str	r2, [r3, #20]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	619a      	str	r2, [r3, #24]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	61da      	str	r2, [r3, #28]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	841a      	strh	r2, [r3, #32]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	845a      	strh	r2, [r3, #34]	; 0x22
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4618      	mov	r0, r3
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	08030968 	.word	0x08030968

0800f62c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
    {
 800f634:	4a04      	ldr	r2, [pc, #16]	; (800f648 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	601a      	str	r2, [r3, #0]
    }
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr
 800f648:	08030968 	.word	0x08030968

0800f64c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    }
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff ffe9 	bl	800f62c <_ZN8touchgfx8DrawableD1Ev>
 800f65a:	2128      	movs	r1, #40	; 0x28
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f01c f9de 	bl	802ba1e <_ZdlPvj>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4618      	mov	r0, r3
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f674:	2300      	movs	r3, #0
    }
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f682:	b580      	push	{r7, lr}
 800f684:	b084      	sub	sp, #16
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	4608      	mov	r0, r1
 800f68c:	4611      	mov	r1, r2
 800f68e:	461a      	mov	r2, r3
 800f690:	4603      	mov	r3, r0
 800f692:	817b      	strh	r3, [r7, #10]
 800f694:	460b      	mov	r3, r1
 800f696:	813b      	strh	r3, [r7, #8]
 800f698:	4613      	mov	r3, r2
 800f69a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f69c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f6a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f000 f82a 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800f6ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f6b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f000 f87e 	bl	800f7b8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800f6bc:	bf00      	nop
 800f6be:	3710      	adds	r7, #16
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	887a      	ldrh	r2, [r7, #2]
 800f6d4:	809a      	strh	r2, [r3, #4]
    }
 800f6d6:	bf00      	nop
 800f6d8:	370c      	adds	r7, #12
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr

0800f6e2 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800f6e2:	b480      	push	{r7}
 800f6e4:	b083      	sub	sp, #12
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	887a      	ldrh	r2, [r7, #2]
 800f6f2:	80da      	strh	r2, [r3, #6]
    }
 800f6f4:	bf00      	nop
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	807b      	strh	r3, [r7, #2]
 800f70c:	4613      	mov	r3, r2
 800f70e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	332c      	adds	r3, #44	; 0x2c
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f71c:	4611      	mov	r1, r2
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	4798      	blx	r3
        setY(y);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3330      	adds	r3, #48	; 0x30
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f72e:	4611      	mov	r1, r2
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	4798      	blx	r3
    }
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	460b      	mov	r3, r1
 800f746:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	887a      	ldrh	r2, [r7, #2]
 800f74c:	811a      	strh	r2, [r3, #8]
    }
 800f74e:	bf00      	nop
 800f750:	370c      	adds	r7, #12
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr

0800f75a <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f75a:	b480      	push	{r7}
 800f75c:	b083      	sub	sp, #12
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	460b      	mov	r3, r1
 800f764:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	887a      	ldrh	r2, [r7, #2]
 800f76a:	815a      	strh	r2, [r3, #10]
    }
 800f76c:	bf00      	nop
 800f76e:	370c      	adds	r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
    {
    }
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
    {
    }
 800f796:	bf00      	nop
 800f798:	370c      	adds	r7, #12
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr

0800f7a2 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f7a2:	b480      	push	{r7}
 800f7a4:	b083      	sub	sp, #12
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]
    {
    }
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	807b      	strh	r3, [r7, #2]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3334      	adds	r3, #52	; 0x34
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7d4:	4611      	mov	r1, r2
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	4798      	blx	r3
        setHeight(height);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	3338      	adds	r3, #56	; 0x38
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	4798      	blx	r3
    }
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
    {
    }
 800f7fe:	bf00      	nop
 800f800:	370c      	adds	r7, #12
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr

0800f80a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f80a:	b480      	push	{r7}
 800f80c:	b083      	sub	sp, #12
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
    {
    }
 800f812:	bf00      	nop
 800f814:	370c      	adds	r7, #12
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr

0800f81e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f81e:	b480      	push	{r7}
 800f820:	b083      	sub	sp, #12
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f82c:	4618      	mov	r0, r3
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f852:	b580      	push	{r7, lr}
 800f854:	b082      	sub	sp, #8
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
 800f85a:	460b      	mov	r3, r1
 800f85c:	807b      	strh	r3, [r7, #2]
 800f85e:	4613      	mov	r3, r2
 800f860:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3350      	adds	r3, #80	; 0x50
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	8879      	ldrh	r1, [r7, #2]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f872:	b292      	uxth	r2, r2
 800f874:	1a8a      	subs	r2, r1, r2
 800f876:	b292      	uxth	r2, r2
 800f878:	b210      	sxth	r0, r2
 800f87a:	8839      	ldrh	r1, [r7, #0]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f882:	b292      	uxth	r2, r2
 800f884:	1a8a      	subs	r2, r1, r2
 800f886:	b292      	uxth	r2, r2
 800f888:	b212      	sxth	r2, r2
 800f88a:	4601      	mov	r1, r0
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	4798      	blx	r3
    }
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8a6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8ae:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8b6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f7ff ffe1 	bl	800f898 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	601a      	str	r2, [r3, #0]
    }
 800f8e4:	bf00      	nop
 800f8e6:	3710      	adds	r7, #16
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
    {
 800f8f4:	4a06      	ldr	r2, [pc, #24]	; (800f910 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	3304      	adds	r3, #4
 800f8fe:	4618      	mov	r0, r3
 800f900:	f003 f904 	bl	8012b0c <_ZN8touchgfx9ContainerD1Ev>
    }
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	08030a60 	.word	0x08030a60

0800f914 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
    }
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7ff ffe5 	bl	800f8ec <_ZN8touchgfx6ScreenD1Ev>
 800f922:	213c      	movs	r1, #60	; 0x3c
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f01c f87a 	bl	802ba1e <_ZdlPvj>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
    {
    }
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
    {
    }
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
    {
    }
 800f964:	bf00      	nop
 800f966:	370c      	adds	r7, #12
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr

0800f970 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
    {
    }
 800f978:	bf00      	nop
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f990:	bf00      	nop
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	3304      	adds	r3, #4
 800f9aa:	6839      	ldr	r1, [r7, #0]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f006 faa9 	bl	8015f04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f9b2:	bf00      	nop
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	60f8      	str	r0, [r7, #12]
 800f9c2:	607b      	str	r3, [r7, #4]
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	817b      	strh	r3, [r7, #10]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff ff25 	bl	800f81e <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d008      	beq.n	800f9ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff ff2b 	bl	800f838 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d001      	beq.n	800f9ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e000      	b.n	800f9ee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d002      	beq.n	800f9f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	601a      	str	r2, [r3, #0]
        }
    }
 800f9f8:	bf00      	nop
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7ff fdde 	bl	800f5cc <_ZN8touchgfx8DrawableC1Ev>
 800fa10:	4a03      	ldr	r2, [pc, #12]	; (800fa20 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	601a      	str	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	0802ec24 	.word	0x0802ec24

0800fa24 <_ZN8touchgfx6WidgetD1Ev>:
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	4a05      	ldr	r2, [pc, #20]	; (800fa44 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7ff fdf9 	bl	800f62c <_ZN8touchgfx8DrawableD1Ev>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	0802ec24 	.word	0x0802ec24

0800fa48 <_ZN8touchgfx6WidgetD0Ev>:
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff ffe7 	bl	800fa24 <_ZN8touchgfx6WidgetD1Ev>
 800fa56:	2128      	movs	r1, #40	; 0x28
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f01b ffe0 	bl	802ba1e <_ZdlPvj>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4618      	mov	r0, r3
 800fa74:	2326      	movs	r3, #38	; 0x26
 800fa76:	461a      	mov	r2, r3
 800fa78:	2100      	movs	r1, #0
 800fa7a:	f01c fe7b 	bl	802c774 <memset>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff ffbd 	bl	800fa00 <_ZN8touchgfx6WidgetC1Ev>
 800fa86:	4a09      	ldr	r2, [pc, #36]	; (800faac <_ZN8touchgfx3BoxC1Ev+0x44>)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	601a      	str	r2, [r3, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	22ff      	movs	r2, #255	; 0xff
 800fa90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	3328      	adds	r3, #40	; 0x28
 800fa98:	2100      	movs	r1, #0
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7ff fd60 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	08030460 	.word	0x08030460

0800fab0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	683a      	ldr	r2, [r7, #0]
 800fabe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fac0:	bf00      	nop
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	2326      	movs	r3, #38	; 0x26
 800fadc:	461a      	mov	r2, r3
 800fade:	2100      	movs	r1, #0
 800fae0:	f01c fe48 	bl	802c774 <memset>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff ff8a 	bl	800fa00 <_ZN8touchgfx6WidgetC1Ev>
 800faec:	4a09      	ldr	r2, [pc, #36]	; (800fb14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	683a      	ldr	r2, [r7, #0]
 800faf6:	8812      	ldrh	r2, [r2, #0]
 800faf8:	84da      	strh	r2, [r3, #38]	; 0x26
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	22ff      	movs	r2, #255	; 0xff
 800fafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f009 fad9 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	080306cc 	.word	0x080306cc

0800fb18 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800fb24:	4a06      	ldr	r2, [pc, #24]	; (800fb40 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	601a      	str	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	887a      	ldrh	r2, [r7, #2]
 800fb2e:	809a      	strh	r2, [r3, #4]
    }
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4618      	mov	r0, r3
 800fb34:	370c      	adds	r7, #12
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	0802ea24 	.word	0x0802ea24

0800fb44 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	2326      	movs	r3, #38	; 0x26
 800fb52:	461a      	mov	r2, r3
 800fb54:	2100      	movs	r1, #0
 800fb56:	f01c fe0d 	bl	802c774 <memset>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff ff4f 	bl	800fa00 <_ZN8touchgfx6WidgetC1Ev>
 800fb62:	4a14      	ldr	r2, [pc, #80]	; (800fbb4 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	601a      	str	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	3328      	adds	r3, #40	; 0x28
 800fb6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7ff ffd1 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	3330      	adds	r3, #48	; 0x30
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff fcef 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	869a      	strh	r2, [r3, #52]	; 0x34
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	22ff      	movs	r2, #255	; 0xff
 800fb8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	080303b8 	.word	0x080303b8

0800fbb8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	4a08      	ldr	r2, [pc, #32]	; (800fbe4 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	3328      	adds	r3, #40	; 0x28
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe fe24 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff ff26 	bl	800fa24 <_ZN8touchgfx6WidgetD1Ev>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	080303b8 	.word	0x080303b8

0800fbe8 <_ZN8touchgfx8TextAreaD0Ev>:
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff ffe1 	bl	800fbb8 <_ZN8touchgfx8TextAreaD1Ev>
 800fbf6:	213c      	movs	r1, #60	; 0x3c
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f01b ff10 	bl	802ba1e <_ZdlPvj>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4618      	mov	r0, r3
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7ff ff96 	bl	800fb44 <_ZN8touchgfx8TextAreaC1Ev>
 800fc18:	4a05      	ldr	r2, [pc, #20]	; (800fc30 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2200      	movs	r2, #0
 800fc22:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4618      	mov	r0, r3
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	08030624 	.word	0x08030624

0800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc44:	bf00      	nop
 800fc46:	370c      	adds	r7, #12
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	4a05      	ldr	r2, [pc, #20]	; (800fc70 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	601a      	str	r2, [r3, #0]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7ff fe43 	bl	800f8ec <_ZN8touchgfx6ScreenD1Ev>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3708      	adds	r7, #8
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	0802ebf0 	.word	0x0802ebf0

0800fc74 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7ff ffe7 	bl	800fc50 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800fc82:	2140      	movs	r1, #64	; 0x40
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f01b feca 	bl	802ba1e <_ZdlPvj>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	4a72      	ldr	r2, [pc, #456]	; (800fe68 <_ZN15Screen1ViewBaseD1Ev+0x1d4>)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	601a      	str	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f003 f849 	bl	8012d40 <_ZN8touchgfx5GaugeD1Ev>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f002 ff8f 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f002 ff89 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800fccc:	4618      	mov	r0, r3
 800fcce:	f002 ff83 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f002 ff7d 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800fce4:	4618      	mov	r0, r3
 800fce6:	f002 ff77 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f002 ff71 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f002 ff6b 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f002 ff65 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800fd14:	4618      	mov	r0, r3
 800fd16:	f002 ff5f 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 800fd20:	4618      	mov	r0, r3
 800fd22:	f002 ff59 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f002 ff53 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f002 ff4d 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800fd44:	4618      	mov	r0, r3
 800fd46:	f002 ff47 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800fd50:	4618      	mov	r0, r3
 800fd52:	f002 ff41 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f002 ff3b 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f002 ff35 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800fd74:	4618      	mov	r0, r3
 800fd76:	f002 ff2f 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800fd80:	4618      	mov	r0, r3
 800fd82:	f002 ff29 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f002 ff23 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f002 ff1d 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800fda4:	4618      	mov	r0, r3
 800fda6:	f002 ff17 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f002 ff11 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f002 ff0b 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f002 ff05 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f002 fedd 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fde0:	4618      	mov	r0, r3
 800fde2:	f002 fed7 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800fdec:	4618      	mov	r0, r3
 800fdee:	f002 fed1 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f002 fecb 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800fe04:	4618      	mov	r0, r3
 800fe06:	f002 fec5 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800fe10:	4618      	mov	r0, r3
 800fe12:	f002 febf 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f002 feb9 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	33f0      	adds	r3, #240	; 0xf0
 800fe26:	4618      	mov	r0, r3
 800fe28:	f002 feb4 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	33c4      	adds	r3, #196	; 0xc4
 800fe30:	4618      	mov	r0, r3
 800fe32:	f002 feaf 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	3398      	adds	r3, #152	; 0x98
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f002 feaa 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	336c      	adds	r3, #108	; 0x6c
 800fe44:	4618      	mov	r0, r3
 800fe46:	f002 fea5 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	3340      	adds	r3, #64	; 0x40
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f002 fe7e 	bl	8012b50 <_ZN8touchgfx3BoxD1Ev>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7ff fefa 	bl	800fc50 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	0802ebbc 	.word	0x0802ebbc

0800fe6c <_ZN15Screen1ViewBaseD0Ev>:
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff ff0d 	bl	800fc94 <_ZN15Screen1ViewBaseD1Ev>
 800fe7a:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f01b fdcd 	bl	802ba1e <_ZdlPvj>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800fe90:	b590      	push	{r4, r7, lr}
 800fe92:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 800fe96:	af02      	add	r7, sp, #8
 800fe98:	1d3b      	adds	r3, r7, #4
 800fe9a:	6018      	str	r0, [r3, #0]
 800fe9c:	1d3b      	adds	r3, r7, #4
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f002 fe1d 	bl	8012ae0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800fea6:	4ae5      	ldr	r2, [pc, #916]	; (801023c <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 800fea8:	1d3b      	adds	r3, r7, #4
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	1d3b      	adds	r3, r7, #4
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3340      	adds	r3, #64	; 0x40
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff fdd7 	bl	800fa68 <_ZN8touchgfx3BoxC1Ev>
 800feba:	1d3b      	adds	r3, r7, #4
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800fec2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fec6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800feca:	4618      	mov	r0, r3
 800fecc:	f7ff fb6e 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800fed0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fed4:	4619      	mov	r1, r3
 800fed6:	4620      	mov	r0, r4
 800fed8:	f7ff fdf8 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fedc:	1d3b      	adds	r3, r7, #4
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800fee4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fee8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff fb5d 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800fef2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fef6:	4619      	mov	r1, r3
 800fef8:	4620      	mov	r0, r4
 800fefa:	f7ff fde7 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fefe:	1d3b      	adds	r3, r7, #4
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800ff06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ff0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff fb4c 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ff14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ff18:	4619      	mov	r1, r3
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f7ff fdd6 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff20:	1d3b      	adds	r3, r7, #4
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800ff28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ff2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff fb3b 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ff36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f7ff fdc5 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff42:	1d3b      	adds	r3, r7, #4
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 800ff4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ff4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff fb2a 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ff58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	4620      	mov	r0, r4
 800ff60:	f7ff fdb4 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff64:	1d3b      	adds	r3, r7, #4
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 800ff6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ff70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7ff fb19 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ff7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4620      	mov	r0, r4
 800ff82:	f7ff fda3 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff86:	1d3b      	adds	r3, r7, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 800ff8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ff92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff fb08 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ff9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7ff fd92 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ffa8:	1d3b      	adds	r3, r7, #4
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 800ffb0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ffb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7ff faf7 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ffbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f7ff fd81 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ffca:	1d3b      	adds	r3, r7, #4
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 800ffd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ffd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff fae6 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 800ffe0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7ff fd70 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ffec:	1d3b      	adds	r3, r7, #4
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800fff4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff fad5 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 8010002:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010006:	4619      	mov	r1, r3
 8010008:	4620      	mov	r0, r4
 801000a:	f7ff fd5f 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801000e:	1d3b      	adds	r3, r7, #4
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8010016:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801001a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801001e:	4618      	mov	r0, r3
 8010020:	f7ff fac4 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 8010024:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010028:	4619      	mov	r1, r3
 801002a:	4620      	mov	r0, r4
 801002c:	f7ff fd4e 	bl	800facc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010030:	1d3b      	adds	r3, r7, #4
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff fde5 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801003e:	1d3b      	adds	r3, r7, #4
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8010046:	4618      	mov	r0, r3
 8010048:	f7ff fdde 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801004c:	1d3b      	adds	r3, r7, #4
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8010054:	4618      	mov	r0, r3
 8010056:	f7ff fdd7 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801005a:	1d3b      	adds	r3, r7, #4
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fdd0 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010068:	1d3b      	adds	r3, r7, #4
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff fdc9 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010076:	1d3b      	adds	r3, r7, #4
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 801007e:	4618      	mov	r0, r3
 8010080:	f7ff fdc2 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010084:	1d3b      	adds	r3, r7, #4
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fdbb 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010092:	1d3b      	adds	r3, r7, #4
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fdb4 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100a0:	1d3b      	adds	r3, r7, #4
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff fdad 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100ae:	1d3b      	adds	r3, r7, #4
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff fda6 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100bc:	1d3b      	adds	r3, r7, #4
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff fd9f 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100ca:	1d3b      	adds	r3, r7, #4
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fd98 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100d8:	1d3b      	adds	r3, r7, #4
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7ff fd91 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100e6:	1d3b      	adds	r3, r7, #4
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff fd8a 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100f4:	1d3b      	adds	r3, r7, #4
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7ff fd83 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010102:	1d3b      	adds	r3, r7, #4
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fd7c 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010110:	1d3b      	adds	r3, r7, #4
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff fd75 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801011e:	1d3b      	adds	r3, r7, #4
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fd6e 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801012c:	1d3b      	adds	r3, r7, #4
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8010134:	4618      	mov	r0, r3
 8010136:	f7ff fd67 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801013a:	1d3b      	adds	r3, r7, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fd60 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010148:	1d3b      	adds	r3, r7, #4
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8010150:	4618      	mov	r0, r3
 8010152:	f7ff fd59 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010156:	1d3b      	adds	r3, r7, #4
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 801015e:	4618      	mov	r0, r3
 8010160:	f7ff fd52 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010164:	1d3b      	adds	r3, r7, #4
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801016c:	4618      	mov	r0, r3
 801016e:	f7ff fd4b 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010172:	1d3b      	adds	r3, r7, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801017a:	4618      	mov	r0, r3
 801017c:	f7ff fd44 	bl	800fc08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010180:	1d3b      	adds	r3, r7, #4
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8010188:	4618      	mov	r0, r3
 801018a:	f008 fd4f 	bl	8018c2c <_ZN8touchgfx5GaugeC1Ev>
{

    __background.setPosition(0, 0, 800, 480);
 801018e:	1d3b      	adds	r3, r7, #4
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010196:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	f44f 7348 	mov.w	r3, #800	; 0x320
 80101a0:	2200      	movs	r2, #0
 80101a2:	2100      	movs	r1, #0
 80101a4:	f7ff fa6d 	bl	800f682 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80101a8:	1d3b      	adds	r3, r7, #4
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80101b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80101b4:	2200      	movs	r2, #0
 80101b6:	701a      	strb	r2, [r3, #0]
 80101b8:	f207 23a7 	addw	r3, r7, #679	; 0x2a7
 80101bc:	2200      	movs	r2, #0
 80101be:	701a      	strb	r2, [r3, #0]
 80101c0:	f207 23a6 	addw	r3, r7, #678	; 0x2a6
 80101c4:	2200      	movs	r2, #0
 80101c6:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80101c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	041b      	lsls	r3, r3, #16
 80101d0:	461a      	mov	r2, r3
 80101d2:	f207 23a7 	addw	r3, r7, #679	; 0x2a7
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	021b      	lsls	r3, r3, #8
 80101da:	431a      	orrs	r2, r3
 80101dc:	f207 23a6 	addw	r3, r7, #678	; 0x2a6
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80101e8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80101ec:	4611      	mov	r1, r2
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff f9b6 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 80101f4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4619      	mov	r1, r3
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7ff fc57 	bl	800fab0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 8010202:	1d3b      	adds	r3, r7, #4
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	336c      	adds	r3, #108	; 0x6c
 8010208:	2200      	movs	r2, #0
 801020a:	2100      	movs	r1, #0
 801020c:	4618      	mov	r0, r3
 801020e:	f7ff fa77 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RACE_ID));
 8010212:	1d3b      	adds	r3, r7, #4
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801021a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801021e:	210b      	movs	r1, #11
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff f9c3 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 8010226:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801022a:	4619      	mov	r1, r3
 801022c:	4620      	mov	r0, r4
 801022e:	f008 ff45 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLeft.setXY(202, 27);
 8010232:	1d3b      	adds	r3, r7, #4
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3398      	adds	r3, #152	; 0x98
 8010238:	221b      	movs	r2, #27
 801023a:	e001      	b.n	8010240 <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 801023c:	0802ebbc 	.word	0x0802ebbc
 8010240:	21ca      	movs	r1, #202	; 0xca
 8010242:	4618      	mov	r0, r3
 8010244:	f7ff fa5c 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indLeft.setBitmap(touchgfx::Bitmap(BITMAP_INDLEFT_ID));
 8010248:	1d3b      	adds	r3, r7, #4
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8010250:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010254:	2105      	movs	r1, #5
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff f9a8 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 801025c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010260:	4619      	mov	r1, r3
 8010262:	4620      	mov	r0, r4
 8010264:	f008 ff2a 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indRight.setXY(561, 26);
 8010268:	1d3b      	adds	r3, r7, #4
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	33c4      	adds	r3, #196	; 0xc4
 801026e:	221a      	movs	r2, #26
 8010270:	f240 2131 	movw	r1, #561	; 0x231
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff fa43 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indRight.setBitmap(touchgfx::Bitmap(BITMAP_INDRIGHT_ID));
 801027a:	1d3b      	adds	r3, r7, #4
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8010282:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010286:	2109      	movs	r1, #9
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff f98f 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 801028e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010292:	4619      	mov	r1, r3
 8010294:	4620      	mov	r0, r4
 8010296:	f008 ff11 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indHigh.setXY(282, 222);
 801029a:	1d3b      	adds	r3, r7, #4
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	33f0      	adds	r3, #240	; 0xf0
 80102a0:	22de      	movs	r2, #222	; 0xde
 80102a2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff fa2a 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indHigh.setBitmap(touchgfx::Bitmap(BITMAP_INDHIGH_ID));
 80102ac:	1d3b      	adds	r3, r7, #4
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80102b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80102b8:	2104      	movs	r1, #4
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7ff f976 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 80102c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80102c4:	4619      	mov	r1, r3
 80102c6:	4620      	mov	r0, r4
 80102c8:	f008 fef8 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indFuel.setXY(451, 150);
 80102cc:	1d3b      	adds	r3, r7, #4
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80102d4:	2296      	movs	r2, #150	; 0x96
 80102d6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff fa10 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_INDFUEL_ID));
 80102e0:	1d3b      	adds	r3, r7, #4
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80102e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80102ec:	2103      	movs	r1, #3
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7ff f95c 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 80102f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80102f8:	4619      	mov	r1, r3
 80102fa:	4620      	mov	r0, r4
 80102fc:	f008 fede 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indOil.setXY(298, 281);
 8010300:	1d3b      	adds	r3, r7, #4
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8010308:	f240 1219 	movw	r2, #281	; 0x119
 801030c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff f9f5 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_INDOIL_ID));
 8010316:	1d3b      	adds	r3, r7, #4
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 801031e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010322:	2107      	movs	r1, #7
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff f941 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 801032a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801032e:	4619      	mov	r1, r3
 8010330:	4620      	mov	r0, r4
 8010332:	f008 fec3 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indBatt.setXY(313, 152);
 8010336:	1d3b      	adds	r3, r7, #4
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801033e:	2298      	movs	r2, #152	; 0x98
 8010340:	f240 1139 	movw	r1, #313	; 0x139
 8010344:	4618      	mov	r0, r3
 8010346:	f7ff f9db 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_INDBATT_ID));
 801034a:	1d3b      	adds	r3, r7, #4
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8010352:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010356:	2100      	movs	r1, #0
 8010358:	4618      	mov	r0, r3
 801035a:	f7ff f927 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 801035e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010362:	4619      	mov	r1, r3
 8010364:	4620      	mov	r0, r4
 8010366:	f008 fea9 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indPark.setXY(384, 123);
 801036a:	1d3b      	adds	r3, r7, #4
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010372:	227b      	movs	r2, #123	; 0x7b
 8010374:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff f9c1 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indPark.setBitmap(touchgfx::Bitmap(BITMAP_INDPARK_ID));
 801037e:	1d3b      	adds	r3, r7, #4
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8010386:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801038a:	2108      	movs	r1, #8
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff f90d 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 8010392:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010396:	4619      	mov	r1, r3
 8010398:	4620      	mov	r0, r4
 801039a:	f008 fe8f 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indDTC.setXY(383, 169);
 801039e:	1d3b      	adds	r3, r7, #4
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80103a6:	22a9      	movs	r2, #169	; 0xa9
 80103a8:	f240 117f 	movw	r1, #383	; 0x17f
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7ff f9a7 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_INDDTC_ID));
 80103b2:	1d3b      	adds	r3, r7, #4
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80103ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80103be:	2101      	movs	r1, #1
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7ff f8f3 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 80103c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80103ca:	4619      	mov	r1, r3
 80103cc:	4620      	mov	r0, r4
 80103ce:	f008 fe75 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indECT.setXY(339, 314);
 80103d2:	1d3b      	adds	r3, r7, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80103da:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80103de:	f240 1153 	movw	r1, #339	; 0x153
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7ff f98c 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_INDECT_ID));
 80103e8:	1d3b      	adds	r3, r7, #4
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80103f0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80103f4:	2102      	movs	r1, #2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7ff f8d8 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 80103fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010400:	4619      	mov	r1, r3
 8010402:	4620      	mov	r0, r4
 8010404:	f008 fe5a 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLow.setXY(340, 224);
 8010408:	1d3b      	adds	r3, r7, #4
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8010410:	22e0      	movs	r2, #224	; 0xe0
 8010412:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff f972 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    indLow.setBitmap(touchgfx::Bitmap(BITMAP_INDLOW_ID));
 801041c:	1d3b      	adds	r3, r7, #4
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8010424:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010428:	2106      	movs	r1, #6
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff f8be 	bl	800f5ac <_ZN8touchgfx6BitmapC1Et>
 8010430:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010434:	4619      	mov	r1, r3
 8010436:	4620      	mov	r0, r4
 8010438:	f008 fe40 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    map_value.setXY(747, 25);
 801043c:	1d3b      	adds	r3, r7, #4
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010444:	2219      	movs	r2, #25
 8010446:	f240 21eb 	movw	r1, #747	; 0x2eb
 801044a:	4618      	mov	r0, r3
 801044c:	f7ff f958 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    map_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010450:	1d3b      	adds	r3, r7, #4
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8010458:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
 801045c:	22ff      	movs	r2, #255	; 0xff
 801045e:	701a      	strb	r2, [r3, #0]
 8010460:	f207 23aa 	addw	r3, r7, #682	; 0x2aa
 8010464:	22ff      	movs	r2, #255	; 0xff
 8010466:	701a      	strb	r2, [r3, #0]
 8010468:	f207 23a9 	addw	r3, r7, #681	; 0x2a9
 801046c:	22ff      	movs	r2, #255	; 0xff
 801046e:	701a      	strb	r2, [r3, #0]
 8010470:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	041b      	lsls	r3, r3, #16
 8010478:	461a      	mov	r2, r3
 801047a:	f207 23aa 	addw	r3, r7, #682	; 0x2aa
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	021b      	lsls	r3, r3, #8
 8010482:	431a      	orrs	r2, r3
 8010484:	f207 23a9 	addw	r3, r7, #681	; 0x2a9
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	4313      	orrs	r3, r2
 801048c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010490:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8010494:	4611      	mov	r1, r2
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff f862 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 801049c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	461a      	mov	r2, r3
 80104a4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80104a8:	601c      	str	r4, [r3, #0]
 80104aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80104ae:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80104b0:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80104ba:	6812      	ldr	r2, [r2, #0]
 80104bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80104be:	bf00      	nop
    map_value.setLinespacing(0);
 80104c0:	1d3b      	adds	r3, r7, #4
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f503 7214 	add.w	r2, r3, #592	; 0x250
 80104c8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	f207 23b2 	addw	r3, r7, #690	; 0x2b2
 80104d2:	2200      	movs	r2, #0
 80104d4:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80104d6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	f207 22b2 	addw	r2, r7, #690	; 0x2b2
 80104e0:	8812      	ldrh	r2, [r2, #0]
 80104e2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80104e4:	bf00      	nop
    Unicode::snprintf(map_valueBuffer, MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID39).getText());
 80104e6:	1d3b      	adds	r3, r7, #4
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f503 641f 	add.w	r4, r3, #2544	; 0x9f0
 80104ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80104f2:	2119      	movs	r1, #25
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fb0f 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80104fa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80104fe:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8010502:	601a      	str	r2, [r3, #0]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010504:	4bc5      	ldr	r3, [pc, #788]	; (801081c <_ZN15Screen1ViewBaseC1Ev+0x98c>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d105      	bne.n	8010518 <_ZN15Screen1ViewBaseC1Ev+0x688>
 801050c:	4bc4      	ldr	r3, [pc, #784]	; (8010820 <_ZN15Screen1ViewBaseC1Ev+0x990>)
 801050e:	4ac5      	ldr	r2, [pc, #788]	; (8010824 <_ZN15Screen1ViewBaseC1Ev+0x994>)
 8010510:	21ae      	movs	r1, #174	; 0xae
 8010512:	48c5      	ldr	r0, [pc, #788]	; (8010828 <_ZN15Screen1ViewBaseC1Ev+0x998>)
 8010514:	f01c f8a2 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010518:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	889a      	ldrh	r2, [r3, #4]
 8010520:	4bc2      	ldr	r3, [pc, #776]	; (801082c <_ZN15Screen1ViewBaseC1Ev+0x99c>)
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	429a      	cmp	r2, r3
 8010526:	d305      	bcc.n	8010534 <_ZN15Screen1ViewBaseC1Ev+0x6a4>
 8010528:	4bc1      	ldr	r3, [pc, #772]	; (8010830 <_ZN15Screen1ViewBaseC1Ev+0x9a0>)
 801052a:	4abe      	ldr	r2, [pc, #760]	; (8010824 <_ZN15Screen1ViewBaseC1Ev+0x994>)
 801052c:	21af      	movs	r1, #175	; 0xaf
 801052e:	48be      	ldr	r0, [pc, #760]	; (8010828 <_ZN15Screen1ViewBaseC1Ev+0x998>)
 8010530:	f01c f894 	bl	802c65c <__assert_func>
    }
 8010534:	bf00      	nop
        return texts->getText(typedTextId);
 8010536:	4bbf      	ldr	r3, [pc, #764]	; (8010834 <_ZN15Screen1ViewBaseC1Ev+0x9a4>)
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801053e:	889b      	ldrh	r3, [r3, #4]
 8010540:	4619      	mov	r1, r3
 8010542:	4610      	mov	r0, r2
 8010544:	f002 fdd0 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8010548:	4603      	mov	r3, r0
 801054a:	bf00      	nop
 801054c:	4aba      	ldr	r2, [pc, #744]	; (8010838 <_ZN15Screen1ViewBaseC1Ev+0x9a8>)
 801054e:	2120      	movs	r1, #32
 8010550:	4620      	mov	r0, r4
 8010552:	f00d fc6d 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010556:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801055a:	4618      	mov	r0, r3
 801055c:	f7fe f95c 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    map_value.setWildcard(map_valueBuffer);
 8010560:	1d3b      	adds	r3, r7, #4
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8010568:	1d3b      	adds	r3, r7, #4
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f503 631f 	add.w	r3, r3, #2544	; 0x9f0
 8010570:	4619      	mov	r1, r3
 8010572:	4610      	mov	r0, r2
 8010574:	f7ff fb5e 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_value.resizeToCurrentText();
 8010578:	1d3b      	adds	r3, r7, #4
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010580:	4618      	mov	r0, r3
 8010582:	f008 fa41 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8010586:	1d3b      	adds	r3, r7, #4
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f503 7414 	add.w	r4, r3, #592	; 0x250
 801058e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010592:	2117      	movs	r1, #23
 8010594:	4618      	mov	r0, r3
 8010596:	f7ff fabf 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801059a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801059e:	4619      	mov	r1, r3
 80105a0:	4620      	mov	r0, r4
 80105a2:	f008 fa4e 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80105a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe f934 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    map_label.setXY(696, 82);
 80105b0:	1d3b      	adds	r3, r7, #4
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80105b8:	2252      	movs	r2, #82	; 0x52
 80105ba:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f89e 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    map_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80105c4:	1d3b      	adds	r3, r7, #4
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f503 7424 	add.w	r4, r3, #656	; 0x290
 80105cc:	f207 23bf 	addw	r3, r7, #703	; 0x2bf
 80105d0:	22ff      	movs	r2, #255	; 0xff
 80105d2:	701a      	strb	r2, [r3, #0]
 80105d4:	f207 23be 	addw	r3, r7, #702	; 0x2be
 80105d8:	22ff      	movs	r2, #255	; 0xff
 80105da:	701a      	strb	r2, [r3, #0]
 80105dc:	f207 23bd 	addw	r3, r7, #701	; 0x2bd
 80105e0:	22ff      	movs	r2, #255	; 0xff
 80105e2:	701a      	strb	r2, [r3, #0]
 80105e4:	f207 23bf 	addw	r3, r7, #703	; 0x2bf
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	041b      	lsls	r3, r3, #16
 80105ec:	461a      	mov	r2, r3
 80105ee:	f207 23be 	addw	r3, r7, #702	; 0x2be
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	021b      	lsls	r3, r3, #8
 80105f6:	431a      	orrs	r2, r3
 80105f8:	f207 23bd 	addw	r3, r7, #701	; 0x2bd
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	4313      	orrs	r3, r2
 8010600:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010604:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe ffa8 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010610:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801061c:	601c      	str	r4, [r3, #0]
 801061e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010622:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010624:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801062e:	6812      	ldr	r2, [r2, #0]
 8010630:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010632:	bf00      	nop
    map_label.setLinespacing(0);
 8010634:	1d3b      	adds	r3, r7, #4
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f503 7224 	add.w	r2, r3, #656	; 0x290
 801063c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	f207 23c6 	addw	r3, r7, #710	; 0x2c6
 8010646:	2200      	movs	r2, #0
 8010648:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801064a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f207 22c6 	addw	r2, r7, #710	; 0x2c6
 8010654:	8812      	ldrh	r2, [r2, #0]
 8010656:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010658:	bf00      	nop
    Unicode::snprintf(map_labelBuffer, MAP_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID40).getText());
 801065a:	1d3b      	adds	r3, r7, #4
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f503 6423 	add.w	r4, r3, #2608	; 0xa30
 8010662:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010666:	211a      	movs	r1, #26
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fa55 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801066e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8010672:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8010676:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010678:	4b68      	ldr	r3, [pc, #416]	; (801081c <_ZN15Screen1ViewBaseC1Ev+0x98c>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d105      	bne.n	801068c <_ZN15Screen1ViewBaseC1Ev+0x7fc>
 8010680:	4b67      	ldr	r3, [pc, #412]	; (8010820 <_ZN15Screen1ViewBaseC1Ev+0x990>)
 8010682:	4a68      	ldr	r2, [pc, #416]	; (8010824 <_ZN15Screen1ViewBaseC1Ev+0x994>)
 8010684:	21ae      	movs	r1, #174	; 0xae
 8010686:	4868      	ldr	r0, [pc, #416]	; (8010828 <_ZN15Screen1ViewBaseC1Ev+0x998>)
 8010688:	f01b ffe8 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801068c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	889a      	ldrh	r2, [r3, #4]
 8010694:	4b65      	ldr	r3, [pc, #404]	; (801082c <_ZN15Screen1ViewBaseC1Ev+0x99c>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	429a      	cmp	r2, r3
 801069a:	d305      	bcc.n	80106a8 <_ZN15Screen1ViewBaseC1Ev+0x818>
 801069c:	4b64      	ldr	r3, [pc, #400]	; (8010830 <_ZN15Screen1ViewBaseC1Ev+0x9a0>)
 801069e:	4a61      	ldr	r2, [pc, #388]	; (8010824 <_ZN15Screen1ViewBaseC1Ev+0x994>)
 80106a0:	21af      	movs	r1, #175	; 0xaf
 80106a2:	4861      	ldr	r0, [pc, #388]	; (8010828 <_ZN15Screen1ViewBaseC1Ev+0x998>)
 80106a4:	f01b ffda 	bl	802c65c <__assert_func>
    }
 80106a8:	bf00      	nop
        return texts->getText(typedTextId);
 80106aa:	4b62      	ldr	r3, [pc, #392]	; (8010834 <_ZN15Screen1ViewBaseC1Ev+0x9a4>)
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80106b2:	889b      	ldrh	r3, [r3, #4]
 80106b4:	4619      	mov	r1, r3
 80106b6:	4610      	mov	r0, r2
 80106b8:	f002 fd16 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80106bc:	4603      	mov	r3, r0
 80106be:	bf00      	nop
 80106c0:	4a5d      	ldr	r2, [pc, #372]	; (8010838 <_ZN15Screen1ViewBaseC1Ev+0x9a8>)
 80106c2:	210a      	movs	r1, #10
 80106c4:	4620      	mov	r0, r4
 80106c6:	f00d fbb3 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80106ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fe f8a2 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    map_label.setWildcard(map_labelBuffer);
 80106d4:	1d3b      	adds	r3, r7, #4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f503 7224 	add.w	r2, r3, #656	; 0x290
 80106dc:	1d3b      	adds	r3, r7, #4
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80106e4:	4619      	mov	r1, r3
 80106e6:	4610      	mov	r0, r2
 80106e8:	f7ff faa4 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_label.resizeToCurrentText();
 80106ec:	1d3b      	adds	r3, r7, #4
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80106f4:	4618      	mov	r0, r3
 80106f6:	f008 f987 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80106fa:	1d3b      	adds	r3, r7, #4
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f503 7424 	add.w	r4, r3, #656	; 0x290
 8010702:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8010706:	2115      	movs	r1, #21
 8010708:	4618      	mov	r0, r3
 801070a:	f7ff fa05 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801070e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8010712:	4619      	mov	r1, r3
 8010714:	4620      	mov	r0, r4
 8010716:	f008 f994 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801071a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801071e:	4618      	mov	r0, r3
 8010720:	f7fe f87a 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    map_units.setXY(610, 82);
 8010724:	1d3b      	adds	r3, r7, #4
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801072c:	2252      	movs	r2, #82	; 0x52
 801072e:	f240 2162 	movw	r1, #610	; 0x262
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe ffe4 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    map_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010738:	1d3b      	adds	r3, r7, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 8010740:	f207 23d3 	addw	r3, r7, #723	; 0x2d3
 8010744:	22ff      	movs	r2, #255	; 0xff
 8010746:	701a      	strb	r2, [r3, #0]
 8010748:	f207 23d2 	addw	r3, r7, #722	; 0x2d2
 801074c:	22ff      	movs	r2, #255	; 0xff
 801074e:	701a      	strb	r2, [r3, #0]
 8010750:	f207 23d1 	addw	r3, r7, #721	; 0x2d1
 8010754:	22ff      	movs	r2, #255	; 0xff
 8010756:	701a      	strb	r2, [r3, #0]
 8010758:	f207 23d3 	addw	r3, r7, #723	; 0x2d3
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	041b      	lsls	r3, r3, #16
 8010760:	461a      	mov	r2, r3
 8010762:	f207 23d2 	addw	r3, r7, #722	; 0x2d2
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	021b      	lsls	r3, r3, #8
 801076a:	431a      	orrs	r2, r3
 801076c:	f207 23d1 	addw	r3, r7, #721	; 0x2d1
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	4313      	orrs	r3, r2
 8010774:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010778:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f7fe feee 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010784:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	461a      	mov	r2, r3
 801078c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8010790:	601c      	str	r4, [r3, #0]
 8010792:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010796:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010798:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80107a2:	6812      	ldr	r2, [r2, #0]
 80107a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80107a6:	bf00      	nop
    map_units.setLinespacing(0);
 80107a8:	1d3b      	adds	r3, r7, #4
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80107b0:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	f207 23da 	addw	r3, r7, #730	; 0x2da
 80107ba:	2200      	movs	r2, #0
 80107bc:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80107be:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f207 22da 	addw	r2, r7, #730	; 0x2da
 80107c8:	8812      	ldrh	r2, [r2, #0]
 80107ca:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80107cc:	bf00      	nop
    Unicode::snprintf(map_unitsBuffer, MAP_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID38).getText());
 80107ce:	1d3b      	adds	r3, r7, #4
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f603 2444 	addw	r4, r3, #2628	; 0xa44
 80107d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80107da:	2118      	movs	r1, #24
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff f99b 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80107e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80107e6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80107ea:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80107ec:	4b0b      	ldr	r3, [pc, #44]	; (801081c <_ZN15Screen1ViewBaseC1Ev+0x98c>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d105      	bne.n	8010800 <_ZN15Screen1ViewBaseC1Ev+0x970>
 80107f4:	4b0a      	ldr	r3, [pc, #40]	; (8010820 <_ZN15Screen1ViewBaseC1Ev+0x990>)
 80107f6:	4a0b      	ldr	r2, [pc, #44]	; (8010824 <_ZN15Screen1ViewBaseC1Ev+0x994>)
 80107f8:	21ae      	movs	r1, #174	; 0xae
 80107fa:	480b      	ldr	r0, [pc, #44]	; (8010828 <_ZN15Screen1ViewBaseC1Ev+0x998>)
 80107fc:	f01b ff2e 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010800:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	889a      	ldrh	r2, [r3, #4]
 8010808:	4b08      	ldr	r3, [pc, #32]	; (801082c <_ZN15Screen1ViewBaseC1Ev+0x99c>)
 801080a:	881b      	ldrh	r3, [r3, #0]
 801080c:	429a      	cmp	r2, r3
 801080e:	d315      	bcc.n	801083c <_ZN15Screen1ViewBaseC1Ev+0x9ac>
 8010810:	4b07      	ldr	r3, [pc, #28]	; (8010830 <_ZN15Screen1ViewBaseC1Ev+0x9a0>)
 8010812:	4a04      	ldr	r2, [pc, #16]	; (8010824 <_ZN15Screen1ViewBaseC1Ev+0x994>)
 8010814:	21af      	movs	r1, #175	; 0xaf
 8010816:	4804      	ldr	r0, [pc, #16]	; (8010828 <_ZN15Screen1ViewBaseC1Ev+0x998>)
 8010818:	f01b ff20 	bl	802c65c <__assert_func>
 801081c:	20006750 	.word	0x20006750
 8010820:	0802e228 	.word	0x0802e228
 8010824:	0802e26c 	.word	0x0802e26c
 8010828:	0802e29c 	.word	0x0802e29c
 801082c:	20006754 	.word	0x20006754
 8010830:	0802e2e0 	.word	0x0802e2e0
 8010834:	2000675c 	.word	0x2000675c
 8010838:	0802e334 	.word	0x0802e334
    }
 801083c:	bf00      	nop
        return texts->getText(typedTextId);
 801083e:	4bb9      	ldr	r3, [pc, #740]	; (8010b24 <_ZN15Screen1ViewBaseC1Ev+0xc94>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8010846:	889b      	ldrh	r3, [r3, #4]
 8010848:	4619      	mov	r1, r3
 801084a:	4610      	mov	r0, r2
 801084c:	f002 fc4c 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8010850:	4603      	mov	r3, r0
 8010852:	bf00      	nop
 8010854:	4ab4      	ldr	r2, [pc, #720]	; (8010b28 <_ZN15Screen1ViewBaseC1Ev+0xc98>)
 8010856:	210a      	movs	r1, #10
 8010858:	4620      	mov	r0, r4
 801085a:	f00d fae9 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801085e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd ffd8 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    map_units.setWildcard(map_unitsBuffer);
 8010868:	1d3b      	adds	r3, r7, #4
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 8010870:	1d3b      	adds	r3, r7, #4
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f603 2344 	addw	r3, r3, #2628	; 0xa44
 8010878:	4619      	mov	r1, r3
 801087a:	4610      	mov	r0, r2
 801087c:	f7ff f9da 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_units.resizeToCurrentText();
 8010880:	1d3b      	adds	r3, r7, #4
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8010888:	4618      	mov	r0, r3
 801088a:	f008 f8bd 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));
 801088e:	1d3b      	adds	r3, r7, #4
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 8010896:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801089a:	2116      	movs	r1, #22
 801089c:	4618      	mov	r0, r3
 801089e:	f7ff f93b 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80108a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80108a6:	4619      	mov	r1, r3
 80108a8:	4620      	mov	r0, r4
 80108aa:	f008 f8ca 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80108ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fd ffb0 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    batt_value.setXY(747, 141);
 80108b8:	1d3b      	adds	r3, r7, #4
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80108c0:	228d      	movs	r2, #141	; 0x8d
 80108c2:	f240 21eb 	movw	r1, #747	; 0x2eb
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe ff1a 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    batt_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80108cc:	1d3b      	adds	r3, r7, #4
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f503 7444 	add.w	r4, r3, #784	; 0x310
 80108d4:	f207 23e7 	addw	r3, r7, #743	; 0x2e7
 80108d8:	22ff      	movs	r2, #255	; 0xff
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	f207 23e6 	addw	r3, r7, #742	; 0x2e6
 80108e0:	22ff      	movs	r2, #255	; 0xff
 80108e2:	701a      	strb	r2, [r3, #0]
 80108e4:	f207 23e5 	addw	r3, r7, #741	; 0x2e5
 80108e8:	22ff      	movs	r2, #255	; 0xff
 80108ea:	701a      	strb	r2, [r3, #0]
 80108ec:	f207 23e7 	addw	r3, r7, #743	; 0x2e7
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	041b      	lsls	r3, r3, #16
 80108f4:	461a      	mov	r2, r3
 80108f6:	f207 23e6 	addw	r3, r7, #742	; 0x2e6
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	021b      	lsls	r3, r3, #8
 80108fe:	431a      	orrs	r2, r3
 8010900:	f207 23e5 	addw	r3, r7, #741	; 0x2e5
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	4313      	orrs	r3, r2
 8010908:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801090c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8010910:	4611      	mov	r1, r2
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe fe24 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010918:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	461a      	mov	r2, r3
 8010920:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8010924:	601c      	str	r4, [r3, #0]
 8010926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801092a:	601a      	str	r2, [r3, #0]
        this->color = color;
 801092c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010936:	6812      	ldr	r2, [r2, #0]
 8010938:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801093a:	bf00      	nop
    batt_value.setLinespacing(0);
 801093c:	1d3b      	adds	r3, r7, #4
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8010944:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8010948:	601a      	str	r2, [r3, #0]
 801094a:	f207 23ee 	addw	r3, r7, #750	; 0x2ee
 801094e:	2200      	movs	r2, #0
 8010950:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010952:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f207 22ee 	addw	r2, r7, #750	; 0x2ee
 801095c:	8812      	ldrh	r2, [r2, #0]
 801095e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010960:	bf00      	nop
    Unicode::snprintf(batt_valueBuffer, BATT_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8010962:	1d3b      	adds	r3, r7, #4
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f603 2458 	addw	r4, r3, #2648	; 0xa58
 801096a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801096e:	211f      	movs	r1, #31
 8010970:	4618      	mov	r0, r3
 8010972:	f7ff f8d1 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010976:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 801097a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 801097e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010980:	4b6a      	ldr	r3, [pc, #424]	; (8010b2c <_ZN15Screen1ViewBaseC1Ev+0xc9c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d105      	bne.n	8010994 <_ZN15Screen1ViewBaseC1Ev+0xb04>
 8010988:	4b69      	ldr	r3, [pc, #420]	; (8010b30 <_ZN15Screen1ViewBaseC1Ev+0xca0>)
 801098a:	4a6a      	ldr	r2, [pc, #424]	; (8010b34 <_ZN15Screen1ViewBaseC1Ev+0xca4>)
 801098c:	21ae      	movs	r1, #174	; 0xae
 801098e:	486a      	ldr	r0, [pc, #424]	; (8010b38 <_ZN15Screen1ViewBaseC1Ev+0xca8>)
 8010990:	f01b fe64 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010994:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	889a      	ldrh	r2, [r3, #4]
 801099c:	4b67      	ldr	r3, [pc, #412]	; (8010b3c <_ZN15Screen1ViewBaseC1Ev+0xcac>)
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d305      	bcc.n	80109b0 <_ZN15Screen1ViewBaseC1Ev+0xb20>
 80109a4:	4b66      	ldr	r3, [pc, #408]	; (8010b40 <_ZN15Screen1ViewBaseC1Ev+0xcb0>)
 80109a6:	4a63      	ldr	r2, [pc, #396]	; (8010b34 <_ZN15Screen1ViewBaseC1Ev+0xca4>)
 80109a8:	21af      	movs	r1, #175	; 0xaf
 80109aa:	4863      	ldr	r0, [pc, #396]	; (8010b38 <_ZN15Screen1ViewBaseC1Ev+0xca8>)
 80109ac:	f01b fe56 	bl	802c65c <__assert_func>
    }
 80109b0:	bf00      	nop
        return texts->getText(typedTextId);
 80109b2:	4b5c      	ldr	r3, [pc, #368]	; (8010b24 <_ZN15Screen1ViewBaseC1Ev+0xc94>)
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80109ba:	889b      	ldrh	r3, [r3, #4]
 80109bc:	4619      	mov	r1, r3
 80109be:	4610      	mov	r0, r2
 80109c0:	f002 fb92 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80109c4:	4603      	mov	r3, r0
 80109c6:	bf00      	nop
 80109c8:	4a57      	ldr	r2, [pc, #348]	; (8010b28 <_ZN15Screen1ViewBaseC1Ev+0xc98>)
 80109ca:	2120      	movs	r1, #32
 80109cc:	4620      	mov	r0, r4
 80109ce:	f00d fa2f 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80109d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fd ff1e 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    batt_value.setWildcard(batt_valueBuffer);
 80109dc:	1d3b      	adds	r3, r7, #4
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80109e4:	1d3b      	adds	r3, r7, #4
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80109ec:	4619      	mov	r1, r3
 80109ee:	4610      	mov	r0, r2
 80109f0:	f7ff f920 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_value.resizeToCurrentText();
 80109f4:	1d3b      	adds	r3, r7, #4
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80109fc:	4618      	mov	r0, r3
 80109fe:	f008 f803 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010a02:	1d3b      	adds	r3, r7, #4
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8010a0a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010a0e:	2114      	movs	r1, #20
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7ff f881 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010a16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f008 f810 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010a22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fd fef6 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    batt_label.setXY(709, 198);
 8010a2c:	1d3b      	adds	r3, r7, #4
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010a34:	22c6      	movs	r2, #198	; 0xc6
 8010a36:	f240 21c5 	movw	r1, #709	; 0x2c5
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fe fe60 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    batt_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010a40:	1d3b      	adds	r3, r7, #4
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8010a48:	f207 23fb 	addw	r3, r7, #763	; 0x2fb
 8010a4c:	22ff      	movs	r2, #255	; 0xff
 8010a4e:	701a      	strb	r2, [r3, #0]
 8010a50:	f207 23fa 	addw	r3, r7, #762	; 0x2fa
 8010a54:	22ff      	movs	r2, #255	; 0xff
 8010a56:	701a      	strb	r2, [r3, #0]
 8010a58:	f207 23f9 	addw	r3, r7, #761	; 0x2f9
 8010a5c:	22ff      	movs	r2, #255	; 0xff
 8010a5e:	701a      	strb	r2, [r3, #0]
 8010a60:	f207 23fb 	addw	r3, r7, #763	; 0x2fb
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	041b      	lsls	r3, r3, #16
 8010a68:	461a      	mov	r2, r3
 8010a6a:	f207 23fa 	addw	r3, r7, #762	; 0x2fa
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	021b      	lsls	r3, r3, #8
 8010a72:	431a      	orrs	r2, r3
 8010a74:	f207 23f9 	addw	r3, r7, #761	; 0x2f9
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010a80:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fe fd6a 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010a8c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	461a      	mov	r2, r3
 8010a94:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8010a98:	601c      	str	r4, [r3, #0]
 8010a9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010a9e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010aa0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010aaa:	6812      	ldr	r2, [r2, #0]
 8010aac:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010aae:	bf00      	nop
    batt_label.setLinespacing(0);
 8010ab0:	1d3b      	adds	r3, r7, #4
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f503 7254 	add.w	r2, r3, #848	; 0x350
 8010ab8:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8010abc:	601a      	str	r2, [r3, #0]
 8010abe:	f207 3302 	addw	r3, r7, #770	; 0x302
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010ac6:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f207 3202 	addw	r2, r7, #770	; 0x302
 8010ad0:	8812      	ldrh	r2, [r2, #0]
 8010ad2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010ad4:	bf00      	nop
    Unicode::snprintf(batt_labelBuffer, BATT_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID49).getText());
 8010ad6:	1d3b      	adds	r3, r7, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f603 2498 	addw	r4, r3, #2712	; 0xa98
 8010ade:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010ae2:	2123      	movs	r1, #35	; 0x23
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff f817 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010aea:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8010aee:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8010af2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010af4:	4b0d      	ldr	r3, [pc, #52]	; (8010b2c <_ZN15Screen1ViewBaseC1Ev+0xc9c>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d105      	bne.n	8010b08 <_ZN15Screen1ViewBaseC1Ev+0xc78>
 8010afc:	4b0c      	ldr	r3, [pc, #48]	; (8010b30 <_ZN15Screen1ViewBaseC1Ev+0xca0>)
 8010afe:	4a0d      	ldr	r2, [pc, #52]	; (8010b34 <_ZN15Screen1ViewBaseC1Ev+0xca4>)
 8010b00:	21ae      	movs	r1, #174	; 0xae
 8010b02:	480d      	ldr	r0, [pc, #52]	; (8010b38 <_ZN15Screen1ViewBaseC1Ev+0xca8>)
 8010b04:	f01b fdaa 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010b08:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	889a      	ldrh	r2, [r3, #4]
 8010b10:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <_ZN15Screen1ViewBaseC1Ev+0xcac>)
 8010b12:	881b      	ldrh	r3, [r3, #0]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d315      	bcc.n	8010b44 <_ZN15Screen1ViewBaseC1Ev+0xcb4>
 8010b18:	4b09      	ldr	r3, [pc, #36]	; (8010b40 <_ZN15Screen1ViewBaseC1Ev+0xcb0>)
 8010b1a:	4a06      	ldr	r2, [pc, #24]	; (8010b34 <_ZN15Screen1ViewBaseC1Ev+0xca4>)
 8010b1c:	21af      	movs	r1, #175	; 0xaf
 8010b1e:	4806      	ldr	r0, [pc, #24]	; (8010b38 <_ZN15Screen1ViewBaseC1Ev+0xca8>)
 8010b20:	f01b fd9c 	bl	802c65c <__assert_func>
 8010b24:	2000675c 	.word	0x2000675c
 8010b28:	0802e334 	.word	0x0802e334
 8010b2c:	20006750 	.word	0x20006750
 8010b30:	0802e228 	.word	0x0802e228
 8010b34:	0802e26c 	.word	0x0802e26c
 8010b38:	0802e29c 	.word	0x0802e29c
 8010b3c:	20006754 	.word	0x20006754
 8010b40:	0802e2e0 	.word	0x0802e2e0
    }
 8010b44:	bf00      	nop
        return texts->getText(typedTextId);
 8010b46:	4bba      	ldr	r3, [pc, #744]	; (8010e30 <_ZN15Screen1ViewBaseC1Ev+0xfa0>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010b4e:	889b      	ldrh	r3, [r3, #4]
 8010b50:	4619      	mov	r1, r3
 8010b52:	4610      	mov	r0, r2
 8010b54:	f002 fac8 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	bf00      	nop
 8010b5c:	4ab5      	ldr	r2, [pc, #724]	; (8010e34 <_ZN15Screen1ViewBaseC1Ev+0xfa4>)
 8010b5e:	210a      	movs	r1, #10
 8010b60:	4620      	mov	r0, r4
 8010b62:	f00d f965 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010b66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fd fe54 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    batt_label.setWildcard(batt_labelBuffer);
 8010b70:	1d3b      	adds	r3, r7, #4
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f503 7254 	add.w	r2, r3, #848	; 0x350
 8010b78:	1d3b      	adds	r3, r7, #4
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f603 2398 	addw	r3, r3, #2712	; 0xa98
 8010b80:	4619      	mov	r1, r3
 8010b82:	4610      	mov	r0, r2
 8010b84:	f7ff f856 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_label.resizeToCurrentText();
 8010b88:	1d3b      	adds	r3, r7, #4
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010b90:	4618      	mov	r0, r3
 8010b92:	f007 ff39 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8010b96:	1d3b      	adds	r3, r7, #4
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8010b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ba2:	2113      	movs	r1, #19
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fe ffb7 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bae:	4619      	mov	r1, r3
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f007 ff46 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fd fe2c 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    batt_units.setXY(650, 198);
 8010bc0:	1d3b      	adds	r3, r7, #4
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8010bc8:	22c6      	movs	r2, #198	; 0xc6
 8010bca:	f240 218a 	movw	r1, #650	; 0x28a
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe fd96 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    batt_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010bd4:	1d3b      	adds	r3, r7, #4
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f503 7464 	add.w	r4, r3, #912	; 0x390
 8010bdc:	f207 330f 	addw	r3, r7, #783	; 0x30f
 8010be0:	22ff      	movs	r2, #255	; 0xff
 8010be2:	701a      	strb	r2, [r3, #0]
 8010be4:	f207 330e 	addw	r3, r7, #782	; 0x30e
 8010be8:	22ff      	movs	r2, #255	; 0xff
 8010bea:	701a      	strb	r2, [r3, #0]
 8010bec:	f207 330d 	addw	r3, r7, #781	; 0x30d
 8010bf0:	22ff      	movs	r2, #255	; 0xff
 8010bf2:	701a      	strb	r2, [r3, #0]
 8010bf4:	f207 330f 	addw	r3, r7, #783	; 0x30f
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	041b      	lsls	r3, r3, #16
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	f207 330e 	addw	r3, r7, #782	; 0x30e
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	021b      	lsls	r3, r3, #8
 8010c06:	431a      	orrs	r2, r3
 8010c08:	f207 330d 	addw	r3, r7, #781	; 0x30d
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010c14:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8010c18:	4611      	mov	r1, r2
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fe fca0 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010c20:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	461a      	mov	r2, r3
 8010c28:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010c2c:	601c      	str	r4, [r3, #0]
 8010c2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c32:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010c34:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010c3e:	6812      	ldr	r2, [r2, #0]
 8010c40:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010c42:	bf00      	nop
    batt_units.setLinespacing(0);
 8010c44:	1d3b      	adds	r3, r7, #4
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	f503 7264 	add.w	r2, r3, #912	; 0x390
 8010c4c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8010c50:	601a      	str	r2, [r3, #0]
 8010c52:	f207 3316 	addw	r3, r7, #790	; 0x316
 8010c56:	2200      	movs	r2, #0
 8010c58:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010c5a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f207 3216 	addw	r2, r7, #790	; 0x316
 8010c64:	8812      	ldrh	r2, [r2, #0]
 8010c66:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010c68:	bf00      	nop
    Unicode::snprintf(batt_unitsBuffer, BATT_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID48).getText());
 8010c6a:	1d3b      	adds	r3, r7, #4
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f603 24ac 	addw	r4, r3, #2732	; 0xaac
 8010c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c76:	2122      	movs	r1, #34	; 0x22
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fe ff4d 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010c7e:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8010c82:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010c86:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010c88:	4b6b      	ldr	r3, [pc, #428]	; (8010e38 <_ZN15Screen1ViewBaseC1Ev+0xfa8>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d105      	bne.n	8010c9c <_ZN15Screen1ViewBaseC1Ev+0xe0c>
 8010c90:	4b6a      	ldr	r3, [pc, #424]	; (8010e3c <_ZN15Screen1ViewBaseC1Ev+0xfac>)
 8010c92:	4a6b      	ldr	r2, [pc, #428]	; (8010e40 <_ZN15Screen1ViewBaseC1Ev+0xfb0>)
 8010c94:	21ae      	movs	r1, #174	; 0xae
 8010c96:	486b      	ldr	r0, [pc, #428]	; (8010e44 <_ZN15Screen1ViewBaseC1Ev+0xfb4>)
 8010c98:	f01b fce0 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010c9c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	889a      	ldrh	r2, [r3, #4]
 8010ca4:	4b68      	ldr	r3, [pc, #416]	; (8010e48 <_ZN15Screen1ViewBaseC1Ev+0xfb8>)
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d305      	bcc.n	8010cb8 <_ZN15Screen1ViewBaseC1Ev+0xe28>
 8010cac:	4b67      	ldr	r3, [pc, #412]	; (8010e4c <_ZN15Screen1ViewBaseC1Ev+0xfbc>)
 8010cae:	4a64      	ldr	r2, [pc, #400]	; (8010e40 <_ZN15Screen1ViewBaseC1Ev+0xfb0>)
 8010cb0:	21af      	movs	r1, #175	; 0xaf
 8010cb2:	4864      	ldr	r0, [pc, #400]	; (8010e44 <_ZN15Screen1ViewBaseC1Ev+0xfb4>)
 8010cb4:	f01b fcd2 	bl	802c65c <__assert_func>
    }
 8010cb8:	bf00      	nop
        return texts->getText(typedTextId);
 8010cba:	4b5d      	ldr	r3, [pc, #372]	; (8010e30 <_ZN15Screen1ViewBaseC1Ev+0xfa0>)
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cc2:	889b      	ldrh	r3, [r3, #4]
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	f002 fa0e 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	bf00      	nop
 8010cd0:	4a58      	ldr	r2, [pc, #352]	; (8010e34 <_ZN15Screen1ViewBaseC1Ev+0xfa4>)
 8010cd2:	210a      	movs	r1, #10
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	f00d f8ab 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010cda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fd fd9a 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    batt_units.setWildcard(batt_unitsBuffer);
 8010ce4:	1d3b      	adds	r3, r7, #4
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f503 7264 	add.w	r2, r3, #912	; 0x390
 8010cec:	1d3b      	adds	r3, r7, #4
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f603 23ac 	addw	r3, r3, #2732	; 0xaac
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	4610      	mov	r0, r2
 8010cf8:	f7fe ff9c 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_units.resizeToCurrentText();
 8010cfc:	1d3b      	adds	r3, r7, #4
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8010d04:	4618      	mov	r0, r3
 8010d06:	f007 fe7f 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8010d0a:	1d3b      	adds	r3, r7, #4
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f503 7464 	add.w	r4, r3, #912	; 0x390
 8010d12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010d16:	2112      	movs	r1, #18
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fe fefd 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010d1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010d22:	4619      	mov	r1, r3
 8010d24:	4620      	mov	r0, r4
 8010d26:	f007 fe8c 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010d2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fd fd72 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    tps_value.setXY(747, 258);
 8010d34:	1d3b      	adds	r3, r7, #4
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010d3c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010d40:	f240 21eb 	movw	r1, #747	; 0x2eb
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fe fcdb 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    tps_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010d4a:	1d3b      	adds	r3, r7, #4
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 8010d52:	f207 3323 	addw	r3, r7, #803	; 0x323
 8010d56:	22ff      	movs	r2, #255	; 0xff
 8010d58:	701a      	strb	r2, [r3, #0]
 8010d5a:	f207 3322 	addw	r3, r7, #802	; 0x322
 8010d5e:	22ff      	movs	r2, #255	; 0xff
 8010d60:	701a      	strb	r2, [r3, #0]
 8010d62:	f207 3321 	addw	r3, r7, #801	; 0x321
 8010d66:	22ff      	movs	r2, #255	; 0xff
 8010d68:	701a      	strb	r2, [r3, #0]
 8010d6a:	f207 3323 	addw	r3, r7, #803	; 0x323
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	041b      	lsls	r3, r3, #16
 8010d72:	461a      	mov	r2, r3
 8010d74:	f207 3322 	addw	r3, r7, #802	; 0x322
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	021b      	lsls	r3, r3, #8
 8010d7c:	431a      	orrs	r2, r3
 8010d7e:	f207 3321 	addw	r3, r7, #801	; 0x321
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010d8a:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8010d8e:	4611      	mov	r1, r2
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fe fbe5 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010d96:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8010da2:	601c      	str	r4, [r3, #0]
 8010da4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010da8:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010daa:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010db4:	6812      	ldr	r2, [r2, #0]
 8010db6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010db8:	bf00      	nop
    tps_value.setLinespacing(0);
 8010dba:	1d3b      	adds	r3, r7, #4
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8010dc2:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8010dc6:	601a      	str	r2, [r3, #0]
 8010dc8:	f207 332a 	addw	r3, r7, #810	; 0x32a
 8010dcc:	2200      	movs	r2, #0
 8010dce:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010dd0:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f207 322a 	addw	r2, r7, #810	; 0x32a
 8010dda:	8812      	ldrh	r2, [r2, #0]
 8010ddc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010dde:	bf00      	nop
    Unicode::snprintf(tps_valueBuffer, TPS_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID46).getText());
 8010de0:	1d3b      	adds	r3, r7, #4
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8010de8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010dec:	2120      	movs	r1, #32
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fe fe92 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010df4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010df8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8010dfc:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010dfe:	4b0e      	ldr	r3, [pc, #56]	; (8010e38 <_ZN15Screen1ViewBaseC1Ev+0xfa8>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d105      	bne.n	8010e12 <_ZN15Screen1ViewBaseC1Ev+0xf82>
 8010e06:	4b0d      	ldr	r3, [pc, #52]	; (8010e3c <_ZN15Screen1ViewBaseC1Ev+0xfac>)
 8010e08:	4a0d      	ldr	r2, [pc, #52]	; (8010e40 <_ZN15Screen1ViewBaseC1Ev+0xfb0>)
 8010e0a:	21ae      	movs	r1, #174	; 0xae
 8010e0c:	480d      	ldr	r0, [pc, #52]	; (8010e44 <_ZN15Screen1ViewBaseC1Ev+0xfb4>)
 8010e0e:	f01b fc25 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010e12:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	889a      	ldrh	r2, [r3, #4]
 8010e1a:	4b0b      	ldr	r3, [pc, #44]	; (8010e48 <_ZN15Screen1ViewBaseC1Ev+0xfb8>)
 8010e1c:	881b      	ldrh	r3, [r3, #0]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d316      	bcc.n	8010e50 <_ZN15Screen1ViewBaseC1Ev+0xfc0>
 8010e22:	4b0a      	ldr	r3, [pc, #40]	; (8010e4c <_ZN15Screen1ViewBaseC1Ev+0xfbc>)
 8010e24:	4a06      	ldr	r2, [pc, #24]	; (8010e40 <_ZN15Screen1ViewBaseC1Ev+0xfb0>)
 8010e26:	21af      	movs	r1, #175	; 0xaf
 8010e28:	4806      	ldr	r0, [pc, #24]	; (8010e44 <_ZN15Screen1ViewBaseC1Ev+0xfb4>)
 8010e2a:	f01b fc17 	bl	802c65c <__assert_func>
 8010e2e:	bf00      	nop
 8010e30:	2000675c 	.word	0x2000675c
 8010e34:	0802e334 	.word	0x0802e334
 8010e38:	20006750 	.word	0x20006750
 8010e3c:	0802e228 	.word	0x0802e228
 8010e40:	0802e26c 	.word	0x0802e26c
 8010e44:	0802e29c 	.word	0x0802e29c
 8010e48:	20006754 	.word	0x20006754
 8010e4c:	0802e2e0 	.word	0x0802e2e0
    }
 8010e50:	bf00      	nop
        return texts->getText(typedTextId);
 8010e52:	4bba      	ldr	r3, [pc, #744]	; (801113c <_ZN15Screen1ViewBaseC1Ev+0x12ac>)
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010e5a:	889b      	ldrh	r3, [r3, #4]
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	4610      	mov	r0, r2
 8010e60:	f002 f942 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8010e64:	4603      	mov	r3, r0
 8010e66:	bf00      	nop
 8010e68:	4ab5      	ldr	r2, [pc, #724]	; (8011140 <_ZN15Screen1ViewBaseC1Ev+0x12b0>)
 8010e6a:	2120      	movs	r1, #32
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f00c ffdf 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010e72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fd fcce 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    tps_value.setWildcard(tps_valueBuffer);
 8010e7c:	1d3b      	adds	r3, r7, #4
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8010e84:	1d3b      	adds	r3, r7, #4
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	4610      	mov	r0, r2
 8010e90:	f7fe fed0 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_value.resizeToCurrentText();
 8010e94:	1d3b      	adds	r3, r7, #4
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f007 fdb3 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010ea2:	1d3b      	adds	r3, r7, #4
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 8010eaa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010eae:	2111      	movs	r1, #17
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fe fe31 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010eb6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010eba:	4619      	mov	r1, r3
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f007 fdc0 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010ec2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fd fca6 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    tps_label.setXY(696, 317);
 8010ecc:	1d3b      	adds	r3, r7, #4
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010ed4:	f240 123d 	movw	r2, #317	; 0x13d
 8010ed8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7fe fc0f 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    tps_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010ee2:	1d3b      	adds	r3, r7, #4
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8010eea:	f207 3337 	addw	r3, r7, #823	; 0x337
 8010eee:	22ff      	movs	r2, #255	; 0xff
 8010ef0:	701a      	strb	r2, [r3, #0]
 8010ef2:	f207 3336 	addw	r3, r7, #822	; 0x336
 8010ef6:	22ff      	movs	r2, #255	; 0xff
 8010ef8:	701a      	strb	r2, [r3, #0]
 8010efa:	f207 3335 	addw	r3, r7, #821	; 0x335
 8010efe:	22ff      	movs	r2, #255	; 0xff
 8010f00:	701a      	strb	r2, [r3, #0]
 8010f02:	f207 3337 	addw	r3, r7, #823	; 0x337
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	041b      	lsls	r3, r3, #16
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	f207 3336 	addw	r3, r7, #822	; 0x336
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	021b      	lsls	r3, r3, #8
 8010f14:	431a      	orrs	r2, r3
 8010f16:	f207 3335 	addw	r3, r7, #821	; 0x335
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010f22:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010f26:	4611      	mov	r1, r2
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fe fb19 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8010f2e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	461a      	mov	r2, r3
 8010f36:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010f3a:	601c      	str	r4, [r3, #0]
 8010f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f40:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010f42:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f4c:	6812      	ldr	r2, [r2, #0]
 8010f4e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010f50:	bf00      	nop
    tps_label.setLinespacing(0);
 8010f52:	1d3b      	adds	r3, r7, #4
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8010f5a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8010f5e:	601a      	str	r2, [r3, #0]
 8010f60:	f207 333e 	addw	r3, r7, #830	; 0x33e
 8010f64:	2200      	movs	r2, #0
 8010f66:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010f68:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f207 323e 	addw	r2, r7, #830	; 0x33e
 8010f72:	8812      	ldrh	r2, [r2, #0]
 8010f74:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010f76:	bf00      	nop
    Unicode::snprintf(tps_labelBuffer, TPS_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID51).getText());
 8010f78:	1d3b      	adds	r3, r7, #4
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8010f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f84:	2125      	movs	r1, #37	; 0x25
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fe fdc6 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8010f8c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8010f90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010f94:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010f96:	4b6b      	ldr	r3, [pc, #428]	; (8011144 <_ZN15Screen1ViewBaseC1Ev+0x12b4>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d105      	bne.n	8010faa <_ZN15Screen1ViewBaseC1Ev+0x111a>
 8010f9e:	4b6a      	ldr	r3, [pc, #424]	; (8011148 <_ZN15Screen1ViewBaseC1Ev+0x12b8>)
 8010fa0:	4a6a      	ldr	r2, [pc, #424]	; (801114c <_ZN15Screen1ViewBaseC1Ev+0x12bc>)
 8010fa2:	21ae      	movs	r1, #174	; 0xae
 8010fa4:	486a      	ldr	r0, [pc, #424]	; (8011150 <_ZN15Screen1ViewBaseC1Ev+0x12c0>)
 8010fa6:	f01b fb59 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010faa:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	889a      	ldrh	r2, [r3, #4]
 8010fb2:	4b68      	ldr	r3, [pc, #416]	; (8011154 <_ZN15Screen1ViewBaseC1Ev+0x12c4>)
 8010fb4:	881b      	ldrh	r3, [r3, #0]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d305      	bcc.n	8010fc6 <_ZN15Screen1ViewBaseC1Ev+0x1136>
 8010fba:	4b67      	ldr	r3, [pc, #412]	; (8011158 <_ZN15Screen1ViewBaseC1Ev+0x12c8>)
 8010fbc:	4a63      	ldr	r2, [pc, #396]	; (801114c <_ZN15Screen1ViewBaseC1Ev+0x12bc>)
 8010fbe:	21af      	movs	r1, #175	; 0xaf
 8010fc0:	4863      	ldr	r0, [pc, #396]	; (8011150 <_ZN15Screen1ViewBaseC1Ev+0x12c0>)
 8010fc2:	f01b fb4b 	bl	802c65c <__assert_func>
    }
 8010fc6:	bf00      	nop
        return texts->getText(typedTextId);
 8010fc8:	4b5c      	ldr	r3, [pc, #368]	; (801113c <_ZN15Screen1ViewBaseC1Ev+0x12ac>)
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010fd0:	889b      	ldrh	r3, [r3, #4]
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	4610      	mov	r0, r2
 8010fd6:	f002 f887 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	bf00      	nop
 8010fde:	4a58      	ldr	r2, [pc, #352]	; (8011140 <_ZN15Screen1ViewBaseC1Ev+0x12b0>)
 8010fe0:	210a      	movs	r1, #10
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f00c ff24 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fd fc13 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    tps_label.setWildcard(tps_labelBuffer);
 8010ff2:	1d3b      	adds	r3, r7, #4
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8010ffa:	1d3b      	adds	r3, r7, #4
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011002:	4619      	mov	r1, r3
 8011004:	4610      	mov	r0, r2
 8011006:	f7fe fe15 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_label.resizeToCurrentText();
 801100a:	1d3b      	adds	r3, r7, #4
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8011012:	4618      	mov	r0, r3
 8011014:	f007 fcf8 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011018:	1d3b      	adds	r3, r7, #4
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8011020:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011024:	210f      	movs	r1, #15
 8011026:	4618      	mov	r0, r3
 8011028:	f7fe fd76 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801102c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011030:	4619      	mov	r1, r3
 8011032:	4620      	mov	r0, r4
 8011034:	f007 fd05 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011038:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801103c:	4618      	mov	r0, r3
 801103e:	f7fd fbeb 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    tps_units.setXY(638, 317);
 8011042:	1d3b      	adds	r3, r7, #4
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 801104a:	f240 123d 	movw	r2, #317	; 0x13d
 801104e:	f240 217e 	movw	r1, #638	; 0x27e
 8011052:	4618      	mov	r0, r3
 8011054:	f7fe fb54 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    tps_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011058:	1d3b      	adds	r3, r7, #4
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 8011060:	f207 334b 	addw	r3, r7, #843	; 0x34b
 8011064:	22ff      	movs	r2, #255	; 0xff
 8011066:	701a      	strb	r2, [r3, #0]
 8011068:	f207 334a 	addw	r3, r7, #842	; 0x34a
 801106c:	22ff      	movs	r2, #255	; 0xff
 801106e:	701a      	strb	r2, [r3, #0]
 8011070:	f207 3349 	addw	r3, r7, #841	; 0x349
 8011074:	22ff      	movs	r2, #255	; 0xff
 8011076:	701a      	strb	r2, [r3, #0]
 8011078:	f207 334b 	addw	r3, r7, #843	; 0x34b
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	041b      	lsls	r3, r3, #16
 8011080:	461a      	mov	r2, r3
 8011082:	f207 334a 	addw	r3, r7, #842	; 0x34a
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	021b      	lsls	r3, r3, #8
 801108a:	431a      	orrs	r2, r3
 801108c:	f207 3349 	addw	r3, r7, #841	; 0x349
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	4313      	orrs	r3, r2
 8011094:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011098:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801109c:	4611      	mov	r1, r2
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fe fa5e 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 80110a4:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	461a      	mov	r2, r3
 80110ac:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80110b0:	601c      	str	r4, [r3, #0]
 80110b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80110b6:	601a      	str	r2, [r3, #0]
        this->color = color;
 80110b8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80110c2:	6812      	ldr	r2, [r2, #0]
 80110c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80110c6:	bf00      	nop
    tps_units.setLinespacing(0);
 80110c8:	1d3b      	adds	r3, r7, #4
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 80110d0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	f207 3352 	addw	r3, r7, #850	; 0x352
 80110da:	2200      	movs	r2, #0
 80110dc:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80110de:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f207 3252 	addw	r2, r7, #850	; 0x352
 80110e8:	8812      	ldrh	r2, [r2, #0]
 80110ea:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80110ec:	bf00      	nop
    Unicode::snprintf(tps_unitsBuffer, TPS_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID50).getText());
 80110ee:	1d3b      	adds	r3, r7, #4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	f603 3414 	addw	r4, r3, #2836	; 0xb14
 80110f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110fa:	2124      	movs	r1, #36	; 0x24
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fe fd0b 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011102:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8011106:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801110a:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801110c:	4b0d      	ldr	r3, [pc, #52]	; (8011144 <_ZN15Screen1ViewBaseC1Ev+0x12b4>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d105      	bne.n	8011120 <_ZN15Screen1ViewBaseC1Ev+0x1290>
 8011114:	4b0c      	ldr	r3, [pc, #48]	; (8011148 <_ZN15Screen1ViewBaseC1Ev+0x12b8>)
 8011116:	4a0d      	ldr	r2, [pc, #52]	; (801114c <_ZN15Screen1ViewBaseC1Ev+0x12bc>)
 8011118:	21ae      	movs	r1, #174	; 0xae
 801111a:	480d      	ldr	r0, [pc, #52]	; (8011150 <_ZN15Screen1ViewBaseC1Ev+0x12c0>)
 801111c:	f01b fa9e 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011120:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	889a      	ldrh	r2, [r3, #4]
 8011128:	4b0a      	ldr	r3, [pc, #40]	; (8011154 <_ZN15Screen1ViewBaseC1Ev+0x12c4>)
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	429a      	cmp	r2, r3
 801112e:	d315      	bcc.n	801115c <_ZN15Screen1ViewBaseC1Ev+0x12cc>
 8011130:	4b09      	ldr	r3, [pc, #36]	; (8011158 <_ZN15Screen1ViewBaseC1Ev+0x12c8>)
 8011132:	4a06      	ldr	r2, [pc, #24]	; (801114c <_ZN15Screen1ViewBaseC1Ev+0x12bc>)
 8011134:	21af      	movs	r1, #175	; 0xaf
 8011136:	4806      	ldr	r0, [pc, #24]	; (8011150 <_ZN15Screen1ViewBaseC1Ev+0x12c0>)
 8011138:	f01b fa90 	bl	802c65c <__assert_func>
 801113c:	2000675c 	.word	0x2000675c
 8011140:	0802e334 	.word	0x0802e334
 8011144:	20006750 	.word	0x20006750
 8011148:	0802e228 	.word	0x0802e228
 801114c:	0802e26c 	.word	0x0802e26c
 8011150:	0802e29c 	.word	0x0802e29c
 8011154:	20006754 	.word	0x20006754
 8011158:	0802e2e0 	.word	0x0802e2e0
    }
 801115c:	bf00      	nop
        return texts->getText(typedTextId);
 801115e:	4bba      	ldr	r3, [pc, #744]	; (8011448 <_ZN15Screen1ViewBaseC1Ev+0x15b8>)
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011166:	889b      	ldrh	r3, [r3, #4]
 8011168:	4619      	mov	r1, r3
 801116a:	4610      	mov	r0, r2
 801116c:	f001 ffbc 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8011170:	4603      	mov	r3, r0
 8011172:	bf00      	nop
 8011174:	4ab5      	ldr	r2, [pc, #724]	; (801144c <_ZN15Screen1ViewBaseC1Ev+0x15bc>)
 8011176:	210a      	movs	r1, #10
 8011178:	4620      	mov	r0, r4
 801117a:	f00c fe59 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801117e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011182:	4618      	mov	r0, r3
 8011184:	f7fd fb48 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    tps_units.setWildcard(tps_unitsBuffer);
 8011188:	1d3b      	adds	r3, r7, #4
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 8011190:	1d3b      	adds	r3, r7, #4
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8011198:	4619      	mov	r1, r3
 801119a:	4610      	mov	r0, r2
 801119c:	f7fe fd4a 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_units.resizeToCurrentText();
 80111a0:	1d3b      	adds	r3, r7, #4
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80111a8:	4618      	mov	r0, r3
 80111aa:	f007 fc2d 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80111ae:	1d3b      	adds	r3, r7, #4
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 80111b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80111ba:	2110      	movs	r1, #16
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fe fcab 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80111c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80111c6:	4619      	mov	r1, r3
 80111c8:	4620      	mov	r0, r4
 80111ca:	f007 fc3a 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80111ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fd fb20 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_value.setXY(747, 370);
 80111d8:	1d3b      	adds	r3, r7, #4
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80111e0:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80111e4:	f240 21eb 	movw	r1, #747	; 0x2eb
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fe fa89 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80111ee:	1d3b      	adds	r3, r7, #4
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80111f6:	f207 335f 	addw	r3, r7, #863	; 0x35f
 80111fa:	22ff      	movs	r2, #255	; 0xff
 80111fc:	701a      	strb	r2, [r3, #0]
 80111fe:	f207 335e 	addw	r3, r7, #862	; 0x35e
 8011202:	22ff      	movs	r2, #255	; 0xff
 8011204:	701a      	strb	r2, [r3, #0]
 8011206:	f207 335d 	addw	r3, r7, #861	; 0x35d
 801120a:	22ff      	movs	r2, #255	; 0xff
 801120c:	701a      	strb	r2, [r3, #0]
 801120e:	f207 335f 	addw	r3, r7, #863	; 0x35f
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	041b      	lsls	r3, r3, #16
 8011216:	461a      	mov	r2, r3
 8011218:	f207 335e 	addw	r3, r7, #862	; 0x35e
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	021b      	lsls	r3, r3, #8
 8011220:	431a      	orrs	r2, r3
 8011222:	f207 335d 	addw	r3, r7, #861	; 0x35d
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	4313      	orrs	r3, r2
 801122a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801122e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8011232:	4611      	mov	r1, r2
 8011234:	4618      	mov	r0, r3
 8011236:	f7fe f993 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 801123a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	461a      	mov	r2, r3
 8011242:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8011246:	601c      	str	r4, [r3, #0]
 8011248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801124c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801124e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011258:	6812      	ldr	r2, [r2, #0]
 801125a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801125c:	bf00      	nop
    lambda_value.setLinespacing(0);
 801125e:	1d3b      	adds	r3, r7, #4
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8011266:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801126a:	601a      	str	r2, [r3, #0]
 801126c:	f207 3366 	addw	r3, r7, #870	; 0x366
 8011270:	2200      	movs	r2, #0
 8011272:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011274:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f207 3266 	addw	r2, r7, #870	; 0x366
 801127e:	8812      	ldrh	r2, [r2, #0]
 8011280:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011282:	bf00      	nop
    Unicode::snprintf(lambda_valueBuffer, LAMBDA_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011284:	1d3b      	adds	r3, r7, #4
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f603 3428 	addw	r4, r3, #2856	; 0xb28
 801128c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8011290:	2121      	movs	r1, #33	; 0x21
 8011292:	4618      	mov	r0, r3
 8011294:	f7fe fc40 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011298:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 801129c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80112a0:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80112a2:	4b6b      	ldr	r3, [pc, #428]	; (8011450 <_ZN15Screen1ViewBaseC1Ev+0x15c0>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d105      	bne.n	80112b6 <_ZN15Screen1ViewBaseC1Ev+0x1426>
 80112aa:	4b6a      	ldr	r3, [pc, #424]	; (8011454 <_ZN15Screen1ViewBaseC1Ev+0x15c4>)
 80112ac:	4a6a      	ldr	r2, [pc, #424]	; (8011458 <_ZN15Screen1ViewBaseC1Ev+0x15c8>)
 80112ae:	21ae      	movs	r1, #174	; 0xae
 80112b0:	486a      	ldr	r0, [pc, #424]	; (801145c <_ZN15Screen1ViewBaseC1Ev+0x15cc>)
 80112b2:	f01b f9d3 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80112b6:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	889a      	ldrh	r2, [r3, #4]
 80112be:	4b68      	ldr	r3, [pc, #416]	; (8011460 <_ZN15Screen1ViewBaseC1Ev+0x15d0>)
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d305      	bcc.n	80112d2 <_ZN15Screen1ViewBaseC1Ev+0x1442>
 80112c6:	4b67      	ldr	r3, [pc, #412]	; (8011464 <_ZN15Screen1ViewBaseC1Ev+0x15d4>)
 80112c8:	4a63      	ldr	r2, [pc, #396]	; (8011458 <_ZN15Screen1ViewBaseC1Ev+0x15c8>)
 80112ca:	21af      	movs	r1, #175	; 0xaf
 80112cc:	4863      	ldr	r0, [pc, #396]	; (801145c <_ZN15Screen1ViewBaseC1Ev+0x15cc>)
 80112ce:	f01b f9c5 	bl	802c65c <__assert_func>
    }
 80112d2:	bf00      	nop
        return texts->getText(typedTextId);
 80112d4:	4b5c      	ldr	r3, [pc, #368]	; (8011448 <_ZN15Screen1ViewBaseC1Ev+0x15b8>)
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80112dc:	889b      	ldrh	r3, [r3, #4]
 80112de:	4619      	mov	r1, r3
 80112e0:	4610      	mov	r0, r2
 80112e2:	f001 ff01 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80112e6:	4603      	mov	r3, r0
 80112e8:	bf00      	nop
 80112ea:	4a58      	ldr	r2, [pc, #352]	; (801144c <_ZN15Screen1ViewBaseC1Ev+0x15bc>)
 80112ec:	2120      	movs	r1, #32
 80112ee:	4620      	mov	r0, r4
 80112f0:	f00c fd9e 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80112f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7fd fa8d 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_value.setWildcard(lambda_valueBuffer);
 80112fe:	1d3b      	adds	r3, r7, #4
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8011306:	1d3b      	adds	r3, r7, #4
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 801130e:	4619      	mov	r1, r3
 8011310:	4610      	mov	r0, r2
 8011312:	f7fe fc8f 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_value.resizeToCurrentText();
 8011316:	1d3b      	adds	r3, r7, #4
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801131e:	4618      	mov	r0, r3
 8011320:	f007 fb72 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8011324:	1d3b      	adds	r3, r7, #4
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 801132c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011330:	210e      	movs	r1, #14
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fbf0 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011338:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801133c:	4619      	mov	r1, r3
 801133e:	4620      	mov	r0, r4
 8011340:	f007 fb7f 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011344:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011348:	4618      	mov	r0, r3
 801134a:	f7fd fa65 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_label.setXY(687, 435);
 801134e:	1d3b      	adds	r3, r7, #4
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8011356:	f240 12b3 	movw	r2, #435	; 0x1b3
 801135a:	f240 21af 	movw	r1, #687	; 0x2af
 801135e:	4618      	mov	r0, r3
 8011360:	f7fe f9ce 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011364:	1d3b      	adds	r3, r7, #4
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 801136c:	f207 3373 	addw	r3, r7, #883	; 0x373
 8011370:	22ff      	movs	r2, #255	; 0xff
 8011372:	701a      	strb	r2, [r3, #0]
 8011374:	f207 3372 	addw	r3, r7, #882	; 0x372
 8011378:	22ff      	movs	r2, #255	; 0xff
 801137a:	701a      	strb	r2, [r3, #0]
 801137c:	f207 3371 	addw	r3, r7, #881	; 0x371
 8011380:	22ff      	movs	r2, #255	; 0xff
 8011382:	701a      	strb	r2, [r3, #0]
 8011384:	f207 3373 	addw	r3, r7, #883	; 0x373
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	041b      	lsls	r3, r3, #16
 801138c:	461a      	mov	r2, r3
 801138e:	f207 3372 	addw	r3, r7, #882	; 0x372
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	021b      	lsls	r3, r3, #8
 8011396:	431a      	orrs	r2, r3
 8011398:	f207 3371 	addw	r3, r7, #881	; 0x371
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	4313      	orrs	r3, r2
 80113a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80113a4:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80113a8:	4611      	mov	r1, r2
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe f8d8 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 80113b0:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	461a      	mov	r2, r3
 80113b8:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80113bc:	601c      	str	r4, [r3, #0]
 80113be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80113c2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80113c4:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80113ce:	6812      	ldr	r2, [r2, #0]
 80113d0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80113d2:	bf00      	nop
    lambda_label.setLinespacing(0);
 80113d4:	1d3b      	adds	r3, r7, #4
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f503 629a 	add.w	r2, r3, #1232	; 0x4d0
 80113dc:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	f207 337a 	addw	r3, r7, #890	; 0x37a
 80113e6:	2200      	movs	r2, #0
 80113e8:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80113ea:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f207 327a 	addw	r2, r7, #890	; 0x37a
 80113f4:	8812      	ldrh	r2, [r2, #0]
 80113f6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80113f8:	bf00      	nop
    Unicode::snprintf(lambda_labelBuffer, LAMBDA_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID53).getText());
 80113fa:	1d3b      	adds	r3, r7, #4
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f603 3468 	addw	r4, r3, #2920	; 0xb68
 8011402:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011406:	2127      	movs	r1, #39	; 0x27
 8011408:	4618      	mov	r0, r3
 801140a:	f7fe fb85 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801140e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8011412:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8011416:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011418:	4b0d      	ldr	r3, [pc, #52]	; (8011450 <_ZN15Screen1ViewBaseC1Ev+0x15c0>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d105      	bne.n	801142c <_ZN15Screen1ViewBaseC1Ev+0x159c>
 8011420:	4b0c      	ldr	r3, [pc, #48]	; (8011454 <_ZN15Screen1ViewBaseC1Ev+0x15c4>)
 8011422:	4a0d      	ldr	r2, [pc, #52]	; (8011458 <_ZN15Screen1ViewBaseC1Ev+0x15c8>)
 8011424:	21ae      	movs	r1, #174	; 0xae
 8011426:	480d      	ldr	r0, [pc, #52]	; (801145c <_ZN15Screen1ViewBaseC1Ev+0x15cc>)
 8011428:	f01b f918 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801142c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	889a      	ldrh	r2, [r3, #4]
 8011434:	4b0a      	ldr	r3, [pc, #40]	; (8011460 <_ZN15Screen1ViewBaseC1Ev+0x15d0>)
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	429a      	cmp	r2, r3
 801143a:	d315      	bcc.n	8011468 <_ZN15Screen1ViewBaseC1Ev+0x15d8>
 801143c:	4b09      	ldr	r3, [pc, #36]	; (8011464 <_ZN15Screen1ViewBaseC1Ev+0x15d4>)
 801143e:	4a06      	ldr	r2, [pc, #24]	; (8011458 <_ZN15Screen1ViewBaseC1Ev+0x15c8>)
 8011440:	21af      	movs	r1, #175	; 0xaf
 8011442:	4806      	ldr	r0, [pc, #24]	; (801145c <_ZN15Screen1ViewBaseC1Ev+0x15cc>)
 8011444:	f01b f90a 	bl	802c65c <__assert_func>
 8011448:	2000675c 	.word	0x2000675c
 801144c:	0802e334 	.word	0x0802e334
 8011450:	20006750 	.word	0x20006750
 8011454:	0802e228 	.word	0x0802e228
 8011458:	0802e26c 	.word	0x0802e26c
 801145c:	0802e29c 	.word	0x0802e29c
 8011460:	20006754 	.word	0x20006754
 8011464:	0802e2e0 	.word	0x0802e2e0
    }
 8011468:	bf00      	nop
        return texts->getText(typedTextId);
 801146a:	4baf      	ldr	r3, [pc, #700]	; (8011728 <_ZN15Screen1ViewBaseC1Ev+0x1898>)
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011472:	889b      	ldrh	r3, [r3, #4]
 8011474:	4619      	mov	r1, r3
 8011476:	4610      	mov	r0, r2
 8011478:	f001 fe36 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 801147c:	4603      	mov	r3, r0
 801147e:	bf00      	nop
 8011480:	4aaa      	ldr	r2, [pc, #680]	; (801172c <_ZN15Screen1ViewBaseC1Ev+0x189c>)
 8011482:	210a      	movs	r1, #10
 8011484:	4620      	mov	r0, r4
 8011486:	f00c fcd3 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801148a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801148e:	4618      	mov	r0, r3
 8011490:	f7fd f9c2 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_label.setWildcard(lambda_labelBuffer);
 8011494:	1d3b      	adds	r3, r7, #4
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f503 629a 	add.w	r2, r3, #1232	; 0x4d0
 801149c:	1d3b      	adds	r3, r7, #4
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 80114a4:	4619      	mov	r1, r3
 80114a6:	4610      	mov	r0, r2
 80114a8:	f7fe fbc4 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_label.resizeToCurrentText();
 80114ac:	1d3b      	adds	r3, r7, #4
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80114b4:	4618      	mov	r0, r3
 80114b6:	f007 faa7 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80114ba:	1d3b      	adds	r3, r7, #4
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 80114c2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80114c6:	210d      	movs	r1, #13
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe fb25 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80114ce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80114d2:	4619      	mov	r1, r3
 80114d4:	4620      	mov	r0, r4
 80114d6:	f007 fab4 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80114da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fd f99a 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_units.setXY(536, 435);
 80114e4:	1d3b      	adds	r3, r7, #4
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80114ec:	f240 12b3 	movw	r2, #435	; 0x1b3
 80114f0:	f44f 7106 	mov.w	r1, #536	; 0x218
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fe f903 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80114fa:	1d3b      	adds	r3, r7, #4
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 8011502:	f207 3387 	addw	r3, r7, #903	; 0x387
 8011506:	22ff      	movs	r2, #255	; 0xff
 8011508:	701a      	strb	r2, [r3, #0]
 801150a:	f207 3386 	addw	r3, r7, #902	; 0x386
 801150e:	22ff      	movs	r2, #255	; 0xff
 8011510:	701a      	strb	r2, [r3, #0]
 8011512:	f207 3385 	addw	r3, r7, #901	; 0x385
 8011516:	22ff      	movs	r2, #255	; 0xff
 8011518:	701a      	strb	r2, [r3, #0]
 801151a:	f207 3387 	addw	r3, r7, #903	; 0x387
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	041b      	lsls	r3, r3, #16
 8011522:	461a      	mov	r2, r3
 8011524:	f207 3386 	addw	r3, r7, #902	; 0x386
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	021b      	lsls	r3, r3, #8
 801152c:	431a      	orrs	r2, r3
 801152e:	f207 3385 	addw	r3, r7, #901	; 0x385
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	4313      	orrs	r3, r2
 8011536:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801153a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801153e:	4611      	mov	r1, r2
 8011540:	4618      	mov	r0, r3
 8011542:	f7fe f80d 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8011546:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011552:	601c      	str	r4, [r3, #0]
 8011554:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011558:	601a      	str	r2, [r3, #0]
        this->color = color;
 801155a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011564:	6812      	ldr	r2, [r2, #0]
 8011566:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011568:	bf00      	nop
    lambda_units.setLinespacing(0);
 801156a:	1d3b      	adds	r3, r7, #4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8011572:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8011576:	2300      	movs	r3, #0
 8011578:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
        linespace = space;
 801157c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8011580:	f8b7 238e 	ldrh.w	r2, [r7, #910]	; 0x38e
 8011584:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011586:	bf00      	nop
    Unicode::snprintf(lambda_unitsBuffer, LAMBDA_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID52).getText());
 8011588:	1d3b      	adds	r3, r7, #4
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f603 347c 	addw	r4, r3, #2940	; 0xb7c
 8011590:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011594:	2126      	movs	r1, #38	; 0x26
 8011596:	4618      	mov	r0, r3
 8011598:	f7fe fabe 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801159c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80115a0:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80115a4:	4b62      	ldr	r3, [pc, #392]	; (8011730 <_ZN15Screen1ViewBaseC1Ev+0x18a0>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d105      	bne.n	80115b8 <_ZN15Screen1ViewBaseC1Ev+0x1728>
 80115ac:	4b61      	ldr	r3, [pc, #388]	; (8011734 <_ZN15Screen1ViewBaseC1Ev+0x18a4>)
 80115ae:	4a62      	ldr	r2, [pc, #392]	; (8011738 <_ZN15Screen1ViewBaseC1Ev+0x18a8>)
 80115b0:	21ae      	movs	r1, #174	; 0xae
 80115b2:	4862      	ldr	r0, [pc, #392]	; (801173c <_ZN15Screen1ViewBaseC1Ev+0x18ac>)
 80115b4:	f01b f852 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80115b8:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80115bc:	889a      	ldrh	r2, [r3, #4]
 80115be:	4b60      	ldr	r3, [pc, #384]	; (8011740 <_ZN15Screen1ViewBaseC1Ev+0x18b0>)
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d305      	bcc.n	80115d2 <_ZN15Screen1ViewBaseC1Ev+0x1742>
 80115c6:	4b5f      	ldr	r3, [pc, #380]	; (8011744 <_ZN15Screen1ViewBaseC1Ev+0x18b4>)
 80115c8:	4a5b      	ldr	r2, [pc, #364]	; (8011738 <_ZN15Screen1ViewBaseC1Ev+0x18a8>)
 80115ca:	21af      	movs	r1, #175	; 0xaf
 80115cc:	485b      	ldr	r0, [pc, #364]	; (801173c <_ZN15Screen1ViewBaseC1Ev+0x18ac>)
 80115ce:	f01b f845 	bl	802c65c <__assert_func>
    }
 80115d2:	bf00      	nop
        return texts->getText(typedTextId);
 80115d4:	4b54      	ldr	r3, [pc, #336]	; (8011728 <_ZN15Screen1ViewBaseC1Ev+0x1898>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80115dc:	889b      	ldrh	r3, [r3, #4]
 80115de:	4619      	mov	r1, r3
 80115e0:	4610      	mov	r0, r2
 80115e2:	f001 fd81 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80115e6:	4603      	mov	r3, r0
 80115e8:	bf00      	nop
 80115ea:	4a50      	ldr	r2, [pc, #320]	; (801172c <_ZN15Screen1ViewBaseC1Ev+0x189c>)
 80115ec:	210a      	movs	r1, #10
 80115ee:	4620      	mov	r0, r4
 80115f0:	f00c fc1e 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80115f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fd f90d 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_units.setWildcard(lambda_unitsBuffer);
 80115fe:	1d3b      	adds	r3, r7, #4
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8011606:	1d3b      	adds	r3, r7, #4
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 801160e:	4619      	mov	r1, r3
 8011610:	4610      	mov	r0, r2
 8011612:	f7fe fb0f 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_units.resizeToCurrentText();
 8011616:	1d3b      	adds	r3, r7, #4
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 801161e:	4618      	mov	r0, r3
 8011620:	f007 f9f2 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011624:	1d3b      	adds	r3, r7, #4
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 801162c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8011630:	210c      	movs	r1, #12
 8011632:	4618      	mov	r0, r3
 8011634:	f7fe fa70 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011638:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801163c:	4619      	mov	r1, r3
 801163e:	4620      	mov	r0, r4
 8011640:	f007 f9ff 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011644:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8011648:	4618      	mov	r0, r3
 801164a:	f7fd f8e5 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    ect_value.setXY(24, 16);
 801164e:	1d3b      	adds	r3, r7, #4
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8011656:	2210      	movs	r2, #16
 8011658:	2118      	movs	r1, #24
 801165a:	4618      	mov	r0, r3
 801165c:	f7fe f850 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    ect_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011660:	1d3b      	adds	r3, r7, #4
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f503 64aa 	add.w	r4, r3, #1360	; 0x550
 8011668:	23ff      	movs	r3, #255	; 0xff
 801166a:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
 801166e:	23ff      	movs	r3, #255	; 0xff
 8011670:	f887 339a 	strb.w	r3, [r7, #922]	; 0x39a
 8011674:	23ff      	movs	r3, #255	; 0xff
 8011676:	f887 3399 	strb.w	r3, [r7, #921]	; 0x399
 801167a:	f897 339b 	ldrb.w	r3, [r7, #923]	; 0x39b
 801167e:	041b      	lsls	r3, r3, #16
 8011680:	461a      	mov	r2, r3
 8011682:	f897 339a 	ldrb.w	r3, [r7, #922]	; 0x39a
 8011686:	021b      	lsls	r3, r3, #8
 8011688:	431a      	orrs	r2, r3
 801168a:	f897 3399 	ldrb.w	r3, [r7, #921]	; 0x399
 801168e:	4313      	orrs	r3, r2
 8011690:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011694:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8011698:	4611      	mov	r1, r2
 801169a:	4618      	mov	r0, r3
 801169c:	f7fd ff60 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 80116a0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	461a      	mov	r2, r3
 80116a8:	f8c7 439c 	str.w	r4, [r7, #924]	; 0x39c
 80116ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80116b0:	601a      	str	r2, [r3, #0]
        this->color = color;
 80116b2:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80116b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80116ba:	6812      	ldr	r2, [r2, #0]
 80116bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80116be:	bf00      	nop
    ect_value.setLinespacing(0);
 80116c0:	1d3b      	adds	r3, r7, #4
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80116c8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80116cc:	2300      	movs	r3, #0
 80116ce:	f8a7 33a2 	strh.w	r3, [r7, #930]	; 0x3a2
        linespace = space;
 80116d2:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80116d6:	f8b7 23a2 	ldrh.w	r2, [r7, #930]	; 0x3a2
 80116da:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80116dc:	bf00      	nop
    Unicode::snprintf(ect_valueBuffer, ECT_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID41).getText());
 80116de:	1d3b      	adds	r3, r7, #4
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 80116e6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80116ea:	211b      	movs	r1, #27
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7fe fa13 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80116f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80116f6:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80116fa:	4b0d      	ldr	r3, [pc, #52]	; (8011730 <_ZN15Screen1ViewBaseC1Ev+0x18a0>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d105      	bne.n	801170e <_ZN15Screen1ViewBaseC1Ev+0x187e>
 8011702:	4b0c      	ldr	r3, [pc, #48]	; (8011734 <_ZN15Screen1ViewBaseC1Ev+0x18a4>)
 8011704:	4a0c      	ldr	r2, [pc, #48]	; (8011738 <_ZN15Screen1ViewBaseC1Ev+0x18a8>)
 8011706:	21ae      	movs	r1, #174	; 0xae
 8011708:	480c      	ldr	r0, [pc, #48]	; (801173c <_ZN15Screen1ViewBaseC1Ev+0x18ac>)
 801170a:	f01a ffa7 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801170e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8011712:	889a      	ldrh	r2, [r3, #4]
 8011714:	4b0a      	ldr	r3, [pc, #40]	; (8011740 <_ZN15Screen1ViewBaseC1Ev+0x18b0>)
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	429a      	cmp	r2, r3
 801171a:	d315      	bcc.n	8011748 <_ZN15Screen1ViewBaseC1Ev+0x18b8>
 801171c:	4b09      	ldr	r3, [pc, #36]	; (8011744 <_ZN15Screen1ViewBaseC1Ev+0x18b4>)
 801171e:	4a06      	ldr	r2, [pc, #24]	; (8011738 <_ZN15Screen1ViewBaseC1Ev+0x18a8>)
 8011720:	21af      	movs	r1, #175	; 0xaf
 8011722:	4806      	ldr	r0, [pc, #24]	; (801173c <_ZN15Screen1ViewBaseC1Ev+0x18ac>)
 8011724:	f01a ff9a 	bl	802c65c <__assert_func>
 8011728:	2000675c 	.word	0x2000675c
 801172c:	0802e334 	.word	0x0802e334
 8011730:	20006750 	.word	0x20006750
 8011734:	0802e228 	.word	0x0802e228
 8011738:	0802e26c 	.word	0x0802e26c
 801173c:	0802e29c 	.word	0x0802e29c
 8011740:	20006754 	.word	0x20006754
 8011744:	0802e2e0 	.word	0x0802e2e0
    }
 8011748:	bf00      	nop
        return texts->getText(typedTextId);
 801174a:	4baa      	ldr	r3, [pc, #680]	; (80119f4 <_ZN15Screen1ViewBaseC1Ev+0x1b64>)
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8011752:	889b      	ldrh	r3, [r3, #4]
 8011754:	4619      	mov	r1, r3
 8011756:	4610      	mov	r0, r2
 8011758:	f001 fcc6 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 801175c:	4603      	mov	r3, r0
 801175e:	bf00      	nop
 8011760:	4aa5      	ldr	r2, [pc, #660]	; (80119f8 <_ZN15Screen1ViewBaseC1Ev+0x1b68>)
 8011762:	2120      	movs	r1, #32
 8011764:	4620      	mov	r0, r4
 8011766:	f00c fb63 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801176a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801176e:	4618      	mov	r0, r3
 8011770:	f7fd f852 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    ect_value.setWildcard(ect_valueBuffer);
 8011774:	1d3b      	adds	r3, r7, #4
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f503 62aa 	add.w	r2, r3, #1360	; 0x550
 801177c:	1d3b      	adds	r3, r7, #4
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8011784:	4619      	mov	r1, r3
 8011786:	4610      	mov	r0, r2
 8011788:	f7fe fa54 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_value.resizeToCurrentText();
 801178c:	1d3b      	adds	r3, r7, #4
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8011794:	4618      	mov	r0, r3
 8011796:	f007 f937 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 801179a:	1d3b      	adds	r3, r7, #4
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f503 64aa 	add.w	r4, r3, #1360	; 0x550
 80117a2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80117a6:	2100      	movs	r1, #0
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7fe f9b5 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80117ae:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80117b2:	4619      	mov	r1, r3
 80117b4:	4620      	mov	r0, r4
 80117b6:	f007 f944 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80117ba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fd f82a 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    ect_label.setXY(28, 80);
 80117c4:	1d3b      	adds	r3, r7, #4
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80117cc:	2250      	movs	r2, #80	; 0x50
 80117ce:	211c      	movs	r1, #28
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fd ff95 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    ect_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80117d6:	1d3b      	adds	r3, r7, #4
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 80117de:	23ff      	movs	r3, #255	; 0xff
 80117e0:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
 80117e4:	23ff      	movs	r3, #255	; 0xff
 80117e6:	f887 33ae 	strb.w	r3, [r7, #942]	; 0x3ae
 80117ea:	23ff      	movs	r3, #255	; 0xff
 80117ec:	f887 33ad 	strb.w	r3, [r7, #941]	; 0x3ad
 80117f0:	f897 33af 	ldrb.w	r3, [r7, #943]	; 0x3af
 80117f4:	041b      	lsls	r3, r3, #16
 80117f6:	461a      	mov	r2, r3
 80117f8:	f897 33ae 	ldrb.w	r3, [r7, #942]	; 0x3ae
 80117fc:	021b      	lsls	r3, r3, #8
 80117fe:	431a      	orrs	r2, r3
 8011800:	f897 33ad 	ldrb.w	r3, [r7, #941]	; 0x3ad
 8011804:	4313      	orrs	r3, r2
 8011806:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801180a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801180e:	4611      	mov	r1, r2
 8011810:	4618      	mov	r0, r3
 8011812:	f7fd fea5 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8011816:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	461a      	mov	r2, r3
 801181e:	f8c7 43b0 	str.w	r4, [r7, #944]	; 0x3b0
 8011822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011826:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011828:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 801182c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011830:	6812      	ldr	r2, [r2, #0]
 8011832:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011834:	bf00      	nop
    ect_label.setLinespacing(0);
 8011836:	1d3b      	adds	r3, r7, #4
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 801183e:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8011842:	2300      	movs	r3, #0
 8011844:	f8a7 33b6 	strh.w	r3, [r7, #950]	; 0x3b6
        linespace = space;
 8011848:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 801184c:	f8b7 23b6 	ldrh.w	r2, [r7, #950]	; 0x3b6
 8011850:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011852:	bf00      	nop
    Unicode::snprintf(ect_labelBuffer, ECT_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011854:	1d3b      	adds	r3, r7, #4
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f503 643d 	add.w	r4, r3, #3024	; 0xbd0
 801185c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8011860:	212e      	movs	r1, #46	; 0x2e
 8011862:	4618      	mov	r0, r3
 8011864:	f7fe f958 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011868:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801186c:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011870:	4b62      	ldr	r3, [pc, #392]	; (80119fc <_ZN15Screen1ViewBaseC1Ev+0x1b6c>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d105      	bne.n	8011884 <_ZN15Screen1ViewBaseC1Ev+0x19f4>
 8011878:	4b61      	ldr	r3, [pc, #388]	; (8011a00 <_ZN15Screen1ViewBaseC1Ev+0x1b70>)
 801187a:	4a62      	ldr	r2, [pc, #392]	; (8011a04 <_ZN15Screen1ViewBaseC1Ev+0x1b74>)
 801187c:	21ae      	movs	r1, #174	; 0xae
 801187e:	4862      	ldr	r0, [pc, #392]	; (8011a08 <_ZN15Screen1ViewBaseC1Ev+0x1b78>)
 8011880:	f01a feec 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011884:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8011888:	889a      	ldrh	r2, [r3, #4]
 801188a:	4b60      	ldr	r3, [pc, #384]	; (8011a0c <_ZN15Screen1ViewBaseC1Ev+0x1b7c>)
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	429a      	cmp	r2, r3
 8011890:	d305      	bcc.n	801189e <_ZN15Screen1ViewBaseC1Ev+0x1a0e>
 8011892:	4b5f      	ldr	r3, [pc, #380]	; (8011a10 <_ZN15Screen1ViewBaseC1Ev+0x1b80>)
 8011894:	4a5b      	ldr	r2, [pc, #364]	; (8011a04 <_ZN15Screen1ViewBaseC1Ev+0x1b74>)
 8011896:	21af      	movs	r1, #175	; 0xaf
 8011898:	485b      	ldr	r0, [pc, #364]	; (8011a08 <_ZN15Screen1ViewBaseC1Ev+0x1b78>)
 801189a:	f01a fedf 	bl	802c65c <__assert_func>
    }
 801189e:	bf00      	nop
        return texts->getText(typedTextId);
 80118a0:	4b54      	ldr	r3, [pc, #336]	; (80119f4 <_ZN15Screen1ViewBaseC1Ev+0x1b64>)
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80118a8:	889b      	ldrh	r3, [r3, #4]
 80118aa:	4619      	mov	r1, r3
 80118ac:	4610      	mov	r0, r2
 80118ae:	f001 fc1b 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80118b2:	4603      	mov	r3, r0
 80118b4:	bf00      	nop
 80118b6:	4a50      	ldr	r2, [pc, #320]	; (80119f8 <_ZN15Screen1ViewBaseC1Ev+0x1b68>)
 80118b8:	210a      	movs	r1, #10
 80118ba:	4620      	mov	r0, r4
 80118bc:	f00c fab8 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80118c0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fc ffa7 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    ect_label.setWildcard(ect_labelBuffer);
 80118ca:	1d3b      	adds	r3, r7, #4
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f503 62b2 	add.w	r2, r3, #1424	; 0x590
 80118d2:	1d3b      	adds	r3, r7, #4
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 80118da:	4619      	mov	r1, r3
 80118dc:	4610      	mov	r0, r2
 80118de:	f7fe f9a9 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_label.resizeToCurrentText();
 80118e2:	1d3b      	adds	r3, r7, #4
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80118ea:	4618      	mov	r0, r3
 80118ec:	f007 f88c 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 80118f0:	1d3b      	adds	r3, r7, #4
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 80118f8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80118fc:	2101      	movs	r1, #1
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fe f90a 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011904:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8011908:	4619      	mov	r1, r3
 801190a:	4620      	mov	r0, r4
 801190c:	f007 f899 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011910:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8011914:	4618      	mov	r0, r3
 8011916:	f7fc ff7f 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    ect_units.setXY(131, 82);
 801191a:	1d3b      	adds	r3, r7, #4
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8011922:	2252      	movs	r2, #82	; 0x52
 8011924:	2183      	movs	r1, #131	; 0x83
 8011926:	4618      	mov	r0, r3
 8011928:	f7fd feea 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    ect_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801192c:	1d3b      	adds	r3, r7, #4
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8011934:	23ff      	movs	r3, #255	; 0xff
 8011936:	f887 33c3 	strb.w	r3, [r7, #963]	; 0x3c3
 801193a:	23ff      	movs	r3, #255	; 0xff
 801193c:	f887 33c2 	strb.w	r3, [r7, #962]	; 0x3c2
 8011940:	23ff      	movs	r3, #255	; 0xff
 8011942:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
 8011946:	f897 33c3 	ldrb.w	r3, [r7, #963]	; 0x3c3
 801194a:	041b      	lsls	r3, r3, #16
 801194c:	461a      	mov	r2, r3
 801194e:	f897 33c2 	ldrb.w	r3, [r7, #962]	; 0x3c2
 8011952:	021b      	lsls	r3, r3, #8
 8011954:	431a      	orrs	r2, r3
 8011956:	f897 33c1 	ldrb.w	r3, [r7, #961]	; 0x3c1
 801195a:	4313      	orrs	r3, r2
 801195c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011960:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8011964:	4611      	mov	r1, r2
 8011966:	4618      	mov	r0, r3
 8011968:	f7fd fdfa 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 801196c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	461a      	mov	r2, r3
 8011974:	f8c7 43c4 	str.w	r4, [r7, #964]	; 0x3c4
 8011978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801197c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801197e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8011982:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011986:	6812      	ldr	r2, [r2, #0]
 8011988:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801198a:	bf00      	nop
    ect_units.setLinespacing(0);
 801198c:	1d3b      	adds	r3, r7, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8011994:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8011998:	2300      	movs	r3, #0
 801199a:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        linespace = space;
 801199e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80119a2:	f8b7 23ca 	ldrh.w	r2, [r7, #970]	; 0x3ca
 80119a6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80119a8:	bf00      	nop
    Unicode::snprintf(ect_unitsBuffer, ECT_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 80119aa:	1d3b      	adds	r3, r7, #4
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f603 34e4 	addw	r4, r3, #3044	; 0xbe4
 80119b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80119b6:	212f      	movs	r1, #47	; 0x2f
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fe f8ad 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80119be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80119c2:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80119c6:	4b0d      	ldr	r3, [pc, #52]	; (80119fc <_ZN15Screen1ViewBaseC1Ev+0x1b6c>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d105      	bne.n	80119da <_ZN15Screen1ViewBaseC1Ev+0x1b4a>
 80119ce:	4b0c      	ldr	r3, [pc, #48]	; (8011a00 <_ZN15Screen1ViewBaseC1Ev+0x1b70>)
 80119d0:	4a0c      	ldr	r2, [pc, #48]	; (8011a04 <_ZN15Screen1ViewBaseC1Ev+0x1b74>)
 80119d2:	21ae      	movs	r1, #174	; 0xae
 80119d4:	480c      	ldr	r0, [pc, #48]	; (8011a08 <_ZN15Screen1ViewBaseC1Ev+0x1b78>)
 80119d6:	f01a fe41 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80119da:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80119de:	889a      	ldrh	r2, [r3, #4]
 80119e0:	4b0a      	ldr	r3, [pc, #40]	; (8011a0c <_ZN15Screen1ViewBaseC1Ev+0x1b7c>)
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d315      	bcc.n	8011a14 <_ZN15Screen1ViewBaseC1Ev+0x1b84>
 80119e8:	4b09      	ldr	r3, [pc, #36]	; (8011a10 <_ZN15Screen1ViewBaseC1Ev+0x1b80>)
 80119ea:	4a06      	ldr	r2, [pc, #24]	; (8011a04 <_ZN15Screen1ViewBaseC1Ev+0x1b74>)
 80119ec:	21af      	movs	r1, #175	; 0xaf
 80119ee:	4806      	ldr	r0, [pc, #24]	; (8011a08 <_ZN15Screen1ViewBaseC1Ev+0x1b78>)
 80119f0:	f01a fe34 	bl	802c65c <__assert_func>
 80119f4:	2000675c 	.word	0x2000675c
 80119f8:	0802e334 	.word	0x0802e334
 80119fc:	20006750 	.word	0x20006750
 8011a00:	0802e228 	.word	0x0802e228
 8011a04:	0802e26c 	.word	0x0802e26c
 8011a08:	0802e29c 	.word	0x0802e29c
 8011a0c:	20006754 	.word	0x20006754
 8011a10:	0802e2e0 	.word	0x0802e2e0
    }
 8011a14:	bf00      	nop
        return texts->getText(typedTextId);
 8011a16:	4baa      	ldr	r3, [pc, #680]	; (8011cc0 <_ZN15Screen1ViewBaseC1Ev+0x1e30>)
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011a1e:	889b      	ldrh	r3, [r3, #4]
 8011a20:	4619      	mov	r1, r3
 8011a22:	4610      	mov	r0, r2
 8011a24:	f001 fb60 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	bf00      	nop
 8011a2c:	4aa5      	ldr	r2, [pc, #660]	; (8011cc4 <_ZN15Screen1ViewBaseC1Ev+0x1e34>)
 8011a2e:	210a      	movs	r1, #10
 8011a30:	4620      	mov	r0, r4
 8011a32:	f00c f9fd 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011a36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fc feec 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    ect_units.setWildcard(ect_unitsBuffer);
 8011a40:	1d3b      	adds	r3, r7, #4
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f503 62ba 	add.w	r2, r3, #1488	; 0x5d0
 8011a48:	1d3b      	adds	r3, r7, #4
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f603 33e4 	addw	r3, r3, #3044	; 0xbe4
 8011a50:	4619      	mov	r1, r3
 8011a52:	4610      	mov	r0, r2
 8011a54:	f7fe f8ee 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_units.resizeToCurrentText();
 8011a58:	1d3b      	adds	r3, r7, #4
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8011a60:	4618      	mov	r0, r3
 8011a62:	f006 ffd1 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8011a66:	1d3b      	adds	r3, r7, #4
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8011a6e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8011a72:	2102      	movs	r1, #2
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe f84f 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011a7a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8011a7e:	4619      	mov	r1, r3
 8011a80:	4620      	mov	r0, r4
 8011a82:	f006 ffde 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011a86:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fc fec4 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    iat_value.setXY(25, 132);
 8011a90:	1d3b      	adds	r3, r7, #4
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8011a98:	2284      	movs	r2, #132	; 0x84
 8011a9a:	2119      	movs	r1, #25
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fd fe2f 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    iat_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011aa2:	1d3b      	adds	r3, r7, #4
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f503 64c2 	add.w	r4, r3, #1552	; 0x610
 8011aaa:	23ff      	movs	r3, #255	; 0xff
 8011aac:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
 8011ab0:	23ff      	movs	r3, #255	; 0xff
 8011ab2:	f887 33d6 	strb.w	r3, [r7, #982]	; 0x3d6
 8011ab6:	23ff      	movs	r3, #255	; 0xff
 8011ab8:	f887 33d5 	strb.w	r3, [r7, #981]	; 0x3d5
 8011abc:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8011ac0:	041b      	lsls	r3, r3, #16
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	f897 33d6 	ldrb.w	r3, [r7, #982]	; 0x3d6
 8011ac8:	021b      	lsls	r3, r3, #8
 8011aca:	431a      	orrs	r2, r3
 8011acc:	f897 33d5 	ldrb.w	r3, [r7, #981]	; 0x3d5
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011ad6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8011ada:	4611      	mov	r1, r2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fd fd3f 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8011ae2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 8011aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011af2:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011af4:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8011af8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011afc:	6812      	ldr	r2, [r2, #0]
 8011afe:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011b00:	bf00      	nop
    iat_value.setLinespacing(0);
 8011b02:	1d3b      	adds	r3, r7, #4
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8011b0a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8011b0e:	2300      	movs	r3, #0
 8011b10:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
        linespace = space;
 8011b14:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8011b18:	f8b7 23de 	ldrh.w	r2, [r7, #990]	; 0x3de
 8011b1c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011b1e:	bf00      	nop
    Unicode::snprintf(iat_valueBuffer, IAT_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID42).getText());
 8011b20:	1d3b      	adds	r3, r7, #4
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f603 34f8 	addw	r4, r3, #3064	; 0xbf8
 8011b28:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8011b2c:	211c      	movs	r1, #28
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fd fff2 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011b34:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8011b38:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011b3c:	4b62      	ldr	r3, [pc, #392]	; (8011cc8 <_ZN15Screen1ViewBaseC1Ev+0x1e38>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d105      	bne.n	8011b50 <_ZN15Screen1ViewBaseC1Ev+0x1cc0>
 8011b44:	4b61      	ldr	r3, [pc, #388]	; (8011ccc <_ZN15Screen1ViewBaseC1Ev+0x1e3c>)
 8011b46:	4a62      	ldr	r2, [pc, #392]	; (8011cd0 <_ZN15Screen1ViewBaseC1Ev+0x1e40>)
 8011b48:	21ae      	movs	r1, #174	; 0xae
 8011b4a:	4862      	ldr	r0, [pc, #392]	; (8011cd4 <_ZN15Screen1ViewBaseC1Ev+0x1e44>)
 8011b4c:	f01a fd86 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011b50:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8011b54:	889a      	ldrh	r2, [r3, #4]
 8011b56:	4b60      	ldr	r3, [pc, #384]	; (8011cd8 <_ZN15Screen1ViewBaseC1Ev+0x1e48>)
 8011b58:	881b      	ldrh	r3, [r3, #0]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d305      	bcc.n	8011b6a <_ZN15Screen1ViewBaseC1Ev+0x1cda>
 8011b5e:	4b5f      	ldr	r3, [pc, #380]	; (8011cdc <_ZN15Screen1ViewBaseC1Ev+0x1e4c>)
 8011b60:	4a5b      	ldr	r2, [pc, #364]	; (8011cd0 <_ZN15Screen1ViewBaseC1Ev+0x1e40>)
 8011b62:	21af      	movs	r1, #175	; 0xaf
 8011b64:	485b      	ldr	r0, [pc, #364]	; (8011cd4 <_ZN15Screen1ViewBaseC1Ev+0x1e44>)
 8011b66:	f01a fd79 	bl	802c65c <__assert_func>
    }
 8011b6a:	bf00      	nop
        return texts->getText(typedTextId);
 8011b6c:	4b54      	ldr	r3, [pc, #336]	; (8011cc0 <_ZN15Screen1ViewBaseC1Ev+0x1e30>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8011b74:	889b      	ldrh	r3, [r3, #4]
 8011b76:	4619      	mov	r1, r3
 8011b78:	4610      	mov	r0, r2
 8011b7a:	f001 fab5 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	bf00      	nop
 8011b82:	4a50      	ldr	r2, [pc, #320]	; (8011cc4 <_ZN15Screen1ViewBaseC1Ev+0x1e34>)
 8011b84:	2120      	movs	r1, #32
 8011b86:	4620      	mov	r0, r4
 8011b88:	f00c f952 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011b8c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7fc fe41 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    iat_value.setWildcard(iat_valueBuffer);
 8011b96:	1d3b      	adds	r3, r7, #4
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f503 62c2 	add.w	r2, r3, #1552	; 0x610
 8011b9e:	1d3b      	adds	r3, r7, #4
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	4610      	mov	r0, r2
 8011baa:	f7fe f843 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_value.resizeToCurrentText();
 8011bae:	1d3b      	adds	r3, r7, #4
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f006 ff26 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8011bbc:	1d3b      	adds	r3, r7, #4
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f503 64c2 	add.w	r4, r3, #1552	; 0x610
 8011bc4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8011bc8:	2103      	movs	r1, #3
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fd ffa4 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011bd0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f006 ff33 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011bdc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fc fe19 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    iat_label.setXY(29, 196);
 8011be6:	1d3b      	adds	r3, r7, #4
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8011bee:	22c4      	movs	r2, #196	; 0xc4
 8011bf0:	211d      	movs	r1, #29
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fd fd84 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    iat_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011bf8:	1d3b      	adds	r3, r7, #4
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f503 64ca 	add.w	r4, r3, #1616	; 0x650
 8011c00:	23ff      	movs	r3, #255	; 0xff
 8011c02:	f887 33eb 	strb.w	r3, [r7, #1003]	; 0x3eb
 8011c06:	23ff      	movs	r3, #255	; 0xff
 8011c08:	f887 33ea 	strb.w	r3, [r7, #1002]	; 0x3ea
 8011c0c:	23ff      	movs	r3, #255	; 0xff
 8011c0e:	f887 33e9 	strb.w	r3, [r7, #1001]	; 0x3e9
 8011c12:	f897 33eb 	ldrb.w	r3, [r7, #1003]	; 0x3eb
 8011c16:	041b      	lsls	r3, r3, #16
 8011c18:	461a      	mov	r2, r3
 8011c1a:	f897 33ea 	ldrb.w	r3, [r7, #1002]	; 0x3ea
 8011c1e:	021b      	lsls	r3, r3, #8
 8011c20:	431a      	orrs	r2, r3
 8011c22:	f897 33e9 	ldrb.w	r3, [r7, #1001]	; 0x3e9
 8011c26:	4313      	orrs	r3, r2
 8011c28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011c2c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8011c30:	4611      	mov	r1, r2
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fd fc94 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8011c38:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f8c7 43ec 	str.w	r4, [r7, #1004]	; 0x3ec
 8011c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c48:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011c4a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8011c4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011c52:	6812      	ldr	r2, [r2, #0]
 8011c54:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011c56:	bf00      	nop
    iat_label.setLinespacing(0);
 8011c58:	1d3b      	adds	r3, r7, #4
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8011c60:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8011c64:	2300      	movs	r3, #0
 8011c66:	f8a7 33f2 	strh.w	r3, [r7, #1010]	; 0x3f2
        linespace = space;
 8011c6a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8011c6e:	f8b7 23f2 	ldrh.w	r2, [r7, #1010]	; 0x3f2
 8011c72:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011c74:	bf00      	nop
    Unicode::snprintf(iat_labelBuffer, IAT_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID59).getText());
 8011c76:	1d3b      	adds	r3, r7, #4
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f603 4438 	addw	r4, r3, #3128	; 0xc38
 8011c7e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8011c82:	212d      	movs	r1, #45	; 0x2d
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fd ff47 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011c8a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8011c8e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011c92:	4b0d      	ldr	r3, [pc, #52]	; (8011cc8 <_ZN15Screen1ViewBaseC1Ev+0x1e38>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d105      	bne.n	8011ca6 <_ZN15Screen1ViewBaseC1Ev+0x1e16>
 8011c9a:	4b0c      	ldr	r3, [pc, #48]	; (8011ccc <_ZN15Screen1ViewBaseC1Ev+0x1e3c>)
 8011c9c:	4a0c      	ldr	r2, [pc, #48]	; (8011cd0 <_ZN15Screen1ViewBaseC1Ev+0x1e40>)
 8011c9e:	21ae      	movs	r1, #174	; 0xae
 8011ca0:	480c      	ldr	r0, [pc, #48]	; (8011cd4 <_ZN15Screen1ViewBaseC1Ev+0x1e44>)
 8011ca2:	f01a fcdb 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011ca6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8011caa:	889a      	ldrh	r2, [r3, #4]
 8011cac:	4b0a      	ldr	r3, [pc, #40]	; (8011cd8 <_ZN15Screen1ViewBaseC1Ev+0x1e48>)
 8011cae:	881b      	ldrh	r3, [r3, #0]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d315      	bcc.n	8011ce0 <_ZN15Screen1ViewBaseC1Ev+0x1e50>
 8011cb4:	4b09      	ldr	r3, [pc, #36]	; (8011cdc <_ZN15Screen1ViewBaseC1Ev+0x1e4c>)
 8011cb6:	4a06      	ldr	r2, [pc, #24]	; (8011cd0 <_ZN15Screen1ViewBaseC1Ev+0x1e40>)
 8011cb8:	21af      	movs	r1, #175	; 0xaf
 8011cba:	4806      	ldr	r0, [pc, #24]	; (8011cd4 <_ZN15Screen1ViewBaseC1Ev+0x1e44>)
 8011cbc:	f01a fcce 	bl	802c65c <__assert_func>
 8011cc0:	2000675c 	.word	0x2000675c
 8011cc4:	0802e334 	.word	0x0802e334
 8011cc8:	20006750 	.word	0x20006750
 8011ccc:	0802e228 	.word	0x0802e228
 8011cd0:	0802e26c 	.word	0x0802e26c
 8011cd4:	0802e29c 	.word	0x0802e29c
 8011cd8:	20006754 	.word	0x20006754
 8011cdc:	0802e2e0 	.word	0x0802e2e0
    }
 8011ce0:	bf00      	nop
        return texts->getText(typedTextId);
 8011ce2:	4baa      	ldr	r3, [pc, #680]	; (8011f8c <_ZN15Screen1ViewBaseC1Ev+0x20fc>)
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8011cea:	889b      	ldrh	r3, [r3, #4]
 8011cec:	4619      	mov	r1, r3
 8011cee:	4610      	mov	r0, r2
 8011cf0:	f001 f9fa 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	bf00      	nop
 8011cf8:	4aa5      	ldr	r2, [pc, #660]	; (8011f90 <_ZN15Screen1ViewBaseC1Ev+0x2100>)
 8011cfa:	210a      	movs	r1, #10
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f00c f897 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011d02:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fc fd86 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    iat_label.setWildcard(iat_labelBuffer);
 8011d0c:	1d3b      	adds	r3, r7, #4
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
 8011d14:	1d3b      	adds	r3, r7, #4
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	4610      	mov	r0, r2
 8011d20:	f7fd ff88 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_label.resizeToCurrentText();
 8011d24:	1d3b      	adds	r3, r7, #4
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f006 fe6b 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8011d32:	1d3b      	adds	r3, r7, #4
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f503 64ca 	add.w	r4, r3, #1616	; 0x650
 8011d3a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011d3e:	2105      	movs	r1, #5
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fd fee9 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011d46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f006 fe78 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011d52:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fc fd5e 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    iat_units.setXY(109, 196);
 8011d5c:	1d3b      	adds	r3, r7, #4
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011d64:	22c4      	movs	r2, #196	; 0xc4
 8011d66:	216d      	movs	r1, #109	; 0x6d
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7fd fcc9 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    iat_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011d6e:	1d3b      	adds	r3, r7, #4
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 8011d76:	23ff      	movs	r3, #255	; 0xff
 8011d78:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
 8011d7c:	23ff      	movs	r3, #255	; 0xff
 8011d7e:	f887 33fe 	strb.w	r3, [r7, #1022]	; 0x3fe
 8011d82:	23ff      	movs	r3, #255	; 0xff
 8011d84:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
 8011d88:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 8011d8c:	041b      	lsls	r3, r3, #16
 8011d8e:	461a      	mov	r2, r3
 8011d90:	f897 33fe 	ldrb.w	r3, [r7, #1022]	; 0x3fe
 8011d94:	021b      	lsls	r3, r3, #8
 8011d96:	431a      	orrs	r2, r3
 8011d98:	f897 33fd 	ldrb.w	r3, [r7, #1021]	; 0x3fd
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011da2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8011da6:	4611      	mov	r1, r2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7fd fbd9 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8011dae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	461a      	mov	r2, r3
 8011db6:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 8011dba:	f107 0320 	add.w	r3, r7, #32
 8011dbe:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011dc0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8011dc4:	f107 0220 	add.w	r2, r7, #32
 8011dc8:	6812      	ldr	r2, [r2, #0]
 8011dca:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011dcc:	bf00      	nop
    iat_units.setLinespacing(0);
 8011dce:	1d3b      	adds	r3, r7, #4
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011dd6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8011dda:	2300      	movs	r3, #0
 8011ddc:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
        linespace = space;
 8011de0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011de4:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 8011de8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011dea:	bf00      	nop
    Unicode::snprintf(iat_unitsBuffer, IAT_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID58).getText());
 8011dec:	1d3b      	adds	r3, r7, #4
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f603 444c 	addw	r4, r3, #3148	; 0xc4c
 8011df4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011df8:	212c      	movs	r1, #44	; 0x2c
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fd fe8c 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011e00:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011e04:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011e08:	4b62      	ldr	r3, [pc, #392]	; (8011f94 <_ZN15Screen1ViewBaseC1Ev+0x2104>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d105      	bne.n	8011e1c <_ZN15Screen1ViewBaseC1Ev+0x1f8c>
 8011e10:	4b61      	ldr	r3, [pc, #388]	; (8011f98 <_ZN15Screen1ViewBaseC1Ev+0x2108>)
 8011e12:	4a62      	ldr	r2, [pc, #392]	; (8011f9c <_ZN15Screen1ViewBaseC1Ev+0x210c>)
 8011e14:	21ae      	movs	r1, #174	; 0xae
 8011e16:	4862      	ldr	r0, [pc, #392]	; (8011fa0 <_ZN15Screen1ViewBaseC1Ev+0x2110>)
 8011e18:	f01a fc20 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011e1c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011e20:	889a      	ldrh	r2, [r3, #4]
 8011e22:	4b60      	ldr	r3, [pc, #384]	; (8011fa4 <_ZN15Screen1ViewBaseC1Ev+0x2114>)
 8011e24:	881b      	ldrh	r3, [r3, #0]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d305      	bcc.n	8011e36 <_ZN15Screen1ViewBaseC1Ev+0x1fa6>
 8011e2a:	4b5f      	ldr	r3, [pc, #380]	; (8011fa8 <_ZN15Screen1ViewBaseC1Ev+0x2118>)
 8011e2c:	4a5b      	ldr	r2, [pc, #364]	; (8011f9c <_ZN15Screen1ViewBaseC1Ev+0x210c>)
 8011e2e:	21af      	movs	r1, #175	; 0xaf
 8011e30:	485b      	ldr	r0, [pc, #364]	; (8011fa0 <_ZN15Screen1ViewBaseC1Ev+0x2110>)
 8011e32:	f01a fc13 	bl	802c65c <__assert_func>
    }
 8011e36:	bf00      	nop
        return texts->getText(typedTextId);
 8011e38:	4b54      	ldr	r3, [pc, #336]	; (8011f8c <_ZN15Screen1ViewBaseC1Ev+0x20fc>)
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011e40:	889b      	ldrh	r3, [r3, #4]
 8011e42:	4619      	mov	r1, r3
 8011e44:	4610      	mov	r0, r2
 8011e46:	f001 f94f 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	bf00      	nop
 8011e4e:	4a50      	ldr	r2, [pc, #320]	; (8011f90 <_ZN15Screen1ViewBaseC1Ev+0x2100>)
 8011e50:	210a      	movs	r1, #10
 8011e52:	4620      	mov	r0, r4
 8011e54:	f00b ffec 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011e58:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7fc fcdb 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    iat_units.setWildcard(iat_unitsBuffer);
 8011e62:	1d3b      	adds	r3, r7, #4
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f503 62d2 	add.w	r2, r3, #1680	; 0x690
 8011e6a:	1d3b      	adds	r3, r7, #4
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8011e72:	4619      	mov	r1, r3
 8011e74:	4610      	mov	r0, r2
 8011e76:	f7fd fedd 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_units.resizeToCurrentText();
 8011e7a:	1d3b      	adds	r3, r7, #4
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011e82:	4618      	mov	r0, r3
 8011e84:	f006 fdc0 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8011e88:	1d3b      	adds	r3, r7, #4
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 8011e90:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8011e94:	2104      	movs	r1, #4
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fd fe3e 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011e9c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f006 fdcd 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011ea8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fc fcb3 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_value.setXY(25, 250);
 8011eb2:	1d3b      	adds	r3, r7, #4
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8011eba:	22fa      	movs	r2, #250	; 0xfa
 8011ebc:	2119      	movs	r1, #25
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7fd fc1e 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011ec4:	1d3b      	adds	r3, r7, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f503 64da 	add.w	r4, r3, #1744	; 0x6d0
 8011ecc:	23ff      	movs	r3, #255	; 0xff
 8011ece:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
 8011ed2:	23ff      	movs	r3, #255	; 0xff
 8011ed4:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
 8011ed8:	23ff      	movs	r3, #255	; 0xff
 8011eda:	f887 3411 	strb.w	r3, [r7, #1041]	; 0x411
 8011ede:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8011ee2:	041b      	lsls	r3, r3, #16
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	f897 3412 	ldrb.w	r3, [r7, #1042]	; 0x412
 8011eea:	021b      	lsls	r3, r3, #8
 8011eec:	431a      	orrs	r2, r3
 8011eee:	f897 3411 	ldrb.w	r3, [r7, #1041]	; 0x411
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011ef8:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8011efc:	4611      	mov	r1, r2
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fd fb2e 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 8011f04:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	f8c7 4414 	str.w	r4, [r7, #1044]	; 0x414
 8011f10:	f107 031c 	add.w	r3, r7, #28
 8011f14:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011f16:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8011f1a:	f107 021c 	add.w	r2, r7, #28
 8011f1e:	6812      	ldr	r2, [r2, #0]
 8011f20:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011f22:	bf00      	nop
    oilp_value.setLinespacing(0);
 8011f24:	1d3b      	adds	r3, r7, #4
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8011f2c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8011f30:	2300      	movs	r3, #0
 8011f32:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
        linespace = space;
 8011f36:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8011f3a:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8011f3e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011f40:	bf00      	nop
    Unicode::snprintf(oilp_valueBuffer, OILP_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID43).getText());
 8011f42:	1d3b      	adds	r3, r7, #4
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f503 6446 	add.w	r4, r3, #3168	; 0xc60
 8011f4a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8011f4e:	211d      	movs	r1, #29
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fd fde1 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8011f56:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8011f5a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011f5e:	4b0d      	ldr	r3, [pc, #52]	; (8011f94 <_ZN15Screen1ViewBaseC1Ev+0x2104>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d105      	bne.n	8011f72 <_ZN15Screen1ViewBaseC1Ev+0x20e2>
 8011f66:	4b0c      	ldr	r3, [pc, #48]	; (8011f98 <_ZN15Screen1ViewBaseC1Ev+0x2108>)
 8011f68:	4a0c      	ldr	r2, [pc, #48]	; (8011f9c <_ZN15Screen1ViewBaseC1Ev+0x210c>)
 8011f6a:	21ae      	movs	r1, #174	; 0xae
 8011f6c:	480c      	ldr	r0, [pc, #48]	; (8011fa0 <_ZN15Screen1ViewBaseC1Ev+0x2110>)
 8011f6e:	f01a fb75 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011f72:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8011f76:	889a      	ldrh	r2, [r3, #4]
 8011f78:	4b0a      	ldr	r3, [pc, #40]	; (8011fa4 <_ZN15Screen1ViewBaseC1Ev+0x2114>)
 8011f7a:	881b      	ldrh	r3, [r3, #0]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d315      	bcc.n	8011fac <_ZN15Screen1ViewBaseC1Ev+0x211c>
 8011f80:	4b09      	ldr	r3, [pc, #36]	; (8011fa8 <_ZN15Screen1ViewBaseC1Ev+0x2118>)
 8011f82:	4a06      	ldr	r2, [pc, #24]	; (8011f9c <_ZN15Screen1ViewBaseC1Ev+0x210c>)
 8011f84:	21af      	movs	r1, #175	; 0xaf
 8011f86:	4806      	ldr	r0, [pc, #24]	; (8011fa0 <_ZN15Screen1ViewBaseC1Ev+0x2110>)
 8011f88:	f01a fb68 	bl	802c65c <__assert_func>
 8011f8c:	2000675c 	.word	0x2000675c
 8011f90:	0802e334 	.word	0x0802e334
 8011f94:	20006750 	.word	0x20006750
 8011f98:	0802e228 	.word	0x0802e228
 8011f9c:	0802e26c 	.word	0x0802e26c
 8011fa0:	0802e29c 	.word	0x0802e29c
 8011fa4:	20006754 	.word	0x20006754
 8011fa8:	0802e2e0 	.word	0x0802e2e0
    }
 8011fac:	bf00      	nop
        return texts->getText(typedTextId);
 8011fae:	4bab      	ldr	r3, [pc, #684]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x23cc>)
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8011fb6:	889b      	ldrh	r3, [r3, #4]
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4610      	mov	r0, r2
 8011fbc:	f001 f894 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	bf00      	nop
 8011fc4:	4aa6      	ldr	r2, [pc, #664]	; (8012260 <_ZN15Screen1ViewBaseC1Ev+0x23d0>)
 8011fc6:	2120      	movs	r1, #32
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f00b ff31 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011fce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fc fc20 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_value.setWildcard(oilp_valueBuffer);
 8011fd8:	1d3b      	adds	r3, r7, #4
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f503 62da 	add.w	r2, r3, #1744	; 0x6d0
 8011fe0:	1d3b      	adds	r3, r7, #4
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8011fe8:	4619      	mov	r1, r3
 8011fea:	4610      	mov	r0, r2
 8011fec:	f7fd fe22 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_value.resizeToCurrentText();
 8011ff0:	1d3b      	adds	r3, r7, #4
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f006 fd05 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011ffe:	1d3b      	adds	r3, r7, #4
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f503 64da 	add.w	r4, r3, #1744	; 0x6d0
 8012006:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801200a:	2106      	movs	r1, #6
 801200c:	4618      	mov	r0, r3
 801200e:	f7fd fd83 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8012012:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8012016:	4619      	mov	r1, r3
 8012018:	4620      	mov	r0, r4
 801201a:	f006 fd12 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801201e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8012022:	4618      	mov	r0, r3
 8012024:	f7fc fbf8 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_label.setXY(28, 316);
 8012028:	1d3b      	adds	r3, r7, #4
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8012030:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012034:	211c      	movs	r1, #28
 8012036:	4618      	mov	r0, r3
 8012038:	f7fd fb62 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801203c:	1d3b      	adds	r3, r7, #4
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f503 64e2 	add.w	r4, r3, #1808	; 0x710
 8012044:	23ff      	movs	r3, #255	; 0xff
 8012046:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
 801204a:	23ff      	movs	r3, #255	; 0xff
 801204c:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
 8012050:	23ff      	movs	r3, #255	; 0xff
 8012052:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
 8012056:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 801205a:	041b      	lsls	r3, r3, #16
 801205c:	461a      	mov	r2, r3
 801205e:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8012062:	021b      	lsls	r3, r3, #8
 8012064:	431a      	orrs	r2, r3
 8012066:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 801206a:	4313      	orrs	r3, r2
 801206c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012070:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012074:	4611      	mov	r1, r2
 8012076:	4618      	mov	r0, r3
 8012078:	f7fd fa72 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 801207c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 8012088:	f107 0318 	add.w	r3, r7, #24
 801208c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801208e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8012092:	f107 0218 	add.w	r2, r7, #24
 8012096:	6812      	ldr	r2, [r2, #0]
 8012098:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801209a:	bf00      	nop
    oilp_label.setLinespacing(0);
 801209c:	1d3b      	adds	r3, r7, #4
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 80120a4:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80120a8:	2300      	movs	r3, #0
 80120aa:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
        linespace = space;
 80120ae:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80120b2:	f8b7 242e 	ldrh.w	r2, [r7, #1070]	; 0x42e
 80120b6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80120b8:	bf00      	nop
    Unicode::snprintf(oilp_labelBuffer, OILP_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 80120ba:	1d3b      	adds	r3, r7, #4
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f503 644a 	add.w	r4, r3, #3232	; 0xca0
 80120c2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80120c6:	212b      	movs	r1, #43	; 0x2b
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fd fd25 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80120ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80120d2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80120d6:	4b63      	ldr	r3, [pc, #396]	; (8012264 <_ZN15Screen1ViewBaseC1Ev+0x23d4>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d105      	bne.n	80120ea <_ZN15Screen1ViewBaseC1Ev+0x225a>
 80120de:	4b62      	ldr	r3, [pc, #392]	; (8012268 <_ZN15Screen1ViewBaseC1Ev+0x23d8>)
 80120e0:	4a62      	ldr	r2, [pc, #392]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x23dc>)
 80120e2:	21ae      	movs	r1, #174	; 0xae
 80120e4:	4862      	ldr	r0, [pc, #392]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x23e0>)
 80120e6:	f01a fab9 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80120ea:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80120ee:	889a      	ldrh	r2, [r3, #4]
 80120f0:	4b60      	ldr	r3, [pc, #384]	; (8012274 <_ZN15Screen1ViewBaseC1Ev+0x23e4>)
 80120f2:	881b      	ldrh	r3, [r3, #0]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d305      	bcc.n	8012104 <_ZN15Screen1ViewBaseC1Ev+0x2274>
 80120f8:	4b5f      	ldr	r3, [pc, #380]	; (8012278 <_ZN15Screen1ViewBaseC1Ev+0x23e8>)
 80120fa:	4a5c      	ldr	r2, [pc, #368]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x23dc>)
 80120fc:	21af      	movs	r1, #175	; 0xaf
 80120fe:	485c      	ldr	r0, [pc, #368]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x23e0>)
 8012100:	f01a faac 	bl	802c65c <__assert_func>
    }
 8012104:	bf00      	nop
        return texts->getText(typedTextId);
 8012106:	4b55      	ldr	r3, [pc, #340]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x23cc>)
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801210e:	889b      	ldrh	r3, [r3, #4]
 8012110:	4619      	mov	r1, r3
 8012112:	4610      	mov	r0, r2
 8012114:	f000 ffe8 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8012118:	4603      	mov	r3, r0
 801211a:	bf00      	nop
 801211c:	4a50      	ldr	r2, [pc, #320]	; (8012260 <_ZN15Screen1ViewBaseC1Ev+0x23d0>)
 801211e:	210a      	movs	r1, #10
 8012120:	4620      	mov	r0, r4
 8012122:	f00b fe85 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012126:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801212a:	4618      	mov	r0, r3
 801212c:	f7fc fb74 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_label.setWildcard(oilp_labelBuffer);
 8012130:	1d3b      	adds	r3, r7, #4
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 8012138:	1d3b      	adds	r3, r7, #4
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8012140:	4619      	mov	r1, r3
 8012142:	4610      	mov	r0, r2
 8012144:	f7fd fd76 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_label.resizeToCurrentText();
 8012148:	1d3b      	adds	r3, r7, #4
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8012150:	4618      	mov	r0, r3
 8012152:	f006 fc59 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8012156:	1d3b      	adds	r3, r7, #4
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f503 64e2 	add.w	r4, r3, #1808	; 0x710
 801215e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8012162:	2108      	movs	r1, #8
 8012164:	4618      	mov	r0, r3
 8012166:	f7fd fcd7 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801216a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801216e:	4619      	mov	r1, r3
 8012170:	4620      	mov	r0, r4
 8012172:	f006 fc66 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012176:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801217a:	4618      	mov	r0, r3
 801217c:	f7fc fb4c 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_units.setXY(118, 317);
 8012180:	1d3b      	adds	r3, r7, #4
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8012188:	f240 123d 	movw	r2, #317	; 0x13d
 801218c:	2176      	movs	r1, #118	; 0x76
 801218e:	4618      	mov	r0, r3
 8012190:	f7fd fab6 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012194:	1d3b      	adds	r3, r7, #4
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	f503 64ea 	add.w	r4, r3, #1872	; 0x750
 801219c:	23ff      	movs	r3, #255	; 0xff
 801219e:	f887 343b 	strb.w	r3, [r7, #1083]	; 0x43b
 80121a2:	23ff      	movs	r3, #255	; 0xff
 80121a4:	f887 343a 	strb.w	r3, [r7, #1082]	; 0x43a
 80121a8:	23ff      	movs	r3, #255	; 0xff
 80121aa:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
 80121ae:	f897 343b 	ldrb.w	r3, [r7, #1083]	; 0x43b
 80121b2:	041b      	lsls	r3, r3, #16
 80121b4:	461a      	mov	r2, r3
 80121b6:	f897 343a 	ldrb.w	r3, [r7, #1082]	; 0x43a
 80121ba:	021b      	lsls	r3, r3, #8
 80121bc:	431a      	orrs	r2, r3
 80121be:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 80121c2:	4313      	orrs	r3, r2
 80121c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80121c8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fd f9c6 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 80121d4:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	461a      	mov	r2, r3
 80121dc:	f8c7 443c 	str.w	r4, [r7, #1084]	; 0x43c
 80121e0:	f107 0314 	add.w	r3, r7, #20
 80121e4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80121e6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80121ea:	f107 0214 	add.w	r2, r7, #20
 80121ee:	6812      	ldr	r2, [r2, #0]
 80121f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80121f2:	bf00      	nop
    oilp_units.setLinespacing(0);
 80121f4:	1d3b      	adds	r3, r7, #4
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80121fc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8012200:	2300      	movs	r3, #0
 8012202:	f8a7 3442 	strh.w	r3, [r7, #1090]	; 0x442
        linespace = space;
 8012206:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801220a:	f8b7 2442 	ldrh.w	r2, [r7, #1090]	; 0x442
 801220e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012210:	bf00      	nop
    Unicode::snprintf(oilp_unitsBuffer, OILP_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012212:	1d3b      	adds	r3, r7, #4
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f603 44b4 	addw	r4, r3, #3252	; 0xcb4
 801221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801221e:	212a      	movs	r1, #42	; 0x2a
 8012220:	4618      	mov	r0, r3
 8012222:	f7fd fc79 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 8012226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801222a:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801222e:	4b0d      	ldr	r3, [pc, #52]	; (8012264 <_ZN15Screen1ViewBaseC1Ev+0x23d4>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d105      	bne.n	8012242 <_ZN15Screen1ViewBaseC1Ev+0x23b2>
 8012236:	4b0c      	ldr	r3, [pc, #48]	; (8012268 <_ZN15Screen1ViewBaseC1Ev+0x23d8>)
 8012238:	4a0c      	ldr	r2, [pc, #48]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x23dc>)
 801223a:	21ae      	movs	r1, #174	; 0xae
 801223c:	480c      	ldr	r0, [pc, #48]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x23e0>)
 801223e:	f01a fa0d 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012242:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8012246:	889a      	ldrh	r2, [r3, #4]
 8012248:	4b0a      	ldr	r3, [pc, #40]	; (8012274 <_ZN15Screen1ViewBaseC1Ev+0x23e4>)
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	429a      	cmp	r2, r3
 801224e:	d315      	bcc.n	801227c <_ZN15Screen1ViewBaseC1Ev+0x23ec>
 8012250:	4b09      	ldr	r3, [pc, #36]	; (8012278 <_ZN15Screen1ViewBaseC1Ev+0x23e8>)
 8012252:	4a06      	ldr	r2, [pc, #24]	; (801226c <_ZN15Screen1ViewBaseC1Ev+0x23dc>)
 8012254:	21af      	movs	r1, #175	; 0xaf
 8012256:	4806      	ldr	r0, [pc, #24]	; (8012270 <_ZN15Screen1ViewBaseC1Ev+0x23e0>)
 8012258:	f01a fa00 	bl	802c65c <__assert_func>
 801225c:	2000675c 	.word	0x2000675c
 8012260:	0802e334 	.word	0x0802e334
 8012264:	20006750 	.word	0x20006750
 8012268:	0802e228 	.word	0x0802e228
 801226c:	0802e26c 	.word	0x0802e26c
 8012270:	0802e29c 	.word	0x0802e29c
 8012274:	20006754 	.word	0x20006754
 8012278:	0802e2e0 	.word	0x0802e2e0
    }
 801227c:	bf00      	nop
        return texts->getText(typedTextId);
 801227e:	4bab      	ldr	r3, [pc, #684]	; (801252c <_ZN15Screen1ViewBaseC1Ev+0x269c>)
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8012286:	889b      	ldrh	r3, [r3, #4]
 8012288:	4619      	mov	r1, r3
 801228a:	4610      	mov	r0, r2
 801228c:	f000 ff2c 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8012290:	4603      	mov	r3, r0
 8012292:	bf00      	nop
 8012294:	4aa6      	ldr	r2, [pc, #664]	; (8012530 <_ZN15Screen1ViewBaseC1Ev+0x26a0>)
 8012296:	210a      	movs	r1, #10
 8012298:	4620      	mov	r0, r4
 801229a:	f00b fdc9 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fc fab8 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_units.setWildcard(oilp_unitsBuffer);
 80122a8:	1d3b      	adds	r3, r7, #4
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f503 62ea 	add.w	r2, r3, #1872	; 0x750
 80122b0:	1d3b      	adds	r3, r7, #4
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f603 43b4 	addw	r3, r3, #3252	; 0xcb4
 80122b8:	4619      	mov	r1, r3
 80122ba:	4610      	mov	r0, r2
 80122bc:	f7fd fcba 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_units.resizeToCurrentText();
 80122c0:	1d3b      	adds	r3, r7, #4
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80122c8:	4618      	mov	r0, r3
 80122ca:	f006 fb9d 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 80122ce:	1d3b      	adds	r3, r7, #4
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f503 64ea 	add.w	r4, r3, #1872	; 0x750
 80122d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80122da:	2107      	movs	r1, #7
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fd fc1b 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80122e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80122e6:	4619      	mov	r1, r3
 80122e8:	4620      	mov	r0, r4
 80122ea:	f006 fbaa 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80122ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fc fa90 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_value.setXY(25, 368);
 80122f8:	1d3b      	adds	r3, r7, #4
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8012300:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012304:	2119      	movs	r1, #25
 8012306:	4618      	mov	r0, r3
 8012308:	f7fd f9fa 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801230c:	1d3b      	adds	r3, r7, #4
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f503 64f2 	add.w	r4, r3, #1936	; 0x790
 8012314:	23ff      	movs	r3, #255	; 0xff
 8012316:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 801231a:	23ff      	movs	r3, #255	; 0xff
 801231c:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
 8012320:	23ff      	movs	r3, #255	; 0xff
 8012322:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
 8012326:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 801232a:	041b      	lsls	r3, r3, #16
 801232c:	461a      	mov	r2, r3
 801232e:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8012332:	021b      	lsls	r3, r3, #8
 8012334:	431a      	orrs	r2, r3
 8012336:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 801233a:	4313      	orrs	r3, r2
 801233c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012340:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8012344:	4611      	mov	r1, r2
 8012346:	4618      	mov	r0, r3
 8012348:	f7fd f90a 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 801234c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	f8c7 4450 	str.w	r4, [r7, #1104]	; 0x450
 8012358:	f107 0310 	add.w	r3, r7, #16
 801235c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801235e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8012362:	f107 0210 	add.w	r2, r7, #16
 8012366:	6812      	ldr	r2, [r2, #0]
 8012368:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801236a:	bf00      	nop
    fuelp_value.setLinespacing(0);
 801236c:	1d3b      	adds	r3, r7, #4
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8012374:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8012378:	2300      	movs	r3, #0
 801237a:	f8a7 3456 	strh.w	r3, [r7, #1110]	; 0x456
        linespace = space;
 801237e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8012382:	f8b7 2456 	ldrh.w	r2, [r7, #1110]	; 0x456
 8012386:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012388:	bf00      	nop
    Unicode::snprintf(fuelp_valueBuffer, FUELP_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID44).getText());
 801238a:	1d3b      	adds	r3, r7, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f603 44c8 	addw	r4, r3, #3272	; 0xcc8
 8012392:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012396:	211e      	movs	r1, #30
 8012398:	4618      	mov	r0, r3
 801239a:	f7fd fbbd 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801239e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80123a2:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80123a6:	4b63      	ldr	r3, [pc, #396]	; (8012534 <_ZN15Screen1ViewBaseC1Ev+0x26a4>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d105      	bne.n	80123ba <_ZN15Screen1ViewBaseC1Ev+0x252a>
 80123ae:	4b62      	ldr	r3, [pc, #392]	; (8012538 <_ZN15Screen1ViewBaseC1Ev+0x26a8>)
 80123b0:	4a62      	ldr	r2, [pc, #392]	; (801253c <_ZN15Screen1ViewBaseC1Ev+0x26ac>)
 80123b2:	21ae      	movs	r1, #174	; 0xae
 80123b4:	4862      	ldr	r0, [pc, #392]	; (8012540 <_ZN15Screen1ViewBaseC1Ev+0x26b0>)
 80123b6:	f01a f951 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80123ba:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80123be:	889a      	ldrh	r2, [r3, #4]
 80123c0:	4b60      	ldr	r3, [pc, #384]	; (8012544 <_ZN15Screen1ViewBaseC1Ev+0x26b4>)
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d305      	bcc.n	80123d4 <_ZN15Screen1ViewBaseC1Ev+0x2544>
 80123c8:	4b5f      	ldr	r3, [pc, #380]	; (8012548 <_ZN15Screen1ViewBaseC1Ev+0x26b8>)
 80123ca:	4a5c      	ldr	r2, [pc, #368]	; (801253c <_ZN15Screen1ViewBaseC1Ev+0x26ac>)
 80123cc:	21af      	movs	r1, #175	; 0xaf
 80123ce:	485c      	ldr	r0, [pc, #368]	; (8012540 <_ZN15Screen1ViewBaseC1Ev+0x26b0>)
 80123d0:	f01a f944 	bl	802c65c <__assert_func>
    }
 80123d4:	bf00      	nop
        return texts->getText(typedTextId);
 80123d6:	4b55      	ldr	r3, [pc, #340]	; (801252c <_ZN15Screen1ViewBaseC1Ev+0x269c>)
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80123de:	889b      	ldrh	r3, [r3, #4]
 80123e0:	4619      	mov	r1, r3
 80123e2:	4610      	mov	r0, r2
 80123e4:	f000 fe80 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80123e8:	4603      	mov	r3, r0
 80123ea:	bf00      	nop
 80123ec:	4a50      	ldr	r2, [pc, #320]	; (8012530 <_ZN15Screen1ViewBaseC1Ev+0x26a0>)
 80123ee:	2120      	movs	r1, #32
 80123f0:	4620      	mov	r0, r4
 80123f2:	f00b fd1d 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80123f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fc fa0c 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_value.setWildcard(fuelp_valueBuffer);
 8012400:	1d3b      	adds	r3, r7, #4
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f503 62f2 	add.w	r2, r3, #1936	; 0x790
 8012408:	1d3b      	adds	r3, r7, #4
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8012410:	4619      	mov	r1, r3
 8012412:	4610      	mov	r0, r2
 8012414:	f7fd fc0e 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_value.resizeToCurrentText();
 8012418:	1d3b      	adds	r3, r7, #4
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8012420:	4618      	mov	r0, r3
 8012422:	f006 faf1 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 8012426:	1d3b      	adds	r3, r7, #4
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f503 64f2 	add.w	r4, r3, #1936	; 0x790
 801242e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012432:	2109      	movs	r1, #9
 8012434:	4618      	mov	r0, r3
 8012436:	f7fd fb6f 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801243a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801243e:	4619      	mov	r1, r3
 8012440:	4620      	mov	r0, r4
 8012442:	f006 fafe 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012446:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801244a:	4618      	mov	r0, r3
 801244c:	f7fc f9e4 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_label.setXY(28, 437);
 8012450:	1d3b      	adds	r3, r7, #4
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012458:	f240 12b5 	movw	r2, #437	; 0x1b5
 801245c:	211c      	movs	r1, #28
 801245e:	4618      	mov	r0, r3
 8012460:	f7fd f94e 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012464:	1d3b      	adds	r3, r7, #4
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 801246c:	23ff      	movs	r3, #255	; 0xff
 801246e:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
 8012472:	23ff      	movs	r3, #255	; 0xff
 8012474:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
 8012478:	23ff      	movs	r3, #255	; 0xff
 801247a:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 801247e:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 8012482:	041b      	lsls	r3, r3, #16
 8012484:	461a      	mov	r2, r3
 8012486:	f897 3462 	ldrb.w	r3, [r7, #1122]	; 0x462
 801248a:	021b      	lsls	r3, r3, #8
 801248c:	431a      	orrs	r2, r3
 801248e:	f897 3461 	ldrb.w	r3, [r7, #1121]	; 0x461
 8012492:	4313      	orrs	r3, r2
 8012494:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012498:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801249c:	4611      	mov	r1, r2
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fd f85e 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 80124a4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	f8c7 4464 	str.w	r4, [r7, #1124]	; 0x464
 80124b0:	f107 030c 	add.w	r3, r7, #12
 80124b4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80124b6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80124ba:	f107 020c 	add.w	r2, r7, #12
 80124be:	6812      	ldr	r2, [r2, #0]
 80124c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124c2:	bf00      	nop
    fuelp_label.setLinespacing(0);
 80124c4:	1d3b      	adds	r3, r7, #4
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80124cc:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80124d0:	2300      	movs	r3, #0
 80124d2:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
        linespace = space;
 80124d6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80124da:	f8b7 246a 	ldrh.w	r2, [r7, #1130]	; 0x46a
 80124de:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80124e0:	bf00      	nop
    Unicode::snprintf(fuelp_labelBuffer, FUELP_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID55).getText());
 80124e2:	1d3b      	adds	r3, r7, #4
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f603 5408 	addw	r4, r3, #3336	; 0xd08
 80124ea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80124ee:	2129      	movs	r1, #41	; 0x29
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fd fb11 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80124f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80124fa:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80124fe:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <_ZN15Screen1ViewBaseC1Ev+0x26a4>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d105      	bne.n	8012512 <_ZN15Screen1ViewBaseC1Ev+0x2682>
 8012506:	4b0c      	ldr	r3, [pc, #48]	; (8012538 <_ZN15Screen1ViewBaseC1Ev+0x26a8>)
 8012508:	4a0c      	ldr	r2, [pc, #48]	; (801253c <_ZN15Screen1ViewBaseC1Ev+0x26ac>)
 801250a:	21ae      	movs	r1, #174	; 0xae
 801250c:	480c      	ldr	r0, [pc, #48]	; (8012540 <_ZN15Screen1ViewBaseC1Ev+0x26b0>)
 801250e:	f01a f8a5 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012512:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8012516:	889a      	ldrh	r2, [r3, #4]
 8012518:	4b0a      	ldr	r3, [pc, #40]	; (8012544 <_ZN15Screen1ViewBaseC1Ev+0x26b4>)
 801251a:	881b      	ldrh	r3, [r3, #0]
 801251c:	429a      	cmp	r2, r3
 801251e:	d315      	bcc.n	801254c <_ZN15Screen1ViewBaseC1Ev+0x26bc>
 8012520:	4b09      	ldr	r3, [pc, #36]	; (8012548 <_ZN15Screen1ViewBaseC1Ev+0x26b8>)
 8012522:	4a06      	ldr	r2, [pc, #24]	; (801253c <_ZN15Screen1ViewBaseC1Ev+0x26ac>)
 8012524:	21af      	movs	r1, #175	; 0xaf
 8012526:	4806      	ldr	r0, [pc, #24]	; (8012540 <_ZN15Screen1ViewBaseC1Ev+0x26b0>)
 8012528:	f01a f898 	bl	802c65c <__assert_func>
 801252c:	2000675c 	.word	0x2000675c
 8012530:	0802e334 	.word	0x0802e334
 8012534:	20006750 	.word	0x20006750
 8012538:	0802e228 	.word	0x0802e228
 801253c:	0802e26c 	.word	0x0802e26c
 8012540:	0802e29c 	.word	0x0802e29c
 8012544:	20006754 	.word	0x20006754
 8012548:	0802e2e0 	.word	0x0802e2e0
    }
 801254c:	bf00      	nop
        return texts->getText(typedTextId);
 801254e:	4b55      	ldr	r3, [pc, #340]	; (80126a4 <_ZN15Screen1ViewBaseC1Ev+0x2814>)
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012556:	889b      	ldrh	r3, [r3, #4]
 8012558:	4619      	mov	r1, r3
 801255a:	4610      	mov	r0, r2
 801255c:	f000 fdc4 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8012560:	4603      	mov	r3, r0
 8012562:	bf00      	nop
 8012564:	4a50      	ldr	r2, [pc, #320]	; (80126a8 <_ZN15Screen1ViewBaseC1Ev+0x2818>)
 8012566:	210a      	movs	r1, #10
 8012568:	4620      	mov	r0, r4
 801256a:	f00b fc61 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801256e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8012572:	4618      	mov	r0, r3
 8012574:	f7fc f950 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_label.setWildcard(fuelp_labelBuffer);
 8012578:	1d3b      	adds	r3, r7, #4
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8012580:	1d3b      	adds	r3, r7, #4
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8012588:	4619      	mov	r1, r3
 801258a:	4610      	mov	r0, r2
 801258c:	f7fd fb52 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_label.resizeToCurrentText();
 8012590:	1d3b      	adds	r3, r7, #4
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012598:	4618      	mov	r0, r3
 801259a:	f006 fa35 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 801259e:	1d3b      	adds	r3, r7, #4
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80125a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80125aa:	210b      	movs	r1, #11
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7fd fab3 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 80125b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80125b6:	4619      	mov	r1, r3
 80125b8:	4620      	mov	r0, r4
 80125ba:	f006 fa42 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80125be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fc f928 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_units.setXY(192, 437);
 80125c8:	1d3b      	adds	r3, r7, #4
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80125d0:	f240 12b5 	movw	r2, #437	; 0x1b5
 80125d4:	21c0      	movs	r1, #192	; 0xc0
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fd f892 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80125dc:	1d3b      	adds	r3, r7, #4
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f503 6401 	add.w	r4, r3, #2064	; 0x810
 80125e4:	23ff      	movs	r3, #255	; 0xff
 80125e6:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 80125ea:	23ff      	movs	r3, #255	; 0xff
 80125ec:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
 80125f0:	23ff      	movs	r3, #255	; 0xff
 80125f2:	f887 3475 	strb.w	r3, [r7, #1141]	; 0x475
 80125f6:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80125fa:	041b      	lsls	r3, r3, #16
 80125fc:	461a      	mov	r2, r3
 80125fe:	f897 3476 	ldrb.w	r3, [r7, #1142]	; 0x476
 8012602:	021b      	lsls	r3, r3, #8
 8012604:	431a      	orrs	r2, r3
 8012606:	f897 3475 	ldrb.w	r3, [r7, #1141]	; 0x475
 801260a:	4313      	orrs	r3, r2
 801260c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012610:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f7fc ffa2 	bl	800f560 <_ZN8touchgfx9colortypeC1Em>
 801261c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	461a      	mov	r2, r3
 8012624:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
 8012628:	f107 0308 	add.w	r3, r7, #8
 801262c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801262e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8012632:	f107 0208 	add.w	r2, r7, #8
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801263a:	bf00      	nop
    fuelp_units.setLinespacing(0);
 801263c:	1d3b      	adds	r3, r7, #4
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8012644:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8012648:	2300      	movs	r3, #0
 801264a:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
        linespace = space;
 801264e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8012652:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8012656:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012658:	bf00      	nop
    Unicode::snprintf(fuelp_unitsBuffer, FUELP_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 801265a:	1d3b      	adds	r3, r7, #4
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f603 541c 	addw	r4, r3, #3356	; 0xd1c
 8012662:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8012666:	2128      	movs	r1, #40	; 0x28
 8012668:	4618      	mov	r0, r3
 801266a:	f7fd fa55 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801266e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8012672:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012676:	4b0d      	ldr	r3, [pc, #52]	; (80126ac <_ZN15Screen1ViewBaseC1Ev+0x281c>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d105      	bne.n	801268a <_ZN15Screen1ViewBaseC1Ev+0x27fa>
 801267e:	4b0c      	ldr	r3, [pc, #48]	; (80126b0 <_ZN15Screen1ViewBaseC1Ev+0x2820>)
 8012680:	4a0c      	ldr	r2, [pc, #48]	; (80126b4 <_ZN15Screen1ViewBaseC1Ev+0x2824>)
 8012682:	21ae      	movs	r1, #174	; 0xae
 8012684:	480c      	ldr	r0, [pc, #48]	; (80126b8 <_ZN15Screen1ViewBaseC1Ev+0x2828>)
 8012686:	f019 ffe9 	bl	802c65c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801268a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 801268e:	889a      	ldrh	r2, [r3, #4]
 8012690:	4b0a      	ldr	r3, [pc, #40]	; (80126bc <_ZN15Screen1ViewBaseC1Ev+0x282c>)
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	429a      	cmp	r2, r3
 8012696:	d315      	bcc.n	80126c4 <_ZN15Screen1ViewBaseC1Ev+0x2834>
 8012698:	4b09      	ldr	r3, [pc, #36]	; (80126c0 <_ZN15Screen1ViewBaseC1Ev+0x2830>)
 801269a:	4a06      	ldr	r2, [pc, #24]	; (80126b4 <_ZN15Screen1ViewBaseC1Ev+0x2824>)
 801269c:	21af      	movs	r1, #175	; 0xaf
 801269e:	4806      	ldr	r0, [pc, #24]	; (80126b8 <_ZN15Screen1ViewBaseC1Ev+0x2828>)
 80126a0:	f019 ffdc 	bl	802c65c <__assert_func>
 80126a4:	2000675c 	.word	0x2000675c
 80126a8:	0802e334 	.word	0x0802e334
 80126ac:	20006750 	.word	0x20006750
 80126b0:	0802e228 	.word	0x0802e228
 80126b4:	0802e26c 	.word	0x0802e26c
 80126b8:	0802e29c 	.word	0x0802e29c
 80126bc:	20006754 	.word	0x20006754
 80126c0:	0802e2e0 	.word	0x0802e2e0
    }
 80126c4:	bf00      	nop
        return texts->getText(typedTextId);
 80126c6:	4bd7      	ldr	r3, [pc, #860]	; (8012a24 <_ZN15Screen1ViewBaseC1Ev+0x2b94>)
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80126ce:	889b      	ldrh	r3, [r3, #4]
 80126d0:	4619      	mov	r1, r3
 80126d2:	4610      	mov	r0, r2
 80126d4:	f000 fd08 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80126d8:	4603      	mov	r3, r0
 80126da:	bf00      	nop
 80126dc:	4ad2      	ldr	r2, [pc, #840]	; (8012a28 <_ZN15Screen1ViewBaseC1Ev+0x2b98>)
 80126de:	210a      	movs	r1, #10
 80126e0:	4620      	mov	r0, r4
 80126e2:	f00b fba5 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80126e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fc f894 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_units.setWildcard(fuelp_unitsBuffer);
 80126f0:	1d3b      	adds	r3, r7, #4
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 80126f8:	1d3b      	adds	r3, r7, #4
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f603 531c 	addw	r3, r3, #3356	; 0xd1c
 8012700:	4619      	mov	r1, r3
 8012702:	4610      	mov	r0, r2
 8012704:	f7fd fa96 	bl	800fc34 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_units.resizeToCurrentText();
 8012708:	1d3b      	adds	r3, r7, #4
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8012710:	4618      	mov	r0, r3
 8012712:	f006 f979 	bl	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8012716:	1d3b      	adds	r3, r7, #4
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f503 6401 	add.w	r4, r3, #2064	; 0x810
 801271e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012722:	210a      	movs	r1, #10
 8012724:	4618      	mov	r0, r3
 8012726:	f7fd f9f7 	bl	800fb18 <_ZN8touchgfx9TypedTextC1Et>
 801272a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801272e:	4619      	mov	r1, r3
 8012730:	4620      	mov	r0, r4
 8012732:	f006 f986 	bl	8018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012736:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801273a:	4618      	mov	r0, r3
 801273c:	f7fc f86c 	bl	800e818 <_ZN8touchgfx9TypedTextD1Ev>

    gauge1.setPosition(173, 0, 480, 480);
 8012740:	1d3b      	adds	r3, r7, #4
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8012748:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801274c:	9300      	str	r3, [sp, #0]
 801274e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012752:	2200      	movs	r2, #0
 8012754:	21ad      	movs	r1, #173	; 0xad
 8012756:	f7fc ff94 	bl	800f682 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(240, 240);
 801275a:	1d3b      	adds	r3, r7, #4
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012762:	22f0      	movs	r2, #240	; 0xf0
 8012764:	21f0      	movs	r1, #240	; 0xf0
 8012766:	4618      	mov	r0, r3
 8012768:	f006 fb0b 	bl	8018d82 <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(0, 240);
 801276c:	1d3b      	adds	r3, r7, #4
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012774:	22f0      	movs	r2, #240	; 0xf0
 8012776:	2100      	movs	r1, #0
 8012778:	4618      	mov	r0, r3
 801277a:	f006 fb87 	bl	8018e8c <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 8000);
 801277e:	1d3b      	adds	r3, r7, #4
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8012786:	2300      	movs	r3, #0
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	2300      	movs	r3, #0
 801278c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012790:	2100      	movs	r1, #0
 8012792:	f003 fa15 	bl	8015bc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8012796:	1d3b      	adds	r3, r7, #4
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801279e:	2100      	movs	r1, #0
 80127a0:	4618      	mov	r0, r3
 80127a2:	f006 fb1d 	bl	8018de0 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDEL_ID, 13, 13);
 80127a6:	1d3b      	adds	r3, r7, #4
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 80127ae:	230d      	movs	r3, #13
 80127b0:	220d      	movs	r2, #13
 80127b2:	210a      	movs	r1, #10
 80127b4:	f006 fad0 	bl	8018d58 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80127b8:	1d3b      	adds	r3, r7, #4
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80127c0:	2101      	movs	r1, #1
 80127c2:	4618      	mov	r0, r3
 80127c4:	f006 fa6a 	bl	8018c9c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 80127c8:	1d3b      	adds	r3, r7, #4
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80127d0:	2100      	movs	r1, #0
 80127d2:	4618      	mov	r0, r3
 80127d4:	f006 fa65 	bl	8018ca2 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    add(__background);
 80127d8:	1d3b      	adds	r3, r7, #4
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	1d3b      	adds	r3, r7, #4
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	3340      	adds	r3, #64	; 0x40
 80127e2:	4619      	mov	r1, r3
 80127e4:	4610      	mov	r0, r2
 80127e6:	f7fd f8d9 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 80127ea:	1d3b      	adds	r3, r7, #4
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	1d3b      	adds	r3, r7, #4
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	336c      	adds	r3, #108	; 0x6c
 80127f4:	4619      	mov	r1, r3
 80127f6:	4610      	mov	r0, r2
 80127f8:	f7fd f8d0 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLeft);
 80127fc:	1d3b      	adds	r3, r7, #4
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	1d3b      	adds	r3, r7, #4
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	3398      	adds	r3, #152	; 0x98
 8012806:	4619      	mov	r1, r3
 8012808:	4610      	mov	r0, r2
 801280a:	f7fd f8c7 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indRight);
 801280e:	1d3b      	adds	r3, r7, #4
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	1d3b      	adds	r3, r7, #4
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	33c4      	adds	r3, #196	; 0xc4
 8012818:	4619      	mov	r1, r3
 801281a:	4610      	mov	r0, r2
 801281c:	f7fd f8be 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indHigh);
 8012820:	1d3b      	adds	r3, r7, #4
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	1d3b      	adds	r3, r7, #4
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	33f0      	adds	r3, #240	; 0xf0
 801282a:	4619      	mov	r1, r3
 801282c:	4610      	mov	r0, r2
 801282e:	f7fd f8b5 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indFuel);
 8012832:	1d3b      	adds	r3, r7, #4
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	1d3b      	adds	r3, r7, #4
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801283e:	4619      	mov	r1, r3
 8012840:	4610      	mov	r0, r2
 8012842:	f7fd f8ab 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indOil);
 8012846:	1d3b      	adds	r3, r7, #4
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	1d3b      	adds	r3, r7, #4
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8012852:	4619      	mov	r1, r3
 8012854:	4610      	mov	r0, r2
 8012856:	f7fd f8a1 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indBatt);
 801285a:	1d3b      	adds	r3, r7, #4
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	1d3b      	adds	r3, r7, #4
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8012866:	4619      	mov	r1, r3
 8012868:	4610      	mov	r0, r2
 801286a:	f7fd f897 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indPark);
 801286e:	1d3b      	adds	r3, r7, #4
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	1d3b      	adds	r3, r7, #4
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801287a:	4619      	mov	r1, r3
 801287c:	4610      	mov	r0, r2
 801287e:	f7fd f88d 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indDTC);
 8012882:	1d3b      	adds	r3, r7, #4
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	1d3b      	adds	r3, r7, #4
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801288e:	4619      	mov	r1, r3
 8012890:	4610      	mov	r0, r2
 8012892:	f7fd f883 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indECT);
 8012896:	1d3b      	adds	r3, r7, #4
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	1d3b      	adds	r3, r7, #4
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80128a2:	4619      	mov	r1, r3
 80128a4:	4610      	mov	r0, r2
 80128a6:	f7fd f879 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLow);
 80128aa:	1d3b      	adds	r3, r7, #4
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	1d3b      	adds	r3, r7, #4
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80128b6:	4619      	mov	r1, r3
 80128b8:	4610      	mov	r0, r2
 80128ba:	f7fd f86f 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_value);
 80128be:	1d3b      	adds	r3, r7, #4
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	1d3b      	adds	r3, r7, #4
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80128ca:	4619      	mov	r1, r3
 80128cc:	4610      	mov	r0, r2
 80128ce:	f7fd f865 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_label);
 80128d2:	1d3b      	adds	r3, r7, #4
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	1d3b      	adds	r3, r7, #4
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80128de:	4619      	mov	r1, r3
 80128e0:	4610      	mov	r0, r2
 80128e2:	f7fd f85b 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_units);
 80128e6:	1d3b      	adds	r3, r7, #4
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	1d3b      	adds	r3, r7, #4
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80128f2:	4619      	mov	r1, r3
 80128f4:	4610      	mov	r0, r2
 80128f6:	f7fd f851 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_value);
 80128fa:	1d3b      	adds	r3, r7, #4
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	1d3b      	adds	r3, r7, #4
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8012906:	4619      	mov	r1, r3
 8012908:	4610      	mov	r0, r2
 801290a:	f7fd f847 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_label);
 801290e:	1d3b      	adds	r3, r7, #4
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	1d3b      	adds	r3, r7, #4
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801291a:	4619      	mov	r1, r3
 801291c:	4610      	mov	r0, r2
 801291e:	f7fd f83d 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_units);
 8012922:	1d3b      	adds	r3, r7, #4
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	1d3b      	adds	r3, r7, #4
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 801292e:	4619      	mov	r1, r3
 8012930:	4610      	mov	r0, r2
 8012932:	f7fd f833 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_value);
 8012936:	1d3b      	adds	r3, r7, #4
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	1d3b      	adds	r3, r7, #4
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8012942:	4619      	mov	r1, r3
 8012944:	4610      	mov	r0, r2
 8012946:	f7fd f829 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_label);
 801294a:	1d3b      	adds	r3, r7, #4
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	1d3b      	adds	r3, r7, #4
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012956:	4619      	mov	r1, r3
 8012958:	4610      	mov	r0, r2
 801295a:	f7fd f81f 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_units);
 801295e:	1d3b      	adds	r3, r7, #4
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	1d3b      	adds	r3, r7, #4
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 801296a:	4619      	mov	r1, r3
 801296c:	4610      	mov	r0, r2
 801296e:	f7fd f815 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_value);
 8012972:	1d3b      	adds	r3, r7, #4
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	1d3b      	adds	r3, r7, #4
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801297e:	4619      	mov	r1, r3
 8012980:	4610      	mov	r0, r2
 8012982:	f7fd f80b 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_label);
 8012986:	1d3b      	adds	r3, r7, #4
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	1d3b      	adds	r3, r7, #4
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f7fd f801 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_units);
 801299a:	1d3b      	adds	r3, r7, #4
 801299c:	681a      	ldr	r2, [r3, #0]
 801299e:	1d3b      	adds	r3, r7, #4
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80129a6:	4619      	mov	r1, r3
 80129a8:	4610      	mov	r0, r2
 80129aa:	f7fc fff7 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_value);
 80129ae:	1d3b      	adds	r3, r7, #4
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	1d3b      	adds	r3, r7, #4
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80129ba:	4619      	mov	r1, r3
 80129bc:	4610      	mov	r0, r2
 80129be:	f7fc ffed 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_label);
 80129c2:	1d3b      	adds	r3, r7, #4
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	1d3b      	adds	r3, r7, #4
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80129ce:	4619      	mov	r1, r3
 80129d0:	4610      	mov	r0, r2
 80129d2:	f7fc ffe3 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_units);
 80129d6:	1d3b      	adds	r3, r7, #4
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	1d3b      	adds	r3, r7, #4
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80129e2:	4619      	mov	r1, r3
 80129e4:	4610      	mov	r0, r2
 80129e6:	f7fc ffd9 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_value);
 80129ea:	1d3b      	adds	r3, r7, #4
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	1d3b      	adds	r3, r7, #4
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80129f6:	4619      	mov	r1, r3
 80129f8:	4610      	mov	r0, r2
 80129fa:	f7fc ffcf 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_label);
 80129fe:	1d3b      	adds	r3, r7, #4
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	1d3b      	adds	r3, r7, #4
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	f7fc ffc5 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_units);
 8012a12:	1d3b      	adds	r3, r7, #4
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	1d3b      	adds	r3, r7, #4
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8012a1e:	4619      	mov	r1, r3
 8012a20:	4610      	mov	r0, r2
 8012a22:	e003      	b.n	8012a2c <_ZN15Screen1ViewBaseC1Ev+0x2b9c>
 8012a24:	2000675c 	.word	0x2000675c
 8012a28:	0802e334 	.word	0x0802e334
 8012a2c:	f7fc ffb6 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_value);
 8012a30:	1d3b      	adds	r3, r7, #4
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	1d3b      	adds	r3, r7, #4
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f7fc ffac 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_label);
 8012a44:	1d3b      	adds	r3, r7, #4
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	1d3b      	adds	r3, r7, #4
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8012a50:	4619      	mov	r1, r3
 8012a52:	4610      	mov	r0, r2
 8012a54:	f7fc ffa2 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_units);
 8012a58:	1d3b      	adds	r3, r7, #4
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	1d3b      	adds	r3, r7, #4
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8012a64:	4619      	mov	r1, r3
 8012a66:	4610      	mov	r0, r2
 8012a68:	f7fc ff98 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_value);
 8012a6c:	1d3b      	adds	r3, r7, #4
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	1d3b      	adds	r3, r7, #4
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4610      	mov	r0, r2
 8012a7c:	f7fc ff8e 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_label);
 8012a80:	1d3b      	adds	r3, r7, #4
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	1d3b      	adds	r3, r7, #4
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	4610      	mov	r0, r2
 8012a90:	f7fc ff84 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_units);
 8012a94:	1d3b      	adds	r3, r7, #4
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	1d3b      	adds	r3, r7, #4
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4610      	mov	r0, r2
 8012aa4:	f7fc ff7a 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8012aa8:	1d3b      	adds	r3, r7, #4
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	1d3b      	adds	r3, r7, #4
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	4610      	mov	r0, r2
 8012ab8:	f7fc ff70 	bl	800f99c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012abc:	1d3b      	adds	r3, r7, #4
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f207 478c 	addw	r7, r7, #1164	; 0x48c
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd90      	pop	{r4, r7, pc}
 8012aca:	bf00      	nop

08012acc <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]

}
 8012ad4:	bf00      	nop
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f009 fb82 	bl	801c1f4 <_ZN8touchgfx6ScreenC1Ev>
 8012af0:	4a05      	ldr	r2, [pc, #20]	; (8012b08 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	601a      	str	r2, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2200      	movs	r2, #0
 8012afa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	4618      	mov	r0, r3
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	0802ebf0 	.word	0x0802ebf0

08012b0c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	4a05      	ldr	r2, [pc, #20]	; (8012b2c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	601a      	str	r2, [r3, #0]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7fc fd85 	bl	800f62c <_ZN8touchgfx8DrawableD1Ev>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	0802f600 	.word	0x0802f600

08012b30 <_ZN8touchgfx9ContainerD0Ev>:
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff ffe7 	bl	8012b0c <_ZN8touchgfx9ContainerD1Ev>
 8012b3e:	212c      	movs	r1, #44	; 0x2c
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f018 ff6c 	bl	802ba1e <_ZdlPvj>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	4a05      	ldr	r2, [pc, #20]	; (8012b70 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	601a      	str	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fc ff5f 	bl	800fa24 <_ZN8touchgfx6WidgetD1Ev>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	08030460 	.word	0x08030460

08012b74 <_ZN8touchgfx3BoxD0Ev>:
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff ffe7 	bl	8012b50 <_ZN8touchgfx3BoxD1Ev>
 8012b82:	212c      	movs	r1, #44	; 0x2c
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f018 ff4a 	bl	802ba1e <_ZdlPvj>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	4a05      	ldr	r2, [pc, #20]	; (8012bb4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	601a      	str	r2, [r3, #0]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fc ff3d 	bl	800fa24 <_ZN8touchgfx6WidgetD1Ev>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4618      	mov	r0, r3
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	080306cc 	.word	0x080306cc

08012bb8 <_ZN8touchgfx5ImageD0Ev>:
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7ff ffe7 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 8012bc6:	212c      	movs	r1, #44	; 0x2c
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f018 ff28 	bl	802ba1e <_ZdlPvj>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	4a05      	ldr	r2, [pc, #20]	; (8012bf8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fc ffe5 	bl	800fbb8 <_ZN8touchgfx8TextAreaD1Ev>
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	08030624 	.word	0x08030624

08012bfc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7ff ffe7 	bl	8012bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c0a:	2140      	movs	r1, #64	; 0x40
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f018 ff06 	bl	802ba1e <_ZdlPvj>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	4a0a      	ldr	r2, [pc, #40]	; (8012c50 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	601a      	str	r2, [r3, #0]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3358      	adds	r3, #88	; 0x58
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7ff ff6c 	bl	8012b0c <_ZN8touchgfx9ContainerD1Ev>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	332c      	adds	r3, #44	; 0x2c
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ff ffab 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7ff ff63 	bl	8012b0c <_ZN8touchgfx9ContainerD1Ev>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	0802f410 	.word	0x0802f410

08012c54 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7ff ffdd 	bl	8012c1c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012c62:	21b0      	movs	r1, #176	; 0xb0
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f018 feda 	bl	802ba1e <_ZdlPvj>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}

08012c74 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	4a05      	ldr	r2, [pc, #20]	; (8012c94 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	601a      	str	r2, [r3, #0]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7ff ff85 	bl	8012b94 <_ZN8touchgfx5ImageD1Ev>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	080301e8 	.word	0x080301e8

08012c98 <_ZN8touchgfx13TextureMapperD0Ev>:
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7ff ffe7 	bl	8012c74 <_ZN8touchgfx13TextureMapperD1Ev>
 8012ca6:	2190      	movs	r1, #144	; 0x90
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f018 feb8 	bl	802ba1e <_ZdlPvj>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	4a05      	ldr	r2, [pc, #20]	; (8012cd8 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7fc feab 	bl	800fa24 <_ZN8touchgfx6WidgetD1Ev>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	0803011c 	.word	0x0803011c

08012cdc <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7ff ffe7 	bl	8012cb8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012cea:	2130      	movs	r1, #48	; 0x30
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f018 fe96 	bl	802ba1e <_ZdlPvj>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	4a05      	ldr	r2, [pc, #20]	; (8012d1c <_ZN8touchgfx6CircleD1Ev+0x20>)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	601a      	str	r2, [r3, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff ffd3 	bl	8012cb8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	0803003c 	.word	0x0803003c

08012d20 <_ZN8touchgfx6CircleD0Ev>:
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff ffe7 	bl	8012cfc <_ZN8touchgfx6CircleD1Ev>
 8012d2e:	214c      	movs	r1, #76	; 0x4c
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f018 fe74 	bl	802ba1e <_ZdlPvj>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	4a0b      	ldr	r2, [pc, #44]	; (8012d78 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	601a      	str	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff ffd1 	bl	8012cfc <_ZN8touchgfx6CircleD1Ev>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	33b0      	adds	r3, #176	; 0xb0
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7ff ff88 	bl	8012c74 <_ZN8touchgfx13TextureMapperD1Ev>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff ff58 	bl	8012c1c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3708      	adds	r7, #8
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	08030508 	.word	0x08030508

08012d7c <_ZN8touchgfx5GaugeD0Ev>:
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7ff ffdb 	bl	8012d40 <_ZN8touchgfx5GaugeD1Ev>
 8012d8a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f018 fe45 	bl	802ba1e <_ZdlPvj>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	4618      	mov	r0, r3
 8012d98:	3708      	adds	r7, #8
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
	...

08012da0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012da0:	b480      	push	{r7}
 8012da2:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012da4:	4b02      	ldr	r3, [pc, #8]	; (8012db0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr
 8012db0:	0802ec80 	.word	0x0802ec80

08012db4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012db4:	b480      	push	{r7}
 8012db6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012db8:	230c      	movs	r3, #12
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr

08012dc4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8012dc4:	b480      	push	{r7}
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	460b      	mov	r3, r1
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8012dd2:	2300      	movs	r3, #0
    }
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3714      	adds	r7, #20
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012de8:	2300      	movs	r3, #0
    }
 8012dea:	4618      	mov	r0, r3
 8012dec:	370c      	adds	r7, #12
 8012dee:	46bd      	mov	sp, r7
 8012df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df4:	4770      	bx	lr

08012df6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8012df6:	b480      	push	{r7}
 8012df8:	b083      	sub	sp, #12
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012dfe:	2300      	movs	r3, #0
    }
 8012e00:	4618      	mov	r0, r3
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012e0c:	b480      	push	{r7}
 8012e0e:	b085      	sub	sp, #20
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	4613      	mov	r3, r2
 8012e18:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012e1a:	4a07      	ldr	r2, [pc, #28]	; (8012e38 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012e20:	4a06      	ldr	r2, [pc, #24]	; (8012e3c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012e26:	4a06      	ldr	r2, [pc, #24]	; (8012e40 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012e28:	88fb      	ldrh	r3, [r7, #6]
 8012e2a:	8013      	strh	r3, [r2, #0]
    }
 8012e2c:	bf00      	nop
 8012e2e:	3714      	adds	r7, #20
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr
 8012e38:	20006750 	.word	0x20006750
 8012e3c:	20006758 	.word	0x20006758
 8012e40:	20006754 	.word	0x20006754

08012e44 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012e44:	b40e      	push	{r1, r2, r3}
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b085      	sub	sp, #20
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8012e4e:	f107 0320 	add.w	r3, r7, #32
 8012e52:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	69fa      	ldr	r2, [r7, #28]
 8012e58:	2100      	movs	r1, #0
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f008 fcbe 	bl	801b7dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012e60:	4603      	mov	r3, r0
 8012e62:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012e64:	89fb      	ldrh	r3, [r7, #14]
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3714      	adds	r7, #20
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e70:	b003      	add	sp, #12
 8012e72:	4770      	bx	lr

08012e74 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012e74:	b40c      	push	{r2, r3}
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b084      	sub	sp, #16
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	460b      	mov	r3, r1
 8012e80:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8012e82:	f107 031c 	add.w	r3, r7, #28
 8012e86:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8012e88:	78f9      	ldrb	r1, [r7, #3]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	69ba      	ldr	r2, [r7, #24]
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f008 fca4 	bl	801b7dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012e94:	4603      	mov	r3, r0
 8012e96:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012e98:	89fb      	ldrh	r3, [r7, #14]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ea4:	b002      	add	sp, #8
 8012ea6:	4770      	bx	lr

08012ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b08a      	sub	sp, #40	; 0x28
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d016      	beq.n	8012eea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	331a      	adds	r3, #26
 8012ec0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8012ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec4:	8adb      	ldrh	r3, [r3, #22]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d105      	bne.n	8012ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8012eca:	4b43      	ldr	r3, [pc, #268]	; (8012fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012ecc:	4a43      	ldr	r2, [pc, #268]	; (8012fdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012ece:	21bf      	movs	r1, #191	; 0xbf
 8012ed0:	4843      	ldr	r0, [pc, #268]	; (8012fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012ed2:	f019 fbc3 	bl	802c65c <__assert_func>
            return buffer[pos];
 8012ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed8:	8a9b      	ldrh	r3, [r3, #20]
 8012eda:	461a      	mov	r2, r3
 8012edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ede:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d001      	beq.n	8012eea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e000      	b.n	8012eec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8012eea:	2300      	movs	r3, #0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d06a      	beq.n	8012fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f00a f88d 	bl	801d010 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	331a      	adds	r3, #26
 8012efa:	623b      	str	r3, [r7, #32]
 8012efc:	2301      	movs	r3, #1
 8012efe:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8012f00:	6a3b      	ldr	r3, [r7, #32]
 8012f02:	8adb      	ldrh	r3, [r3, #22]
 8012f04:	8bfa      	ldrh	r2, [r7, #30]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d305      	bcc.n	8012f16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012f0a:	4b36      	ldr	r3, [pc, #216]	; (8012fe4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8012f0c:	4a36      	ldr	r2, [pc, #216]	; (8012fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012f0e:	21c4      	movs	r1, #196	; 0xc4
 8012f10:	4833      	ldr	r0, [pc, #204]	; (8012fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012f12:	f019 fba3 	bl	802c65c <__assert_func>
            const uint16_t index = pos + offset;
 8012f16:	6a3b      	ldr	r3, [r7, #32]
 8012f18:	8a9a      	ldrh	r2, [r3, #20]
 8012f1a:	8bfb      	ldrh	r3, [r7, #30]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8012f20:	8bbb      	ldrh	r3, [r7, #28]
 8012f22:	2b09      	cmp	r3, #9
 8012f24:	d801      	bhi.n	8012f2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012f26:	8bbb      	ldrh	r3, [r7, #28]
 8012f28:	e001      	b.n	8012f2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012f2a:	8bbb      	ldrh	r3, [r7, #28]
 8012f2c:	3b0a      	subs	r3, #10
 8012f2e:	6a3a      	ldr	r2, [r7, #32]
 8012f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f34:	f640 123f 	movw	r2, #2367	; 0x93f
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	bf0c      	ite	eq
 8012f3c:	2301      	moveq	r3, #1
 8012f3e:	2300      	movne	r3, #0
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d03f      	beq.n	8012fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	331a      	adds	r3, #26
 8012f4a:	687a      	ldr	r2, [r7, #4]
 8012f4c:	321a      	adds	r2, #26
 8012f4e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012f50:	68ba      	ldr	r2, [r7, #8]
 8012f52:	8ad2      	ldrh	r2, [r2, #22]
 8012f54:	2a00      	cmp	r2, #0
 8012f56:	d105      	bne.n	8012f64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8012f58:	4b1f      	ldr	r3, [pc, #124]	; (8012fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012f5a:	4a20      	ldr	r2, [pc, #128]	; (8012fdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012f5c:	21bf      	movs	r1, #191	; 0xbf
 8012f5e:	4820      	ldr	r0, [pc, #128]	; (8012fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012f60:	f019 fb7c 	bl	802c65c <__assert_func>
            return buffer[pos];
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	8a92      	ldrh	r2, [r2, #20]
 8012f68:	4611      	mov	r1, r2
 8012f6a:	68ba      	ldr	r2, [r7, #8]
 8012f6c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012f70:	613b      	str	r3, [r7, #16]
 8012f72:	4613      	mov	r3, r2
 8012f74:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	8adb      	ldrh	r3, [r3, #22]
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d806      	bhi.n	8012f8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8012f7e:	4b1b      	ldr	r3, [pc, #108]	; (8012fec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8012f80:	4a1b      	ldr	r2, [pc, #108]	; (8012ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8012f82:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8012f86:	4816      	ldr	r0, [pc, #88]	; (8012fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012f88:	f019 fb68 	bl	802c65c <__assert_func>
            const uint16_t index = pos + 1;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	8a9b      	ldrh	r3, [r3, #20]
 8012f90:	3301      	adds	r3, #1
 8012f92:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8012f94:	89bb      	ldrh	r3, [r7, #12]
 8012f96:	2b09      	cmp	r3, #9
 8012f98:	d801      	bhi.n	8012f9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8012f9a:	89bb      	ldrh	r3, [r7, #12]
 8012f9c:	e000      	b.n	8012fa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	693a      	ldr	r2, [r7, #16]
 8012fa2:	89f9      	ldrh	r1, [r7, #14]
 8012fa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8012fa8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	331a      	adds	r3, #26
 8012fae:	61bb      	str	r3, [r7, #24]
 8012fb0:	f640 133f 	movw	r3, #2367	; 0x93f
 8012fb4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	8a9b      	ldrh	r3, [r3, #20]
 8012fba:	4619      	mov	r1, r3
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	8afa      	ldrh	r2, [r7, #22]
 8012fc0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8012fc4:	bf00      	nop
        }
    }
    return getNextChar();
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f009 ff06 	bl	801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012fcc:	4603      	mov	r3, r0
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3728      	adds	r7, #40	; 0x28
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	0802e338 	.word	0x0802e338
 8012fdc:	0802e344 	.word	0x0802e344
 8012fe0:	0802e3f0 	.word	0x0802e3f0
 8012fe4:	0802e438 	.word	0x0802e438
 8012fe8:	0802e448 	.word	0x0802e448
 8012fec:	0802e51c 	.word	0x0802e51c
 8012ff0:	0802e528 	.word	0x0802e528

08012ff4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f009 fea5 	bl	801cd4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8013002:	bf00      	nop
 8013004:	3708      	adds	r7, #8
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}

0801300a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801300a:	b580      	push	{r7, lr}
 801300c:	b088      	sub	sp, #32
 801300e:	af02      	add	r7, sp, #8
 8013010:	60f8      	str	r0, [r7, #12]
 8013012:	1d38      	adds	r0, r7, #4
 8013014:	e880 0006 	stmia.w	r0, {r1, r2}
 8013018:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801301a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801301e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8013020:	1d39      	adds	r1, r7, #4
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	9301      	str	r3, [sp, #4]
 8013026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	683a      	ldr	r2, [r7, #0]
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f007 f8c9 	bl	801a1c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8013034:	bf00      	nop
 8013036:	3718      	adds	r7, #24
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	4603      	mov	r3, r0
 8013044:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801304a:	88fb      	ldrh	r3, [r7, #6]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d127      	bne.n	80130a0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8013050:	88fb      	ldrh	r3, [r7, #6]
 8013052:	4a1e      	ldr	r2, [pc, #120]	; (80130cc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d016      	beq.n	801308a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 801305c:	88fb      	ldrh	r3, [r7, #6]
 801305e:	4a1b      	ldr	r2, [pc, #108]	; (80130cc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8013060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013064:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	4413      	add	r3, r2
 801306e:	4a18      	ldr	r2, [pc, #96]	; (80130d0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013070:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	68ba      	ldr	r2, [r7, #8]
 8013078:	4413      	add	r3, r2
 801307a:	4a16      	ldr	r2, [pc, #88]	; (80130d4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801307c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	689b      	ldr	r3, [r3, #8]
 8013082:	68ba      	ldr	r2, [r7, #8]
 8013084:	4413      	add	r3, r2
 8013086:	60fb      	str	r3, [r7, #12]
 8013088:	e00a      	b.n	80130a0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801308a:	4b11      	ldr	r3, [pc, #68]	; (80130d0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801308c:	4a12      	ldr	r2, [pc, #72]	; (80130d8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801308e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8013090:	4a12      	ldr	r2, [pc, #72]	; (80130dc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8013092:	4b10      	ldr	r3, [pc, #64]	; (80130d4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013094:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8013096:	88fb      	ldrh	r3, [r7, #6]
 8013098:	4a11      	ldr	r2, [pc, #68]	; (80130e0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801309e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d00d      	beq.n	80130c2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80130a6:	4a0f      	ldr	r2, [pc, #60]	; (80130e4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80130a8:	88fb      	ldrh	r3, [r7, #6]
 80130aa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80130ac:	f000 f83e 	bl	801312c <_ZN17TypedTextDatabase8getFontsEv>
 80130b0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80130b2:	f000 f833 	bl	801311c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80130b6:	4603      	mov	r3, r0
 80130b8:	461a      	mov	r2, r3
 80130ba:	4621      	mov	r1, r4
 80130bc:	68f8      	ldr	r0, [r7, #12]
 80130be:	f7ff fea5 	bl	8012e0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80130c2:	bf00      	nop
 80130c4:	3714      	adds	r7, #20
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd90      	pop	{r4, r7, pc}
 80130ca:	bf00      	nop
 80130cc:	20004adc 	.word	0x20004adc
 80130d0:	20004ae4 	.word	0x20004ae4
 80130d4:	20004ae8 	.word	0x20004ae8
 80130d8:	080a316c 	.word	0x080a316c
 80130dc:	080a30ac 	.word	0x080a30ac
 80130e0:	080a31e8 	.word	0x080a31e8
 80130e4:	20004ae0 	.word	0x20004ae0

080130e8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	460b      	mov	r3, r1
 80130f2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80130f4:	4b07      	ldr	r3, [pc, #28]	; (8013114 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	4b07      	ldr	r3, [pc, #28]	; (8013118 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80130fa:	6819      	ldr	r1, [r3, #0]
 80130fc:	887b      	ldrh	r3, [r7, #2]
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	440b      	add	r3, r1
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	005b      	lsls	r3, r3, #1
 8013106:	4413      	add	r3, r2
}
 8013108:	4618      	mov	r0, r3
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr
 8013114:	20004ae4 	.word	0x20004ae4
 8013118:	20004ae8 	.word	0x20004ae8

0801311c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801311c:	b480      	push	{r7}
 801311e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8013120:	2330      	movs	r3, #48	; 0x30
}
 8013122:	4618      	mov	r0, r3
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr

0801312c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801312c:	b480      	push	{r7}
 801312e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8013130:	4b02      	ldr	r3, [pc, #8]	; (801313c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8013132:	4618      	mov	r0, r3
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr
 801313c:	20004aec 	.word	0x20004aec

08013140 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d10e      	bne.n	801316e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013156:	4293      	cmp	r3, r2
 8013158:	d109      	bne.n	801316e <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_55_4bpp()),
 801315a:	f7fb fc8d 	bl	800ea78 <_Z27getFont_bahnschrift_55_4bppv>
 801315e:	4603      	mov	r3, r0
};
 8013160:	4a05      	ldr	r2, [pc, #20]	; (8013178 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8013162:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_20_4bpp())
 8013164:	f7fb fc32 	bl	800e9cc <_Z27getFont_bahnschrift_20_4bppv>
 8013168:	4603      	mov	r3, r0
};
 801316a:	4a03      	ldr	r2, [pc, #12]	; (8013178 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 801316c:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 801316e:	bf00      	nop
 8013170:	3708      	adds	r7, #8
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
 8013176:	bf00      	nop
 8013178:	20004aec 	.word	0x20004aec

0801317c <_GLOBAL__sub_I_touchgfx_fonts>:
 801317c:	b580      	push	{r7, lr}
 801317e:	af00      	add	r7, sp, #0
 8013180:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013184:	2001      	movs	r0, #1
 8013186:	f7ff ffdb 	bl	8013140 <_Z41__static_initialization_and_destruction_0ii>
 801318a:	bd80      	pop	{r7, pc}

0801318c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	4a05      	ldr	r2, [pc, #20]	; (80131ac <_ZN19FrontendApplicationD1Ev+0x20>)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	601a      	str	r2, [r3, #0]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	f7fb fe87 	bl	800eeb0 <_ZN23FrontendApplicationBaseD1Ev>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	0802edcc 	.word	0x0802edcc

080131b0 <_ZN19FrontendApplicationD0Ev>:
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f7ff ffe7 	bl	801318c <_ZN19FrontendApplicationD1Ev>
 80131be:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f018 fc2b 	bl	802ba1e <_ZdlPvj>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	4618      	mov	r0, r3
 80131cc:	3708      	adds	r7, #8
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b082      	sub	sp, #8
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80131e0:	4618      	mov	r0, r3
 80131e2:	f000 f82d 	bl	8013240 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f007 fb5d 	bl	801a8a8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
	...

080131f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	68b9      	ldr	r1, [r7, #8]
 801320a:	4618      	mov	r0, r3
 801320c:	f7fb febc 	bl	800ef88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8013210:	4a03      	ldr	r2, [pc, #12]	; (8013220 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	601a      	str	r2, [r3, #0]
{

}
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	4618      	mov	r0, r3
 801321a:	3710      	adds	r7, #16
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	0802edcc 	.word	0x0802edcc

08013224 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8013224:	b480      	push	{r7}
 8013226:	b083      	sub	sp, #12
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2200      	movs	r2, #0
 8013230:	601a      	str	r2, [r3, #0]
{

}
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	4618      	mov	r0, r3
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <_ZN5Model4tickEv>:

void Model::tick()
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]

}
 8013248:	bf00      	nop
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr

08013254 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
    {
    }
 801325c:	bf00      	nop
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8013268:	b480      	push	{r7}
 801326a:	b083      	sub	sp, #12
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
    {
    }
 8013270:	bf00      	nop
 8013272:	370c      	adds	r7, #12
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
    {
 8013284:	4a04      	ldr	r2, [pc, #16]	; (8013298 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	601a      	str	r2, [r3, #0]
    }
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	0802ee48 	.word	0x0802ee48

0801329c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
    }
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f7ff ffe9 	bl	801327c <_ZN8touchgfx9PresenterD1Ev>
 80132aa:	2104      	movs	r1, #4
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f018 fbb6 	bl	802ba1e <_ZdlPvj>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	3708      	adds	r7, #8
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
    {
 80132c4:	4a04      	ldr	r2, [pc, #16]	; (80132d8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	601a      	str	r2, [r3, #0]
    }
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4618      	mov	r0, r3
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr
 80132d8:	0802ee48 	.word	0x0802ee48

080132dc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	4a06      	ldr	r2, [pc, #24]	; (8013300 <_ZN13ModelListenerC1Ev+0x24>)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2200      	movs	r2, #0
 80132ee:	605a      	str	r2, [r3, #4]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4618      	mov	r0, r3
 80132f4:	370c      	adds	r7, #12
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop
 8013300:	0802ee38 	.word	0x0802ee38

08013304 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013304:	b480      	push	{r7}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	4a04      	ldr	r2, [pc, #16]	; (8013320 <_ZN13ModelListenerD1Ev+0x1c>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	601a      	str	r2, [r3, #0]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	0802ee38 	.word	0x0802ee38

08013324 <_ZN13ModelListenerD0Ev>:
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7ff ffe9 	bl	8013304 <_ZN13ModelListenerD1Ev>
 8013332:	2108      	movs	r1, #8
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f018 fb72 	bl	802ba1e <_ZdlPvj>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	4a09      	ldr	r2, [pc, #36]	; (8013374 <_ZN16Screen1PresenterD1Ev+0x30>)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	4a09      	ldr	r2, [pc, #36]	; (8013378 <_ZN16Screen1PresenterD1Ev+0x34>)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	605a      	str	r2, [r3, #4]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	3304      	adds	r3, #4
 801335c:	4618      	mov	r0, r3
 801335e:	f7ff ffd1 	bl	8013304 <_ZN13ModelListenerD1Ev>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	4618      	mov	r0, r3
 8013366:	f7ff ff89 	bl	801327c <_ZN8touchgfx9PresenterD1Ev>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	0802ee10 	.word	0x0802ee10
 8013378:	0802ee28 	.word	0x0802ee28

0801337c <_ZThn4_N16Screen1PresenterD1Ev>:
 801337c:	f1a0 0004 	sub.w	r0, r0, #4
 8013380:	e7e0      	b.n	8013344 <_ZN16Screen1PresenterD1Ev>
 8013382:	bf00      	nop

08013384 <_ZN16Screen1PresenterD0Ev>:
 8013384:	b580      	push	{r7, lr}
 8013386:	b082      	sub	sp, #8
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f7ff ffd9 	bl	8013344 <_ZN16Screen1PresenterD1Ev>
 8013392:	2110      	movs	r1, #16
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f018 fb42 	bl	802ba1e <_ZdlPvj>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4618      	mov	r0, r3
 801339e:	3708      	adds	r7, #8
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <_ZThn4_N16Screen1PresenterD0Ev>:
 80133a4:	f1a0 0004 	sub.w	r0, r0, #4
 80133a8:	e7ec      	b.n	8013384 <_ZN16Screen1PresenterD0Ev>
	...

080133ac <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
    : view(v)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7ff ff7f 	bl	80132bc <_ZN8touchgfx9PresenterC1Ev>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	3304      	adds	r3, #4
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7ff ff8a 	bl	80132dc <_ZN13ModelListenerC1Ev>
 80133c8:	4a06      	ldr	r2, [pc, #24]	; (80133e4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	4a06      	ldr	r2, [pc, #24]	; (80133e8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	605a      	str	r2, [r3, #4]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	683a      	ldr	r2, [r7, #0]
 80133d8:	60da      	str	r2, [r3, #12]
{

}
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	4618      	mov	r0, r3
 80133de:	3708      	adds	r7, #8
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	0802ee10 	.word	0x0802ee10
 80133e8:	0802ee28 	.word	0x0802ee28

080133ec <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]

}
 80133f4:	bf00      	nop
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]

}
 8013408:	bf00      	nop
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	460b      	mov	r3, r1
 801341e:	607a      	str	r2, [r7, #4]
 8013420:	ed87 0a00 	vstr	s0, [r7]
 8013424:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8013426:	463b      	mov	r3, r7
 8013428:	8979      	ldrh	r1, [r7, #10]
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f00a febf 	bl	801e1b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8013432:	4603      	mov	r3, r0
    }
 8013434:	4618      	mov	r0, r3
 8013436:	3710      	adds	r7, #16
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	460b      	mov	r3, r1
 8013446:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	78fa      	ldrb	r2, [r7, #3]
 801344c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8013450:	bf00      	nop
 8013452:	370c      	adds	r7, #12
 8013454:	46bd      	mov	sp, r7
 8013456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345a:	4770      	bx	lr

0801345c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	4a05      	ldr	r2, [pc, #20]	; (801347c <_ZN11Screen1ViewD1Ev+0x20>)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4618      	mov	r0, r3
 801346e:	f7fc fc11 	bl	800fc94 <_ZN15Screen1ViewBaseD1Ev>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4618      	mov	r0, r3
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	0802ee60 	.word	0x0802ee60

08013480 <_ZN11Screen1ViewD0Ev>:
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f7ff ffe7 	bl	801345c <_ZN11Screen1ViewD1Ev>
 801348e:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f018 fac3 	bl	802ba1e <_ZdlPvj>
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	4618      	mov	r0, r3
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
	...

080134a4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "main.h"
#include "extern.h"

Screen1View::Screen1View() {
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fc fcee 	bl	800fe90 <_ZN15Screen1ViewBaseC1Ev>
 80134b4:	4a03      	ldr	r2, [pc, #12]	; (80134c4 <_ZN11Screen1ViewC1Ev+0x20>)
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	601a      	str	r2, [r3, #0]

}
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	4618      	mov	r0, r3
 80134be:	3708      	adds	r7, #8
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	0802ee60 	.word	0x0802ee60

080134c8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b088      	sub	sp, #32
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7ff fafa 	bl	8012acc <_ZN15Screen1ViewBase11setupScreenEv>

	Unicode::UnicodeChar buffer[10];

	//.................UNITS.................

	Unicode::strncpy(buffer, "BAR", 10);
 80134d8:	f107 030c 	add.w	r3, r7, #12
 80134dc:	220a      	movs	r2, #10
 80134de:	49d7      	ldr	r1, [pc, #860]	; (801383c <_ZN11Screen1View11setupScreenEv+0x374>)
 80134e0:	4618      	mov	r0, r3
 80134e2:	f00a f93e 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_unitsBuffer, 10, "%s", buffer);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f603 2044 	addw	r0, r3, #2628	; 0xa44
 80134ec:	f107 030c 	add.w	r3, r7, #12
 80134f0:	4ad3      	ldr	r2, [pc, #844]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 80134f2:	210a      	movs	r1, #10
 80134f4:	f00a fc9c 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80134fe:	4618      	mov	r0, r3
 8013500:	f005 faaa 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801350a:	4618      	mov	r0, r3
 801350c:	f008 fa87 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "Lambda", 10);
 8013510:	f107 030c 	add.w	r3, r7, #12
 8013514:	220a      	movs	r2, #10
 8013516:	49cb      	ldr	r1, [pc, #812]	; (8013844 <_ZN11Screen1View11setupScreenEv+0x37c>)
 8013518:	4618      	mov	r0, r3
 801351a:	f00a f922 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_unitsBuffer, 10, "%s", buffer);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f603 307c 	addw	r0, r3, #2940	; 0xb7c
 8013524:	f107 030c 	add.w	r3, r7, #12
 8013528:	4ac5      	ldr	r2, [pc, #788]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 801352a:	210a      	movs	r1, #10
 801352c:	f00a fc80 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8013536:	4618      	mov	r0, r3
 8013538:	f005 fa8e 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8013542:	4618      	mov	r0, r3
 8013544:	f008 fa6b 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8013548:	f107 030c 	add.w	r3, r7, #12
 801354c:	220a      	movs	r2, #10
 801354e:	49bb      	ldr	r1, [pc, #748]	; (801383c <_ZN11Screen1View11setupScreenEv+0x374>)
 8013550:	4618      	mov	r0, r3
 8013552:	f00a f906 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_unitsBuffer, 10, "%s", buffer);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f603 40b4 	addw	r0, r3, #3252	; 0xcb4
 801355c:	f107 030c 	add.w	r3, r7, #12
 8013560:	4ab7      	ldr	r2, [pc, #732]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013562:	210a      	movs	r1, #10
 8013564:	f00a fc64 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 801356e:	4618      	mov	r0, r3
 8013570:	f005 fa72 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 801357a:	4618      	mov	r0, r3
 801357c:	f008 fa4f 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8013580:	f107 030c 	add.w	r3, r7, #12
 8013584:	220a      	movs	r2, #10
 8013586:	49ad      	ldr	r1, [pc, #692]	; (801383c <_ZN11Screen1View11setupScreenEv+0x374>)
 8013588:	4618      	mov	r0, r3
 801358a:	f00a f8ea 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_unitsBuffer, 10, "%s", buffer);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f603 501c 	addw	r0, r3, #3356	; 0xd1c
 8013594:	f107 030c 	add.w	r3, r7, #12
 8013598:	4aa9      	ldr	r2, [pc, #676]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 801359a:	210a      	movs	r1, #10
 801359c:	f00a fc48 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80135a6:	4618      	mov	r0, r3
 80135a8:	f005 fa56 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80135b2:	4618      	mov	r0, r3
 80135b4:	f008 fa33 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 80135b8:	f107 030c 	add.w	r3, r7, #12
 80135bc:	220a      	movs	r2, #10
 80135be:	49a2      	ldr	r1, [pc, #648]	; (8013848 <_ZN11Screen1View11setupScreenEv+0x380>)
 80135c0:	4618      	mov	r0, r3
 80135c2:	f00a f8ce 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_unitsBuffer, 10, "%s", buffer);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f603 30e4 	addw	r0, r3, #3044	; 0xbe4
 80135cc:	f107 030c 	add.w	r3, r7, #12
 80135d0:	4a9b      	ldr	r2, [pc, #620]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 80135d2:	210a      	movs	r1, #10
 80135d4:	f00a fc2c 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80135de:	4618      	mov	r0, r3
 80135e0:	f005 fa3a 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80135ea:	4618      	mov	r0, r3
 80135ec:	f008 fa17 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 80135f0:	f107 030c 	add.w	r3, r7, #12
 80135f4:	220a      	movs	r2, #10
 80135f6:	4994      	ldr	r1, [pc, #592]	; (8013848 <_ZN11Screen1View11setupScreenEv+0x380>)
 80135f8:	4618      	mov	r0, r3
 80135fa:	f00a f8b2 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_unitsBuffer, 10, "%s", buffer);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f603 404c 	addw	r0, r3, #3148	; 0xc4c
 8013604:	f107 030c 	add.w	r3, r7, #12
 8013608:	4a8d      	ldr	r2, [pc, #564]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 801360a:	210a      	movs	r1, #10
 801360c:	f00a fc10 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013616:	4618      	mov	r0, r3
 8013618:	f005 fa1e 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013622:	4618      	mov	r0, r3
 8013624:	f008 f9fb 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "V", 10);
 8013628:	f107 030c 	add.w	r3, r7, #12
 801362c:	220a      	movs	r2, #10
 801362e:	4987      	ldr	r1, [pc, #540]	; (801384c <_ZN11Screen1View11setupScreenEv+0x384>)
 8013630:	4618      	mov	r0, r3
 8013632:	f00a f896 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_unitsBuffer, 10, "%s", buffer);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f603 20ac 	addw	r0, r3, #2732	; 0xaac
 801363c:	f107 030c 	add.w	r3, r7, #12
 8013640:	4a7f      	ldr	r2, [pc, #508]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013642:	210a      	movs	r1, #10
 8013644:	f00a fbf4 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801364e:	4618      	mov	r0, r3
 8013650:	f005 fa02 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801365a:	4618      	mov	r0, r3
 801365c:	f008 f9df 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "%", 10);
 8013660:	f107 030c 	add.w	r3, r7, #12
 8013664:	220a      	movs	r2, #10
 8013666:	497a      	ldr	r1, [pc, #488]	; (8013850 <_ZN11Screen1View11setupScreenEv+0x388>)
 8013668:	4618      	mov	r0, r3
 801366a:	f00a f87a 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_unitsBuffer, 10, "%s", buffer);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f603 3014 	addw	r0, r3, #2836	; 0xb14
 8013674:	f107 030c 	add.w	r3, r7, #12
 8013678:	4a71      	ldr	r2, [pc, #452]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 801367a:	210a      	movs	r1, #10
 801367c:	f00a fbd8 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013686:	4618      	mov	r0, r3
 8013688:	f005 f9e6 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013692:	4618      	mov	r0, r3
 8013694:	f008 f9c3 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	//.................LABELS.................

	Unicode::strncpy(buffer, "MAP", 10);
 8013698:	f107 030c 	add.w	r3, r7, #12
 801369c:	220a      	movs	r2, #10
 801369e:	496d      	ldr	r1, [pc, #436]	; (8013854 <_ZN11Screen1View11setupScreenEv+0x38c>)
 80136a0:	4618      	mov	r0, r3
 80136a2:	f00a f85e 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_labelBuffer, 10, "%s", buffer);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f503 6023 	add.w	r0, r3, #2608	; 0xa30
 80136ac:	f107 030c 	add.w	r3, r7, #12
 80136b0:	4a63      	ldr	r2, [pc, #396]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 80136b2:	210a      	movs	r1, #10
 80136b4:	f00a fbbc 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80136be:	4618      	mov	r0, r3
 80136c0:	f005 f9ca 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80136ca:	4618      	mov	r0, r3
 80136cc:	f008 f9a7 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "AFP", 10);
 80136d0:	f107 030c 	add.w	r3, r7, #12
 80136d4:	220a      	movs	r2, #10
 80136d6:	4960      	ldr	r1, [pc, #384]	; (8013858 <_ZN11Screen1View11setupScreenEv+0x390>)
 80136d8:	4618      	mov	r0, r3
 80136da:	f00a f842 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_labelBuffer, 10, "%s", buffer);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f603 3068 	addw	r0, r3, #2920	; 0xb68
 80136e4:	f107 030c 	add.w	r3, r7, #12
 80136e8:	4a55      	ldr	r2, [pc, #340]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 80136ea:	210a      	movs	r1, #10
 80136ec:	f00a fba0 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80136f6:	4618      	mov	r0, r3
 80136f8:	f005 f9ae 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8013702:	4618      	mov	r0, r3
 8013704:	f008 f98b 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "OIL P", 10);
 8013708:	f107 030c 	add.w	r3, r7, #12
 801370c:	220a      	movs	r2, #10
 801370e:	4953      	ldr	r1, [pc, #332]	; (801385c <_ZN11Screen1View11setupScreenEv+0x394>)
 8013710:	4618      	mov	r0, r3
 8013712:	f00a f826 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_labelBuffer, 10, "%s", buffer);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f503 604a 	add.w	r0, r3, #3232	; 0xca0
 801371c:	f107 030c 	add.w	r3, r7, #12
 8013720:	4a47      	ldr	r2, [pc, #284]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013722:	210a      	movs	r1, #10
 8013724:	f00a fb84 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 801372e:	4618      	mov	r0, r3
 8013730:	f005 f992 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 801373a:	4618      	mov	r0, r3
 801373c:	f008 f96f 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "FUEL P", 10);
 8013740:	f107 030c 	add.w	r3, r7, #12
 8013744:	220a      	movs	r2, #10
 8013746:	4946      	ldr	r1, [pc, #280]	; (8013860 <_ZN11Screen1View11setupScreenEv+0x398>)
 8013748:	4618      	mov	r0, r3
 801374a:	f00a f80a 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_labelBuffer, 10, "%s", buffer);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f603 5008 	addw	r0, r3, #3336	; 0xd08
 8013754:	f107 030c 	add.w	r3, r7, #12
 8013758:	4a39      	ldr	r2, [pc, #228]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 801375a:	210a      	movs	r1, #10
 801375c:	f00a fb68 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013766:	4618      	mov	r0, r3
 8013768:	f005 f976 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013772:	4618      	mov	r0, r3
 8013774:	f008 f953 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "ECT", 10);
 8013778:	f107 030c 	add.w	r3, r7, #12
 801377c:	220a      	movs	r2, #10
 801377e:	4939      	ldr	r1, [pc, #228]	; (8013864 <_ZN11Screen1View11setupScreenEv+0x39c>)
 8013780:	4618      	mov	r0, r3
 8013782:	f009 ffee 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_labelBuffer, 10, "%s", buffer);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f503 603d 	add.w	r0, r3, #3024	; 0xbd0
 801378c:	f107 030c 	add.w	r3, r7, #12
 8013790:	4a2b      	ldr	r2, [pc, #172]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013792:	210a      	movs	r1, #10
 8013794:	f00a fb4c 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801379e:	4618      	mov	r0, r3
 80137a0:	f005 f95a 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80137aa:	4618      	mov	r0, r3
 80137ac:	f008 f937 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "IAT", 10);
 80137b0:	f107 030c 	add.w	r3, r7, #12
 80137b4:	220a      	movs	r2, #10
 80137b6:	492c      	ldr	r1, [pc, #176]	; (8013868 <_ZN11Screen1View11setupScreenEv+0x3a0>)
 80137b8:	4618      	mov	r0, r3
 80137ba:	f009 ffd2 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_labelBuffer, 10, "%s", buffer);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f603 4038 	addw	r0, r3, #3128	; 0xc38
 80137c4:	f107 030c 	add.w	r3, r7, #12
 80137c8:	4a1d      	ldr	r2, [pc, #116]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 80137ca:	210a      	movs	r1, #10
 80137cc:	f00a fb30 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80137d6:	4618      	mov	r0, r3
 80137d8:	f005 f93e 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80137e2:	4618      	mov	r0, r3
 80137e4:	f008 f91b 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BATTERY", 10);
 80137e8:	f107 030c 	add.w	r3, r7, #12
 80137ec:	220a      	movs	r2, #10
 80137ee:	491f      	ldr	r1, [pc, #124]	; (801386c <_ZN11Screen1View11setupScreenEv+0x3a4>)
 80137f0:	4618      	mov	r0, r3
 80137f2:	f009 ffb6 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_labelBuffer, 10, "%s", buffer);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f603 2098 	addw	r0, r3, #2712	; 0xa98
 80137fc:	f107 030c 	add.w	r3, r7, #12
 8013800:	4a0f      	ldr	r2, [pc, #60]	; (8013840 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013802:	210a      	movs	r1, #10
 8013804:	f00a fb14 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801380e:	4618      	mov	r0, r3
 8013810:	f005 f922 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801381a:	4618      	mov	r0, r3
 801381c:	f008 f8ff 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "TPS", 10);
 8013820:	f107 030c 	add.w	r3, r7, #12
 8013824:	220a      	movs	r2, #10
 8013826:	4912      	ldr	r1, [pc, #72]	; (8013870 <_ZN11Screen1View11setupScreenEv+0x3a8>)
 8013828:	4618      	mov	r0, r3
 801382a:	f009 ff9a 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f503 6030 	add.w	r0, r3, #2816	; 0xb00
 8013834:	f107 030c 	add.w	r3, r7, #12
 8013838:	e01c      	b.n	8013874 <_ZN11Screen1View11setupScreenEv+0x3ac>
 801383a:	bf00      	nop
 801383c:	0802e5dc 	.word	0x0802e5dc
 8013840:	0802e5e0 	.word	0x0802e5e0
 8013844:	0802e5e4 	.word	0x0802e5e4
 8013848:	0802e5ec 	.word	0x0802e5ec
 801384c:	0802e5f0 	.word	0x0802e5f0
 8013850:	0802e5f4 	.word	0x0802e5f4
 8013854:	0802e5f8 	.word	0x0802e5f8
 8013858:	0802e5fc 	.word	0x0802e5fc
 801385c:	0802e600 	.word	0x0802e600
 8013860:	0802e608 	.word	0x0802e608
 8013864:	0802e610 	.word	0x0802e610
 8013868:	0802e614 	.word	0x0802e614
 801386c:	0802e618 	.word	0x0802e618
 8013870:	0802e620 	.word	0x0802e620
 8013874:	4a09      	ldr	r2, [pc, #36]	; (801389c <_ZN11Screen1View11setupScreenEv+0x3d4>)
 8013876:	210a      	movs	r1, #10
 8013878:	f00a fada 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013882:	4618      	mov	r0, r3
 8013884:	f005 f8e8 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801388e:	4618      	mov	r0, r3
 8013890:	f008 f8c5 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8013894:	bf00      	nop
 8013896:	3720      	adds	r7, #32
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	0802e5e0 	.word	0x0802e5e0

080138a0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7fc f856 	bl	800f95c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80138b0:	bf00      	nop
 80138b2:	3708      	adds	r7, #8
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b08a      	sub	sp, #40	; 0x28
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	map_value.invalidate();
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80138c6:	4618      	mov	r0, r3
 80138c8:	f008 f8a9 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.MAP * PSI_TO_BAR));
 80138cc:	4bd1      	ldr	r3, [pc, #836]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 80138ce:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 80138d2:	ee07 3a90 	vmov	s15, r3
 80138d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138da:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8013c18 <_ZN11Screen1View15handleTickEventEv+0x360>
 80138de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80138e2:	f107 0308 	add.w	r3, r7, #8
 80138e6:	eeb0 0a67 	vmov.f32	s0, s15
 80138ea:	4acc      	ldr	r2, [pc, #816]	; (8013c1c <_ZN11Screen1View15handleTickEventEv+0x364>)
 80138ec:	2110      	movs	r1, #16
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7ff fd90 	bl	8013414 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(map_valueBuffer, 16, "%s", buffer);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f503 601f 	add.w	r0, r3, #2544	; 0x9f0
 80138fa:	f107 0308 	add.w	r3, r7, #8
 80138fe:	4ac8      	ldr	r2, [pc, #800]	; (8013c20 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8013900:	2110      	movs	r1, #16
 8013902:	f00a fa95 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_value.resizeToCurrentTextWithAlignment();
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801390c:	4618      	mov	r0, r3
 801390e:	f005 f8a3 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_value.invalidate();
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013918:	4618      	mov	r0, r3
 801391a:	f008 f880 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	batt_value.invalidate();
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013924:	4618      	mov	r0, r3
 8013926:	f008 f87a 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f", (Current_Status.BATT / 100.00f));
 801392a:	4bba      	ldr	r3, [pc, #744]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 801392c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013930:	ee07 3a90 	vmov	s15, r3
 8013934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013938:	eddf 6aba 	vldr	s13, [pc, #744]	; 8013c24 <_ZN11Screen1View15handleTickEventEv+0x36c>
 801393c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013940:	f107 0308 	add.w	r3, r7, #8
 8013944:	eeb0 0a47 	vmov.f32	s0, s14
 8013948:	4ab4      	ldr	r2, [pc, #720]	; (8013c1c <_ZN11Screen1View15handleTickEventEv+0x364>)
 801394a:	2110      	movs	r1, #16
 801394c:	4618      	mov	r0, r3
 801394e:	f7ff fd61 	bl	8013414 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(batt_valueBuffer, 16, "%s", buffer);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f603 2058 	addw	r0, r3, #2648	; 0xa58
 8013958:	f107 0308 	add.w	r3, r7, #8
 801395c:	4ab0      	ldr	r2, [pc, #704]	; (8013c20 <_ZN11Screen1View15handleTickEventEv+0x368>)
 801395e:	2110      	movs	r1, #16
 8013960:	f00a fa66 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	batt_value.resizeToCurrentTextWithAlignment();
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f503 7344 	add.w	r3, r3, #784	; 0x310
 801396a:	4618      	mov	r0, r3
 801396c:	f005 f874 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	batt_value.invalidate();
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013976:	4618      	mov	r0, r3
 8013978:	f008 f851 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	tps_value.invalidate();
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8013982:	4618      	mov	r0, r3
 8013984:	f008 f84b 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(tps_valueBuffer, 16, "%d", (Current_Status.TPS / 10));
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 801398e:	4ba1      	ldr	r3, [pc, #644]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013994:	4aa4      	ldr	r2, [pc, #656]	; (8013c28 <_ZN11Screen1View15handleTickEventEv+0x370>)
 8013996:	fba2 2303 	umull	r2, r3, r2, r3
 801399a:	08db      	lsrs	r3, r3, #3
 801399c:	b29b      	uxth	r3, r3
 801399e:	4aa3      	ldr	r2, [pc, #652]	; (8013c2c <_ZN11Screen1View15handleTickEventEv+0x374>)
 80139a0:	2110      	movs	r1, #16
 80139a2:	f00a fa45 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tps_value.resizeToCurrentTextWithAlignment();
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80139ac:	4618      	mov	r0, r3
 80139ae:	f005 f853 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	tps_value.invalidate();
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80139b8:	4618      	mov	r0, r3
 80139ba:	f008 f830 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	lambda_value.invalidate();
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80139c4:	4618      	mov	r0, r3
 80139c6:	f008 f82a 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f",
			(Current_Status.LAMBDA1 * AFR_TO_LAMBDA / 100.00f));
 80139ca:	4b92      	ldr	r3, [pc, #584]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 80139cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80139ce:	ee07 3a90 	vmov	s15, r3
 80139d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139d6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8013c30 <_ZN11Screen1View15handleTickEventEv+0x378>
 80139da:	ee67 7a87 	vmul.f32	s15, s15, s14
	Unicode::snprintfFloat(buffer, 16, "%.2f",
 80139de:	eddf 6a91 	vldr	s13, [pc, #580]	; 8013c24 <_ZN11Screen1View15handleTickEventEv+0x36c>
 80139e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80139e6:	f107 0308 	add.w	r3, r7, #8
 80139ea:	eeb0 0a47 	vmov.f32	s0, s14
 80139ee:	4a91      	ldr	r2, [pc, #580]	; (8013c34 <_ZN11Screen1View15handleTickEventEv+0x37c>)
 80139f0:	2110      	movs	r1, #16
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7ff fd0e 	bl	8013414 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(lambda_valueBuffer, 16, "%s", buffer);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f603 3028 	addw	r0, r3, #2856	; 0xb28
 80139fe:	f107 0308 	add.w	r3, r7, #8
 8013a02:	4a87      	ldr	r2, [pc, #540]	; (8013c20 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8013a04:	2110      	movs	r1, #16
 8013a06:	f00a fa13 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	lambda_value.resizeToCurrentTextWithAlignment();
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013a10:	4618      	mov	r0, r3
 8013a12:	f005 f821 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_value.invalidate();
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f007 fffe 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	ect_value.invalidate();
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f007 fff8 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(ect_valueBuffer, 16, "%d", Current_Status.ECT - 50);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8013a34:	4b77      	ldr	r3, [pc, #476]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a3a:	3b32      	subs	r3, #50	; 0x32
 8013a3c:	4a7b      	ldr	r2, [pc, #492]	; (8013c2c <_ZN11Screen1View15handleTickEventEv+0x374>)
 8013a3e:	2110      	movs	r1, #16
 8013a40:	f00a f9f6 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ect_value.resizeToCurrentTextWithAlignment();
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f005 f804 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ect_value.invalidate();
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8013a56:	4618      	mov	r0, r3
 8013a58:	f007 ffe1 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	iat_value.invalidate();
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8013a62:	4618      	mov	r0, r3
 8013a64:	f007 ffdb 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(iat_valueBuffer, 16, "%d", Current_Status.IAT - 50);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f603 30f8 	addw	r0, r3, #3064	; 0xbf8
 8013a6e:	4b69      	ldr	r3, [pc, #420]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013a70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013a74:	3b32      	subs	r3, #50	; 0x32
 8013a76:	4a6d      	ldr	r2, [pc, #436]	; (8013c2c <_ZN11Screen1View15handleTickEventEv+0x374>)
 8013a78:	2110      	movs	r1, #16
 8013a7a:	f00a f9d9 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	iat_value.resizeToCurrentTextWithAlignment();
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8013a84:	4618      	mov	r0, r3
 8013a86:	f004 ffe7 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	iat_value.invalidate();
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8013a90:	4618      	mov	r0, r3
 8013a92:	f007 ffc4 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	oilp_value.invalidate();
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f007 ffbe 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.OILP * PSI_TO_BAR));
 8013aa2:	4b5c      	ldr	r3, [pc, #368]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013aa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013aa8:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8013aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ab0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8013c18 <_ZN11Screen1View15handleTickEventEv+0x360>
 8013ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ab8:	f107 0308 	add.w	r3, r7, #8
 8013abc:	eeb0 0a67 	vmov.f32	s0, s15
 8013ac0:	4a56      	ldr	r2, [pc, #344]	; (8013c1c <_ZN11Screen1View15handleTickEventEv+0x364>)
 8013ac2:	2110      	movs	r1, #16
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff fca5 	bl	8013414 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(oilp_valueBuffer, 16, "%s", buffer);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f503 6046 	add.w	r0, r3, #3168	; 0xc60
 8013ad0:	f107 0308 	add.w	r3, r7, #8
 8013ad4:	4a52      	ldr	r2, [pc, #328]	; (8013c20 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8013ad6:	2110      	movs	r1, #16
 8013ad8:	f00a f9aa 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_value.resizeToCurrentTextWithAlignment();
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f004 ffb8 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_value.invalidate();
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8013aee:	4618      	mov	r0, r3
 8013af0:	f007 ff95 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	fuelp_value.invalidate();
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8013afa:	4618      	mov	r0, r3
 8013afc:	f007 ff8f 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.FUELP * PSI_TO_BAR));
 8013b00:	4b44      	ldr	r3, [pc, #272]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013b02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8013b06:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8013b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b0e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8013c18 <_ZN11Screen1View15handleTickEventEv+0x360>
 8013b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b16:	f107 0308 	add.w	r3, r7, #8
 8013b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8013b1e:	4a3f      	ldr	r2, [pc, #252]	; (8013c1c <_ZN11Screen1View15handleTickEventEv+0x364>)
 8013b20:	2110      	movs	r1, #16
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ff fc76 	bl	8013414 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(fuelp_valueBuffer, 16, "%s", buffer);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f603 40c8 	addw	r0, r3, #3272	; 0xcc8
 8013b2e:	f107 0308 	add.w	r3, r7, #8
 8013b32:	4a3b      	ldr	r2, [pc, #236]	; (8013c20 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8013b34:	2110      	movs	r1, #16
 8013b36:	f00a f97b 	bl	801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_value.resizeToCurrentTextWithAlignment();
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8013b40:	4618      	mov	r0, r3
 8013b42:	f004 ff89 	bl	8018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_value.invalidate();
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f007 ff66 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indLeft.setVisible(Current_Status.IND_LEFT);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8013b58:	4b2e      	ldr	r3, [pc, #184]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013b5a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	bf14      	ite	ne
 8013b62:	2301      	movne	r3, #1
 8013b64:	2300      	moveq	r3, #0
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	4619      	mov	r1, r3
 8013b6a:	4610      	mov	r0, r2
 8013b6c:	f7ff fc66 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indLeft.invalidate();
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	3398      	adds	r3, #152	; 0x98
 8013b74:	4618      	mov	r0, r3
 8013b76:	f007 ff52 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indHigh.setVisible(Current_Status.IND_HIGH);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8013b80:	4b24      	ldr	r3, [pc, #144]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013b82:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	bf14      	ite	ne
 8013b8a:	2301      	movne	r3, #1
 8013b8c:	2300      	moveq	r3, #0
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	4619      	mov	r1, r3
 8013b92:	4610      	mov	r0, r2
 8013b94:	f7ff fc52 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indHigh.invalidate();
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	33f0      	adds	r3, #240	; 0xf0
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f007 ff3e 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indFuel.setVisible(Current_Status.IND_FUEL);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8013ba8:	4b1a      	ldr	r3, [pc, #104]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013baa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	bf14      	ite	ne
 8013bb2:	2301      	movne	r3, #1
 8013bb4:	2300      	moveq	r3, #0
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	4619      	mov	r1, r3
 8013bba:	4610      	mov	r0, r2
 8013bbc:	f7ff fc3e 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indFuel.invalidate();
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f007 ff29 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indOil.setVisible(Current_Status.IND_OIL);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8013bd2:	4b10      	ldr	r3, [pc, #64]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013bd4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	bf14      	ite	ne
 8013bdc:	2301      	movne	r3, #1
 8013bde:	2300      	moveq	r3, #0
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	4619      	mov	r1, r3
 8013be4:	4610      	mov	r0, r2
 8013be6:	f7ff fc29 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indOil.invalidate();
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f007 ff14 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indBatt.setVisible(Current_Status.IND_BATT);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8013bfc:	4b05      	ldr	r3, [pc, #20]	; (8013c14 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8013bfe:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	bf14      	ite	ne
 8013c06:	2301      	movne	r3, #1
 8013c08:	2300      	moveq	r3, #0
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	4610      	mov	r0, r2
 8013c10:	e012      	b.n	8013c38 <_ZN11Screen1View15handleTickEventEv+0x380>
 8013c12:	bf00      	nop
 8013c14:	20006d5c 	.word	0x20006d5c
 8013c18:	3d8d3466 	.word	0x3d8d3466
 8013c1c:	0802e624 	.word	0x0802e624
 8013c20:	0802e5e0 	.word	0x0802e5e0
 8013c24:	42c80000 	.word	0x42c80000
 8013c28:	cccccccd 	.word	0xcccccccd
 8013c2c:	0802e62c 	.word	0x0802e62c
 8013c30:	416b3333 	.word	0x416b3333
 8013c34:	0802e630 	.word	0x0802e630
 8013c38:	f7ff fc00 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indBatt.invalidate();
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8013c42:	4618      	mov	r0, r3
 8013c44:	f007 feeb 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indPark.setVisible(Current_Status.IND_PARK);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8013c4e:	4b39      	ldr	r3, [pc, #228]	; (8013d34 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8013c50:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	bf14      	ite	ne
 8013c58:	2301      	movne	r3, #1
 8013c5a:	2300      	moveq	r3, #0
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	4619      	mov	r1, r3
 8013c60:	4610      	mov	r0, r2
 8013c62:	f7ff fbeb 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indPark.invalidate();
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f007 fed6 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indDTC.setVisible(Current_Status.IND_DTC);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 8013c78:	4b2e      	ldr	r3, [pc, #184]	; (8013d34 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8013c7a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	bf14      	ite	ne
 8013c82:	2301      	movne	r3, #1
 8013c84:	2300      	moveq	r3, #0
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	4619      	mov	r1, r3
 8013c8a:	4610      	mov	r0, r2
 8013c8c:	f7ff fbd6 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indDTC.invalidate();
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013c96:	4618      	mov	r0, r3
 8013c98:	f007 fec1 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indECT.setVisible(Current_Status.IND_ECT);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8013ca2:	4b24      	ldr	r3, [pc, #144]	; (8013d34 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8013ca4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	bf14      	ite	ne
 8013cac:	2301      	movne	r3, #1
 8013cae:	2300      	moveq	r3, #0
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	f7ff fbc1 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indECT.invalidate();
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f007 feac 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indLow.setVisible(Current_Status.IND_LOW);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8013ccc:	4b19      	ldr	r3, [pc, #100]	; (8013d34 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8013cce:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	bf14      	ite	ne
 8013cd6:	2301      	movne	r3, #1
 8013cd8:	2300      	moveq	r3, #0
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4610      	mov	r0, r2
 8013ce0:	f7ff fbac 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indLow.invalidate();
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013cea:	4618      	mov	r0, r3
 8013cec:	f007 fe97 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	indRight.setVisible(Current_Status.IND_RIGHT);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8013cf6:	4b0f      	ldr	r3, [pc, #60]	; (8013d34 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8013cf8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	bf14      	ite	ne
 8013d00:	2301      	movne	r3, #1
 8013d02:	2300      	moveq	r3, #0
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	4619      	mov	r1, r3
 8013d08:	4610      	mov	r0, r2
 8013d0a:	f7ff fb97 	bl	801343c <_ZN8touchgfx8Drawable10setVisibleEb>
	indRight.invalidate();
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	33c4      	adds	r3, #196	; 0xc4
 8013d12:	4618      	mov	r0, r3
 8013d14:	f007 fe83 	bl	801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>

	gauge1.updateValue(Current_Status.RPM, 0);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013d1e:	4a05      	ldr	r2, [pc, #20]	; (8013d34 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8013d20:	8812      	ldrh	r2, [r2, #0]
 8013d22:	4611      	mov	r1, r2
 8013d24:	2200      	movs	r2, #0
 8013d26:	4618      	mov	r0, r3
 8013d28:	f001 fee9 	bl	8015afe <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	//gauge1.set
	//gauge1.invalidate();

}
 8013d2c:	bf00      	nop
 8013d2e:	3728      	adds	r7, #40	; 0x28
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	20006d5c 	.word	0x20006d5c

08013d38 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
    {
 8013d40:	4a04      	ldr	r2, [pc, #16]	; (8013d54 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	601a      	str	r2, [r3, #0]
    }
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr
 8013d54:	0802eeac 	.word	0x0802eeac

08013d58 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    }
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff ffe9 	bl	8013d38 <_ZN8touchgfx15TouchControllerD1Ev>
 8013d66:	2104      	movs	r1, #4
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f017 fe58 	bl	802ba1e <_ZdlPvj>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	4618      	mov	r0, r3
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013d78:	b480      	push	{r7}
 8013d7a:	b083      	sub	sp, #12
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013d80:	bf00      	nop
 8013d82:	370c      	adds	r7, #12
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b085      	sub	sp, #20
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013d98:	2300      	movs	r3, #0
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	3714      	adds	r7, #20
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr
	...

08013da8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	4a05      	ldr	r2, [pc, #20]	; (8013dc8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	601a      	str	r2, [r3, #0]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7ff ffbd 	bl	8013d38 <_ZN8touchgfx15TouchControllerD1Ev>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	0802ee94 	.word	0x0802ee94

08013dcc <_ZN20STM32TouchControllerD0Ev>:
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f7ff ffe7 	bl	8013da8 <_ZN20STM32TouchControllerD1Ev>
 8013dda:	2104      	movs	r1, #4
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f017 fe1e 	bl	802ba1e <_ZdlPvj>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	4618      	mov	r0, r3
 8013de6:	3708      	adds	r7, #8
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}

08013dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013dec:	b480      	push	{r7}
 8013dee:	b083      	sub	sp, #12
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	4603      	mov	r3, r0
 8013df4:	71fb      	strb	r3, [r7, #7]

}
 8013df6:	bf00      	nop
 8013df8:	370c      	adds	r7, #12
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr

08013e02 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013e02:	b480      	push	{r7}
 8013e04:	b083      	sub	sp, #12
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	4603      	mov	r3, r0
 8013e0a:	71fb      	strb	r3, [r7, #7]

}
 8013e0c:	bf00      	nop
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	4603      	mov	r3, r0
 8013e20:	71fb      	strb	r3, [r7, #7]

}
 8013e22:	bf00      	nop
 8013e24:	370c      	adds	r7, #12
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr
	...

08013e30 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
    {
 8013e38:	4a04      	ldr	r2, [pc, #16]	; (8013e4c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	601a      	str	r2, [r3, #0]
    }
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	4618      	mov	r0, r3
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr
 8013e4c:	0802f924 	.word	0x0802f924

08013e50 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
    }
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff ffe9 	bl	8013e30 <_ZN8touchgfx3HALD1Ev>
 8013e5e:	217c      	movs	r1, #124	; 0x7c
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f017 fddc 	bl	802ba1e <_ZdlPvj>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013e70:	b480      	push	{r7}
 8013e72:	b083      	sub	sp, #12
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	460b      	mov	r3, r1
 8013e7a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	78fa      	ldrb	r2, [r7, #3]
 8013e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2201      	movs	r2, #1
 8013e88:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013e8c:	bf00      	nop
 8013e8e:	370c      	adds	r7, #12
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr

08013e98 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d009      	beq.n	8013ebe <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	685a      	ldr	r2, [r3, #4]
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	4610      	mov	r0, r2
 8013eb8:	4798      	blx	r3
 8013eba:	4603      	mov	r3, r0
 8013ebc:	e000      	b.n	8013ec0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8013ebe:	2300      	movs	r3, #0
        }
    }
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f002 ffa1 	bl	8016e18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	33a0      	adds	r3, #160	; 0xa0
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	4798      	blx	r3
    }
 8013ee2:	bf00      	nop
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8013eea:	b480      	push	{r7}
 8013eec:	b083      	sub	sp, #12
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
 8013ef2:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013ef4:	2300      	movs	r3, #0
    }
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	370c      	adds	r7, #12
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
	...

08013f04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d106      	bne.n	8013f26 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013f18:	4b11      	ldr	r3, [pc, #68]	; (8013f60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013f1a:	4a12      	ldr	r2, [pc, #72]	; (8013f64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013f1c:	f44f 7125 	mov.w	r1, #660	; 0x294
 8013f20:	4811      	ldr	r0, [pc, #68]	; (8013f68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013f22:	f018 fb9b 	bl	802c65c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	68ba      	ldr	r2, [r7, #8]
 8013f2a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	683a      	ldr	r2, [r7, #0]
 8013f36:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	bf14      	ite	ne
 8013f3e:	2301      	movne	r3, #1
 8013f40:	2300      	moveq	r3, #0
 8013f42:	b2da      	uxtb	r2, r3
 8013f44:	4b09      	ldr	r3, [pc, #36]	; (8013f6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013f46:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	bf14      	ite	ne
 8013f4e:	2301      	movne	r3, #1
 8013f50:	2300      	moveq	r3, #0
 8013f52:	b2da      	uxtb	r2, r3
 8013f54:	4b06      	ldr	r3, [pc, #24]	; (8013f70 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013f56:	701a      	strb	r2, [r3, #0]
    }
 8013f58:	bf00      	nop
 8013f5a:	3710      	adds	r7, #16
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	0802e638 	.word	0x0802e638
 8013f64:	0802e670 	.word	0x0802e670
 8013f68:	0802e6c0 	.word	0x0802e6c0
 8013f6c:	200066fe 	.word	0x200066fe
 8013f70:	200066ff 	.word	0x200066ff

08013f74 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013f7c:	2300      	movs	r3, #0
    }
 8013f7e:	4618      	mov	r0, r3
 8013f80:	370c      	adds	r7, #12
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr

08013f8a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b082      	sub	sp, #8
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	460b      	mov	r3, r1
 8013f94:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d004      	beq.n	8013fa8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fa2:	887a      	ldrh	r2, [r7, #2]
 8013fa4:	4610      	mov	r0, r2
 8013fa6:	4798      	blx	r3
        }
    }
 8013fa8:	bf00      	nop
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8013fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr

08013fc8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	685a      	ldr	r2, [r3, #4]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	3318      	adds	r3, #24
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	4610      	mov	r0, r2
 8013fe0:	4798      	blx	r3
 8013fe2:	4603      	mov	r3, r0
    }
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}

08013fec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014000:	429a      	cmp	r2, r3
 8014002:	d017      	beq.n	8014034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014004:	4b1a      	ldr	r3, [pc, #104]	; (8014070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d12a      	bne.n	8014062 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801400c:	4b19      	ldr	r3, [pc, #100]	; (8014074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801400e:	881a      	ldrh	r2, [r3, #0]
 8014010:	4b19      	ldr	r3, [pc, #100]	; (8014078 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014012:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014014:	4b19      	ldr	r3, [pc, #100]	; (801407c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014016:	881a      	ldrh	r2, [r3, #0]
 8014018:	4b19      	ldr	r3, [pc, #100]	; (8014080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801401a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801401c:	4b16      	ldr	r3, [pc, #88]	; (8014078 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801401e:	881a      	ldrh	r2, [r3, #0]
 8014020:	4b16      	ldr	r3, [pc, #88]	; (801407c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014022:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8014024:	4b16      	ldr	r3, [pc, #88]	; (8014080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014026:	881a      	ldrh	r2, [r3, #0]
 8014028:	4b12      	ldr	r3, [pc, #72]	; (8014074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801402a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801402c:	4b10      	ldr	r3, [pc, #64]	; (8014070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801402e:	2201      	movs	r2, #1
 8014030:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8014032:	e016      	b.n	8014062 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8014034:	4b0e      	ldr	r3, [pc, #56]	; (8014070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d012      	beq.n	8014062 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801403c:	4b0f      	ldr	r3, [pc, #60]	; (801407c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801403e:	881a      	ldrh	r2, [r3, #0]
 8014040:	4b0d      	ldr	r3, [pc, #52]	; (8014078 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014042:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8014044:	4b0b      	ldr	r3, [pc, #44]	; (8014074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014046:	881a      	ldrh	r2, [r3, #0]
 8014048:	4b0d      	ldr	r3, [pc, #52]	; (8014080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801404a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801404c:	4b0c      	ldr	r3, [pc, #48]	; (8014080 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801404e:	881a      	ldrh	r2, [r3, #0]
 8014050:	4b0a      	ldr	r3, [pc, #40]	; (801407c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014052:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8014054:	4b08      	ldr	r3, [pc, #32]	; (8014078 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014056:	881a      	ldrh	r2, [r3, #0]
 8014058:	4b06      	ldr	r3, [pc, #24]	; (8014074 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801405a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801405c:	4b04      	ldr	r3, [pc, #16]	; (8014070 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801405e:	2200      	movs	r2, #0
 8014060:	701a      	strb	r2, [r3, #0]
    }
 8014062:	bf00      	nop
 8014064:	370c      	adds	r7, #12
 8014066:	46bd      	mov	sp, r7
 8014068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	200066f8 	.word	0x200066f8
 8014074:	200066f4 	.word	0x200066f4
 8014078:	200066fa 	.word	0x200066fa
 801407c:	200066f6 	.word	0x200066f6
 8014080:	200066fc 	.word	0x200066fc

08014084 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8014084:	b480      	push	{r7}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
    {
    }
 801408c:	bf00      	nop
 801408e:	370c      	adds	r7, #12
 8014090:	46bd      	mov	sp, r7
 8014092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014096:	4770      	bx	lr

08014098 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
    {
    }
 80140a0:	bf00      	nop
 80140a2:	370c      	adds	r7, #12
 80140a4:	46bd      	mov	sp, r7
 80140a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140aa:	4770      	bx	lr

080140ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f002 f864 	bl	8016184 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80140bc:	bf00      	nop
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	4a05      	ldr	r2, [pc, #20]	; (80140e4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	601a      	str	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7ff feab 	bl	8013e30 <_ZN8touchgfx3HALD1Ev>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	0802f0d8 	.word	0x0802f0d8

080140e8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7ff ffe7 	bl	80140c4 <_ZN20TouchGFXGeneratedHALD1Ev>
 80140f6:	217c      	movs	r1, #124	; 0x7c
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f017 fc90 	bl	802ba1e <_ZdlPvj>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4618      	mov	r0, r3
 8014102:	3708      	adds	r7, #8
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	4618      	mov	r0, r3
 8014114:	f7ff ffca 	bl	80140ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014118:	bf00      	nop
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	4618      	mov	r0, r3
 801412c:	f001 fb02 	bl	8015734 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014130:	bf00      	nop
 8014132:	3708      	adds	r7, #8
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	4618      	mov	r0, r3
 8014144:	f001 fb8e 	bl	8015864 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014148:	4603      	mov	r3, r0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3708      	adds	r7, #8
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8014152:	b580      	push	{r7, lr}
 8014154:	b082      	sub	sp, #8
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
 801415a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6839      	ldr	r1, [r7, #0]
 8014160:	4618      	mov	r0, r3
 8014162:	f001 fb8d 	bl	8015880 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014166:	bf00      	nop
 8014168:	3708      	adds	r7, #8
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}

0801416e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801416e:	b580      	push	{r7, lr}
 8014170:	b082      	sub	sp, #8
 8014172:	af00      	add	r7, sp, #0
 8014174:	6078      	str	r0, [r7, #4]
 8014176:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6839      	ldr	r1, [r7, #0]
 801417c:	4618      	mov	r0, r3
 801417e:	f001 fb95 	bl	80158ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8014182:	bf00      	nop
 8014184:	3708      	adds	r7, #8
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}

0801418a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801418a:	b580      	push	{r7, lr}
 801418c:	b084      	sub	sp, #16
 801418e:	af00      	add	r7, sp, #0
 8014190:	60f8      	str	r0, [r7, #12]
 8014192:	60b9      	str	r1, [r7, #8]
 8014194:	607a      	str	r2, [r7, #4]
 8014196:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8014198:	68f8      	ldr	r0, [r7, #12]
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	687a      	ldr	r2, [r7, #4]
 801419e:	68b9      	ldr	r1, [r7, #8]
 80141a0:	f001 fb92 	bl	80158c8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80141a4:	4603      	mov	r3, r0
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b082      	sub	sp, #8
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	4618      	mov	r0, r3
 80141ba:	f001 fadf 	bl	801577c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80141be:	bf00      	nop
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b082      	sub	sp, #8
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f001 fae3 	bl	801579c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80141d6:	bf00      	nop
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}

080141de <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80141de:	b580      	push	{r7, lr}
 80141e0:	b082      	sub	sp, #8
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f001 fae5 	bl	80157b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80141ee:	bf00      	nop
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b082      	sub	sp, #8
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4618      	mov	r0, r3
 8014202:	f001 fae7 	bl	80157d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014206:	bf00      	nop
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
	...

08014210 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	4a05      	ldr	r2, [pc, #20]	; (8014230 <_ZN11TouchGFXHALD1Ev+0x20>)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	4618      	mov	r0, r3
 8014222:	f7ff ff4f 	bl	80140c4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	4618      	mov	r0, r3
 801422a:	3708      	adds	r7, #8
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	0802eec4 	.word	0x0802eec4

08014234 <_ZN11TouchGFXHALD0Ev>:
 8014234:	b580      	push	{r7, lr}
 8014236:	b082      	sub	sp, #8
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f7ff ffe7 	bl	8014210 <_ZN11TouchGFXHALD1Ev>
 8014242:	217c      	movs	r1, #124	; 0x7c
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f017 fbea 	bl	802ba1e <_ZdlPvj>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	4618      	mov	r0, r3
 801424e:	3708      	adds	r7, #8
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}

08014254 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014254:	b580      	push	{r7, lr}
 8014256:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8014258:	2200      	movs	r2, #0
 801425a:	2101      	movs	r1, #1
 801425c:	2001      	movs	r0, #1
 801425e:	f7f6 fe8e 	bl	800af7e <osSemaphoreNew>
 8014262:	4603      	mov	r3, r0
 8014264:	4a0f      	ldr	r2, [pc, #60]	; (80142a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014266:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8014268:	4b0e      	ldr	r3, [pc, #56]	; (80142a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d105      	bne.n	801427c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8014270:	4b0d      	ldr	r3, [pc, #52]	; (80142a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014272:	4a0e      	ldr	r2, [pc, #56]	; (80142ac <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014274:	2127      	movs	r1, #39	; 0x27
 8014276:	480e      	ldr	r0, [pc, #56]	; (80142b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014278:	f018 f9f0 	bl	802c65c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801427c:	2200      	movs	r2, #0
 801427e:	2104      	movs	r1, #4
 8014280:	2001      	movs	r0, #1
 8014282:	f7f6 ffbf 	bl	800b204 <osMessageQueueNew>
 8014286:	4603      	mov	r3, r0
 8014288:	4a0a      	ldr	r2, [pc, #40]	; (80142b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801428a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801428c:	4b09      	ldr	r3, [pc, #36]	; (80142b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d105      	bne.n	80142a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8014294:	4b08      	ldr	r3, [pc, #32]	; (80142b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8014296:	4a05      	ldr	r2, [pc, #20]	; (80142ac <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014298:	212b      	movs	r1, #43	; 0x2b
 801429a:	4805      	ldr	r0, [pc, #20]	; (80142b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801429c:	f018 f9de 	bl	802c65c <__assert_func>
}
 80142a0:	bf00      	nop
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	20004af4 	.word	0x20004af4
 80142a8:	0802e704 	.word	0x0802e704
 80142ac:	0802e750 	.word	0x0802e750
 80142b0:	0802e780 	.word	0x0802e780
 80142b4:	20004af8 	.word	0x20004af8
 80142b8:	0802e7ac 	.word	0x0802e7ac

080142bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80142c0:	4b04      	ldr	r3, [pc, #16]	; (80142d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f04f 31ff 	mov.w	r1, #4294967295
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7f6 fee1 	bl	800b090 <osSemaphoreAcquire>
}
 80142ce:	bf00      	nop
 80142d0:	bd80      	pop	{r7, pc}
 80142d2:	bf00      	nop
 80142d4:	20004af4 	.word	0x20004af4

080142d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80142dc:	4b03      	ldr	r3, [pc, #12]	; (80142ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f6 ff27 	bl	800b134 <osSemaphoreRelease>
}
 80142e6:	bf00      	nop
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	20004af4 	.word	0x20004af4

080142f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80142f4:	4b03      	ldr	r3, [pc, #12]	; (8014304 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2100      	movs	r1, #0
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7f6 fec8 	bl	800b090 <osSemaphoreAcquire>
}
 8014300:	bf00      	nop
 8014302:	bd80      	pop	{r7, pc}
 8014304:	20004af4 	.word	0x20004af4

08014308 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014308:	b580      	push	{r7, lr}
 801430a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801430c:	4b03      	ldr	r3, [pc, #12]	; (801431c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4618      	mov	r0, r3
 8014312:	f7f6 ff0f 	bl	800b134 <osSemaphoreRelease>
}
 8014316:	bf00      	nop
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	20004af4 	.word	0x20004af4

08014320 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014320:	b580      	push	{r7, lr}
 8014322:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8014324:	4b04      	ldr	r3, [pc, #16]	; (8014338 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8014326:	6818      	ldr	r0, [r3, #0]
 8014328:	2300      	movs	r3, #0
 801432a:	2200      	movs	r2, #0
 801432c:	4903      	ldr	r1, [pc, #12]	; (801433c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 801432e:	f7f6 ffdd 	bl	800b2ec <osMessageQueuePut>
}
 8014332:	bf00      	nop
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	20004af8 	.word	0x20004af8
 801433c:	20000028 	.word	0x20000028

08014340 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8014346:	4b09      	ldr	r3, [pc, #36]	; (801436c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014348:	6818      	ldr	r0, [r3, #0]
 801434a:	1d39      	adds	r1, r7, #4
 801434c:	2300      	movs	r3, #0
 801434e:	2200      	movs	r2, #0
 8014350:	f7f7 f82c 	bl	800b3ac <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8014354:	4b05      	ldr	r3, [pc, #20]	; (801436c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014356:	6818      	ldr	r0, [r3, #0]
 8014358:	1d39      	adds	r1, r7, #4
 801435a:	f04f 33ff 	mov.w	r3, #4294967295
 801435e:	2200      	movs	r2, #0
 8014360:	f7f7 f824 	bl	800b3ac <osMessageQueueGet>
}
 8014364:	bf00      	nop
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	20004af8 	.word	0x20004af8

08014370 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8014370:	b580      	push	{r7, lr}
 8014372:	af00      	add	r7, sp, #0
    osThreadYield();
 8014374:	f7f6 fdc8 	bl	800af08 <osThreadYield>
}
 8014378:	bf00      	nop
 801437a:	bd80      	pop	{r7, pc}

0801437c <__NVIC_EnableIRQ>:
{
 801437c:	b480      	push	{r7}
 801437e:	b083      	sub	sp, #12
 8014380:	af00      	add	r7, sp, #0
 8014382:	4603      	mov	r3, r0
 8014384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801438a:	2b00      	cmp	r3, #0
 801438c:	db0b      	blt.n	80143a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801438e:	79fb      	ldrb	r3, [r7, #7]
 8014390:	f003 021f 	and.w	r2, r3, #31
 8014394:	4907      	ldr	r1, [pc, #28]	; (80143b4 <__NVIC_EnableIRQ+0x38>)
 8014396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801439a:	095b      	lsrs	r3, r3, #5
 801439c:	2001      	movs	r0, #1
 801439e:	fa00 f202 	lsl.w	r2, r0, r2
 80143a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80143a6:	bf00      	nop
 80143a8:	370c      	adds	r7, #12
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop
 80143b4:	e000e100 	.word	0xe000e100

080143b8 <__NVIC_DisableIRQ>:
{
 80143b8:	b480      	push	{r7}
 80143ba:	b083      	sub	sp, #12
 80143bc:	af00      	add	r7, sp, #0
 80143be:	4603      	mov	r3, r0
 80143c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80143c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	db12      	blt.n	80143f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80143ca:	79fb      	ldrb	r3, [r7, #7]
 80143cc:	f003 021f 	and.w	r2, r3, #31
 80143d0:	490a      	ldr	r1, [pc, #40]	; (80143fc <__NVIC_DisableIRQ+0x44>)
 80143d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143d6:	095b      	lsrs	r3, r3, #5
 80143d8:	2001      	movs	r0, #1
 80143da:	fa00 f202 	lsl.w	r2, r0, r2
 80143de:	3320      	adds	r3, #32
 80143e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80143e4:	f3bf 8f4f 	dsb	sy
}
 80143e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80143ea:	f3bf 8f6f 	isb	sy
}
 80143ee:	bf00      	nop
}
 80143f0:	bf00      	nop
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	e000e100 	.word	0xe000e100

08014400 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8014400:	b480      	push	{r7}
 8014402:	b083      	sub	sp, #12
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
        : color(0)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2200      	movs	r2, #0
 801440c:	601a      	str	r2, [r3, #0]
    }
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	4618      	mov	r0, r3
 8014412:	370c      	adds	r7, #12
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr

0801441c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
        return color;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
    }
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
    {
 801443c:	4a04      	ldr	r2, [pc, #16]	; (8014450 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	601a      	str	r2, [r3, #0]
    }
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4618      	mov	r0, r3
 8014446:	370c      	adds	r7, #12
 8014448:	46bd      	mov	sp, r7
 801444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444e:	4770      	bx	lr
 8014450:	0802efe0 	.word	0x0802efe0

08014454 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
    }
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7ff ffe9 	bl	8014434 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014462:	2104      	movs	r1, #4
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f017 fada 	bl	802ba1e <_ZdlPvj>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	4618      	mov	r0, r3
 801446e:	3708      	adds	r7, #8
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	3344      	adds	r3, #68	; 0x44
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	4798      	blx	r3
    }
 8014488:	bf00      	nop
 801448a:	3708      	adds	r7, #8
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014490:	b480      	push	{r7}
 8014492:	b083      	sub	sp, #12
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
    {
 8014498:	4a04      	ldr	r2, [pc, #16]	; (80144ac <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	601a      	str	r2, [r3, #0]
    }
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	4618      	mov	r0, r3
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr
 80144ac:	0802fe64 	.word	0x0802fe64

080144b0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
    }
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7ff ffe9 	bl	8014490 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80144be:	210c      	movs	r1, #12
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f017 faac 	bl	802ba1e <_ZdlPvj>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80144d0:	b480      	push	{r7}
 80144d2:	b083      	sub	sp, #12
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80144da:	4a09      	ldr	r2, [pc, #36]	; (8014500 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	601a      	str	r2, [r3, #0]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	683a      	ldr	r2, [r7, #0]
 80144e4:	605a      	str	r2, [r3, #4]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	721a      	strb	r2, [r3, #8]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2200      	movs	r2, #0
 80144f0:	725a      	strb	r2, [r3, #9]
    {
    }
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	4618      	mov	r0, r3
 80144f6:	370c      	adds	r7, #12
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr
 8014500:	0802fe64 	.word	0x0802fe64

08014504 <_ZN10STM32F4DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8014504:	b480      	push	{r7}
 8014506:	b083      	sub	sp, #12
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 801450c:	2301      	movs	r3, #1
    }
 801450e:	4618      	mov	r0, r3
 8014510:	370c      	adds	r7, #12
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr

0801451a <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801451a:	b580      	push	{r7, lr}
 801451c:	b082      	sub	sp, #8
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8014522:	687a      	ldr	r2, [r7, #4]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	3328      	adds	r3, #40	; 0x28
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4610      	mov	r0, r2
 801452e:	4798      	blx	r3
    }
 8014530:	bf00      	nop
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	685a      	ldr	r2, [r3, #4]
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	3314      	adds	r3, #20
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4610      	mov	r0, r2
 8014550:	4798      	blx	r3
    }
 8014552:	bf00      	nop
 8014554:	3708      	adds	r7, #8
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}

0801455a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 801455a:	b580      	push	{r7, lr}
 801455c:	b082      	sub	sp, #8
 801455e:	af00      	add	r7, sp, #0
 8014560:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8014562:	f7fa fce9 	bl	800ef38 <_ZN8touchgfx3HAL11getInstanceEv>
 8014566:	4603      	mov	r3, r0
 8014568:	4618      	mov	r0, r3
 801456a:	f7ff ffe5 	bl	8014538 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 801456e:	bf00      	nop
 8014570:	3708      	adds	r7, #8
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}

08014576 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014576:	b580      	push	{r7, lr}
 8014578:	b082      	sub	sp, #8
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	330c      	adds	r3, #12
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff ff3c 	bl	8014400 <_ZN8touchgfx9colortypeC1Ev>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	4618      	mov	r0, r3
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
	...

08014594 <_ZN10STM32F4DMAC1Ev>:
}

STM32F4DMA::STM32F4DMA()
 8014594:	b5b0      	push	{r4, r5, r7, lr}
 8014596:	b082      	sub	sp, #8
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	330c      	adds	r3, #12
 80145a2:	4619      	mov	r1, r3
 80145a4:	4610      	mov	r0, r2
 80145a6:	f7ff ff93 	bl	80144d0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80145aa:	4a0e      	ldr	r2, [pc, #56]	; (80145e4 <_ZN10STM32F4DMAC1Ev+0x50>)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	601a      	str	r2, [r3, #0]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f103 000c 	add.w	r0, r3, #12
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	3320      	adds	r3, #32
 80145ba:	2260      	movs	r2, #96	; 0x60
 80145bc:	4619      	mov	r1, r3
 80145be:	f002 fd61 	bl	8017084 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	3320      	adds	r3, #32
 80145c6:	245f      	movs	r4, #95	; 0x5f
 80145c8:	461d      	mov	r5, r3
 80145ca:	2c00      	cmp	r4, #0
 80145cc:	db05      	blt.n	80145da <_ZN10STM32F4DMAC1Ev+0x46>
 80145ce:	4628      	mov	r0, r5
 80145d0:	f7ff ffd1 	bl	8014576 <_ZN8touchgfx6BlitOpC1Ev>
 80145d4:	3520      	adds	r5, #32
 80145d6:	3c01      	subs	r4, #1
 80145d8:	e7f7      	b.n	80145ca <_ZN10STM32F4DMAC1Ev+0x36>
{
}
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	4618      	mov	r0, r3
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bdb0      	pop	{r4, r5, r7, pc}
 80145e4:	0802ef90 	.word	0x0802ef90

080145e8 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	4a09      	ldr	r2, [pc, #36]	; (8014618 <_ZN10STM32F4DMAD1Ev+0x30>)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80145f6:	205a      	movs	r0, #90	; 0x5a
 80145f8:	f7ff fede 	bl	80143b8 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	330c      	adds	r3, #12
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fb25 	bl	8014c50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	4618      	mov	r0, r3
 801460a:	f7ff ff41 	bl	8014490 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	4618      	mov	r0, r3
 8014612:	3708      	adds	r7, #8
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	0802ef90 	.word	0x0802ef90

0801461c <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
}
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f7ff ffdf 	bl	80145e8 <_ZN10STM32F4DMAD1Ev>
 801462a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f017 f9f5 	bl	802ba1e <_ZdlPvj>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	4618      	mov	r0, r3
 8014638:	3708      	adds	r7, #8
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
	...

08014640 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8014648:	2300      	movs	r3, #0
 801464a:	60fb      	str	r3, [r7, #12]
 801464c:	4b10      	ldr	r3, [pc, #64]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014650:	4a0f      	ldr	r2, [pc, #60]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8014652:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014656:	6313      	str	r3, [r2, #48]	; 0x30
 8014658:	4b0d      	ldr	r3, [pc, #52]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801465c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014660:	60fb      	str	r3, [r7, #12]
 8014662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8014664:	4b0a      	ldr	r3, [pc, #40]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	4a09      	ldr	r2, [pc, #36]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801466a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801466e:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8014670:	4b07      	ldr	r3, [pc, #28]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8014672:	691b      	ldr	r3, [r3, #16]
 8014674:	4a06      	ldr	r2, [pc, #24]	; (8014690 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8014676:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801467a:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801467c:	4b05      	ldr	r3, [pc, #20]	; (8014694 <_ZN10STM32F4DMA10initializeEv+0x54>)
 801467e:	4a06      	ldr	r2, [pc, #24]	; (8014698 <_ZN10STM32F4DMA10initializeEv+0x58>)
 8014680:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014682:	205a      	movs	r0, #90	; 0x5a
 8014684:	f7ff fe7a 	bl	801437c <__NVIC_EnableIRQ>
}
 8014688:	bf00      	nop
 801468a:	3710      	adds	r7, #16
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	40023800 	.word	0x40023800
 8014694:	2000785c 	.word	0x2000785c
 8014698:	0801455b 	.word	0x0801455b

0801469c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	460b      	mov	r3, r1
 80146a6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80146a8:	2300      	movs	r3, #0
 80146aa:	60fb      	str	r3, [r7, #12]

    switch (format)
 80146ac:	78fb      	ldrb	r3, [r7, #3]
 80146ae:	2b0b      	cmp	r3, #11
 80146b0:	d826      	bhi.n	8014700 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80146b2:	a201      	add	r2, pc, #4	; (adr r2, 80146b8 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80146b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b8:	080146f5 	.word	0x080146f5
 80146bc:	080146ef 	.word	0x080146ef
 80146c0:	080146e9 	.word	0x080146e9
 80146c4:	08014701 	.word	0x08014701
 80146c8:	08014701 	.word	0x08014701
 80146cc:	08014701 	.word	0x08014701
 80146d0:	08014701 	.word	0x08014701
 80146d4:	080146fb 	.word	0x080146fb
 80146d8:	080146fb 	.word	0x080146fb
 80146dc:	080146fb 	.word	0x080146fb
 80146e0:	080146fb 	.word	0x080146fb
 80146e4:	080146fb 	.word	0x080146fb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80146e8:	2300      	movs	r3, #0
 80146ea:	60fb      	str	r3, [r7, #12]
        break;
 80146ec:	e00e      	b.n	801470c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80146ee:	2301      	movs	r3, #1
 80146f0:	60fb      	str	r3, [r7, #12]
        break;
 80146f2:	e00b      	b.n	801470c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80146f4:	2302      	movs	r3, #2
 80146f6:	60fb      	str	r3, [r7, #12]
        break;
 80146f8:	e008      	b.n	801470c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80146fa:	2305      	movs	r3, #5
 80146fc:	60fb      	str	r3, [r7, #12]
        break;
 80146fe:	e005      	b.n	801470c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8014700:	4b05      	ldr	r3, [pc, #20]	; (8014718 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8014702:	4a06      	ldr	r2, [pc, #24]	; (801471c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8014704:	2165      	movs	r1, #101	; 0x65
 8014706:	4806      	ldr	r0, [pc, #24]	; (8014720 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8014708:	f017 ffa8 	bl	802c65c <__assert_func>
        break;
    }

    return dma2dColorMode;
 801470c:	68fb      	ldr	r3, [r7, #12]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	0802e7f0 	.word	0x0802e7f0
 801471c:	0802e80c 	.word	0x0802e80c
 8014720:	0802e858 	.word	0x0802e858

08014724 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	460b      	mov	r3, r1
 801472e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8014730:	2300      	movs	r3, #0
 8014732:	60fb      	str	r3, [r7, #12]

    switch (format)
 8014734:	78fb      	ldrb	r3, [r7, #3]
 8014736:	2b0a      	cmp	r3, #10
 8014738:	d821      	bhi.n	801477e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801473a:	a201      	add	r2, pc, #4	; (adr r2, 8014740 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014740:	08014779 	.word	0x08014779
 8014744:	08014773 	.word	0x08014773
 8014748:	0801476d 	.word	0x0801476d
 801474c:	0801477f 	.word	0x0801477f
 8014750:	0801477f 	.word	0x0801477f
 8014754:	0801477f 	.word	0x0801477f
 8014758:	0801477f 	.word	0x0801477f
 801475c:	08014773 	.word	0x08014773
 8014760:	08014773 	.word	0x08014773
 8014764:	08014773 	.word	0x08014773
 8014768:	08014773 	.word	0x08014773
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801476c:	2300      	movs	r3, #0
 801476e:	60fb      	str	r3, [r7, #12]
        break;
 8014770:	e00b      	b.n	801478a <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8014772:	2301      	movs	r3, #1
 8014774:	60fb      	str	r3, [r7, #12]
        break;
 8014776:	e008      	b.n	801478a <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8014778:	2302      	movs	r3, #2
 801477a:	60fb      	str	r3, [r7, #12]
        break;
 801477c:	e005      	b.n	801478a <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801477e:	4b05      	ldr	r3, [pc, #20]	; (8014794 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8014780:	4a05      	ldr	r2, [pc, #20]	; (8014798 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8014782:	2186      	movs	r1, #134	; 0x86
 8014784:	4805      	ldr	r0, [pc, #20]	; (801479c <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8014786:	f017 ff69 	bl	802c65c <__assert_func>
        break;
    }

    return dma2dColorMode;
 801478a:	68fb      	ldr	r3, [r7, #12]
}
 801478c:	4618      	mov	r0, r3
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	0802e7f0 	.word	0x0802e7f0
 8014798:	0802e884 	.word	0x0802e884
 801479c:	0802e858 	.word	0x0802e858

080147a0 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 80147a0:	b480      	push	{r7}
 80147a2:	b083      	sub	sp, #12
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80147a8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 80147b8:	b590      	push	{r4, r7, lr}
 80147ba:	b089      	sub	sp, #36	; 0x24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	7f5b      	ldrb	r3, [r3, #29]
 80147c6:	4619      	mov	r1, r3
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7ff ff67 	bl	801469c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80147ce:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	7f9b      	ldrb	r3, [r3, #30]
 80147d4:	4619      	mov	r1, r3
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f7ff ff60 	bl	801469c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80147dc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	7f9b      	ldrb	r3, [r3, #30]
 80147e2:	4619      	mov	r1, r3
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f7ff ff9d 	bl	8014724 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80147ea:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	8b5b      	ldrh	r3, [r3, #26]
 80147f0:	461a      	mov	r2, r3
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	8a9b      	ldrh	r3, [r3, #20]
 80147f6:	1ad2      	subs	r2, r2, r3
 80147f8:	4ba3      	ldr	r3, [pc, #652]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80147fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	8b5b      	ldrh	r3, [r3, #26]
 8014800:	461a      	mov	r2, r3
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	8a9b      	ldrh	r3, [r3, #20]
 8014806:	1ad2      	subs	r2, r2, r3
 8014808:	4b9f      	ldr	r3, [pc, #636]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801480a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	8b1b      	ldrh	r3, [r3, #24]
 8014810:	461a      	mov	r2, r3
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	8a9b      	ldrh	r3, [r3, #20]
 8014816:	1ad2      	subs	r2, r2, r3
 8014818:	4b9b      	ldr	r3, [pc, #620]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801481a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801481c:	4a9a      	ldr	r2, [pc, #616]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	8adb      	ldrh	r3, [r3, #22]
 8014826:	461a      	mov	r2, r3
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	8a9b      	ldrh	r3, [r3, #20]
 801482c:	041b      	lsls	r3, r3, #16
 801482e:	431a      	orrs	r2, r3
 8014830:	4b95      	ldr	r3, [pc, #596]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	691a      	ldr	r2, [r3, #16]
 8014838:	4b93      	ldr	r3, [pc, #588]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801483a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	685a      	ldr	r2, [r3, #4]
 8014840:	4b91      	ldr	r3, [pc, #580]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014842:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801484c:	d04f      	beq.n	80148ee <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 801484e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014852:	f200 8125 	bhi.w	8014aa0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 8014856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801485a:	d015      	beq.n	8014888 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801485c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014860:	f200 811e 	bhi.w	8014aa0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 8014864:	2b80      	cmp	r3, #128	; 0x80
 8014866:	f000 808a 	beq.w	801497e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
 801486a:	2b80      	cmp	r3, #128	; 0x80
 801486c:	f200 8118 	bhi.w	8014aa0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 8014870:	2b40      	cmp	r3, #64	; 0x40
 8014872:	f000 80f4 	beq.w	8014a5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a6>
 8014876:	2b40      	cmp	r3, #64	; 0x40
 8014878:	f200 8112 	bhi.w	8014aa0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 801487c:	2b04      	cmp	r3, #4
 801487e:	d069      	beq.n	8014954 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
 8014880:	2b20      	cmp	r3, #32
 8014882:	f000 80ec 	beq.w	8014a5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a6>
 8014886:	e10b      	b.n	8014aa0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	7f1b      	ldrb	r3, [r3, #28]
 801488c:	061b      	lsls	r3, r3, #24
 801488e:	4a7e      	ldr	r2, [pc, #504]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014894:	f043 030a 	orr.w	r3, r3, #10
 8014898:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	330c      	adds	r3, #12
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff fdbc 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 80148a4:	4603      	mov	r3, r0
 80148a6:	021b      	lsls	r3, r3, #8
 80148a8:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	330c      	adds	r3, #12
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7ff fdb3 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 80148b6:	4603      	mov	r3, r0
 80148b8:	015b      	lsls	r3, r3, #5
 80148ba:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80148be:	431c      	orrs	r4, r3
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	330c      	adds	r3, #12
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7ff fda9 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 80148ca:	4603      	mov	r3, r0
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80148d2:	4a6d      	ldr	r2, [pc, #436]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148d4:	4323      	orrs	r3, r4
 80148d6:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80148d8:	4a6b      	ldr	r2, [pc, #428]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	691a      	ldr	r2, [r3, #16]
 80148e2:	4b69      	ldr	r3, [pc, #420]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148e4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80148e6:	4b68      	ldr	r3, [pc, #416]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148e8:	4a68      	ldr	r2, [pc, #416]	; (8014a8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 80148ea:	601a      	str	r2, [r3, #0]
        break;
 80148ec:	e0f1      	b.n	8014ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	7f1b      	ldrb	r3, [r3, #28]
 80148f2:	061b      	lsls	r3, r3, #24
 80148f4:	4a64      	ldr	r2, [pc, #400]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80148fa:	f043 0309 	orr.w	r3, r3, #9
 80148fe:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	330c      	adds	r3, #12
 8014904:	4618      	mov	r0, r3
 8014906:	f7ff fd89 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 801490a:	4603      	mov	r3, r0
 801490c:	021b      	lsls	r3, r3, #8
 801490e:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	330c      	adds	r3, #12
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff fd80 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 801491c:	4603      	mov	r3, r0
 801491e:	015b      	lsls	r3, r3, #5
 8014920:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014924:	431c      	orrs	r4, r3
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	330c      	adds	r3, #12
 801492a:	4618      	mov	r0, r3
 801492c:	f7ff fd76 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014930:	4603      	mov	r3, r0
 8014932:	00db      	lsls	r3, r3, #3
 8014934:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014938:	4a53      	ldr	r2, [pc, #332]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801493a:	4323      	orrs	r3, r4
 801493c:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801493e:	4a52      	ldr	r2, [pc, #328]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	691a      	ldr	r2, [r3, #16]
 8014948:	4b4f      	ldr	r3, [pc, #316]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801494a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801494c:	4b4e      	ldr	r3, [pc, #312]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801494e:	4a4f      	ldr	r2, [pc, #316]	; (8014a8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014950:	601a      	str	r2, [r3, #0]
        break;
 8014952:	e0be      	b.n	8014ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	7f1b      	ldrb	r3, [r3, #28]
 8014958:	061b      	lsls	r3, r3, #24
 801495a:	461a      	mov	r2, r3
 801495c:	69bb      	ldr	r3, [r7, #24]
 801495e:	4313      	orrs	r3, r2
 8014960:	4a49      	ldr	r2, [pc, #292]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014966:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014968:	4a47      	ldr	r2, [pc, #284]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	691a      	ldr	r2, [r3, #16]
 8014972:	4b45      	ldr	r3, [pc, #276]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014974:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014976:	4b44      	ldr	r3, [pc, #272]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014978:	4a44      	ldr	r2, [pc, #272]	; (8014a8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 801497a:	601a      	str	r2, [r3, #0]
        break;
 801497c:	e0a9      	b.n	8014ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 801497e:	2301      	movs	r3, #1
 8014980:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	689b      	ldr	r3, [r3, #8]
 8014986:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	1d1a      	adds	r2, r3, #4
 801498c:	4b3e      	ldr	r3, [pc, #248]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801498e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	7f1b      	ldrb	r3, [r3, #28]
 8014994:	061b      	lsls	r3, r3, #24
 8014996:	461a      	mov	r2, r3
 8014998:	69bb      	ldr	r3, [r7, #24]
 801499a:	4313      	orrs	r3, r2
 801499c:	4a3a      	ldr	r2, [pc, #232]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801499e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80149a2:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80149a4:	4a38      	ldr	r2, [pc, #224]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149a6:	697b      	ldr	r3, [r7, #20]
 80149a8:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	691a      	ldr	r2, [r3, #16]
 80149ae:	4b36      	ldr	r3, [pc, #216]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149b0:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	881b      	ldrh	r3, [r3, #0]
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d002      	beq.n	80149c2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d00f      	beq.n	80149e0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 80149c0:	e024      	b.n	8014a0c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80149c2:	4b31      	ldr	r3, [pc, #196]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149c4:	69db      	ldr	r3, [r3, #28]
 80149c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149ca:	f023 0310 	bic.w	r3, r3, #16
 80149ce:	68fa      	ldr	r2, [r7, #12]
 80149d0:	8852      	ldrh	r2, [r2, #2]
 80149d2:	3a01      	subs	r2, #1
 80149d4:	0212      	lsls	r2, r2, #8
 80149d6:	4611      	mov	r1, r2
 80149d8:	4a2b      	ldr	r2, [pc, #172]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149da:	430b      	orrs	r3, r1
 80149dc:	61d3      	str	r3, [r2, #28]
                break;
 80149de:	e01c      	b.n	8014a1a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	7f1b      	ldrb	r3, [r3, #28]
 80149e4:	2bff      	cmp	r3, #255	; 0xff
 80149e6:	d101      	bne.n	80149ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>
                {
                  blend = false;
 80149e8:	2300      	movs	r3, #0
 80149ea:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80149ec:	4b26      	ldr	r3, [pc, #152]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149ee:	69db      	ldr	r3, [r3, #28]
 80149f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149f4:	f023 0310 	bic.w	r3, r3, #16
 80149f8:	68fa      	ldr	r2, [r7, #12]
 80149fa:	8852      	ldrh	r2, [r2, #2]
 80149fc:	3a01      	subs	r2, #1
 80149fe:	0212      	lsls	r2, r2, #8
 8014a00:	4313      	orrs	r3, r2
 8014a02:	4a21      	ldr	r2, [pc, #132]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a04:	f043 0310 	orr.w	r3, r3, #16
 8014a08:	61d3      	str	r3, [r2, #28]
                break;
 8014a0a:	e006      	b.n	8014a1a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8014a0c:	4b20      	ldr	r3, [pc, #128]	; (8014a90 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d8>)
 8014a0e:	4a21      	ldr	r2, [pc, #132]	; (8014a94 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2dc>)
 8014a10:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014a14:	4820      	ldr	r0, [pc, #128]	; (8014a98 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e0>)
 8014a16:	f017 fe21 	bl	802c65c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8014a1a:	4b1b      	ldr	r3, [pc, #108]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a1c:	69db      	ldr	r3, [r3, #28]
 8014a1e:	4a1a      	ldr	r2, [pc, #104]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a20:	f043 0320 	orr.w	r3, r3, #32
 8014a24:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014a26:	4b18      	ldr	r3, [pc, #96]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a28:	69db      	ldr	r3, [r3, #28]
 8014a2a:	f003 0320 	and.w	r3, r3, #32
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	bf14      	ite	ne
 8014a32:	2301      	movne	r3, #1
 8014a34:	2300      	moveq	r3, #0
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
            {
                OSWrappers::taskYield();
 8014a3c:	f7ff fc98 	bl	8014370 <_ZN8touchgfx10OSWrappers9taskYieldEv>
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014a40:	e7f1      	b.n	8014a26 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8014a42:	4b11      	ldr	r3, [pc, #68]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a44:	2210      	movs	r2, #16
 8014a46:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8014a48:	7ffb      	ldrb	r3, [r7, #31]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d003      	beq.n	8014a56 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014a4e:	4b0e      	ldr	r3, [pc, #56]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a50:	4a0e      	ldr	r2, [pc, #56]	; (8014a8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014a52:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8014a54:	e03d      	b.n	8014ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014a56:	4b0c      	ldr	r3, [pc, #48]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a58:	4a10      	ldr	r2, [pc, #64]	; (8014a9c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>)
 8014a5a:	601a      	str	r2, [r3, #0]
      break;
 8014a5c:	e039      	b.n	8014ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	7f1b      	ldrb	r3, [r3, #28]
 8014a62:	061b      	lsls	r3, r3, #24
 8014a64:	461a      	mov	r2, r3
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	4313      	orrs	r3, r2
 8014a6a:	4a07      	ldr	r2, [pc, #28]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014a70:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014a72:	4a05      	ldr	r2, [pc, #20]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	691a      	ldr	r2, [r3, #16]
 8014a7c:	4b02      	ldr	r3, [pc, #8]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a7e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014a80:	4b01      	ldr	r3, [pc, #4]	; (8014a88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a82:	4a02      	ldr	r2, [pc, #8]	; (8014a8c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014a84:	601a      	str	r2, [r3, #0]
        break;
 8014a86:	e024      	b.n	8014ad2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
 8014a88:	4002b000 	.word	0x4002b000
 8014a8c:	00020201 	.word	0x00020201
 8014a90:	0802e8d4 	.word	0x0802e8d4
 8014a94:	0802e8f0 	.word	0x0802e8f0
 8014a98:	0802e858 	.word	0x0802e858
 8014a9c:	00010201 	.word	0x00010201
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	7f1b      	ldrb	r3, [r3, #28]
 8014aa4:	061b      	lsls	r3, r3, #24
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	69bb      	ldr	r3, [r7, #24]
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	4a0b      	ldr	r2, [pc, #44]	; (8014adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8014aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014ab2:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	7f5a      	ldrb	r2, [r3, #29]
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	7f9b      	ldrb	r3, [r3, #30]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d003      	beq.n	8014ac8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x310>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014ac0:	4b06      	ldr	r3, [pc, #24]	; (8014adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8014ac2:	4a07      	ldr	r2, [pc, #28]	; (8014ae0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x328>)
 8014ac4:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8014ac6:	e003      	b.n	8014ad0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x318>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8014ac8:	4b04      	ldr	r3, [pc, #16]	; (8014adc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8014aca:	f240 2201 	movw	r2, #513	; 0x201
 8014ace:	601a      	str	r2, [r3, #0]
        break;
 8014ad0:	bf00      	nop
    }
}
 8014ad2:	bf00      	nop
 8014ad4:	3724      	adds	r7, #36	; 0x24
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd90      	pop	{r4, r7, pc}
 8014ada:	bf00      	nop
 8014adc:	4002b000 	.word	0x4002b000
 8014ae0:	00010201 	.word	0x00010201

08014ae4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F4DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8014ae4:	b590      	push	{r4, r7, lr}
 8014ae6:	b085      	sub	sp, #20
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	7f9b      	ldrb	r3, [r3, #30]
 8014af2:	4619      	mov	r1, r3
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f7ff fe15 	bl	8014724 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014afa:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014afc:	4a51      	ldr	r2, [pc, #324]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	8adb      	ldrh	r3, [r3, #22]
 8014b06:	461a      	mov	r2, r3
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	8a9b      	ldrh	r3, [r3, #20]
 8014b0c:	041b      	lsls	r3, r3, #16
 8014b0e:	431a      	orrs	r2, r3
 8014b10:	4b4c      	ldr	r3, [pc, #304]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	691a      	ldr	r2, [r3, #16]
 8014b18:	4b4a      	ldr	r3, [pc, #296]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	8b5b      	ldrh	r3, [r3, #26]
 8014b20:	461a      	mov	r2, r3
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	8a9b      	ldrh	r3, [r3, #20]
 8014b26:	1ad2      	subs	r2, r2, r3
 8014b28:	4b46      	ldr	r3, [pc, #280]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b2a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b08      	cmp	r3, #8
 8014b32:	d148      	bne.n	8014bc6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	8b5b      	ldrh	r3, [r3, #26]
 8014b38:	461a      	mov	r2, r3
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	8a9b      	ldrh	r3, [r3, #20]
 8014b3e:	1ad2      	subs	r2, r2, r3
 8014b40:	4b40      	ldr	r3, [pc, #256]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b42:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	8b5b      	ldrh	r3, [r3, #26]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	8a9b      	ldrh	r3, [r3, #20]
 8014b4e:	1ad2      	subs	r2, r2, r3
 8014b50:	4b3c      	ldr	r3, [pc, #240]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b52:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014b54:	4a3b      	ldr	r2, [pc, #236]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	7f1b      	ldrb	r3, [r3, #28]
 8014b5e:	061b      	lsls	r3, r3, #24
 8014b60:	4a38      	ldr	r2, [pc, #224]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b66:	f043 0309 	orr.w	r3, r3, #9
 8014b6a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, (((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	330c      	adds	r3, #12
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7ff fc53 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014b76:	4603      	mov	r3, r0
 8014b78:	021b      	lsls	r3, r3, #8
 8014b7a:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	330c      	adds	r3, #12
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7ff fc4a 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	015b      	lsls	r3, r3, #5
 8014b8c:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014b90:	431c      	orrs	r4, r3
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	330c      	adds	r3, #12
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7ff fc40 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	00db      	lsls	r3, r3, #3
 8014ba0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014ba4:	4323      	orrs	r3, r4
 8014ba6:	4a27      	ldr	r2, [pc, #156]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014bac:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	691a      	ldr	r2, [r3, #16]
 8014bb2:	4b24      	ldr	r3, [pc, #144]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bb4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	691a      	ldr	r2, [r3, #16]
 8014bba:	4b22      	ldr	r3, [pc, #136]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bbc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8014bbe:	4b21      	ldr	r3, [pc, #132]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bc0:	4a21      	ldr	r2, [pc, #132]	; (8014c48 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x164>)
 8014bc2:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8014bc4:	e039      	b.n	8014c3a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014bc6:	4a1f      	ldr	r2, [pc, #124]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8014bcc:	4b1d      	ldr	r3, [pc, #116]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bce:	2200      	movs	r2, #0
 8014bd0:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	7f9b      	ldrb	r3, [r3, #30]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d108      	bne.n	8014bec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	330c      	adds	r3, #12
 8014bde:	4c19      	ldr	r4, [pc, #100]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7ff fc1b 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014be6:	4603      	mov	r3, r0
 8014be8:	63a3      	str	r3, [r4, #56]	; 0x38
 8014bea:	e023      	b.n	8014c34 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x150>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	7f1b      	ldrb	r3, [r3, #28]
 8014bf0:	061b      	lsls	r3, r3, #24
 8014bf2:	461c      	mov	r4, r3
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	330c      	adds	r3, #12
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7ff fc0f 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	021b      	lsls	r3, r3, #8
 8014c02:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8014c06:	431c      	orrs	r4, r3
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	330c      	adds	r3, #12
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff fc05 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014c12:	4603      	mov	r3, r0
 8014c14:	015b      	lsls	r3, r3, #5
 8014c16:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014c1a:	431c      	orrs	r4, r3
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	330c      	adds	r3, #12
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7ff fbfb 	bl	801441c <_ZNK8touchgfx9colortypecvmEv>
 8014c26:	4603      	mov	r3, r0
 8014c28:	00db      	lsls	r3, r3, #3
 8014c2a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014c2e:	4a05      	ldr	r2, [pc, #20]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c30:	4323      	orrs	r3, r4
 8014c32:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8014c34:	4b03      	ldr	r3, [pc, #12]	; (8014c44 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c36:	4a05      	ldr	r2, [pc, #20]	; (8014c4c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014c38:	601a      	str	r2, [r3, #0]
}
 8014c3a:	bf00      	nop
 8014c3c:	3714      	adds	r7, #20
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd90      	pop	{r4, r7, pc}
 8014c42:	bf00      	nop
 8014c44:	4002b000 	.word	0x4002b000
 8014c48:	00020201 	.word	0x00020201
 8014c4c:	00030201 	.word	0x00030201

08014c50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	4a05      	ldr	r2, [pc, #20]	; (8014c70 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	601a      	str	r2, [r3, #0]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7ff fbe7 	bl	8014434 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3708      	adds	r7, #8
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	0802feb4 	.word	0x0802feb4

08014c74 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7ff ffe7 	bl	8014c50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014c82:	2114      	movs	r1, #20
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f016 feca 	bl	802ba1e <_ZdlPvj>
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3708      	adds	r7, #8
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014c94:	b480      	push	{r7}
 8014c96:	b083      	sub	sp, #12
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
        texts = t;
 8014c9c:	4a04      	ldr	r2, [pc, #16]	; (8014cb0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6013      	str	r3, [r2, #0]
    }
 8014ca2:	bf00      	nop
 8014ca4:	370c      	adds	r7, #12
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	2000675c 	.word	0x2000675c

08014cb4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014cb4:	b480      	push	{r7}
 8014cb6:	b085      	sub	sp, #20
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
 8014cc0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014cc2:	4a0b      	ldr	r2, [pc, #44]	; (8014cf0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	601a      	str	r2, [r3, #0]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	68ba      	ldr	r2, [r7, #8]
 8014ccc:	605a      	str	r2, [r3, #4]
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	687a      	ldr	r2, [r7, #4]
 8014cd2:	609a      	str	r2, [r3, #8]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	683a      	ldr	r2, [r7, #0]
 8014cd8:	60da      	str	r2, [r3, #12]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	69ba      	ldr	r2, [r7, #24]
 8014cde:	611a      	str	r2, [r3, #16]
    {
    }
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3714      	adds	r7, #20
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr
 8014cee:	bf00      	nop
 8014cf0:	0802f0c8 	.word	0x0802f0c8

08014cf4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014cf4:	b480      	push	{r7}
 8014cf6:	b083      	sub	sp, #12
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
    {
 8014cfc:	4a04      	ldr	r2, [pc, #16]	; (8014d10 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	601a      	str	r2, [r3, #0]
    }
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	4618      	mov	r0, r3
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr
 8014d10:	0802f0c8 	.word	0x0802f0c8

08014d14 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
    }
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f7ff ffe9 	bl	8014cf4 <_ZN8touchgfx7MVPHeapD1Ev>
 8014d22:	2114      	movs	r1, #20
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f016 fe7a 	bl	802ba1e <_ZdlPvj>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014d34:	b480      	push	{r7}
 8014d36:	b083      	sub	sp, #12
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
    {
 8014d3c:	4a04      	ldr	r2, [pc, #16]	; (8014d50 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	601a      	str	r2, [r3, #0]
    }
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4618      	mov	r0, r3
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr
 8014d50:	08030734 	.word	0x08030734

08014d54 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
    }
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f7ff ffe9 	bl	8014d34 <_ZN8touchgfx3LCDD1Ev>
 8014d62:	2108      	movs	r1, #8
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f016 fe5a 	bl	802ba1e <_ZdlPvj>
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014d74:	b480      	push	{r7}
 8014d76:	b083      	sub	sp, #12
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	801a      	strh	r2, [r3, #0]
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	805a      	strh	r2, [r3, #2]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	809a      	strh	r2, [r3, #4]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2200      	movs	r2, #0
 8014d92:	80da      	strh	r2, [r3, #6]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2200      	movs	r2, #0
 8014d98:	811a      	strh	r2, [r3, #8]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	815a      	strh	r2, [r3, #10]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2200      	movs	r2, #0
 8014da4:	819a      	strh	r2, [r3, #12]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2200      	movs	r2, #0
 8014daa:	739a      	strb	r2, [r3, #14]
        {
        }
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	4618      	mov	r0, r3
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr

08014dba <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	b082      	sub	sp, #8
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7ff ffd5 	bl	8014d74 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	611a      	str	r2, [r3, #16]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	829a      	strh	r2, [r3, #20]
    {
    }
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b084      	sub	sp, #16
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	60f8      	str	r0, [r7, #12]
 8014de8:	60b9      	str	r1, [r7, #8]
 8014dea:	607a      	str	r2, [r7, #4]
 8014dec:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8014dee:	4a55      	ldr	r2, [pc, #340]	; (8014f44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	601a      	str	r2, [r3, #0]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	68ba      	ldr	r2, [r7, #8]
 8014df8:	605a      	str	r2, [r3, #4]
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	687a      	ldr	r2, [r7, #4]
 8014dfe:	609a      	str	r2, [r3, #8]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	683a      	ldr	r2, [r7, #0]
 8014e04:	60da      	str	r2, [r3, #12]
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	611a      	str	r2, [r3, #16]
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	615a      	str	r2, [r3, #20]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	619a      	str	r2, [r3, #24]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	331c      	adds	r3, #28
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7ff ffcc 	bl	8014dba <_ZN8touchgfx8GesturesC1Ev>
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	2200      	movs	r2, #0
 8014e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2200      	movs	r2, #0
 8014e34:	63da      	str	r2, [r3, #60]	; 0x3c
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	645a      	str	r2, [r3, #68]	; 0x44
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2200      	movs	r2, #0
 8014e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2201      	movs	r2, #1
 8014e4e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2200      	movs	r2, #0
 8014e56:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2200      	movs	r2, #0
 8014e66:	64da      	str	r2, [r3, #76]	; 0x4c
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	3350      	adds	r3, #80	; 0x50
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7fa fb86 	bl	800f57e <_ZN8touchgfx4RectC1Ev>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2200      	movs	r2, #0
 8014e76:	659a      	str	r2, [r3, #88]	; 0x58
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2200      	movs	r2, #0
 8014e82:	661a      	str	r2, [r3, #96]	; 0x60
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2201      	movs	r2, #1
 8014e88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2200      	movs	r2, #0
 8014e98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2201      	movs	r2, #1
 8014ea0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2200      	movs	r2, #0
 8014eb0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	2200      	movs	r2, #0
 8014ed0:	671a      	str	r2, [r3, #112]	; 0x70
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	2200      	movs	r2, #0
 8014ede:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2201      	movs	r2, #1
 8014eee:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8014efa:	4a13      	ldr	r2, [pc, #76]	; (8014f48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014f00:	4a12      	ldr	r2, [pc, #72]	; (8014f4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8014f02:	8b3b      	ldrh	r3, [r7, #24]
 8014f04:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014f06:	4a12      	ldr	r2, [pc, #72]	; (8014f50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8014f08:	8bbb      	ldrh	r3, [r7, #28]
 8014f0a:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014f0c:	4b11      	ldr	r3, [pc, #68]	; (8014f54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8014f0e:	2200      	movs	r2, #0
 8014f10:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014f12:	4b0e      	ldr	r3, [pc, #56]	; (8014f4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8014f14:	881a      	ldrh	r2, [r3, #0]
 8014f16:	4b10      	ldr	r3, [pc, #64]	; (8014f58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8014f18:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014f1a:	4b0d      	ldr	r3, [pc, #52]	; (8014f50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8014f1c:	881a      	ldrh	r2, [r3, #0]
 8014f1e:	4b0f      	ldr	r3, [pc, #60]	; (8014f5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8014f20:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014f22:	8b3a      	ldrh	r2, [r7, #24]
 8014f24:	8bbb      	ldrh	r3, [r7, #28]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	bf34      	ite	cc
 8014f2a:	2301      	movcc	r3, #1
 8014f2c:	2300      	movcs	r3, #0
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	461a      	mov	r2, r3
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3710      	adds	r7, #16
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	0802f924 	.word	0x0802f924
 8014f48:	20006700 	.word	0x20006700
 8014f4c:	200066f4 	.word	0x200066f4
 8014f50:	200066f6 	.word	0x200066f6
 8014f54:	200066f8 	.word	0x200066f8
 8014f58:	200066fa 	.word	0x200066fa
 8014f5c:	200066fc 	.word	0x200066fc

08014f60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7fa f867 	bl	800f040 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8014f72:	bf00      	nop
 8014f74:	3708      	adds	r7, #8
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
	...

08014f7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af02      	add	r7, sp, #8
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	60b9      	str	r1, [r7, #8]
 8014f86:	607a      	str	r2, [r7, #4]
 8014f88:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	68b9      	ldr	r1, [r7, #8]
 8014f96:	f7ff fe8d 	bl	8014cb4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014f9a:	4a04      	ldr	r2, [pc, #16]	; (8014fac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	601a      	str	r2, [r3, #0]
    {

    }
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	0802f0b4 	.word	0x0802f0b4

08014fb0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	4801      	ldr	r0, [pc, #4]	; (8014fbc <__tcf_0+0xc>)
 8014fb6:	f000 f95f 	bl	8015278 <_ZN12FrontendHeapD1Ev>
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	20004afc 	.word	0x20004afc

08014fc0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014fc4:	4b12      	ldr	r3, [pc, #72]	; (8015010 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	f3bf 8f5b 	dmb	ish
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	f003 0301 	and.w	r3, r3, #1
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	bf0c      	ite	eq
 8014fd6:	2301      	moveq	r3, #1
 8014fd8:	2300      	movne	r3, #0
 8014fda:	b2db      	uxtb	r3, r3
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d013      	beq.n	8015008 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8014fe0:	480b      	ldr	r0, [pc, #44]	; (8015010 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014fe2:	f016 fd1e 	bl	802ba22 <__cxa_guard_acquire>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	bf14      	ite	ne
 8014fec:	2301      	movne	r3, #1
 8014fee:	2300      	moveq	r3, #0
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d008      	beq.n	8015008 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8014ff6:	4807      	ldr	r0, [pc, #28]	; (8015014 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8014ff8:	f000 f868 	bl	80150cc <_ZN12FrontendHeapC1Ev>
 8014ffc:	4804      	ldr	r0, [pc, #16]	; (8015010 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014ffe:	f016 fd1c 	bl	802ba3a <__cxa_guard_release>
 8015002:	4805      	ldr	r0, [pc, #20]	; (8015018 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8015004:	f017 fb48 	bl	802c698 <atexit>
        return instance;
 8015008:	4b02      	ldr	r3, [pc, #8]	; (8015014 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801500a:	4618      	mov	r0, r3
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	200059d0 	.word	0x200059d0
 8015014:	20004afc 	.word	0x20004afc
 8015018:	08014fb1 	.word	0x08014fb1

0801501c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	4a05      	ldr	r2, [pc, #20]	; (801503c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	601a      	str	r2, [r3, #0]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4618      	mov	r0, r3
 801502e:	f7ff fe61 	bl	8014cf4 <_ZN8touchgfx7MVPHeapD1Ev>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4618      	mov	r0, r3
 8015036:	3708      	adds	r7, #8
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}
 801503c:	0802f0b4 	.word	0x0802f0b4

08015040 <_ZN16FrontendHeapBaseD0Ev>:
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f7ff ffe7 	bl	801501c <_ZN16FrontendHeapBaseD1Ev>
 801504e:	2114      	movs	r1, #20
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f016 fce4 	bl	802ba1e <_ZdlPvj>
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4618      	mov	r0, r3
 801505a:	3708      	adds	r7, #8
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	4618      	mov	r0, r3
 801506c:	f000 fd04 	bl	8015a78 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015070:	4a03      	ldr	r2, [pc, #12]	; (8015080 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	601a      	str	r2, [r3, #0]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	4618      	mov	r0, r3
 801507a:	3708      	adds	r7, #8
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	0802f080 	.word	0x0802f080

08015084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4618      	mov	r0, r3
 8015090:	f000 fcf2 	bl	8015a78 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015094:	4a03      	ldr	r2, [pc, #12]	; (80150a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	601a      	str	r2, [r3, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4618      	mov	r0, r3
 801509e:	3708      	adds	r7, #8
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	0802f04c 	.word	0x0802f04c

080150a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 fce0 	bl	8015a78 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80150b8:	4a03      	ldr	r2, [pc, #12]	; (80150c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	4618      	mov	r0, r3
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	0802f018 	.word	0x0802f018

080150cc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80150cc:	b590      	push	{r4, r7, lr}
 80150ce:	b085      	sub	sp, #20
 80150d0:	af02      	add	r7, sp, #8
 80150d2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f103 0114 	add.w	r1, r3, #20
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f603 5464 	addw	r4, r3, #3428	; 0xd64
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f603 5378 	addw	r3, r3, #3448	; 0xd78
                     app(model, *this)
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	4623      	mov	r3, r4
 80150f2:	f7ff ff43 	bl	8014f7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80150f6:	4a18      	ldr	r2, [pc, #96]	; (8015158 <_ZN12FrontendHeapC1Ev+0x8c>)
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	601a      	str	r2, [r3, #0]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	3314      	adds	r3, #20
 8015100:	4618      	mov	r0, r3
 8015102:	f7ff ffad 	bl	8015060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	332c      	adds	r3, #44	; 0x2c
 801510a:	4618      	mov	r0, r3
 801510c:	f7ff ffba 	bl	8015084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f603 5364 	addw	r3, r3, #3428	; 0xd64
 8015116:	4618      	mov	r0, r3
 8015118:	f7ff ffc6 	bl	80150a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f603 5078 	addw	r0, r3, #3448	; 0xd78
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f503 636d 	add.w	r3, r3, #3792	; 0xed0
 8015128:	687a      	ldr	r2, [r7, #4]
 801512a:	4619      	mov	r1, r3
 801512c:	f7fe f864 	bl	80131f8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f503 636d 	add.w	r3, r3, #3792	; 0xed0
 8015136:	4618      	mov	r0, r3
 8015138:	f7fe f874 	bl	8013224 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f603 5378 	addw	r3, r3, #3448	; 0xd78
 8015144:	4619      	mov	r1, r3
 8015146:	4610      	mov	r0, r2
 8015148:	f7ff ff0a 	bl	8014f60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	4618      	mov	r0, r3
 8015150:	370c      	adds	r7, #12
 8015152:	46bd      	mov	sp, r7
 8015154:	bd90      	pop	{r4, r7, pc}
 8015156:	bf00      	nop
 8015158:	0802f004 	.word	0x0802f004

0801515c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 801515c:	b580      	push	{r7, lr}
 801515e:	b086      	sub	sp, #24
 8015160:	af02      	add	r7, sp, #8
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	607a      	str	r2, [r7, #4]
 8015168:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801516a:	68f8      	ldr	r0, [r7, #12]
 801516c:	8bbb      	ldrh	r3, [r7, #28]
 801516e:	9301      	str	r3, [sp, #4]
 8015170:	8b3b      	ldrh	r3, [r7, #24]
 8015172:	9300      	str	r3, [sp, #0]
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	68b9      	ldr	r1, [r7, #8]
 801517a:	f7ff fe31 	bl	8014de0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801517e:	4a04      	ldr	r2, [pc, #16]	; (8015190 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	601a      	str	r2, [r3, #0]
    }
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	4618      	mov	r0, r3
 8015188:	3710      	adds	r7, #16
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}
 801518e:	bf00      	nop
 8015190:	0802f0d8 	.word	0x0802f0d8

08015194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af02      	add	r7, sp, #8
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
 80151a0:	603b      	str	r3, [r7, #0]
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	8bbb      	ldrh	r3, [r7, #28]
 80151a6:	9301      	str	r3, [sp, #4]
 80151a8:	8b3b      	ldrh	r3, [r7, #24]
 80151aa:	9300      	str	r3, [sp, #0]
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	68b9      	ldr	r1, [r7, #8]
 80151b2:	f7ff ffd3 	bl	801515c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80151b6:	4a04      	ldr	r2, [pc, #16]	; (80151c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	601a      	str	r2, [r3, #0]
    }
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	4618      	mov	r0, r3
 80151c0:	3710      	adds	r7, #16
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	0802eec4 	.word	0x0802eec4

080151cc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80151cc:	b480      	push	{r7}
 80151ce:	b083      	sub	sp, #12
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	4a04      	ldr	r2, [pc, #16]	; (80151e8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	601a      	str	r2, [r3, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	4618      	mov	r0, r3
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e6:	4770      	bx	lr
 80151e8:	0802eeac 	.word	0x0802eeac

080151ec <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7ff ffe8 	bl	80151cc <_ZN8touchgfx15TouchControllerC1Ev>
 80151fc:	4a03      	ldr	r2, [pc, #12]	; (801520c <_ZN20STM32TouchControllerC1Ev+0x20>)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	601a      	str	r2, [r3, #0]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	4618      	mov	r0, r3
 8015206:	3708      	adds	r7, #8
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	0802ee94 	.word	0x0802ee94

08015210 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8015210:	b590      	push	{r4, r7, lr}
 8015212:	b085      	sub	sp, #20
 8015214:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8015216:	f7fd fdc3 	bl	8012da0 <_ZN14BitmapDatabase11getInstanceEv>
 801521a:	4604      	mov	r4, r0
 801521c:	f7fd fdca 	bl	8012db4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8015220:	4603      	mov	r3, r0
 8015222:	4619      	mov	r1, r3
 8015224:	2300      	movs	r3, #0
 8015226:	9300      	str	r3, [sp, #0]
 8015228:	2300      	movs	r3, #0
 801522a:	2200      	movs	r2, #0
 801522c:	4620      	mov	r0, r4
 801522e:	f009 f887 	bl	801e340 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8015232:	4809      	ldr	r0, [pc, #36]	; (8015258 <touchgfx_init+0x48>)
 8015234:	f7ff fd2e 	bl	8014c94 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8015238:	2000      	movs	r0, #0
 801523a:	f7fd feff 	bl	801303c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801523e:	4807      	ldr	r0, [pc, #28]	; (801525c <touchgfx_init+0x4c>)
 8015240:	f008 ffc0 	bl	801e1c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8015244:	f7ff febc 	bl	8014fc0 <_ZN12FrontendHeap11getInstanceEv>
 8015248:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801524a:	4805      	ldr	r0, [pc, #20]	; (8015260 <touchgfx_init+0x50>)
 801524c:	f7fe ff68 	bl	8014120 <_ZN11TouchGFXHAL10initializeEv>
}
 8015250:	bf00      	nop
 8015252:	370c      	adds	r7, #12
 8015254:	46bd      	mov	sp, r7
 8015256:	bd90      	pop	{r4, r7, pc}
 8015258:	20006670 	.word	0x20006670
 801525c:	2000002c 	.word	0x2000002c
 8015260:	20006674 	.word	0x20006674

08015264 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8015264:	b580      	push	{r7, lr}
 8015266:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8015268:	4802      	ldr	r0, [pc, #8]	; (8015274 <touchgfx_taskEntry+0x10>)
 801526a:	f000 fff0 	bl	801624e <_ZN8touchgfx3HAL9taskEntryEv>
}
 801526e:	bf00      	nop
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	20006674 	.word	0x20006674

08015278 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	4a10      	ldr	r2, [pc, #64]	; (80152c4 <_ZN12FrontendHeapD1Ev+0x4c>)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	601a      	str	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f603 5378 	addw	r3, r3, #3448	; 0xd78
 801528c:	4618      	mov	r0, r3
 801528e:	f7fd ff7d 	bl	801318c <_ZN19FrontendApplicationD1Ev>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f603 5364 	addw	r3, r3, #3428	; 0xd64
 8015298:	4618      	mov	r0, r3
 801529a:	f000 f827 	bl	80152ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	332c      	adds	r3, #44	; 0x2c
 80152a2:	4618      	mov	r0, r3
 80152a4:	f000 f844 	bl	8015330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3314      	adds	r3, #20
 80152ac:	4618      	mov	r0, r3
 80152ae:	f000 f863 	bl	8015378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7ff feb1 	bl	801501c <_ZN16FrontendHeapBaseD1Ev>
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4618      	mov	r0, r3
 80152be:	3708      	adds	r7, #8
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	0802f004 	.word	0x0802f004

080152c8 <_ZN12FrontendHeapD0Ev>:
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f7ff ffd1 	bl	8015278 <_ZN12FrontendHeapD1Ev>
 80152d6:	f640 61d4 	movw	r1, #3796	; 0xed4
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f016 fb9f 	bl	802ba1e <_ZdlPvj>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	4618      	mov	r0, r3
 80152e4:	3708      	adds	r7, #8
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}
	...

080152ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	4a05      	ldr	r2, [pc, #20]	; (801530c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	601a      	str	r2, [r3, #0]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4618      	mov	r0, r3
 80152fe:	f000 fbb9 	bl	8015a74 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	4618      	mov	r0, r3
 8015306:	3708      	adds	r7, #8
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	0802f018 	.word	0x0802f018

08015310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff ffe7 	bl	80152ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801531e:	2114      	movs	r1, #20
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f016 fb7c 	bl	802ba1e <_ZdlPvj>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	4618      	mov	r0, r3
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	4a05      	ldr	r2, [pc, #20]	; (8015350 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	601a      	str	r2, [r3, #0]
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	4618      	mov	r0, r3
 8015342:	f000 fb97 	bl	8015a74 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4618      	mov	r0, r3
 801534a:	3708      	adds	r7, #8
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	0802f04c 	.word	0x0802f04c

08015354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f7ff ffe7 	bl	8015330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015362:	f640 5138 	movw	r1, #3384	; 0xd38
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f016 fb59 	bl	802ba1e <_ZdlPvj>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	4618      	mov	r0, r3
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
	...

08015378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	4a05      	ldr	r2, [pc, #20]	; (8015398 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	601a      	str	r2, [r3, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	4618      	mov	r0, r3
 801538a:	f000 fb73 	bl	8015a74 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	4618      	mov	r0, r3
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	0802f080 	.word	0x0802f080

0801539c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f7ff ffe7 	bl	8015378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80153aa:	2118      	movs	r1, #24
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f016 fb36 	bl	802ba1e <_ZdlPvj>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	4618      	mov	r0, r3
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	4a05      	ldr	r2, [pc, #20]	; (80153dc <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	601a      	str	r2, [r3, #0]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7ff fcb1 	bl	8014d34 <_ZN8touchgfx3LCDD1Ev>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	080318d4 	.word	0x080318d4

080153e0 <_ZN8touchgfx8LCD16bppD0Ev>:
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f7ff ffe7 	bl	80153bc <_ZN8touchgfx8LCD16bppD1Ev>
 80153ee:	2178      	movs	r1, #120	; 0x78
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f016 fb14 	bl	802ba1e <_ZdlPvj>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	4618      	mov	r0, r3
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <_Z41__static_initialization_and_destruction_0ii>:
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af02      	add	r7, sp, #8
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2b01      	cmp	r3, #1
 801540e:	d119      	bne.n	8015444 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015416:	4293      	cmp	r3, r2
 8015418:	d114      	bne.n	8015444 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801541a:	4818      	ldr	r0, [pc, #96]	; (801547c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801541c:	f7ff fee6 	bl	80151ec <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 8015420:	4817      	ldr	r0, [pc, #92]	; (8015480 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015422:	f7ff f8b7 	bl	8014594 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 8015426:	4817      	ldr	r0, [pc, #92]	; (8015484 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015428:	f00c f804 	bl	8021434 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 801542c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015430:	9301      	str	r3, [sp, #4]
 8015432:	f44f 7348 	mov.w	r3, #800	; 0x320
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	4b10      	ldr	r3, [pc, #64]	; (801547c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801543a:	4a12      	ldr	r2, [pc, #72]	; (8015484 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801543c:	4910      	ldr	r1, [pc, #64]	; (8015480 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801543e:	4812      	ldr	r0, [pc, #72]	; (8015488 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015440:	f7ff fea8 	bl	8015194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d113      	bne.n	8015472 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015450:	4293      	cmp	r3, r2
 8015452:	d10e      	bne.n	8015472 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015454:	480c      	ldr	r0, [pc, #48]	; (8015488 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015456:	f7fe fedb 	bl	8014210 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801545a:	480c      	ldr	r0, [pc, #48]	; (801548c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801545c:	f7f9 f8e2 	bl	800e624 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8015460:	4808      	ldr	r0, [pc, #32]	; (8015484 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015462:	f7ff ffab 	bl	80153bc <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 8015466:	4806      	ldr	r0, [pc, #24]	; (8015480 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015468:	f7ff f8be 	bl	80145e8 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 801546c:	4803      	ldr	r0, [pc, #12]	; (801547c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801546e:	f7fe fc9b 	bl	8013da8 <_ZN20STM32TouchControllerD1Ev>
}
 8015472:	bf00      	nop
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	200059d4 	.word	0x200059d4
 8015480:	200059d8 	.word	0x200059d8
 8015484:	200065f8 	.word	0x200065f8
 8015488:	20006674 	.word	0x20006674
 801548c:	2000002c 	.word	0x2000002c

08015490 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8015490:	b480      	push	{r7}
 8015492:	b083      	sub	sp, #12
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015498:	2301      	movs	r3, #1
    }
 801549a:	4618      	mov	r0, r3
 801549c:	370c      	adds	r7, #12
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr

080154a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80154a6:	b480      	push	{r7}
 80154a8:	b083      	sub	sp, #12
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80154ae:	230c      	movs	r3, #12
    }
 80154b0:	4618      	mov	r0, r3
 80154b2:	370c      	adds	r7, #12
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	460b      	mov	r3, r1
 80154c6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80154c8:	887a      	ldrh	r2, [r7, #2]
 80154ca:	4613      	mov	r3, r2
 80154cc:	005b      	lsls	r3, r3, #1
 80154ce:	4413      	add	r3, r2
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	3308      	adds	r3, #8
 80154d4:	687a      	ldr	r2, [r7, #4]
 80154d6:	4413      	add	r3, r2
    }
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr

080154e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	460b      	mov	r3, r1
 80154ee:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80154f0:	887a      	ldrh	r2, [r7, #2]
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	009b      	lsls	r3, r3, #2
 80154fa:	3308      	adds	r3, #8
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	4413      	add	r3, r2
    }
 8015500:	4618      	mov	r0, r3
 8015502:	370c      	adds	r7, #12
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801550c:	b480      	push	{r7}
 801550e:	b083      	sub	sp, #12
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015514:	2301      	movs	r3, #1
    }
 8015516:	4618      	mov	r0, r3
 8015518:	370c      	adds	r7, #12
 801551a:	46bd      	mov	sp, r7
 801551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015520:	4770      	bx	lr

08015522 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015522:	b480      	push	{r7}
 8015524:	b083      	sub	sp, #12
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801552a:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    }
 801552e:	4618      	mov	r0, r3
 8015530:	370c      	adds	r7, #12
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr

0801553a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801553a:	b480      	push	{r7}
 801553c:	b083      	sub	sp, #12
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
 8015542:	460b      	mov	r3, r1
 8015544:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015546:	887b      	ldrh	r3, [r7, #2]
 8015548:	f44f 6253 	mov.w	r2, #3376	; 0xd30
 801554c:	fb02 f303 	mul.w	r3, r2, r3
 8015550:	3308      	adds	r3, #8
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	4413      	add	r3, r2
    }
 8015556:	4618      	mov	r0, r3
 8015558:	370c      	adds	r7, #12
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015562:	b480      	push	{r7}
 8015564:	b083      	sub	sp, #12
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
 801556a:	460b      	mov	r3, r1
 801556c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801556e:	887b      	ldrh	r3, [r7, #2]
 8015570:	f44f 6253 	mov.w	r2, #3376	; 0xd30
 8015574:	fb02 f303 	mul.w	r3, r2, r3
 8015578:	3308      	adds	r3, #8
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	4413      	add	r3, r2
    }
 801557e:	4618      	mov	r0, r3
 8015580:	370c      	adds	r7, #12
 8015582:	46bd      	mov	sp, r7
 8015584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015588:	4770      	bx	lr

0801558a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801558a:	b480      	push	{r7}
 801558c:	b083      	sub	sp, #12
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015592:	2301      	movs	r3, #1
    }
 8015594:	4618      	mov	r0, r3
 8015596:	370c      	adds	r7, #12
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr

080155a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80155a0:	b480      	push	{r7}
 80155a2:	b083      	sub	sp, #12
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80155a8:	2310      	movs	r3, #16
    }
 80155aa:	4618      	mov	r0, r3
 80155ac:	370c      	adds	r7, #12
 80155ae:	46bd      	mov	sp, r7
 80155b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b4:	4770      	bx	lr

080155b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80155b6:	b480      	push	{r7}
 80155b8:	b083      	sub	sp, #12
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
 80155be:	460b      	mov	r3, r1
 80155c0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80155c2:	887b      	ldrh	r3, [r7, #2]
 80155c4:	011b      	lsls	r3, r3, #4
 80155c6:	3308      	adds	r3, #8
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	4413      	add	r3, r2
    }
 80155cc:	4618      	mov	r0, r3
 80155ce:	370c      	adds	r7, #12
 80155d0:	46bd      	mov	sp, r7
 80155d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d6:	4770      	bx	lr

080155d8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80155d8:	b480      	push	{r7}
 80155da:	b083      	sub	sp, #12
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	460b      	mov	r3, r1
 80155e2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80155e4:	887b      	ldrh	r3, [r7, #2]
 80155e6:	011b      	lsls	r3, r3, #4
 80155e8:	3308      	adds	r3, #8
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	4413      	add	r3, r2
    }
 80155ee:	4618      	mov	r0, r3
 80155f0:	370c      	adds	r7, #12
 80155f2:	46bd      	mov	sp, r7
 80155f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f8:	4770      	bx	lr

080155fa <_GLOBAL__sub_I_touchgfx_init>:
 80155fa:	b580      	push	{r7, lr}
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015602:	2001      	movs	r0, #1
 8015604:	f7ff fefc 	bl	8015400 <_Z41__static_initialization_and_destruction_0ii>
 8015608:	bd80      	pop	{r7, pc}

0801560a <_GLOBAL__sub_D_touchgfx_init>:
 801560a:	b580      	push	{r7, lr}
 801560c:	af00      	add	r7, sp, #0
 801560e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015612:	2000      	movs	r0, #0
 8015614:	f7ff fef4 	bl	8015400 <_Z41__static_initialization_and_destruction_0ii>
 8015618:	bd80      	pop	{r7, pc}

0801561a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801561a:	b580      	push	{r7, lr}
 801561c:	b082      	sub	sp, #8
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	331c      	adds	r3, #28
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	4798      	blx	r3
    }
 801562e:	bf00      	nop
 8015630:	3708      	adds	r7, #8
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015636:	b480      	push	{r7}
 8015638:	b083      	sub	sp, #12
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015644:	3301      	adds	r3, #1
 8015646:	b2da      	uxtb	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801564e:	bf00      	nop
 8015650:	370c      	adds	r7, #12
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr
	...

0801565c <__NVIC_EnableIRQ>:
{
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
 8015662:	4603      	mov	r3, r0
 8015664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801566a:	2b00      	cmp	r3, #0
 801566c:	db0b      	blt.n	8015686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801566e:	79fb      	ldrb	r3, [r7, #7]
 8015670:	f003 021f 	and.w	r2, r3, #31
 8015674:	4907      	ldr	r1, [pc, #28]	; (8015694 <__NVIC_EnableIRQ+0x38>)
 8015676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801567a:	095b      	lsrs	r3, r3, #5
 801567c:	2001      	movs	r0, #1
 801567e:	fa00 f202 	lsl.w	r2, r0, r2
 8015682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015686:	bf00      	nop
 8015688:	370c      	adds	r7, #12
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr
 8015692:	bf00      	nop
 8015694:	e000e100 	.word	0xe000e100

08015698 <__NVIC_DisableIRQ>:
{
 8015698:	b480      	push	{r7}
 801569a:	b083      	sub	sp, #12
 801569c:	af00      	add	r7, sp, #0
 801569e:	4603      	mov	r3, r0
 80156a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	db12      	blt.n	80156d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80156aa:	79fb      	ldrb	r3, [r7, #7]
 80156ac:	f003 021f 	and.w	r2, r3, #31
 80156b0:	490a      	ldr	r1, [pc, #40]	; (80156dc <__NVIC_DisableIRQ+0x44>)
 80156b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156b6:	095b      	lsrs	r3, r3, #5
 80156b8:	2001      	movs	r0, #1
 80156ba:	fa00 f202 	lsl.w	r2, r0, r2
 80156be:	3320      	adds	r3, #32
 80156c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80156c4:	f3bf 8f4f 	dsb	sy
}
 80156c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80156ca:	f3bf 8f6f 	isb	sy
}
 80156ce:	bf00      	nop
}
 80156d0:	bf00      	nop
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr
 80156dc:	e000e100 	.word	0xe000e100

080156e0 <__NVIC_SetPriority>:
{
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	4603      	mov	r3, r0
 80156e8:	6039      	str	r1, [r7, #0]
 80156ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	db0a      	blt.n	801570a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	b2da      	uxtb	r2, r3
 80156f8:	490c      	ldr	r1, [pc, #48]	; (801572c <__NVIC_SetPriority+0x4c>)
 80156fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156fe:	0112      	lsls	r2, r2, #4
 8015700:	b2d2      	uxtb	r2, r2
 8015702:	440b      	add	r3, r1
 8015704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015708:	e00a      	b.n	8015720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	b2da      	uxtb	r2, r3
 801570e:	4908      	ldr	r1, [pc, #32]	; (8015730 <__NVIC_SetPriority+0x50>)
 8015710:	79fb      	ldrb	r3, [r7, #7]
 8015712:	f003 030f 	and.w	r3, r3, #15
 8015716:	3b04      	subs	r3, #4
 8015718:	0112      	lsls	r2, r2, #4
 801571a:	b2d2      	uxtb	r2, r2
 801571c:	440b      	add	r3, r1
 801571e:	761a      	strb	r2, [r3, #24]
}
 8015720:	bf00      	nop
 8015722:	370c      	adds	r7, #12
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr
 801572c:	e000e100 	.word	0xe000e100
 8015730:	e000ed00 	.word	0xe000ed00

08015734 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015734:	b5b0      	push	{r4, r5, r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	4618      	mov	r0, r3
 8015740:	f000 fd73 	bl	801622a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8015744:	687d      	ldr	r5, [r7, #4]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	335c      	adds	r3, #92	; 0x5c
 801574c:	681c      	ldr	r4, [r3, #0]
 801574e:	f005 f9a7 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 8015752:	4603      	mov	r3, r0
 8015754:	4619      	mov	r1, r3
 8015756:	4628      	mov	r0, r5
 8015758:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD00BFE50, (void*)0);
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	3380      	adds	r3, #128	; 0x80
 8015762:	681c      	ldr	r4, [r3, #0]
 8015764:	2300      	movs	r3, #0
 8015766:	4a04      	ldr	r2, [pc, #16]	; (8015778 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8015768:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 801576c:	47a0      	blx	r4
}
 801576e:	bf00      	nop
 8015770:	3708      	adds	r7, #8
 8015772:	46bd      	mov	sp, r7
 8015774:	bdb0      	pop	{r4, r5, r7, pc}
 8015776:	bf00      	nop
 8015778:	d00bfe50 	.word	0xd00bfe50

0801577c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b082      	sub	sp, #8
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015784:	2109      	movs	r1, #9
 8015786:	205a      	movs	r0, #90	; 0x5a
 8015788:	f7ff ffaa 	bl	80156e0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801578c:	2109      	movs	r1, #9
 801578e:	2058      	movs	r0, #88	; 0x58
 8015790:	f7ff ffa6 	bl	80156e0 <__NVIC_SetPriority>
}
 8015794:	bf00      	nop
 8015796:	3708      	adds	r7, #8
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80157a4:	205a      	movs	r0, #90	; 0x5a
 80157a6:	f7ff ff59 	bl	801565c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80157aa:	2058      	movs	r0, #88	; 0x58
 80157ac:	f7ff ff56 	bl	801565c <__NVIC_EnableIRQ>
}
 80157b0:	bf00      	nop
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80157c0:	205a      	movs	r0, #90	; 0x5a
 80157c2:	f7ff ff69 	bl	8015698 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80157c6:	2058      	movs	r0, #88	; 0x58
 80157c8:	f7ff ff66 	bl	8015698 <__NVIC_DisableIRQ>
}
 80157cc:	bf00      	nop
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80157dc:	4b11      	ldr	r3, [pc, #68]	; (8015824 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80157de:	68db      	ldr	r3, [r3, #12]
 80157e0:	b29b      	uxth	r3, r3
 80157e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	3b01      	subs	r3, #1
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	4b0e      	ldr	r3, [pc, #56]	; (8015828 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80157ee:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80157f0:	4b0c      	ldr	r3, [pc, #48]	; (8015824 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80157f2:	691b      	ldr	r3, [r3, #16]
 80157f4:	b29b      	uxth	r3, r3
 80157f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	3b01      	subs	r3, #1
 80157fe:	b29a      	uxth	r2, r3
 8015800:	4b0a      	ldr	r3, [pc, #40]	; (801582c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015802:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015804:	4b08      	ldr	r3, [pc, #32]	; (8015828 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015806:	881a      	ldrh	r2, [r3, #0]
 8015808:	4b06      	ldr	r3, [pc, #24]	; (8015824 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801580a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801580c:	4b05      	ldr	r3, [pc, #20]	; (8015824 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015810:	4a04      	ldr	r2, [pc, #16]	; (8015824 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015812:	f043 0301 	orr.w	r3, r3, #1
 8015816:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015818:	bf00      	nop
 801581a:	370c      	adds	r7, #12
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr
 8015824:	40016800 	.word	0x40016800
 8015828:	200066f0 	.word	0x200066f0
 801582c:	200066f2 	.word	0x200066f2

08015830 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	4618      	mov	r0, r3
 801583c:	f000 fcdc 	bl	80161f8 <_ZN8touchgfx3HAL10beginFrameEv>
 8015840:	4603      	mov	r3, r0
}
 8015842:	4618      	mov	r0, r3
 8015844:	3708      	adds	r7, #8
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b082      	sub	sp, #8
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	4618      	mov	r0, r3
 8015856:	f000 fcdb 	bl	8016210 <_ZN8touchgfx3HAL8endFrameEv>
}
 801585a:	bf00      	nop
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
	...

08015864 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801586c:	4b03      	ldr	r3, [pc, #12]	; (801587c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015870:	4618      	mov	r0, r3
 8015872:	370c      	adds	r7, #12
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr
 801587c:	40016884 	.word	0x40016884

08015880 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015880:	b480      	push	{r7}
 8015882:	b083      	sub	sp, #12
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801588a:	4a06      	ldr	r2, [pc, #24]	; (80158a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015890:	4b05      	ldr	r3, [pc, #20]	; (80158a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015892:	2201      	movs	r2, #1
 8015894:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015896:	bf00      	nop
 8015898:	370c      	adds	r7, #12
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr
 80158a2:	bf00      	nop
 80158a4:	40016884 	.word	0x40016884
 80158a8:	40016800 	.word	0x40016800

080158ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	4618      	mov	r0, r3
 80158bc:	f000 fc68 	bl	8016190 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80158c0:	bf00      	nop
 80158c2:	3708      	adds	r7, #8
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b084      	sub	sp, #16
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	60b9      	str	r1, [r7, #8]
 80158d2:	607a      	str	r2, [r7, #4]
 80158d4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80158d6:	68f8      	ldr	r0, [r7, #12]
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	68b9      	ldr	r1, [r7, #8]
 80158de:	f000 fdc0 	bl	8016462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80158e2:	4603      	mov	r3, r0
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80158f4:	4b1a      	ldr	r3, [pc, #104]	; (8015960 <HAL_LTDC_LineEventCallback+0x74>)
 80158f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158f8:	4a1a      	ldr	r2, [pc, #104]	; (8015964 <HAL_LTDC_LineEventCallback+0x78>)
 80158fa:	8812      	ldrh	r2, [r2, #0]
 80158fc:	4293      	cmp	r3, r2
 80158fe:	bf0c      	ite	eq
 8015900:	2301      	moveq	r3, #1
 8015902:	2300      	movne	r3, #0
 8015904:	b2db      	uxtb	r3, r3
 8015906:	2b00      	cmp	r3, #0
 8015908:	d017      	beq.n	801593a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801590a:	4b17      	ldr	r3, [pc, #92]	; (8015968 <HAL_LTDC_LineEventCallback+0x7c>)
 801590c:	881b      	ldrh	r3, [r3, #0]
 801590e:	4619      	mov	r1, r3
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f7ed ff5d 	bl	80037d0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015916:	f7f9 fb0f 	bl	800ef38 <_ZN8touchgfx3HAL11getInstanceEv>
 801591a:	4603      	mov	r3, r0
 801591c:	4618      	mov	r0, r3
 801591e:	f7ff fe8a 	bl	8015636 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015922:	f7fe fcfd 	bl	8014320 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015926:	f7f9 fb07 	bl	800ef38 <_ZN8touchgfx3HAL11getInstanceEv>
 801592a:	4603      	mov	r3, r0
 801592c:	4618      	mov	r0, r3
 801592e:	f001 fa73 	bl	8016e18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015932:	2000      	movs	r0, #0
 8015934:	f7fe fa5a 	bl	8013dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015938:	e00e      	b.n	8015958 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801593a:	4b0a      	ldr	r3, [pc, #40]	; (8015964 <HAL_LTDC_LineEventCallback+0x78>)
 801593c:	881b      	ldrh	r3, [r3, #0]
 801593e:	4619      	mov	r1, r3
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ed ff45 	bl	80037d0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015946:	2000      	movs	r0, #0
 8015948:	f7fe fa5b 	bl	8013e02 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801594c:	f7f9 faf4 	bl	800ef38 <_ZN8touchgfx3HAL11getInstanceEv>
 8015950:	4603      	mov	r3, r0
 8015952:	4618      	mov	r0, r3
 8015954:	f7ff fe61 	bl	801561a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015958:	bf00      	nop
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	40016800 	.word	0x40016800
 8015964:	200066f0 	.word	0x200066f0
 8015968:	200066f2 	.word	0x200066f2

0801596c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801596c:	8880      	ldrh	r0, [r0, #4]
 801596e:	4770      	bx	lr

08015970 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015970:	2300      	movs	r3, #0
 8015972:	8083      	strh	r3, [r0, #4]
 8015974:	4770      	bx	lr
	...

08015978 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801597a:	6803      	ldr	r3, [r0, #0]
 801597c:	4605      	mov	r5, r0
 801597e:	460e      	mov	r6, r1
 8015980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015982:	2100      	movs	r1, #0
 8015984:	4798      	blx	r3
 8015986:	682b      	ldr	r3, [r5, #0]
 8015988:	4604      	mov	r4, r0
 801598a:	6a1b      	ldr	r3, [r3, #32]
 801598c:	4628      	mov	r0, r5
 801598e:	4798      	blx	r3
 8015990:	88ab      	ldrh	r3, [r5, #4]
 8015992:	1b34      	subs	r4, r6, r4
 8015994:	b2a4      	uxth	r4, r4
 8015996:	fbb4 f4f0 	udiv	r4, r4, r0
 801599a:	42a3      	cmp	r3, r4
 801599c:	d805      	bhi.n	80159aa <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801599e:	4b0e      	ldr	r3, [pc, #56]	; (80159d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80159a0:	4a0e      	ldr	r2, [pc, #56]	; (80159dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80159a2:	211e      	movs	r1, #30
 80159a4:	480e      	ldr	r0, [pc, #56]	; (80159e0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80159a6:	f016 fe59 	bl	802c65c <__assert_func>
 80159aa:	682b      	ldr	r3, [r5, #0]
 80159ac:	2100      	movs	r1, #0
 80159ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b0:	4628      	mov	r0, r5
 80159b2:	4798      	blx	r3
 80159b4:	682b      	ldr	r3, [r5, #0]
 80159b6:	4607      	mov	r7, r0
 80159b8:	6a1b      	ldr	r3, [r3, #32]
 80159ba:	4628      	mov	r0, r5
 80159bc:	4798      	blx	r3
 80159be:	1bf3      	subs	r3, r6, r7
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	fbb3 f2f0 	udiv	r2, r3, r0
 80159c6:	fb02 3010 	mls	r0, r2, r0, r3
 80159ca:	b118      	cbz	r0, 80159d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80159cc:	4b05      	ldr	r3, [pc, #20]	; (80159e4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80159ce:	4a03      	ldr	r2, [pc, #12]	; (80159dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80159d0:	211f      	movs	r1, #31
 80159d2:	e7e7      	b.n	80159a4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80159d4:	4620      	mov	r0, r4
 80159d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159d8:	0802f19c 	.word	0x0802f19c
 80159dc:	0802f30a 	.word	0x0802f30a
 80159e0:	0802f1b1 	.word	0x0802f1b1
 80159e4:	0802f1df 	.word	0x0802f1df

080159e8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80159e8:	b538      	push	{r3, r4, r5, lr}
 80159ea:	6803      	ldr	r3, [r0, #0]
 80159ec:	6a1b      	ldr	r3, [r3, #32]
 80159ee:	460d      	mov	r5, r1
 80159f0:	4604      	mov	r4, r0
 80159f2:	4798      	blx	r3
 80159f4:	4285      	cmp	r5, r0
 80159f6:	d905      	bls.n	8015a04 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80159f8:	4b0c      	ldr	r3, [pc, #48]	; (8015a2c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80159fa:	4a0d      	ldr	r2, [pc, #52]	; (8015a30 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80159fc:	2130      	movs	r1, #48	; 0x30
 80159fe:	480d      	ldr	r0, [pc, #52]	; (8015a34 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015a00:	f016 fe2c 	bl	802c65c <__assert_func>
 8015a04:	6823      	ldr	r3, [r4, #0]
 8015a06:	88a5      	ldrh	r5, [r4, #4]
 8015a08:	69db      	ldr	r3, [r3, #28]
 8015a0a:	4620      	mov	r0, r4
 8015a0c:	4798      	blx	r3
 8015a0e:	4285      	cmp	r5, r0
 8015a10:	d303      	bcc.n	8015a1a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015a12:	4b09      	ldr	r3, [pc, #36]	; (8015a38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015a14:	4a06      	ldr	r2, [pc, #24]	; (8015a30 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015a16:	2131      	movs	r1, #49	; 0x31
 8015a18:	e7f1      	b.n	80159fe <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015a1a:	6823      	ldr	r3, [r4, #0]
 8015a1c:	88a1      	ldrh	r1, [r4, #4]
 8015a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a20:	4620      	mov	r0, r4
 8015a22:	4798      	blx	r3
 8015a24:	88a3      	ldrh	r3, [r4, #4]
 8015a26:	3301      	adds	r3, #1
 8015a28:	80a3      	strh	r3, [r4, #4]
 8015a2a:	bd38      	pop	{r3, r4, r5, pc}
 8015a2c:	0802f259 	.word	0x0802f259
 8015a30:	0802f34d 	.word	0x0802f34d
 8015a34:	0802f1b1 	.word	0x0802f1b1
 8015a38:	0802f270 	.word	0x0802f270

08015a3c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015a3c:	b570      	push	{r4, r5, r6, lr}
 8015a3e:	6803      	ldr	r3, [r0, #0]
 8015a40:	6a1b      	ldr	r3, [r3, #32]
 8015a42:	4616      	mov	r6, r2
 8015a44:	4604      	mov	r4, r0
 8015a46:	460d      	mov	r5, r1
 8015a48:	4798      	blx	r3
 8015a4a:	4286      	cmp	r6, r0
 8015a4c:	d905      	bls.n	8015a5a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015a4e:	4b06      	ldr	r3, [pc, #24]	; (8015a68 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015a50:	4a06      	ldr	r2, [pc, #24]	; (8015a6c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015a52:	4807      	ldr	r0, [pc, #28]	; (8015a70 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015a54:	213a      	movs	r1, #58	; 0x3a
 8015a56:	f016 fe01 	bl	802c65c <__assert_func>
 8015a5a:	6823      	ldr	r3, [r4, #0]
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	4620      	mov	r0, r4
 8015a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a66:	4718      	bx	r3
 8015a68:	0802f259 	.word	0x0802f259
 8015a6c:	0802f2c0 	.word	0x0802f2c0
 8015a70:	0802f1b1 	.word	0x0802f1b1

08015a74 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015a74:	4770      	bx	lr
	...

08015a78 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015a78:	4a02      	ldr	r2, [pc, #8]	; (8015a84 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015a7a:	6002      	str	r2, [r0, #0]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	8082      	strh	r2, [r0, #4]
 8015a80:	4770      	bx	lr
 8015a82:	bf00      	nop
 8015a84:	0802f294 	.word	0x0802f294

08015a88 <_ZN8touchgfx9Container13getFirstChildEv>:
 8015a88:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015a8a:	4770      	bx	lr

08015a8c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8015a8c:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8015a90:	4770      	bx	lr

08015a92 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8015a92:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8015a96:	4770      	bx	lr

08015a98 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8015a98:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8015a9c:	4770      	bx	lr

08015a9e <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8015a9e:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8015aa2:	4770      	bx	lr

08015aa4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8015aa4:	b510      	push	{r4, lr}
 8015aa6:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8015aaa:	600c      	str	r4, [r1, #0]
 8015aac:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015ab0:	6011      	str	r1, [r2, #0]
 8015ab2:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8015ab6:	801a      	strh	r2, [r3, #0]
 8015ab8:	9b02      	ldr	r3, [sp, #8]
 8015aba:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8015abe:	801a      	strh	r2, [r3, #0]
 8015ac0:	bd10      	pop	{r4, pc}

08015ac2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8015ac2:	b510      	push	{r4, lr}
 8015ac4:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8015ac8:	600c      	str	r4, [r1, #0]
 8015aca:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015ace:	6011      	str	r1, [r2, #0]
 8015ad0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8015ad4:	801a      	strh	r2, [r3, #0]
 8015ad6:	bd10      	pop	{r4, pc}

08015ad8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8015ad8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8015adc:	600b      	str	r3, [r1, #0]
 8015ade:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015ae2:	6013      	str	r3, [r2, #0]
 8015ae4:	4770      	bx	lr

08015ae6 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8015ae6:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8015aea:	4770      	bx	lr

08015aec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8015aec:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8015af0:	4770      	bx	lr

08015af2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8015af2:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8015af6:	4770      	bx	lr

08015af8 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8015af8:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8015afc:	4770      	bx	lr

08015afe <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8015afe:	b570      	push	{r4, r5, r6, lr}
 8015b00:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8015b04:	428d      	cmp	r5, r1
 8015b06:	bfb8      	it	lt
 8015b08:	460d      	movlt	r5, r1
 8015b0a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015b0e:	428d      	cmp	r5, r1
 8015b10:	4604      	mov	r4, r0
 8015b12:	bfa8      	it	ge
 8015b14:	460d      	movge	r5, r1
 8015b16:	4616      	mov	r6, r2
 8015b18:	b99a      	cbnz	r2, 8015b42 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8015b1a:	6803      	ldr	r3, [r0, #0]
 8015b1c:	4629      	mov	r1, r5
 8015b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015b22:	4798      	blx	r3
 8015b24:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015b28:	b338      	cbz	r0, 8015b7a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8015b2a:	6803      	ldr	r3, [r0, #0]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	4798      	blx	r3
 8015b30:	b318      	cbz	r0, 8015b7a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8015b32:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015b36:	6803      	ldr	r3, [r0, #0]
 8015b38:	4621      	mov	r1, r4
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b40:	4718      	bx	r3
 8015b42:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	dd04      	ble.n	8015b54 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x56>
 8015b4a:	f004 ffa9 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 8015b4e:	4621      	mov	r1, r4
 8015b50:	f004 ffde 	bl	801ab10 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8015b54:	6823      	ldr	r3, [r4, #0]
 8015b56:	4620      	mov	r0, r4
 8015b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015b5c:	4798      	blx	r3
 8015b5e:	2300      	movs	r3, #0
 8015b60:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
 8015b64:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8015b68:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8015b6c:	f004 ff98 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 8015b70:	4621      	mov	r1, r4
 8015b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b76:	f004 bf99 	b.w	801aaac <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8015b7a:	bd70      	pop	{r4, r5, r6, pc}

08015b7c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015b7c:	b510      	push	{r4, lr}
 8015b7e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8015b82:	4299      	cmp	r1, r3
 8015b84:	bfb8      	it	lt
 8015b86:	4619      	movlt	r1, r3
 8015b88:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015b8c:	4299      	cmp	r1, r3
 8015b8e:	bfa8      	it	ge
 8015b90:	4619      	movge	r1, r3
 8015b92:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8015b96:	428b      	cmp	r3, r1
 8015b98:	4604      	mov	r4, r0
 8015b9a:	d010      	beq.n	8015bbe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015b9c:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8015ba0:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8015ba4:	b158      	cbz	r0, 8015bbe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015ba6:	6803      	ldr	r3, [r0, #0]
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	4798      	blx	r3
 8015bac:	b138      	cbz	r0, 8015bbe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015bae:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8015bb2:	6803      	ldr	r3, [r0, #0]
 8015bb4:	4621      	mov	r1, r4
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bbc:	4718      	bx	r3
 8015bbe:	bd10      	pop	{r4, pc}

08015bc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8015bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc4:	4291      	cmp	r1, r2
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	460e      	mov	r6, r1
 8015bca:	4615      	mov	r5, r2
 8015bcc:	4698      	mov	r8, r3
 8015bce:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8015bd2:	db05      	blt.n	8015be0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8015bd4:	4b11      	ldr	r3, [pc, #68]	; (8015c1c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8015bd6:	4a12      	ldr	r2, [pc, #72]	; (8015c20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8015bd8:	214b      	movs	r1, #75	; 0x4b
 8015bda:	4812      	ldr	r0, [pc, #72]	; (8015c24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8015bdc:	f016 fd3e 	bl	802c65c <__assert_func>
 8015be0:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8015be4:	6803      	ldr	r3, [r0, #0]
 8015be6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8015bea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015bee:	4798      	blx	r3
 8015bf0:	f1b8 0f00 	cmp.w	r8, #0
 8015bf4:	d10c      	bne.n	8015c10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8015bf6:	1bad      	subs	r5, r5, r6
 8015bf8:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8015bfc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8015c00:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8015c04:	42bb      	cmp	r3, r7
 8015c06:	d806      	bhi.n	8015c16 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8015c08:	4b07      	ldr	r3, [pc, #28]	; (8015c28 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8015c0a:	4a05      	ldr	r2, [pc, #20]	; (8015c20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8015c0c:	2158      	movs	r1, #88	; 0x58
 8015c0e:	e7e4      	b.n	8015bda <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8015c10:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8015c14:	e7f2      	b.n	8015bfc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8015c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c1a:	bf00      	nop
 8015c1c:	0802f38b 	.word	0x0802f38b
 8015c20:	0802f4d4 	.word	0x0802f4d4
 8015c24:	0802f395 	.word	0x0802f395
 8015c28:	0802f3ec 	.word	0x0802f3ec

08015c2c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8015c2c:	b570      	push	{r4, r5, r6, lr}
 8015c2e:	4604      	mov	r4, r0
 8015c30:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8015c34:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8015c38:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8015c3c:	3001      	adds	r0, #1
 8015c3e:	1ad2      	subs	r2, r2, r3
 8015c40:	b212      	sxth	r2, r2
 8015c42:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8015c46:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8015c4a:	2100      	movs	r1, #0
 8015c4c:	b280      	uxth	r0, r0
 8015c4e:	47a8      	blx	r5
 8015c50:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8015c54:	6823      	ldr	r3, [r4, #0]
 8015c56:	4401      	add	r1, r0
 8015c58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	4798      	blx	r3
 8015c60:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8015c64:	429a      	cmp	r2, r3
 8015c66:	db16      	blt.n	8015c96 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015c68:	2300      	movs	r3, #0
 8015c6a:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
 8015c6e:	f004 ff17 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 8015c72:	4621      	mov	r1, r4
 8015c74:	f004 ff4c 	bl	801ab10 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8015c78:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015c7c:	b158      	cbz	r0, 8015c96 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015c7e:	6803      	ldr	r3, [r0, #0]
 8015c80:	68db      	ldr	r3, [r3, #12]
 8015c82:	4798      	blx	r3
 8015c84:	b138      	cbz	r0, 8015c96 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015c86:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015c8a:	6803      	ldr	r3, [r0, #0]
 8015c8c:	4621      	mov	r1, r4
 8015c8e:	689b      	ldr	r3, [r3, #8]
 8015c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c94:	4718      	bx	r3
 8015c96:	bd70      	pop	{r4, r5, r6, pc}

08015c98 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	460d      	mov	r5, r1
 8015c9e:	b1a9      	cbz	r1, 8015ccc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8015ca0:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8015ca4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8015ca8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8015cac:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8015cb0:	ab01      	add	r3, sp, #4
 8015cb2:	1a12      	subs	r2, r2, r0
 8015cb4:	1b89      	subs	r1, r1, r6
 8015cb6:	1a38      	subs	r0, r7, r0
 8015cb8:	f006 f890 	bl	801bddc <_ZN8touchgfx6muldivElllRl>
 8015cbc:	4629      	mov	r1, r5
 8015cbe:	ab01      	add	r3, sp, #4
 8015cc0:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8015cc4:	4430      	add	r0, r6
 8015cc6:	f006 f889 	bl	801bddc <_ZN8touchgfx6muldivElllRl>
 8015cca:	b285      	uxth	r5, r0
 8015ccc:	4628      	mov	r0, r5
 8015cce:	b003      	add	sp, #12
 8015cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015cd2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8015cdc:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8015ce0:	460e      	mov	r6, r1
 8015ce2:	4615      	mov	r5, r2
 8015ce4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015ce8:	4619      	mov	r1, r3
 8015cea:	463a      	mov	r2, r7
 8015cec:	3058      	adds	r0, #88	; 0x58
 8015cee:	4698      	mov	r8, r3
 8015cf0:	f7f9 fd62 	bl	800f7b8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015cf4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015cf8:	4446      	add	r6, r8
 8015cfa:	42b3      	cmp	r3, r6
 8015cfc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015d00:	bfb8      	it	lt
 8015d02:	8126      	strhlt	r6, [r4, #8]
 8015d04:	443d      	add	r5, r7
 8015d06:	42ab      	cmp	r3, r5
 8015d08:	bfb8      	it	lt
 8015d0a:	8165      	strhlt	r5, [r4, #10]
 8015d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d10 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015d10:	b510      	push	{r4, lr}
 8015d12:	4604      	mov	r4, r0
 8015d14:	302c      	adds	r0, #44	; 0x2c
 8015d16:	f003 f9d1 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015d1a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8015d1e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8015d22:	4620      	mov	r0, r4
 8015d24:	f7f9 fd48 	bl	800f7b8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015d28:	bd10      	pop	{r4, pc}
	...

08015d2c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d2e:	4604      	mov	r4, r0
 8015d30:	4626      	mov	r6, r4
 8015d32:	2500      	movs	r5, #0
 8015d34:	f7f9 fc4a 	bl	800f5cc <_ZN8touchgfx8DrawableC1Ev>
 8015d38:	4b22      	ldr	r3, [pc, #136]	; (8015dc4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x98>)
 8015d3a:	62a5      	str	r5, [r4, #40]	; 0x28
 8015d3c:	f846 3b2c 	str.w	r3, [r6], #44
 8015d40:	2226      	movs	r2, #38	; 0x26
 8015d42:	4629      	mov	r1, r5
 8015d44:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015d48:	4630      	mov	r0, r6
 8015d4a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015d4e:	f016 fd11 	bl	802c774 <memset>
 8015d52:	4630      	mov	r0, r6
 8015d54:	f7f9 fc3a 	bl	800f5cc <_ZN8touchgfx8DrawableC1Ev>
 8015d58:	a902      	add	r1, sp, #8
 8015d5a:	4b1b      	ldr	r3, [pc, #108]	; (8015dc8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8015d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d5e:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8015d62:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8015d66:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015d70:	f003 f9a4 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015d74:	4638      	mov	r0, r7
 8015d76:	f7f9 fc29 	bl	800f5cc <_ZN8touchgfx8DrawableC1Ev>
 8015d7a:	4b14      	ldr	r3, [pc, #80]	; (8015dcc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8015d7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8015d7e:	2364      	movs	r3, #100	; 0x64
 8015d80:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8015d84:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8015d88:	4b11      	ldr	r3, [pc, #68]	; (8015dd0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8015d8a:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015d8e:	e9c4 3525 	strd	r3, r5, [r4, #148]	; 0x94
 8015d92:	4629      	mov	r1, r5
 8015d94:	4630      	mov	r0, r6
 8015d96:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8015d9a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8015d9e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8015da2:	f7f9 fc8f 	bl	800f6c4 <_ZN8touchgfx8Drawable4setXEs>
 8015da6:	4629      	mov	r1, r5
 8015da8:	4630      	mov	r0, r6
 8015daa:	f7f9 fc9a 	bl	800f6e2 <_ZN8touchgfx8Drawable4setYEs>
 8015dae:	4631      	mov	r1, r6
 8015db0:	4620      	mov	r0, r4
 8015db2:	f000 f8a7 	bl	8015f04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015db6:	4620      	mov	r0, r4
 8015db8:	4639      	mov	r1, r7
 8015dba:	f000 f8a3 	bl	8015f04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	b003      	add	sp, #12
 8015dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dc4:	0802f410 	.word	0x0802f410
 8015dc8:	080306cc 	.word	0x080306cc
 8015dcc:	0802f600 	.word	0x0802f600
 8015dd0:	0801c4fb 	.word	0x0801c4fb

08015dd4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015dd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015dd6:	2000      	movs	r0, #0
 8015dd8:	b12b      	cbz	r3, 8015de6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015dda:	b920      	cbnz	r0, 8015de6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015ddc:	1a5a      	subs	r2, r3, r1
 8015dde:	4250      	negs	r0, r2
 8015de0:	4150      	adcs	r0, r2
 8015de2:	699b      	ldr	r3, [r3, #24]
 8015de4:	e7f8      	b.n	8015dd8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015de6:	4770      	bx	lr

08015de8 <_ZN8touchgfx9Container9removeAllEv>:
 8015de8:	2200      	movs	r2, #0
 8015dea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015dec:	b123      	cbz	r3, 8015df8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015dee:	6999      	ldr	r1, [r3, #24]
 8015df0:	6281      	str	r1, [r0, #40]	; 0x28
 8015df2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015df6:	e7f8      	b.n	8015dea <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015df8:	4770      	bx	lr

08015dfa <_ZN8touchgfx9Container6unlinkEv>:
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	6283      	str	r3, [r0, #40]	; 0x28
 8015dfe:	4770      	bx	lr

08015e00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e04:	461f      	mov	r7, r3
 8015e06:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015e0a:	460d      	mov	r5, r1
 8015e0c:	4616      	mov	r6, r2
 8015e0e:	b103      	cbz	r3, 8015e12 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015e10:	6038      	str	r0, [r7, #0]
 8015e12:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015e14:	b314      	cbz	r4, 8015e5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015e16:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015e1a:	b1eb      	cbz	r3, 8015e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015e1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015e20:	428d      	cmp	r5, r1
 8015e22:	db19      	blt.n	8015e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015e24:	8923      	ldrh	r3, [r4, #8]
 8015e26:	b289      	uxth	r1, r1
 8015e28:	440b      	add	r3, r1
 8015e2a:	b21b      	sxth	r3, r3
 8015e2c:	429d      	cmp	r5, r3
 8015e2e:	da13      	bge.n	8015e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015e30:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015e34:	4296      	cmp	r6, r2
 8015e36:	db0f      	blt.n	8015e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015e38:	8963      	ldrh	r3, [r4, #10]
 8015e3a:	b292      	uxth	r2, r2
 8015e3c:	4413      	add	r3, r2
 8015e3e:	b21b      	sxth	r3, r3
 8015e40:	429e      	cmp	r6, r3
 8015e42:	da09      	bge.n	8015e58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015e44:	6823      	ldr	r3, [r4, #0]
 8015e46:	1ab2      	subs	r2, r6, r2
 8015e48:	1a69      	subs	r1, r5, r1
 8015e4a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015e4e:	b212      	sxth	r2, r2
 8015e50:	463b      	mov	r3, r7
 8015e52:	b209      	sxth	r1, r1
 8015e54:	4620      	mov	r0, r4
 8015e56:	47c0      	blx	r8
 8015e58:	69a4      	ldr	r4, [r4, #24]
 8015e5a:	e7db      	b.n	8015e14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e60 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015e60:	2200      	movs	r2, #0
 8015e62:	8002      	strh	r2, [r0, #0]
 8015e64:	8042      	strh	r2, [r0, #2]
 8015e66:	8082      	strh	r2, [r0, #4]
 8015e68:	80c2      	strh	r2, [r0, #6]
 8015e6a:	4770      	bx	lr

08015e6c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015e6c:	b570      	push	{r4, r5, r6, lr}
 8015e6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015e70:	460d      	mov	r5, r1
 8015e72:	4616      	mov	r6, r2
 8015e74:	b13c      	cbz	r4, 8015e86 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015e76:	6823      	ldr	r3, [r4, #0]
 8015e78:	4620      	mov	r0, r4
 8015e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e7c:	4632      	mov	r2, r6
 8015e7e:	4629      	mov	r1, r5
 8015e80:	4798      	blx	r3
 8015e82:	69a4      	ldr	r4, [r4, #24]
 8015e84:	e7f6      	b.n	8015e74 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015e86:	bd70      	pop	{r4, r5, r6, pc}

08015e88 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015e8c:	460d      	mov	r5, r1
 8015e8e:	b134      	cbz	r4, 8015e9e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015e90:	682b      	ldr	r3, [r5, #0]
 8015e92:	4621      	mov	r1, r4
 8015e94:	689b      	ldr	r3, [r3, #8]
 8015e96:	4628      	mov	r0, r5
 8015e98:	4798      	blx	r3
 8015e9a:	69a4      	ldr	r4, [r4, #24]
 8015e9c:	e7f7      	b.n	8015e8e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015e9e:	bd38      	pop	{r3, r4, r5, pc}

08015ea0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015ea0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ea2:	b19b      	cbz	r3, 8015ecc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015ea4:	428b      	cmp	r3, r1
 8015ea6:	d109      	bne.n	8015ebc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015ea8:	699a      	ldr	r2, [r3, #24]
 8015eaa:	2100      	movs	r1, #0
 8015eac:	6159      	str	r1, [r3, #20]
 8015eae:	6282      	str	r2, [r0, #40]	; 0x28
 8015eb0:	b902      	cbnz	r2, 8015eb4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015eb2:	4770      	bx	lr
 8015eb4:	6199      	str	r1, [r3, #24]
 8015eb6:	4770      	bx	lr
 8015eb8:	4613      	mov	r3, r2
 8015eba:	b13a      	cbz	r2, 8015ecc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015ebc:	699a      	ldr	r2, [r3, #24]
 8015ebe:	428a      	cmp	r2, r1
 8015ec0:	d1fa      	bne.n	8015eb8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015ec2:	698a      	ldr	r2, [r1, #24]
 8015ec4:	619a      	str	r2, [r3, #24]
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015ecc:	4770      	bx	lr

08015ece <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015ece:	b410      	push	{r4}
 8015ed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ed2:	4604      	mov	r4, r0
 8015ed4:	b92b      	cbnz	r3, 8015ee2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015ed6:	6803      	ldr	r3, [r0, #0]
 8015ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ede:	4611      	mov	r1, r2
 8015ee0:	4718      	bx	r3
 8015ee2:	b941      	cbnz	r1, 8015ef6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015ee4:	6193      	str	r3, [r2, #24]
 8015ee6:	6282      	str	r2, [r0, #40]	; 0x28
 8015ee8:	6154      	str	r4, [r2, #20]
 8015eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eee:	4770      	bx	lr
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	2800      	cmp	r0, #0
 8015ef4:	d0f9      	beq.n	8015eea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015ef6:	4299      	cmp	r1, r3
 8015ef8:	6998      	ldr	r0, [r3, #24]
 8015efa:	d1f9      	bne.n	8015ef0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015efc:	6190      	str	r0, [r2, #24]
 8015efe:	618a      	str	r2, [r1, #24]
 8015f00:	e7f2      	b.n	8015ee8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015f04 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015f04:	4288      	cmp	r0, r1
 8015f06:	b508      	push	{r3, lr}
 8015f08:	d105      	bne.n	8015f16 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015f0a:	4b11      	ldr	r3, [pc, #68]	; (8015f50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015f0c:	4a11      	ldr	r2, [pc, #68]	; (8015f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015f0e:	2121      	movs	r1, #33	; 0x21
 8015f10:	4811      	ldr	r0, [pc, #68]	; (8015f58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015f12:	f016 fba3 	bl	802c65c <__assert_func>
 8015f16:	694b      	ldr	r3, [r1, #20]
 8015f18:	b11b      	cbz	r3, 8015f22 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015f1a:	4b10      	ldr	r3, [pc, #64]	; (8015f5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015f1c:	4a0d      	ldr	r2, [pc, #52]	; (8015f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015f1e:	2122      	movs	r1, #34	; 0x22
 8015f20:	e7f6      	b.n	8015f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015f22:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015f26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015f28:	b913      	cbnz	r3, 8015f30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015f2a:	6281      	str	r1, [r0, #40]	; 0x28
 8015f2c:	bd08      	pop	{r3, pc}
 8015f2e:	4613      	mov	r3, r2
 8015f30:	699a      	ldr	r2, [r3, #24]
 8015f32:	b12a      	cbz	r2, 8015f40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015f34:	428b      	cmp	r3, r1
 8015f36:	d1fa      	bne.n	8015f2e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015f38:	4b09      	ldr	r3, [pc, #36]	; (8015f60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015f3a:	4a06      	ldr	r2, [pc, #24]	; (8015f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015f3c:	2133      	movs	r1, #51	; 0x33
 8015f3e:	e7e7      	b.n	8015f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015f40:	428b      	cmp	r3, r1
 8015f42:	d103      	bne.n	8015f4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015f44:	4b06      	ldr	r3, [pc, #24]	; (8015f60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015f46:	4a03      	ldr	r2, [pc, #12]	; (8015f54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015f48:	2136      	movs	r1, #54	; 0x36
 8015f4a:	e7e1      	b.n	8015f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015f4c:	6199      	str	r1, [r3, #24]
 8015f4e:	e7ed      	b.n	8015f2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015f50:	0802f52d 	.word	0x0802f52d
 8015f54:	0802f680 	.word	0x0802f680
 8015f58:	0802f559 	.word	0x0802f559
 8015f5c:	0802f58c 	.word	0x0802f58c
 8015f60:	0802f5c2 	.word	0x0802f5c2

08015f64 <_ZN8touchgfx4RectaNERKS0_>:
 8015f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f68:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015f6c:	888c      	ldrh	r4, [r1, #4]
 8015f6e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015f72:	443c      	add	r4, r7
 8015f74:	b2a4      	uxth	r4, r4
 8015f76:	fa0f f884 	sxth.w	r8, r4
 8015f7a:	45c1      	cmp	r9, r8
 8015f7c:	da2f      	bge.n	8015fde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015f7e:	8882      	ldrh	r2, [r0, #4]
 8015f80:	444a      	add	r2, r9
 8015f82:	b292      	uxth	r2, r2
 8015f84:	fa0f fe82 	sxth.w	lr, r2
 8015f88:	4577      	cmp	r7, lr
 8015f8a:	da28      	bge.n	8015fde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015f8c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015f90:	88cb      	ldrh	r3, [r1, #6]
 8015f92:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015f96:	442b      	add	r3, r5
 8015f98:	b21b      	sxth	r3, r3
 8015f9a:	429e      	cmp	r6, r3
 8015f9c:	da1f      	bge.n	8015fde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015f9e:	88c3      	ldrh	r3, [r0, #6]
 8015fa0:	4433      	add	r3, r6
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	fa0f fc83 	sxth.w	ip, r3
 8015fa8:	4565      	cmp	r5, ip
 8015faa:	da18      	bge.n	8015fde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015fac:	454f      	cmp	r7, r9
 8015fae:	bfb8      	it	lt
 8015fb0:	464f      	movlt	r7, r9
 8015fb2:	42b5      	cmp	r5, r6
 8015fb4:	bfb8      	it	lt
 8015fb6:	4635      	movlt	r5, r6
 8015fb8:	45f0      	cmp	r8, lr
 8015fba:	bfd8      	it	le
 8015fbc:	4622      	movle	r2, r4
 8015fbe:	1bd2      	subs	r2, r2, r7
 8015fc0:	8082      	strh	r2, [r0, #4]
 8015fc2:	884a      	ldrh	r2, [r1, #2]
 8015fc4:	88c9      	ldrh	r1, [r1, #6]
 8015fc6:	8007      	strh	r7, [r0, #0]
 8015fc8:	440a      	add	r2, r1
 8015fca:	b292      	uxth	r2, r2
 8015fcc:	b211      	sxth	r1, r2
 8015fce:	458c      	cmp	ip, r1
 8015fd0:	bfa8      	it	ge
 8015fd2:	4613      	movge	r3, r2
 8015fd4:	1b5b      	subs	r3, r3, r5
 8015fd6:	80c3      	strh	r3, [r0, #6]
 8015fd8:	8045      	strh	r5, [r0, #2]
 8015fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fde:	2300      	movs	r3, #0
 8015fe0:	8003      	strh	r3, [r0, #0]
 8015fe2:	8043      	strh	r3, [r0, #2]
 8015fe4:	8083      	strh	r3, [r0, #4]
 8015fe6:	80c3      	strh	r3, [r0, #6]
 8015fe8:	e7f7      	b.n	8015fda <_ZN8touchgfx4RectaNERKS0_+0x76>

08015fea <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015fea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	dd06      	ble.n	8016000 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015ff2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	bfcc      	ite	gt
 8015ffa:	2000      	movgt	r0, #0
 8015ffc:	2001      	movle	r0, #1
 8015ffe:	4770      	bx	lr
 8016000:	2001      	movs	r0, #1
 8016002:	4770      	bx	lr

08016004 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016008:	2300      	movs	r3, #0
 801600a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801600c:	8003      	strh	r3, [r0, #0]
 801600e:	4604      	mov	r4, r0
 8016010:	8043      	strh	r3, [r0, #2]
 8016012:	8083      	strh	r3, [r0, #4]
 8016014:	80c3      	strh	r3, [r0, #6]
 8016016:	2d00      	cmp	r5, #0
 8016018:	d040      	beq.n	801609c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801601a:	1d28      	adds	r0, r5, #4
 801601c:	f7ff ffe5 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 8016020:	b988      	cbnz	r0, 8016046 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016022:	4620      	mov	r0, r4
 8016024:	f7ff ffe1 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 8016028:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801602c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016030:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016034:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016038:	b138      	cbz	r0, 801604a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801603a:	8022      	strh	r2, [r4, #0]
 801603c:	8063      	strh	r3, [r4, #2]
 801603e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016042:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016046:	69ad      	ldr	r5, [r5, #24]
 8016048:	e7e5      	b.n	8016016 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801604a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801604e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016052:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016056:	4290      	cmp	r0, r2
 8016058:	4607      	mov	r7, r0
 801605a:	bfa8      	it	ge
 801605c:	4617      	movge	r7, r2
 801605e:	4472      	add	r2, lr
 8016060:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016064:	8027      	strh	r7, [r4, #0]
 8016066:	4299      	cmp	r1, r3
 8016068:	460e      	mov	r6, r1
 801606a:	4440      	add	r0, r8
 801606c:	bfa8      	it	ge
 801606e:	461e      	movge	r6, r3
 8016070:	4471      	add	r1, lr
 8016072:	4463      	add	r3, ip
 8016074:	b200      	sxth	r0, r0
 8016076:	b212      	sxth	r2, r2
 8016078:	b209      	sxth	r1, r1
 801607a:	b21b      	sxth	r3, r3
 801607c:	4290      	cmp	r0, r2
 801607e:	bfac      	ite	ge
 8016080:	ebc7 0200 	rsbge	r2, r7, r0
 8016084:	ebc7 0202 	rsblt	r2, r7, r2
 8016088:	4299      	cmp	r1, r3
 801608a:	bfac      	ite	ge
 801608c:	ebc6 0301 	rsbge	r3, r6, r1
 8016090:	ebc6 0303 	rsblt	r3, r6, r3
 8016094:	8066      	strh	r6, [r4, #2]
 8016096:	80a2      	strh	r2, [r4, #4]
 8016098:	80e3      	strh	r3, [r4, #6]
 801609a:	e7d4      	b.n	8016046 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801609c:	4620      	mov	r0, r4
 801609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80160a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80160a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80160aa:	b383      	cbz	r3, 801610e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80160ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80160ae:	b374      	cbz	r4, 801610e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80160b0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80160b4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80160b8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80160bc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80160c0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80160c4:	b303      	cbz	r3, 8016108 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80160c6:	4668      	mov	r0, sp
 80160c8:	1d21      	adds	r1, r4, #4
 80160ca:	f8ad 5000 	strh.w	r5, [sp]
 80160ce:	f8ad 6002 	strh.w	r6, [sp, #2]
 80160d2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80160d6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80160da:	f7ff ff43 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 80160de:	4668      	mov	r0, sp
 80160e0:	f7ff ff83 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 80160e4:	b980      	cbnz	r0, 8016108 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80160e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80160ea:	88a2      	ldrh	r2, [r4, #4]
 80160ec:	1a9b      	subs	r3, r3, r2
 80160ee:	f8ad 3000 	strh.w	r3, [sp]
 80160f2:	88e2      	ldrh	r2, [r4, #6]
 80160f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80160f8:	1a9b      	subs	r3, r3, r2
 80160fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80160fe:	6823      	ldr	r3, [r4, #0]
 8016100:	4669      	mov	r1, sp
 8016102:	689b      	ldr	r3, [r3, #8]
 8016104:	4620      	mov	r0, r4
 8016106:	4798      	blx	r3
 8016108:	69a4      	ldr	r4, [r4, #24]
 801610a:	2c00      	cmp	r4, #0
 801610c:	d1d8      	bne.n	80160c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801610e:	b002      	add	sp, #8
 8016110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016114 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016114:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016116:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801611a:	460d      	mov	r5, r1
 801611c:	4616      	mov	r6, r2
 801611e:	b323      	cbz	r3, 801616a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016120:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016122:	b314      	cbz	r4, 801616a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016124:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016128:	b1eb      	cbz	r3, 8016166 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801612a:	6828      	ldr	r0, [r5, #0]
 801612c:	6869      	ldr	r1, [r5, #4]
 801612e:	466b      	mov	r3, sp
 8016130:	c303      	stmia	r3!, {r0, r1}
 8016132:	4668      	mov	r0, sp
 8016134:	1d21      	adds	r1, r4, #4
 8016136:	f7ff ff15 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801613a:	4668      	mov	r0, sp
 801613c:	f7ff ff55 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 8016140:	b988      	cbnz	r0, 8016166 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016142:	f8bd 3000 	ldrh.w	r3, [sp]
 8016146:	88a2      	ldrh	r2, [r4, #4]
 8016148:	1a9b      	subs	r3, r3, r2
 801614a:	f8ad 3000 	strh.w	r3, [sp]
 801614e:	88e2      	ldrh	r2, [r4, #6]
 8016150:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016154:	1a9b      	subs	r3, r3, r2
 8016156:	f8ad 3002 	strh.w	r3, [sp, #2]
 801615a:	6823      	ldr	r3, [r4, #0]
 801615c:	4632      	mov	r2, r6
 801615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016160:	4669      	mov	r1, sp
 8016162:	4620      	mov	r0, r4
 8016164:	4798      	blx	r3
 8016166:	69a4      	ldr	r4, [r4, #24]
 8016168:	e7db      	b.n	8016122 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801616a:	b002      	add	sp, #8
 801616c:	bd70      	pop	{r4, r5, r6, pc}

0801616e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801616e:	b513      	push	{r0, r1, r4, lr}
 8016170:	6803      	ldr	r3, [r0, #0]
 8016172:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8016176:	2300      	movs	r3, #0
 8016178:	e9cd 3300 	strd	r3, r3, [sp]
 801617c:	466b      	mov	r3, sp
 801617e:	47a0      	blx	r4
 8016180:	b002      	add	sp, #8
 8016182:	bd10      	pop	{r4, pc}

08016184 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016184:	2301      	movs	r3, #1
 8016186:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801618a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801618e:	4770      	bx	lr

08016190 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016190:	2301      	movs	r3, #1
 8016192:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016196:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801619a:	4770      	bx	lr

0801619c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801619c:	6843      	ldr	r3, [r0, #4]
 801619e:	2201      	movs	r2, #1
 80161a0:	725a      	strb	r2, [r3, #9]
 80161a2:	6840      	ldr	r0, [r0, #4]
 80161a4:	6803      	ldr	r3, [r0, #0]
 80161a6:	691b      	ldr	r3, [r3, #16]
 80161a8:	4718      	bx	r3

080161aa <_ZN8touchgfx3HAL8flushDMAEv>:
 80161aa:	6840      	ldr	r0, [r0, #4]
 80161ac:	6803      	ldr	r3, [r0, #0]
 80161ae:	689b      	ldr	r3, [r3, #8]
 80161b0:	4718      	bx	r3

080161b2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80161b2:	b530      	push	{r4, r5, lr}
 80161b4:	b08b      	sub	sp, #44	; 0x2c
 80161b6:	6804      	ldr	r4, [r0, #0]
 80161b8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80161bc:	9508      	str	r5, [sp, #32]
 80161be:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80161c2:	9507      	str	r5, [sp, #28]
 80161c4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80161c8:	9506      	str	r5, [sp, #24]
 80161ca:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80161ce:	9505      	str	r5, [sp, #20]
 80161d0:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80161d4:	9504      	str	r5, [sp, #16]
 80161d6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80161da:	9503      	str	r5, [sp, #12]
 80161dc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80161e0:	9502      	str	r5, [sp, #8]
 80161e2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80161e6:	e9cd 3500 	strd	r3, r5, [sp]
 80161ea:	4613      	mov	r3, r2
 80161ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80161ee:	2200      	movs	r2, #0
 80161f0:	47a0      	blx	r4
 80161f2:	b00b      	add	sp, #44	; 0x2c
 80161f4:	bd30      	pop	{r4, r5, pc}
	...

080161f8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80161f8:	4b04      	ldr	r3, [pc, #16]	; (801620c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	b123      	cbz	r3, 8016208 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80161fe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016202:	f080 0001 	eor.w	r0, r0, #1
 8016206:	4770      	bx	lr
 8016208:	2001      	movs	r0, #1
 801620a:	4770      	bx	lr
 801620c:	200066fe 	.word	0x200066fe

08016210 <_ZN8touchgfx3HAL8endFrameEv>:
 8016210:	b510      	push	{r4, lr}
 8016212:	4604      	mov	r4, r0
 8016214:	6840      	ldr	r0, [r0, #4]
 8016216:	6803      	ldr	r3, [r0, #0]
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	4798      	blx	r3
 801621c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016220:	b113      	cbz	r3, 8016228 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016222:	2301      	movs	r3, #1
 8016224:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016228:	bd10      	pop	{r4, pc}

0801622a <_ZN8touchgfx3HAL10initializeEv>:
 801622a:	b510      	push	{r4, lr}
 801622c:	4604      	mov	r4, r0
 801622e:	f7fe f811 	bl	8014254 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016232:	6860      	ldr	r0, [r4, #4]
 8016234:	6803      	ldr	r3, [r0, #0]
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	4798      	blx	r3
 801623a:	68e0      	ldr	r0, [r4, #12]
 801623c:	6803      	ldr	r3, [r0, #0]
 801623e:	689b      	ldr	r3, [r3, #8]
 8016240:	4798      	blx	r3
 8016242:	6823      	ldr	r3, [r4, #0]
 8016244:	4620      	mov	r0, r4
 8016246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801624c:	4718      	bx	r3

0801624e <_ZN8touchgfx3HAL9taskEntryEv>:
 801624e:	b508      	push	{r3, lr}
 8016250:	6803      	ldr	r3, [r0, #0]
 8016252:	4604      	mov	r4, r0
 8016254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016256:	4798      	blx	r3
 8016258:	6823      	ldr	r3, [r4, #0]
 801625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801625c:	4620      	mov	r0, r4
 801625e:	4798      	blx	r3
 8016260:	f7fe f86e 	bl	8014340 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016264:	6823      	ldr	r3, [r4, #0]
 8016266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016268:	e7f8      	b.n	801625c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801626c <_ZN8touchgfx3HAL4tickEv>:
 801626c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801626e:	6803      	ldr	r3, [r0, #0]
 8016270:	4d5c      	ldr	r5, [pc, #368]	; (80163e4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016276:	4604      	mov	r4, r0
 8016278:	4798      	blx	r3
 801627a:	2800      	cmp	r0, #0
 801627c:	f000 8097 	beq.w	80163ae <_ZN8touchgfx3HAL4tickEv+0x142>
 8016280:	2001      	movs	r0, #1
 8016282:	f7fd fdb3 	bl	8013dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016286:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801628a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801628e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016292:	2600      	movs	r6, #0
 8016294:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016298:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801629c:	b133      	cbz	r3, 80162ac <_ZN8touchgfx3HAL4tickEv+0x40>
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	4620      	mov	r0, r4
 80162a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80162a6:	4798      	blx	r3
 80162a8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80162ac:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80162b0:	6862      	ldr	r2, [r4, #4]
 80162b2:	f083 0301 	eor.w	r3, r3, #1
 80162b6:	7253      	strb	r3, [r2, #9]
 80162b8:	2601      	movs	r6, #1
 80162ba:	702e      	strb	r6, [r5, #0]
 80162bc:	f004 fbf0 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 80162c0:	6803      	ldr	r3, [r0, #0]
 80162c2:	4631      	mov	r1, r6
 80162c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162c6:	4798      	blx	r3
 80162c8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80162cc:	b90b      	cbnz	r3, 80162d2 <_ZN8touchgfx3HAL4tickEv+0x66>
 80162ce:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80162d2:	f004 fbe5 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 80162d6:	6803      	ldr	r3, [r0, #0]
 80162d8:	695b      	ldr	r3, [r3, #20]
 80162da:	4798      	blx	r3
 80162dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162de:	6803      	ldr	r3, [r0, #0]
 80162e0:	691b      	ldr	r3, [r3, #16]
 80162e2:	4798      	blx	r3
 80162e4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80162e8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80162ec:	3b01      	subs	r3, #1
 80162ee:	b2db      	uxtb	r3, r3
 80162f0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80162f4:	b10a      	cbz	r2, 80162fa <_ZN8touchgfx3HAL4tickEv+0x8e>
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d1eb      	bne.n	80162d2 <_ZN8touchgfx3HAL4tickEv+0x66>
 80162fa:	4a3b      	ldr	r2, [pc, #236]	; (80163e8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80162fc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016300:	7813      	ldrb	r3, [r2, #0]
 8016302:	3301      	adds	r3, #1
 8016304:	b25b      	sxtb	r3, r3
 8016306:	4299      	cmp	r1, r3
 8016308:	7013      	strb	r3, [r2, #0]
 801630a:	dc10      	bgt.n	801632e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801630c:	68e0      	ldr	r0, [r4, #12]
 801630e:	2300      	movs	r3, #0
 8016310:	7013      	strb	r3, [r2, #0]
 8016312:	6803      	ldr	r3, [r0, #0]
 8016314:	aa03      	add	r2, sp, #12
 8016316:	68db      	ldr	r3, [r3, #12]
 8016318:	a902      	add	r1, sp, #8
 801631a:	4798      	blx	r3
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	2800      	cmp	r0, #0
 8016320:	d051      	beq.n	80163c6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016326:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801632a:	4620      	mov	r0, r4
 801632c:	4798      	blx	r3
 801632e:	6960      	ldr	r0, [r4, #20]
 8016330:	2300      	movs	r3, #0
 8016332:	f88d 3007 	strb.w	r3, [sp, #7]
 8016336:	b158      	cbz	r0, 8016350 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016338:	6803      	ldr	r3, [r0, #0]
 801633a:	f10d 0107 	add.w	r1, sp, #7
 801633e:	68db      	ldr	r3, [r3, #12]
 8016340:	4798      	blx	r3
 8016342:	b128      	cbz	r0, 8016350 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016346:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801634a:	6803      	ldr	r3, [r0, #0]
 801634c:	68db      	ldr	r3, [r3, #12]
 801634e:	4798      	blx	r3
 8016350:	f104 001c 	add.w	r0, r4, #28
 8016354:	f013 fde4 	bl	8029f20 <_ZN8touchgfx8Gestures4tickEv>
 8016358:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801635c:	b30b      	cbz	r3, 80163a2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801635e:	6920      	ldr	r0, [r4, #16]
 8016360:	6803      	ldr	r3, [r0, #0]
 8016362:	691b      	ldr	r3, [r3, #16]
 8016364:	4798      	blx	r3
 8016366:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016368:	4606      	mov	r6, r0
 801636a:	b903      	cbnz	r3, 801636e <_ZN8touchgfx3HAL4tickEv+0x102>
 801636c:	6720      	str	r0, [r4, #112]	; 0x70
 801636e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016370:	4a1e      	ldr	r2, [pc, #120]	; (80163ec <_ZN8touchgfx3HAL4tickEv+0x180>)
 8016372:	1af3      	subs	r3, r6, r3
 8016374:	4293      	cmp	r3, r2
 8016376:	d914      	bls.n	80163a2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8016378:	6920      	ldr	r0, [r4, #16]
 801637a:	6803      	ldr	r3, [r0, #0]
 801637c:	699b      	ldr	r3, [r3, #24]
 801637e:	4798      	blx	r3
 8016380:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016382:	2264      	movs	r2, #100	; 0x64
 8016384:	1af3      	subs	r3, r6, r3
 8016386:	fbb3 f3f2 	udiv	r3, r3, r2
 801638a:	fbb0 f0f3 	udiv	r0, r0, r3
 801638e:	2800      	cmp	r0, #0
 8016390:	dc1e      	bgt.n	80163d0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8016392:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016396:	6920      	ldr	r0, [r4, #16]
 8016398:	6803      	ldr	r3, [r0, #0]
 801639a:	2100      	movs	r1, #0
 801639c:	69db      	ldr	r3, [r3, #28]
 801639e:	4798      	blx	r3
 80163a0:	6726      	str	r6, [r4, #112]	; 0x70
 80163a2:	f004 fb7d 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 80163a6:	6803      	ldr	r3, [r0, #0]
 80163a8:	2100      	movs	r1, #0
 80163aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163ac:	4798      	blx	r3
 80163ae:	6823      	ldr	r3, [r4, #0]
 80163b0:	4620      	mov	r0, r4
 80163b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80163b6:	4798      	blx	r3
 80163b8:	2001      	movs	r0, #1
 80163ba:	f7fd fd22 	bl	8013e02 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80163be:	2300      	movs	r3, #0
 80163c0:	702b      	strb	r3, [r5, #0]
 80163c2:	b004      	add	sp, #16
 80163c4:	bd70      	pop	{r4, r5, r6, pc}
 80163c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80163ca:	4620      	mov	r0, r4
 80163cc:	4798      	blx	r3
 80163ce:	e7ae      	b.n	801632e <_ZN8touchgfx3HAL4tickEv+0xc2>
 80163d0:	2863      	cmp	r0, #99	; 0x63
 80163d2:	bfcb      	itete	gt
 80163d4:	2300      	movgt	r3, #0
 80163d6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80163da:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80163de:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80163e2:	e7d8      	b.n	8016396 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80163e4:	20006704 	.word	0x20006704
 80163e8:	20006705 	.word	0x20006705
 80163ec:	05f5e100 	.word	0x05f5e100

080163f0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80163f0:	f7fd bf72 	b.w	80142d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080163f4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80163f4:	6581      	str	r1, [r0, #88]	; 0x58
 80163f6:	301c      	adds	r0, #28
 80163f8:	f013 bd90 	b.w	8029f1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080163fc <_ZN8touchgfx3HAL5touchEll>:
 80163fc:	b530      	push	{r4, r5, lr}
 80163fe:	b087      	sub	sp, #28
 8016400:	4604      	mov	r4, r0
 8016402:	a804      	add	r0, sp, #16
 8016404:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016408:	f004 f91a 	bl	801a640 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801640c:	9b04      	ldr	r3, [sp, #16]
 801640e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016412:	a906      	add	r1, sp, #24
 8016414:	9b05      	ldr	r3, [sp, #20]
 8016416:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801641a:	a803      	add	r0, sp, #12
 801641c:	f004 f94e 	bl	801a6bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016420:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016424:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016428:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801642c:	f104 001c 	add.w	r0, r4, #28
 8016430:	b189      	cbz	r1, 8016456 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016432:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016436:	9300      	str	r3, [sp, #0]
 8016438:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801643c:	4613      	mov	r3, r2
 801643e:	462a      	mov	r2, r5
 8016440:	f013 fd7c 	bl	8029f3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016444:	b128      	cbz	r0, 8016452 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016446:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801644a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801644c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016450:	6623      	str	r3, [r4, #96]	; 0x60
 8016452:	b007      	add	sp, #28
 8016454:	bd30      	pop	{r4, r5, pc}
 8016456:	f013 fdb5 	bl	8029fc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801645a:	2301      	movs	r3, #1
 801645c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016460:	e7f1      	b.n	8016446 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016462 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016462:	b570      	push	{r4, r5, r6, lr}
 8016464:	2b00      	cmp	r3, #0
 8016466:	d050      	beq.n	801650a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016468:	ea81 0002 	eor.w	r0, r1, r2
 801646c:	07c6      	lsls	r6, r0, #31
 801646e:	d508      	bpl.n	8016482 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016470:	3a01      	subs	r2, #1
 8016472:	18cc      	adds	r4, r1, r3
 8016474:	42a1      	cmp	r1, r4
 8016476:	d048      	beq.n	801650a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016478:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801647c:	f801 0b01 	strb.w	r0, [r1], #1
 8016480:	e7f8      	b.n	8016474 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016482:	07d5      	lsls	r5, r2, #31
 8016484:	bf42      	ittt	mi
 8016486:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801648a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801648e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016492:	2b01      	cmp	r3, #1
 8016494:	d915      	bls.n	80164c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016496:	ea82 0001 	eor.w	r0, r2, r1
 801649a:	0784      	lsls	r4, r0, #30
 801649c:	d02d      	beq.n	80164fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801649e:	1e94      	subs	r4, r2, #2
 80164a0:	4608      	mov	r0, r1
 80164a2:	18ce      	adds	r6, r1, r3
 80164a4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80164a8:	f820 5b02 	strh.w	r5, [r0], #2
 80164ac:	1a35      	subs	r5, r6, r0
 80164ae:	2d01      	cmp	r5, #1
 80164b0:	d8f8      	bhi.n	80164a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80164b2:	1e98      	subs	r0, r3, #2
 80164b4:	f020 0001 	bic.w	r0, r0, #1
 80164b8:	3002      	adds	r0, #2
 80164ba:	4401      	add	r1, r0
 80164bc:	4402      	add	r2, r0
 80164be:	f003 0301 	and.w	r3, r3, #1
 80164c2:	1f14      	subs	r4, r2, #4
 80164c4:	4608      	mov	r0, r1
 80164c6:	18ce      	adds	r6, r1, r3
 80164c8:	1a35      	subs	r5, r6, r0
 80164ca:	2d03      	cmp	r5, #3
 80164cc:	d810      	bhi.n	80164f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80164ce:	089c      	lsrs	r4, r3, #2
 80164d0:	00a0      	lsls	r0, r4, #2
 80164d2:	4401      	add	r1, r0
 80164d4:	3801      	subs	r0, #1
 80164d6:	4402      	add	r2, r0
 80164d8:	f06f 0003 	mvn.w	r0, #3
 80164dc:	fb00 3404 	mla	r4, r0, r4, r3
 80164e0:	440c      	add	r4, r1
 80164e2:	42a1      	cmp	r1, r4
 80164e4:	d011      	beq.n	801650a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80164e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80164ea:	f801 3b01 	strb.w	r3, [r1], #1
 80164ee:	e7f8      	b.n	80164e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80164f0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80164f4:	f840 5b04 	str.w	r5, [r0], #4
 80164f8:	e7e6      	b.n	80164c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80164fa:	0790      	lsls	r0, r2, #30
 80164fc:	d0e1      	beq.n	80164c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80164fe:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016502:	f821 0b02 	strh.w	r0, [r1], #2
 8016506:	3b02      	subs	r3, #2
 8016508:	e7db      	b.n	80164c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801650a:	2001      	movs	r0, #1
 801650c:	bd70      	pop	{r4, r5, r6, pc}

0801650e <_ZN8touchgfx3HAL7noTouchEv>:
 801650e:	b510      	push	{r4, lr}
 8016510:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016514:	4604      	mov	r4, r0
 8016516:	b153      	cbz	r3, 801652e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016518:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801651c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016520:	2101      	movs	r1, #1
 8016522:	301c      	adds	r0, #28
 8016524:	f013 fd4e 	bl	8029fc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016528:	2300      	movs	r3, #0
 801652a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801652e:	bd10      	pop	{r4, pc}

08016530 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016534:	4604      	mov	r4, r0
 8016536:	6980      	ldr	r0, [r0, #24]
 8016538:	b085      	sub	sp, #20
 801653a:	460f      	mov	r7, r1
 801653c:	4690      	mov	r8, r2
 801653e:	4699      	mov	r9, r3
 8016540:	b930      	cbnz	r0, 8016550 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016542:	4b1c      	ldr	r3, [pc, #112]	; (80165b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016544:	4a1c      	ldr	r2, [pc, #112]	; (80165b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016546:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801654a:	481c      	ldr	r0, [pc, #112]	; (80165bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801654c:	f016 f886 	bl	802c65c <__assert_func>
 8016550:	ad04      	add	r5, sp, #16
 8016552:	2600      	movs	r6, #0
 8016554:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016558:	6806      	ldr	r6, [r0, #0]
 801655a:	9501      	str	r5, [sp, #4]
 801655c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016560:	9500      	str	r5, [sp, #0]
 8016562:	6835      	ldr	r5, [r6, #0]
 8016564:	47a8      	blx	r5
 8016566:	4d16      	ldr	r5, [pc, #88]	; (80165c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016568:	4606      	mov	r6, r0
 801656a:	f8a5 9000 	strh.w	r9, [r5]
 801656e:	f7f8 fcef 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8016572:	6803      	ldr	r3, [r0, #0]
 8016574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016576:	4798      	blx	r3
 8016578:	2801      	cmp	r0, #1
 801657a:	d012      	beq.n	80165a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801657c:	d306      	bcc.n	801658c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801657e:	280d      	cmp	r0, #13
 8016580:	d80b      	bhi.n	801659a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016582:	4b10      	ldr	r3, [pc, #64]	; (80165c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016584:	4a0c      	ldr	r2, [pc, #48]	; (80165b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016586:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801658a:	e7de      	b.n	801654a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801658c:	882b      	ldrh	r3, [r5, #0]
 801658e:	fb08 7203 	mla	r2, r8, r3, r7
 8016592:	9b03      	ldr	r3, [sp, #12]
 8016594:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016598:	63e3      	str	r3, [r4, #60]	; 0x3c
 801659a:	4630      	mov	r0, r6
 801659c:	b005      	add	sp, #20
 801659e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165a2:	882a      	ldrh	r2, [r5, #0]
 80165a4:	9b03      	ldr	r3, [sp, #12]
 80165a6:	fb08 7202 	mla	r2, r8, r2, r7
 80165aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80165ae:	1a9a      	subs	r2, r3, r2
 80165b0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80165b2:	e7f2      	b.n	801659a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80165b4:	0802f828 	.word	0x0802f828
 80165b8:	0802fbad 	.word	0x0802fbad
 80165bc:	0802f86d 	.word	0x0802f86d
 80165c0:	200066fa 	.word	0x200066fa
 80165c4:	0802f893 	.word	0x0802f893

080165c8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80165c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ca:	b08b      	sub	sp, #44	; 0x2c
 80165cc:	4617      	mov	r7, r2
 80165ce:	4604      	mov	r4, r0
 80165d0:	460e      	mov	r6, r1
 80165d2:	461d      	mov	r5, r3
 80165d4:	f7f8 fcbc 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 80165d8:	6803      	ldr	r3, [r0, #0]
 80165da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165dc:	4798      	blx	r3
 80165de:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80165e2:	4b0e      	ldr	r3, [pc, #56]	; (801661c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 80165e4:	6822      	ldr	r2, [r4, #0]
 80165e6:	881b      	ldrh	r3, [r3, #0]
 80165e8:	9306      	str	r3, [sp, #24]
 80165ea:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80165ee:	9305      	str	r3, [sp, #20]
 80165f0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80165f4:	9304      	str	r3, [sp, #16]
 80165f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80165fa:	9303      	str	r3, [sp, #12]
 80165fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016600:	9302      	str	r3, [sp, #8]
 8016602:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016606:	e9cd 5300 	strd	r5, r3, [sp]
 801660a:	4631      	mov	r1, r6
 801660c:	6b95      	ldr	r5, [r2, #56]	; 0x38
 801660e:	463b      	mov	r3, r7
 8016610:	2200      	movs	r2, #0
 8016612:	4620      	mov	r0, r4
 8016614:	47a8      	blx	r5
 8016616:	b00b      	add	sp, #44	; 0x2c
 8016618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801661a:	bf00      	nop
 801661c:	200066fa 	.word	0x200066fa

08016620 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016624:	4698      	mov	r8, r3
 8016626:	6803      	ldr	r3, [r0, #0]
 8016628:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 801662a:	4b13      	ldr	r3, [pc, #76]	; (8016678 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801662c:	b08b      	sub	sp, #44	; 0x2c
 801662e:	4617      	mov	r7, r2
 8016630:	f8b3 9000 	ldrh.w	r9, [r3]
 8016634:	460e      	mov	r6, r1
 8016636:	4604      	mov	r4, r0
 8016638:	f7f8 fc8a 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 801663c:	6803      	ldr	r3, [r0, #0]
 801663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016640:	4798      	blx	r3
 8016642:	2302      	movs	r3, #2
 8016644:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016648:	2301      	movs	r3, #1
 801664a:	9305      	str	r3, [sp, #20]
 801664c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016650:	9304      	str	r3, [sp, #16]
 8016652:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016656:	9303      	str	r3, [sp, #12]
 8016658:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801665c:	9302      	str	r3, [sp, #8]
 801665e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016662:	9008      	str	r0, [sp, #32]
 8016664:	e9cd 8300 	strd	r8, r3, [sp]
 8016668:	2200      	movs	r2, #0
 801666a:	463b      	mov	r3, r7
 801666c:	4631      	mov	r1, r6
 801666e:	4620      	mov	r0, r4
 8016670:	47a8      	blx	r5
 8016672:	b00b      	add	sp, #44	; 0x2c
 8016674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016678:	200066fa 	.word	0x200066fa

0801667c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801667c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016680:	4698      	mov	r8, r3
 8016682:	6803      	ldr	r3, [r0, #0]
 8016684:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8016686:	4b0f      	ldr	r3, [pc, #60]	; (80166c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016688:	b087      	sub	sp, #28
 801668a:	f8b3 9000 	ldrh.w	r9, [r3]
 801668e:	460e      	mov	r6, r1
 8016690:	4617      	mov	r7, r2
 8016692:	4604      	mov	r4, r0
 8016694:	f7f8 fc5c 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8016698:	6803      	ldr	r3, [r0, #0]
 801669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801669c:	4798      	blx	r3
 801669e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80166a2:	9302      	str	r3, [sp, #8]
 80166a4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80166a8:	9301      	str	r3, [sp, #4]
 80166aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80166ae:	9300      	str	r3, [sp, #0]
 80166b0:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80166b4:	4643      	mov	r3, r8
 80166b6:	463a      	mov	r2, r7
 80166b8:	4631      	mov	r1, r6
 80166ba:	4620      	mov	r0, r4
 80166bc:	47a8      	blx	r5
 80166be:	b007      	add	sp, #28
 80166c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166c4:	200066fa 	.word	0x200066fa

080166c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80166c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166cc:	4604      	mov	r4, r0
 80166ce:	b08f      	sub	sp, #60	; 0x3c
 80166d0:	4610      	mov	r0, r2
 80166d2:	460d      	mov	r5, r1
 80166d4:	4691      	mov	r9, r2
 80166d6:	461e      	mov	r6, r3
 80166d8:	f007 fd8c 	bl	801e1f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80166dc:	2800      	cmp	r0, #0
 80166de:	f000 80b3 	beq.w	8016848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 80166e2:	6823      	ldr	r3, [r4, #0]
 80166e4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 80166e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ea:	f8df a190 	ldr.w	sl, [pc, #400]	; 801687c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 80166ee:	4f5f      	ldr	r7, [pc, #380]	; (801686c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80166f0:	4620      	mov	r0, r4
 80166f2:	4798      	blx	r3
 80166f4:	6823      	ldr	r3, [r4, #0]
 80166f6:	4620      	mov	r0, r4
 80166f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166fa:	4798      	blx	r3
 80166fc:	f8bb 3000 	ldrh.w	r3, [fp]
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016706:	f8ba 3000 	ldrh.w	r3, [sl]
 801670a:	9301      	str	r3, [sp, #4]
 801670c:	883b      	ldrh	r3, [r7, #0]
 801670e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8016712:	9302      	str	r3, [sp, #8]
 8016714:	4b56      	ldr	r3, [pc, #344]	; (8016870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016716:	9304      	str	r3, [sp, #16]
 8016718:	881a      	ldrh	r2, [r3, #0]
 801671a:	9203      	str	r2, [sp, #12]
 801671c:	4640      	mov	r0, r8
 801671e:	f007 fe23 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016722:	8038      	strh	r0, [r7, #0]
 8016724:	4640      	mov	r0, r8
 8016726:	f007 fe59 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801672a:	9b04      	ldr	r3, [sp, #16]
 801672c:	8018      	strh	r0, [r3, #0]
 801672e:	4b51      	ldr	r3, [pc, #324]	; (8016874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	2b00      	cmp	r3, #0
 8016734:	f040 808b 	bne.w	801684e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 8016738:	883b      	ldrh	r3, [r7, #0]
 801673a:	f8ab 3000 	strh.w	r3, [fp]
 801673e:	f8aa 0000 	strh.w	r0, [sl]
 8016742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016744:	9304      	str	r3, [sp, #16]
 8016746:	4648      	mov	r0, r9
 8016748:	6c27      	ldr	r7, [r4, #64]	; 0x40
 801674a:	f007 fd53 	bl	801e1f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801674e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016752:	2200      	movs	r2, #0
 8016754:	4611      	mov	r1, r2
 8016756:	4628      	mov	r0, r5
 8016758:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801675c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016760:	f7f8 ffce 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
 8016764:	2301      	movs	r3, #1
 8016766:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801676a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801676e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016772:	2b00      	cmp	r3, #0
 8016774:	dd71      	ble.n	801685a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8016776:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801677a:	2b00      	cmp	r3, #0
 801677c:	dd6d      	ble.n	801685a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801677e:	462a      	mov	r2, r5
 8016780:	ab0a      	add	r3, sp, #40	; 0x28
 8016782:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016786:	6851      	ldr	r1, [r2, #4]
 8016788:	c303      	stmia	r3!, {r0, r1}
 801678a:	4631      	mov	r1, r6
 801678c:	a80a      	add	r0, sp, #40	; 0x28
 801678e:	f7ff fbe9 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 8016792:	4b36      	ldr	r3, [pc, #216]	; (801686c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8016794:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016798:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801679c:	4b34      	ldr	r3, [pc, #208]	; (8016870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801679e:	aa0a      	add	r2, sp, #40	; 0x28
 80167a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167a8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80167ac:	ab08      	add	r3, sp, #32
 80167ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80167b2:	2600      	movs	r6, #0
 80167b4:	4618      	mov	r0, r3
 80167b6:	a90c      	add	r1, sp, #48	; 0x30
 80167b8:	960c      	str	r6, [sp, #48]	; 0x30
 80167ba:	f7ff fbd3 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 80167be:	a807      	add	r0, sp, #28
 80167c0:	f007 ff64 	bl	801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80167c4:	4680      	mov	r8, r0
 80167c6:	f7f8 fbc3 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 80167ca:	6802      	ldr	r2, [r0, #0]
 80167cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80167ce:	4790      	blx	r2
 80167d0:	4580      	cmp	r8, r0
 80167d2:	d049      	beq.n	8016868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 80167d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80167d6:	b150      	cbz	r0, 80167ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 80167d8:	a807      	add	r0, sp, #28
 80167da:	f007 ff57 	bl	801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80167de:	4606      	mov	r6, r0
 80167e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80167e2:	6803      	ldr	r3, [r0, #0]
 80167e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167e6:	4798      	blx	r3
 80167e8:	1a33      	subs	r3, r6, r0
 80167ea:	4258      	negs	r0, r3
 80167ec:	4158      	adcs	r0, r3
 80167ee:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80167f2:	2600      	movs	r6, #0
 80167f4:	682a      	ldr	r2, [r5, #0]
 80167f6:	696b      	ldr	r3, [r5, #20]
 80167f8:	616e      	str	r6, [r5, #20]
 80167fa:	9305      	str	r3, [sp, #20]
 80167fc:	6892      	ldr	r2, [r2, #8]
 80167fe:	a908      	add	r1, sp, #32
 8016800:	4628      	mov	r0, r5
 8016802:	4790      	blx	r2
 8016804:	9b05      	ldr	r3, [sp, #20]
 8016806:	616b      	str	r3, [r5, #20]
 8016808:	4652      	mov	r2, sl
 801680a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801680e:	4649      	mov	r1, r9
 8016810:	4628      	mov	r0, r5
 8016812:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8016816:	f7f8 ff73 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
 801681a:	9b04      	ldr	r3, [sp, #16]
 801681c:	9a00      	ldr	r2, [sp, #0]
 801681e:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 8016822:	4b15      	ldr	r3, [pc, #84]	; (8016878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016824:	801a      	strh	r2, [r3, #0]
 8016826:	4b15      	ldr	r3, [pc, #84]	; (801687c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016828:	9a01      	ldr	r2, [sp, #4]
 801682a:	801a      	strh	r2, [r3, #0]
 801682c:	4b0f      	ldr	r3, [pc, #60]	; (801686c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 801682e:	9a02      	ldr	r2, [sp, #8]
 8016830:	801a      	strh	r2, [r3, #0]
 8016832:	4b0f      	ldr	r3, [pc, #60]	; (8016870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8016834:	9a03      	ldr	r2, [sp, #12]
 8016836:	801a      	strh	r2, [r3, #0]
 8016838:	6823      	ldr	r3, [r4, #0]
 801683a:	4620      	mov	r0, r4
 801683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801683e:	4798      	blx	r3
 8016840:	6823      	ldr	r3, [r4, #0]
 8016842:	4620      	mov	r0, r4
 8016844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016846:	4798      	blx	r3
 8016848:	b00f      	add	sp, #60	; 0x3c
 801684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801684e:	883b      	ldrh	r3, [r7, #0]
 8016850:	f8ab 0000 	strh.w	r0, [fp]
 8016854:	f8aa 3000 	strh.w	r3, [sl]
 8016858:	e773      	b.n	8016742 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801685a:	462a      	mov	r2, r5
 801685c:	ab0a      	add	r3, sp, #40	; 0x28
 801685e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016862:	6851      	ldr	r1, [r2, #4]
 8016864:	c303      	stmia	r3!, {r0, r1}
 8016866:	e794      	b.n	8016792 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8016868:	4630      	mov	r0, r6
 801686a:	e7c0      	b.n	80167ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 801686c:	200066f4 	.word	0x200066f4
 8016870:	200066f6 	.word	0x200066f6
 8016874:	200066f8 	.word	0x200066f8
 8016878:	200066fa 	.word	0x200066fa
 801687c:	200066fc 	.word	0x200066fc

08016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016880:	b510      	push	{r4, lr}
 8016882:	4b07      	ldr	r3, [pc, #28]	; (80168a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	4604      	mov	r4, r0
 8016888:	b13b      	cbz	r3, 801689a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801688a:	6803      	ldr	r3, [r0, #0]
 801688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801688e:	4798      	blx	r3
 8016890:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016892:	4283      	cmp	r3, r0
 8016894:	d101      	bne.n	801689a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016896:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016898:	bd10      	pop	{r4, pc}
 801689a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801689c:	e7fc      	b.n	8016898 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801689e:	bf00      	nop
 80168a0:	200066fe 	.word	0x200066fe

080168a4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80168a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168a8:	b088      	sub	sp, #32
 80168aa:	461c      	mov	r4, r3
 80168ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168b0:	2500      	movs	r5, #0
 80168b2:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 80168b6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 80168ba:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 80168be:	9503      	str	r5, [sp, #12]
 80168c0:	e9cd 3100 	strd	r3, r1, [sp]
 80168c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80168c8:	f8ad 8014 	strh.w	r8, [sp, #20]
 80168cc:	4692      	mov	sl, r2
 80168ce:	4606      	mov	r6, r0
 80168d0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80168d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80168d8:	f88d 501c 	strb.w	r5, [sp, #28]
 80168dc:	f7ff ffd0 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80168e0:	fb09 a404 	mla	r4, r9, r4, sl
 80168e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80168e8:	9404      	str	r4, [sp, #16]
 80168ea:	f8ad 901a 	strh.w	r9, [sp, #26]
 80168ee:	f88d 501e 	strb.w	r5, [sp, #30]
 80168f2:	f88d 501d 	strb.w	r5, [sp, #29]
 80168f6:	f1b8 0f00 	cmp.w	r8, #0
 80168fa:	d000      	beq.n	80168fe <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 80168fc:	b937      	cbnz	r7, 801690c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 80168fe:	4b0d      	ldr	r3, [pc, #52]	; (8016934 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 8016900:	4a0d      	ldr	r2, [pc, #52]	; (8016938 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8016902:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016906:	480d      	ldr	r0, [pc, #52]	; (801693c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8016908:	f015 fea8 	bl	802c65c <__assert_func>
 801690c:	6833      	ldr	r3, [r6, #0]
 801690e:	9c00      	ldr	r4, [sp, #0]
 8016910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016912:	4630      	mov	r0, r6
 8016914:	4798      	blx	r3
 8016916:	4220      	tst	r0, r4
 8016918:	d104      	bne.n	8016924 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 801691a:	4b09      	ldr	r3, [pc, #36]	; (8016940 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 801691c:	4a06      	ldr	r2, [pc, #24]	; (8016938 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 801691e:	f240 2105 	movw	r1, #517	; 0x205
 8016922:	e7f0      	b.n	8016906 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 8016924:	6870      	ldr	r0, [r6, #4]
 8016926:	6803      	ldr	r3, [r0, #0]
 8016928:	4669      	mov	r1, sp
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	4798      	blx	r3
 801692e:	b008      	add	sp, #32
 8016930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016934:	0802f6bb 	.word	0x0802f6bb
 8016938:	0802f9e8 	.word	0x0802f9e8
 801693c:	0802f86d 	.word	0x0802f86d
 8016940:	0802f6f3 	.word	0x0802f6f3

08016944 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016948:	b089      	sub	sp, #36	; 0x24
 801694a:	2400      	movs	r4, #0
 801694c:	461d      	mov	r5, r3
 801694e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016952:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8016956:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 801695a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801695e:	9403      	str	r4, [sp, #12]
 8016960:	468a      	mov	sl, r1
 8016962:	4693      	mov	fp, r2
 8016964:	4606      	mov	r6, r0
 8016966:	e9cd 3400 	strd	r3, r4, [sp]
 801696a:	f7ff ff89 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801696e:	fb09 b505 	mla	r5, r9, r5, fp
 8016972:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016976:	9504      	str	r5, [sp, #16]
 8016978:	f8ad 8014 	strh.w	r8, [sp, #20]
 801697c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016980:	f8ad 4018 	strh.w	r4, [sp, #24]
 8016984:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016988:	f8cd a00c 	str.w	sl, [sp, #12]
 801698c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016990:	f88d 401e 	strb.w	r4, [sp, #30]
 8016994:	f1b8 0f00 	cmp.w	r8, #0
 8016998:	d000      	beq.n	801699c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 801699a:	b937      	cbnz	r7, 80169aa <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 801699c:	4b0d      	ldr	r3, [pc, #52]	; (80169d4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 801699e:	4a0e      	ldr	r2, [pc, #56]	; (80169d8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 80169a0:	f240 2119 	movw	r1, #537	; 0x219
 80169a4:	480d      	ldr	r0, [pc, #52]	; (80169dc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80169a6:	f015 fe59 	bl	802c65c <__assert_func>
 80169aa:	6833      	ldr	r3, [r6, #0]
 80169ac:	9c00      	ldr	r4, [sp, #0]
 80169ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80169b0:	4630      	mov	r0, r6
 80169b2:	4798      	blx	r3
 80169b4:	4220      	tst	r0, r4
 80169b6:	d104      	bne.n	80169c2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 80169b8:	4b09      	ldr	r3, [pc, #36]	; (80169e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 80169ba:	4a07      	ldr	r2, [pc, #28]	; (80169d8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 80169bc:	f240 211a 	movw	r1, #538	; 0x21a
 80169c0:	e7f0      	b.n	80169a4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 80169c2:	6870      	ldr	r0, [r6, #4]
 80169c4:	6803      	ldr	r3, [r0, #0]
 80169c6:	4669      	mov	r1, sp
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	4798      	blx	r3
 80169cc:	b009      	add	sp, #36	; 0x24
 80169ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d2:	bf00      	nop
 80169d4:	0802f738 	.word	0x0802f738
 80169d8:	0802fa5e 	.word	0x0802fa5e
 80169dc:	0802f86d 	.word	0x0802f86d
 80169e0:	0802f770 	.word	0x0802f770

080169e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80169e4:	b510      	push	{r4, lr}
 80169e6:	4b0b      	ldr	r3, [pc, #44]	; (8016a14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	4604      	mov	r4, r0
 80169ec:	b95b      	cbnz	r3, 8016a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80169ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80169f2:	2b02      	cmp	r3, #2
 80169f4:	d007      	beq.n	8016a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80169f6:	6840      	ldr	r0, [r0, #4]
 80169f8:	f000 fb50 	bl	801709c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80169fc:	b118      	cbz	r0, 8016a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80169fe:	6862      	ldr	r2, [r4, #4]
 8016a00:	7a53      	ldrb	r3, [r2, #9]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d0fc      	beq.n	8016a00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016a06:	f7fd fc59 	bl	80142bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	f7ff ff38 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a10:	bd10      	pop	{r4, pc}
 8016a12:	bf00      	nop
 8016a14:	200066fe 	.word	0x200066fe

08016a18 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016a18:	b508      	push	{r3, lr}
 8016a1a:	290d      	cmp	r1, #13
 8016a1c:	d817      	bhi.n	8016a4e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016a1e:	e8df f001 	tbb	[pc, r1]
 8016a22:	090b      	.short	0x090b
 8016a24:	0d0d0d07 	.word	0x0d0d0d07
 8016a28:	1414140d 	.word	0x1414140d
 8016a2c:	0d0d1414 	.word	0x0d0d1414
 8016a30:	2020      	movs	r0, #32
 8016a32:	bd08      	pop	{r3, pc}
 8016a34:	2018      	movs	r0, #24
 8016a36:	e7fc      	b.n	8016a32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a38:	2010      	movs	r0, #16
 8016a3a:	e7fa      	b.n	8016a32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a3c:	4b05      	ldr	r3, [pc, #20]	; (8016a54 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016a3e:	4a06      	ldr	r2, [pc, #24]	; (8016a58 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016a40:	4806      	ldr	r0, [pc, #24]	; (8016a5c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016a42:	f240 2177 	movw	r1, #631	; 0x277
 8016a46:	f015 fe09 	bl	802c65c <__assert_func>
 8016a4a:	2008      	movs	r0, #8
 8016a4c:	e7f1      	b.n	8016a32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a4e:	2000      	movs	r0, #0
 8016a50:	e7ef      	b.n	8016a32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016a52:	bf00      	nop
 8016a54:	0802f8e9 	.word	0x0802f8e9
 8016a58:	0802fd77 	.word	0x0802fd77
 8016a5c:	0802f86d 	.word	0x0802f86d

08016a60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016a60:	b570      	push	{r4, r5, r6, lr}
 8016a62:	460d      	mov	r5, r1
 8016a64:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016a68:	4616      	mov	r6, r2
 8016a6a:	461c      	mov	r4, r3
 8016a6c:	f7ff ffd4 	bl	8016a18 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016a70:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016a74:	10c0      	asrs	r0, r0, #3
 8016a76:	fb06 5101 	mla	r1, r6, r1, r5
 8016a7a:	fb00 4001 	mla	r0, r0, r1, r4
 8016a7e:	bd70      	pop	{r4, r5, r6, pc}

08016a80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a84:	b08a      	sub	sp, #40	; 0x28
 8016a86:	f04f 0c00 	mov.w	ip, #0
 8016a8a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8016a8e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016a92:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016a96:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016a9a:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8016a9e:	f8cd c014 	str.w	ip, [sp, #20]
 8016aa2:	2d0b      	cmp	r5, #11
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	469a      	mov	sl, r3
 8016aa8:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016aac:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016ab0:	d129      	bne.n	8016b06 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8016ab2:	2080      	movs	r0, #128	; 0x80
 8016ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ab8:	9204      	str	r2, [sp, #16]
 8016aba:	4620      	mov	r0, r4
 8016abc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016ac0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016ac4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016ac8:	f8ad 701c 	strh.w	r7, [sp, #28]
 8016acc:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016ad0:	f7ff fed6 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016ad4:	e9cd 9800 	strd	r9, r8, [sp]
 8016ad8:	4603      	mov	r3, r0
 8016ada:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016ade:	4651      	mov	r1, sl
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	f7ff ffbd 	bl	8016a60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016ae6:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8016aea:	9006      	str	r0, [sp, #24]
 8016aec:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016af0:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8016af4:	b107      	cbz	r7, 8016af8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8016af6:	b9d6      	cbnz	r6, 8016b2e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8016af8:	4b17      	ldr	r3, [pc, #92]	; (8016b58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016afa:	4a18      	ldr	r2, [pc, #96]	; (8016b5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016afc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8016b00:	4817      	ldr	r0, [pc, #92]	; (8016b60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8016b02:	f015 fdab 	bl	802c65c <__assert_func>
 8016b06:	2d02      	cmp	r5, #2
 8016b08:	d108      	bne.n	8016b1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8016b0a:	2bff      	cmp	r3, #255	; 0xff
 8016b0c:	d104      	bne.n	8016b18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	bf14      	ite	ne
 8016b12:	2040      	movne	r0, #64	; 0x40
 8016b14:	2020      	moveq	r0, #32
 8016b16:	e7cd      	b.n	8016ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016b18:	2040      	movs	r0, #64	; 0x40
 8016b1a:	e7cb      	b.n	8016ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016b1c:	2bff      	cmp	r3, #255	; 0xff
 8016b1e:	d104      	bne.n	8016b2a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8016b20:	2800      	cmp	r0, #0
 8016b22:	bf14      	ite	ne
 8016b24:	2004      	movne	r0, #4
 8016b26:	2001      	moveq	r0, #1
 8016b28:	e7c4      	b.n	8016ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016b2a:	2004      	movs	r0, #4
 8016b2c:	e7c2      	b.n	8016ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	9d02      	ldr	r5, [sp, #8]
 8016b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b34:	4620      	mov	r0, r4
 8016b36:	4798      	blx	r3
 8016b38:	4228      	tst	r0, r5
 8016b3a:	d104      	bne.n	8016b46 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8016b3c:	4b09      	ldr	r3, [pc, #36]	; (8016b64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 8016b3e:	4a07      	ldr	r2, [pc, #28]	; (8016b5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016b40:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8016b44:	e7dc      	b.n	8016b00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 8016b46:	6860      	ldr	r0, [r4, #4]
 8016b48:	6803      	ldr	r3, [r0, #0]
 8016b4a:	a902      	add	r1, sp, #8
 8016b4c:	685b      	ldr	r3, [r3, #4]
 8016b4e:	4798      	blx	r3
 8016b50:	b00a      	add	sp, #40	; 0x28
 8016b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b56:	bf00      	nop
 8016b58:	0802f6bb 	.word	0x0802f6bb
 8016b5c:	0802fc11 	.word	0x0802fc11
 8016b60:	0802f86d 	.word	0x0802f86d
 8016b64:	0802f6f3 	.word	0x0802f6f3

08016b68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6c:	b08b      	sub	sp, #44	; 0x2c
 8016b6e:	469b      	mov	fp, r3
 8016b70:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016b74:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016b78:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016b7c:	2fff      	cmp	r7, #255	; 0xff
 8016b7e:	bf14      	ite	ne
 8016b80:	2308      	movne	r3, #8
 8016b82:	2302      	moveq	r3, #2
 8016b84:	2600      	movs	r6, #0
 8016b86:	4604      	mov	r4, r0
 8016b88:	4689      	mov	r9, r1
 8016b8a:	4692      	mov	sl, r2
 8016b8c:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016b90:	9605      	str	r6, [sp, #20]
 8016b92:	f7ff fe75 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016b96:	e9cd 8500 	strd	r8, r5, [sp]
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	465a      	mov	r2, fp
 8016b9e:	4651      	mov	r1, sl
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f7ff ff5d 	bl	8016a60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016ba6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016baa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016bae:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016bb2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016bb6:	6823      	ldr	r3, [r4, #0]
 8016bb8:	9006      	str	r0, [sp, #24]
 8016bba:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016bbe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016bc2:	f8ad 6020 	strh.w	r6, [sp, #32]
 8016bc6:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8016bca:	f8cd 9014 	str.w	r9, [sp, #20]
 8016bce:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bd4:	9d02      	ldr	r5, [sp, #8]
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	4798      	blx	r3
 8016bda:	4228      	tst	r0, r5
 8016bdc:	d106      	bne.n	8016bec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016bde:	4b07      	ldr	r3, [pc, #28]	; (8016bfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016be0:	4a07      	ldr	r2, [pc, #28]	; (8016c00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016be2:	4808      	ldr	r0, [pc, #32]	; (8016c04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016be4:	f240 212e 	movw	r1, #558	; 0x22e
 8016be8:	f015 fd38 	bl	802c65c <__assert_func>
 8016bec:	6860      	ldr	r0, [r4, #4]
 8016bee:	6803      	ldr	r3, [r0, #0]
 8016bf0:	a902      	add	r1, sp, #8
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	4798      	blx	r3
 8016bf6:	b00b      	add	sp, #44	; 0x2c
 8016bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bfc:	0802f6f3 	.word	0x0802f6f3
 8016c00:	0802fce2 	.word	0x0802fce2
 8016c04:	0802f86d 	.word	0x0802f86d

08016c08 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016c08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c0c:	461f      	mov	r7, r3
 8016c0e:	4b0b      	ldr	r3, [pc, #44]	; (8016c3c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016c10:	460d      	mov	r5, r1
 8016c12:	f8b3 8000 	ldrh.w	r8, [r3]
 8016c16:	4616      	mov	r6, r2
 8016c18:	4604      	mov	r4, r0
 8016c1a:	f7f8 f999 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8016c1e:	6803      	ldr	r3, [r0, #0]
 8016c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c22:	4798      	blx	r3
 8016c24:	463b      	mov	r3, r7
 8016c26:	e9cd 8000 	strd	r8, r0, [sp]
 8016c2a:	4632      	mov	r2, r6
 8016c2c:	4629      	mov	r1, r5
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f7ff ff16 	bl	8016a60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016c34:	b002      	add	sp, #8
 8016c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c3a:	bf00      	nop
 8016c3c:	200066fa 	.word	0x200066fa

08016c40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c44:	b088      	sub	sp, #32
 8016c46:	4698      	mov	r8, r3
 8016c48:	2300      	movs	r3, #0
 8016c4a:	9303      	str	r3, [sp, #12]
 8016c4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016c50:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8016c54:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016c58:	f8ad 6014 	strh.w	r6, [sp, #20]
 8016c5c:	e9cd 3100 	strd	r3, r1, [sp]
 8016c60:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016c64:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016c68:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016c6c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016c70:	4617      	mov	r7, r2
 8016c72:	4604      	mov	r4, r0
 8016c74:	f8ad 5016 	strh.w	r5, [sp, #22]
 8016c78:	f7ff fe02 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016c7c:	4642      	mov	r2, r8
 8016c7e:	4603      	mov	r3, r0
 8016c80:	4639      	mov	r1, r7
 8016c82:	4620      	mov	r0, r4
 8016c84:	f7ff ffc0 	bl	8016c08 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016c88:	4b16      	ldr	r3, [pc, #88]	; (8016ce4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016c8a:	9004      	str	r0, [sp, #16]
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016c92:	f7f8 f95d 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8016c96:	6803      	ldr	r3, [r0, #0]
 8016c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c9a:	4798      	blx	r3
 8016c9c:	f88d 001e 	strb.w	r0, [sp, #30]
 8016ca0:	f88d 001d 	strb.w	r0, [sp, #29]
 8016ca4:	b106      	cbz	r6, 8016ca8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016ca6:	b935      	cbnz	r5, 8016cb6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016ca8:	4b0f      	ldr	r3, [pc, #60]	; (8016ce8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016caa:	4a10      	ldr	r2, [pc, #64]	; (8016cec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016cac:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8016cb0:	480f      	ldr	r0, [pc, #60]	; (8016cf0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8016cb2:	f015 fcd3 	bl	802c65c <__assert_func>
 8016cb6:	6823      	ldr	r3, [r4, #0]
 8016cb8:	9d00      	ldr	r5, [sp, #0]
 8016cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	4798      	blx	r3
 8016cc0:	4228      	tst	r0, r5
 8016cc2:	d104      	bne.n	8016cce <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016cc4:	4b0b      	ldr	r3, [pc, #44]	; (8016cf4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016cc6:	4a09      	ldr	r2, [pc, #36]	; (8016cec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016cc8:	f240 11ed 	movw	r1, #493	; 0x1ed
 8016ccc:	e7f0      	b.n	8016cb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cd0:	6860      	ldr	r0, [r4, #4]
 8016cd2:	9303      	str	r3, [sp, #12]
 8016cd4:	6803      	ldr	r3, [r0, #0]
 8016cd6:	4669      	mov	r1, sp
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	4798      	blx	r3
 8016cdc:	b008      	add	sp, #32
 8016cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ce2:	bf00      	nop
 8016ce4:	200066fa 	.word	0x200066fa
 8016ce8:	0802f6bb 	.word	0x0802f6bb
 8016cec:	0802fac3 	.word	0x0802fac3
 8016cf0:	0802f86d 	.word	0x0802f86d
 8016cf4:	0802f6f3 	.word	0x0802f6f3

08016cf8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016cf8:	b570      	push	{r4, r5, r6, lr}
 8016cfa:	b08a      	sub	sp, #40	; 0x28
 8016cfc:	466b      	mov	r3, sp
 8016cfe:	e883 0006 	stmia.w	r3, {r1, r2}
 8016d02:	4b20      	ldr	r3, [pc, #128]	; (8016d84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016d04:	781b      	ldrb	r3, [r3, #0]
 8016d06:	4604      	mov	r4, r0
 8016d08:	b933      	cbnz	r3, 8016d18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016d0a:	4b1f      	ldr	r3, [pc, #124]	; (8016d88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016d0c:	4a1f      	ldr	r2, [pc, #124]	; (8016d8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016d0e:	4820      	ldr	r0, [pc, #128]	; (8016d90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016d10:	f240 213f 	movw	r1, #575	; 0x23f
 8016d14:	f015 fca2 	bl	802c65c <__assert_func>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	9305      	str	r3, [sp, #20]
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	9302      	str	r3, [sp, #8]
 8016d20:	6803      	ldr	r3, [r0, #0]
 8016d22:	f8bd 5000 	ldrh.w	r5, [sp]
 8016d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d28:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016d2c:	4798      	blx	r3
 8016d2e:	4632      	mov	r2, r6
 8016d30:	4629      	mov	r1, r5
 8016d32:	4603      	mov	r3, r0
 8016d34:	4620      	mov	r0, r4
 8016d36:	f7ff ff67 	bl	8016c08 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016d3c:	9306      	str	r3, [sp, #24]
 8016d3e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016d42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016d46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016d4a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016d4e:	4b11      	ldr	r3, [pc, #68]	; (8016d94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016d50:	9003      	str	r0, [sp, #12]
 8016d52:	881b      	ldrh	r3, [r3, #0]
 8016d54:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016d58:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016d5c:	f7f8 f8f8 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d64:	4798      	blx	r3
 8016d66:	23ff      	movs	r3, #255	; 0xff
 8016d68:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016d6c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016d70:	6860      	ldr	r0, [r4, #4]
 8016d72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016d76:	6803      	ldr	r3, [r0, #0]
 8016d78:	a902      	add	r1, sp, #8
 8016d7a:	685b      	ldr	r3, [r3, #4]
 8016d7c:	4798      	blx	r3
 8016d7e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016d80:	b00a      	add	sp, #40	; 0x28
 8016d82:	bd70      	pop	{r4, r5, r6, pc}
 8016d84:	200066ff 	.word	0x200066ff
 8016d88:	0802f7ba 	.word	0x0802f7ba
 8016d8c:	0802fb67 	.word	0x0802fb67
 8016d90:	0802f86d 	.word	0x0802f86d
 8016d94:	200066fa 	.word	0x200066fa

08016d98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d9a:	b08b      	sub	sp, #44	; 0x2c
 8016d9c:	466d      	mov	r5, sp
 8016d9e:	e885 0006 	stmia.w	r5, {r1, r2}
 8016da2:	461d      	mov	r5, r3
 8016da4:	2300      	movs	r3, #0
 8016da6:	9305      	str	r3, [sp, #20]
 8016da8:	2301      	movs	r3, #1
 8016daa:	9302      	str	r3, [sp, #8]
 8016dac:	6803      	ldr	r3, [r0, #0]
 8016dae:	f8bd 6000 	ldrh.w	r6, [sp]
 8016db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016db4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016db8:	4604      	mov	r4, r0
 8016dba:	4798      	blx	r3
 8016dbc:	463a      	mov	r2, r7
 8016dbe:	4631      	mov	r1, r6
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	f7ff ff20 	bl	8016c08 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016dc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016dcc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016dd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016dd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016dd8:	4b0e      	ldr	r3, [pc, #56]	; (8016e14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016dda:	9003      	str	r0, [sp, #12]
 8016ddc:	881b      	ldrh	r3, [r3, #0]
 8016dde:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016de4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016de8:	9506      	str	r5, [sp, #24]
 8016dea:	f7f8 f8b1 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8016dee:	6803      	ldr	r3, [r0, #0]
 8016df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df2:	4798      	blx	r3
 8016df4:	23ff      	movs	r3, #255	; 0xff
 8016df6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016dfa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016dfe:	6860      	ldr	r0, [r4, #4]
 8016e00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016e04:	6803      	ldr	r3, [r0, #0]
 8016e06:	a902      	add	r1, sp, #8
 8016e08:	685b      	ldr	r3, [r3, #4]
 8016e0a:	4798      	blx	r3
 8016e0c:	4628      	mov	r0, r5
 8016e0e:	b00b      	add	sp, #44	; 0x2c
 8016e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e12:	bf00      	nop
 8016e14:	200066fa 	.word	0x200066fa

08016e18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016e18:	b570      	push	{r4, r5, r6, lr}
 8016e1a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016e1e:	4604      	mov	r4, r0
 8016e20:	b19b      	cbz	r3, 8016e4a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016e22:	2002      	movs	r0, #2
 8016e24:	f7fc fff8 	bl	8013e18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016e28:	2300      	movs	r3, #0
 8016e2a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016e2e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	4620      	mov	r0, r4
 8016e36:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8016e3a:	f7ff fd21 	bl	8016880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016e3e:	462b      	mov	r3, r5
 8016e40:	4601      	mov	r1, r0
 8016e42:	4620      	mov	r0, r4
 8016e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e48:	4718      	bx	r3
 8016e4a:	bd70      	pop	{r4, r5, r6, pc}

08016e4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016e4c:	4770      	bx	lr

08016e4e <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016e4e:	4770      	bx	lr

08016e50 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016e50:	2000      	movs	r0, #0
 8016e52:	4770      	bx	lr

08016e54 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016e54:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016e58:	1a13      	subs	r3, r2, r0
 8016e5a:	4258      	negs	r0, r3
 8016e5c:	4158      	adcs	r0, r3
 8016e5e:	4770      	bx	lr

08016e60 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016e60:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016e64:	1a9b      	subs	r3, r3, r2
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	bfdc      	itt	le
 8016e6a:	6882      	ldrle	r2, [r0, #8]
 8016e6c:	189b      	addle	r3, r3, r2
 8016e6e:	2b01      	cmp	r3, #1
 8016e70:	bfcc      	ite	gt
 8016e72:	2000      	movgt	r0, #0
 8016e74:	2001      	movle	r0, #1
 8016e76:	4770      	bx	lr

08016e78 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016e78:	6902      	ldr	r2, [r0, #16]
 8016e7a:	6840      	ldr	r0, [r0, #4]
 8016e7c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016e80:	4770      	bx	lr

08016e82 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016e82:	6803      	ldr	r3, [r0, #0]
 8016e84:	691b      	ldr	r3, [r3, #16]
 8016e86:	4718      	bx	r3

08016e88 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016e88:	4770      	bx	lr

08016e8a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016e8a:	4770      	bx	lr

08016e8c <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016e8c:	b570      	push	{r4, r5, r6, lr}
 8016e8e:	2301      	movs	r3, #1
 8016e90:	7203      	strb	r3, [r0, #8]
 8016e92:	4604      	mov	r4, r0
 8016e94:	6840      	ldr	r0, [r0, #4]
 8016e96:	6803      	ldr	r3, [r0, #0]
 8016e98:	699b      	ldr	r3, [r3, #24]
 8016e9a:	4798      	blx	r3
 8016e9c:	6803      	ldr	r3, [r0, #0]
 8016e9e:	2b40      	cmp	r3, #64	; 0x40
 8016ea0:	4605      	mov	r5, r0
 8016ea2:	d039      	beq.n	8016f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ea4:	d815      	bhi.n	8016ed2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016ea6:	2b04      	cmp	r3, #4
 8016ea8:	d022      	beq.n	8016ef0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016eaa:	d808      	bhi.n	8016ebe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d033      	beq.n	8016f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016eb0:	2b02      	cmp	r3, #2
 8016eb2:	d108      	bne.n	8016ec6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016eb4:	6823      	ldr	r3, [r4, #0]
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016eba:	4798      	blx	r3
 8016ebc:	e025      	b.n	8016f0a <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016ebe:	2b08      	cmp	r3, #8
 8016ec0:	d01e      	beq.n	8016f00 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016ec2:	2b20      	cmp	r3, #32
 8016ec4:	d028      	beq.n	8016f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ec6:	4b17      	ldr	r3, [pc, #92]	; (8016f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8016ec8:	4a17      	ldr	r2, [pc, #92]	; (8016f28 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016eca:	4818      	ldr	r0, [pc, #96]	; (8016f2c <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016ecc:	218b      	movs	r1, #139	; 0x8b
 8016ece:	f015 fbc5 	bl	802c65c <__assert_func>
 8016ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ed6:	d01f      	beq.n	8016f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ed8:	d804      	bhi.n	8016ee4 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8016eda:	2b80      	cmp	r3, #128	; 0x80
 8016edc:	d01c      	beq.n	8016f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ee2:	e7ef      	b.n	8016ec4 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8016ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016ee8:	d016      	beq.n	8016f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016eee:	e7e0      	b.n	8016eb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	7f01      	ldrb	r1, [r0, #28]
 8016ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	4798      	blx	r3
 8016efa:	6823      	ldr	r3, [r4, #0]
 8016efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016efe:	e006      	b.n	8016f0e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	7f01      	ldrb	r1, [r0, #28]
 8016f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f06:	4620      	mov	r0, r4
 8016f08:	4798      	blx	r3
 8016f0a:	6823      	ldr	r3, [r4, #0]
 8016f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f0e:	4629      	mov	r1, r5
 8016f10:	4620      	mov	r0, r4
 8016f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f16:	4718      	bx	r3
 8016f18:	6823      	ldr	r3, [r4, #0]
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f1e:	4798      	blx	r3
 8016f20:	e7eb      	b.n	8016efa <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016f22:	bf00      	nop
 8016f24:	0802fdc0 	.word	0x0802fdc0
 8016f28:	0802fed0 	.word	0x0802fed0
 8016f2c:	0802fde5 	.word	0x0802fde5

08016f30 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016f30:	b570      	push	{r4, r5, r6, lr}
 8016f32:	4604      	mov	r4, r0
 8016f34:	460e      	mov	r6, r1
 8016f36:	6860      	ldr	r0, [r4, #4]
 8016f38:	6803      	ldr	r3, [r0, #0]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	4798      	blx	r3
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d1f9      	bne.n	8016f36 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016f42:	4d0d      	ldr	r5, [pc, #52]	; (8016f78 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016f44:	6828      	ldr	r0, [r5, #0]
 8016f46:	6803      	ldr	r3, [r0, #0]
 8016f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f4a:	4798      	blx	r3
 8016f4c:	f7fd f9d0 	bl	80142f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016f50:	6828      	ldr	r0, [r5, #0]
 8016f52:	2101      	movs	r1, #1
 8016f54:	f7ff ff7a 	bl	8016e4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016f58:	6860      	ldr	r0, [r4, #4]
 8016f5a:	6803      	ldr	r3, [r0, #0]
 8016f5c:	4631      	mov	r1, r6
 8016f5e:	689b      	ldr	r3, [r3, #8]
 8016f60:	4798      	blx	r3
 8016f62:	6823      	ldr	r3, [r4, #0]
 8016f64:	4620      	mov	r0, r4
 8016f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f68:	4798      	blx	r3
 8016f6a:	6828      	ldr	r0, [r5, #0]
 8016f6c:	6803      	ldr	r3, [r0, #0]
 8016f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f74:	4718      	bx	r3
 8016f76:	bf00      	nop
 8016f78:	20006700 	.word	0x20006700

08016f7c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016f7c:	b508      	push	{r3, lr}
 8016f7e:	f7fd f99d 	bl	80142bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016f86:	f7fd b9a7 	b.w	80142d8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016f8a <_ZN8touchgfx13DMA_Interface5startEv>:
 8016f8a:	b510      	push	{r4, lr}
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	6840      	ldr	r0, [r0, #4]
 8016f90:	6803      	ldr	r3, [r0, #0]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	4798      	blx	r3
 8016f96:	b948      	cbnz	r0, 8016fac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016f98:	7a63      	ldrb	r3, [r4, #9]
 8016f9a:	b13b      	cbz	r3, 8016fac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016f9c:	7a23      	ldrb	r3, [r4, #8]
 8016f9e:	b92b      	cbnz	r3, 8016fac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016fa0:	6823      	ldr	r3, [r4, #0]
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016faa:	4718      	bx	r3
 8016fac:	bd10      	pop	{r4, pc}
	...

08016fb0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016fb0:	b510      	push	{r4, lr}
 8016fb2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016fb6:	1b12      	subs	r2, r2, r4
 8016fb8:	2a00      	cmp	r2, #0
 8016fba:	bfdc      	itt	le
 8016fbc:	6883      	ldrle	r3, [r0, #8]
 8016fbe:	18d2      	addle	r2, r2, r3
 8016fc0:	2a01      	cmp	r2, #1
 8016fc2:	dd18      	ble.n	8016ff6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016fc4:	6843      	ldr	r3, [r0, #4]
 8016fc6:	f101 021c 	add.w	r2, r1, #28
 8016fca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016fce:	f851 4b04 	ldr.w	r4, [r1], #4
 8016fd2:	f843 4b04 	str.w	r4, [r3], #4
 8016fd6:	4291      	cmp	r1, r2
 8016fd8:	d1f9      	bne.n	8016fce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016fda:	880a      	ldrh	r2, [r1, #0]
 8016fdc:	801a      	strh	r2, [r3, #0]
 8016fde:	788a      	ldrb	r2, [r1, #2]
 8016fe0:	709a      	strb	r2, [r3, #2]
 8016fe2:	68c3      	ldr	r3, [r0, #12]
 8016fe4:	6882      	ldr	r2, [r0, #8]
 8016fe6:	f3bf 8f5b 	dmb	ish
 8016fea:	3301      	adds	r3, #1
 8016fec:	429a      	cmp	r2, r3
 8016fee:	bfd8      	it	le
 8016ff0:	1a9b      	suble	r3, r3, r2
 8016ff2:	60c3      	str	r3, [r0, #12]
 8016ff4:	bd10      	pop	{r4, pc}
 8016ff6:	4b03      	ldr	r3, [pc, #12]	; (8017004 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016ff8:	4a03      	ldr	r2, [pc, #12]	; (8017008 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016ffa:	4804      	ldr	r0, [pc, #16]	; (801700c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016ffc:	2139      	movs	r1, #57	; 0x39
 8016ffe:	f015 fb2d 	bl	802c65c <__assert_func>
 8017002:	bf00      	nop
 8017004:	0802fe0b 	.word	0x0802fe0b
 8017008:	0802ff00 	.word	0x0802ff00
 801700c:	0802fde5 	.word	0x0802fde5

08017010 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017010:	b510      	push	{r4, lr}
 8017012:	6803      	ldr	r3, [r0, #0]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	4604      	mov	r4, r0
 8017018:	4798      	blx	r3
 801701a:	b128      	cbz	r0, 8017028 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801701c:	4b07      	ldr	r3, [pc, #28]	; (801703c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801701e:	4a08      	ldr	r2, [pc, #32]	; (8017040 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8017020:	4808      	ldr	r0, [pc, #32]	; (8017044 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8017022:	213f      	movs	r1, #63	; 0x3f
 8017024:	f015 fb1a 	bl	802c65c <__assert_func>
 8017028:	6923      	ldr	r3, [r4, #16]
 801702a:	68a2      	ldr	r2, [r4, #8]
 801702c:	f3bf 8f5b 	dmb	ish
 8017030:	3301      	adds	r3, #1
 8017032:	429a      	cmp	r2, r3
 8017034:	bfd8      	it	le
 8017036:	1a9b      	suble	r3, r3, r2
 8017038:	6123      	str	r3, [r4, #16]
 801703a:	bd10      	pop	{r4, pc}
 801703c:	0802fe2e 	.word	0x0802fe2e
 8017040:	0802ff4e 	.word	0x0802ff4e
 8017044:	0802fde5 	.word	0x0802fde5

08017048 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017048:	b570      	push	{r4, r5, r6, lr}
 801704a:	4604      	mov	r4, r0
 801704c:	6840      	ldr	r0, [r0, #4]
 801704e:	6803      	ldr	r3, [r0, #0]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	4798      	blx	r3
 8017054:	4605      	mov	r5, r0
 8017056:	b930      	cbnz	r0, 8017066 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017058:	7a23      	ldrb	r3, [r4, #8]
 801705a:	b123      	cbz	r3, 8017066 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801705c:	6860      	ldr	r0, [r4, #4]
 801705e:	6803      	ldr	r3, [r0, #0]
 8017060:	695b      	ldr	r3, [r3, #20]
 8017062:	4798      	blx	r3
 8017064:	7225      	strb	r5, [r4, #8]
 8017066:	6860      	ldr	r0, [r4, #4]
 8017068:	6803      	ldr	r3, [r0, #0]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	4798      	blx	r3
 801706e:	b928      	cbnz	r0, 801707c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017070:	6823      	ldr	r3, [r4, #0]
 8017072:	4620      	mov	r0, r4
 8017074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801707a:	4718      	bx	r3
 801707c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017080:	f7fd b942 	b.w	8014308 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017084 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017084:	b510      	push	{r4, lr}
 8017086:	4c04      	ldr	r4, [pc, #16]	; (8017098 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017088:	6082      	str	r2, [r0, #8]
 801708a:	2200      	movs	r2, #0
 801708c:	e9c0 4100 	strd	r4, r1, [r0]
 8017090:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017094:	bd10      	pop	{r4, pc}
 8017096:	bf00      	nop
 8017098:	0802feb4 	.word	0x0802feb4

0801709c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801709c:	6840      	ldr	r0, [r0, #4]
 801709e:	6803      	ldr	r3, [r0, #0]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	4718      	bx	r3

080170a4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80170a4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80170a8:	4770      	bx	lr

080170aa <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80170aa:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80170ae:	4770      	bx	lr

080170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80170b0:	b507      	push	{r0, r1, r2, lr}
 80170b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80170b6:	ab01      	add	r3, sp, #4
 80170b8:	6809      	ldr	r1, [r1, #0]
 80170ba:	6800      	ldr	r0, [r0, #0]
 80170bc:	f004 fe8e 	bl	801bddc <_ZN8touchgfx6muldivElllRl>
 80170c0:	b003      	add	sp, #12
 80170c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080170c8 <_ZN8touchgfx7CWRUtil4sineEi>:
 80170c8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80170cc:	fb90 f3f2 	sdiv	r3, r0, r2
 80170d0:	fb03 0312 	mls	r3, r3, r2, r0
 80170d4:	4413      	add	r3, r2
 80170d6:	fb93 f0f2 	sdiv	r0, r3, r2
 80170da:	fb02 3010 	mls	r0, r2, r0, r3
 80170de:	285a      	cmp	r0, #90	; 0x5a
 80170e0:	4b09      	ldr	r3, [pc, #36]	; (8017108 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80170e2:	dc02      	bgt.n	80170ea <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80170e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80170e8:	4770      	bx	lr
 80170ea:	28b4      	cmp	r0, #180	; 0xb4
 80170ec:	dc02      	bgt.n	80170f4 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80170ee:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80170f2:	e7f7      	b.n	80170e4 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80170f4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80170f8:	bfd4      	ite	le
 80170fa:	38b4      	suble	r0, #180	; 0xb4
 80170fc:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017100:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017104:	4240      	negs	r0, r0
 8017106:	4770      	bx	lr
 8017108:	0802ff7e 	.word	0x0802ff7e

0801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801710c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8017110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017112:	fb90 f3f2 	sdiv	r3, r0, r2
 8017116:	fb03 0012 	mls	r0, r3, r2, r0
 801711a:	4410      	add	r0, r2
 801711c:	fb90 f4f2 	sdiv	r4, r0, r2
 8017120:	fb02 0414 	mls	r4, r2, r4, r0
 8017124:	f004 061f 	and.w	r6, r4, #31
 8017128:	1164      	asrs	r4, r4, #5
 801712a:	4620      	mov	r0, r4
 801712c:	f7ff ffcc 	bl	80170c8 <_ZN8touchgfx7CWRUtil4sineEi>
 8017130:	4605      	mov	r5, r0
 8017132:	b90e      	cbnz	r6, 8017138 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8017134:	b002      	add	sp, #8
 8017136:	bd70      	pop	{r4, r5, r6, pc}
 8017138:	1c60      	adds	r0, r4, #1
 801713a:	f7ff ffc5 	bl	80170c8 <_ZN8touchgfx7CWRUtil4sineEi>
 801713e:	ab01      	add	r3, sp, #4
 8017140:	2220      	movs	r2, #32
 8017142:	4631      	mov	r1, r6
 8017144:	1b40      	subs	r0, r0, r5
 8017146:	f004 fe49 	bl	801bddc <_ZN8touchgfx6muldivElllRl>
 801714a:	4428      	add	r0, r5
 801714c:	e7f2      	b.n	8017134 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

0801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801714e:	b508      	push	{r3, lr}
 8017150:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8017154:	f7ff ffda 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017158:	bd08      	pop	{r3, pc}
	...

0801715c <_ZN8touchgfx6CircleC1Ev>:
 801715c:	b510      	push	{r4, lr}
 801715e:	4604      	mov	r4, r0
 8017160:	f000 fcde 	bl	8017b20 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017164:	4b08      	ldr	r3, [pc, #32]	; (8017188 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801716c:	2300      	movs	r3, #0
 801716e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8017172:	f24b 4205 	movw	r2, #46085	; 0xb405
 8017176:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801717a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801717e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8017182:	60a3      	str	r3, [r4, #8]
 8017184:	4620      	mov	r0, r4
 8017186:	bd10      	pop	{r4, pc}
 8017188:	0803003c 	.word	0x0803003c

0801718c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801718c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017190:	4606      	mov	r6, r0
 8017192:	6810      	ldr	r0, [r2, #0]
 8017194:	4698      	mov	r8, r3
 8017196:	4691      	mov	r9, r2
 8017198:	460f      	mov	r7, r1
 801719a:	f7ff ffb7 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801719e:	a902      	add	r1, sp, #8
 80171a0:	2402      	movs	r4, #2
 80171a2:	f841 0d08 	str.w	r0, [r1, #-8]!
 80171a6:	4640      	mov	r0, r8
 80171a8:	f7ff ff82 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80171ac:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80171ae:	fb90 f0f4 	sdiv	r0, r0, r4
 80171b2:	4405      	add	r5, r0
 80171b4:	f8d9 0000 	ldr.w	r0, [r9]
 80171b8:	f7ff ffc9 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80171bc:	a902      	add	r1, sp, #8
 80171be:	f841 0d04 	str.w	r0, [r1, #-4]!
 80171c2:	4640      	mov	r0, r8
 80171c4:	f7ff ff74 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80171c8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80171ca:	fb90 f0f4 	sdiv	r0, r0, r4
 80171ce:	4629      	mov	r1, r5
 80171d0:	1a12      	subs	r2, r2, r0
 80171d2:	4638      	mov	r0, r7
 80171d4:	f013 f973 	bl	802a4be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80171d8:	b003      	add	sp, #12
 80171da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080171de <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 80171de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80171e2:	9e08      	ldr	r6, [sp, #32]
 80171e4:	6830      	ldr	r0, [r6, #0]
 80171e6:	4698      	mov	r8, r3
 80171e8:	4615      	mov	r5, r2
 80171ea:	460f      	mov	r7, r1
 80171ec:	f7ff ff8e 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80171f0:	a902      	add	r1, sp, #8
 80171f2:	2402      	movs	r4, #2
 80171f4:	f841 0d08 	str.w	r0, [r1, #-8]!
 80171f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171fa:	f7ff ff59 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80171fe:	682d      	ldr	r5, [r5, #0]
 8017200:	fb90 f0f4 	sdiv	r0, r0, r4
 8017204:	4405      	add	r5, r0
 8017206:	6830      	ldr	r0, [r6, #0]
 8017208:	f7ff ffa1 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801720c:	a902      	add	r1, sp, #8
 801720e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8017212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017214:	f7ff ff4c 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017218:	f8d8 2000 	ldr.w	r2, [r8]
 801721c:	fb90 f0f4 	sdiv	r0, r0, r4
 8017220:	4629      	mov	r1, r5
 8017222:	1a12      	subs	r2, r2, r0
 8017224:	4638      	mov	r0, r7
 8017226:	f013 f8d9 	bl	802a3dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801722a:	b002      	add	sp, #8
 801722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017230 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8017230:	b513      	push	{r0, r1, r4, lr}
 8017232:	e9cd 2300 	strd	r2, r3, [sp]
 8017236:	f100 0334 	add.w	r3, r0, #52	; 0x34
 801723a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801723e:	f7ff ffce 	bl	80171de <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017242:	b002      	add	sp, #8
 8017244:	bd10      	pop	{r4, pc}

08017246 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8017246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017248:	680e      	ldr	r6, [r1, #0]
 801724a:	681f      	ldr	r7, [r3, #0]
 801724c:	9807      	ldr	r0, [sp, #28]
 801724e:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8017252:	42be      	cmp	r6, r7
 8017254:	bfb8      	it	lt
 8017256:	601e      	strlt	r6, [r3, #0]
 8017258:	680b      	ldr	r3, [r1, #0]
 801725a:	6829      	ldr	r1, [r5, #0]
 801725c:	428b      	cmp	r3, r1
 801725e:	bfc8      	it	gt
 8017260:	602b      	strgt	r3, [r5, #0]
 8017262:	6813      	ldr	r3, [r2, #0]
 8017264:	6821      	ldr	r1, [r4, #0]
 8017266:	428b      	cmp	r3, r1
 8017268:	bfb8      	it	lt
 801726a:	6023      	strlt	r3, [r4, #0]
 801726c:	6813      	ldr	r3, [r2, #0]
 801726e:	6802      	ldr	r2, [r0, #0]
 8017270:	4293      	cmp	r3, r2
 8017272:	bfc8      	it	gt
 8017274:	6003      	strgt	r3, [r0, #0]
 8017276:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017278 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8017278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801727c:	4606      	mov	r6, r0
 801727e:	b089      	sub	sp, #36	; 0x24
 8017280:	6808      	ldr	r0, [r1, #0]
 8017282:	4690      	mov	r8, r2
 8017284:	461f      	mov	r7, r3
 8017286:	4689      	mov	r9, r1
 8017288:	f7ff ff40 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801728c:	ad08      	add	r5, sp, #32
 801728e:	2402      	movs	r4, #2
 8017290:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017294:	4640      	mov	r0, r8
 8017296:	4629      	mov	r1, r5
 8017298:	f7ff ff0a 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801729c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801729e:	fb90 f0f4 	sdiv	r0, r0, r4
 80172a2:	4418      	add	r0, r3
 80172a4:	9005      	str	r0, [sp, #20]
 80172a6:	f8d9 0000 	ldr.w	r0, [r9]
 80172aa:	f7ff ff50 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80172ae:	4629      	mov	r1, r5
 80172b0:	9007      	str	r0, [sp, #28]
 80172b2:	4640      	mov	r0, r8
 80172b4:	f7ff fefc 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80172b8:	fb90 f0f4 	sdiv	r0, r0, r4
 80172bc:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80172be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80172c0:	aa08      	add	r2, sp, #32
 80172c2:	1a24      	subs	r4, r4, r0
 80172c4:	f842 4d08 	str.w	r4, [r2, #-8]!
 80172c8:	9302      	str	r3, [sp, #8]
 80172ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172cc:	9301      	str	r3, [sp, #4]
 80172ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172d0:	9300      	str	r3, [sp, #0]
 80172d2:	a905      	add	r1, sp, #20
 80172d4:	463b      	mov	r3, r7
 80172d6:	4630      	mov	r0, r6
 80172d8:	f7ff ffb5 	bl	8017246 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80172dc:	b009      	add	sp, #36	; 0x24
 80172de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080172e2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80172e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e6:	4291      	cmp	r1, r2
 80172e8:	b08d      	sub	sp, #52	; 0x34
 80172ea:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80172ee:	bfc8      	it	gt
 80172f0:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 80172f4:	461e      	mov	r6, r3
 80172f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80172fa:	1a9b      	subs	r3, r3, r2
 80172fc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017300:	bfa2      	ittt	ge
 8017302:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8017306:	2200      	movge	r2, #0
 8017308:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 801730c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801730e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017310:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8017314:	ad0c      	add	r5, sp, #48	; 0x30
 8017316:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 801731a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801731e:	f845 3d04 	str.w	r3, [r5, #-4]!
 8017322:	a907      	add	r1, sp, #28
 8017324:	4633      	mov	r3, r6
 8017326:	462a      	mov	r2, r5
 8017328:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801732c:	9700      	str	r7, [sp, #0]
 801732e:	4604      	mov	r4, r0
 8017330:	f7ff ffa2 	bl	8017278 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017334:	9b07      	ldr	r3, [sp, #28]
 8017336:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 801733a:	f103 0120 	add.w	r1, r3, #32
 801733e:	fb91 f3f0 	sdiv	r3, r1, r0
 8017342:	fb00 1313 	mls	r3, r0, r3, r1
 8017346:	1ac3      	subs	r3, r0, r3
 8017348:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801734c:	fb93 f2f0 	sdiv	r2, r3, r0
 8017350:	fb00 3312 	mls	r3, r0, r2, r3
 8017354:	440b      	add	r3, r1
 8017356:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 801735a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801735c:	9906      	ldr	r1, [sp, #24]
 801735e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017360:	4291      	cmp	r1, r2
 8017362:	db11      	blt.n	8017388 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8017364:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017366:	9700      	str	r7, [sp, #0]
 8017368:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801736c:	930b      	str	r3, [sp, #44]	; 0x2c
 801736e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017372:	4633      	mov	r3, r6
 8017374:	462a      	mov	r2, r5
 8017376:	4651      	mov	r1, sl
 8017378:	4620      	mov	r0, r4
 801737a:	f7ff ff7d 	bl	8017278 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017380:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8017384:	9309      	str	r3, [sp, #36]	; 0x24
 8017386:	e7e8      	b.n	801735a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8017388:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 801738c:	4291      	cmp	r1, r2
 801738e:	dd0c      	ble.n	80173aa <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8017390:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017392:	9700      	str	r7, [sp, #0]
 8017394:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017398:	930b      	str	r3, [sp, #44]	; 0x2c
 801739a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801739e:	4633      	mov	r3, r6
 80173a0:	462a      	mov	r2, r5
 80173a2:	a906      	add	r1, sp, #24
 80173a4:	4620      	mov	r0, r4
 80173a6:	f7ff ff67 	bl	8017278 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80173aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f040 8097 	bne.w	80174e0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 80173b2:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 80173b6:	1a52      	subs	r2, r2, r1
 80173b8:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 80173bc:	da0a      	bge.n	80173d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 80173be:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80173c2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80173c6:	9700      	str	r7, [sp, #0]
 80173c8:	4633      	mov	r3, r6
 80173ca:	462a      	mov	r2, r5
 80173cc:	a90a      	add	r1, sp, #40	; 0x28
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7ff ff52 	bl	8017278 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80173d4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80173d8:	2bb3      	cmp	r3, #179	; 0xb3
 80173da:	d87e      	bhi.n	80174da <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80173dc:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 80173e0:	1a1b      	subs	r3, r3, r0
 80173e2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80173e6:	da78      	bge.n	80174da <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80173e8:	f7ff fe90 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80173ec:	ad0c      	add	r5, sp, #48	; 0x30
 80173ee:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 80173f2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80173f6:	4658      	mov	r0, fp
 80173f8:	4629      	mov	r1, r5
 80173fa:	f7ff fe59 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017400:	18c3      	adds	r3, r0, r3
 8017402:	9807      	ldr	r0, [sp, #28]
 8017404:	9305      	str	r3, [sp, #20]
 8017406:	f7ff fea2 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801740a:	4629      	mov	r1, r5
 801740c:	900b      	str	r0, [sp, #44]	; 0x2c
 801740e:	4658      	mov	r0, fp
 8017410:	f7ff fe4e 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017416:	9a05      	ldr	r2, [sp, #20]
 8017418:	9700      	str	r7, [sp, #0]
 801741a:	1a1b      	subs	r3, r3, r0
 801741c:	f04f 0a02 	mov.w	sl, #2
 8017420:	9304      	str	r3, [sp, #16]
 8017422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017424:	fb93 f3fa 	sdiv	r3, r3, sl
 8017428:	1ad2      	subs	r2, r2, r3
 801742a:	920a      	str	r2, [sp, #40]	; 0x28
 801742c:	9a04      	ldr	r2, [sp, #16]
 801742e:	1ad3      	subs	r3, r2, r3
 8017430:	930b      	str	r3, [sp, #44]	; 0x2c
 8017432:	462a      	mov	r2, r5
 8017434:	4633      	mov	r3, r6
 8017436:	a90a      	add	r1, sp, #40	; 0x28
 8017438:	4620      	mov	r0, r4
 801743a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801743e:	f7ff ff02 	bl	8017246 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017442:	9a05      	ldr	r2, [sp, #20]
 8017444:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017446:	fb93 f3fa 	sdiv	r3, r3, sl
 801744a:	189a      	adds	r2, r3, r2
 801744c:	920a      	str	r2, [sp, #40]	; 0x28
 801744e:	9a04      	ldr	r2, [sp, #16]
 8017450:	9700      	str	r7, [sp, #0]
 8017452:	4413      	add	r3, r2
 8017454:	a90a      	add	r1, sp, #40	; 0x28
 8017456:	462a      	mov	r2, r5
 8017458:	930b      	str	r3, [sp, #44]	; 0x2c
 801745a:	4620      	mov	r0, r4
 801745c:	4633      	mov	r3, r6
 801745e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017462:	f7ff fef0 	bl	8017246 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017466:	9806      	ldr	r0, [sp, #24]
 8017468:	f7ff fe50 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801746c:	4629      	mov	r1, r5
 801746e:	900b      	str	r0, [sp, #44]	; 0x2c
 8017470:	4658      	mov	r0, fp
 8017472:	f7ff fe1d 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017476:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017478:	18c3      	adds	r3, r0, r3
 801747a:	9806      	ldr	r0, [sp, #24]
 801747c:	9304      	str	r3, [sp, #16]
 801747e:	f7ff fe66 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017482:	4629      	mov	r1, r5
 8017484:	900b      	str	r0, [sp, #44]	; 0x2c
 8017486:	4658      	mov	r0, fp
 8017488:	f7ff fe12 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801748c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801748e:	9a04      	ldr	r2, [sp, #16]
 8017490:	9700      	str	r7, [sp, #0]
 8017492:	eba3 0b00 	sub.w	fp, r3, r0
 8017496:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017498:	fb93 f3fa 	sdiv	r3, r3, sl
 801749c:	1ad2      	subs	r2, r2, r3
 801749e:	ebab 0303 	sub.w	r3, fp, r3
 80174a2:	920a      	str	r2, [sp, #40]	; 0x28
 80174a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80174a6:	462a      	mov	r2, r5
 80174a8:	4633      	mov	r3, r6
 80174aa:	a90a      	add	r1, sp, #40	; 0x28
 80174ac:	4620      	mov	r0, r4
 80174ae:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80174b2:	f7ff fec8 	bl	8017246 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80174b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80174b8:	fb93 fafa 	sdiv	sl, r3, sl
 80174bc:	9b04      	ldr	r3, [sp, #16]
 80174be:	9700      	str	r7, [sp, #0]
 80174c0:	4453      	add	r3, sl
 80174c2:	930a      	str	r3, [sp, #40]	; 0x28
 80174c4:	eb0a 030b 	add.w	r3, sl, fp
 80174c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80174ca:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80174ce:	4633      	mov	r3, r6
 80174d0:	462a      	mov	r2, r5
 80174d2:	a90a      	add	r1, sp, #40	; 0x28
 80174d4:	4620      	mov	r0, r4
 80174d6:	f7ff feb6 	bl	8017246 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80174da:	b00d      	add	sp, #52	; 0x34
 80174dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80174e2:	9700      	str	r7, [sp, #0]
 80174e4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80174e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80174ea:	462a      	mov	r2, r5
 80174ec:	4633      	mov	r3, r6
 80174ee:	a907      	add	r1, sp, #28
 80174f0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80174f4:	4620      	mov	r0, r4
 80174f6:	f7ff febf 	bl	8017278 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80174fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80174fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80174fe:	9700      	str	r7, [sp, #0]
 8017500:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017504:	930b      	str	r3, [sp, #44]	; 0x2c
 8017506:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801750a:	4633      	mov	r3, r6
 801750c:	462a      	mov	r2, r5
 801750e:	a906      	add	r1, sp, #24
 8017510:	e75d      	b.n	80173ce <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08017512 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8017512:	b530      	push	{r4, r5, lr}
 8017514:	4604      	mov	r4, r0
 8017516:	4608      	mov	r0, r1
 8017518:	4611      	mov	r1, r2
 801751a:	461a      	mov	r2, r3
 801751c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017520:	b089      	sub	sp, #36	; 0x24
 8017522:	015b      	lsls	r3, r3, #5
 8017524:	9304      	str	r3, [sp, #16]
 8017526:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801752a:	2500      	movs	r5, #0
 801752c:	015b      	lsls	r3, r3, #5
 801752e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8017532:	ab07      	add	r3, sp, #28
 8017534:	9302      	str	r3, [sp, #8]
 8017536:	ab06      	add	r3, sp, #24
 8017538:	9301      	str	r3, [sp, #4]
 801753a:	ab05      	add	r3, sp, #20
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	ab04      	add	r3, sp, #16
 8017540:	9505      	str	r5, [sp, #20]
 8017542:	f7ff fece 	bl	80172e2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8017546:	2520      	movs	r5, #32
 8017548:	9a04      	ldr	r2, [sp, #16]
 801754a:	9805      	ldr	r0, [sp, #20]
 801754c:	fb92 f2f5 	sdiv	r2, r2, r5
 8017550:	fb90 f0f5 	sdiv	r0, r0, r5
 8017554:	b292      	uxth	r2, r2
 8017556:	3002      	adds	r0, #2
 8017558:	1a80      	subs	r0, r0, r2
 801755a:	9b06      	ldr	r3, [sp, #24]
 801755c:	9907      	ldr	r1, [sp, #28]
 801755e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017562:	fb91 f1f5 	sdiv	r1, r1, r5
 8017566:	b29b      	uxth	r3, r3
 8017568:	3102      	adds	r1, #2
 801756a:	1ac9      	subs	r1, r1, r3
 801756c:	3a01      	subs	r2, #1
 801756e:	3b01      	subs	r3, #1
 8017570:	80a0      	strh	r0, [r4, #4]
 8017572:	4620      	mov	r0, r4
 8017574:	8022      	strh	r2, [r4, #0]
 8017576:	8063      	strh	r3, [r4, #2]
 8017578:	80e1      	strh	r1, [r4, #6]
 801757a:	b009      	add	sp, #36	; 0x24
 801757c:	bd30      	pop	{r4, r5, pc}

0801757e <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801757e:	b510      	push	{r4, lr}
 8017580:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8017584:	4604      	mov	r4, r0
 8017586:	f7ff ffc4 	bl	8017512 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 801758a:	4620      	mov	r0, r4
 801758c:	bd10      	pop	{r4, pc}

0801758e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 801758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017590:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8017594:	4606      	mov	r6, r0
 8017596:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 801759a:	6813      	ldr	r3, [r2, #0]
 801759c:	42a5      	cmp	r5, r4
 801759e:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80175a2:	da2b      	bge.n	80175fc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80175a4:	42a3      	cmp	r3, r4
 80175a6:	dd14      	ble.n	80175d2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80175a8:	b168      	cbz	r0, 80175c6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80175aa:	4267      	negs	r7, r4
 80175ac:	fb97 f2f0 	sdiv	r2, r7, r0
 80175b0:	fb00 7212 	mls	r2, r0, r2, r7
 80175b4:	1a82      	subs	r2, r0, r2
 80175b6:	fb92 f7f0 	sdiv	r7, r2, r0
 80175ba:	fb00 2017 	mls	r0, r0, r7, r2
 80175be:	1a24      	subs	r4, r4, r0
 80175c0:	42ac      	cmp	r4, r5
 80175c2:	bfb8      	it	lt
 80175c4:	462c      	movlt	r4, r5
 80175c6:	4630      	mov	r0, r6
 80175c8:	4622      	mov	r2, r4
 80175ca:	f7ff ffa2 	bl	8017512 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80175ce:	4630      	mov	r0, r6
 80175d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175d2:	42ab      	cmp	r3, r5
 80175d4:	dd0e      	ble.n	80175f4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80175d6:	b168      	cbz	r0, 80175f4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80175d8:	425f      	negs	r7, r3
 80175da:	fb97 f2f0 	sdiv	r2, r7, r0
 80175de:	fb00 7212 	mls	r2, r0, r2, r7
 80175e2:	1a82      	subs	r2, r0, r2
 80175e4:	fb92 f7f0 	sdiv	r7, r2, r0
 80175e8:	fb00 2017 	mls	r0, r0, r7, r2
 80175ec:	1a1b      	subs	r3, r3, r0
 80175ee:	42ab      	cmp	r3, r5
 80175f0:	bfb8      	it	lt
 80175f2:	462b      	movlt	r3, r5
 80175f4:	4622      	mov	r2, r4
 80175f6:	461c      	mov	r4, r3
 80175f8:	4613      	mov	r3, r2
 80175fa:	e7e4      	b.n	80175c6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80175fc:	42a3      	cmp	r3, r4
 80175fe:	da10      	bge.n	8017622 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8017600:	b148      	cbz	r0, 8017616 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8017602:	fb94 f2f0 	sdiv	r2, r4, r0
 8017606:	fb00 4212 	mls	r2, r0, r2, r4
 801760a:	1a82      	subs	r2, r0, r2
 801760c:	fb92 f7f0 	sdiv	r7, r2, r0
 8017610:	fb00 2017 	mls	r0, r0, r7, r2
 8017614:	4404      	add	r4, r0
 8017616:	42a5      	cmp	r5, r4
 8017618:	bfa8      	it	ge
 801761a:	4625      	movge	r5, r4
 801761c:	461c      	mov	r4, r3
 801761e:	462b      	mov	r3, r5
 8017620:	e7d1      	b.n	80175c6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017622:	42ab      	cmp	r3, r5
 8017624:	dacf      	bge.n	80175c6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017626:	2800      	cmp	r0, #0
 8017628:	d0cd      	beq.n	80175c6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 801762a:	fb93 f2f0 	sdiv	r2, r3, r0
 801762e:	fb00 3212 	mls	r2, r0, r2, r3
 8017632:	1a82      	subs	r2, r0, r2
 8017634:	fb92 f7f0 	sdiv	r7, r2, r0
 8017638:	fb00 2017 	mls	r0, r0, r7, r2
 801763c:	4403      	add	r3, r0
 801763e:	42ab      	cmp	r3, r5
 8017640:	bfa8      	it	ge
 8017642:	462b      	movge	r3, r5
 8017644:	e7bf      	b.n	80175c6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08017646 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8017646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801764a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801764c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801764e:	b0ba      	sub	sp, #232	; 0xe8
 8017650:	429a      	cmp	r2, r3
 8017652:	9303      	str	r3, [sp, #12]
 8017654:	9204      	str	r2, [sp, #16]
 8017656:	bfb8      	it	lt
 8017658:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 801765c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8017660:	1a9b      	subs	r3, r3, r2
 8017662:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017666:	bfa2      	ittt	ge
 8017668:	2200      	movge	r2, #0
 801766a:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 801766e:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8017672:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017674:	4604      	mov	r4, r0
 8017676:	460f      	mov	r7, r1
 8017678:	ae0a      	add	r6, sp, #40	; 0x28
 801767a:	2a00      	cmp	r2, #0
 801767c:	d131      	bne.n	80176e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 801767e:	463a      	mov	r2, r7
 8017680:	4621      	mov	r1, r4
 8017682:	a80b      	add	r0, sp, #44	; 0x2c
 8017684:	f012 fd50 	bl	802a128 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017688:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801768a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801768c:	9205      	str	r2, [sp, #20]
 801768e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8017692:	9306      	str	r3, [sp, #24]
 8017694:	dc6d      	bgt.n	8017772 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12c>
 8017696:	9b03      	ldr	r3, [sp, #12]
 8017698:	9307      	str	r3, [sp, #28]
 801769a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801769e:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 80176a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80176a6:	930a      	str	r3, [sp, #40]	; 0x28
 80176a8:	aa07      	add	r2, sp, #28
 80176aa:	4633      	mov	r3, r6
 80176ac:	a90b      	add	r1, sp, #44	; 0x2c
 80176ae:	4620      	mov	r0, r4
 80176b0:	016d      	lsls	r5, r5, #5
 80176b2:	f7ff fd6b 	bl	801718c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80176b6:	9f07      	ldr	r7, [sp, #28]
 80176b8:	2d00      	cmp	r5, #0
 80176ba:	d163      	bne.n	8017784 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
 80176bc:	3720      	adds	r7, #32
 80176be:	9a04      	ldr	r2, [sp, #16]
 80176c0:	9b06      	ldr	r3, [sp, #24]
 80176c2:	4639      	mov	r1, r7
 80176c4:	4291      	cmp	r1, r2
 80176c6:	442f      	add	r7, r5
 80176c8:	dc69      	bgt.n	801779e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x158>
 80176ca:	9a05      	ldr	r2, [sp, #20]
 80176cc:	9107      	str	r1, [sp, #28]
 80176ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80176d2:	930a      	str	r3, [sp, #40]	; 0x28
 80176d4:	aa07      	add	r2, sp, #28
 80176d6:	4633      	mov	r3, r6
 80176d8:	a90b      	add	r1, sp, #44	; 0x2c
 80176da:	4620      	mov	r0, r4
 80176dc:	f7ff fda8 	bl	8017230 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80176e0:	e7ed      	b.n	80176be <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80176e2:	f9b1 c000 	ldrsh.w	ip, [r1]
 80176e6:	88bd      	ldrh	r5, [r7, #4]
 80176e8:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 80176ec:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 80176f0:	4465      	add	r5, ip
 80176f2:	b22d      	sxth	r5, r5
 80176f4:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 80176f8:	2d00      	cmp	r5, #0
 80176fa:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 80176fe:	bfb8      	it	lt
 8017700:	426d      	neglt	r5, r5
 8017702:	2b00      	cmp	r3, #0
 8017704:	bfb8      	it	lt
 8017706:	425b      	neglt	r3, r3
 8017708:	429d      	cmp	r5, r3
 801770a:	bfb8      	it	lt
 801770c:	461d      	movlt	r5, r3
 801770e:	88fb      	ldrh	r3, [r7, #6]
 8017710:	4403      	add	r3, r0
 8017712:	b21b      	sxth	r3, r3
 8017714:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8017718:	2b00      	cmp	r3, #0
 801771a:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 801771e:	bfb8      	it	lt
 8017720:	425b      	neglt	r3, r3
 8017722:	2900      	cmp	r1, #0
 8017724:	bfb8      	it	lt
 8017726:	4249      	neglt	r1, r1
 8017728:	428b      	cmp	r3, r1
 801772a:	bfb8      	it	lt
 801772c:	460b      	movlt	r3, r1
 801772e:	115b      	asrs	r3, r3, #5
 8017730:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017734:	116d      	asrs	r5, r5, #5
 8017736:	3301      	adds	r3, #1
 8017738:	435b      	muls	r3, r3
 801773a:	3501      	adds	r5, #1
 801773c:	fb05 3505 	mla	r5, r5, r5, r3
 8017740:	3001      	adds	r0, #1
 8017742:	2302      	movs	r3, #2
 8017744:	fb92 f2f3 	sdiv	r2, r2, r3
 8017748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801774a:	1040      	asrs	r0, r0, #1
 801774c:	1a9a      	subs	r2, r3, r2
 801774e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017752:	920a      	str	r2, [sp, #40]	; 0x28
 8017754:	f7ff fcb8 	bl	80170c8 <_ZN8touchgfx7CWRUtil4sineEi>
 8017758:	a90b      	add	r1, sp, #44	; 0x2c
 801775a:	900b      	str	r0, [sp, #44]	; 0x2c
 801775c:	4630      	mov	r0, r6
 801775e:	f7ff fca7 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017762:	2320      	movs	r3, #32
 8017764:	fb90 f0f3 	sdiv	r0, r0, r3
 8017768:	4340      	muls	r0, r0
 801776a:	42a8      	cmp	r0, r5
 801776c:	dd87      	ble.n	801767e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 801776e:	2401      	movs	r4, #1
 8017770:	e037      	b.n	80177e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19c>
 8017772:	2102      	movs	r1, #2
 8017774:	fb93 f3f1 	sdiv	r3, r3, r1
 8017778:	4413      	add	r3, r2
 801777a:	9306      	str	r3, [sp, #24]
 801777c:	fb93 f3f1 	sdiv	r3, r3, r1
 8017780:	9305      	str	r3, [sp, #20]
 8017782:	e788      	b.n	8017696 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8017784:	f107 0320 	add.w	r3, r7, #32
 8017788:	fb93 f7f5 	sdiv	r7, r3, r5
 801778c:	fb05 3717 	mls	r7, r5, r7, r3
 8017790:	1bea      	subs	r2, r5, r7
 8017792:	fb92 f7f5 	sdiv	r7, r2, r5
 8017796:	fb05 2717 	mls	r7, r5, r7, r2
 801779a:	441f      	add	r7, r3
 801779c:	e78f      	b.n	80176be <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801779e:	9907      	ldr	r1, [sp, #28]
 80177a0:	428a      	cmp	r2, r1
 80177a2:	dd09      	ble.n	80177b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 80177a4:	9a05      	ldr	r2, [sp, #20]
 80177a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80177aa:	930a      	str	r3, [sp, #40]	; 0x28
 80177ac:	aa04      	add	r2, sp, #16
 80177ae:	4633      	mov	r3, r6
 80177b0:	a90b      	add	r1, sp, #44	; 0x2c
 80177b2:	4620      	mov	r0, r4
 80177b4:	f7ff fd3c 	bl	8017230 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80177b8:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 80177bc:	9a06      	ldr	r2, [sp, #24]
 80177be:	1ac3      	subs	r3, r0, r3
 80177c0:	b99a      	cbnz	r2, 80177ea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a4>
 80177c2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80177c6:	da04      	bge.n	80177d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 80177c8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80177cc:	a80b      	add	r0, sp, #44	; 0x2c
 80177ce:	f012 fe05 	bl	802a3dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80177d2:	21ff      	movs	r1, #255	; 0xff
 80177d4:	a80b      	add	r0, sp, #44	; 0x2c
 80177d6:	f012 ff76 	bl	802a6c6 <_ZN8touchgfx6Canvas6renderEh>
 80177da:	4604      	mov	r4, r0
 80177dc:	a80b      	add	r0, sp, #44	; 0x2c
 80177de:	f012 ffb1 	bl	802a744 <_ZN8touchgfx6CanvasD1Ev>
 80177e2:	4620      	mov	r0, r4
 80177e4:	b03a      	add	sp, #232	; 0xe8
 80177e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177ea:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 80177ee:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80177f2:	ea4f 1747 	mov.w	r7, r7, lsl #5
 80177f6:	da2b      	bge.n	8017850 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 80177f8:	f7ff fc88 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80177fc:	4631      	mov	r1, r6
 80177fe:	900a      	str	r0, [sp, #40]	; 0x28
 8017800:	a805      	add	r0, sp, #20
 8017802:	f7ff fc55 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017806:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017808:	4418      	add	r0, r3
 801780a:	9008      	str	r0, [sp, #32]
 801780c:	9804      	ldr	r0, [sp, #16]
 801780e:	f7ff fc9e 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017812:	4631      	mov	r1, r6
 8017814:	900a      	str	r0, [sp, #40]	; 0x28
 8017816:	a805      	add	r0, sp, #20
 8017818:	f7ff fc4a 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801781c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801781e:	1a18      	subs	r0, r3, r0
 8017820:	9b04      	ldr	r3, [sp, #16]
 8017822:	9009      	str	r0, [sp, #36]	; 0x24
 8017824:	443b      	add	r3, r7
 8017826:	930a      	str	r3, [sp, #40]	; 0x28
 8017828:	f10d 0818 	add.w	r8, sp, #24
 801782c:	9b04      	ldr	r3, [sp, #16]
 801782e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017830:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8017834:	4293      	cmp	r3, r2
 8017836:	dd0b      	ble.n	8017850 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8017838:	ab09      	add	r3, sp, #36	; 0x24
 801783a:	e9cd 6800 	strd	r6, r8, [sp]
 801783e:	aa08      	add	r2, sp, #32
 8017840:	a90b      	add	r1, sp, #44	; 0x2c
 8017842:	4620      	mov	r0, r4
 8017844:	f7ff fccb 	bl	80171de <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801784a:	443b      	add	r3, r7
 801784c:	930a      	str	r3, [sp, #40]	; 0x28
 801784e:	e7ed      	b.n	801782c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e6>
 8017850:	9a04      	ldr	r2, [sp, #16]
 8017852:	9b07      	ldr	r3, [sp, #28]
 8017854:	429a      	cmp	r2, r3
 8017856:	dd0a      	ble.n	801786e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x228>
 8017858:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801785c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017860:	930a      	str	r3, [sp, #40]	; 0x28
 8017862:	aa04      	add	r2, sp, #16
 8017864:	4633      	mov	r3, r6
 8017866:	a90b      	add	r1, sp, #44	; 0x2c
 8017868:	4620      	mov	r0, r4
 801786a:	f7ff fce1 	bl	8017230 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801786e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017872:	9b03      	ldr	r3, [sp, #12]
 8017874:	4642      	mov	r2, r8
 8017876:	429a      	cmp	r2, r3
 8017878:	eba8 0805 	sub.w	r8, r8, r5
 801787c:	db0c      	blt.n	8017898 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x252>
 801787e:	9207      	str	r2, [sp, #28]
 8017880:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017884:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017888:	930a      	str	r3, [sp, #40]	; 0x28
 801788a:	aa07      	add	r2, sp, #28
 801788c:	4633      	mov	r3, r6
 801788e:	a90b      	add	r1, sp, #44	; 0x2c
 8017890:	4620      	mov	r0, r4
 8017892:	f7ff fccd 	bl	8017230 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017896:	e7ec      	b.n	8017872 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8017898:	9a07      	ldr	r2, [sp, #28]
 801789a:	4293      	cmp	r3, r2
 801789c:	da0a      	bge.n	80178b4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x26e>
 801789e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80178a2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80178a6:	930a      	str	r3, [sp, #40]	; 0x28
 80178a8:	aa03      	add	r2, sp, #12
 80178aa:	4633      	mov	r3, r6
 80178ac:	a90b      	add	r1, sp, #44	; 0x2c
 80178ae:	4620      	mov	r0, r4
 80178b0:	f7ff fcbe 	bl	8017230 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80178b4:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 80178b8:	1a1b      	subs	r3, r3, r0
 80178ba:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80178be:	da88      	bge.n	80177d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 80178c0:	f7ff fc24 	bl	801710c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80178c4:	4631      	mov	r1, r6
 80178c6:	900a      	str	r0, [sp, #40]	; 0x28
 80178c8:	a805      	add	r0, sp, #20
 80178ca:	f7ff fbf1 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80178ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80178d0:	4418      	add	r0, r3
 80178d2:	9008      	str	r0, [sp, #32]
 80178d4:	9803      	ldr	r0, [sp, #12]
 80178d6:	f7ff fc3a 	bl	801714e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80178da:	4631      	mov	r1, r6
 80178dc:	900a      	str	r0, [sp, #40]	; 0x28
 80178de:	a805      	add	r0, sp, #20
 80178e0:	f7ff fbe6 	bl	80170b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80178e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178e6:	1a18      	subs	r0, r3, r0
 80178e8:	9b03      	ldr	r3, [sp, #12]
 80178ea:	9009      	str	r0, [sp, #36]	; 0x24
 80178ec:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 80178f0:	443b      	add	r3, r7
 80178f2:	930a      	str	r3, [sp, #40]	; 0x28
 80178f4:	ad06      	add	r5, sp, #24
 80178f6:	9a03      	ldr	r2, [sp, #12]
 80178f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178fa:	429a      	cmp	r2, r3
 80178fc:	f77f af69 	ble.w	80177d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8017900:	ab09      	add	r3, sp, #36	; 0x24
 8017902:	e9cd 6500 	strd	r6, r5, [sp]
 8017906:	aa08      	add	r2, sp, #32
 8017908:	a90b      	add	r1, sp, #44	; 0x2c
 801790a:	4620      	mov	r0, r4
 801790c:	f7ff fc67 	bl	80171de <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017912:	443b      	add	r3, r7
 8017914:	930a      	str	r3, [sp, #40]	; 0x28
 8017916:	e7ee      	b.n	80178f6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b0>

08017918 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8017918:	6281      	str	r1, [r0, #40]	; 0x28
 801791a:	4770      	bx	lr

0801791c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801791c:	b510      	push	{r4, lr}
 801791e:	2200      	movs	r2, #0
 8017920:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017924:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8017928:	8002      	strh	r2, [r0, #0]
 801792a:	8042      	strh	r2, [r0, #2]
 801792c:	8084      	strh	r4, [r0, #4]
 801792e:	80c1      	strh	r1, [r0, #6]
 8017930:	bd10      	pop	{r4, pc}

08017932 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8017932:	2200      	movs	r2, #0
 8017934:	8002      	strh	r2, [r0, #0]
 8017936:	8042      	strh	r2, [r0, #2]
 8017938:	8082      	strh	r2, [r0, #4]
 801793a:	80c2      	strh	r2, [r0, #6]
 801793c:	4770      	bx	lr
	...

08017940 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8017940:	b508      	push	{r3, lr}
 8017942:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017944:	b928      	cbnz	r0, 8017952 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8017946:	4b03      	ldr	r3, [pc, #12]	; (8017954 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8017948:	4a03      	ldr	r2, [pc, #12]	; (8017958 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801794a:	4804      	ldr	r0, [pc, #16]	; (801795c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801794c:	2126      	movs	r1, #38	; 0x26
 801794e:	f014 fe85 	bl	802c65c <__assert_func>
 8017952:	bd08      	pop	{r3, pc}
 8017954:	080300b0 	.word	0x080300b0
 8017958:	08030190 	.word	0x08030190
 801795c:	080300d7 	.word	0x080300d7

08017960 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017960:	b510      	push	{r4, lr}
 8017962:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017966:	888a      	ldrh	r2, [r1, #4]
 8017968:	f9b0 3000 	ldrsh.w	r3, [r0]
 801796c:	4422      	add	r2, r4
 801796e:	b212      	sxth	r2, r2
 8017970:	4293      	cmp	r3, r2
 8017972:	da15      	bge.n	80179a0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017974:	8882      	ldrh	r2, [r0, #4]
 8017976:	4413      	add	r3, r2
 8017978:	b21b      	sxth	r3, r3
 801797a:	429c      	cmp	r4, r3
 801797c:	da10      	bge.n	80179a0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801797e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017982:	88c9      	ldrh	r1, [r1, #6]
 8017984:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017988:	4419      	add	r1, r3
 801798a:	b209      	sxth	r1, r1
 801798c:	428a      	cmp	r2, r1
 801798e:	da07      	bge.n	80179a0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017990:	88c0      	ldrh	r0, [r0, #6]
 8017992:	4410      	add	r0, r2
 8017994:	b200      	sxth	r0, r0
 8017996:	4283      	cmp	r3, r0
 8017998:	bfac      	ite	ge
 801799a:	2000      	movge	r0, #0
 801799c:	2001      	movlt	r0, #1
 801799e:	bd10      	pop	{r4, pc}
 80179a0:	2000      	movs	r0, #0
 80179a2:	e7fc      	b.n	801799e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080179a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80179a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a8:	4604      	mov	r4, r0
 80179aa:	b08b      	sub	sp, #44	; 0x2c
 80179ac:	6808      	ldr	r0, [r1, #0]
 80179ae:	6849      	ldr	r1, [r1, #4]
 80179b0:	ab04      	add	r3, sp, #16
 80179b2:	c303      	stmia	r3!, {r0, r1}
 80179b4:	4b37      	ldr	r3, [pc, #220]	; (8017a94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 80179b6:	781b      	ldrb	r3, [r3, #0]
 80179b8:	2b01      	cmp	r3, #1
 80179ba:	6823      	ldr	r3, [r4, #0]
 80179bc:	4621      	mov	r1, r4
 80179be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179c0:	a806      	add	r0, sp, #24
 80179c2:	bf1f      	itttt	ne
 80179c4:	f10d 090e 	addne.w	r9, sp, #14
 80179c8:	ae05      	addne	r6, sp, #20
 80179ca:	f10d 0516 	addne.w	r5, sp, #22
 80179ce:	f10d 0812 	addne.w	r8, sp, #18
 80179d2:	bf01      	itttt	eq
 80179d4:	f10d 0916 	addeq.w	r9, sp, #22
 80179d8:	f10d 060e 	addeq.w	r6, sp, #14
 80179dc:	ad05      	addeq	r5, sp, #20
 80179de:	f10d 0810 	addeq.w	r8, sp, #16
 80179e2:	4798      	blx	r3
 80179e4:	f04f 0a00 	mov.w	sl, #0
 80179e8:	f647 7bff 	movw	fp, #32767	; 0x7fff
 80179ec:	f9b5 3000 	ldrsh.w	r3, [r5]
 80179f0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d042      	beq.n	8017a7e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 80179f8:	4293      	cmp	r3, r2
 80179fa:	bfa8      	it	ge
 80179fc:	4613      	movge	r3, r2
 80179fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017a02:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017a06:	2f00      	cmp	r7, #0
 8017a08:	dd21      	ble.n	8017a4e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8017a0a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8017a0e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8017a12:	f9b6 2000 	ldrsh.w	r2, [r6]
 8017a16:	f9b9 3000 	ldrsh.w	r3, [r9]
 8017a1a:	f8ad 0020 	strh.w	r0, [sp, #32]
 8017a1e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8017a22:	a808      	add	r0, sp, #32
 8017a24:	a906      	add	r1, sp, #24
 8017a26:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8017a2a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017a2e:	f7ff ff97 	bl	8017960 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017a32:	9001      	str	r0, [sp, #4]
 8017a34:	b1d0      	cbz	r0, 8017a6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017a36:	6822      	ldr	r2, [r4, #0]
 8017a38:	a908      	add	r1, sp, #32
 8017a3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	4790      	blx	r2
 8017a40:	b9a0      	cbnz	r0, 8017a6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017a42:	9b01      	ldr	r3, [sp, #4]
 8017a44:	107f      	asrs	r7, r7, #1
 8017a46:	f8ad 700e 	strh.w	r7, [sp, #14]
 8017a4a:	469a      	mov	sl, r3
 8017a4c:	e7d9      	b.n	8017a02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017a4e:	d10d      	bne.n	8017a6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017a50:	2301      	movs	r3, #1
 8017a52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017a56:	f8b8 2000 	ldrh.w	r2, [r8]
 8017a5a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8017a5e:	440a      	add	r2, r1
 8017a60:	f8a8 2000 	strh.w	r2, [r8]
 8017a64:	882b      	ldrh	r3, [r5, #0]
 8017a66:	1a5b      	subs	r3, r3, r1
 8017a68:	802b      	strh	r3, [r5, #0]
 8017a6a:	e7bf      	b.n	80179ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017a6c:	f1ba 0f00 	cmp.w	sl, #0
 8017a70:	d0f1      	beq.n	8017a56 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017a72:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8017a76:	455b      	cmp	r3, fp
 8017a78:	bf08      	it	eq
 8017a7a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017a7c:	e7eb      	b.n	8017a56 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017a7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017a82:	429a      	cmp	r2, r3
 8017a84:	bf04      	itt	eq
 8017a86:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8017a8a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017a8c:	b00b      	add	sp, #44	; 0x2c
 8017a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a92:	bf00      	nop
 8017a94:	200066f8 	.word	0x200066f8

08017a98 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a9a:	6803      	ldr	r3, [r0, #0]
 8017a9c:	b085      	sub	sp, #20
 8017a9e:	4604      	mov	r4, r0
 8017aa0:	4601      	mov	r1, r0
 8017aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017aa4:	4668      	mov	r0, sp
 8017aa6:	4798      	blx	r3
 8017aa8:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8017aac:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8017ab0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	a902      	add	r1, sp, #8
 8017ab8:	4668      	mov	r0, sp
 8017aba:	9302      	str	r3, [sp, #8]
 8017abc:	f8ad 500e 	strh.w	r5, [sp, #14]
 8017ac0:	f7ff ff4e 	bl	8017960 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017ac4:	b340      	cbz	r0, 8017b18 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8017ac6:	f9bd 2000 	ldrsh.w	r2, [sp]
 8017aca:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8017ace:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017ad2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8017ad6:	443a      	add	r2, r7
 8017ad8:	b292      	uxth	r2, r2
 8017ada:	b217      	sxth	r7, r2
 8017adc:	42be      	cmp	r6, r7
 8017ade:	bfd8      	it	le
 8017ae0:	b2b2      	uxthle	r2, r6
 8017ae2:	1a12      	subs	r2, r2, r0
 8017ae4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ae8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017aec:	f8ad 0000 	strh.w	r0, [sp]
 8017af0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8017af4:	4413      	add	r3, r2
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	b21a      	sxth	r2, r3
 8017afa:	4295      	cmp	r5, r2
 8017afc:	bfd8      	it	le
 8017afe:	b2ab      	uxthle	r3, r5
 8017b00:	1a5b      	subs	r3, r3, r1
 8017b02:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017b06:	f8ad 1002 	strh.w	r1, [sp, #2]
 8017b0a:	6823      	ldr	r3, [r4, #0]
 8017b0c:	4669      	mov	r1, sp
 8017b0e:	691b      	ldr	r3, [r3, #16]
 8017b10:	4620      	mov	r0, r4
 8017b12:	4798      	blx	r3
 8017b14:	b005      	add	sp, #20
 8017b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b18:	e9cd 0000 	strd	r0, r0, [sp]
 8017b1c:	e7f5      	b.n	8017b0a <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08017b20 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017b20:	2200      	movs	r2, #0
 8017b22:	8082      	strh	r2, [r0, #4]
 8017b24:	80c2      	strh	r2, [r0, #6]
 8017b26:	8102      	strh	r2, [r0, #8]
 8017b28:	8142      	strh	r2, [r0, #10]
 8017b2a:	8182      	strh	r2, [r0, #12]
 8017b2c:	81c2      	strh	r2, [r0, #14]
 8017b2e:	8202      	strh	r2, [r0, #16]
 8017b30:	8242      	strh	r2, [r0, #18]
 8017b32:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017b36:	61c2      	str	r2, [r0, #28]
 8017b38:	8402      	strh	r2, [r0, #32]
 8017b3a:	8442      	strh	r2, [r0, #34]	; 0x22
 8017b3c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017b40:	2101      	movs	r1, #1
 8017b42:	6282      	str	r2, [r0, #40]	; 0x28
 8017b44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017b48:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017b4c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017b4e:	4903      	ldr	r1, [pc, #12]	; (8017b5c <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8017b50:	6001      	str	r1, [r0, #0]
 8017b52:	22ff      	movs	r2, #255	; 0xff
 8017b54:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017b58:	4770      	bx	lr
 8017b5a:	bf00      	nop
 8017b5c:	0803011c 	.word	0x0803011c

08017b60 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8017b60:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8017b64:	4770      	bx	lr

08017b66 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8017b66:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8017b6a:	4770      	bx	lr

08017b6c <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8017b6c:	6802      	ldr	r2, [r0, #0]
 8017b6e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017b74:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017b78:	4710      	bx	r2

08017b7a <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8017b7a:	6802      	ldr	r2, [r0, #0]
 8017b7c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017b80:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017b82:	eef0 0a40 	vmov.f32	s1, s0
 8017b86:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017b8a:	4710      	bx	r2

08017b8c <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8017b8c:	6802      	ldr	r2, [r0, #0]
 8017b8e:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017b92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017b94:	eeb0 1a40 	vmov.f32	s2, s0
 8017b98:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017b9c:	4710      	bx	r2

08017b9e <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8017b9e:	6802      	ldr	r2, [r0, #0]
 8017ba0:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017ba4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017ba6:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017baa:	4710      	bx	r2

08017bac <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8017bac:	6802      	ldr	r2, [r0, #0]
 8017bae:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017bb2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017bb4:	eef0 0a40 	vmov.f32	s1, s0
 8017bb8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017bbc:	4710      	bx	r2

08017bbe <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8017bbe:	6802      	ldr	r2, [r0, #0]
 8017bc0:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017bc4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017bc6:	eeb0 1a40 	vmov.f32	s2, s0
 8017bca:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017bce:	4710      	bx	r2

08017bd0 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8017bd0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017bd4:	4770      	bx	lr

08017bd6 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8017bd6:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8017bda:	4770      	bx	lr

08017bdc <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8017bdc:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8017be0:	4770      	bx	lr

08017be2 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8017be2:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8017be6:	4770      	bx	lr

08017be8 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8017be8:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8017bec:	4770      	bx	lr

08017bee <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8017bee:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8017bf2:	4770      	bx	lr

08017bf4 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8017bf4:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8017bf8:	4770      	bx	lr

08017bfa <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8017bfa:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 8017bfe:	4770      	bx	lr

08017c00 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8017c00:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8017c04:	4770      	bx	lr

08017c06 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8017c06:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8017c0a:	4770      	bx	lr

08017c0c <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8017c0c:	ee07 2a90 	vmov	s15, r2
 8017c10:	6803      	ldr	r3, [r0, #0]
 8017c12:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017c16:	ee07 1a90 	vmov	s15, r1
 8017c1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017c1e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017c22:	4718      	bx	r3

08017c24 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8017c24:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8017c28:	4770      	bx	lr

08017c2a <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8017c2a:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8017c2e:	4770      	bx	lr

08017c30 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8017c30:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 8017c34:	4770      	bx	lr

08017c36 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8017c36:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8017c3a:	4770      	bx	lr

08017c3c <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8017c3c:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8017c40:	4770      	bx	lr

08017c42 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8017c42:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8017c46:	4770      	bx	lr

08017c48 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8017c48:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8017c4c:	4770      	bx	lr

08017c4e <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8017c4e:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8017c52:	4770      	bx	lr

08017c54 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8017c54:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8017c58:	4770      	bx	lr

08017c5a <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8017c5a:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8017c5e:	4770      	bx	lr

08017c60 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8017c60:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8017c64:	4770      	bx	lr

08017c66 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8017c66:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8017c6a:	4770      	bx	lr

08017c6c <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8017c6c:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8017c70:	4770      	bx	lr

08017c72 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8017c72:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8017c76:	4770      	bx	lr

08017c78 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8017c78:	2200      	movs	r2, #0
 8017c7a:	8002      	strh	r2, [r0, #0]
 8017c7c:	8042      	strh	r2, [r0, #2]
 8017c7e:	8082      	strh	r2, [r0, #4]
 8017c80:	80c2      	strh	r2, [r0, #6]
 8017c82:	4770      	bx	lr

08017c84 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8017c84:	b538      	push	{r3, r4, r5, lr}
 8017c86:	2500      	movs	r5, #0
 8017c88:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8017c92:	4b1f      	ldr	r3, [pc, #124]	; (8017d10 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8017c94:	8085      	strh	r5, [r0, #4]
 8017c96:	80c5      	strh	r5, [r0, #6]
 8017c98:	8105      	strh	r5, [r0, #8]
 8017c9a:	8145      	strh	r5, [r0, #10]
 8017c9c:	8185      	strh	r5, [r0, #12]
 8017c9e:	81c5      	strh	r5, [r0, #14]
 8017ca0:	8205      	strh	r5, [r0, #16]
 8017ca2:	8245      	strh	r5, [r0, #18]
 8017ca4:	61c5      	str	r5, [r0, #28]
 8017ca6:	8405      	strh	r5, [r0, #32]
 8017ca8:	8445      	strh	r5, [r0, #34]	; 0x22
 8017caa:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8017cae:	6003      	str	r3, [r0, #0]
 8017cb0:	880b      	ldrh	r3, [r1, #0]
 8017cb2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017cb4:	23ff      	movs	r3, #255	; 0xff
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8017cbc:	f001 f9fe 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017cc0:	4b14      	ldr	r3, [pc, #80]	; (8017d14 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8017cc2:	6023      	str	r3, [r4, #0]
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017cca:	4913      	ldr	r1, [pc, #76]	; (8017d18 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8017ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017cce:	6323      	str	r3, [r4, #48]	; 0x30
 8017cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8017cd2:	63a3      	str	r3, [r4, #56]	; 0x38
 8017cd4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017cd6:	6463      	str	r3, [r4, #68]	; 0x44
 8017cd8:	64a3      	str	r3, [r4, #72]	; 0x48
 8017cda:	6523      	str	r3, [r4, #80]	; 0x50
 8017cdc:	6563      	str	r3, [r4, #84]	; 0x54
 8017cde:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017ce0:	6623      	str	r3, [r4, #96]	; 0x60
 8017ce2:	66a3      	str	r3, [r4, #104]	; 0x68
 8017ce4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8017ce6:	6763      	str	r3, [r4, #116]	; 0x74
 8017ce8:	67a3      	str	r3, [r4, #120]	; 0x78
 8017cea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8017cee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8017cf2:	230c      	movs	r3, #12
 8017cf4:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8017cf8:	6422      	str	r2, [r4, #64]	; 0x40
 8017cfa:	64e1      	str	r1, [r4, #76]	; 0x4c
 8017cfc:	65a1      	str	r1, [r4, #88]	; 0x58
 8017cfe:	6662      	str	r2, [r4, #100]	; 0x64
 8017d00:	6722      	str	r2, [r4, #112]	; 0x70
 8017d02:	67e2      	str	r2, [r4, #124]	; 0x7c
 8017d04:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8017d08:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	bd38      	pop	{r3, r4, r5, pc}
 8017d10:	080306cc 	.word	0x080306cc
 8017d14:	080301e8 	.word	0x080301e8
 8017d18:	447a0000 	.word	0x447a0000

08017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8017d1c:	b570      	push	{r4, r5, r6, lr}
 8017d1e:	ed2d 8b04 	vpush	{d8-d9}
 8017d22:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8017d26:	add0      	add	r5, sp, #832	; 0x340
 8017d28:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8017d2a:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8017d2e:	4604      	mov	r4, r0
 8017d30:	4628      	mov	r0, r5
 8017d32:	f006 fb19 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017d36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017d38:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8017d3c:	4606      	mov	r6, r0
 8017d3e:	4628      	mov	r0, r5
 8017d40:	f006 fb4c 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017d44:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017d48:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8017d4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d4e:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8017d52:	9312      	str	r3, [sp, #72]	; 0x48
 8017d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d58:	1c72      	adds	r2, r6, #1
 8017d5a:	3001      	adds	r0, #1
 8017d5c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8017d60:	ee07 2a90 	vmov	s15, r2
 8017d64:	ee06 0a90 	vmov	s13, r0
 8017d68:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017d74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017d78:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017d7c:	9316      	str	r3, [sp, #88]	; 0x58
 8017d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8017d80:	931e      	str	r3, [sp, #120]	; 0x78
 8017d82:	2300      	movs	r3, #0
 8017d84:	9320      	str	r3, [sp, #128]	; 0x80
 8017d86:	9321      	str	r3, [sp, #132]	; 0x84
 8017d88:	9322      	str	r3, [sp, #136]	; 0x88
 8017d8a:	9324      	str	r3, [sp, #144]	; 0x90
 8017d8c:	9325      	str	r3, [sp, #148]	; 0x94
 8017d8e:	9326      	str	r3, [sp, #152]	; 0x98
 8017d90:	9328      	str	r3, [sp, #160]	; 0xa0
 8017d92:	9329      	str	r3, [sp, #164]	; 0xa4
 8017d94:	932a      	str	r3, [sp, #168]	; 0xa8
 8017d96:	932c      	str	r3, [sp, #176]	; 0xb0
 8017d98:	932d      	str	r3, [sp, #180]	; 0xb4
 8017d9a:	932e      	str	r3, [sp, #184]	; 0xb8
 8017d9c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017da0:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 8017da4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8017da8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8017dac:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8017db0:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 8017db4:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8017db8:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 8017dbc:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8017dc0:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8017dc4:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8017dc8:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 8017dcc:	a830      	add	r0, sp, #192	; 0xc0
 8017dce:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8017dd2:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8017dd6:	f005 f979 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017dda:	eeb1 0a49 	vneg.f32	s0, s18
 8017dde:	a830      	add	r0, sp, #192	; 0xc0
 8017de0:	f005 fa48 	bl	801d274 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017de4:	eeb1 0a68 	vneg.f32	s0, s17
 8017de8:	f005 fa52 	bl	801d290 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017dec:	eeb1 0a48 	vneg.f32	s0, s16
 8017df0:	f005 fa5d 	bl	801d2ae <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8017df4:	a840      	add	r0, sp, #256	; 0x100
 8017df6:	f005 f969 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017dfa:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8017dfe:	a840      	add	r0, sp, #256	; 0x100
 8017e00:	f005 f9bc 	bl	801d17c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8017e04:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8017e08:	f005 f9e2 	bl	801d1d0 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8017e0c:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8017e10:	f005 fa07 	bl	801d222 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8017e14:	a850      	add	r0, sp, #320	; 0x140
 8017e16:	f005 f959 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017e1a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017e1e:	a850      	add	r0, sp, #320	; 0x140
 8017e20:	f005 fa54 	bl	801d2cc <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8017e24:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017e28:	f005 fa5c 	bl	801d2e4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8017e2c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017e30:	f005 fa65 	bl	801d2fe <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8017e34:	a860      	add	r0, sp, #384	; 0x180
 8017e36:	f005 f949 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017e3a:	eeb0 0a49 	vmov.f32	s0, s18
 8017e3e:	a860      	add	r0, sp, #384	; 0x180
 8017e40:	f005 fa18 	bl	801d274 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017e44:	eeb0 0a68 	vmov.f32	s0, s17
 8017e48:	f005 fa22 	bl	801d290 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8017e50:	f005 fa2d 	bl	801d2ae <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8017e54:	aa50      	add	r2, sp, #320	; 0x140
 8017e56:	a960      	add	r1, sp, #384	; 0x180
 8017e58:	a8b0      	add	r0, sp, #704	; 0x2c0
 8017e5a:	f005 f951 	bl	801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017e5e:	4628      	mov	r0, r5
 8017e60:	aa40      	add	r2, sp, #256	; 0x100
 8017e62:	a9b0      	add	r1, sp, #704	; 0x2c0
 8017e64:	f005 f94c 	bl	801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017e68:	4629      	mov	r1, r5
 8017e6a:	aa30      	add	r2, sp, #192	; 0xc0
 8017e6c:	a870      	add	r0, sp, #448	; 0x1c0
 8017e6e:	f005 f947 	bl	801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017e72:	a880      	add	r0, sp, #512	; 0x200
 8017e74:	f005 f92a 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017e78:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8017e7c:	a880      	add	r0, sp, #512	; 0x200
 8017e7e:	eeb1 0a40 	vneg.f32	s0, s0
 8017e82:	f005 f9f7 	bl	801d274 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017e86:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8017e8a:	a880      	add	r0, sp, #512	; 0x200
 8017e8c:	eeb1 0a40 	vneg.f32	s0, s0
 8017e90:	f005 f9fe 	bl	801d290 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017e94:	a890      	add	r0, sp, #576	; 0x240
 8017e96:	f005 f919 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017e9a:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8017e9e:	a890      	add	r0, sp, #576	; 0x240
 8017ea0:	f005 f95c 	bl	801d15c <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8017ea4:	a8a0      	add	r0, sp, #640	; 0x280
 8017ea6:	f005 f911 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 8017eaa:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8017eae:	a8a0      	add	r0, sp, #640	; 0x280
 8017eb0:	f005 f9e0 	bl	801d274 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017eb4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8017eb8:	f005 f9ea 	bl	801d290 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017ebc:	aa90      	add	r2, sp, #576	; 0x240
 8017ebe:	a9a0      	add	r1, sp, #640	; 0x280
 8017ec0:	a8b0      	add	r0, sp, #704	; 0x2c0
 8017ec2:	f005 f91d 	bl	801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	aa80      	add	r2, sp, #512	; 0x200
 8017eca:	a9b0      	add	r1, sp, #704	; 0x2c0
 8017ecc:	f005 f918 	bl	801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017ed0:	4629      	mov	r1, r5
 8017ed2:	aa70      	add	r2, sp, #448	; 0x1c0
 8017ed4:	4668      	mov	r0, sp
 8017ed6:	466d      	mov	r5, sp
 8017ed8:	f005 f912 	bl	801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ede:	ae70      	add	r6, sp, #448	; 0x1c0
 8017ee0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ee4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ee8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017eee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8017ef2:	2500      	movs	r5, #0
 8017ef4:	0129      	lsls	r1, r5, #4
 8017ef6:	ab20      	add	r3, sp, #128	; 0x80
 8017ef8:	185e      	adds	r6, r3, r1
 8017efa:	ab10      	add	r3, sp, #64	; 0x40
 8017efc:	4419      	add	r1, r3
 8017efe:	a870      	add	r0, sp, #448	; 0x1c0
 8017f00:	f005 f8b4 	bl	801d06c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8017f04:	3501      	adds	r5, #1
 8017f06:	2d04      	cmp	r5, #4
 8017f08:	ed86 0a00 	vstr	s0, [r6]
 8017f0c:	edc6 0a01 	vstr	s1, [r6, #4]
 8017f10:	ed86 1a02 	vstr	s2, [r6, #8]
 8017f14:	edc6 1a03 	vstr	s3, [r6, #12]
 8017f18:	d1ec      	bne.n	8017ef4 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8017f1a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8017f1e:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8017f22:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8017f26:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017f2a:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 8017f2e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f32:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8017f36:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 8017f3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017f3e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f42:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8017f46:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017f4a:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8017f4e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017f52:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8017f56:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f5a:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 8017f5e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 8017f62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017f66:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f6a:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8017f6e:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 8017f72:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8017f76:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017f7a:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 8017f7e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f82:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8017f86:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 8017f8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017f8e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f92:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8017f96:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8017f9a:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 8017f9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017fa2:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 8017fa6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017faa:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8017fae:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 8017fb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017fb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017fba:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 8017fbe:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 8017fc2:	ecbd 8b04 	vpop	{d8-d9}
 8017fc6:	bd70      	pop	{r4, r5, r6, pc}

08017fc8 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8017fc8:	b510      	push	{r4, lr}
 8017fca:	4604      	mov	r4, r0
 8017fcc:	f001 f876 	bl	80190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fd6:	f7ff bea1 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017fda <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 8017fda:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 8017fde:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 8017fe2:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 8017fe6:	f7ff be99 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017fea <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8017fea:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 8017fee:	f7ff be95 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017ff2 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8017ff2:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8017ff6:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 8017ffa:	f7ff be8f 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08017ffe <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8017ffe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018002:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800a:	bfd8      	it	le
 801800c:	eeb0 0a67 	vmovle.f32	s0, s15
 8018010:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 8018014:	f7ff be82 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018018 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8018018:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 801801c:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 8018020:	f7ff be7c 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018024 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8018024:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8018028:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801802c:	f7ff be76 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018030 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8018030:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8018034:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8018038:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 801803c:	f7ff be6e 	b.w	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018040 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8018040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018044:	ed2d 8b04 	vpush	{d8-d9}
 8018048:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 801804c:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 8018050:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 8018054:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 8018058:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018060:	bf54      	ite	pl
 8018062:	eeb0 0a69 	vmovpl.f32	s0, s19
 8018066:	eeb0 0a48 	vmovmi.f32	s0, s16
 801806a:	eeb4 9ac0 	vcmpe.f32	s18, s0
 801806e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018072:	bfd8      	it	le
 8018074:	eeb0 0a49 	vmovle.f32	s0, s18
 8018078:	eef4 8ac0 	vcmpe.f32	s17, s0
 801807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018080:	bfd8      	it	le
 8018082:	eeb0 0a68 	vmovle.f32	s0, s17
 8018086:	460c      	mov	r4, r1
 8018088:	4607      	mov	r7, r0
 801808a:	f013 fd73 	bl	802bb74 <floorf>
 801808e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018096:	bf58      	it	pl
 8018098:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 801809c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80180a0:	bf56      	itet	pl
 80180a2:	ee10 3a10 	vmovpl	r3, s0
 80180a6:	2600      	movmi	r6, #0
 80180a8:	b21e      	sxthpl	r6, r3
 80180aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ae:	bfd8      	it	le
 80180b0:	eeb0 8a69 	vmovle.f32	s16, s19
 80180b4:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80180b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180bc:	bf58      	it	pl
 80180be:	eeb0 8a49 	vmovpl.f32	s16, s18
 80180c2:	eef4 8ac8 	vcmpe.f32	s17, s16
 80180c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ca:	bf54      	ite	pl
 80180cc:	eeb0 0a68 	vmovpl.f32	s0, s17
 80180d0:	eeb0 0a48 	vmovmi.f32	s0, s16
 80180d4:	f013 fccc 	bl	802ba70 <ceilf>
 80180d8:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80180dc:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 80180e0:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80180e4:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 80180e8:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 80180ec:	ee07 8a90 	vmov	s15, r8
 80180f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80180f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fc:	bfd8      	it	le
 80180fe:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8018102:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018106:	bfdc      	itt	le
 8018108:	ee10 3a10 	vmovle	r3, s0
 801810c:	fa0f f883 	sxthle.w	r8, r3
 8018110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018114:	bf54      	ite	pl
 8018116:	eeb0 0a69 	vmovpl.f32	s0, s19
 801811a:	eeb0 0a48 	vmovmi.f32	s0, s16
 801811e:	eeb4 9ac0 	vcmpe.f32	s18, s0
 8018122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018126:	bfd8      	it	le
 8018128:	eeb0 0a49 	vmovle.f32	s0, s18
 801812c:	eef4 8ac0 	vcmpe.f32	s17, s0
 8018130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018134:	bfd8      	it	le
 8018136:	eeb0 0a68 	vmovle.f32	s0, s17
 801813a:	f013 fd1b 	bl	802bb74 <floorf>
 801813e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018146:	bf58      	it	pl
 8018148:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 801814c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018150:	bf56      	itet	pl
 8018152:	ee10 3a10 	vmovpl	r3, s0
 8018156:	2500      	movmi	r5, #0
 8018158:	b21d      	sxthpl	r5, r3
 801815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801815e:	bfd8      	it	le
 8018160:	eeb0 8a69 	vmovle.f32	s16, s19
 8018164:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8018168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801816c:	bf58      	it	pl
 801816e:	eeb0 8a49 	vmovpl.f32	s16, s18
 8018172:	eef4 8ac8 	vcmpe.f32	s17, s16
 8018176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801817a:	bf54      	ite	pl
 801817c:	eeb0 0a68 	vmovpl.f32	s0, s17
 8018180:	eeb0 0a48 	vmovmi.f32	s0, s16
 8018184:	f013 fc74 	bl	802ba70 <ceilf>
 8018188:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801818c:	803e      	strh	r6, [r7, #0]
 801818e:	ee07 3a90 	vmov	s15, r3
 8018192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018196:	807d      	strh	r5, [r7, #2]
 8018198:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a0:	bfd8      	it	le
 80181a2:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 80181a6:	eba8 0606 	sub.w	r6, r8, r6
 80181aa:	bfdc      	itt	le
 80181ac:	ee10 3a10 	vmovle	r3, s0
 80181b0:	b21b      	sxthle	r3, r3
 80181b2:	1b5d      	subs	r5, r3, r5
 80181b4:	80be      	strh	r6, [r7, #4]
 80181b6:	80fd      	strh	r5, [r7, #6]
 80181b8:	ecbd 8b04 	vpop	{d8-d9}
 80181bc:	4638      	mov	r0, r7
 80181be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080181c2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 80181c2:	b510      	push	{r4, lr}
 80181c4:	ed2d 8b04 	vpush	{d8-d9}
 80181c8:	4604      	mov	r4, r0
 80181ca:	b084      	sub	sp, #16
 80181cc:	4601      	mov	r1, r0
 80181ce:	4668      	mov	r0, sp
 80181d0:	eeb0 8a40 	vmov.f32	s16, s0
 80181d4:	eef0 8a60 	vmov.f32	s17, s1
 80181d8:	eeb0 9a41 	vmov.f32	s18, s2
 80181dc:	f7ff ff30 	bl	8018040 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80181e0:	6823      	ldr	r3, [r4, #0]
 80181e2:	4669      	mov	r1, sp
 80181e4:	4620      	mov	r0, r4
 80181e6:	691b      	ldr	r3, [r3, #16]
 80181e8:	4798      	blx	r3
 80181ea:	6823      	ldr	r3, [r4, #0]
 80181ec:	eeb0 1a49 	vmov.f32	s2, s18
 80181f0:	eef0 0a68 	vmov.f32	s1, s17
 80181f4:	eeb0 0a48 	vmov.f32	s0, s16
 80181f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80181fa:	4620      	mov	r0, r4
 80181fc:	4798      	blx	r3
 80181fe:	4621      	mov	r1, r4
 8018200:	a802      	add	r0, sp, #8
 8018202:	f7ff ff1d 	bl	8018040 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8018206:	6823      	ldr	r3, [r4, #0]
 8018208:	a902      	add	r1, sp, #8
 801820a:	691b      	ldr	r3, [r3, #16]
 801820c:	4620      	mov	r0, r4
 801820e:	4798      	blx	r3
 8018210:	b004      	add	sp, #16
 8018212:	ecbd 8b04 	vpop	{d8-d9}
 8018216:	bd10      	pop	{r4, pc}

08018218 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8018218:	b510      	push	{r4, lr}
 801821a:	ed2d 8b02 	vpush	{d8}
 801821e:	4604      	mov	r4, r0
 8018220:	b084      	sub	sp, #16
 8018222:	4601      	mov	r1, r0
 8018224:	4668      	mov	r0, sp
 8018226:	eeb0 8a40 	vmov.f32	s16, s0
 801822a:	f7ff ff09 	bl	8018040 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801822e:	6823      	ldr	r3, [r4, #0]
 8018230:	4669      	mov	r1, sp
 8018232:	4620      	mov	r0, r4
 8018234:	691b      	ldr	r3, [r3, #16]
 8018236:	4798      	blx	r3
 8018238:	6823      	ldr	r3, [r4, #0]
 801823a:	eeb0 0a48 	vmov.f32	s0, s16
 801823e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018242:	4620      	mov	r0, r4
 8018244:	4798      	blx	r3
 8018246:	4621      	mov	r1, r4
 8018248:	a802      	add	r0, sp, #8
 801824a:	f7ff fef9 	bl	8018040 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	a902      	add	r1, sp, #8
 8018252:	691b      	ldr	r3, [r3, #16]
 8018254:	4620      	mov	r0, r4
 8018256:	4798      	blx	r3
 8018258:	b004      	add	sp, #16
 801825a:	ecbd 8b02 	vpop	{d8}
 801825e:	bd10      	pop	{r4, pc}

08018260 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8018260:	4603      	mov	r3, r0
 8018262:	3026      	adds	r0, #38	; 0x26
 8018264:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018268:	b90b      	cbnz	r3, 801826e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801826a:	f003 bd2c 	b.w	801bcc6 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801826e:	f003 bd3a 	b.w	801bce6 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08018274 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8018274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018278:	ed2d 8b04 	vpush	{d8-d9}
 801827c:	4604      	mov	r4, r0
 801827e:	469b      	mov	fp, r3
 8018280:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8018284:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018288:	f9b1 6000 	ldrsh.w	r6, [r1]
 801828c:	8888      	ldrh	r0, [r1, #4]
 801828e:	b0b3      	sub	sp, #204	; 0xcc
 8018290:	4430      	add	r0, r6
 8018292:	b280      	uxth	r0, r0
 8018294:	9206      	str	r2, [sp, #24]
 8018296:	fa0f fe80 	sxth.w	lr, r0
 801829a:	2200      	movs	r2, #0
 801829c:	4596      	cmp	lr, r2
 801829e:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 80182a2:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 80182a6:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 80182aa:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 80182ac:	9211      	str	r2, [sp, #68]	; 0x44
 80182ae:	f340 8129 	ble.w	8018504 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80182b2:	45b4      	cmp	ip, r6
 80182b4:	f340 8126 	ble.w	8018504 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80182b8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80182bc:	88ca      	ldrh	r2, [r1, #6]
 80182be:	442a      	add	r2, r5
 80182c0:	b292      	uxth	r2, r2
 80182c2:	b211      	sxth	r1, r2
 80182c4:	2900      	cmp	r1, #0
 80182c6:	f340 811d 	ble.w	8018504 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80182ca:	42ab      	cmp	r3, r5
 80182cc:	f340 811a 	ble.w	8018504 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80182d0:	45f4      	cmp	ip, lr
 80182d2:	bfb8      	it	lt
 80182d4:	fa1f f08c 	uxthlt.w	r0, ip
 80182d8:	428b      	cmp	r3, r1
 80182da:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80182de:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80182e2:	bfb8      	it	lt
 80182e4:	b29a      	uxthlt	r2, r3
 80182e6:	1b80      	subs	r0, r0, r6
 80182e8:	1b52      	subs	r2, r2, r5
 80182ea:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80182ee:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 80182f2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80182f6:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80182fa:	ab11      	add	r3, sp, #68	; 0x44
 80182fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018300:	6822      	ldr	r2, [r4, #0]
 8018302:	9307      	str	r3, [sp, #28]
 8018304:	ad13      	add	r5, sp, #76	; 0x4c
 8018306:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018308:	e885 0003 	stmia.w	r5, {r0, r1}
 801830c:	4629      	mov	r1, r5
 801830e:	4620      	mov	r0, r4
 8018310:	4790      	blx	r2
 8018312:	4621      	mov	r1, r4
 8018314:	a815      	add	r0, sp, #84	; 0x54
 8018316:	f003 fc30 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801831a:	a815      	add	r0, sp, #84	; 0x54
 801831c:	f002 fa58 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018320:	9b07      	ldr	r3, [sp, #28]
 8018322:	1d26      	adds	r6, r4, #4
 8018324:	4618      	mov	r0, r3
 8018326:	4631      	mov	r1, r6
 8018328:	f002 fa3a 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801832c:	4628      	mov	r0, r5
 801832e:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8018332:	f002 fa4d 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018336:	4628      	mov	r0, r5
 8018338:	f006 f91e 	bl	801e578 <_ZNK8touchgfx6Bitmap7getDataEv>
 801833c:	9007      	str	r0, [sp, #28]
 801833e:	2800      	cmp	r0, #0
 8018340:	f000 80db 	beq.w	80184fa <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8018344:	f8db 2000 	ldr.w	r2, [fp]
 8018348:	9209      	str	r2, [sp, #36]	; 0x24
 801834a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801834e:	920a      	str	r2, [sp, #40]	; 0x28
 8018350:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018354:	920b      	str	r2, [sp, #44]	; 0x2c
 8018356:	f8db 200c 	ldr.w	r2, [fp, #12]
 801835a:	920c      	str	r2, [sp, #48]	; 0x30
 801835c:	f8da 2000 	ldr.w	r2, [sl]
 8018360:	920d      	str	r2, [sp, #52]	; 0x34
 8018362:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018366:	920e      	str	r2, [sp, #56]	; 0x38
 8018368:	f8da 2008 	ldr.w	r2, [sl, #8]
 801836c:	920f      	str	r2, [sp, #60]	; 0x3c
 801836e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8018372:	9210      	str	r2, [sp, #64]	; 0x40
 8018374:	a90d      	add	r1, sp, #52	; 0x34
 8018376:	4632      	mov	r2, r6
 8018378:	a809      	add	r0, sp, #36	; 0x24
 801837a:	f002 f9f5 	bl	801a768 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801837e:	4632      	mov	r2, r6
 8018380:	a90e      	add	r1, sp, #56	; 0x38
 8018382:	a80a      	add	r0, sp, #40	; 0x28
 8018384:	f002 f9f0 	bl	801a768 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018388:	4632      	mov	r2, r6
 801838a:	a90f      	add	r1, sp, #60	; 0x3c
 801838c:	a80b      	add	r0, sp, #44	; 0x2c
 801838e:	f002 f9eb 	bl	801a768 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018392:	4632      	mov	r2, r6
 8018394:	a910      	add	r1, sp, #64	; 0x40
 8018396:	a80c      	add	r0, sp, #48	; 0x30
 8018398:	f002 f9e6 	bl	801a768 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801839c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80183a0:	edd7 4a00 	vldr	s9, [r7]
 80183a4:	edd7 5a01 	vldr	s11, [r7, #4]
 80183a8:	ed98 4a00 	vldr	s8, [r8]
 80183ac:	ed98 5a01 	vldr	s10, [r8, #4]
 80183b0:	ed99 9a00 	vldr	s18, [r9]
 80183b4:	ed99 8a01 	vldr	s16, [r9, #4]
 80183b8:	edd9 8a02 	vldr	s17, [r9, #8]
 80183bc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80183c0:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80183c4:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 80183c8:	eef0 6a67 	vmov.f32	s13, s15
 80183cc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80183d0:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 80183d4:	eeb0 7a67 	vmov.f32	s14, s15
 80183d8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80183dc:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 80183e0:	eeb0 6a67 	vmov.f32	s12, s15
 80183e4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80183e8:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80183ec:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 80183f0:	ee16 6a10 	vmov	r6, s12
 80183f4:	eeb0 6a67 	vmov.f32	s12, s15
 80183f8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80183fc:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8018400:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018404:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8018408:	68ff      	ldr	r7, [r7, #12]
 801840a:	9624      	str	r6, [sp, #144]	; 0x90
 801840c:	ee16 0a10 	vmov	r0, s12
 8018410:	eeb0 6a67 	vmov.f32	s12, s15
 8018414:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018418:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801841c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8018420:	ee16 1a10 	vmov	r1, s12
 8018424:	eeb0 6a67 	vmov.f32	s12, s15
 8018428:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801842c:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8018430:	ee16 2a10 	vmov	r2, s12
 8018434:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8018438:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801843c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8018440:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018444:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018448:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801844c:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8018450:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8018454:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8018458:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 801845c:	922d      	str	r2, [sp, #180]	; 0xb4
 801845e:	4a2b      	ldr	r2, [pc, #172]	; (801850c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8018460:	9b06      	ldr	r3, [sp, #24]
 8018462:	8812      	ldrh	r2, [r2, #0]
 8018464:	9317      	str	r3, [sp, #92]	; 0x5c
 8018466:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801846a:	9b07      	ldr	r3, [sp, #28]
 801846c:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8018470:	4628      	mov	r0, r5
 8018472:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8018476:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801847a:	9218      	str	r2, [sp, #96]	; 0x60
 801847c:	9319      	str	r3, [sp, #100]	; 0x64
 801847e:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8018482:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8018486:	9731      	str	r7, [sp, #196]	; 0xc4
 8018488:	f006 f8a8 	bl	801e5dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801848c:	901a      	str	r0, [sp, #104]	; 0x68
 801848e:	4628      	mov	r0, r5
 8018490:	f005 ff6a 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018494:	901b      	str	r0, [sp, #108]	; 0x6c
 8018496:	4628      	mov	r0, r5
 8018498:	f005 ffa0 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801849c:	901c      	str	r0, [sp, #112]	; 0x70
 801849e:	4628      	mov	r0, r5
 80184a0:	f005 ff62 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80184a4:	eeb4 9a48 	vcmp.f32	s18, s16
 80184a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ac:	901d      	str	r0, [sp, #116]	; 0x74
 80184ae:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 80184b2:	d107      	bne.n	80184c4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 80184b4:	eeb4 8a68 	vcmp.f32	s16, s17
 80184b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184c0:	bf08      	it	eq
 80184c2:	461e      	moveq	r6, r3
 80184c4:	4b12      	ldr	r3, [pc, #72]	; (8018510 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80184cc:	b10a      	cbz	r2, 80184d2 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 80184ce:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80184d0:	b905      	cbnz	r5, 80184d4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 80184d2:	689d      	ldr	r5, [r3, #8]
 80184d4:	682b      	ldr	r3, [r5, #0]
 80184d6:	4620      	mov	r0, r4
 80184d8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80184da:	f7ff fec1 	bl	8018260 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 80184de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80184e2:	9604      	str	r6, [sp, #16]
 80184e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80184e8:	ab13      	add	r3, sp, #76	; 0x4c
 80184ea:	9301      	str	r3, [sp, #4]
 80184ec:	ab15      	add	r3, sp, #84	; 0x54
 80184ee:	9300      	str	r3, [sp, #0]
 80184f0:	aa1e      	add	r2, sp, #120	; 0x78
 80184f2:	ab19      	add	r3, sp, #100	; 0x64
 80184f4:	a917      	add	r1, sp, #92	; 0x5c
 80184f6:	4628      	mov	r0, r5
 80184f8:	47b8      	blx	r7
 80184fa:	b033      	add	sp, #204	; 0xcc
 80184fc:	ecbd 8b04 	vpop	{d8-d9}
 8018500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018504:	2300      	movs	r3, #0
 8018506:	9312      	str	r3, [sp, #72]	; 0x48
 8018508:	e6f7      	b.n	80182fa <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 801850a:	bf00      	nop
 801850c:	200066fa 	.word	0x200066fa
 8018510:	20006700 	.word	0x20006700

08018514 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8018514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018518:	ed2d 8b02 	vpush	{d8}
 801851c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018520:	b098      	sub	sp, #96	; 0x60
 8018522:	4604      	mov	r4, r0
 8018524:	4688      	mov	r8, r1
 8018526:	2b00      	cmp	r3, #0
 8018528:	d077      	beq.n	801861a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 801852a:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801852e:	4628      	mov	r0, r5
 8018530:	f005 ff1a 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018534:	ee07 0a90 	vmov	s15, r0
 8018538:	4628      	mov	r0, r5
 801853a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801853e:	f005 ff4d 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018542:	4b4e      	ldr	r3, [pc, #312]	; (801867c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	ee07 0a90 	vmov	s15, r0
 801854a:	2b01      	cmp	r3, #1
 801854c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8018550:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018554:	d066      	beq.n	8018624 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8018556:	eeb0 6a47 	vmov.f32	s12, s14
 801855a:	ee17 3a10 	vmov	r3, s14
 801855e:	eeb0 4a48 	vmov.f32	s8, s16
 8018562:	eeb0 7a48 	vmov.f32	s14, s16
 8018566:	eef0 4a67 	vmov.f32	s9, s15
 801856a:	eeb0 8a67 	vmov.f32	s16, s15
 801856e:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8018572:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8018576:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 801857a:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 801857e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8018582:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8018586:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8018588:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801858a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801858c:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8018590:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8018594:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8018598:	ee73 1a65 	vsub.f32	s3, s6, s11
 801859c:	ee72 6ac5 	vsub.f32	s13, s5, s10
 80185a0:	ee32 1a45 	vsub.f32	s2, s4, s10
 80185a4:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 80185a8:	ee73 1ae5 	vsub.f32	s3, s7, s11
 80185ac:	eee1 6a21 	vfma.f32	s13, s2, s3
 80185b0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80185b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b8:	dd3d      	ble.n	8018636 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 80185ba:	ed8d 5a04 	vstr	s10, [sp, #16]
 80185be:	ed8d 2a05 	vstr	s4, [sp, #20]
 80185c2:	edcd 2a06 	vstr	s5, [sp, #24]
 80185c6:	f8cd c01c 	str.w	ip, [sp, #28]
 80185ca:	edcd 5a08 	vstr	s11, [sp, #32]
 80185ce:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 80185d2:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 80185d6:	970b      	str	r7, [sp, #44]	; 0x2c
 80185d8:	960c      	str	r6, [sp, #48]	; 0x30
 80185da:	950d      	str	r5, [sp, #52]	; 0x34
 80185dc:	920e      	str	r2, [sp, #56]	; 0x38
 80185de:	900f      	str	r0, [sp, #60]	; 0x3c
 80185e0:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 80185e4:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 80185e8:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 80185ec:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 80185f0:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 80185f4:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 80185f8:	9316      	str	r3, [sp, #88]	; 0x58
 80185fa:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 80185fe:	ab14      	add	r3, sp, #80	; 0x50
 8018600:	9303      	str	r3, [sp, #12]
 8018602:	ab10      	add	r3, sp, #64	; 0x40
 8018604:	9302      	str	r3, [sp, #8]
 8018606:	ab0c      	add	r3, sp, #48	; 0x30
 8018608:	9301      	str	r3, [sp, #4]
 801860a:	ab08      	add	r3, sp, #32
 801860c:	9300      	str	r3, [sp, #0]
 801860e:	2200      	movs	r2, #0
 8018610:	ab04      	add	r3, sp, #16
 8018612:	4641      	mov	r1, r8
 8018614:	4620      	mov	r0, r4
 8018616:	f7ff fe2d 	bl	8018274 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801861a:	b018      	add	sp, #96	; 0x60
 801861c:	ecbd 8b02 	vpop	{d8}
 8018620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018624:	eeb0 6a48 	vmov.f32	s12, s16
 8018628:	eef0 4a47 	vmov.f32	s9, s14
 801862c:	ee17 3a90 	vmov	r3, s15
 8018630:	eeb0 4a67 	vmov.f32	s8, s15
 8018634:	e79b      	b.n	801856e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8018636:	ed8d 5a05 	vstr	s10, [sp, #20]
 801863a:	ed8d 2a04 	vstr	s4, [sp, #16]
 801863e:	f8cd c018 	str.w	ip, [sp, #24]
 8018642:	edcd 2a07 	vstr	s5, [sp, #28]
 8018646:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801864a:	ed8d 3a08 	vstr	s6, [sp, #32]
 801864e:	970a      	str	r7, [sp, #40]	; 0x28
 8018650:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8018654:	960d      	str	r6, [sp, #52]	; 0x34
 8018656:	950c      	str	r5, [sp, #48]	; 0x30
 8018658:	900e      	str	r0, [sp, #56]	; 0x38
 801865a:	920f      	str	r2, [sp, #60]	; 0x3c
 801865c:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8018660:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8018664:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8018668:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801866c:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8018670:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8018674:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8018678:	9317      	str	r3, [sp, #92]	; 0x5c
 801867a:	e7c0      	b.n	80185fe <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 801867c:	200066f8 	.word	0x200066f8

08018680 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8018680:	2200      	movs	r2, #0
 8018682:	8002      	strh	r2, [r0, #0]
 8018684:	8042      	strh	r2, [r0, #2]
 8018686:	8082      	strh	r2, [r0, #4]
 8018688:	80c2      	strh	r2, [r0, #6]
 801868a:	4770      	bx	lr

0801868c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801868c:	b570      	push	{r4, r5, r6, lr}
 801868e:	6803      	ldr	r3, [r0, #0]
 8018690:	4604      	mov	r4, r0
 8018692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018694:	4615      	mov	r5, r2
 8018696:	4798      	blx	r3
 8018698:	6823      	ldr	r3, [r4, #0]
 801869a:	4629      	mov	r1, r5
 801869c:	4620      	mov	r0, r4
 801869e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186a4:	4718      	bx	r3
	...

080186a8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80186a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80186aa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80186ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186b0:	4299      	cmp	r1, r3
 80186b2:	d029      	beq.n	8018708 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80186b4:	4b15      	ldr	r3, [pc, #84]	; (801870c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	b92b      	cbnz	r3, 80186c6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80186ba:	4b15      	ldr	r3, [pc, #84]	; (8018710 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80186bc:	4a15      	ldr	r2, [pc, #84]	; (8018714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80186be:	21ae      	movs	r1, #174	; 0xae
 80186c0:	4815      	ldr	r0, [pc, #84]	; (8018718 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80186c2:	f013 ffcb 	bl	802c65c <__assert_func>
 80186c6:	4a15      	ldr	r2, [pc, #84]	; (801871c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80186c8:	8812      	ldrh	r2, [r2, #0]
 80186ca:	428a      	cmp	r2, r1
 80186cc:	d803      	bhi.n	80186d6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80186ce:	4b14      	ldr	r3, [pc, #80]	; (8018720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80186d0:	4a10      	ldr	r2, [pc, #64]	; (8018714 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80186d2:	21af      	movs	r1, #175	; 0xaf
 80186d4:	e7f4      	b.n	80186c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80186d6:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80186da:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80186de:	4b11      	ldr	r3, [pc, #68]	; (8018724 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80186e0:	7854      	ldrb	r4, [r2, #1]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80186e8:	682b      	ldr	r3, [r5, #0]
 80186ea:	69de      	ldr	r6, [r3, #28]
 80186ec:	4b0e      	ldr	r3, [pc, #56]	; (8018728 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80186ee:	6818      	ldr	r0, [r3, #0]
 80186f0:	f7fa fcfa 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80186f4:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80186f8:	2300      	movs	r3, #0
 80186fa:	4602      	mov	r2, r0
 80186fc:	9300      	str	r3, [sp, #0]
 80186fe:	4621      	mov	r1, r4
 8018700:	4628      	mov	r0, r5
 8018702:	47b0      	blx	r6
 8018704:	b002      	add	sp, #8
 8018706:	bd70      	pop	{r4, r5, r6, pc}
 8018708:	2000      	movs	r0, #0
 801870a:	e7fb      	b.n	8018704 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801870c:	20006750 	.word	0x20006750
 8018710:	080302f0 	.word	0x080302f0
 8018714:	08030428 	.word	0x08030428
 8018718:	08030332 	.word	0x08030332
 801871c:	20006754 	.word	0x20006754
 8018720:	0803035b 	.word	0x0803035b
 8018724:	20006758 	.word	0x20006758
 8018728:	2000675c 	.word	0x2000675c

0801872c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801872c:	b570      	push	{r4, r5, r6, lr}
 801872e:	6803      	ldr	r3, [r0, #0]
 8018730:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018732:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8018734:	4b11      	ldr	r3, [pc, #68]	; (801877c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	4604      	mov	r4, r0
 801873a:	b28d      	uxth	r5, r1
 801873c:	b92b      	cbnz	r3, 801874a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801873e:	4b10      	ldr	r3, [pc, #64]	; (8018780 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8018740:	4a10      	ldr	r2, [pc, #64]	; (8018784 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018742:	21ae      	movs	r1, #174	; 0xae
 8018744:	4810      	ldr	r0, [pc, #64]	; (8018788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8018746:	f013 ff89 	bl	802c65c <__assert_func>
 801874a:	4910      	ldr	r1, [pc, #64]	; (801878c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801874c:	8809      	ldrh	r1, [r1, #0]
 801874e:	4291      	cmp	r1, r2
 8018750:	d803      	bhi.n	801875a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8018752:	4b0f      	ldr	r3, [pc, #60]	; (8018790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8018754:	4a0b      	ldr	r2, [pc, #44]	; (8018784 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018756:	21af      	movs	r1, #175	; 0xaf
 8018758:	e7f4      	b.n	8018744 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801875a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801875e:	4b0d      	ldr	r3, [pc, #52]	; (8018794 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018766:	6803      	ldr	r3, [r0, #0]
 8018768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801876a:	4798      	blx	r3
 801876c:	1a29      	subs	r1, r5, r0
 801876e:	4633      	mov	r3, r6
 8018770:	4620      	mov	r0, r4
 8018772:	b209      	sxth	r1, r1
 8018774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018778:	4718      	bx	r3
 801877a:	bf00      	nop
 801877c:	20006750 	.word	0x20006750
 8018780:	080302f0 	.word	0x080302f0
 8018784:	08030428 	.word	0x08030428
 8018788:	08030332 	.word	0x08030332
 801878c:	20006754 	.word	0x20006754
 8018790:	0803035b 	.word	0x0803035b
 8018794:	20006758 	.word	0x20006758

08018798 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801879c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801879e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187a2:	4293      	cmp	r3, r2
 80187a4:	b08c      	sub	sp, #48	; 0x30
 80187a6:	4604      	mov	r4, r0
 80187a8:	4688      	mov	r8, r1
 80187aa:	d05f      	beq.n	801886c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80187ac:	4e31      	ldr	r6, [pc, #196]	; (8018874 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80187ae:	6832      	ldr	r2, [r6, #0]
 80187b0:	b92a      	cbnz	r2, 80187be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80187b2:	4b31      	ldr	r3, [pc, #196]	; (8018878 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80187b4:	4a31      	ldr	r2, [pc, #196]	; (801887c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80187b6:	21ae      	movs	r1, #174	; 0xae
 80187b8:	4831      	ldr	r0, [pc, #196]	; (8018880 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80187ba:	f013 ff4f 	bl	802c65c <__assert_func>
 80187be:	4d31      	ldr	r5, [pc, #196]	; (8018884 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80187c0:	8829      	ldrh	r1, [r5, #0]
 80187c2:	4299      	cmp	r1, r3
 80187c4:	d803      	bhi.n	80187ce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80187c6:	4b30      	ldr	r3, [pc, #192]	; (8018888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80187c8:	4a2c      	ldr	r2, [pc, #176]	; (801887c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80187ca:	21af      	movs	r1, #175	; 0xaf
 80187cc:	e7f4      	b.n	80187b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80187ce:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80187d2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80187d6:	4b2d      	ldr	r3, [pc, #180]	; (801888c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80187de:	2a00      	cmp	r2, #0
 80187e0:	d044      	beq.n	801886c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80187e2:	784b      	ldrb	r3, [r1, #1]
 80187e4:	9207      	str	r2, [sp, #28]
 80187e6:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80187ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80187ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80187f2:	4b27      	ldr	r3, [pc, #156]	; (8018890 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80187f4:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80187fe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018802:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8018806:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801880a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801880e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018810:	f88d a020 	strb.w	sl, [sp, #32]
 8018814:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8018818:	9009      	str	r0, [sp, #36]	; 0x24
 801881a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801881e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018822:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8018826:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801882a:	b10a      	cbz	r2, 8018830 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801882c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801882e:	b907      	cbnz	r7, 8018832 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8018830:	689f      	ldr	r7, [r3, #8]
 8018832:	f10d 0914 	add.w	r9, sp, #20
 8018836:	4621      	mov	r1, r4
 8018838:	4648      	mov	r0, r9
 801883a:	f003 f99e 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801883e:	6833      	ldr	r3, [r6, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d0b6      	beq.n	80187b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8018844:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018846:	882b      	ldrh	r3, [r5, #0]
 8018848:	428b      	cmp	r3, r1
 801884a:	d9bc      	bls.n	80187c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801884c:	4b11      	ldr	r3, [pc, #68]	; (8018894 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801884e:	6818      	ldr	r0, [r3, #0]
 8018850:	f7fa fc4a 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8018854:	2300      	movs	r3, #0
 8018856:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801885a:	ab07      	add	r3, sp, #28
 801885c:	9001      	str	r0, [sp, #4]
 801885e:	9300      	str	r3, [sp, #0]
 8018860:	e899 0006 	ldmia.w	r9, {r1, r2}
 8018864:	4643      	mov	r3, r8
 8018866:	4638      	mov	r0, r7
 8018868:	f7fa fbcf 	bl	801300a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801886c:	b00c      	add	sp, #48	; 0x30
 801886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018872:	bf00      	nop
 8018874:	20006750 	.word	0x20006750
 8018878:	080302f0 	.word	0x080302f0
 801887c:	08030428 	.word	0x08030428
 8018880:	08030332 	.word	0x08030332
 8018884:	20006754 	.word	0x20006754
 8018888:	0803035b 	.word	0x0803035b
 801888c:	20006758 	.word	0x20006758
 8018890:	20006700 	.word	0x20006700
 8018894:	2000675c 	.word	0x2000675c

08018898 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018898:	b40e      	push	{r1, r2, r3}
 801889a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80188a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188a4:	4293      	cmp	r3, r2
 80188a6:	b09a      	sub	sp, #104	; 0x68
 80188a8:	4605      	mov	r5, r0
 80188aa:	d067      	beq.n	801897c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 80188ac:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8018990 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 80188b0:	aa24      	add	r2, sp, #144	; 0x90
 80188b2:	9202      	str	r2, [sp, #8]
 80188b4:	f8da 2000 	ldr.w	r2, [sl]
 80188b8:	b92a      	cbnz	r2, 80188c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80188ba:	4b31      	ldr	r3, [pc, #196]	; (8018980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 80188bc:	4a31      	ldr	r2, [pc, #196]	; (8018984 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80188be:	21ae      	movs	r1, #174	; 0xae
 80188c0:	4831      	ldr	r0, [pc, #196]	; (8018988 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80188c2:	f013 fecb 	bl	802c65c <__assert_func>
 80188c6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8018994 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 80188ca:	f8b8 1000 	ldrh.w	r1, [r8]
 80188ce:	4299      	cmp	r1, r3
 80188d0:	d803      	bhi.n	80188da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80188d2:	4b2e      	ldr	r3, [pc, #184]	; (801898c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80188d4:	4a2b      	ldr	r2, [pc, #172]	; (8018984 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80188d6:	21af      	movs	r1, #175	; 0xaf
 80188d8:	e7f2      	b.n	80188c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80188da:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8018998 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80188de:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80188e2:	f8d9 3000 	ldr.w	r3, [r9]
 80188e6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80188ea:	6823      	ldr	r3, [r4, #0]
 80188ec:	4620      	mov	r0, r4
 80188ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188f0:	4798      	blx	r3
 80188f2:	4607      	mov	r7, r0
 80188f4:	b206      	sxth	r6, r0
 80188f6:	a803      	add	r0, sp, #12
 80188f8:	f003 fe2e 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 80188fc:	6823      	ldr	r3, [r4, #0]
 80188fe:	4620      	mov	r0, r4
 8018900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018902:	4798      	blx	r3
 8018904:	6823      	ldr	r3, [r4, #0]
 8018906:	4683      	mov	fp, r0
 8018908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801890a:	4620      	mov	r0, r4
 801890c:	4798      	blx	r3
 801890e:	465b      	mov	r3, fp
 8018910:	9000      	str	r0, [sp, #0]
 8018912:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018914:	9a02      	ldr	r2, [sp, #8]
 8018916:	a803      	add	r0, sp, #12
 8018918:	f003 fe6b 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801891c:	f8da 3000 	ldr.w	r3, [sl]
 8018920:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 8018924:	2b00      	cmp	r3, #0
 8018926:	d0c8      	beq.n	80188ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8018928:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801892a:	f8b8 0000 	ldrh.w	r0, [r8]
 801892e:	4290      	cmp	r0, r2
 8018930:	d9cf      	bls.n	80188d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8018932:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 8018936:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801893a:	7862      	ldrb	r2, [r4, #1]
 801893c:	f8d9 3000 	ldr.w	r3, [r9]
 8018940:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8018944:	9400      	str	r4, [sp, #0]
 8018946:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801894a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801894e:	a803      	add	r0, sp, #12
 8018950:	f001 fc14 	bl	801a17c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018954:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8018958:	18b1      	adds	r1, r6, r2
 801895a:	2900      	cmp	r1, #0
 801895c:	b203      	sxth	r3, r0
 801895e:	dd0b      	ble.n	8018978 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8018960:	3b01      	subs	r3, #1
 8018962:	fb13 f302 	smulbb	r3, r3, r2
 8018966:	fb17 3300 	smlabb	r3, r7, r0, r3
 801896a:	b21e      	sxth	r6, r3
 801896c:	4630      	mov	r0, r6
 801896e:	b01a      	add	sp, #104	; 0x68
 8018970:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018974:	b003      	add	sp, #12
 8018976:	4770      	bx	lr
 8018978:	2b00      	cmp	r3, #0
 801897a:	dcf7      	bgt.n	801896c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801897c:	2600      	movs	r6, #0
 801897e:	e7f5      	b.n	801896c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8018980:	080302f0 	.word	0x080302f0
 8018984:	08030428 	.word	0x08030428
 8018988:	08030332 	.word	0x08030332
 801898c:	0803035b 	.word	0x0803035b
 8018990:	20006750 	.word	0x20006750
 8018994:	20006754 	.word	0x20006754
 8018998:	20006758 	.word	0x20006758

0801899c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801899c:	b570      	push	{r4, r5, r6, lr}
 801899e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80189a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189a4:	4299      	cmp	r1, r3
 80189a6:	4604      	mov	r4, r0
 80189a8:	d01e      	beq.n	80189e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80189aa:	6803      	ldr	r3, [r0, #0]
 80189ac:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80189ae:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	b92b      	cbnz	r3, 80189c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80189b4:	4b0e      	ldr	r3, [pc, #56]	; (80189f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80189b6:	4a0f      	ldr	r2, [pc, #60]	; (80189f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80189b8:	21ae      	movs	r1, #174	; 0xae
 80189ba:	480f      	ldr	r0, [pc, #60]	; (80189f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80189bc:	f013 fe4e 	bl	802c65c <__assert_func>
 80189c0:	4b0e      	ldr	r3, [pc, #56]	; (80189fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80189c2:	881b      	ldrh	r3, [r3, #0]
 80189c4:	428b      	cmp	r3, r1
 80189c6:	d803      	bhi.n	80189d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80189c8:	4b0d      	ldr	r3, [pc, #52]	; (8018a00 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80189ca:	4a0a      	ldr	r2, [pc, #40]	; (80189f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80189cc:	21af      	movs	r1, #175	; 0xaf
 80189ce:	e7f4      	b.n	80189ba <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80189d0:	4b0c      	ldr	r3, [pc, #48]	; (8018a04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80189d2:	6818      	ldr	r0, [r3, #0]
 80189d4:	f7fa fb88 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 80189d8:	2300      	movs	r3, #0
 80189da:	4601      	mov	r1, r0
 80189dc:	46ac      	mov	ip, r5
 80189de:	4620      	mov	r0, r4
 80189e0:	461a      	mov	r2, r3
 80189e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189e6:	4760      	bx	ip
 80189e8:	2000      	movs	r0, #0
 80189ea:	bd70      	pop	{r4, r5, r6, pc}
 80189ec:	20006750 	.word	0x20006750
 80189f0:	080302f0 	.word	0x080302f0
 80189f4:	08030428 	.word	0x08030428
 80189f8:	08030332 	.word	0x08030332
 80189fc:	20006754 	.word	0x20006754
 8018a00:	0803035b 	.word	0x0803035b
 8018a04:	2000675c 	.word	0x2000675c

08018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018a08:	b538      	push	{r3, r4, r5, lr}
 8018a0a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a10:	429a      	cmp	r2, r3
 8018a12:	4604      	mov	r4, r0
 8018a14:	d014      	beq.n	8018a40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018a16:	6803      	ldr	r3, [r0, #0]
 8018a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018a1a:	4798      	blx	r3
 8018a1c:	6823      	ldr	r3, [r4, #0]
 8018a1e:	4605      	mov	r5, r0
 8018a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a22:	4620      	mov	r0, r4
 8018a24:	4798      	blx	r3
 8018a26:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018a2a:	b22d      	sxth	r5, r5
 8018a2c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018a30:	4601      	mov	r1, r0
 8018a32:	bf06      	itte	eq
 8018a34:	4602      	moveq	r2, r0
 8018a36:	4629      	moveq	r1, r5
 8018a38:	462a      	movne	r2, r5
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f7f6 febc 	bl	800f7b8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018a40:	bd38      	pop	{r3, r4, r5, pc}

08018a42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018a42:	888a      	ldrh	r2, [r1, #4]
 8018a44:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018a46:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018a4a:	b922      	cbnz	r2, 8018a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018a4c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018a50:	b90b      	cbnz	r3, 8018a56 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018a52:	f7ff bfd9 	b.w	8018a08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018a56:	4770      	bx	lr

08018a58 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 8018a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a5c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a62:	429a      	cmp	r2, r3
 8018a64:	4604      	mov	r4, r0
 8018a66:	d054      	beq.n	8018b12 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xba>
 8018a68:	4b42      	ldr	r3, [pc, #264]	; (8018b74 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x11c>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	b92b      	cbnz	r3, 8018a7a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x22>
 8018a6e:	4b42      	ldr	r3, [pc, #264]	; (8018b78 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x120>)
 8018a70:	4a42      	ldr	r2, [pc, #264]	; (8018b7c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 8018a72:	21ae      	movs	r1, #174	; 0xae
 8018a74:	4842      	ldr	r0, [pc, #264]	; (8018b80 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x128>)
 8018a76:	f013 fdf1 	bl	802c65c <__assert_func>
 8018a7a:	4942      	ldr	r1, [pc, #264]	; (8018b84 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x12c>)
 8018a7c:	8809      	ldrh	r1, [r1, #0]
 8018a7e:	4291      	cmp	r1, r2
 8018a80:	d803      	bhi.n	8018a8a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x32>
 8018a82:	4b41      	ldr	r3, [pc, #260]	; (8018b88 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x130>)
 8018a84:	4a3d      	ldr	r2, [pc, #244]	; (8018b7c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 8018a86:	21af      	movs	r1, #175	; 0xaf
 8018a88:	e7f4      	b.n	8018a74 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x1c>
 8018a8a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018a8e:	f893 9001 	ldrb.w	r9, [r3, #1]
 8018a92:	6803      	ldr	r3, [r0, #0]
 8018a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018a96:	4798      	blx	r3
 8018a98:	6823      	ldr	r3, [r4, #0]
 8018a9a:	4680      	mov	r8, r0
 8018a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	4798      	blx	r3
 8018aa2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018aa6:	f009 0903 	and.w	r9, r9, #3
 8018aaa:	4605      	mov	r5, r0
 8018aac:	b287      	uxth	r7, r0
 8018aae:	fa0f f688 	sxth.w	r6, r8
 8018ab2:	b1cb      	cbz	r3, 8018ae8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 8018ab4:	2b02      	cmp	r3, #2
 8018ab6:	d12e      	bne.n	8018b16 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 8018ab8:	f1b9 0f02 	cmp.w	r9, #2
 8018abc:	d017      	beq.n	8018aee <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 8018abe:	8920      	ldrh	r0, [r4, #8]
 8018ac0:	88a1      	ldrh	r1, [r4, #4]
 8018ac2:	6822      	ldr	r2, [r4, #0]
 8018ac4:	f1b9 0f01 	cmp.w	r9, #1
 8018ac8:	bf13      	iteet	ne
 8018aca:	1840      	addne	r0, r0, r1
 8018acc:	2302      	moveq	r3, #2
 8018ace:	eba0 0008 	subeq.w	r0, r0, r8
 8018ad2:	eba0 0108 	subne.w	r1, r0, r8
 8018ad6:	bf04      	itt	eq
 8018ad8:	fb90 f3f3 	sdiveq	r3, r0, r3
 8018adc:	18c9      	addeq	r1, r1, r3
 8018ade:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8018ae0:	b209      	sxth	r1, r1
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	4790      	blx	r2
 8018ae6:	e002      	b.n	8018aee <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 8018ae8:	f1b9 0f00 	cmp.w	r9, #0
 8018aec:	d1e7      	bne.n	8018abe <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x66>
 8018aee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018af2:	2b02      	cmp	r3, #2
 8018af4:	d108      	bne.n	8018b08 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb0>
 8018af6:	88e3      	ldrh	r3, [r4, #6]
 8018af8:	8961      	ldrh	r1, [r4, #10]
 8018afa:	4419      	add	r1, r3
 8018afc:	6823      	ldr	r3, [r4, #0]
 8018afe:	1bc9      	subs	r1, r1, r7
 8018b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b02:	b209      	sxth	r1, r1
 8018b04:	4620      	mov	r0, r4
 8018b06:	4798      	blx	r3
 8018b08:	462a      	mov	r2, r5
 8018b0a:	4631      	mov	r1, r6
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	f7f6 fe53 	bl	800f7b8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b16:	2b01      	cmp	r3, #1
 8018b18:	d112      	bne.n	8018b40 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe8>
 8018b1a:	f1b9 0f00 	cmp.w	r9, #0
 8018b1e:	d114      	bne.n	8018b4a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 8018b20:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018b24:	2b01      	cmp	r3, #1
 8018b26:	d108      	bne.n	8018b3a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe2>
 8018b28:	88a3      	ldrh	r3, [r4, #4]
 8018b2a:	8921      	ldrh	r1, [r4, #8]
 8018b2c:	4419      	add	r1, r3
 8018b2e:	6823      	ldr	r3, [r4, #0]
 8018b30:	1bc9      	subs	r1, r1, r7
 8018b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b34:	b209      	sxth	r1, r1
 8018b36:	4620      	mov	r0, r4
 8018b38:	4798      	blx	r3
 8018b3a:	4632      	mov	r2, r6
 8018b3c:	4629      	mov	r1, r5
 8018b3e:	e7e5      	b.n	8018b0c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb4>
 8018b40:	2b03      	cmp	r3, #3
 8018b42:	d102      	bne.n	8018b4a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 8018b44:	f1b9 0f02 	cmp.w	r9, #2
 8018b48:	d0ea      	beq.n	8018b20 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 8018b4a:	8963      	ldrh	r3, [r4, #10]
 8018b4c:	88e1      	ldrh	r1, [r4, #6]
 8018b4e:	6822      	ldr	r2, [r4, #0]
 8018b50:	f1b9 0f01 	cmp.w	r9, #1
 8018b54:	bf0b      	itete	eq
 8018b56:	2002      	moveq	r0, #2
 8018b58:	185b      	addne	r3, r3, r1
 8018b5a:	eba3 0308 	subeq.w	r3, r3, r8
 8018b5e:	eba3 0108 	subne.w	r1, r3, r8
 8018b62:	bf04      	itt	eq
 8018b64:	fb93 f0f0 	sdiveq	r0, r3, r0
 8018b68:	1809      	addeq	r1, r1, r0
 8018b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8018b6c:	b209      	sxth	r1, r1
 8018b6e:	4620      	mov	r0, r4
 8018b70:	4790      	blx	r2
 8018b72:	e7d5      	b.n	8018b20 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 8018b74:	20006750 	.word	0x20006750
 8018b78:	080302f0 	.word	0x080302f0
 8018b7c:	08030428 	.word	0x08030428
 8018b80:	08030332 	.word	0x08030332
 8018b84:	20006754 	.word	0x20006754
 8018b88:	0803035b 	.word	0x0803035b

08018b8c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	8083      	strh	r3, [r0, #4]
 8018b90:	80c3      	strh	r3, [r0, #6]
 8018b92:	8003      	strh	r3, [r0, #0]
 8018b94:	8043      	strh	r3, [r0, #2]
 8018b96:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018b9a:	2bff      	cmp	r3, #255	; 0xff
 8018b9c:	bf01      	itttt	eq
 8018b9e:	890b      	ldrheq	r3, [r1, #8]
 8018ba0:	8083      	strheq	r3, [r0, #4]
 8018ba2:	894b      	ldrheq	r3, [r1, #10]
 8018ba4:	80c3      	strheq	r3, [r0, #6]
 8018ba6:	4770      	bx	lr

08018ba8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018baa:	4604      	mov	r4, r0
 8018bac:	6808      	ldr	r0, [r1, #0]
 8018bae:	6849      	ldr	r1, [r1, #4]
 8018bb0:	466b      	mov	r3, sp
 8018bb2:	c303      	stmia	r3!, {r0, r1}
 8018bb4:	6823      	ldr	r3, [r4, #0]
 8018bb6:	4669      	mov	r1, sp
 8018bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bba:	4620      	mov	r0, r4
 8018bbc:	4798      	blx	r3
 8018bbe:	4b08      	ldr	r3, [pc, #32]	; (8018be0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018bc6:	b10a      	cbz	r2, 8018bcc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018bc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018bca:	b900      	cbnz	r0, 8018bce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018bcc:	6898      	ldr	r0, [r3, #8]
 8018bce:	6803      	ldr	r3, [r0, #0]
 8018bd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018bd2:	699d      	ldr	r5, [r3, #24]
 8018bd4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018bd8:	4669      	mov	r1, sp
 8018bda:	47a8      	blx	r5
 8018bdc:	b003      	add	sp, #12
 8018bde:	bd30      	pop	{r4, r5, pc}
 8018be0:	20006700 	.word	0x20006700

08018be4 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 8018be4:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 8018be8:	600b      	str	r3, [r1, #0]
 8018bea:	f9b0 314e 	ldrsh.w	r3, [r0, #334]	; 0x14e
 8018bee:	6013      	str	r3, [r2, #0]
 8018bf0:	4770      	bx	lr

08018bf2 <_ZN8touchgfx5Gauge8setWidthEs>:
 8018bf2:	8101      	strh	r1, [r0, #8]
 8018bf4:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
 8018bf8:	f8a0 115c 	strh.w	r1, [r0, #348]	; 0x15c
 8018bfc:	4770      	bx	lr

08018bfe <_ZN8touchgfx5Gauge9setHeightEs>:
 8018bfe:	8141      	strh	r1, [r0, #10]
 8018c00:	f8a0 10ba 	strh.w	r1, [r0, #186]	; 0xba
 8018c04:	f8a0 115e 	strh.w	r1, [r0, #350]	; 0x15e
 8018c08:	4770      	bx	lr

08018c0a <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8018c0a:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8018c0e:	4770      	bx	lr

08018c10 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8018c10:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8018c14:	4770      	bx	lr

08018c16 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 8018c16:	4770      	bx	lr

08018c18 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8018c18:	b538      	push	{r3, r4, r5, lr}
 8018c1a:	4604      	mov	r4, r0
 8018c1c:	460d      	mov	r5, r1
 8018c1e:	f7fc ff68 	bl	8015af2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8018c22:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 8018c26:	f884 5182 	strb.w	r5, [r4, #386]	; 0x182
 8018c2a:	bd38      	pop	{r3, r4, r5, pc}

08018c2c <_ZN8touchgfx5GaugeC1Ev>:
 8018c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c2e:	4604      	mov	r4, r0
 8018c30:	4626      	mov	r6, r4
 8018c32:	f7fd f87b 	bl	8015d2c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8018c36:	4b18      	ldr	r3, [pc, #96]	; (8018c98 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 8018c38:	f846 3bb0 	str.w	r3, [r6], #176
 8018c3c:	a902      	add	r1, sp, #8
 8018c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c42:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8018c46:	4630      	mov	r0, r6
 8018c48:	f7ff f81c 	bl	8017c84 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 8018c4c:	2500      	movs	r5, #0
 8018c4e:	2301      	movs	r3, #1
 8018c50:	f504 77aa 	add.w	r7, r4, #340	; 0x154
 8018c54:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
 8018c58:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
 8018c5c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8018c60:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8018c64:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8018c68:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 8018c6c:	4638      	mov	r0, r7
 8018c6e:	f7fe fa75 	bl	801715c <_ZN8touchgfx6CircleC1Ev>
 8018c72:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018c76:	4620      	mov	r0, r4
 8018c78:	f7fd f912 	bl	8015ea0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8018c7c:	4639      	mov	r1, r7
 8018c7e:	4620      	mov	r0, r4
 8018c80:	f7fd f940 	bl	8015f04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018c84:	4620      	mov	r0, r4
 8018c86:	4631      	mov	r1, r6
 8018c88:	f7fd f93c 	bl	8015f04 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f884 5179 	strb.w	r5, [r4, #377]	; 0x179
 8018c92:	b003      	add	sp, #12
 8018c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c96:	bf00      	nop
 8018c98:	08030508 	.word	0x08030508

08018c9c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8018c9c:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
 8018ca0:	4770      	bx	lr

08018ca2 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8018ca2:	f880 1141 	strb.w	r1, [r0, #321]	; 0x141
 8018ca6:	4770      	bx	lr

08018ca8 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8018ca8:	b538      	push	{r3, r4, r5, lr}
 8018caa:	8902      	ldrh	r2, [r0, #8]
 8018cac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018cb0:	f8a0 20b8 	strh.w	r2, [r0, #184]	; 0xb8
 8018cb4:	4604      	mov	r4, r0
 8018cb6:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
 8018cba:	2200      	movs	r2, #0
 8018cbc:	4611      	mov	r1, r2
 8018cbe:	f8a0 30ba 	strh.w	r3, [r0, #186]	; 0xba
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	f7f6 fd1c 	bl	800f700 <_ZN8touchgfx8Drawable5setXYEss>
 8018cc8:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	; 0x152
 8018ccc:	f9b4 314e 	ldrsh.w	r3, [r4, #334]	; 0x14e
 8018cd0:	1a9b      	subs	r3, r3, r2
 8018cd2:	ee07 3a90 	vmov	s15, r3
 8018cd6:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 8018cda:	f9b4 314c 	ldrsh.w	r3, [r4, #332]	; 0x14c
 8018cde:	1a9b      	subs	r3, r3, r2
 8018ce0:	ee07 3a10 	vmov	s14, r3
 8018ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ce8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018cec:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
 8018cf0:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	f7ff f811 	bl	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018cfa:	4b16      	ldr	r3, [pc, #88]	; (8018d54 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 8018cfc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8018d00:	4628      	mov	r0, r5
 8018d02:	f7ff f80b 	bl	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018d06:	f9b4 314e 	ldrsh.w	r3, [r4, #334]	; 0x14e
 8018d0a:	f9b4 214c 	ldrsh.w	r2, [r4, #332]	; 0x14c
 8018d0e:	ee07 3a90 	vmov	s15, r3
 8018d12:	ee07 2a10 	vmov	s14, r2
 8018d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8018d22:	ed84 7a3d 	vstr	s14, [r4, #244]	; 0xf4
 8018d26:	edc4 7a3e 	vstr	s15, [r4, #248]	; 0xf8
 8018d2a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8018d2e:	4628      	mov	r0, r5
 8018d30:	f7fe fff4 	bl	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018d34:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8018d38:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 8018d3c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8018d40:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8018d44:	4628      	mov	r0, r5
 8018d46:	f7fe ffe9 	bl	8017d1c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 8018d50:	bd38      	pop	{r3, r4, r5, pc}
 8018d52:	bf00      	nop
 8018d54:	43960000 	.word	0x43960000

08018d58 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8018d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d5a:	4604      	mov	r4, r0
 8018d5c:	a802      	add	r0, sp, #8
 8018d5e:	4616      	mov	r6, r2
 8018d60:	f820 1d04 	strh.w	r1, [r0, #-4]!
 8018d64:	461d      	mov	r5, r3
 8018d66:	4601      	mov	r1, r0
 8018d68:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8018d6c:	f7ff f92c 	bl	8017fc8 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 8018d70:	f8a4 6150 	strh.w	r6, [r4, #336]	; 0x150
 8018d74:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
 8018d78:	4620      	mov	r0, r4
 8018d7a:	f7ff ff95 	bl	8018ca8 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8018d7e:	b002      	add	sp, #8
 8018d80:	bd70      	pop	{r4, r5, r6, pc}

08018d82 <_ZN8touchgfx5Gauge9setCenterEii>:
 8018d82:	b570      	push	{r4, r5, r6, lr}
 8018d84:	4606      	mov	r6, r0
 8018d86:	460d      	mov	r5, r1
 8018d88:	f8a6 114c 	strh.w	r1, [r6, #332]	; 0x14c
 8018d8c:	f8a6 214e 	strh.w	r2, [r6, #334]	; 0x14e
 8018d90:	4614      	mov	r4, r2
 8018d92:	f7ff ff89 	bl	8018ca8 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8018d96:	f9b6 215a 	ldrsh.w	r2, [r6, #346]	; 0x15a
 8018d9a:	f9b6 1158 	ldrsh.w	r1, [r6, #344]	; 0x158
 8018d9e:	1aa4      	subs	r4, r4, r2
 8018da0:	1a6d      	subs	r5, r5, r1
 8018da2:	0164      	lsls	r4, r4, #5
 8018da4:	016d      	lsls	r5, r5, #5
 8018da6:	3410      	adds	r4, #16
 8018da8:	3510      	adds	r5, #16
 8018daa:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 8018dae:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 8018db2:	bd70      	pop	{r4, r5, r6, pc}

08018db4 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 8018db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018db6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018db8:	0149      	lsls	r1, r1, #5
 8018dba:	4299      	cmp	r1, r3
 8018dbc:	4604      	mov	r4, r0
 8018dbe:	9101      	str	r1, [sp, #4]
 8018dc0:	d00b      	beq.n	8018dda <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 8018dc2:	4601      	mov	r1, r0
 8018dc4:	aa01      	add	r2, sp, #4
 8018dc6:	a802      	add	r0, sp, #8
 8018dc8:	f7fe fbe1 	bl	801758e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8018dcc:	9b01      	ldr	r3, [sp, #4]
 8018dce:	6423      	str	r3, [r4, #64]	; 0x40
 8018dd0:	6823      	ldr	r3, [r4, #0]
 8018dd2:	a902      	add	r1, sp, #8
 8018dd4:	691b      	ldr	r3, [r3, #16]
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	4798      	blx	r3
 8018dda:	b004      	add	sp, #16
 8018ddc:	bd10      	pop	{r4, pc}
	...

08018de0 <_ZN8touchgfx5Gauge8setValueEi>:
 8018de0:	b570      	push	{r4, r5, r6, lr}
 8018de2:	4604      	mov	r4, r0
 8018de4:	f7fc feca 	bl	8015b7c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8018de8:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8018dec:	429a      	cmp	r2, r3
 8018dee:	bfac      	ite	ge
 8018df0:	f894 3141 	ldrbge.w	r3, [r4, #321]	; 0x141
 8018df4:	f894 3140 	ldrblt.w	r3, [r4, #320]	; 0x140
 8018df8:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 8018dfc:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8018e00:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8018e04:	1ac9      	subs	r1, r1, r3
 8018e06:	2900      	cmp	r1, #0
 8018e08:	bfb8      	it	lt
 8018e0a:	4249      	neglt	r1, r1
 8018e0c:	b289      	uxth	r1, r1
 8018e0e:	4620      	mov	r0, r4
 8018e10:	f7fc ff42 	bl	8015c98 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8018e14:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8018e18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8018e1c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8018e84 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 8018e20:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018e88 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8018e24:	429a      	cmp	r2, r3
 8018e26:	4605      	mov	r5, r0
 8018e28:	f504 76aa 	add.w	r6, r4, #340	; 0x154
 8018e2c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8018e30:	da15      	bge.n	8018e5e <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 8018e32:	1b5b      	subs	r3, r3, r5
 8018e34:	ee07 3a90 	vmov	s15, r3
 8018e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e3c:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 8018e40:	ed94 0a39 	vldr	s0, [r4, #228]	; 0xe4
 8018e44:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8018e48:	ee21 1a07 	vmul.f32	s2, s2, s14
 8018e4c:	f7ff f9b9 	bl	80181c2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8018e50:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8018e54:	1b49      	subs	r1, r1, r5
 8018e56:	4630      	mov	r0, r6
 8018e58:	f7ff ffac 	bl	8018db4 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8018e5c:	bd70      	pop	{r4, r5, r6, pc}
 8018e5e:	442b      	add	r3, r5
 8018e60:	ee07 3a90 	vmov	s15, r3
 8018e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e68:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 8018e6c:	ed94 0a39 	vldr	s0, [r4, #228]	; 0xe4
 8018e70:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8018e74:	ee21 1a07 	vmul.f32	s2, s2, s14
 8018e78:	f7ff f9a3 	bl	80181c2 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8018e7c:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8018e80:	4429      	add	r1, r5
 8018e82:	e7e8      	b.n	8018e56 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 8018e84:	43340000 	.word	0x43340000
 8018e88:	40490fdb 	.word	0x40490fdb

08018e8c <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8018e8c:	4291      	cmp	r1, r2
 8018e8e:	b510      	push	{r4, lr}
 8018e90:	4604      	mov	r4, r0
 8018e92:	d105      	bne.n	8018ea0 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 8018e94:	4b0b      	ldr	r3, [pc, #44]	; (8018ec4 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 8018e96:	4a0c      	ldr	r2, [pc, #48]	; (8018ec8 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 8018e98:	480c      	ldr	r0, [pc, #48]	; (8018ecc <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 8018e9a:	215e      	movs	r1, #94	; 0x5e
 8018e9c:	f013 fbde 	bl	802c65c <__assert_func>
 8018ea0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
 8018ea4:	f8c0 2148 	str.w	r2, [r0, #328]	; 0x148
 8018ea8:	0149      	lsls	r1, r1, #5
 8018eaa:	0152      	lsls	r2, r2, #5
 8018eac:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 8018eb0:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8018eb4:	f7fc fe1a 	bl	8015aec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8018eb8:	4601      	mov	r1, r0
 8018eba:	4620      	mov	r0, r4
 8018ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ec0:	f7ff bf8e 	b.w	8018de0 <_ZN8touchgfx5Gauge8setValueEi>
 8018ec4:	080304bc 	.word	0x080304bc
 8018ec8:	080305e0 	.word	0x080305e0
 8018ecc:	080304d3 	.word	0x080304d3

08018ed0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ed2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ed8:	4299      	cmp	r1, r3
 8018eda:	4606      	mov	r6, r0
 8018edc:	d02a      	beq.n	8018f34 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018ede:	4b16      	ldr	r3, [pc, #88]	; (8018f38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	b92b      	cbnz	r3, 8018ef0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018ee4:	4b15      	ldr	r3, [pc, #84]	; (8018f3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018ee6:	4a16      	ldr	r2, [pc, #88]	; (8018f40 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018ee8:	21ae      	movs	r1, #174	; 0xae
 8018eea:	4816      	ldr	r0, [pc, #88]	; (8018f44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018eec:	f013 fbb6 	bl	802c65c <__assert_func>
 8018ef0:	4a15      	ldr	r2, [pc, #84]	; (8018f48 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018ef2:	8812      	ldrh	r2, [r2, #0]
 8018ef4:	428a      	cmp	r2, r1
 8018ef6:	d803      	bhi.n	8018f00 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8018ef8:	4b14      	ldr	r3, [pc, #80]	; (8018f4c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8018efa:	4a11      	ldr	r2, [pc, #68]	; (8018f40 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018efc:	21af      	movs	r1, #175	; 0xaf
 8018efe:	e7f4      	b.n	8018eea <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018f00:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018f04:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018f08:	4b11      	ldr	r3, [pc, #68]	; (8018f50 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8018f0a:	7854      	ldrb	r4, [r2, #1]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018f12:	682b      	ldr	r3, [r5, #0]
 8018f14:	69df      	ldr	r7, [r3, #28]
 8018f16:	4b0f      	ldr	r3, [pc, #60]	; (8018f54 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018f18:	6818      	ldr	r0, [r3, #0]
 8018f1a:	f7fa f8e5 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8018f1e:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018f22:	2300      	movs	r3, #0
 8018f24:	9300      	str	r3, [sp, #0]
 8018f26:	4602      	mov	r2, r0
 8018f28:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018f2a:	4621      	mov	r1, r4
 8018f2c:	4628      	mov	r0, r5
 8018f2e:	47b8      	blx	r7
 8018f30:	b003      	add	sp, #12
 8018f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f34:	2000      	movs	r0, #0
 8018f36:	e7fb      	b.n	8018f30 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8018f38:	20006750 	.word	0x20006750
 8018f3c:	080302f0 	.word	0x080302f0
 8018f40:	08030694 	.word	0x08030694
 8018f44:	08030332 	.word	0x08030332
 8018f48:	20006754 	.word	0x20006754
 8018f4c:	0803035b 	.word	0x0803035b
 8018f50:	20006758 	.word	0x20006758
 8018f54:	2000675c 	.word	0x2000675c

08018f58 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018f58:	b570      	push	{r4, r5, r6, lr}
 8018f5a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f60:	4299      	cmp	r1, r3
 8018f62:	4604      	mov	r4, r0
 8018f64:	d01e      	beq.n	8018fa4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018f66:	6803      	ldr	r3, [r0, #0]
 8018f68:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018f6a:	4b0f      	ldr	r3, [pc, #60]	; (8018fa8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	b92b      	cbnz	r3, 8018f7c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018f70:	4b0e      	ldr	r3, [pc, #56]	; (8018fac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018f72:	4a0f      	ldr	r2, [pc, #60]	; (8018fb0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018f74:	21ae      	movs	r1, #174	; 0xae
 8018f76:	480f      	ldr	r0, [pc, #60]	; (8018fb4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8018f78:	f013 fb70 	bl	802c65c <__assert_func>
 8018f7c:	4b0e      	ldr	r3, [pc, #56]	; (8018fb8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8018f7e:	881b      	ldrh	r3, [r3, #0]
 8018f80:	428b      	cmp	r3, r1
 8018f82:	d803      	bhi.n	8018f8c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8018f84:	4b0d      	ldr	r3, [pc, #52]	; (8018fbc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8018f86:	4a0a      	ldr	r2, [pc, #40]	; (8018fb0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018f88:	21af      	movs	r1, #175	; 0xaf
 8018f8a:	e7f4      	b.n	8018f76 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8018f8c:	4b0c      	ldr	r3, [pc, #48]	; (8018fc0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8018f8e:	6818      	ldr	r0, [r3, #0]
 8018f90:	f7fa f8aa 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 8018f94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018f96:	4601      	mov	r1, r0
 8018f98:	46ac      	mov	ip, r5
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fa2:	4760      	bx	ip
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	bd70      	pop	{r4, r5, r6, pc}
 8018fa8:	20006750 	.word	0x20006750
 8018fac:	080302f0 	.word	0x080302f0
 8018fb0:	08030694 	.word	0x08030694
 8018fb4:	08030332 	.word	0x08030332
 8018fb8:	20006754 	.word	0x20006754
 8018fbc:	0803035b 	.word	0x0803035b
 8018fc0:	2000675c 	.word	0x2000675c

08018fc4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fc8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	b08c      	sub	sp, #48	; 0x30
 8018fd2:	4604      	mov	r4, r0
 8018fd4:	460e      	mov	r6, r1
 8018fd6:	d05d      	beq.n	8019094 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018fd8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80190b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018fdc:	f8d8 2000 	ldr.w	r2, [r8]
 8018fe0:	b92a      	cbnz	r2, 8018fee <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018fe2:	4b2e      	ldr	r3, [pc, #184]	; (801909c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018fe4:	4a2e      	ldr	r2, [pc, #184]	; (80190a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018fe6:	21ae      	movs	r1, #174	; 0xae
 8018fe8:	482e      	ldr	r0, [pc, #184]	; (80190a4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018fea:	f013 fb37 	bl	802c65c <__assert_func>
 8018fee:	4f2e      	ldr	r7, [pc, #184]	; (80190a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018ff0:	8839      	ldrh	r1, [r7, #0]
 8018ff2:	4299      	cmp	r1, r3
 8018ff4:	d803      	bhi.n	8018ffe <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8018ff6:	4b2d      	ldr	r3, [pc, #180]	; (80190ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018ff8:	4a29      	ldr	r2, [pc, #164]	; (80190a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018ffa:	21af      	movs	r1, #175	; 0xaf
 8018ffc:	e7f4      	b.n	8018fe8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018ffe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019002:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019006:	4b2a      	ldr	r3, [pc, #168]	; (80190b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801900e:	2a00      	cmp	r2, #0
 8019010:	d040      	beq.n	8019094 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019012:	784b      	ldrb	r3, [r1, #1]
 8019014:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019018:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801901c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019020:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019024:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8019028:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801902a:	9207      	str	r2, [sp, #28]
 801902c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019030:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019034:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019038:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801903c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019040:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019044:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019048:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801904c:	f88d a020 	strb.w	sl, [sp, #32]
 8019050:	9009      	str	r0, [sp, #36]	; 0x24
 8019052:	f7f5 ff7d 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 8019056:	ad05      	add	r5, sp, #20
 8019058:	4681      	mov	r9, r0
 801905a:	4621      	mov	r1, r4
 801905c:	4628      	mov	r0, r5
 801905e:	f002 fd8c 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019062:	f8d8 3000 	ldr.w	r3, [r8]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d0bb      	beq.n	8018fe2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801906a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801906c:	883b      	ldrh	r3, [r7, #0]
 801906e:	428b      	cmp	r3, r1
 8019070:	d9c1      	bls.n	8018ff6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8019072:	4b10      	ldr	r3, [pc, #64]	; (80190b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019074:	6818      	ldr	r0, [r3, #0]
 8019076:	f7fa f837 	bl	80130e8 <_ZNK8touchgfx5Texts7getTextEt>
 801907a:	2300      	movs	r3, #0
 801907c:	9303      	str	r3, [sp, #12]
 801907e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019080:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019084:	ab07      	add	r3, sp, #28
 8019086:	9300      	str	r3, [sp, #0]
 8019088:	e895 0006 	ldmia.w	r5, {r1, r2}
 801908c:	4633      	mov	r3, r6
 801908e:	4648      	mov	r0, r9
 8019090:	f7f9 ffbb 	bl	801300a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019094:	b00c      	add	sp, #48	; 0x30
 8019096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801909a:	bf00      	nop
 801909c:	080302f0 	.word	0x080302f0
 80190a0:	08030694 	.word	0x08030694
 80190a4:	08030332 	.word	0x08030332
 80190a8:	20006754 	.word	0x20006754
 80190ac:	0803035b 	.word	0x0803035b
 80190b0:	20006758 	.word	0x20006758
 80190b4:	2000675c 	.word	0x2000675c
 80190b8:	20006750 	.word	0x20006750

080190bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80190bc:	b570      	push	{r4, r5, r6, lr}
 80190be:	880b      	ldrh	r3, [r1, #0]
 80190c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80190c2:	4604      	mov	r4, r0
 80190c4:	4608      	mov	r0, r1
 80190c6:	460d      	mov	r5, r1
 80190c8:	f005 f94e 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80190cc:	4606      	mov	r6, r0
 80190ce:	4628      	mov	r0, r5
 80190d0:	f005 f984 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190d4:	6823      	ldr	r3, [r4, #0]
 80190d6:	4605      	mov	r5, r0
 80190d8:	b231      	sxth	r1, r6
 80190da:	4620      	mov	r0, r4
 80190dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190de:	4798      	blx	r3
 80190e0:	6823      	ldr	r3, [r4, #0]
 80190e2:	b229      	sxth	r1, r5
 80190e4:	4620      	mov	r0, r4
 80190e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190ec:	4718      	bx	r3

080190ee <_ZNK8touchgfx5Image12getSolidRectEv>:
 80190ee:	b510      	push	{r4, lr}
 80190f0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80190f4:	2bff      	cmp	r3, #255	; 0xff
 80190f6:	4604      	mov	r4, r0
 80190f8:	d006      	beq.n	8019108 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80190fa:	2300      	movs	r3, #0
 80190fc:	8003      	strh	r3, [r0, #0]
 80190fe:	8043      	strh	r3, [r0, #2]
 8019100:	8083      	strh	r3, [r0, #4]
 8019102:	80c3      	strh	r3, [r0, #6]
 8019104:	4620      	mov	r0, r4
 8019106:	bd10      	pop	{r4, pc}
 8019108:	3126      	adds	r1, #38	; 0x26
 801910a:	f005 f9a1 	bl	801e450 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801910e:	e7f9      	b.n	8019104 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08019110 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019114:	4604      	mov	r4, r0
 8019116:	b088      	sub	sp, #32
 8019118:	f854 3b26 	ldr.w	r3, [r4], #38
 801911c:	2500      	movs	r5, #0
 801911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019120:	460f      	mov	r7, r1
 8019122:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019126:	a904      	add	r1, sp, #16
 8019128:	4606      	mov	r6, r0
 801912a:	4798      	blx	r3
 801912c:	4620      	mov	r0, r4
 801912e:	f005 f91b 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019132:	4680      	mov	r8, r0
 8019134:	4620      	mov	r0, r4
 8019136:	f005 f951 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801913a:	9506      	str	r5, [sp, #24]
 801913c:	ad06      	add	r5, sp, #24
 801913e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019142:	4639      	mov	r1, r7
 8019144:	4628      	mov	r0, r5
 8019146:	f8ad 801c 	strh.w	r8, [sp, #28]
 801914a:	f7fc ff0b 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801914e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019152:	2b00      	cmp	r3, #0
 8019154:	dd19      	ble.n	801918a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019156:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801915a:	2b00      	cmp	r3, #0
 801915c:	dd15      	ble.n	801918a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801915e:	4b0c      	ldr	r3, [pc, #48]	; (8019190 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019166:	b10a      	cbz	r2, 801916c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019168:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801916a:	b900      	cbnz	r0, 801916e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801916c:	6898      	ldr	r0, [r3, #8]
 801916e:	6801      	ldr	r1, [r0, #0]
 8019170:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019174:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019178:	2701      	movs	r7, #1
 801917a:	9702      	str	r7, [sp, #8]
 801917c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019180:	e9cd 5600 	strd	r5, r6, [sp]
 8019184:	688d      	ldr	r5, [r1, #8]
 8019186:	4621      	mov	r1, r4
 8019188:	47a8      	blx	r5
 801918a:	b008      	add	sp, #32
 801918c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019190:	20006700 	.word	0x20006700

08019194 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019194:	4b01      	ldr	r3, [pc, #4]	; (801919c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019196:	6019      	str	r1, [r3, #0]
 8019198:	4770      	bx	lr
 801919a:	bf00      	nop
 801919c:	20006708 	.word	0x20006708

080191a0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80191a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a4:	4696      	mov	lr, r2
 80191a6:	4605      	mov	r5, r0
 80191a8:	4614      	mov	r4, r2
 80191aa:	460e      	mov	r6, r1
 80191ac:	461f      	mov	r7, r3
 80191ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80191b2:	b097      	sub	sp, #92	; 0x5c
 80191b4:	f10d 0c1c 	add.w	ip, sp, #28
 80191b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80191bc:	f8de 3000 	ldr.w	r3, [lr]
 80191c0:	f8cc 3000 	str.w	r3, [ip]
 80191c4:	f104 0e14 	add.w	lr, r4, #20
 80191c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80191cc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80191d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80191d4:	f8de 3000 	ldr.w	r3, [lr]
 80191d8:	f8cc 3000 	str.w	r3, [ip]
 80191dc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80191e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80191e4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80191e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80191ec:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80191f0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80191f4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80191f8:	f8de 3000 	ldr.w	r3, [lr]
 80191fc:	f8cc 3000 	str.w	r3, [ip]
 8019200:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019202:	682b      	ldr	r3, [r5, #0]
 8019204:	9201      	str	r2, [sp, #4]
 8019206:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801920a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801920c:	9200      	str	r2, [sp, #0]
 801920e:	f8cd 8008 	str.w	r8, [sp, #8]
 8019212:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8019216:	aa07      	add	r2, sp, #28
 8019218:	463b      	mov	r3, r7
 801921a:	4631      	mov	r1, r6
 801921c:	4628      	mov	r0, r5
 801921e:	47d8      	blx	fp
 8019220:	46a6      	mov	lr, r4
 8019222:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019226:	f10d 0c1c 	add.w	ip, sp, #28
 801922a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801922e:	f8de 3000 	ldr.w	r3, [lr]
 8019232:	f8cc 3000 	str.w	r3, [ip]
 8019236:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801923a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801923e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019246:	343c      	adds	r4, #60	; 0x3c
 8019248:	f8de 3000 	ldr.w	r3, [lr]
 801924c:	f8cc 3000 	str.w	r3, [ip]
 8019250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019252:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801925a:	6823      	ldr	r3, [r4, #0]
 801925c:	f8cc 3000 	str.w	r3, [ip]
 8019260:	682b      	ldr	r3, [r5, #0]
 8019262:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019266:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019268:	9201      	str	r2, [sp, #4]
 801926a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801926c:	9200      	str	r2, [sp, #0]
 801926e:	f8cd 8008 	str.w	r8, [sp, #8]
 8019272:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8019274:	aa07      	add	r2, sp, #28
 8019276:	463b      	mov	r3, r7
 8019278:	4631      	mov	r1, r6
 801927a:	4628      	mov	r0, r5
 801927c:	47a0      	blx	r4
 801927e:	b017      	add	sp, #92	; 0x5c
 8019280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019284 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019284:	2000      	movs	r0, #0
 8019286:	4770      	bx	lr

08019288 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801928c:	b08d      	sub	sp, #52	; 0x34
 801928e:	4688      	mov	r8, r1
 8019290:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019292:	f8d3 c000 	ldr.w	ip, [r3]
 8019296:	680f      	ldr	r7, [r1, #0]
 8019298:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801929c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80192a0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80192a4:	edd3 6a07 	vldr	s13, [r3, #28]
 80192a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80192aa:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80192ae:	f9b1 9000 	ldrsh.w	r9, [r1]
 80192b2:	f9ba 1000 	ldrsh.w	r1, [sl]
 80192b6:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80192ba:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80192be:	eba7 070c 	sub.w	r7, r7, ip
 80192c2:	42bc      	cmp	r4, r7
 80192c4:	bfa8      	it	ge
 80192c6:	463c      	movge	r4, r7
 80192c8:	ee07 4a90 	vmov	s15, r4
 80192cc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80192d0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80192d4:	ee25 4a04 	vmul.f32	s8, s10, s8
 80192d8:	ee65 4a24 	vmul.f32	s9, s10, s9
 80192dc:	ee25 5a27 	vmul.f32	s10, s10, s15
 80192e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80192e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80192e8:	eb09 0e0c 	add.w	lr, r9, ip
 80192ec:	4571      	cmp	r1, lr
 80192ee:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80192f2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80192f6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80192fa:	ee61 1a87 	vmul.f32	s3, s3, s14
 80192fe:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019302:	f340 808d 	ble.w	8019420 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8019306:	eba1 060e 	sub.w	r6, r1, lr
 801930a:	fb96 f5f4 	sdiv	r5, r6, r4
 801930e:	ee07 5a10 	vmov	s14, r5
 8019312:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019316:	2d00      	cmp	r5, #0
 8019318:	fb04 6615 	mls	r6, r4, r5, r6
 801931c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019320:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019324:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019328:	dd13      	ble.n	8019352 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801932a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801932e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019332:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801933a:	bf18      	it	ne
 801933c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019340:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019344:	bf08      	it	eq
 8019346:	eeb0 7a67 	vmoveq.f32	s14, s15
 801934a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801934e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019352:	fb05 f204 	mul.w	r2, r5, r4
 8019356:	1abf      	subs	r7, r7, r2
 8019358:	4494      	add	ip, r2
 801935a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801935e:	4411      	add	r1, r2
 8019360:	eb09 020c 	add.w	r2, r9, ip
 8019364:	443a      	add	r2, r7
 8019366:	b209      	sxth	r1, r1
 8019368:	428a      	cmp	r2, r1
 801936a:	bfc4      	itt	gt
 801936c:	eba1 0209 	subgt.w	r2, r1, r9
 8019370:	eba2 070c 	subgt.w	r7, r2, ip
 8019374:	2f00      	cmp	r7, #0
 8019376:	dd50      	ble.n	801941a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8019378:	fb97 f1f4 	sdiv	r1, r7, r4
 801937c:	fb04 7211 	mls	r2, r4, r1, r7
 8019380:	b90a      	cbnz	r2, 8019386 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8019382:	3901      	subs	r1, #1
 8019384:	4622      	mov	r2, r4
 8019386:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801938a:	6840      	ldr	r0, [r0, #4]
 801938c:	900b      	str	r0, [sp, #44]	; 0x2c
 801938e:	f8d0 a000 	ldr.w	sl, [r0]
 8019392:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019394:	9008      	str	r0, [sp, #32]
 8019396:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801939a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801939c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80193a0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80193a4:	695b      	ldr	r3, [r3, #20]
 80193a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80193a8:	445b      	add	r3, fp
 80193aa:	eef0 6a42 	vmov.f32	s13, s4
 80193ae:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80193b2:	ee21 3a23 	vmul.f32	s6, s2, s7
 80193b6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80193ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193be:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80193c2:	9307      	str	r3, [sp, #28]
 80193c4:	ee17 7a90 	vmov	r7, s15
 80193c8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80193cc:	eeb0 7a61 	vmov.f32	s14, s3
 80193d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80193d4:	ee16 3a90 	vmov	r3, s13
 80193d8:	fb97 f7f4 	sdiv	r7, r7, r4
 80193dc:	ee17 ca90 	vmov	ip, s15
 80193e0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80193e4:	fb9c fcf4 	sdiv	ip, ip, r4
 80193e8:	fb0c 3306 	mla	r3, ip, r6, r3
 80193ec:	9302      	str	r3, [sp, #8]
 80193ee:	ee17 3a10 	vmov	r3, s14
 80193f2:	44b6      	add	lr, r6
 80193f4:	fb04 e505 	mla	r5, r4, r5, lr
 80193f8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80193fc:	fb07 3706 	mla	r7, r7, r6, r3
 8019400:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019404:	e9cd 4700 	strd	r4, r7, [sp]
 8019408:	2900      	cmp	r1, #0
 801940a:	bfcc      	ite	gt
 801940c:	46a1      	movgt	r9, r4
 801940e:	4691      	movle	r9, r2
 8019410:	eba9 0306 	sub.w	r3, r9, r6
 8019414:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019418:	47a0      	blx	r4
 801941a:	b00d      	add	sp, #52	; 0x34
 801941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019420:	2500      	movs	r5, #0
 8019422:	462e      	mov	r6, r5
 8019424:	e799      	b.n	801935a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08019428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942c:	b0db      	sub	sp, #364	; 0x16c
 801942e:	461d      	mov	r5, r3
 8019430:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019434:	930a      	str	r3, [sp, #40]	; 0x28
 8019436:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801943a:	930b      	str	r3, [sp, #44]	; 0x2c
 801943c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019440:	9310      	str	r3, [sp, #64]	; 0x40
 8019442:	6803      	ldr	r3, [r0, #0]
 8019444:	910f      	str	r1, [sp, #60]	; 0x3c
 8019446:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8019448:	9009      	str	r0, [sp, #36]	; 0x24
 801944a:	4614      	mov	r4, r2
 801944c:	4629      	mov	r1, r5
 801944e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019452:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8019456:	47b8      	blx	r7
 8019458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801945a:	6058      	str	r0, [r3, #4]
 801945c:	2800      	cmp	r0, #0
 801945e:	f000 83a1 	beq.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019462:	682b      	ldr	r3, [r5, #0]
 8019464:	9314      	str	r3, [sp, #80]	; 0x50
 8019466:	686b      	ldr	r3, [r5, #4]
 8019468:	9315      	str	r3, [sp, #84]	; 0x54
 801946a:	4bc4      	ldr	r3, [pc, #784]	; (801977c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801946c:	ed94 7a02 	vldr	s14, [r4, #8]
 8019470:	7819      	ldrb	r1, [r3, #0]
 8019472:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019476:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801947a:	2900      	cmp	r1, #0
 801947c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019480:	bf16      	itet	ne
 8019482:	4619      	movne	r1, r3
 8019484:	4611      	moveq	r1, r2
 8019486:	4613      	movne	r3, r2
 8019488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801948c:	9116      	str	r1, [sp, #88]	; 0x58
 801948e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019492:	f240 8387 	bls.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019496:	ed94 7a07 	vldr	s14, [r4, #28]
 801949a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a2:	f240 837f 	bls.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194a6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80194aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80194ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194b2:	f240 8377 	bls.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194b6:	6822      	ldr	r2, [r4, #0]
 80194b8:	4bb1      	ldr	r3, [pc, #708]	; (8019780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80194ba:	429a      	cmp	r2, r3
 80194bc:	f2c0 8372 	blt.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194c0:	49b0      	ldr	r1, [pc, #704]	; (8019784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80194c2:	6963      	ldr	r3, [r4, #20]
 80194c4:	428a      	cmp	r2, r1
 80194c6:	f300 836d 	bgt.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194ca:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80194ce:	48ae      	ldr	r0, [pc, #696]	; (8019788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80194d0:	33ff      	adds	r3, #255	; 0xff
 80194d2:	4283      	cmp	r3, r0
 80194d4:	f200 8366 	bhi.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80194da:	4dac      	ldr	r5, [pc, #688]	; (801978c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80194dc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80194e0:	33ff      	adds	r3, #255	; 0xff
 80194e2:	42ab      	cmp	r3, r5
 80194e4:	f200 835e 	bhi.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194e8:	6862      	ldr	r2, [r4, #4]
 80194ea:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80194ee:	33ff      	adds	r3, #255	; 0xff
 80194f0:	4283      	cmp	r3, r0
 80194f2:	f200 8357 	bhi.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194f6:	69a1      	ldr	r1, [r4, #24]
 80194f8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80194fc:	33ff      	adds	r3, #255	; 0xff
 80194fe:	4283      	cmp	r3, r0
 8019500:	f200 8350 	bhi.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019506:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801950a:	30ff      	adds	r0, #255	; 0xff
 801950c:	42a8      	cmp	r0, r5
 801950e:	f200 8349 	bhi.w	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019512:	428a      	cmp	r2, r1
 8019514:	f280 8110 	bge.w	8019738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019518:	429a      	cmp	r2, r3
 801951a:	f300 8119 	bgt.w	8019750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801951e:	4299      	cmp	r1, r3
 8019520:	f280 811d 	bge.w	801975e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019524:	2502      	movs	r5, #2
 8019526:	2701      	movs	r7, #1
 8019528:	46a9      	mov	r9, r5
 801952a:	46b8      	mov	r8, r7
 801952c:	f04f 0a00 	mov.w	sl, #0
 8019530:	4621      	mov	r1, r4
 8019532:	a849      	add	r0, sp, #292	; 0x124
 8019534:	f003 ff28 	bl	801d388 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019538:	4622      	mov	r2, r4
 801953a:	4653      	mov	r3, sl
 801953c:	a949      	add	r1, sp, #292	; 0x124
 801953e:	f8cd 9000 	str.w	r9, [sp]
 8019542:	a819      	add	r0, sp, #100	; 0x64
 8019544:	f004 f850 	bl	801d5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019548:	4622      	mov	r2, r4
 801954a:	4653      	mov	r3, sl
 801954c:	a949      	add	r1, sp, #292	; 0x124
 801954e:	f8cd 8000 	str.w	r8, [sp]
 8019552:	a829      	add	r0, sp, #164	; 0xa4
 8019554:	f004 f848 	bl	801d5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019558:	4643      	mov	r3, r8
 801955a:	4622      	mov	r2, r4
 801955c:	a949      	add	r1, sp, #292	; 0x124
 801955e:	f8cd 9000 	str.w	r9, [sp]
 8019562:	a839      	add	r0, sp, #228	; 0xe4
 8019564:	f004 f840 	bl	801d5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019568:	42af      	cmp	r7, r5
 801956a:	bfb5      	itete	lt
 801956c:	2300      	movlt	r3, #0
 801956e:	2301      	movge	r3, #1
 8019570:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019572:	930e      	strge	r3, [sp, #56]	; 0x38
 8019574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019576:	e893 0003 	ldmia.w	r3, {r0, r1}
 801957a:	af12      	add	r7, sp, #72	; 0x48
 801957c:	bfb9      	ittee	lt
 801957e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8019580:	ac19      	addlt	r4, sp, #100	; 0x64
 8019582:	ad19      	addge	r5, sp, #100	; 0x64
 8019584:	ac29      	addge	r4, sp, #164	; 0xa4
 8019586:	e887 0003 	stmia.w	r7, {r0, r1}
 801958a:	b928      	cbnz	r0, 8019598 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801958c:	4b80      	ldr	r3, [pc, #512]	; (8019790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801958e:	6818      	ldr	r0, [r3, #0]
 8019590:	6803      	ldr	r3, [r0, #0]
 8019592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019594:	4798      	blx	r3
 8019596:	6038      	str	r0, [r7, #0]
 8019598:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801959a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801959e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80195a2:	930c      	str	r3, [sp, #48]	; 0x30
 80195a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80195a6:	6963      	ldr	r3, [r4, #20]
 80195a8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80195aa:	440b      	add	r3, r1
 80195ac:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80195b0:	4408      	add	r0, r1
 80195b2:	b200      	sxth	r0, r0
 80195b4:	4283      	cmp	r3, r0
 80195b6:	900d      	str	r0, [sp, #52]	; 0x34
 80195b8:	f280 80dd 	bge.w	8019776 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80195bc:	428b      	cmp	r3, r1
 80195be:	da08      	bge.n	80195d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80195c0:	2a00      	cmp	r2, #0
 80195c2:	dd06      	ble.n	80195d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80195c4:	1acb      	subs	r3, r1, r3
 80195c6:	429a      	cmp	r2, r3
 80195c8:	f2c0 80e4 	blt.w	8019794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	f300 80e2 	bgt.w	8019796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80195d2:	6967      	ldr	r7, [r4, #20]
 80195d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195d6:	443b      	add	r3, r7
 80195d8:	461f      	mov	r7, r3
 80195da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195dc:	1bdf      	subs	r7, r3, r7
 80195de:	4297      	cmp	r7, r2
 80195e0:	bfa8      	it	ge
 80195e2:	4617      	movge	r7, r2
 80195e4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80195e8:	2f00      	cmp	r7, #0
 80195ea:	f340 8166 	ble.w	80198ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80195ee:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80195f0:	6829      	ldr	r1, [r5, #0]
 80195f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80195f6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80195fa:	6820      	ldr	r0, [r4, #0]
 80195fc:	4411      	add	r1, r2
 80195fe:	4299      	cmp	r1, r3
 8019600:	dd1a      	ble.n	8019638 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019602:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019606:	440b      	add	r3, r1
 8019608:	4402      	add	r2, r0
 801960a:	b21b      	sxth	r3, r3
 801960c:	429a      	cmp	r2, r3
 801960e:	dc13      	bgt.n	8019638 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019612:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	9206      	str	r2, [sp, #24]
 8019618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801961a:	9205      	str	r2, [sp, #20]
 801961c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801961e:	9500      	str	r5, [sp, #0]
 8019620:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019624:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019628:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801962c:	a912      	add	r1, sp, #72	; 0x48
 801962e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8019632:	aa49      	add	r2, sp, #292	; 0x124
 8019634:	4623      	mov	r3, r4
 8019636:	47c8      	blx	r9
 8019638:	e9d4 2300 	ldrd	r2, r3, [r4]
 801963c:	441a      	add	r2, r3
 801963e:	6963      	ldr	r3, [r4, #20]
 8019640:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019644:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019648:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801964c:	68a1      	ldr	r1, [r4, #8]
 801964e:	ed94 6a08 	vldr	s12, [r4, #32]
 8019652:	6022      	str	r2, [r4, #0]
 8019654:	3301      	adds	r3, #1
 8019656:	6163      	str	r3, [r4, #20]
 8019658:	69a3      	ldr	r3, [r4, #24]
 801965a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801965e:	3b01      	subs	r3, #1
 8019660:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019664:	61a3      	str	r3, [r4, #24]
 8019666:	6923      	ldr	r3, [r4, #16]
 8019668:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801966c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019670:	edd4 6a07 	vldr	s13, [r4, #28]
 8019674:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019678:	440b      	add	r3, r1
 801967a:	68e1      	ldr	r1, [r4, #12]
 801967c:	6123      	str	r3, [r4, #16]
 801967e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019682:	428b      	cmp	r3, r1
 8019684:	edc4 6a07 	vstr	s13, [r4, #28]
 8019688:	db15      	blt.n	80196b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801968a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801968e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019692:	3201      	adds	r2, #1
 8019694:	edc4 6a07 	vstr	s13, [r4, #28]
 8019698:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801969c:	6022      	str	r2, [r4, #0]
 801969e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80196a2:	1a5b      	subs	r3, r3, r1
 80196a4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80196a8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80196ac:	6123      	str	r3, [r4, #16]
 80196ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196b2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80196b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80196ba:	441a      	add	r2, r3
 80196bc:	696b      	ldr	r3, [r5, #20]
 80196be:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80196c2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80196c6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80196ca:	68a9      	ldr	r1, [r5, #8]
 80196cc:	ed95 6a08 	vldr	s12, [r5, #32]
 80196d0:	602a      	str	r2, [r5, #0]
 80196d2:	3301      	adds	r3, #1
 80196d4:	616b      	str	r3, [r5, #20]
 80196d6:	69ab      	ldr	r3, [r5, #24]
 80196d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196dc:	3b01      	subs	r3, #1
 80196de:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80196e2:	61ab      	str	r3, [r5, #24]
 80196e4:	692b      	ldr	r3, [r5, #16]
 80196e6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80196ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196ee:	edd5 6a07 	vldr	s13, [r5, #28]
 80196f2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80196f6:	440b      	add	r3, r1
 80196f8:	68e9      	ldr	r1, [r5, #12]
 80196fa:	612b      	str	r3, [r5, #16]
 80196fc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019700:	428b      	cmp	r3, r1
 8019702:	edc5 6a07 	vstr	s13, [r5, #28]
 8019706:	db15      	blt.n	8019734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019708:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801970c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019710:	3201      	adds	r2, #1
 8019712:	edc5 6a07 	vstr	s13, [r5, #28]
 8019716:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801971a:	602a      	str	r2, [r5, #0]
 801971c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019720:	1a5b      	subs	r3, r3, r1
 8019722:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019726:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801972a:	612b      	str	r3, [r5, #16]
 801972c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019730:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019734:	3f01      	subs	r7, #1
 8019736:	e757      	b.n	80195e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019738:	4299      	cmp	r1, r3
 801973a:	dc13      	bgt.n	8019764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801973c:	429a      	cmp	r2, r3
 801973e:	da14      	bge.n	801976a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019740:	2502      	movs	r5, #2
 8019742:	2703      	movs	r7, #3
 8019744:	46a9      	mov	r9, r5
 8019746:	f04f 0800 	mov.w	r8, #0
 801974a:	f04f 0a01 	mov.w	sl, #1
 801974e:	e6ef      	b.n	8019530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019750:	2501      	movs	r5, #1
 8019752:	2700      	movs	r7, #0
 8019754:	46a9      	mov	r9, r5
 8019756:	46b8      	mov	r8, r7
 8019758:	f04f 0a02 	mov.w	sl, #2
 801975c:	e6e8      	b.n	8019530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801975e:	2501      	movs	r5, #1
 8019760:	2702      	movs	r7, #2
 8019762:	e6e1      	b.n	8019528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019764:	2500      	movs	r5, #0
 8019766:	2701      	movs	r7, #1
 8019768:	e7f4      	b.n	8019754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801976a:	2702      	movs	r7, #2
 801976c:	2503      	movs	r5, #3
 801976e:	f04f 0900 	mov.w	r9, #0
 8019772:	46b8      	mov	r8, r7
 8019774:	e7e9      	b.n	801974a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019776:	4613      	mov	r3, r2
 8019778:	e728      	b.n	80195cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801977a:	bf00      	nop
 801977c:	200066f8 	.word	0x200066f8
 8019780:	fffd8f01 	.word	0xfffd8f01
 8019784:	00027100 	.word	0x00027100
 8019788:	0004e1ff 	.word	0x0004e1ff
 801978c:	0004e1fe 	.word	0x0004e1fe
 8019790:	20006700 	.word	0x20006700
 8019794:	4613      	mov	r3, r2
 8019796:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019798:	9111      	str	r1, [sp, #68]	; 0x44
 801979a:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801979e:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80197a2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80197a4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80197a8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80197ac:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80197b0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80197b4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80197b8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80197bc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80197c0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80197c4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80197c8:	469e      	mov	lr, r3
 80197ca:	469c      	mov	ip, r3
 80197cc:	f04f 0900 	mov.w	r9, #0
 80197d0:	f1bc 0f00 	cmp.w	ip, #0
 80197d4:	d147      	bne.n	8019866 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80197d6:	eb03 0c07 	add.w	ip, r3, r7
 80197da:	1ad7      	subs	r7, r2, r3
 80197dc:	f1b9 0f00 	cmp.w	r9, #0
 80197e0:	d009      	beq.n	80197f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80197e2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80197e6:	9029      	str	r0, [sp, #164]	; 0xa4
 80197e8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80197ec:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80197f0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80197f4:	912d      	str	r1, [sp, #180]	; 0xb4
 80197f6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80197f8:	9111      	str	r1, [sp, #68]	; 0x44
 80197fa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80197fe:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019802:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019806:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801980a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801980e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019812:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019816:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801981a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801981e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019822:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019826:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801982a:	f04f 0800 	mov.w	r8, #0
 801982e:	f1be 0f00 	cmp.w	lr, #0
 8019832:	d031      	beq.n	8019898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019834:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019836:	4431      	add	r1, r6
 8019838:	4549      	cmp	r1, r9
 801983a:	4450      	add	r0, sl
 801983c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019840:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019844:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019848:	db08      	blt.n	801985c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801984a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801984e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019852:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019856:	3001      	adds	r0, #1
 8019858:	eba1 0109 	sub.w	r1, r1, r9
 801985c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019860:	f04f 0801 	mov.w	r8, #1
 8019864:	e7e3      	b.n	801982e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019866:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019868:	4431      	add	r1, r6
 801986a:	4541      	cmp	r1, r8
 801986c:	4450      	add	r0, sl
 801986e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019872:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019876:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801987a:	db08      	blt.n	801988e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801987c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019880:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019884:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019888:	3001      	adds	r0, #1
 801988a:	eba1 0108 	sub.w	r1, r1, r8
 801988e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019892:	f04f 0901 	mov.w	r9, #1
 8019896:	e79b      	b.n	80197d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019898:	449c      	add	ip, r3
 801989a:	1aff      	subs	r7, r7, r3
 801989c:	f1b8 0f00 	cmp.w	r8, #0
 80198a0:	d009      	beq.n	80198b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80198a2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80198a6:	9019      	str	r0, [sp, #100]	; 0x64
 80198a8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80198ac:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80198b0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80198b4:	911d      	str	r1, [sp, #116]	; 0x74
 80198b6:	1ad2      	subs	r2, r2, r3
 80198b8:	e68b      	b.n	80195d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80198ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198bc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80198be:	2b00      	cmp	r3, #0
 80198c0:	f000 80d1 	beq.w	8019a66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80198c4:	ad19      	add	r5, sp, #100	; 0x64
 80198c6:	ac39      	add	r4, sp, #228	; 0xe4
 80198c8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80198ca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80198ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80198d2:	930c      	str	r3, [sp, #48]	; 0x30
 80198d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80198d6:	6963      	ldr	r3, [r4, #20]
 80198d8:	440b      	add	r3, r1
 80198da:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80198de:	4408      	add	r0, r1
 80198e0:	b200      	sxth	r0, r0
 80198e2:	4283      	cmp	r3, r0
 80198e4:	900d      	str	r0, [sp, #52]	; 0x34
 80198e6:	f280 80c1 	bge.w	8019a6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80198ea:	428b      	cmp	r3, r1
 80198ec:	da08      	bge.n	8019900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80198ee:	2a00      	cmp	r2, #0
 80198f0:	dd06      	ble.n	8019900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80198f2:	1acb      	subs	r3, r1, r3
 80198f4:	429a      	cmp	r2, r3
 80198f6:	f2c0 80bb 	blt.w	8019a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	f300 80b9 	bgt.w	8019a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019900:	6967      	ldr	r7, [r4, #20]
 8019902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019904:	443b      	add	r3, r7
 8019906:	461f      	mov	r7, r3
 8019908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801990a:	1bdf      	subs	r7, r3, r7
 801990c:	4297      	cmp	r7, r2
 801990e:	bfa8      	it	ge
 8019910:	4617      	movge	r7, r2
 8019912:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019916:	2f00      	cmp	r7, #0
 8019918:	f340 813c 	ble.w	8019b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801991c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801991e:	6829      	ldr	r1, [r5, #0]
 8019920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019924:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019928:	6820      	ldr	r0, [r4, #0]
 801992a:	4411      	add	r1, r2
 801992c:	4299      	cmp	r1, r3
 801992e:	dd1a      	ble.n	8019966 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019930:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019934:	440b      	add	r3, r1
 8019936:	4402      	add	r2, r0
 8019938:	b21b      	sxth	r3, r3
 801993a:	429a      	cmp	r2, r3
 801993c:	dc13      	bgt.n	8019966 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801993e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019940:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	9206      	str	r2, [sp, #24]
 8019946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019948:	9205      	str	r2, [sp, #20]
 801994a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801994c:	9500      	str	r5, [sp, #0]
 801994e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019952:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019956:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801995a:	a912      	add	r1, sp, #72	; 0x48
 801995c:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8019960:	aa49      	add	r2, sp, #292	; 0x124
 8019962:	4623      	mov	r3, r4
 8019964:	47c8      	blx	r9
 8019966:	e9d4 2300 	ldrd	r2, r3, [r4]
 801996a:	441a      	add	r2, r3
 801996c:	6963      	ldr	r3, [r4, #20]
 801996e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019972:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019976:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801997a:	68a1      	ldr	r1, [r4, #8]
 801997c:	ed94 6a08 	vldr	s12, [r4, #32]
 8019980:	6022      	str	r2, [r4, #0]
 8019982:	3301      	adds	r3, #1
 8019984:	6163      	str	r3, [r4, #20]
 8019986:	69a3      	ldr	r3, [r4, #24]
 8019988:	ee37 7a27 	vadd.f32	s14, s14, s15
 801998c:	3b01      	subs	r3, #1
 801998e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019992:	61a3      	str	r3, [r4, #24]
 8019994:	6923      	ldr	r3, [r4, #16]
 8019996:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801999e:	edd4 6a07 	vldr	s13, [r4, #28]
 80199a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80199a6:	440b      	add	r3, r1
 80199a8:	68e1      	ldr	r1, [r4, #12]
 80199aa:	6123      	str	r3, [r4, #16]
 80199ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80199b0:	428b      	cmp	r3, r1
 80199b2:	edc4 6a07 	vstr	s13, [r4, #28]
 80199b6:	db15      	blt.n	80199e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80199b8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80199bc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80199c0:	3201      	adds	r2, #1
 80199c2:	edc4 6a07 	vstr	s13, [r4, #28]
 80199c6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80199ca:	6022      	str	r2, [r4, #0]
 80199cc:	ee36 7a87 	vadd.f32	s14, s13, s14
 80199d0:	1a5b      	subs	r3, r3, r1
 80199d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80199d6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80199da:	6123      	str	r3, [r4, #16]
 80199dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199e0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80199e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80199e8:	441a      	add	r2, r3
 80199ea:	696b      	ldr	r3, [r5, #20]
 80199ec:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80199f0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80199f4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80199f8:	68a9      	ldr	r1, [r5, #8]
 80199fa:	ed95 6a08 	vldr	s12, [r5, #32]
 80199fe:	602a      	str	r2, [r5, #0]
 8019a00:	3301      	adds	r3, #1
 8019a02:	616b      	str	r3, [r5, #20]
 8019a04:	69ab      	ldr	r3, [r5, #24]
 8019a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019a10:	61ab      	str	r3, [r5, #24]
 8019a12:	692b      	ldr	r3, [r5, #16]
 8019a14:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019a1c:	edd5 6a07 	vldr	s13, [r5, #28]
 8019a20:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019a24:	440b      	add	r3, r1
 8019a26:	68e9      	ldr	r1, [r5, #12]
 8019a28:	612b      	str	r3, [r5, #16]
 8019a2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019a2e:	428b      	cmp	r3, r1
 8019a30:	edc5 6a07 	vstr	s13, [r5, #28]
 8019a34:	db15      	blt.n	8019a62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019a36:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019a3a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019a3e:	3201      	adds	r2, #1
 8019a40:	edc5 6a07 	vstr	s13, [r5, #28]
 8019a44:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019a48:	602a      	str	r2, [r5, #0]
 8019a4a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019a4e:	1a5b      	subs	r3, r3, r1
 8019a50:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019a54:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019a58:	612b      	str	r3, [r5, #16]
 8019a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a5e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019a62:	3f01      	subs	r7, #1
 8019a64:	e757      	b.n	8019916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019a66:	ad39      	add	r5, sp, #228	; 0xe4
 8019a68:	ac19      	add	r4, sp, #100	; 0x64
 8019a6a:	e72d      	b.n	80198c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019a6c:	4613      	mov	r3, r2
 8019a6e:	e744      	b.n	80198fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019a70:	4613      	mov	r3, r2
 8019a72:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019a76:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019a78:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019a7c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019a80:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019a84:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019a88:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019a8c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019a90:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019a94:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019a96:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019a9a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019a9e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019aa2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019aa6:	960e      	str	r6, [sp, #56]	; 0x38
 8019aa8:	469e      	mov	lr, r3
 8019aaa:	461f      	mov	r7, r3
 8019aac:	f04f 0900 	mov.w	r9, #0
 8019ab0:	2f00      	cmp	r7, #0
 8019ab2:	d146      	bne.n	8019b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019ab4:	449c      	add	ip, r3
 8019ab6:	1ad7      	subs	r7, r2, r3
 8019ab8:	f1b9 0f00 	cmp.w	r9, #0
 8019abc:	d009      	beq.n	8019ad2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019abe:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019ac2:	9039      	str	r0, [sp, #228]	; 0xe4
 8019ac4:	913d      	str	r1, [sp, #244]	; 0xf4
 8019ac6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019aca:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019ace:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019ad2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019ad4:	910e      	str	r1, [sp, #56]	; 0x38
 8019ad6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019ada:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019ade:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019ae2:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019ae6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019aea:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019aee:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019af2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019af6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019afa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019afe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019b02:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019b06:	f04f 0800 	mov.w	r8, #0
 8019b0a:	f1be 0f00 	cmp.w	lr, #0
 8019b0e:	d030      	beq.n	8019b72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019b10:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019b12:	4431      	add	r1, r6
 8019b14:	4549      	cmp	r1, r9
 8019b16:	4450      	add	r0, sl
 8019b18:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019b1c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019b20:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019b24:	db08      	blt.n	8019b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019b26:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019b2a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019b2e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019b32:	3001      	adds	r0, #1
 8019b34:	eba1 0109 	sub.w	r1, r1, r9
 8019b38:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019b3c:	f04f 0801 	mov.w	r8, #1
 8019b40:	e7e3      	b.n	8019b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019b42:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019b44:	4431      	add	r1, r6
 8019b46:	4541      	cmp	r1, r8
 8019b48:	4450      	add	r0, sl
 8019b4a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019b4e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019b52:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019b56:	db08      	blt.n	8019b6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019b58:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019b5c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019b60:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019b64:	3001      	adds	r0, #1
 8019b66:	eba1 0108 	sub.w	r1, r1, r8
 8019b6a:	3f01      	subs	r7, #1
 8019b6c:	f04f 0901 	mov.w	r9, #1
 8019b70:	e79e      	b.n	8019ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019b72:	449c      	add	ip, r3
 8019b74:	1aff      	subs	r7, r7, r3
 8019b76:	f1b8 0f00 	cmp.w	r8, #0
 8019b7a:	d009      	beq.n	8019b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019b7c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019b80:	9019      	str	r0, [sp, #100]	; 0x64
 8019b82:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019b86:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019b8a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019b8e:	911d      	str	r1, [sp, #116]	; 0x74
 8019b90:	1ad2      	subs	r2, r2, r3
 8019b92:	e6b5      	b.n	8019900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	b923      	cbnz	r3, 8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b9a:	4b04      	ldr	r3, [pc, #16]	; (8019bac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019b9c:	6818      	ldr	r0, [r3, #0]
 8019b9e:	6803      	ldr	r3, [r0, #0]
 8019ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ba2:	4798      	blx	r3
 8019ba4:	b05b      	add	sp, #364	; 0x16c
 8019ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019baa:	bf00      	nop
 8019bac:	20006700 	.word	0x20006700

08019bb0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019bb0:	b570      	push	{r4, r5, r6, lr}
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	2500      	movs	r5, #0
 8019bb6:	7223      	strb	r3, [r4, #8]
 8019bb8:	9804      	ldr	r0, [sp, #16]
 8019bba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019bbe:	8025      	strh	r5, [r4, #0]
 8019bc0:	6061      	str	r1, [r4, #4]
 8019bc2:	7263      	strb	r3, [r4, #9]
 8019bc4:	60e0      	str	r0, [r4, #12]
 8019bc6:	8222      	strh	r2, [r4, #16]
 8019bc8:	8265      	strh	r5, [r4, #18]
 8019bca:	82a5      	strh	r5, [r4, #20]
 8019bcc:	82e5      	strh	r5, [r4, #22]
 8019bce:	8325      	strh	r5, [r4, #24]
 8019bd0:	8365      	strh	r5, [r4, #26]
 8019bd2:	83a5      	strh	r5, [r4, #28]
 8019bd4:	77a5      	strb	r5, [r4, #30]
 8019bd6:	6803      	ldr	r3, [r0, #0]
 8019bd8:	695b      	ldr	r3, [r3, #20]
 8019bda:	4798      	blx	r3
 8019bdc:	4606      	mov	r6, r0
 8019bde:	b1f8      	cbz	r0, 8019c20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019be0:	68e0      	ldr	r0, [r4, #12]
 8019be2:	6803      	ldr	r3, [r0, #0]
 8019be4:	4631      	mov	r1, r6
 8019be6:	68db      	ldr	r3, [r3, #12]
 8019be8:	4798      	blx	r3
 8019bea:	7b43      	ldrb	r3, [r0, #13]
 8019bec:	7a82      	ldrb	r2, [r0, #10]
 8019bee:	005b      	lsls	r3, r3, #1
 8019bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bf4:	4313      	orrs	r3, r2
 8019bf6:	83a3      	strh	r3, [r4, #28]
 8019bf8:	7a63      	ldrb	r3, [r4, #9]
 8019bfa:	2b04      	cmp	r3, #4
 8019bfc:	4605      	mov	r5, r0
 8019bfe:	d10f      	bne.n	8019c20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019c00:	68e0      	ldr	r0, [r4, #12]
 8019c02:	6803      	ldr	r3, [r0, #0]
 8019c04:	462a      	mov	r2, r5
 8019c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c08:	4631      	mov	r1, r6
 8019c0a:	4798      	blx	r3
 8019c0c:	7b6b      	ldrb	r3, [r5, #13]
 8019c0e:	005b      	lsls	r3, r3, #1
 8019c10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019c14:	7aab      	ldrb	r3, [r5, #10]
 8019c16:	4313      	orrs	r3, r2
 8019c18:	4418      	add	r0, r3
 8019c1a:	8ba3      	ldrh	r3, [r4, #28]
 8019c1c:	4418      	add	r0, r3
 8019c1e:	83a0      	strh	r0, [r4, #28]
 8019c20:	4620      	mov	r0, r4
 8019c22:	bd70      	pop	{r4, r5, r6, pc}

08019c24 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c28:	2400      	movs	r4, #0
 8019c2a:	b085      	sub	sp, #20
 8019c2c:	4681      	mov	r9, r0
 8019c2e:	4688      	mov	r8, r1
 8019c30:	4692      	mov	sl, r2
 8019c32:	469b      	mov	fp, r3
 8019c34:	4627      	mov	r7, r4
 8019c36:	4625      	mov	r5, r4
 8019c38:	4626      	mov	r6, r4
 8019c3a:	4554      	cmp	r4, sl
 8019c3c:	da2a      	bge.n	8019c94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019c3e:	2300      	movs	r3, #0
 8019c40:	9303      	str	r3, [sp, #12]
 8019c42:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019c46:	429d      	cmp	r5, r3
 8019c48:	d004      	beq.n	8019c54 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019c4a:	f242 030b 	movw	r3, #8203	; 0x200b
 8019c4e:	429d      	cmp	r5, r3
 8019c50:	bf18      	it	ne
 8019c52:	462f      	movne	r7, r5
 8019c54:	ab03      	add	r3, sp, #12
 8019c56:	4642      	mov	r2, r8
 8019c58:	4659      	mov	r1, fp
 8019c5a:	4648      	mov	r0, r9
 8019c5c:	f002 ffc4 	bl	801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c60:	4605      	mov	r5, r0
 8019c62:	b1b8      	cbz	r0, 8019c94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019c64:	280a      	cmp	r0, #10
 8019c66:	d015      	beq.n	8019c94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019c68:	9a03      	ldr	r2, [sp, #12]
 8019c6a:	b18a      	cbz	r2, 8019c90 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019c6c:	7b50      	ldrb	r0, [r2, #13]
 8019c6e:	7a93      	ldrb	r3, [r2, #10]
 8019c70:	8895      	ldrh	r5, [r2, #4]
 8019c72:	0040      	lsls	r0, r0, #1
 8019c74:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019c78:	4303      	orrs	r3, r0
 8019c7a:	9301      	str	r3, [sp, #4]
 8019c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8019c80:	4639      	mov	r1, r7
 8019c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c84:	4640      	mov	r0, r8
 8019c86:	4798      	blx	r3
 8019c88:	9b01      	ldr	r3, [sp, #4]
 8019c8a:	4418      	add	r0, r3
 8019c8c:	4406      	add	r6, r0
 8019c8e:	b2b6      	uxth	r6, r6
 8019c90:	3401      	adds	r4, #1
 8019c92:	e7d2      	b.n	8019c3a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019c94:	4630      	mov	r0, r6
 8019c96:	b005      	add	sp, #20
 8019c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019c9c:	2a02      	cmp	r2, #2
 8019c9e:	b530      	push	{r4, r5, lr}
 8019ca0:	d011      	beq.n	8019cc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019ca2:	2a03      	cmp	r2, #3
 8019ca4:	d01c      	beq.n	8019ce0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019ca6:	2a01      	cmp	r2, #1
 8019ca8:	d10c      	bne.n	8019cc4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019caa:	888b      	ldrh	r3, [r1, #4]
 8019cac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019cb0:	8801      	ldrh	r1, [r0, #0]
 8019cb2:	8844      	ldrh	r4, [r0, #2]
 8019cb4:	8004      	strh	r4, [r0, #0]
 8019cb6:	1a9b      	subs	r3, r3, r2
 8019cb8:	1a5b      	subs	r3, r3, r1
 8019cba:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019cbe:	8043      	strh	r3, [r0, #2]
 8019cc0:	8081      	strh	r1, [r0, #4]
 8019cc2:	80c2      	strh	r2, [r0, #6]
 8019cc4:	bd30      	pop	{r4, r5, pc}
 8019cc6:	88cb      	ldrh	r3, [r1, #6]
 8019cc8:	88c2      	ldrh	r2, [r0, #6]
 8019cca:	1a9b      	subs	r3, r3, r2
 8019ccc:	8842      	ldrh	r2, [r0, #2]
 8019cce:	1a9b      	subs	r3, r3, r2
 8019cd0:	888a      	ldrh	r2, [r1, #4]
 8019cd2:	8881      	ldrh	r1, [r0, #4]
 8019cd4:	8043      	strh	r3, [r0, #2]
 8019cd6:	1a52      	subs	r2, r2, r1
 8019cd8:	8801      	ldrh	r1, [r0, #0]
 8019cda:	1a52      	subs	r2, r2, r1
 8019cdc:	8002      	strh	r2, [r0, #0]
 8019cde:	e7f1      	b.n	8019cc4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019ce0:	88cb      	ldrh	r3, [r1, #6]
 8019ce2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019ce6:	8841      	ldrh	r1, [r0, #2]
 8019ce8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019cec:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019cf0:	8045      	strh	r5, [r0, #2]
 8019cf2:	1a9b      	subs	r3, r3, r2
 8019cf4:	1a5b      	subs	r3, r3, r1
 8019cf6:	8003      	strh	r3, [r0, #0]
 8019cf8:	8082      	strh	r2, [r0, #4]
 8019cfa:	80c4      	strh	r4, [r0, #6]
 8019cfc:	e7e2      	b.n	8019cc4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019cfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d02:	b09f      	sub	sp, #124	; 0x7c
 8019d04:	9116      	str	r1, [sp, #88]	; 0x58
 8019d06:	9317      	str	r3, [sp, #92]	; 0x5c
 8019d08:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019d0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d0c:	8809      	ldrh	r1, [r1, #0]
 8019d0e:	889b      	ldrh	r3, [r3, #4]
 8019d10:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019d14:	9212      	str	r2, [sp, #72]	; 0x48
 8019d16:	440b      	add	r3, r1
 8019d18:	b21b      	sxth	r3, r3
 8019d1a:	9310      	str	r3, [sp, #64]	; 0x40
 8019d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8019d20:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019d24:	7a59      	ldrb	r1, [r3, #9]
 8019d26:	7a1b      	ldrb	r3, [r3, #8]
 8019d28:	9315      	str	r3, [sp, #84]	; 0x54
 8019d2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019d2c:	9011      	str	r0, [sp, #68]	; 0x44
 8019d2e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019d32:	9114      	str	r1, [sp, #80]	; 0x50
 8019d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019d38:	2a00      	cmp	r2, #0
 8019d3a:	d067      	beq.n	8019e0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019d3c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019d40:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019d42:	2b04      	cmp	r3, #4
 8019d44:	bf14      	ite	ne
 8019d46:	2301      	movne	r3, #1
 8019d48:	2302      	moveq	r3, #2
 8019d4a:	4413      	add	r3, r2
 8019d4c:	f04f 0900 	mov.w	r9, #0
 8019d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019d56:	464c      	mov	r4, r9
 8019d58:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019d5c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019d60:	4293      	cmp	r3, r2
 8019d62:	f280 808c 	bge.w	8019e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019d66:	2300      	movs	r3, #0
 8019d68:	931c      	str	r3, [sp, #112]	; 0x70
 8019d6a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019d6e:	429c      	cmp	r4, r3
 8019d70:	d006      	beq.n	8019d80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8019d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d74:	f242 020b 	movw	r2, #8203	; 0x200b
 8019d78:	4294      	cmp	r4, r2
 8019d7a:	bf18      	it	ne
 8019d7c:	4623      	movne	r3, r4
 8019d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8019d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d82:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019d84:	f8d8 2000 	ldr.w	r2, [r8]
 8019d88:	428b      	cmp	r3, r1
 8019d8a:	db41      	blt.n	8019e10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019d8c:	6813      	ldr	r3, [r2, #0]
 8019d8e:	4610      	mov	r0, r2
 8019d90:	695b      	ldr	r3, [r3, #20]
 8019d92:	4798      	blx	r3
 8019d94:	4604      	mov	r4, r0
 8019d96:	f8d8 0000 	ldr.w	r0, [r8]
 8019d9a:	6803      	ldr	r3, [r0, #0]
 8019d9c:	aa1d      	add	r2, sp, #116	; 0x74
 8019d9e:	689e      	ldr	r6, [r3, #8]
 8019da0:	4621      	mov	r1, r4
 8019da2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019da6:	47b0      	blx	r6
 8019da8:	901c      	str	r0, [sp, #112]	; 0x70
 8019daa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019dae:	429c      	cmp	r4, r3
 8019db0:	f000 80e9 	beq.w	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019db4:	f242 030b 	movw	r3, #8203	; 0x200b
 8019db8:	429c      	cmp	r4, r3
 8019dba:	f000 80e4 	beq.w	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019dbe:	2c00      	cmp	r4, #0
 8019dc0:	f000 80f6 	beq.w	8019fb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8019dc4:	2c0a      	cmp	r4, #10
 8019dc6:	d060      	beq.n	8019e8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019dc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019dca:	b36a      	cbz	r2, 8019e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8019dcc:	8894      	ldrh	r4, [r2, #4]
 8019dce:	f1bb 0f00 	cmp.w	fp, #0
 8019dd2:	d03b      	beq.n	8019e4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019dd4:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019dd8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019ddc:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019de0:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019de4:	f1bb 0f01 	cmp.w	fp, #1
 8019de8:	ea49 0903 	orr.w	r9, r9, r3
 8019dec:	d134      	bne.n	8019e58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8019dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019df0:	eba5 0509 	sub.w	r5, r5, r9
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d14f      	bne.n	8019e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019df8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019dfa:	eb09 0305 	add.w	r3, r9, r5
 8019dfe:	4413      	add	r3, r2
 8019e00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019e02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019e06:	4293      	cmp	r3, r2
 8019e08:	da51      	bge.n	8019eae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019e0a:	e038      	b.n	8019e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019e0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019e0e:	e79d      	b.n	8019d4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019e10:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019e14:	9301      	str	r3, [sp, #4]
 8019e16:	ab1d      	add	r3, sp, #116	; 0x74
 8019e18:	9300      	str	r3, [sp, #0]
 8019e1a:	4659      	mov	r1, fp
 8019e1c:	ab1c      	add	r3, sp, #112	; 0x70
 8019e1e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019e20:	f002 ff3a 	bl	801cc98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019e24:	4604      	mov	r4, r0
 8019e26:	e7c0      	b.n	8019daa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019e28:	f8d8 0000 	ldr.w	r0, [r8]
 8019e2c:	6803      	ldr	r3, [r0, #0]
 8019e2e:	691b      	ldr	r3, [r3, #16]
 8019e30:	4798      	blx	r3
 8019e32:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019e36:	4298      	cmp	r0, r3
 8019e38:	f000 80a5 	beq.w	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019e3c:	f242 030b 	movw	r3, #8203	; 0x200b
 8019e40:	4298      	cmp	r0, r3
 8019e42:	f000 80a0 	beq.w	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019e46:	f1bb 0f00 	cmp.w	fp, #0
 8019e4a:	d100      	bne.n	8019e4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019e4c:	444d      	add	r5, r9
 8019e4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019e50:	2a00      	cmp	r2, #0
 8019e52:	d1bf      	bne.n	8019dd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019e54:	4691      	mov	r9, r2
 8019e56:	e096      	b.n	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	f000 80aa 	beq.w	8019fb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8019e60:	f1bb 0f00 	cmp.w	fp, #0
 8019e64:	d118      	bne.n	8019e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019e66:	f8d8 0000 	ldr.w	r0, [r8]
 8019e6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019e6c:	6803      	ldr	r3, [r0, #0]
 8019e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e70:	4798      	blx	r3
 8019e72:	4405      	add	r5, r0
 8019e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e78:	1aeb      	subs	r3, r5, r3
 8019e7a:	4293      	cmp	r3, r2
 8019e7c:	dd17      	ble.n	8019eae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019e7e:	2c00      	cmp	r4, #0
 8019e80:	f000 8096 	beq.w	8019fb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8019e84:	2c0a      	cmp	r4, #10
 8019e86:	f040 8084 	bne.w	8019f92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8019e8a:	240a      	movs	r4, #10
 8019e8c:	fab4 f084 	clz	r0, r4
 8019e90:	0940      	lsrs	r0, r0, #5
 8019e92:	b01f      	add	sp, #124	; 0x7c
 8019e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e98:	f8d8 0000 	ldr.w	r0, [r8]
 8019e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019e9e:	6803      	ldr	r3, [r0, #0]
 8019ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ea2:	4798      	blx	r3
 8019ea4:	f1bb 0f01 	cmp.w	fp, #1
 8019ea8:	eba5 0500 	sub.w	r5, r5, r0
 8019eac:	d0a4      	beq.n	8019df8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8019eae:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019eb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019eb2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019eba:	7b43      	ldrb	r3, [r0, #13]
 8019ebc:	015b      	lsls	r3, r3, #5
 8019ebe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019ec2:	7983      	ldrb	r3, [r0, #6]
 8019ec4:	4429      	add	r1, r5
 8019ec6:	4313      	orrs	r3, r2
 8019ec8:	440b      	add	r3, r1
 8019eca:	42b3      	cmp	r3, r6
 8019ecc:	db5b      	blt.n	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ed0:	4299      	cmp	r1, r3
 8019ed2:	da58      	bge.n	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019ed4:	f8d8 0000 	ldr.w	r0, [r8]
 8019ed8:	6803      	ldr	r3, [r0, #0]
 8019eda:	42ae      	cmp	r6, r5
 8019edc:	bfc8      	it	gt
 8019ede:	1b76      	subgt	r6, r6, r5
 8019ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ee2:	bfcc      	ite	gt
 8019ee4:	b2b6      	uxthgt	r6, r6
 8019ee6:	2600      	movle	r6, #0
 8019ee8:	4798      	blx	r3
 8019eea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019eec:	7b5a      	ldrb	r2, [r3, #13]
 8019eee:	00d1      	lsls	r1, r2, #3
 8019ef0:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019ef4:	7a19      	ldrb	r1, [r3, #8]
 8019ef6:	4339      	orrs	r1, r7
 8019ef8:	0657      	lsls	r7, r2, #25
 8019efa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019efc:	bf44      	itt	mi
 8019efe:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019f02:	b209      	sxthmi	r1, r1
 8019f04:	19c7      	adds	r7, r0, r7
 8019f06:	1a7f      	subs	r7, r7, r1
 8019f08:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019f0a:	b2bf      	uxth	r7, r7
 8019f0c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019f10:	fa0f fa87 	sxth.w	sl, r7
 8019f14:	4551      	cmp	r1, sl
 8019f16:	dd3a      	ble.n	8019f8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019f18:	0112      	lsls	r2, r2, #4
 8019f1a:	79d8      	ldrb	r0, [r3, #7]
 8019f1c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019f20:	4302      	orrs	r2, r0
 8019f22:	4492      	add	sl, r2
 8019f24:	4551      	cmp	r1, sl
 8019f26:	dc2e      	bgt.n	8019f86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019f28:	1bcf      	subs	r7, r1, r7
 8019f2a:	b2bf      	uxth	r7, r7
 8019f2c:	468a      	mov	sl, r1
 8019f2e:	9319      	str	r3, [sp, #100]	; 0x64
 8019f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019f32:	f8d8 0000 	ldr.w	r0, [r8]
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	6801      	ldr	r1, [r0, #0]
 8019f3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8019f3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019f3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019f40:	9218      	str	r2, [sp, #96]	; 0x60
 8019f42:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019f44:	4788      	blx	r1
 8019f46:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019f4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8019f4c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019f50:	910a      	str	r1, [sp, #40]	; 0x28
 8019f52:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019f56:	9109      	str	r1, [sp, #36]	; 0x24
 8019f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019f5a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019f5e:	9305      	str	r3, [sp, #20]
 8019f60:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019f64:	9206      	str	r2, [sp, #24]
 8019f66:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019f6a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019f6e:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019f72:	442e      	add	r6, r5
 8019f74:	b236      	sxth	r6, r6
 8019f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019f78:	9600      	str	r6, [sp, #0]
 8019f7a:	681a      	ldr	r2, [r3, #0]
 8019f7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019f7e:	685b      	ldr	r3, [r3, #4]
 8019f80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019f82:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019f84:	47b0      	blx	r6
 8019f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f88:	3301      	adds	r3, #1
 8019f8a:	930e      	str	r3, [sp, #56]	; 0x38
 8019f8c:	e6e6      	b.n	8019d5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8019f8e:	2700      	movs	r7, #0
 8019f90:	e7cd      	b.n	8019f2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8019f92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019f94:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019f96:	3501      	adds	r5, #1
 8019f98:	429d      	cmp	r5, r3
 8019f9a:	f6bf af77 	bge.w	8019e8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019f9e:	4659      	mov	r1, fp
 8019fa0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019fa2:	f7f8 ff81 	bl	8012ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	b110      	cbz	r0, 8019fb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8019faa:	280a      	cmp	r0, #10
 8019fac:	d1f2      	bne.n	8019f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019fae:	e76c      	b.n	8019e8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019fb0:	2400      	movs	r4, #0
 8019fb2:	e76b      	b.n	8019e8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019fb4:	f1bb 0f00 	cmp.w	fp, #0
 8019fb8:	f43f af5c 	beq.w	8019e74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019fbc:	e777      	b.n	8019eae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08019fbe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019fbe:	b530      	push	{r4, r5, lr}
 8019fc0:	8a44      	ldrh	r4, [r0, #18]
 8019fc2:	8ac5      	ldrh	r5, [r0, #22]
 8019fc4:	82c3      	strh	r3, [r0, #22]
 8019fc6:	442c      	add	r4, r5
 8019fc8:	1ae4      	subs	r4, r4, r3
 8019fca:	8244      	strh	r4, [r0, #18]
 8019fcc:	8b03      	ldrh	r3, [r0, #24]
 8019fce:	8a84      	ldrh	r4, [r0, #20]
 8019fd0:	4422      	add	r2, r4
 8019fd2:	440c      	add	r4, r1
 8019fd4:	1a59      	subs	r1, r3, r1
 8019fd6:	8342      	strh	r2, [r0, #26]
 8019fd8:	8284      	strh	r4, [r0, #20]
 8019fda:	8301      	strh	r1, [r0, #24]
 8019fdc:	bd30      	pop	{r4, r5, pc}

08019fde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fe2:	7a43      	ldrb	r3, [r0, #9]
 8019fe4:	1eda      	subs	r2, r3, #3
 8019fe6:	b087      	sub	sp, #28
 8019fe8:	4604      	mov	r4, r0
 8019fea:	b2d2      	uxtb	r2, r2
 8019fec:	460f      	mov	r7, r1
 8019fee:	2900      	cmp	r1, #0
 8019ff0:	d036      	beq.n	801a060 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019ff2:	2a01      	cmp	r2, #1
 8019ff4:	d932      	bls.n	801a05c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019ff6:	1e58      	subs	r0, r3, #1
 8019ff8:	f1d0 0b00 	rsbs	fp, r0, #0
 8019ffc:	eb4b 0b00 	adc.w	fp, fp, r0
 801a000:	1e99      	subs	r1, r3, #2
 801a002:	424b      	negs	r3, r1
 801a004:	414b      	adcs	r3, r1
 801a006:	9303      	str	r3, [sp, #12]
 801a008:	2300      	movs	r3, #0
 801a00a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a00e:	2500      	movs	r5, #0
 801a010:	8265      	strh	r5, [r4, #18]
 801a012:	82a5      	strh	r5, [r4, #20]
 801a014:	46a9      	mov	r9, r5
 801a016:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a01a:	2300      	movs	r3, #0
 801a01c:	9305      	str	r3, [sp, #20]
 801a01e:	8823      	ldrh	r3, [r4, #0]
 801a020:	2b20      	cmp	r3, #32
 801a022:	d02b      	beq.n	801a07c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a024:	eba3 020a 	sub.w	r2, r3, sl
 801a028:	4256      	negs	r6, r2
 801a02a:	4156      	adcs	r6, r2
 801a02c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a030:	4293      	cmp	r3, r2
 801a032:	d004      	beq.n	801a03e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a034:	4553      	cmp	r3, sl
 801a036:	bf16      	itet	ne
 801a038:	4699      	movne	r9, r3
 801a03a:	2601      	moveq	r6, #1
 801a03c:	2600      	movne	r6, #0
 801a03e:	ab05      	add	r3, sp, #20
 801a040:	68e2      	ldr	r2, [r4, #12]
 801a042:	7a21      	ldrb	r1, [r4, #8]
 801a044:	6860      	ldr	r0, [r4, #4]
 801a046:	f002 fdcf 	bl	801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a04a:	8020      	strh	r0, [r4, #0]
 801a04c:	b9c8      	cbnz	r0, 801a082 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a04e:	8b22      	ldrh	r2, [r4, #24]
 801a050:	2300      	movs	r3, #0
 801a052:	4611      	mov	r1, r2
 801a054:	4620      	mov	r0, r4
 801a056:	f7ff ffb2 	bl	8019fbe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a05a:	e066      	b.n	801a12a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a05c:	468b      	mov	fp, r1
 801a05e:	e7cf      	b.n	801a000 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a060:	3b01      	subs	r3, #1
 801a062:	2a01      	cmp	r2, #1
 801a064:	bf8c      	ite	hi
 801a066:	2200      	movhi	r2, #0
 801a068:	2201      	movls	r2, #1
 801a06a:	2b01      	cmp	r3, #1
 801a06c:	bf8c      	ite	hi
 801a06e:	2300      	movhi	r3, #0
 801a070:	2301      	movls	r3, #1
 801a072:	9202      	str	r2, [sp, #8]
 801a074:	9301      	str	r3, [sp, #4]
 801a076:	9103      	str	r1, [sp, #12]
 801a078:	468b      	mov	fp, r1
 801a07a:	e7c8      	b.n	801a00e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a07c:	4699      	mov	r9, r3
 801a07e:	2601      	movs	r6, #1
 801a080:	e7dd      	b.n	801a03e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a082:	8ae3      	ldrh	r3, [r4, #22]
 801a084:	280a      	cmp	r0, #10
 801a086:	f103 0301 	add.w	r3, r3, #1
 801a08a:	82e3      	strh	r3, [r4, #22]
 801a08c:	d0df      	beq.n	801a04e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a08e:	9a05      	ldr	r2, [sp, #20]
 801a090:	bb42      	cbnz	r2, 801a0e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a092:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a096:	4298      	cmp	r0, r3
 801a098:	d001      	beq.n	801a09e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a09a:	4550      	cmp	r0, sl
 801a09c:	d1bd      	bne.n	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a09e:	8823      	ldrh	r3, [r4, #0]
 801a0a0:	8b21      	ldrh	r1, [r4, #24]
 801a0a2:	2b20      	cmp	r3, #32
 801a0a4:	d001      	beq.n	801a0aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a0a6:	4553      	cmp	r3, sl
 801a0a8:	d131      	bne.n	801a10e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a0aa:	2e00      	cmp	r6, #0
 801a0ac:	bf0a      	itet	eq
 801a0ae:	460d      	moveq	r5, r1
 801a0b0:	4630      	movne	r0, r6
 801a0b2:	2001      	moveq	r0, #1
 801a0b4:	440a      	add	r2, r1
 801a0b6:	8aa3      	ldrh	r3, [r4, #20]
 801a0b8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a0bc:	b292      	uxth	r2, r2
 801a0be:	8322      	strh	r2, [r4, #24]
 801a0c0:	4413      	add	r3, r2
 801a0c2:	2f00      	cmp	r7, #0
 801a0c4:	d03a      	beq.n	801a13c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a0c6:	f1bb 0f00 	cmp.w	fp, #0
 801a0ca:	d102      	bne.n	801a0d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a0cc:	9903      	ldr	r1, [sp, #12]
 801a0ce:	b301      	cbz	r1, 801a112 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a0d0:	b1f8      	cbz	r0, 801a112 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a0d2:	8ba1      	ldrh	r1, [r4, #28]
 801a0d4:	4419      	add	r1, r3
 801a0d6:	458c      	cmp	ip, r1
 801a0d8:	da2a      	bge.n	801a130 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a0da:	8a61      	ldrh	r1, [r4, #18]
 801a0dc:	b341      	cbz	r1, 801a130 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a0de:	4563      	cmp	r3, ip
 801a0e0:	dd9b      	ble.n	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a0e2:	e01c      	b.n	801a11e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a0e4:	8893      	ldrh	r3, [r2, #4]
 801a0e6:	8023      	strh	r3, [r4, #0]
 801a0e8:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a0ec:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a0f0:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a0f4:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a0f8:	ea48 0800 	orr.w	r8, r8, r0
 801a0fc:	68e0      	ldr	r0, [r4, #12]
 801a0fe:	6803      	ldr	r3, [r0, #0]
 801a100:	4649      	mov	r1, r9
 801a102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a104:	4798      	blx	r3
 801a106:	eb08 0200 	add.w	r2, r8, r0
 801a10a:	b292      	uxth	r2, r2
 801a10c:	e7c7      	b.n	801a09e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a10e:	2000      	movs	r0, #0
 801a110:	e7d0      	b.n	801a0b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a112:	4563      	cmp	r3, ip
 801a114:	dd81      	ble.n	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a116:	8a63      	ldrh	r3, [r4, #18]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	f43f af7e 	beq.w	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a11e:	2301      	movs	r3, #1
 801a120:	77a3      	strb	r3, [r4, #30]
 801a122:	8ba2      	ldrh	r2, [r4, #28]
 801a124:	8b63      	ldrh	r3, [r4, #26]
 801a126:	4413      	add	r3, r2
 801a128:	8363      	strh	r3, [r4, #26]
 801a12a:	b007      	add	sp, #28
 801a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a130:	2300      	movs	r3, #0
 801a132:	4611      	mov	r1, r2
 801a134:	4620      	mov	r0, r4
 801a136:	f7ff ff42 	bl	8019fbe <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a13a:	e76e      	b.n	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a13c:	4563      	cmp	r3, ip
 801a13e:	dd14      	ble.n	801a16a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a140:	9b02      	ldr	r3, [sp, #8]
 801a142:	b113      	cbz	r3, 801a14a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a144:	2301      	movs	r3, #1
 801a146:	460a      	mov	r2, r1
 801a148:	e783      	b.n	801a052 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a14a:	9b01      	ldr	r3, [sp, #4]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	f43f af64 	beq.w	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a152:	2800      	cmp	r0, #0
 801a154:	f47f af61 	bne.w	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a158:	b116      	cbz	r6, 801a160 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a15a:	2301      	movs	r3, #1
 801a15c:	462a      	mov	r2, r5
 801a15e:	e779      	b.n	801a054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a160:	8a63      	ldrh	r3, [r4, #18]
 801a162:	2b00      	cmp	r3, #0
 801a164:	f43f af59 	beq.w	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a168:	e7df      	b.n	801a12a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a16a:	2800      	cmp	r0, #0
 801a16c:	f47f af55 	bne.w	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a170:	2e00      	cmp	r6, #0
 801a172:	f43f af52 	beq.w	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a176:	2301      	movs	r3, #1
 801a178:	462a      	mov	r2, r5
 801a17a:	e7db      	b.n	801a134 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a17c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a17c:	b530      	push	{r4, r5, lr}
 801a17e:	4605      	mov	r5, r0
 801a180:	b08b      	sub	sp, #44	; 0x2c
 801a182:	b191      	cbz	r1, 801a1aa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a184:	e9cd 3100 	strd	r3, r1, [sp]
 801a188:	4613      	mov	r3, r2
 801a18a:	4601      	mov	r1, r0
 801a18c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a190:	a802      	add	r0, sp, #8
 801a192:	f7ff fd0d 	bl	8019bb0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a196:	2401      	movs	r4, #1
 801a198:	2100      	movs	r1, #0
 801a19a:	a802      	add	r0, sp, #8
 801a19c:	f7ff ff1f 	bl	8019fde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a1a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a1a4:	b163      	cbz	r3, 801a1c0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a1a6:	3401      	adds	r4, #1
 801a1a8:	e7f6      	b.n	801a198 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801a1aa:	f002 fe15 	bl	801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a1ae:	2401      	movs	r4, #1
 801a1b0:	280a      	cmp	r0, #10
 801a1b2:	4628      	mov	r0, r5
 801a1b4:	bf08      	it	eq
 801a1b6:	3401      	addeq	r4, #1
 801a1b8:	f002 fe0e 	bl	801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a1bc:	2800      	cmp	r0, #0
 801a1be:	d1f7      	bne.n	801a1b0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a1c0:	b2a0      	uxth	r0, r4
 801a1c2:	b00b      	add	sp, #44	; 0x2c
 801a1c4:	bd30      	pop	{r4, r5, pc}

0801a1c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a1c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1ca:	b0df      	sub	sp, #380	; 0x17c
 801a1cc:	4689      	mov	r9, r1
 801a1ce:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 801a1d2:	900a      	str	r0, [sp, #40]	; 0x28
 801a1d4:	461c      	mov	r4, r3
 801a1d6:	f1ba 0f00 	cmp.w	sl, #0
 801a1da:	f000 80b1 	beq.w	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f000 80ad 	beq.w	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a1e6:	7ba3      	ldrb	r3, [r4, #14]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	f000 80a9 	beq.w	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a1ee:	6810      	ldr	r0, [r2, #0]
 801a1f0:	6851      	ldr	r1, [r2, #4]
 801a1f2:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a1f6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a1fa:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801a1fe:	4643      	mov	r3, r8
 801a200:	c303      	stmia	r3!, {r0, r1}
 801a202:	2500      	movs	r5, #0
 801a204:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801a208:	79a2      	ldrb	r2, [r4, #6]
 801a20a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a20e:	a90f      	add	r1, sp, #60	; 0x3c
 801a210:	4640      	mov	r0, r8
 801a212:	950f      	str	r5, [sp, #60]	; 0x3c
 801a214:	f7ff fd42 	bl	8019c9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a218:	a90f      	add	r1, sp, #60	; 0x3c
 801a21a:	4608      	mov	r0, r1
 801a21c:	79a2      	ldrb	r2, [r4, #6]
 801a21e:	af19      	add	r7, sp, #100	; 0x64
 801a220:	f7ff fd3c 	bl	8019c9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a224:	4638      	mov	r0, r7
 801a226:	f002 f997 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 801a22a:	6820      	ldr	r0, [r4, #0]
 801a22c:	6803      	ldr	r3, [r0, #0]
 801a22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a230:	4798      	blx	r3
 801a232:	4606      	mov	r6, r0
 801a234:	6820      	ldr	r0, [r4, #0]
 801a236:	6803      	ldr	r3, [r0, #0]
 801a238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a23a:	4798      	blx	r3
 801a23c:	4633      	mov	r3, r6
 801a23e:	9000      	str	r0, [sp, #0]
 801a240:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801a242:	4651      	mov	r1, sl
 801a244:	4638      	mov	r0, r7
 801a246:	f002 f9d4 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a24a:	6820      	ldr	r0, [r4, #0]
 801a24c:	7923      	ldrb	r3, [r4, #4]
 801a24e:	9308      	str	r3, [sp, #32]
 801a250:	6803      	ldr	r3, [r0, #0]
 801a252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a254:	4798      	blx	r3
 801a256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a25a:	181e      	adds	r6, r3, r0
 801a25c:	42ae      	cmp	r6, r5
 801a25e:	dd06      	ble.n	801a26e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801a260:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a264:	4282      	cmp	r2, r0
 801a266:	bfa4      	itt	ge
 801a268:	189d      	addge	r5, r3, r2
 801a26a:	fb95 f5f6 	sdivge	r5, r5, r6
 801a26e:	a830      	add	r0, sp, #192	; 0xc0
 801a270:	f002 f972 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 801a274:	7c23      	ldrb	r3, [r4, #16]
 801a276:	b17b      	cbz	r3, 801a298 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801a278:	6820      	ldr	r0, [r4, #0]
 801a27a:	6803      	ldr	r3, [r0, #0]
 801a27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a27e:	4798      	blx	r3
 801a280:	4683      	mov	fp, r0
 801a282:	6820      	ldr	r0, [r4, #0]
 801a284:	6803      	ldr	r3, [r0, #0]
 801a286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a288:	4798      	blx	r3
 801a28a:	465b      	mov	r3, fp
 801a28c:	9000      	str	r0, [sp, #0]
 801a28e:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801a290:	4651      	mov	r1, sl
 801a292:	a830      	add	r0, sp, #192	; 0xc0
 801a294:	f002 f9ad 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a298:	7c21      	ldrb	r1, [r4, #16]
 801a29a:	9101      	str	r1, [sp, #4]
 801a29c:	6821      	ldr	r1, [r4, #0]
 801a29e:	7963      	ldrb	r3, [r4, #5]
 801a2a0:	9100      	str	r1, [sp, #0]
 801a2a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a2a6:	a930      	add	r1, sp, #192	; 0xc0
 801a2a8:	a811      	add	r0, sp, #68	; 0x44
 801a2aa:	f7ff fc81 	bl	8019bb0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a2ae:	7c23      	ldrb	r3, [r4, #16]
 801a2b0:	b9bb      	cbnz	r3, 801a2e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 801a2b2:	fa1f fa86 	uxth.w	sl, r6
 801a2b6:	2d00      	cmp	r5, #0
 801a2b8:	dd45      	ble.n	801a346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a2ba:	4638      	mov	r0, r7
 801a2bc:	f002 fd8c 	bl	801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a2c0:	2800      	cmp	r0, #0
 801a2c2:	d03d      	beq.n	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a2c4:	280a      	cmp	r0, #10
 801a2c6:	d1f6      	bne.n	801a2b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801a2c8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a2cc:	4453      	add	r3, sl
 801a2ce:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a2d2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a2d6:	eba3 030a 	sub.w	r3, r3, sl
 801a2da:	3d01      	subs	r5, #1
 801a2dc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a2e0:	e7e9      	b.n	801a2b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801a2e2:	0073      	lsls	r3, r6, #1
 801a2e4:	9309      	str	r3, [sp, #36]	; 0x24
 801a2e6:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a2ea:	fa1f fa86 	uxth.w	sl, r6
 801a2ee:	2d00      	cmp	r5, #0
 801a2f0:	dd29      	ble.n	801a346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a2f2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2f8:	428b      	cmp	r3, r1
 801a2fa:	bfd4      	ite	le
 801a2fc:	2100      	movle	r1, #0
 801a2fe:	2101      	movgt	r1, #1
 801a300:	a811      	add	r0, sp, #68	; 0x44
 801a302:	f7ff fe6c 	bl	8019fde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a306:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801a30a:	3b01      	subs	r3, #1
 801a30c:	b29b      	uxth	r3, r3
 801a30e:	455b      	cmp	r3, fp
 801a310:	930b      	str	r3, [sp, #44]	; 0x2c
 801a312:	d005      	beq.n	801a320 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 801a314:	7961      	ldrb	r1, [r4, #5]
 801a316:	4638      	mov	r0, r7
 801a318:	f7f8 fdc6 	bl	8012ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a31e:	e7f4      	b.n	801a30a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a320:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a324:	4453      	add	r3, sl
 801a326:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a32a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a32e:	eba3 030a 	sub.w	r3, r3, sl
 801a332:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a336:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a33a:	3d01      	subs	r5, #1
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d1d6      	bne.n	801a2ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 801a340:	b05f      	add	sp, #380	; 0x17c
 801a342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a346:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801a34a:	ad47      	add	r5, sp, #284	; 0x11c
 801a34c:	f04f 0b00 	mov.w	fp, #0
 801a350:	7c23      	ldrb	r3, [r4, #16]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d067      	beq.n	801a426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a356:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a35a:	458a      	cmp	sl, r1
 801a35c:	bfd4      	ite	le
 801a35e:	2100      	movle	r1, #0
 801a360:	2101      	movgt	r1, #1
 801a362:	a811      	add	r0, sp, #68	; 0x44
 801a364:	f7ff fe3b 	bl	8019fde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a368:	9b08      	ldr	r3, [sp, #32]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d056      	beq.n	801a41c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a36e:	7c23      	ldrb	r3, [r4, #16]
 801a370:	9309      	str	r3, [sp, #36]	; 0x24
 801a372:	225c      	movs	r2, #92	; 0x5c
 801a374:	4639      	mov	r1, r7
 801a376:	4628      	mov	r0, r5
 801a378:	f012 f9ee 	bl	802c758 <memcpy>
 801a37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d059      	beq.n	801a436 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a382:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a386:	7922      	ldrb	r2, [r4, #4]
 801a388:	2a01      	cmp	r2, #1
 801a38a:	d13d      	bne.n	801a408 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a38c:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801a390:	1ac0      	subs	r0, r0, r3
 801a392:	2302      	movs	r3, #2
 801a394:	fb90 f0f3 	sdiv	r0, r0, r3
 801a398:	b200      	sxth	r0, r0
 801a39a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a39e:	4418      	add	r0, r3
 801a3a0:	7c23      	ldrb	r3, [r4, #16]
 801a3a2:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d03a      	beq.n	801a420 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801a3aa:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801a3ae:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801a3b2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a3b6:	9500      	str	r5, [sp, #0]
 801a3b8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a3bc:	e9cd b703 	strd	fp, r7, [sp, #12]
 801a3c0:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a3c4:	464a      	mov	r2, r9
 801a3c6:	2100      	movs	r1, #0
 801a3c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a3ca:	f7ff fc98 	bl	8019cfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	d1b6      	bne.n	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a3d2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a3d6:	b2b2      	uxth	r2, r6
 801a3d8:	4611      	mov	r1, r2
 801a3da:	4413      	add	r3, r2
 801a3dc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a3e0:	1a52      	subs	r2, r2, r1
 801a3e2:	7c21      	ldrb	r1, [r4, #16]
 801a3e4:	b21b      	sxth	r3, r3
 801a3e6:	b212      	sxth	r2, r2
 801a3e8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a3ec:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a3f0:	b109      	cbz	r1, 801a3f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801a3f2:	42b2      	cmp	r2, r6
 801a3f4:	dba4      	blt.n	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a3f6:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a3fa:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a3fe:	440a      	add	r2, r1
 801a400:	b212      	sxth	r2, r2
 801a402:	4293      	cmp	r3, r2
 801a404:	dda4      	ble.n	801a350 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801a406:	e79b      	b.n	801a340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a408:	2a02      	cmp	r2, #2
 801a40a:	d105      	bne.n	801a418 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a40c:	7be2      	ldrb	r2, [r4, #15]
 801a40e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801a412:	1a80      	subs	r0, r0, r2
 801a414:	1ac0      	subs	r0, r0, r3
 801a416:	e7bf      	b.n	801a398 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801a418:	2000      	movs	r0, #0
 801a41a:	e7be      	b.n	801a39a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801a41c:	7be0      	ldrb	r0, [r4, #15]
 801a41e:	e7bc      	b.n	801a39a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801a420:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a424:	e7c3      	b.n	801a3ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801a426:	9b08      	ldr	r3, [sp, #32]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d0f7      	beq.n	801a41c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a42c:	225c      	movs	r2, #92	; 0x5c
 801a42e:	4639      	mov	r1, r7
 801a430:	4628      	mov	r0, r5
 801a432:	f012 f991 	bl	802c758 <memcpy>
 801a436:	2300      	movs	r3, #0
 801a438:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a43c:	6821      	ldr	r1, [r4, #0]
 801a43e:	4628      	mov	r0, r5
 801a440:	f7ff fbf0 	bl	8019c24 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a444:	b203      	sxth	r3, r0
 801a446:	e79e      	b.n	801a386 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

0801a448 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a448:	b510      	push	{r4, lr}
 801a44a:	2b02      	cmp	r3, #2
 801a44c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a450:	d00b      	beq.n	801a46a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a452:	2b03      	cmp	r3, #3
 801a454:	d00e      	beq.n	801a474 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a456:	2b01      	cmp	r3, #1
 801a458:	d001      	beq.n	801a45e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a45a:	1860      	adds	r0, r4, r1
 801a45c:	bd10      	pop	{r4, pc}
 801a45e:	8880      	ldrh	r0, [r0, #4]
 801a460:	4420      	add	r0, r4
 801a462:	b200      	sxth	r0, r0
 801a464:	1a80      	subs	r0, r0, r2
 801a466:	3801      	subs	r0, #1
 801a468:	e7f8      	b.n	801a45c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a46a:	8880      	ldrh	r0, [r0, #4]
 801a46c:	4420      	add	r0, r4
 801a46e:	b200      	sxth	r0, r0
 801a470:	1a40      	subs	r0, r0, r1
 801a472:	e7f8      	b.n	801a466 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a474:	18a0      	adds	r0, r4, r2
 801a476:	e7f1      	b.n	801a45c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a478 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a478:	b510      	push	{r4, lr}
 801a47a:	2b02      	cmp	r3, #2
 801a47c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a480:	d006      	beq.n	801a490 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a482:	2b03      	cmp	r3, #3
 801a484:	d00a      	beq.n	801a49c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a486:	2b01      	cmp	r3, #1
 801a488:	bf14      	ite	ne
 801a48a:	18a0      	addne	r0, r4, r2
 801a48c:	1860      	addeq	r0, r4, r1
 801a48e:	bd10      	pop	{r4, pc}
 801a490:	88c0      	ldrh	r0, [r0, #6]
 801a492:	4420      	add	r0, r4
 801a494:	b200      	sxth	r0, r0
 801a496:	1a80      	subs	r0, r0, r2
 801a498:	3801      	subs	r0, #1
 801a49a:	e7f8      	b.n	801a48e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a49c:	88c0      	ldrh	r0, [r0, #6]
 801a49e:	4420      	add	r0, r4
 801a4a0:	b200      	sxth	r0, r0
 801a4a2:	1a40      	subs	r0, r0, r1
 801a4a4:	e7f8      	b.n	801a498 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a4a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a4a8:	4b01      	ldr	r3, [pc, #4]	; (801a4b0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	601a      	str	r2, [r3, #0]
 801a4ae:	4770      	bx	lr
 801a4b0:	20006708 	.word	0x20006708

0801a4b4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	b1c8      	cbz	r0, 801a4ec <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a4b8:	0c02      	lsrs	r2, r0, #16
 801a4ba:	0412      	lsls	r2, r2, #16
 801a4bc:	b9a2      	cbnz	r2, 801a4e8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a4be:	0403      	lsls	r3, r0, #16
 801a4c0:	2010      	movs	r0, #16
 801a4c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a4c6:	bf04      	itt	eq
 801a4c8:	021b      	lsleq	r3, r3, #8
 801a4ca:	3008      	addeq	r0, #8
 801a4cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a4d0:	bf04      	itt	eq
 801a4d2:	011b      	lsleq	r3, r3, #4
 801a4d4:	3004      	addeq	r0, #4
 801a4d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a4da:	bf04      	itt	eq
 801a4dc:	009b      	lsleq	r3, r3, #2
 801a4de:	3002      	addeq	r0, #2
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	db04      	blt.n	801a4ee <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a4e4:	3001      	adds	r0, #1
 801a4e6:	4770      	bx	lr
 801a4e8:	2000      	movs	r0, #0
 801a4ea:	e7ea      	b.n	801a4c2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a4ec:	2020      	movs	r0, #32
 801a4ee:	4770      	bx	lr

0801a4f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4f4:	b087      	sub	sp, #28
 801a4f6:	4681      	mov	r9, r0
 801a4f8:	4698      	mov	r8, r3
 801a4fa:	4610      	mov	r0, r2
 801a4fc:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a500:	460d      	mov	r5, r1
 801a502:	b981      	cbnz	r1, 801a526 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a504:	b14b      	cbz	r3, 801a51a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a506:	460b      	mov	r3, r1
 801a508:	e9cd 4700 	strd	r4, r7, [sp]
 801a50c:	464a      	mov	r2, r9
 801a50e:	4641      	mov	r1, r8
 801a510:	f7ff ffee 	bl	801a4f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a514:	b007      	add	sp, #28
 801a516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a51a:	f04f 33ff 	mov.w	r3, #4294967295
 801a51e:	603b      	str	r3, [r7, #0]
 801a520:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a524:	e7f6      	b.n	801a514 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a526:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a52a:	d107      	bne.n	801a53c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a52c:	fb09 f602 	mul.w	r6, r9, r2
 801a530:	fbb6 f0f4 	udiv	r0, r6, r4
 801a534:	fb04 6610 	mls	r6, r4, r0, r6
 801a538:	603e      	str	r6, [r7, #0]
 801a53a:	e7eb      	b.n	801a514 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a53c:	2601      	movs	r6, #1
 801a53e:	408e      	lsls	r6, r1
 801a540:	3e01      	subs	r6, #1
 801a542:	4016      	ands	r6, r2
 801a544:	fa09 fb01 	lsl.w	fp, r9, r1
 801a548:	4630      	mov	r0, r6
 801a54a:	fbbb f3f4 	udiv	r3, fp, r4
 801a54e:	9302      	str	r3, [sp, #8]
 801a550:	fb0a f303 	mul.w	r3, sl, r3
 801a554:	9303      	str	r3, [sp, #12]
 801a556:	f7ff ffad 	bl	801a4b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a55a:	464a      	mov	r2, r9
 801a55c:	460b      	mov	r3, r1
 801a55e:	e9cd 4700 	strd	r4, r7, [sp]
 801a562:	4601      	mov	r1, r0
 801a564:	4630      	mov	r0, r6
 801a566:	f7ff ffc3 	bl	801a4f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a56a:	9b02      	ldr	r3, [sp, #8]
 801a56c:	fb04 bb13 	mls	fp, r4, r3, fp
 801a570:	4606      	mov	r6, r0
 801a572:	4658      	mov	r0, fp
 801a574:	eb05 0108 	add.w	r1, r5, r8
 801a578:	f7ff ff9c 	bl	801a4b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a57c:	ab05      	add	r3, sp, #20
 801a57e:	e9cd 4300 	strd	r4, r3, [sp]
 801a582:	465a      	mov	r2, fp
 801a584:	4603      	mov	r3, r0
 801a586:	4650      	mov	r0, sl
 801a588:	f7ff ffb2 	bl	801a4f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a58c:	6839      	ldr	r1, [r7, #0]
 801a58e:	9a05      	ldr	r2, [sp, #20]
 801a590:	9b03      	ldr	r3, [sp, #12]
 801a592:	4411      	add	r1, r2
 801a594:	fbb1 f2f4 	udiv	r2, r1, r4
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	441e      	add	r6, r3
 801a59c:	fb04 1412 	mls	r4, r4, r2, r1
 801a5a0:	4430      	add	r0, r6
 801a5a2:	603c      	str	r4, [r7, #0]
 801a5a4:	e7b6      	b.n	801a514 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a5a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a5a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5aa:	b085      	sub	sp, #20
 801a5ac:	f1b0 0900 	subs.w	r9, r0, #0
 801a5b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a5b2:	461d      	mov	r5, r3
 801a5b4:	bfbf      	itttt	lt
 801a5b6:	6823      	ldrlt	r3, [r4, #0]
 801a5b8:	425b      	neglt	r3, r3
 801a5ba:	f1c9 0900 	rsblt	r9, r9, #0
 801a5be:	6023      	strlt	r3, [r4, #0]
 801a5c0:	bfb4      	ite	lt
 801a5c2:	f04f 36ff 	movlt.w	r6, #4294967295
 801a5c6:	2601      	movge	r6, #1
 801a5c8:	2a00      	cmp	r2, #0
 801a5ca:	4617      	mov	r7, r2
 801a5cc:	da04      	bge.n	801a5d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a5ce:	6823      	ldr	r3, [r4, #0]
 801a5d0:	425b      	negs	r3, r3
 801a5d2:	4257      	negs	r7, r2
 801a5d4:	4276      	negs	r6, r6
 801a5d6:	6023      	str	r3, [r4, #0]
 801a5d8:	2d00      	cmp	r5, #0
 801a5da:	4638      	mov	r0, r7
 801a5dc:	bfba      	itte	lt
 801a5de:	426d      	neglt	r5, r5
 801a5e0:	f04f 38ff 	movlt.w	r8, #4294967295
 801a5e4:	f04f 0801 	movge.w	r8, #1
 801a5e8:	f7ff ff64 	bl	801a4b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a5ec:	ab03      	add	r3, sp, #12
 801a5ee:	e9cd 5300 	strd	r5, r3, [sp]
 801a5f2:	463a      	mov	r2, r7
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	4648      	mov	r0, r9
 801a5f8:	f7ff ff7a 	bl	801a4f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a5fc:	6823      	ldr	r3, [r4, #0]
 801a5fe:	9a03      	ldr	r2, [sp, #12]
 801a600:	4546      	cmp	r6, r8
 801a602:	441a      	add	r2, r3
 801a604:	fb92 f3f5 	sdiv	r3, r2, r5
 801a608:	4418      	add	r0, r3
 801a60a:	bf18      	it	ne
 801a60c:	4240      	negne	r0, r0
 801a60e:	fb05 2313 	mls	r3, r5, r3, r2
 801a612:	1c72      	adds	r2, r6, #1
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	d105      	bne.n	801a624 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f1c3 0200 	rsb	r2, r3, #0
 801a61e:	db0b      	blt.n	801a638 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a620:	6022      	str	r2, [r4, #0]
 801a622:	e006      	b.n	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a624:	2e01      	cmp	r6, #1
 801a626:	d104      	bne.n	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a628:	2b00      	cmp	r3, #0
 801a62a:	da02      	bge.n	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a62c:	442b      	add	r3, r5
 801a62e:	3801      	subs	r0, #1
 801a630:	6023      	str	r3, [r4, #0]
 801a632:	b005      	add	sp, #20
 801a634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a638:	3801      	subs	r0, #1
 801a63a:	1b52      	subs	r2, r2, r5
 801a63c:	e7f0      	b.n	801a620 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a640 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a640:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a644:	4c1c      	ldr	r4, [pc, #112]	; (801a6b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a646:	6807      	ldr	r7, [r0, #0]
 801a648:	69a3      	ldr	r3, [r4, #24]
 801a64a:	4605      	mov	r5, r0
 801a64c:	b92b      	cbnz	r3, 801a65a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a64e:	6840      	ldr	r0, [r0, #4]
 801a650:	e9c5 7000 	strd	r7, r0, [r5]
 801a654:	b004      	add	sp, #16
 801a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a65a:	68a2      	ldr	r2, [r4, #8]
 801a65c:	6820      	ldr	r0, [r4, #0]
 801a65e:	ae04      	add	r6, sp, #16
 801a660:	f04f 0802 	mov.w	r8, #2
 801a664:	fb93 f1f8 	sdiv	r1, r3, r8
 801a668:	440a      	add	r2, r1
 801a66a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a66e:	69e1      	ldr	r1, [r4, #28]
 801a670:	9600      	str	r6, [sp, #0]
 801a672:	463a      	mov	r2, r7
 801a674:	f7ff ff97 	bl	801a5a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a678:	69a3      	ldr	r3, [r4, #24]
 801a67a:	686a      	ldr	r2, [r5, #4]
 801a67c:	6a21      	ldr	r1, [r4, #32]
 801a67e:	9600      	str	r6, [sp, #0]
 801a680:	4607      	mov	r7, r0
 801a682:	6860      	ldr	r0, [r4, #4]
 801a684:	f7ff ff8f 	bl	801a5a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a688:	6962      	ldr	r2, [r4, #20]
 801a68a:	69a3      	ldr	r3, [r4, #24]
 801a68c:	fb93 f8f8 	sdiv	r8, r3, r8
 801a690:	4442      	add	r2, r8
 801a692:	9203      	str	r2, [sp, #12]
 801a694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a696:	682a      	ldr	r2, [r5, #0]
 801a698:	9600      	str	r6, [sp, #0]
 801a69a:	4407      	add	r7, r0
 801a69c:	68e0      	ldr	r0, [r4, #12]
 801a69e:	f7ff ff82 	bl	801a5a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a6a2:	9600      	str	r6, [sp, #0]
 801a6a4:	4680      	mov	r8, r0
 801a6a6:	69a3      	ldr	r3, [r4, #24]
 801a6a8:	686a      	ldr	r2, [r5, #4]
 801a6aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a6ac:	6920      	ldr	r0, [r4, #16]
 801a6ae:	f7ff ff7a 	bl	801a5a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a6b2:	4440      	add	r0, r8
 801a6b4:	e7cc      	b.n	801a650 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a6b6:	bf00      	nop
 801a6b8:	2000670c 	.word	0x2000670c

0801a6bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a6bc:	b510      	push	{r4, lr}
 801a6be:	4b07      	ldr	r3, [pc, #28]	; (801a6dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	2b01      	cmp	r3, #1
 801a6c4:	d108      	bne.n	801a6d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a6c6:	4b06      	ldr	r3, [pc, #24]	; (801a6e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a6c8:	880c      	ldrh	r4, [r1, #0]
 801a6ca:	881b      	ldrh	r3, [r3, #0]
 801a6cc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a6d0:	3b01      	subs	r3, #1
 801a6d2:	1b1b      	subs	r3, r3, r4
 801a6d4:	8003      	strh	r3, [r0, #0]
 801a6d6:	800a      	strh	r2, [r1, #0]
 801a6d8:	bd10      	pop	{r4, pc}
 801a6da:	bf00      	nop
 801a6dc:	200066f8 	.word	0x200066f8
 801a6e0:	200066fc 	.word	0x200066fc

0801a6e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a6e4:	b510      	push	{r4, lr}
 801a6e6:	4b0a      	ldr	r3, [pc, #40]	; (801a710 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a6e8:	781b      	ldrb	r3, [r3, #0]
 801a6ea:	2b01      	cmp	r3, #1
 801a6ec:	d10e      	bne.n	801a70c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a6ee:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a6f2:	8843      	ldrh	r3, [r0, #2]
 801a6f4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a6f8:	8044      	strh	r4, [r0, #2]
 801a6fa:	18ca      	adds	r2, r1, r3
 801a6fc:	4b05      	ldr	r3, [pc, #20]	; (801a714 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a6fe:	881b      	ldrh	r3, [r3, #0]
 801a700:	1a9b      	subs	r3, r3, r2
 801a702:	8003      	strh	r3, [r0, #0]
 801a704:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a708:	80c3      	strh	r3, [r0, #6]
 801a70a:	8081      	strh	r1, [r0, #4]
 801a70c:	bd10      	pop	{r4, pc}
 801a70e:	bf00      	nop
 801a710:	200066f8 	.word	0x200066f8
 801a714:	200066f4 	.word	0x200066f4

0801a718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a718:	b510      	push	{r4, lr}
 801a71a:	4b07      	ldr	r3, [pc, #28]	; (801a738 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a71c:	781b      	ldrb	r3, [r3, #0]
 801a71e:	2b01      	cmp	r3, #1
 801a720:	d108      	bne.n	801a734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a722:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a726:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a72a:	8003      	strh	r3, [r0, #0]
 801a72c:	8893      	ldrh	r3, [r2, #4]
 801a72e:	3b01      	subs	r3, #1
 801a730:	1b1b      	subs	r3, r3, r4
 801a732:	800b      	strh	r3, [r1, #0]
 801a734:	bd10      	pop	{r4, pc}
 801a736:	bf00      	nop
 801a738:	200066f8 	.word	0x200066f8

0801a73c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a73c:	b513      	push	{r0, r1, r4, lr}
 801a73e:	4b08      	ldr	r3, [pc, #32]	; (801a760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a740:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a744:	4b07      	ldr	r3, [pc, #28]	; (801a764 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a746:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a74a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a74e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a752:	2400      	movs	r4, #0
 801a754:	466a      	mov	r2, sp
 801a756:	9400      	str	r4, [sp, #0]
 801a758:	f7ff ffde 	bl	801a718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a75c:	b002      	add	sp, #8
 801a75e:	bd10      	pop	{r4, pc}
 801a760:	200066f4 	.word	0x200066f4
 801a764:	200066f6 	.word	0x200066f6

0801a768 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801a768:	4b0b      	ldr	r3, [pc, #44]	; (801a798 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801a76a:	781b      	ldrb	r3, [r3, #0]
 801a76c:	2b01      	cmp	r3, #1
 801a76e:	d111      	bne.n	801a794 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801a770:	680b      	ldr	r3, [r1, #0]
 801a772:	ed90 7a00 	vldr	s14, [r0]
 801a776:	6003      	str	r3, [r0, #0]
 801a778:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801a77c:	eddf 6a07 	vldr	s13, [pc, #28]	; 801a79c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801a780:	ee07 3a90 	vmov	s15, r3
 801a784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a788:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a78c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a790:	edc1 7a00 	vstr	s15, [r1]
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	200066f8 	.word	0x200066f8
 801a79c:	38d1b717 	.word	0x38d1b717

0801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a7a0:	b510      	push	{r4, lr}
 801a7a2:	4b0a      	ldr	r3, [pc, #40]	; (801a7cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	2b01      	cmp	r3, #1
 801a7a8:	460a      	mov	r2, r1
 801a7aa:	d10d      	bne.n	801a7c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a7ac:	8881      	ldrh	r1, [r0, #4]
 801a7ae:	8803      	ldrh	r3, [r0, #0]
 801a7b0:	440b      	add	r3, r1
 801a7b2:	4601      	mov	r1, r0
 801a7b4:	3b01      	subs	r3, #1
 801a7b6:	f821 3b02 	strh.w	r3, [r1], #2
 801a7ba:	f7ff ffad 	bl	801a718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a7be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a7c2:	88c2      	ldrh	r2, [r0, #6]
 801a7c4:	8082      	strh	r2, [r0, #4]
 801a7c6:	80c3      	strh	r3, [r0, #6]
 801a7c8:	bd10      	pop	{r4, pc}
 801a7ca:	bf00      	nop
 801a7cc:	200066f8 	.word	0x200066f8

0801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a7d0:	b507      	push	{r0, r1, r2, lr}
 801a7d2:	4b09      	ldr	r3, [pc, #36]	; (801a7f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a7d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7d8:	4b08      	ldr	r3, [pc, #32]	; (801a7fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a7da:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a7de:	2100      	movs	r1, #0
 801a7e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7e4:	9100      	str	r1, [sp, #0]
 801a7e6:	4669      	mov	r1, sp
 801a7e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a7ec:	f7ff ffd8 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a7f0:	b003      	add	sp, #12
 801a7f2:	f85d fb04 	ldr.w	pc, [sp], #4
 801a7f6:	bf00      	nop
 801a7f8:	200066f4 	.word	0x200066f4
 801a7fc:	200066f6 	.word	0x200066f6

0801a800 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a800:	4b06      	ldr	r3, [pc, #24]	; (801a81c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a802:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a806:	4b06      	ldr	r3, [pc, #24]	; (801a820 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a808:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a80c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a810:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a814:	2100      	movs	r1, #0
 801a816:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a81a:	4770      	bx	lr
 801a81c:	200066f4 	.word	0x200066f4
 801a820:	200066f6 	.word	0x200066f6

0801a824 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a824:	4b03      	ldr	r3, [pc, #12]	; (801a834 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a826:	6818      	ldr	r0, [r3, #0]
 801a828:	b110      	cbz	r0, 801a830 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a82a:	6803      	ldr	r3, [r0, #0]
 801a82c:	699b      	ldr	r3, [r3, #24]
 801a82e:	4718      	bx	r3
 801a830:	4770      	bx	lr
 801a832:	bf00      	nop
 801a834:	2000673c 	.word	0x2000673c

0801a838 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a838:	4770      	bx	lr
	...

0801a83c <_ZN8touchgfx11Application4drawEv>:
 801a83c:	b507      	push	{r0, r1, r2, lr}
 801a83e:	4b09      	ldr	r3, [pc, #36]	; (801a864 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a840:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a844:	4b08      	ldr	r3, [pc, #32]	; (801a868 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a846:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a84e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a852:	6803      	ldr	r3, [r0, #0]
 801a854:	2100      	movs	r1, #0
 801a856:	9100      	str	r1, [sp, #0]
 801a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a85a:	4669      	mov	r1, sp
 801a85c:	4798      	blx	r3
 801a85e:	b003      	add	sp, #12
 801a860:	f85d fb04 	ldr.w	pc, [sp], #4
 801a864:	200066f4 	.word	0x200066f4
 801a868:	200066f6 	.word	0x200066f6

0801a86c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a86c:	4b03      	ldr	r3, [pc, #12]	; (801a87c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a86e:	6818      	ldr	r0, [r3, #0]
 801a870:	b110      	cbz	r0, 801a878 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a872:	6803      	ldr	r3, [r0, #0]
 801a874:	69db      	ldr	r3, [r3, #28]
 801a876:	4718      	bx	r3
 801a878:	4770      	bx	lr
 801a87a:	bf00      	nop
 801a87c:	2000673c 	.word	0x2000673c

0801a880 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a880:	4b03      	ldr	r3, [pc, #12]	; (801a890 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a882:	6818      	ldr	r0, [r3, #0]
 801a884:	b110      	cbz	r0, 801a88c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a886:	6803      	ldr	r3, [r0, #0]
 801a888:	6a1b      	ldr	r3, [r3, #32]
 801a88a:	4718      	bx	r3
 801a88c:	4770      	bx	lr
 801a88e:	bf00      	nop
 801a890:	2000673c 	.word	0x2000673c

0801a894 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a894:	4b03      	ldr	r3, [pc, #12]	; (801a8a4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a896:	6818      	ldr	r0, [r3, #0]
 801a898:	b110      	cbz	r0, 801a8a0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a89a:	6803      	ldr	r3, [r0, #0]
 801a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a89e:	4718      	bx	r3
 801a8a0:	4770      	bx	lr
 801a8a2:	bf00      	nop
 801a8a4:	2000673c 	.word	0x2000673c

0801a8a8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a8a8:	b570      	push	{r4, r5, r6, lr}
 801a8aa:	4d34      	ldr	r5, [pc, #208]	; (801a97c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a8ac:	4604      	mov	r4, r0
 801a8ae:	6828      	ldr	r0, [r5, #0]
 801a8b0:	b140      	cbz	r0, 801a8c4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a8b2:	7a03      	ldrb	r3, [r0, #8]
 801a8b4:	b933      	cbnz	r3, 801a8c4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a8b6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a8ba:	6803      	ldr	r3, [r0, #0]
 801a8bc:	689b      	ldr	r3, [r3, #8]
 801a8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8c2:	4718      	bx	r3
 801a8c4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a8c8:	b97b      	cbnz	r3, 801a8ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a8ca:	b170      	cbz	r0, 801a8ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a8cc:	7a03      	ldrb	r3, [r0, #8]
 801a8ce:	b163      	cbz	r3, 801a8ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a8d0:	4b2b      	ldr	r3, [pc, #172]	; (801a980 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a8d2:	6818      	ldr	r0, [r3, #0]
 801a8d4:	b110      	cbz	r0, 801a8dc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a8d6:	6803      	ldr	r3, [r0, #0]
 801a8d8:	691b      	ldr	r3, [r3, #16]
 801a8da:	4798      	blx	r3
 801a8dc:	6828      	ldr	r0, [r5, #0]
 801a8de:	6803      	ldr	r3, [r0, #0]
 801a8e0:	68db      	ldr	r3, [r3, #12]
 801a8e2:	4798      	blx	r3
 801a8e4:	2301      	movs	r3, #1
 801a8e6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a8ea:	2500      	movs	r5, #0
 801a8ec:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a8f0:	42a8      	cmp	r0, r5
 801a8f2:	dd0c      	ble.n	801a90e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a8f4:	1963      	adds	r3, r4, r5
 801a8f6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a8fa:	b132      	cbz	r2, 801a90a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a8fc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a900:	4413      	add	r3, r2
 801a902:	6858      	ldr	r0, [r3, #4]
 801a904:	6803      	ldr	r3, [r0, #0]
 801a906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a908:	4798      	blx	r3
 801a90a:	3501      	adds	r5, #1
 801a90c:	e7ee      	b.n	801a8ec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a90e:	2300      	movs	r3, #0
 801a910:	461a      	mov	r2, r3
 801a912:	4298      	cmp	r0, r3
 801a914:	d114      	bne.n	801a940 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a916:	1d25      	adds	r5, r4, #4
 801a918:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a91c:	1e48      	subs	r0, r1, #1
 801a91e:	b280      	uxth	r0, r0
 801a920:	4291      	cmp	r1, r2
 801a922:	dd24      	ble.n	801a96e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a924:	4288      	cmp	r0, r1
 801a926:	d2fb      	bcs.n	801a920 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a928:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a92c:	3304      	adds	r3, #4
 801a92e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a932:	428b      	cmp	r3, r1
 801a934:	d018      	beq.n	801a968 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a936:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a93a:	f843 6c04 	str.w	r6, [r3, #-4]
 801a93e:	e7f8      	b.n	801a932 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a940:	18e1      	adds	r1, r4, r3
 801a942:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a946:	b16d      	cbz	r5, 801a964 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a948:	429a      	cmp	r2, r3
 801a94a:	d00a      	beq.n	801a962 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a94c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a950:	4431      	add	r1, r6
 801a952:	684e      	ldr	r6, [r1, #4]
 801a954:	b291      	uxth	r1, r2
 801a956:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a95a:	604e      	str	r6, [r1, #4]
 801a95c:	18a1      	adds	r1, r4, r2
 801a95e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a962:	3201      	adds	r2, #1
 801a964:	3301      	adds	r3, #1
 801a966:	e7d4      	b.n	801a912 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a968:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a96c:	e7d4      	b.n	801a918 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a96e:	4b04      	ldr	r3, [pc, #16]	; (801a980 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a970:	6818      	ldr	r0, [r3, #0]
 801a972:	b110      	cbz	r0, 801a97a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a974:	6803      	ldr	r3, [r0, #0]
 801a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a978:	e7a1      	b.n	801a8be <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a97a:	bd70      	pop	{r4, r5, r6, pc}
 801a97c:	20006740 	.word	0x20006740
 801a980:	2000673c 	.word	0x2000673c

0801a984 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a984:	b570      	push	{r4, r5, r6, lr}
 801a986:	4606      	mov	r6, r0
 801a988:	460c      	mov	r4, r1
 801a98a:	b929      	cbnz	r1, 801a998 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a98c:	4b0c      	ldr	r3, [pc, #48]	; (801a9c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a98e:	4a0d      	ldr	r2, [pc, #52]	; (801a9c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a990:	480d      	ldr	r0, [pc, #52]	; (801a9c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a992:	2167      	movs	r1, #103	; 0x67
 801a994:	f011 fe62 	bl	802c65c <__assert_func>
 801a998:	4d0c      	ldr	r5, [pc, #48]	; (801a9cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a99a:	2300      	movs	r3, #0
 801a99c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a9a0:	6828      	ldr	r0, [r5, #0]
 801a9a2:	b110      	cbz	r0, 801a9aa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a9a4:	6803      	ldr	r3, [r0, #0]
 801a9a6:	695b      	ldr	r3, [r3, #20]
 801a9a8:	4798      	blx	r3
 801a9aa:	602c      	str	r4, [r5, #0]
 801a9ac:	6823      	ldr	r3, [r4, #0]
 801a9ae:	4620      	mov	r0, r4
 801a9b0:	68db      	ldr	r3, [r3, #12]
 801a9b2:	4798      	blx	r3
 801a9b4:	6833      	ldr	r3, [r6, #0]
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9be:	4718      	bx	r3
 801a9c0:	08030778 	.word	0x08030778
 801a9c4:	08030870 	.word	0x08030870
 801a9c8:	08030782 	.word	0x08030782
 801a9cc:	2000673c 	.word	0x2000673c

0801a9d0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a9d0:	b570      	push	{r4, r5, r6, lr}
 801a9d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a9d6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a9da:	42ac      	cmp	r4, r5
 801a9dc:	db18      	blt.n	801aa10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a9de:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a9e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a9e6:	429a      	cmp	r2, r3
 801a9e8:	db12      	blt.n	801aa10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a9ea:	8886      	ldrh	r6, [r0, #4]
 801a9ec:	4435      	add	r5, r6
 801a9ee:	888e      	ldrh	r6, [r1, #4]
 801a9f0:	4434      	add	r4, r6
 801a9f2:	b22d      	sxth	r5, r5
 801a9f4:	b224      	sxth	r4, r4
 801a9f6:	42a5      	cmp	r5, r4
 801a9f8:	db0a      	blt.n	801aa10 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a9fa:	88c0      	ldrh	r0, [r0, #6]
 801a9fc:	4418      	add	r0, r3
 801a9fe:	88cb      	ldrh	r3, [r1, #6]
 801aa00:	441a      	add	r2, r3
 801aa02:	b200      	sxth	r0, r0
 801aa04:	b212      	sxth	r2, r2
 801aa06:	4290      	cmp	r0, r2
 801aa08:	bfb4      	ite	lt
 801aa0a:	2000      	movlt	r0, #0
 801aa0c:	2001      	movge	r0, #1
 801aa0e:	bd70      	pop	{r4, r5, r6, pc}
 801aa10:	2000      	movs	r0, #0
 801aa12:	e7fc      	b.n	801aa0e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801aa14 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa16:	4604      	mov	r4, r0
 801aa18:	4608      	mov	r0, r1
 801aa1a:	460d      	mov	r5, r1
 801aa1c:	f7fb fae5 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa20:	b978      	cbnz	r0, 801aa42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801aa22:	4620      	mov	r0, r4
 801aa24:	f7fb fae1 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa28:	f9b5 6000 	ldrsh.w	r6, [r5]
 801aa2c:	b150      	cbz	r0, 801aa44 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801aa2e:	8026      	strh	r6, [r4, #0]
 801aa30:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801aa34:	8063      	strh	r3, [r4, #2]
 801aa36:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801aa3a:	80a3      	strh	r3, [r4, #4]
 801aa3c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801aa40:	80e3      	strh	r3, [r4, #6]
 801aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa44:	f9b4 1000 	ldrsh.w	r1, [r4]
 801aa48:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aa4c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801aa50:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801aa54:	88ed      	ldrh	r5, [r5, #6]
 801aa56:	42b1      	cmp	r1, r6
 801aa58:	460f      	mov	r7, r1
 801aa5a:	bfa8      	it	ge
 801aa5c:	4637      	movge	r7, r6
 801aa5e:	4293      	cmp	r3, r2
 801aa60:	4618      	mov	r0, r3
 801aa62:	4466      	add	r6, ip
 801aa64:	bfa8      	it	ge
 801aa66:	4610      	movge	r0, r2
 801aa68:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801aa6c:	8027      	strh	r7, [r4, #0]
 801aa6e:	442a      	add	r2, r5
 801aa70:	88e5      	ldrh	r5, [r4, #6]
 801aa72:	8060      	strh	r0, [r4, #2]
 801aa74:	4461      	add	r1, ip
 801aa76:	442b      	add	r3, r5
 801aa78:	b236      	sxth	r6, r6
 801aa7a:	b209      	sxth	r1, r1
 801aa7c:	b212      	sxth	r2, r2
 801aa7e:	b21b      	sxth	r3, r3
 801aa80:	428e      	cmp	r6, r1
 801aa82:	bfac      	ite	ge
 801aa84:	ebc7 0106 	rsbge	r1, r7, r6
 801aa88:	ebc7 0101 	rsblt	r1, r7, r1
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	bfac      	ite	ge
 801aa90:	ebc0 0202 	rsbge	r2, r0, r2
 801aa94:	ebc0 0203 	rsblt	r2, r0, r3
 801aa98:	80a1      	strh	r1, [r4, #4]
 801aa9a:	80e2      	strh	r2, [r4, #6]
 801aa9c:	e7d1      	b.n	801aa42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801aaa0 <_ZN8touchgfx11Application11getInstanceEv>:
 801aaa0:	4b01      	ldr	r3, [pc, #4]	; (801aaa8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801aaa2:	6818      	ldr	r0, [r3, #0]
 801aaa4:	4770      	bx	lr
 801aaa6:	bf00      	nop
 801aaa8:	2000674c 	.word	0x2000674c

0801aaac <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801aaac:	b570      	push	{r4, r5, r6, lr}
 801aaae:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801aab2:	1d04      	adds	r4, r0, #4
 801aab4:	2200      	movs	r2, #0
 801aab6:	b295      	uxth	r5, r2
 801aab8:	42ab      	cmp	r3, r5
 801aaba:	d90f      	bls.n	801aadc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801aabc:	f854 6b04 	ldr.w	r6, [r4], #4
 801aac0:	428e      	cmp	r6, r1
 801aac2:	4615      	mov	r5, r2
 801aac4:	f102 0201 	add.w	r2, r2, #1
 801aac8:	d1f5      	bne.n	801aab6 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801aaca:	4428      	add	r0, r5
 801aacc:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801aad0:	2bff      	cmp	r3, #255	; 0xff
 801aad2:	d002      	beq.n	801aada <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801aad4:	3301      	adds	r3, #1
 801aad6:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801aada:	bd70      	pop	{r4, r5, r6, pc}
 801aadc:	2b20      	cmp	r3, #32
 801aade:	d106      	bne.n	801aaee <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801aae0:	4b08      	ldr	r3, [pc, #32]	; (801ab04 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801aae2:	4a09      	ldr	r2, [pc, #36]	; (801ab08 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801aae4:	4809      	ldr	r0, [pc, #36]	; (801ab0c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801aae6:	f240 215f 	movw	r1, #607	; 0x25f
 801aaea:	f011 fdb7 	bl	802c65c <__assert_func>
 801aaee:	18c2      	adds	r2, r0, r3
 801aaf0:	2401      	movs	r4, #1
 801aaf2:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801aaf6:	191a      	adds	r2, r3, r4
 801aaf8:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801aafc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ab00:	6041      	str	r1, [r0, #4]
 801ab02:	e7ea      	b.n	801aada <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801ab04:	080307ac 	.word	0x080307ac
 801ab08:	080308b4 	.word	0x080308b4
 801ab0c:	08030782 	.word	0x08030782

0801ab10 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801ab10:	b570      	push	{r4, r5, r6, lr}
 801ab12:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801ab16:	1d04      	adds	r4, r0, #4
 801ab18:	2300      	movs	r3, #0
 801ab1a:	b29a      	uxth	r2, r3
 801ab1c:	4296      	cmp	r6, r2
 801ab1e:	d90a      	bls.n	801ab36 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801ab20:	f854 2b04 	ldr.w	r2, [r4], #4
 801ab24:	428a      	cmp	r2, r1
 801ab26:	d107      	bne.n	801ab38 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ab28:	18c5      	adds	r5, r0, r3
 801ab2a:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801ab2e:	b11a      	cbz	r2, 801ab38 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ab30:	3a01      	subs	r2, #1
 801ab32:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801ab36:	bd70      	pop	{r4, r5, r6, pc}
 801ab38:	3301      	adds	r3, #1
 801ab3a:	e7ee      	b.n	801ab1a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801ab3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ab42:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801ab46:	30a8      	adds	r0, #168	; 0xa8
 801ab48:	f802 3b01 	strb.w	r3, [r2], #1
 801ab4c:	4282      	cmp	r2, r0
 801ab4e:	d1fb      	bne.n	801ab48 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801ab50:	4770      	bx	lr

0801ab52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ab52:	4603      	mov	r3, r0
 801ab54:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ab58:	2200      	movs	r2, #0
 801ab5a:	801a      	strh	r2, [r3, #0]
 801ab5c:	805a      	strh	r2, [r3, #2]
 801ab5e:	809a      	strh	r2, [r3, #4]
 801ab60:	80da      	strh	r2, [r3, #6]
 801ab62:	3308      	adds	r3, #8
 801ab64:	428b      	cmp	r3, r1
 801ab66:	d1f8      	bne.n	801ab5a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ab68:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ab6c:	4770      	bx	lr
	...

0801ab70 <_ZN8touchgfx11ApplicationC1Ev>:
 801ab70:	b570      	push	{r4, r5, r6, lr}
 801ab72:	4b1a      	ldr	r3, [pc, #104]	; (801abdc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ab74:	6003      	str	r3, [r0, #0]
 801ab76:	2500      	movs	r5, #0
 801ab78:	4604      	mov	r4, r0
 801ab7a:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801ab7e:	30a8      	adds	r0, #168	; 0xa8
 801ab80:	f7ff ffe7 	bl	801ab52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ab84:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ab88:	f7ff ffe3 	bl	801ab52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ab8c:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801ab90:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801ab94:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ab98:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ab9c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801aba0:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801aba4:	490e      	ldr	r1, [pc, #56]	; (801abe0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801aba6:	480f      	ldr	r0, [pc, #60]	; (801abe4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801aba8:	4e0f      	ldr	r6, [pc, #60]	; (801abe8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801abaa:	f00f f965 	bl	8029e78 <CRC_Lock>
 801abae:	4b0f      	ldr	r3, [pc, #60]	; (801abec <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801abb0:	b158      	cbz	r0, 801abca <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801abb2:	801d      	strh	r5, [r3, #0]
 801abb4:	4a0e      	ldr	r2, [pc, #56]	; (801abf0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801abb6:	2300      	movs	r3, #0
 801abb8:	6013      	str	r3, [r2, #0]
 801abba:	4a0e      	ldr	r2, [pc, #56]	; (801abf4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801abbc:	6033      	str	r3, [r6, #0]
 801abbe:	4620      	mov	r0, r4
 801abc0:	6013      	str	r3, [r2, #0]
 801abc2:	f7ff ffbb 	bl	801ab3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801abc6:	4620      	mov	r0, r4
 801abc8:	bd70      	pop	{r4, r5, r6, pc}
 801abca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801abce:	2002      	movs	r0, #2
 801abd0:	801a      	strh	r2, [r3, #0]
 801abd2:	6030      	str	r0, [r6, #0]
 801abd4:	f001 fb46 	bl	801c264 <_ZN8touchgfx6Screen4drawEv>
 801abd8:	e7ec      	b.n	801abb4 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801abda:	bf00      	nop
 801abdc:	08030834 	.word	0x08030834
 801abe0:	b5e8b5cd 	.word	0xb5e8b5cd
 801abe4:	f407a5c2 	.word	0xf407a5c2
 801abe8:	2000673c 	.word	0x2000673c
 801abec:	20000030 	.word	0x20000030
 801abf0:	2000674c 	.word	0x2000674c
 801abf4:	20006740 	.word	0x20006740

0801abf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801abf8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801abfc:	428b      	cmp	r3, r1
 801abfe:	b510      	push	{r4, lr}
 801ac00:	d90e      	bls.n	801ac20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801ac02:	3b01      	subs	r3, #1
 801ac04:	b29b      	uxth	r3, r3
 801ac06:	428b      	cmp	r3, r1
 801ac08:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ac0c:	d908      	bls.n	801ac20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801ac0e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ac12:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ac16:	681a      	ldr	r2, [r3, #0]
 801ac18:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ac1c:	685a      	ldr	r2, [r3, #4]
 801ac1e:	6062      	str	r2, [r4, #4]
 801ac20:	bd10      	pop	{r4, pc}
	...

0801ac24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ac24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac26:	466b      	mov	r3, sp
 801ac28:	e883 0006 	stmia.w	r3, {r1, r2}
 801ac2c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ac30:	2a07      	cmp	r2, #7
 801ac32:	4604      	mov	r4, r0
 801ac34:	d906      	bls.n	801ac44 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ac36:	4b09      	ldr	r3, [pc, #36]	; (801ac5c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ac38:	4a09      	ldr	r2, [pc, #36]	; (801ac60 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ac3a:	480a      	ldr	r0, [pc, #40]	; (801ac64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ac3c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ac40:	f011 fd0c 	bl	802c65c <__assert_func>
 801ac44:	1c51      	adds	r1, r2, #1
 801ac46:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ac4a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801ac4e:	cb03      	ldmia	r3!, {r0, r1}
 801ac50:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ac54:	6069      	str	r1, [r5, #4]
 801ac56:	b003      	add	sp, #12
 801ac58:	bd30      	pop	{r4, r5, pc}
 801ac5a:	bf00      	nop
 801ac5c:	080307d4 	.word	0x080307d4
 801ac60:	080308f9 	.word	0x080308f9
 801ac64:	08030803 	.word	0x08030803

0801ac68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6c:	b08d      	sub	sp, #52	; 0x34
 801ac6e:	ac08      	add	r4, sp, #32
 801ac70:	4683      	mov	fp, r0
 801ac72:	4620      	mov	r0, r4
 801ac74:	e884 0006 	stmia.w	r4, {r1, r2}
 801ac78:	f7fb f9b7 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac7c:	2800      	cmp	r0, #0
 801ac7e:	d16a      	bne.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ac80:	9402      	str	r4, [sp, #8]
 801ac82:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ac86:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ac8a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801ac8e:	2400      	movs	r4, #0
 801ac90:	9301      	str	r3, [sp, #4]
 801ac92:	36a0      	adds	r6, #160	; 0xa0
 801ac94:	42a5      	cmp	r5, r4
 801ac96:	d00d      	beq.n	801acb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801ac98:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801ac9c:	9802      	ldr	r0, [sp, #8]
 801ac9e:	f7ff fe97 	bl	801a9d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801aca2:	b128      	cbz	r0, 801acb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801aca4:	1e69      	subs	r1, r5, #1
 801aca6:	1b09      	subs	r1, r1, r4
 801aca8:	b289      	uxth	r1, r1
 801acaa:	9801      	ldr	r0, [sp, #4]
 801acac:	f7ff ffa4 	bl	801abf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801acb0:	3401      	adds	r4, #1
 801acb2:	e7ef      	b.n	801ac94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801acb4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801acb8:	9703      	str	r7, [sp, #12]
 801acba:	1e7b      	subs	r3, r7, #1
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801acc2:	2400      	movs	r4, #0
 801acc4:	4655      	mov	r5, sl
 801acc6:	9704      	str	r7, [sp, #16]
 801acc8:	4626      	mov	r6, r4
 801acca:	9b04      	ldr	r3, [sp, #16]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d078      	beq.n	801adc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801acd0:	9902      	ldr	r1, [sp, #8]
 801acd2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801acd6:	f7fc fe43 	bl	8017960 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801acda:	b360      	cbz	r0, 801ad36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801acdc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ace0:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801ace4:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801ace8:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801acec:	45e6      	cmp	lr, ip
 801acee:	db35      	blt.n	801ad5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801acf0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801acf4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801acf8:	4472      	add	r2, lr
 801acfa:	4463      	add	r3, ip
 801acfc:	b212      	sxth	r2, r2
 801acfe:	b21b      	sxth	r3, r3
 801ad00:	429a      	cmp	r2, r3
 801ad02:	dc2b      	bgt.n	801ad5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801ad04:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ad08:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ad0c:	fa1f f288 	uxth.w	r2, r8
 801ad10:	4413      	add	r3, r2
 801ad12:	b29b      	uxth	r3, r3
 801ad14:	45c1      	cmp	r9, r8
 801ad16:	fa0f fe83 	sxth.w	lr, r3
 801ad1a:	fa1f fc89 	uxth.w	ip, r9
 801ad1e:	db0f      	blt.n	801ad40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801ad20:	eba3 030c 	sub.w	r3, r3, ip
 801ad24:	1ac9      	subs	r1, r1, r3
 801ad26:	b209      	sxth	r1, r1
 801ad28:	2900      	cmp	r1, #0
 801ad2a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ad2e:	dd12      	ble.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ad30:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801ad34:	4604      	mov	r4, r0
 801ad36:	9b04      	ldr	r3, [sp, #16]
 801ad38:	3b01      	subs	r3, #1
 801ad3a:	9304      	str	r3, [sp, #16]
 801ad3c:	3d08      	subs	r5, #8
 801ad3e:	e7c4      	b.n	801acca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801ad40:	4461      	add	r1, ip
 801ad42:	b209      	sxth	r1, r1
 801ad44:	4571      	cmp	r1, lr
 801ad46:	dc3a      	bgt.n	801adbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ad48:	eba2 020c 	sub.w	r2, r2, ip
 801ad4c:	b212      	sxth	r2, r2
 801ad4e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ad52:	2a00      	cmp	r2, #0
 801ad54:	dcee      	bgt.n	801ad34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801ad56:	b00d      	add	sp, #52	; 0x34
 801ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad5c:	45c1      	cmp	r9, r8
 801ad5e:	db2e      	blt.n	801adbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ad60:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ad64:	4499      	add	r9, r3
 801ad66:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ad6a:	4498      	add	r8, r3
 801ad6c:	fa0f f989 	sxth.w	r9, r9
 801ad70:	fa0f f888 	sxth.w	r8, r8
 801ad74:	45c1      	cmp	r9, r8
 801ad76:	dc22      	bgt.n	801adbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ad78:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ad7c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ad80:	fa1f f28c 	uxth.w	r2, ip
 801ad84:	4413      	add	r3, r2
 801ad86:	b29b      	uxth	r3, r3
 801ad88:	45e6      	cmp	lr, ip
 801ad8a:	fa1f f88e 	uxth.w	r8, lr
 801ad8e:	fa0f f983 	sxth.w	r9, r3
 801ad92:	db0a      	blt.n	801adaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801ad94:	eba3 0308 	sub.w	r3, r3, r8
 801ad98:	1ac9      	subs	r1, r1, r3
 801ad9a:	b209      	sxth	r1, r1
 801ad9c:	2900      	cmp	r1, #0
 801ad9e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ada2:	ddd8      	ble.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ada4:	f8ad 9020 	strh.w	r9, [sp, #32]
 801ada8:	e7c4      	b.n	801ad34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801adaa:	4441      	add	r1, r8
 801adac:	b209      	sxth	r1, r1
 801adae:	4549      	cmp	r1, r9
 801adb0:	dc05      	bgt.n	801adbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801adb2:	eba2 0208 	sub.w	r2, r2, r8
 801adb6:	b212      	sxth	r2, r2
 801adb8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801adbc:	e7c9      	b.n	801ad52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801adbe:	4606      	mov	r6, r0
 801adc0:	e7b9      	b.n	801ad36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801adc2:	2c00      	cmp	r4, #0
 801adc4:	f47f af7d 	bne.w	801acc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801adc8:	2e00      	cmp	r6, #0
 801adca:	f000 81dd 	beq.w	801b188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801adce:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801add2:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801add6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801adda:	b2b9      	uxth	r1, r7
 801addc:	9104      	str	r1, [sp, #16]
 801adde:	9804      	ldr	r0, [sp, #16]
 801ade0:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ade4:	4401      	add	r1, r0
 801ade6:	b2b3      	uxth	r3, r6
 801ade8:	b289      	uxth	r1, r1
 801adea:	441a      	add	r2, r3
 801adec:	9105      	str	r1, [sp, #20]
 801adee:	b292      	uxth	r2, r2
 801adf0:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801adf4:	fa0f f882 	sxth.w	r8, r2
 801adf8:	4655      	mov	r5, sl
 801adfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801adfe:	9b03      	ldr	r3, [sp, #12]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d054      	beq.n	801aeae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801ae04:	9902      	ldr	r1, [sp, #8]
 801ae06:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ae0a:	f7fc fda9 	bl	8017960 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ae0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae12:	b1d8      	cbz	r0, 801ae4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ae14:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801ae18:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801ae1c:	4576      	cmp	r6, lr
 801ae1e:	dc26      	bgt.n	801ae6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ae20:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801ae24:	44f4      	add	ip, lr
 801ae26:	fa0f fc8c 	sxth.w	ip, ip
 801ae2a:	45e0      	cmp	r8, ip
 801ae2c:	db1f      	blt.n	801ae6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ae2e:	428f      	cmp	r7, r1
 801ae30:	fa1f fc81 	uxth.w	ip, r1
 801ae34:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801ae38:	dc0f      	bgt.n	801ae5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ae3a:	9805      	ldr	r0, [sp, #20]
 801ae3c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801ae40:	eba0 0c0c 	sub.w	ip, r0, ip
 801ae44:	eba1 010c 	sub.w	r1, r1, ip
 801ae48:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	9903      	ldr	r1, [sp, #12]
 801ae50:	3901      	subs	r1, #1
 801ae52:	9103      	str	r1, [sp, #12]
 801ae54:	3d08      	subs	r5, #8
 801ae56:	4604      	mov	r4, r0
 801ae58:	e7cf      	b.n	801adfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801ae5a:	4461      	add	r1, ip
 801ae5c:	b209      	sxth	r1, r1
 801ae5e:	4549      	cmp	r1, r9
 801ae60:	dcf5      	bgt.n	801ae4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae62:	9904      	ldr	r1, [sp, #16]
 801ae64:	eba1 0c0c 	sub.w	ip, r1, ip
 801ae68:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801ae6c:	e7ee      	b.n	801ae4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ae6e:	428f      	cmp	r7, r1
 801ae70:	dced      	bgt.n	801ae4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae72:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801ae76:	4461      	add	r1, ip
 801ae78:	b209      	sxth	r1, r1
 801ae7a:	4589      	cmp	r9, r1
 801ae7c:	dbe7      	blt.n	801ae4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae7e:	4576      	cmp	r6, lr
 801ae80:	fa1f fc8e 	uxth.w	ip, lr
 801ae84:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801ae88:	dc08      	bgt.n	801ae9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801ae8a:	eba2 0c0c 	sub.w	ip, r2, ip
 801ae8e:	eba1 010c 	sub.w	r1, r1, ip
 801ae92:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801ae96:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801ae9a:	e7d7      	b.n	801ae4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ae9c:	4461      	add	r1, ip
 801ae9e:	b209      	sxth	r1, r1
 801aea0:	4588      	cmp	r8, r1
 801aea2:	dbd4      	blt.n	801ae4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aea4:	eba3 0c0c 	sub.w	ip, r3, ip
 801aea8:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801aeac:	e7ce      	b.n	801ae4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801aeae:	2c00      	cmp	r4, #0
 801aeb0:	f000 816a 	beq.w	801b188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801aeb4:	9b00      	ldr	r3, [sp, #0]
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	f000 8166 	beq.w	801b188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801aebc:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801aec0:	4621      	mov	r1, r4
 801aec2:	9802      	ldr	r0, [sp, #8]
 801aec4:	f7ff fd84 	bl	801a9d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801aec8:	b120      	cbz	r0, 801aed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801aeca:	f8bd 1000 	ldrh.w	r1, [sp]
 801aece:	9801      	ldr	r0, [sp, #4]
 801aed0:	f7ff fe92 	bl	801abf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aed4:	9902      	ldr	r1, [sp, #8]
 801aed6:	4620      	mov	r0, r4
 801aed8:	f7fc fd42 	bl	8017960 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aedc:	2800      	cmp	r0, #0
 801aede:	f000 809b 	beq.w	801b018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801aee2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801aee6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801aeea:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801aeee:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801aef2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801aef6:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801aefa:	fa1f f288 	uxth.w	r2, r8
 801aefe:	19d5      	adds	r5, r2, r7
 801af00:	fa1f f985 	uxth.w	r9, r5
 801af04:	fa0f f589 	sxth.w	r5, r9
 801af08:	b2a1      	uxth	r1, r4
 801af0a:	440b      	add	r3, r1
 801af0c:	9503      	str	r5, [sp, #12]
 801af0e:	45a0      	cmp	r8, r4
 801af10:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801af14:	9507      	str	r5, [sp, #28]
 801af16:	b29b      	uxth	r3, r3
 801af18:	f340 809d 	ble.w	801b056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801af1c:	1a52      	subs	r2, r2, r1
 801af1e:	b292      	uxth	r2, r2
 801af20:	4584      	cmp	ip, r0
 801af22:	fa0f fe83 	sxth.w	lr, r3
 801af26:	b215      	sxth	r5, r2
 801af28:	dd2f      	ble.n	801af8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801af2a:	9e00      	ldr	r6, [sp, #0]
 801af2c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801af30:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801af34:	9e03      	ldr	r6, [sp, #12]
 801af36:	eba6 060e 	sub.w	r6, r6, lr
 801af3a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801af3e:	fa1f fc8c 	uxth.w	ip, ip
 801af42:	b280      	uxth	r0, r0
 801af44:	ebac 0300 	sub.w	r3, ip, r0
 801af48:	448c      	add	ip, r1
 801af4a:	4470      	add	r0, lr
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	fa0f fc8c 	sxth.w	ip, ip
 801af52:	b200      	sxth	r0, r0
 801af54:	b21c      	sxth	r4, r3
 801af56:	ebac 0000 	sub.w	r0, ip, r0
 801af5a:	4366      	muls	r6, r4
 801af5c:	4368      	muls	r0, r5
 801af5e:	4286      	cmp	r6, r0
 801af60:	db09      	blt.n	801af76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801af62:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801af66:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801af6a:	4417      	add	r7, r2
 801af6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801af70:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801af74:	e685      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801af76:	440b      	add	r3, r1
 801af78:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801af7c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801af80:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801af84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801af88:	e67b      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801af8a:	9e03      	ldr	r6, [sp, #12]
 801af8c:	45b6      	cmp	lr, r6
 801af8e:	da28      	bge.n	801afe2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801af90:	9b00      	ldr	r3, [sp, #0]
 801af92:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801af96:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801af9a:	eb04 030c 	add.w	r3, r4, ip
 801af9e:	fa1f f883 	uxth.w	r8, r3
 801afa2:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801afa6:	4403      	add	r3, r0
 801afa8:	eba3 0308 	sub.w	r3, r3, r8
 801afac:	b29b      	uxth	r3, r3
 801afae:	fa0f f988 	sxth.w	r9, r8
 801afb2:	eba0 000c 	sub.w	r0, r0, ip
 801afb6:	fa0f f883 	sxth.w	r8, r3
 801afba:	eba6 060e 	sub.w	r6, r6, lr
 801afbe:	4368      	muls	r0, r5
 801afc0:	fb08 f606 	mul.w	r6, r8, r6
 801afc4:	42b0      	cmp	r0, r6
 801afc6:	dc06      	bgt.n	801afd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801afc8:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801afcc:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801afd0:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801afd4:	e7c9      	b.n	801af6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801afd6:	4423      	add	r3, r4
 801afd8:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801afdc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801afe0:	e64f      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801afe2:	9807      	ldr	r0, [sp, #28]
 801afe4:	eba3 0309 	sub.w	r3, r3, r9
 801afe8:	b29b      	uxth	r3, r3
 801afea:	2806      	cmp	r0, #6
 801afec:	fa0f fc83 	sxth.w	ip, r3
 801aff0:	d818      	bhi.n	801b024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801aff2:	4652      	mov	r2, sl
 801aff4:	ab0a      	add	r3, sp, #40	; 0x28
 801aff6:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801affa:	6851      	ldr	r1, [r2, #4]
 801affc:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801b000:	c303      	stmia	r3!, {r0, r1}
 801b002:	9b03      	ldr	r3, [sp, #12]
 801b004:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b008:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801b00c:	ab0a      	add	r3, sp, #40	; 0x28
 801b00e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b012:	9801      	ldr	r0, [sp, #4]
 801b014:	f7ff fe06 	bl	801ac24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b018:	9b00      	ldr	r3, [sp, #0]
 801b01a:	3b01      	subs	r3, #1
 801b01c:	9300      	str	r3, [sp, #0]
 801b01e:	f1aa 0a08 	sub.w	sl, sl, #8
 801b022:	e747      	b.n	801aeb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b024:	9800      	ldr	r0, [sp, #0]
 801b026:	45ac      	cmp	ip, r5
 801b028:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b02c:	db0c      	blt.n	801b048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801b02e:	4417      	add	r7, r2
 801b030:	b2bf      	uxth	r7, r7
 801b032:	4458      	add	r0, fp
 801b034:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b038:	440f      	add	r7, r1
 801b03a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801b03e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801b042:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801b046:	e61c      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b048:	4458      	add	r0, fp
 801b04a:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801b04e:	443b      	add	r3, r7
 801b050:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b054:	e615      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b056:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801b05a:	fa1f f18c 	uxth.w	r1, ip
 801b05e:	eb01 0e05 	add.w	lr, r1, r5
 801b062:	b282      	uxth	r2, r0
 801b064:	fa1f fe8e 	uxth.w	lr, lr
 801b068:	9204      	str	r2, [sp, #16]
 801b06a:	fa0f f28e 	sxth.w	r2, lr
 801b06e:	9205      	str	r2, [sp, #20]
 801b070:	9e04      	ldr	r6, [sp, #16]
 801b072:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801b076:	4432      	add	r2, r6
 801b078:	b292      	uxth	r2, r2
 801b07a:	4584      	cmp	ip, r0
 801b07c:	9206      	str	r2, [sp, #24]
 801b07e:	da26      	bge.n	801b0ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801b080:	eba3 0309 	sub.w	r3, r3, r9
 801b084:	eba2 020e 	sub.w	r2, r2, lr
 801b088:	b29b      	uxth	r3, r3
 801b08a:	b292      	uxth	r2, r2
 801b08c:	fa0f fa83 	sxth.w	sl, r3
 801b090:	b211      	sxth	r1, r2
 801b092:	eba0 000c 	sub.w	r0, r0, ip
 801b096:	eba4 0408 	sub.w	r4, r4, r8
 801b09a:	fb0a f000 	mul.w	r0, sl, r0
 801b09e:	434c      	muls	r4, r1
 801b0a0:	42a0      	cmp	r0, r4
 801b0a2:	9800      	ldr	r0, [sp, #0]
 801b0a4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b0a8:	dc06      	bgt.n	801b0b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801b0aa:	4458      	add	r0, fp
 801b0ac:	9a05      	ldr	r2, [sp, #20]
 801b0ae:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801b0b2:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801b0b6:	e7ca      	b.n	801b04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b0b8:	eb0b 0300 	add.w	r3, fp, r0
 801b0bc:	9903      	ldr	r1, [sp, #12]
 801b0be:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801b0c2:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801b0c6:	442a      	add	r2, r5
 801b0c8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b0cc:	e5d9      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b0ce:	9e04      	ldr	r6, [sp, #16]
 801b0d0:	9a03      	ldr	r2, [sp, #12]
 801b0d2:	1b89      	subs	r1, r1, r6
 801b0d4:	b21e      	sxth	r6, r3
 801b0d6:	b289      	uxth	r1, r1
 801b0d8:	4296      	cmp	r6, r2
 801b0da:	fa0f fc81 	sxth.w	ip, r1
 801b0de:	dd26      	ble.n	801b12e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801b0e0:	eba3 0309 	sub.w	r3, r3, r9
 801b0e4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b0e8:	9e05      	ldr	r6, [sp, #20]
 801b0ea:	b29b      	uxth	r3, r3
 801b0ec:	eba6 0902 	sub.w	r9, r6, r2
 801b0f0:	b218      	sxth	r0, r3
 801b0f2:	eba4 0408 	sub.w	r4, r4, r8
 801b0f6:	fb0c f404 	mul.w	r4, ip, r4
 801b0fa:	fb00 f909 	mul.w	r9, r0, r9
 801b0fe:	9a00      	ldr	r2, [sp, #0]
 801b100:	454c      	cmp	r4, r9
 801b102:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b106:	db03      	blt.n	801b110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801b108:	445a      	add	r2, fp
 801b10a:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801b10e:	e79e      	b.n	801b04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b110:	eb0b 0302 	add.w	r3, fp, r2
 801b114:	9a03      	ldr	r2, [sp, #12]
 801b116:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b11a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801b11e:	4429      	add	r1, r5
 801b120:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b124:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b128:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b12c:	e5a9      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b12e:	9b06      	ldr	r3, [sp, #24]
 801b130:	9c07      	ldr	r4, [sp, #28]
 801b132:	eba3 020e 	sub.w	r2, r3, lr
 801b136:	b292      	uxth	r2, r2
 801b138:	2c06      	cmp	r4, #6
 801b13a:	b213      	sxth	r3, r2
 801b13c:	d80d      	bhi.n	801b15a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801b13e:	4651      	mov	r1, sl
 801b140:	aa0a      	add	r2, sp, #40	; 0x28
 801b142:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801b146:	6849      	ldr	r1, [r1, #4]
 801b148:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801b14c:	9b05      	ldr	r3, [sp, #20]
 801b14e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b152:	c203      	stmia	r2!, {r0, r1}
 801b154:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801b158:	e758      	b.n	801b00c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801b15a:	9c00      	ldr	r4, [sp, #0]
 801b15c:	4563      	cmp	r3, ip
 801b15e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b162:	db0d      	blt.n	801b180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801b164:	4429      	add	r1, r5
 801b166:	9a04      	ldr	r2, [sp, #16]
 801b168:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b16c:	b289      	uxth	r1, r1
 801b16e:	445c      	add	r4, fp
 801b170:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b174:	4411      	add	r1, r2
 801b176:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801b17a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801b17e:	e580      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b180:	445c      	add	r4, fp
 801b182:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801b186:	e79e      	b.n	801b0c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801b188:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b18c:	2f07      	cmp	r7, #7
 801b18e:	d806      	bhi.n	801b19e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801b190:	ab08      	add	r3, sp, #32
 801b192:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b196:	9801      	ldr	r0, [sp, #4]
 801b198:	f7ff fd44 	bl	801ac24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b19c:	e5db      	b.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b19e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b1a2:	f107 39ff 	add.w	r9, r7, #4294967295
 801b1a6:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b1aa:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801b1ae:	f04f 35ff 	mov.w	r5, #4294967295
 801b1b2:	2400      	movs	r4, #0
 801b1b4:	9304      	str	r3, [sp, #16]
 801b1b6:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801b1ba:	9300      	str	r3, [sp, #0]
 801b1bc:	f109 32ff 	add.w	r2, r9, #4294967295
 801b1c0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801b1c4:	9303      	str	r3, [sp, #12]
 801b1c6:	4690      	mov	r8, r2
 801b1c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b1cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b1d0:	bf14      	ite	ne
 801b1d2:	9904      	ldrne	r1, [sp, #16]
 801b1d4:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801b1d8:	6818      	ldr	r0, [r3, #0]
 801b1da:	9206      	str	r2, [sp, #24]
 801b1dc:	bf18      	it	ne
 801b1de:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801b1e2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b1e6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b1ea:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801b1ee:	9305      	str	r3, [sp, #20]
 801b1f0:	fb16 f601 	smulbb	r6, r6, r1
 801b1f4:	6859      	ldr	r1, [r3, #4]
 801b1f6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b1fa:	4671      	mov	r1, lr
 801b1fc:	a80a      	add	r0, sp, #40	; 0x28
 801b1fe:	f7ff fc09 	bl	801aa14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b202:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b206:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b20a:	9b03      	ldr	r3, [sp, #12]
 801b20c:	9a00      	ldr	r2, [sp, #0]
 801b20e:	fb11 f100 	smulbb	r1, r1, r0
 801b212:	fb02 6603 	mla	r6, r2, r3, r6
 801b216:	1b8e      	subs	r6, r1, r6
 801b218:	2008      	movs	r0, #8
 801b21a:	fb91 f1f0 	sdiv	r1, r1, r0
 801b21e:	42b1      	cmp	r1, r6
 801b220:	dc21      	bgt.n	801b266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801b222:	4556      	cmp	r6, sl
 801b224:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801b228:	da03      	bge.n	801b232 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b22a:	b1e6      	cbz	r6, 801b266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801b22c:	46b2      	mov	sl, r6
 801b22e:	4645      	mov	r5, r8
 801b230:	464c      	mov	r4, r9
 801b232:	f108 38ff 	add.w	r8, r8, #4294967295
 801b236:	f118 0f02 	cmn.w	r8, #2
 801b23a:	d1c7      	bne.n	801b1cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801b23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b240:	f1a7 0708 	sub.w	r7, r7, #8
 801b244:	4691      	mov	r9, r2
 801b246:	d1b6      	bne.n	801b1b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801b248:	9b01      	ldr	r3, [sp, #4]
 801b24a:	b2a6      	uxth	r6, r4
 801b24c:	00e4      	lsls	r4, r4, #3
 801b24e:	1918      	adds	r0, r3, r4
 801b250:	1c6b      	adds	r3, r5, #1
 801b252:	d10b      	bne.n	801b26c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801b254:	4601      	mov	r1, r0
 801b256:	9802      	ldr	r0, [sp, #8]
 801b258:	f7ff fbdc 	bl	801aa14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b25c:	4631      	mov	r1, r6
 801b25e:	9801      	ldr	r0, [sp, #4]
 801b260:	f7ff fcca 	bl	801abf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b264:	e50d      	b.n	801ac82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b266:	4645      	mov	r5, r8
 801b268:	464c      	mov	r4, r9
 801b26a:	e7ed      	b.n	801b248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801b26c:	9b01      	ldr	r3, [sp, #4]
 801b26e:	00ed      	lsls	r5, r5, #3
 801b270:	1959      	adds	r1, r3, r5
 801b272:	f7ff fbcf 	bl	801aa14 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b276:	9b02      	ldr	r3, [sp, #8]
 801b278:	cb03      	ldmia	r3!, {r0, r1}
 801b27a:	445d      	add	r5, fp
 801b27c:	445c      	add	r4, fp
 801b27e:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801b282:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801b286:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801b28a:	9b02      	ldr	r3, [sp, #8]
 801b28c:	6861      	ldr	r1, [r4, #4]
 801b28e:	c303      	stmia	r3!, {r0, r1}
 801b290:	e7e4      	b.n	801b25c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801b294 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b294:	b530      	push	{r4, r5, lr}
 801b296:	4b1d      	ldr	r3, [pc, #116]	; (801b30c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b298:	b085      	sub	sp, #20
 801b29a:	460c      	mov	r4, r1
 801b29c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2a0:	4b1b      	ldr	r3, [pc, #108]	; (801b310 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b2a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b2a6:	2100      	movs	r1, #0
 801b2a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2ac:	9100      	str	r1, [sp, #0]
 801b2ae:	4605      	mov	r5, r0
 801b2b0:	6861      	ldr	r1, [r4, #4]
 801b2b2:	6820      	ldr	r0, [r4, #0]
 801b2b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b2b8:	ab02      	add	r3, sp, #8
 801b2ba:	c303      	stmia	r3!, {r0, r1}
 801b2bc:	4669      	mov	r1, sp
 801b2be:	a802      	add	r0, sp, #8
 801b2c0:	f7fa fe50 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801b2c4:	ab02      	add	r3, sp, #8
 801b2c6:	cb03      	ldmia	r3!, {r0, r1}
 801b2c8:	4b12      	ldr	r3, [pc, #72]	; (801b314 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b2ca:	6020      	str	r0, [r4, #0]
 801b2cc:	6818      	ldr	r0, [r3, #0]
 801b2ce:	6061      	str	r1, [r4, #4]
 801b2d0:	b138      	cbz	r0, 801b2e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b2d2:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b2d6:	b133      	cbz	r3, 801b2e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b2d8:	6821      	ldr	r1, [r4, #0]
 801b2da:	6862      	ldr	r2, [r4, #4]
 801b2dc:	4628      	mov	r0, r5
 801b2de:	f7ff fcc3 	bl	801ac68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b2e2:	b005      	add	sp, #20
 801b2e4:	bd30      	pop	{r4, r5, pc}
 801b2e6:	6803      	ldr	r3, [r0, #0]
 801b2e8:	4621      	mov	r1, r4
 801b2ea:	689b      	ldr	r3, [r3, #8]
 801b2ec:	4798      	blx	r3
 801b2ee:	4b0a      	ldr	r3, [pc, #40]	; (801b318 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b2f0:	6818      	ldr	r0, [r3, #0]
 801b2f2:	b118      	cbz	r0, 801b2fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b2f4:	6803      	ldr	r3, [r0, #0]
 801b2f6:	4621      	mov	r1, r4
 801b2f8:	689b      	ldr	r3, [r3, #8]
 801b2fa:	4798      	blx	r3
 801b2fc:	4b07      	ldr	r3, [pc, #28]	; (801b31c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b2fe:	6818      	ldr	r0, [r3, #0]
 801b300:	6803      	ldr	r3, [r0, #0]
 801b302:	4621      	mov	r1, r4
 801b304:	699b      	ldr	r3, [r3, #24]
 801b306:	4798      	blx	r3
 801b308:	e7eb      	b.n	801b2e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b30a:	bf00      	nop
 801b30c:	200066f4 	.word	0x200066f4
 801b310:	200066f6 	.word	0x200066f6
 801b314:	2000673c 	.word	0x2000673c
 801b318:	20006738 	.word	0x20006738
 801b31c:	20006700 	.word	0x20006700

0801b320 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b324:	4604      	mov	r4, r0
 801b326:	b09b      	sub	sp, #108	; 0x6c
 801b328:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b32c:	b129      	cbz	r1, 801b33a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b32e:	2300      	movs	r3, #0
 801b330:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b334:	b01b      	add	sp, #108	; 0x6c
 801b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b33a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b33e:	4630      	mov	r0, r6
 801b340:	f7fa fe53 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b344:	4605      	mov	r5, r0
 801b346:	b940      	cbnz	r0, 801b35a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b348:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b34c:	4620      	mov	r0, r4
 801b34e:	f7ff fc8b 	bl	801ac68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b352:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b356:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b35a:	4ba7      	ldr	r3, [pc, #668]	; (801b5f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	b33b      	cbz	r3, 801b3b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b360:	4da6      	ldr	r5, [pc, #664]	; (801b5fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801b362:	4628      	mov	r0, r5
 801b364:	f7fa fe41 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b368:	4606      	mov	r6, r0
 801b36a:	bb08      	cbnz	r0, 801b3b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b36c:	4628      	mov	r0, r5
 801b36e:	f7ff f9b9 	bl	801a6e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b372:	6829      	ldr	r1, [r5, #0]
 801b374:	686a      	ldr	r2, [r5, #4]
 801b376:	4620      	mov	r0, r4
 801b378:	f7ff fc76 	bl	801ac68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b37c:	802e      	strh	r6, [r5, #0]
 801b37e:	806e      	strh	r6, [r5, #2]
 801b380:	80ae      	strh	r6, [r5, #4]
 801b382:	80ee      	strh	r6, [r5, #6]
 801b384:	4f9e      	ldr	r7, [pc, #632]	; (801b600 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b386:	a809      	add	r0, sp, #36	; 0x24
 801b388:	f7ff fbe3 	bl	801ab52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b38c:	883d      	ldrh	r5, [r7, #0]
 801b38e:	462e      	mov	r6, r5
 801b390:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b394:	42b3      	cmp	r3, r6
 801b396:	d910      	bls.n	801b3ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b398:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b39c:	a809      	add	r0, sp, #36	; 0x24
 801b39e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b3a2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b3a6:	3601      	adds	r6, #1
 801b3a8:	f7ff fc3c 	bl	801ac24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b3ac:	b2b6      	uxth	r6, r6
 801b3ae:	e7ef      	b.n	801b390 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b3b0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d1e5      	bne.n	801b384 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b3b8:	e7bc      	b.n	801b334 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b3ba:	462e      	mov	r6, r5
 801b3bc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b3c0:	42b3      	cmp	r3, r6
 801b3c2:	d90b      	bls.n	801b3dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b3c4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b3c8:	4620      	mov	r0, r4
 801b3ca:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b3ce:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b3d2:	3601      	adds	r6, #1
 801b3d4:	f7ff fc48 	bl	801ac68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b3d8:	b2b6      	uxth	r6, r6
 801b3da:	e7ef      	b.n	801b3bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b3dc:	4a89      	ldr	r2, [pc, #548]	; (801b604 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b3de:	6813      	ldr	r3, [r2, #0]
 801b3e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b3e4:	2b01      	cmp	r3, #1
 801b3e6:	4690      	mov	r8, r2
 801b3e8:	f040 8094 	bne.w	801b514 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801b3ec:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b3f0:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b3f4:	33aa      	adds	r3, #170	; 0xaa
 801b3f6:	f04f 0900 	mov.w	r9, #0
 801b3fa:	42a8      	cmp	r0, r5
 801b3fc:	f103 0308 	add.w	r3, r3, #8
 801b400:	dd0a      	ble.n	801b418 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801b402:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b406:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b40a:	440a      	add	r2, r1
 801b40c:	b212      	sxth	r2, r2
 801b40e:	4591      	cmp	r9, r2
 801b410:	bfb8      	it	lt
 801b412:	4691      	movlt	r9, r2
 801b414:	3501      	adds	r5, #1
 801b416:	e7f0      	b.n	801b3fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801b418:	4b7b      	ldr	r3, [pc, #492]	; (801b608 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b41a:	4e7c      	ldr	r6, [pc, #496]	; (801b60c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b41c:	881d      	ldrh	r5, [r3, #0]
 801b41e:	2300      	movs	r3, #0
 801b420:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b424:	2d0f      	cmp	r5, #15
 801b426:	bf8c      	ite	hi
 801b428:	08ed      	lsrhi	r5, r5, #3
 801b42a:	2501      	movls	r5, #1
 801b42c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b430:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b434:	f8d8 0000 	ldr.w	r0, [r8]
 801b438:	440b      	add	r3, r1
 801b43a:	b21b      	sxth	r3, r3
 801b43c:	4599      	cmp	r9, r3
 801b43e:	6802      	ldr	r2, [r0, #0]
 801b440:	dd4b      	ble.n	801b4da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801b442:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801b446:	4798      	blx	r3
 801b448:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b44c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b450:	4413      	add	r3, r2
 801b452:	b21b      	sxth	r3, r3
 801b454:	195a      	adds	r2, r3, r5
 801b456:	4290      	cmp	r0, r2
 801b458:	da07      	bge.n	801b46a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b45a:	4581      	cmp	r9, r0
 801b45c:	dd05      	ble.n	801b46a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b45e:	4298      	cmp	r0, r3
 801b460:	da33      	bge.n	801b4ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b462:	2b00      	cmp	r3, #0
 801b464:	dd31      	ble.n	801b4ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b466:	4648      	mov	r0, r9
 801b468:	e004      	b.n	801b474 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801b46a:	4298      	cmp	r0, r3
 801b46c:	dbfb      	blt.n	801b466 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801b46e:	4548      	cmp	r0, r9
 801b470:	bfa8      	it	ge
 801b472:	4648      	movge	r0, r9
 801b474:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b478:	f8b7 a000 	ldrh.w	sl, [r7]
 801b47c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b480:	2100      	movs	r1, #0
 801b482:	1ac0      	subs	r0, r0, r3
 801b484:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b488:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b48c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b490:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b494:	4553      	cmp	r3, sl
 801b496:	d9c9      	bls.n	801b42c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b498:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b49c:	ab07      	add	r3, sp, #28
 801b49e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b4a2:	6851      	ldr	r1, [r2, #4]
 801b4a4:	c303      	stmia	r3!, {r0, r1}
 801b4a6:	a807      	add	r0, sp, #28
 801b4a8:	a905      	add	r1, sp, #20
 801b4aa:	f7fa fd5b 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801b4ae:	a807      	add	r0, sp, #28
 801b4b0:	f7fa fd9b 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b4b4:	b920      	cbnz	r0, 801b4c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801b4b6:	6823      	ldr	r3, [r4, #0]
 801b4b8:	a907      	add	r1, sp, #28
 801b4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4bc:	4620      	mov	r0, r4
 801b4be:	4798      	blx	r3
 801b4c0:	f10a 0a01 	add.w	sl, sl, #1
 801b4c4:	fa1f fa8a 	uxth.w	sl, sl
 801b4c8:	e7e2      	b.n	801b490 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b4ca:	f8d8 0000 	ldr.w	r0, [r8]
 801b4ce:	6803      	ldr	r3, [r0, #0]
 801b4d0:	2101      	movs	r1, #1
 801b4d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b4d6:	4798      	blx	r3
 801b4d8:	e7a8      	b.n	801b42c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b4da:	6a13      	ldr	r3, [r2, #32]
 801b4dc:	4798      	blx	r3
 801b4de:	4b4c      	ldr	r3, [pc, #304]	; (801b610 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801b4e0:	781b      	ldrb	r3, [r3, #0]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	f43f af26 	beq.w	801b334 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	883d      	ldrh	r5, [r7, #0]
 801b4ec:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801b4f0:	34ea      	adds	r4, #234	; 0xea
 801b4f2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b4f6:	42ab      	cmp	r3, r5
 801b4f8:	f67f af1c 	bls.w	801b334 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b4fc:	ab1a      	add	r3, sp, #104	; 0x68
 801b4fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b502:	3b44      	subs	r3, #68	; 0x44
 801b504:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b508:	4620      	mov	r0, r4
 801b50a:	3501      	adds	r5, #1
 801b50c:	f7ff fb8a 	bl	801ac24 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b510:	b2ad      	uxth	r5, r5
 801b512:	e7ee      	b.n	801b4f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801b514:	2b02      	cmp	r3, #2
 801b516:	f040 813e 	bne.w	801b796 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801b51a:	4b3e      	ldr	r3, [pc, #248]	; (801b614 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>)
 801b51c:	781b      	ldrb	r3, [r3, #0]
 801b51e:	2b01      	cmp	r3, #1
 801b520:	d02c      	beq.n	801b57c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801b522:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801b526:	883a      	ldrh	r2, [r7, #0]
 801b528:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801b52c:	3201      	adds	r2, #1
 801b52e:	b292      	uxth	r2, r2
 801b530:	2900      	cmp	r1, #0
 801b532:	d0d4      	beq.n	801b4de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b534:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b538:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b53c:	441d      	add	r5, r3
 801b53e:	b22d      	sxth	r5, r5
 801b540:	4610      	mov	r0, r2
 801b542:	f04f 0a00 	mov.w	sl, #0
 801b546:	b283      	uxth	r3, r0
 801b548:	4299      	cmp	r1, r3
 801b54a:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801b54e:	f240 80c5 	bls.w	801b6dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3bc>
 801b552:	4426      	add	r6, r4
 801b554:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801b558:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801b55c:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801b560:	4573      	cmp	r3, lr
 801b562:	4684      	mov	ip, r0
 801b564:	f340 80a7 	ble.w	801b6b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 801b568:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801b56c:	4475      	add	r5, lr
 801b56e:	b22d      	sxth	r5, r5
 801b570:	429d      	cmp	r5, r3
 801b572:	bfa8      	it	ge
 801b574:	461d      	movge	r5, r3
 801b576:	3001      	adds	r0, #1
 801b578:	46e2      	mov	sl, ip
 801b57a:	e7e4      	b.n	801b546 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801b57c:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b580:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b584:	f1bb 0f00 	cmp.w	fp, #0
 801b588:	d0a9      	beq.n	801b4de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b58a:	883b      	ldrh	r3, [r7, #0]
 801b58c:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b590:	3301      	adds	r3, #1
 801b592:	b29b      	uxth	r3, r3
 801b594:	2600      	movs	r6, #0
 801b596:	b299      	uxth	r1, r3
 801b598:	458b      	cmp	fp, r1
 801b59a:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801b59e:	d93b      	bls.n	801b618 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>
 801b5a0:	4425      	add	r5, r4
 801b5a2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b5a6:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b5aa:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b5ae:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b5b2:	4408      	add	r0, r1
 801b5b4:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b5b8:	4471      	add	r1, lr
 801b5ba:	b200      	sxth	r0, r0
 801b5bc:	b209      	sxth	r1, r1
 801b5be:	4288      	cmp	r0, r1
 801b5c0:	469c      	mov	ip, r3
 801b5c2:	da06      	bge.n	801b5d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 801b5c4:	4586      	cmp	lr, r0
 801b5c6:	4672      	mov	r2, lr
 801b5c8:	bfb8      	it	lt
 801b5ca:	4602      	movlt	r2, r0
 801b5cc:	3301      	adds	r3, #1
 801b5ce:	4666      	mov	r6, ip
 801b5d0:	e7e1      	b.n	801b596 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801b5d2:	d10b      	bne.n	801b5ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2cc>
 801b5d4:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b5d8:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b5dc:	458c      	cmp	ip, r1
 801b5de:	bfb4      	ite	lt
 801b5e0:	469c      	movlt	ip, r3
 801b5e2:	46b4      	movge	ip, r6
 801b5e4:	4572      	cmp	r2, lr
 801b5e6:	bfb8      	it	lt
 801b5e8:	4672      	movlt	r2, lr
 801b5ea:	e7ef      	b.n	801b5cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801b5ec:	428a      	cmp	r2, r1
 801b5ee:	bfb8      	it	lt
 801b5f0:	460a      	movlt	r2, r1
 801b5f2:	46b4      	mov	ip, r6
 801b5f4:	e7ea      	b.n	801b5cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801b5f6:	bf00      	nop
 801b5f8:	20006738 	.word	0x20006738
 801b5fc:	20006744 	.word	0x20006744
 801b600:	20000030 	.word	0x20000030
 801b604:	20006700 	.word	0x20006700
 801b608:	200066f6 	.word	0x200066f6
 801b60c:	200066f4 	.word	0x200066f4
 801b610:	200066fe 	.word	0x200066fe
 801b614:	200066f8 	.word	0x200066f8
 801b618:	1961      	adds	r1, r4, r5
 801b61a:	ab07      	add	r3, sp, #28
 801b61c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b620:	6849      	ldr	r1, [r1, #4]
 801b622:	c303      	stmia	r3!, {r0, r1}
 801b624:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b628:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b62c:	2b13      	cmp	r3, #19
 801b62e:	bfd8      	it	le
 801b630:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b634:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b638:	440b      	add	r3, r1
 801b63a:	1a9b      	subs	r3, r3, r2
 801b63c:	a807      	add	r0, sp, #28
 801b63e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b642:	f7ff f8c5 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b646:	a807      	add	r0, sp, #28
 801b648:	f7fa fccf 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b64c:	2800      	cmp	r0, #0
 801b64e:	d197      	bne.n	801b580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b650:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b654:	f8d8 0000 	ldr.w	r0, [r8]
 801b658:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b65c:	f8d0 e000 	ldr.w	lr, [r0]
 801b660:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b664:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b668:	f1bc 0f14 	cmp.w	ip, #20
 801b66c:	bfa8      	it	ge
 801b66e:	f04f 0c14 	movge.w	ip, #20
 801b672:	fa1f fc8c 	uxth.w	ip, ip
 801b676:	f8cd c000 	str.w	ip, [sp]
 801b67a:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 801b67e:	47d0      	blx	sl
 801b680:	4682      	mov	sl, r0
 801b682:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b686:	a807      	add	r0, sp, #28
 801b688:	f7ff f82c 	bl	801a6e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b68c:	6823      	ldr	r3, [r4, #0]
 801b68e:	4425      	add	r5, r4
 801b690:	4620      	mov	r0, r4
 801b692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b694:	a907      	add	r1, sp, #28
 801b696:	4798      	blx	r3
 801b698:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b69c:	eba0 000a 	sub.w	r0, r0, sl
 801b6a0:	b200      	sxth	r0, r0
 801b6a2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b6a6:	2800      	cmp	r0, #0
 801b6a8:	f47f af6a 	bne.w	801b580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b6ac:	b2b1      	uxth	r1, r6
 801b6ae:	4648      	mov	r0, r9
 801b6b0:	f7ff faa2 	bl	801abf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b6b4:	e764      	b.n	801b580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b6b6:	d10c      	bne.n	801b6d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b2>
 801b6b8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b6bc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b6c0:	45b4      	cmp	ip, r6
 801b6c2:	bfb4      	ite	lt
 801b6c4:	4684      	movlt	ip, r0
 801b6c6:	46d4      	movge	ip, sl
 801b6c8:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b6cc:	4433      	add	r3, r6
 801b6ce:	b21b      	sxth	r3, r3
 801b6d0:	e74e      	b.n	801b570 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801b6d2:	4575      	cmp	r5, lr
 801b6d4:	bfa8      	it	ge
 801b6d6:	4675      	movge	r5, lr
 801b6d8:	46d4      	mov	ip, sl
 801b6da:	e74c      	b.n	801b576 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801b6dc:	eb0b 0006 	add.w	r0, fp, r6
 801b6e0:	4426      	add	r6, r4
 801b6e2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b6e6:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b6ea:	f1b9 0f13 	cmp.w	r9, #19
 801b6ee:	bfde      	ittt	le
 801b6f0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b6f4:	444d      	addle	r5, r9
 801b6f6:	b22d      	sxthle	r5, r5
 801b6f8:	f7fa fc77 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b700:	2800      	cmp	r0, #0
 801b702:	f47f af15 	bne.w	801b530 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801b706:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b70a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b70e:	eba5 050c 	sub.w	r5, r5, ip
 801b712:	fa1f f28c 	uxth.w	r2, ip
 801b716:	fa1f f989 	uxth.w	r9, r9
 801b71a:	eb02 0009 	add.w	r0, r2, r9
 801b71e:	2d14      	cmp	r5, #20
 801b720:	bfa8      	it	ge
 801b722:	2514      	movge	r5, #20
 801b724:	b200      	sxth	r0, r0
 801b726:	fa1f fe85 	uxth.w	lr, r5
 801b72a:	eba0 000c 	sub.w	r0, r0, ip
 801b72e:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b732:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b736:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b73a:	4586      	cmp	lr, r0
 801b73c:	f8d8 0000 	ldr.w	r0, [r8]
 801b740:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b744:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b748:	bfb8      	it	lt
 801b74a:	46f1      	movlt	r9, lr
 801b74c:	6805      	ldr	r5, [r0, #0]
 801b74e:	f8cd 9000 	str.w	r9, [sp]
 801b752:	b29b      	uxth	r3, r3
 801b754:	b289      	uxth	r1, r1
 801b756:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 801b75a:	47a8      	blx	r5
 801b75c:	6823      	ldr	r3, [r4, #0]
 801b75e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b764:	a907      	add	r1, sp, #28
 801b766:	4620      	mov	r0, r4
 801b768:	4798      	blx	r3
 801b76a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b76e:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b772:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b776:	1a5b      	subs	r3, r3, r1
 801b778:	440a      	add	r2, r1
 801b77a:	b21b      	sxth	r3, r3
 801b77c:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b780:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b784:	2b00      	cmp	r3, #0
 801b786:	f47f aece 	bne.w	801b526 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801b78a:	fa1f f18a 	uxth.w	r1, sl
 801b78e:	4658      	mov	r0, fp
 801b790:	f7ff fa32 	bl	801abf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b794:	e6c7      	b.n	801b526 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801b796:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b79a:	42ab      	cmp	r3, r5
 801b79c:	f67f ae9f 	bls.w	801b4de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b7a0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b7a4:	ab07      	add	r3, sp, #28
 801b7a6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b7aa:	6851      	ldr	r1, [r2, #4]
 801b7ac:	c303      	stmia	r3!, {r0, r1}
 801b7ae:	a807      	add	r0, sp, #28
 801b7b0:	f7fa fc1b 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7b4:	b920      	cbnz	r0, 801b7c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4a0>
 801b7b6:	6823      	ldr	r3, [r4, #0]
 801b7b8:	a907      	add	r1, sp, #28
 801b7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7bc:	4620      	mov	r0, r4
 801b7be:	4798      	blx	r3
 801b7c0:	3501      	adds	r5, #1
 801b7c2:	b2ad      	uxth	r5, r5
 801b7c4:	e7e7      	b.n	801b796 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801b7c6:	bf00      	nop

0801b7c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b7c8:	4b03      	ldr	r3, [pc, #12]	; (801b7d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	801a      	strh	r2, [r3, #0]
 801b7ce:	805a      	strh	r2, [r3, #2]
 801b7d0:	809a      	strh	r2, [r3, #4]
 801b7d2:	80da      	strh	r2, [r3, #6]
 801b7d4:	4770      	bx	lr
 801b7d6:	bf00      	nop
 801b7d8:	20006744 	.word	0x20006744

0801b7dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7e0:	4606      	mov	r6, r0
 801b7e2:	b09b      	sub	sp, #108	; 0x6c
 801b7e4:	a803      	add	r0, sp, #12
 801b7e6:	4614      	mov	r4, r2
 801b7e8:	468a      	mov	sl, r1
 801b7ea:	461d      	mov	r5, r3
 801b7ec:	f000 feb4 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 801b7f0:	6833      	ldr	r3, [r6, #0]
 801b7f2:	4630      	mov	r0, r6
 801b7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7f6:	4798      	blx	r3
 801b7f8:	6833      	ldr	r3, [r6, #0]
 801b7fa:	4607      	mov	r7, r0
 801b7fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b7fe:	4630      	mov	r0, r6
 801b800:	4798      	blx	r3
 801b802:	462a      	mov	r2, r5
 801b804:	9000      	str	r0, [sp, #0]
 801b806:	4621      	mov	r1, r4
 801b808:	463b      	mov	r3, r7
 801b80a:	a803      	add	r0, sp, #12
 801b80c:	f000 fef1 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b810:	2500      	movs	r5, #0
 801b812:	462c      	mov	r4, r5
 801b814:	46a9      	mov	r9, r5
 801b816:	46a8      	mov	r8, r5
 801b818:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b81c:	2300      	movs	r3, #0
 801b81e:	9302      	str	r3, [sp, #8]
 801b820:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b824:	429c      	cmp	r4, r3
 801b826:	d002      	beq.n	801b82e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b828:	455c      	cmp	r4, fp
 801b82a:	bf18      	it	ne
 801b82c:	4625      	movne	r5, r4
 801b82e:	ab02      	add	r3, sp, #8
 801b830:	4632      	mov	r2, r6
 801b832:	4651      	mov	r1, sl
 801b834:	a803      	add	r0, sp, #12
 801b836:	f001 f9d7 	bl	801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b83a:	4604      	mov	r4, r0
 801b83c:	b108      	cbz	r0, 801b842 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b83e:	280a      	cmp	r0, #10
 801b840:	d10a      	bne.n	801b858 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b842:	45c1      	cmp	r9, r8
 801b844:	bf38      	it	cc
 801b846:	46c1      	movcc	r9, r8
 801b848:	f04f 0800 	mov.w	r8, #0
 801b84c:	2c00      	cmp	r4, #0
 801b84e:	d1e5      	bne.n	801b81c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b850:	4648      	mov	r0, r9
 801b852:	b01b      	add	sp, #108	; 0x6c
 801b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b858:	9a02      	ldr	r2, [sp, #8]
 801b85a:	2a00      	cmp	r2, #0
 801b85c:	d0de      	beq.n	801b81c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b85e:	7b57      	ldrb	r7, [r2, #13]
 801b860:	6833      	ldr	r3, [r6, #0]
 801b862:	8894      	ldrh	r4, [r2, #4]
 801b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b866:	007f      	lsls	r7, r7, #1
 801b868:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b86c:	7a97      	ldrb	r7, [r2, #10]
 801b86e:	4629      	mov	r1, r5
 801b870:	4307      	orrs	r7, r0
 801b872:	4630      	mov	r0, r6
 801b874:	4798      	blx	r3
 801b876:	4438      	add	r0, r7
 801b878:	4480      	add	r8, r0
 801b87a:	fa1f f888 	uxth.w	r8, r8
 801b87e:	e7e5      	b.n	801b84c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b880 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b880:	b508      	push	{r3, lr}
 801b882:	6803      	ldr	r3, [r0, #0]
 801b884:	68db      	ldr	r3, [r3, #12]
 801b886:	4798      	blx	r3
 801b888:	b128      	cbz	r0, 801b896 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b88a:	7b43      	ldrb	r3, [r0, #13]
 801b88c:	7a80      	ldrb	r0, [r0, #10]
 801b88e:	005b      	lsls	r3, r3, #1
 801b890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b894:	4318      	orrs	r0, r3
 801b896:	bd08      	pop	{r3, pc}

0801b898 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b898:	b40e      	push	{r1, r2, r3}
 801b89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b89c:	b09c      	sub	sp, #112	; 0x70
 801b89e:	ab21      	add	r3, sp, #132	; 0x84
 801b8a0:	4605      	mov	r5, r0
 801b8a2:	f853 4b04 	ldr.w	r4, [r3], #4
 801b8a6:	9303      	str	r3, [sp, #12]
 801b8a8:	a805      	add	r0, sp, #20
 801b8aa:	f000 fe55 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 801b8ae:	682b      	ldr	r3, [r5, #0]
 801b8b0:	4628      	mov	r0, r5
 801b8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8b4:	4798      	blx	r3
 801b8b6:	682b      	ldr	r3, [r5, #0]
 801b8b8:	4606      	mov	r6, r0
 801b8ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8bc:	4628      	mov	r0, r5
 801b8be:	4798      	blx	r3
 801b8c0:	4633      	mov	r3, r6
 801b8c2:	ae1c      	add	r6, sp, #112	; 0x70
 801b8c4:	4621      	mov	r1, r4
 801b8c6:	9000      	str	r0, [sp, #0]
 801b8c8:	9a03      	ldr	r2, [sp, #12]
 801b8ca:	2400      	movs	r4, #0
 801b8cc:	a805      	add	r0, sp, #20
 801b8ce:	f000 fe90 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8d2:	f846 4d60 	str.w	r4, [r6, #-96]!
 801b8d6:	462a      	mov	r2, r5
 801b8d8:	4633      	mov	r3, r6
 801b8da:	4621      	mov	r1, r4
 801b8dc:	a805      	add	r0, sp, #20
 801b8de:	f001 f983 	bl	801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b8e2:	b1f0      	cbz	r0, 801b922 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801b8e4:	280a      	cmp	r0, #10
 801b8e6:	d018      	beq.n	801b91a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b8e8:	9f04      	ldr	r7, [sp, #16]
 801b8ea:	b1b7      	cbz	r7, 801b91a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b8ec:	7b78      	ldrb	r0, [r7, #13]
 801b8ee:	7a3b      	ldrb	r3, [r7, #8]
 801b8f0:	88aa      	ldrh	r2, [r5, #4]
 801b8f2:	00c1      	lsls	r1, r0, #3
 801b8f4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b8f8:	4319      	orrs	r1, r3
 801b8fa:	0643      	lsls	r3, r0, #25
 801b8fc:	bf44      	itt	mi
 801b8fe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b902:	b219      	sxthmi	r1, r3
 801b904:	0100      	lsls	r0, r0, #4
 801b906:	79fb      	ldrb	r3, [r7, #7]
 801b908:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b90c:	4303      	orrs	r3, r0
 801b90e:	4413      	add	r3, r2
 801b910:	1a5b      	subs	r3, r3, r1
 801b912:	b29b      	uxth	r3, r3
 801b914:	42a3      	cmp	r3, r4
 801b916:	bfc8      	it	gt
 801b918:	b21c      	sxthgt	r4, r3
 801b91a:	4633      	mov	r3, r6
 801b91c:	462a      	mov	r2, r5
 801b91e:	2100      	movs	r1, #0
 801b920:	e7dc      	b.n	801b8dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b922:	b2a0      	uxth	r0, r4
 801b924:	b01c      	add	sp, #112	; 0x70
 801b926:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b92a:	b003      	add	sp, #12
 801b92c:	4770      	bx	lr

0801b92e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b92e:	b40e      	push	{r1, r2, r3}
 801b930:	b570      	push	{r4, r5, r6, lr}
 801b932:	b09b      	sub	sp, #108	; 0x6c
 801b934:	ab1f      	add	r3, sp, #124	; 0x7c
 801b936:	4604      	mov	r4, r0
 801b938:	f853 5b04 	ldr.w	r5, [r3], #4
 801b93c:	9302      	str	r3, [sp, #8]
 801b93e:	a803      	add	r0, sp, #12
 801b940:	f000 fe0a 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 801b944:	6823      	ldr	r3, [r4, #0]
 801b946:	4620      	mov	r0, r4
 801b948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b94a:	4798      	blx	r3
 801b94c:	6823      	ldr	r3, [r4, #0]
 801b94e:	4606      	mov	r6, r0
 801b950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b952:	4620      	mov	r0, r4
 801b954:	4798      	blx	r3
 801b956:	4633      	mov	r3, r6
 801b958:	9000      	str	r0, [sp, #0]
 801b95a:	9a02      	ldr	r2, [sp, #8]
 801b95c:	4629      	mov	r1, r5
 801b95e:	a803      	add	r0, sp, #12
 801b960:	f000 fe47 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b964:	a803      	add	r0, sp, #12
 801b966:	f001 fa37 	bl	801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b96a:	2401      	movs	r4, #1
 801b96c:	b2a3      	uxth	r3, r4
 801b96e:	b140      	cbz	r0, 801b982 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801b970:	280a      	cmp	r0, #10
 801b972:	bf08      	it	eq
 801b974:	3301      	addeq	r3, #1
 801b976:	a803      	add	r0, sp, #12
 801b978:	bf08      	it	eq
 801b97a:	b21c      	sxtheq	r4, r3
 801b97c:	f001 fa2c 	bl	801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b980:	e7f4      	b.n	801b96c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801b982:	4618      	mov	r0, r3
 801b984:	b01b      	add	sp, #108	; 0x6c
 801b986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b98a:	b003      	add	sp, #12
 801b98c:	4770      	bx	lr

0801b98e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b98e:	b40e      	push	{r1, r2, r3}
 801b990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b992:	b09c      	sub	sp, #112	; 0x70
 801b994:	ab21      	add	r3, sp, #132	; 0x84
 801b996:	4604      	mov	r4, r0
 801b998:	f853 5b04 	ldr.w	r5, [r3], #4
 801b99c:	9303      	str	r3, [sp, #12]
 801b99e:	a805      	add	r0, sp, #20
 801b9a0:	f000 fdda 	bl	801c558 <_ZN8touchgfx12TextProviderC1Ev>
 801b9a4:	6823      	ldr	r3, [r4, #0]
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9aa:	4798      	blx	r3
 801b9ac:	6823      	ldr	r3, [r4, #0]
 801b9ae:	4606      	mov	r6, r0
 801b9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	4798      	blx	r3
 801b9b6:	4633      	mov	r3, r6
 801b9b8:	4629      	mov	r1, r5
 801b9ba:	9000      	str	r0, [sp, #0]
 801b9bc:	9a03      	ldr	r2, [sp, #12]
 801b9be:	a805      	add	r0, sp, #20
 801b9c0:	ad1c      	add	r5, sp, #112	; 0x70
 801b9c2:	f000 fe16 	bl	801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b9c6:	2100      	movs	r1, #0
 801b9c8:	f845 1d60 	str.w	r1, [r5, #-96]!
 801b9cc:	4622      	mov	r2, r4
 801b9ce:	462b      	mov	r3, r5
 801b9d0:	a805      	add	r0, sp, #20
 801b9d2:	f001 f909 	bl	801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b9d6:	26ff      	movs	r6, #255	; 0xff
 801b9d8:	b1d8      	cbz	r0, 801ba12 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801b9da:	280a      	cmp	r0, #10
 801b9dc:	d012      	beq.n	801ba04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b9de:	9804      	ldr	r0, [sp, #16]
 801b9e0:	b180      	cbz	r0, 801ba04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801b9e2:	7b47      	ldrb	r7, [r0, #13]
 801b9e4:	7922      	ldrb	r2, [r4, #4]
 801b9e6:	00fb      	lsls	r3, r7, #3
 801b9e8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b9ec:	7a03      	ldrb	r3, [r0, #8]
 801b9ee:	430b      	orrs	r3, r1
 801b9f0:	0679      	lsls	r1, r7, #25
 801b9f2:	bf44      	itt	mi
 801b9f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b9f8:	b21b      	sxthmi	r3, r3
 801b9fa:	1ad3      	subs	r3, r2, r3
 801b9fc:	b2db      	uxtb	r3, r3
 801b9fe:	429e      	cmp	r6, r3
 801ba00:	bf28      	it	cs
 801ba02:	461e      	movcs	r6, r3
 801ba04:	462b      	mov	r3, r5
 801ba06:	4622      	mov	r2, r4
 801ba08:	2100      	movs	r1, #0
 801ba0a:	a805      	add	r0, sp, #20
 801ba0c:	f001 f8ec 	bl	801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba10:	e7e2      	b.n	801b9d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801ba12:	4630      	mov	r0, r6
 801ba14:	b01c      	add	sp, #112	; 0x70
 801ba16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ba1a:	b003      	add	sp, #12
 801ba1c:	4770      	bx	lr

0801ba1e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ba1e:	b513      	push	{r0, r1, r4, lr}
 801ba20:	1d01      	adds	r1, r0, #4
 801ba22:	4603      	mov	r3, r0
 801ba24:	c903      	ldmia	r1, {r0, r1}
 801ba26:	466a      	mov	r2, sp
 801ba28:	e882 0003 	stmia.w	r2, {r0, r1}
 801ba2c:	2100      	movs	r1, #0
 801ba2e:	9100      	str	r1, [sp, #0]
 801ba30:	6819      	ldr	r1, [r3, #0]
 801ba32:	4618      	mov	r0, r3
 801ba34:	690c      	ldr	r4, [r1, #16]
 801ba36:	4611      	mov	r1, r2
 801ba38:	47a0      	blx	r4
 801ba3a:	b002      	add	sp, #8
 801ba3c:	bd10      	pop	{r4, pc}

0801ba3e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ba3e:	b538      	push	{r3, r4, r5, lr}
 801ba40:	680b      	ldr	r3, [r1, #0]
 801ba42:	460c      	mov	r4, r1
 801ba44:	68db      	ldr	r3, [r3, #12]
 801ba46:	4605      	mov	r5, r0
 801ba48:	4798      	blx	r3
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba50:	4629      	mov	r1, r5
 801ba52:	4798      	blx	r3
 801ba54:	4628      	mov	r0, r5
 801ba56:	bd38      	pop	{r3, r4, r5, pc}

0801ba58 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ba58:	b410      	push	{r4}
 801ba5a:	880a      	ldrh	r2, [r1, #0]
 801ba5c:	8884      	ldrh	r4, [r0, #4]
 801ba5e:	4422      	add	r2, r4
 801ba60:	800a      	strh	r2, [r1, #0]
 801ba62:	88c4      	ldrh	r4, [r0, #6]
 801ba64:	884a      	ldrh	r2, [r1, #2]
 801ba66:	4422      	add	r2, r4
 801ba68:	804a      	strh	r2, [r1, #2]
 801ba6a:	6940      	ldr	r0, [r0, #20]
 801ba6c:	b120      	cbz	r0, 801ba78 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ba6e:	6803      	ldr	r3, [r0, #0]
 801ba70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba76:	4718      	bx	r3
 801ba78:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba7c:	4770      	bx	lr

0801ba7e <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ba7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba80:	460b      	mov	r3, r1
 801ba82:	b085      	sub	sp, #20
 801ba84:	4604      	mov	r4, r0
 801ba86:	b901      	cbnz	r1, 801ba8a <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ba88:	b322      	cbz	r2, 801bad4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801ba8a:	1d27      	adds	r7, r4, #4
 801ba8c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ba90:	466e      	mov	r6, sp
 801ba92:	e886 0003 	stmia.w	r6, {r0, r1}
 801ba96:	88a1      	ldrh	r1, [r4, #4]
 801ba98:	88e5      	ldrh	r5, [r4, #6]
 801ba9a:	4419      	add	r1, r3
 801ba9c:	6823      	ldr	r3, [r4, #0]
 801ba9e:	442a      	add	r2, r5
 801baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baa2:	b209      	sxth	r1, r1
 801baa4:	4620      	mov	r0, r4
 801baa6:	b215      	sxth	r5, r2
 801baa8:	4798      	blx	r3
 801baaa:	6823      	ldr	r3, [r4, #0]
 801baac:	4629      	mov	r1, r5
 801baae:	4620      	mov	r0, r4
 801bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bab2:	4798      	blx	r3
 801bab4:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bab8:	ad02      	add	r5, sp, #8
 801baba:	e885 0003 	stmia.w	r5, {r0, r1}
 801babe:	6960      	ldr	r0, [r4, #20]
 801bac0:	b150      	cbz	r0, 801bad8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801bac2:	6803      	ldr	r3, [r0, #0]
 801bac4:	4631      	mov	r1, r6
 801bac6:	691b      	ldr	r3, [r3, #16]
 801bac8:	4798      	blx	r3
 801baca:	6960      	ldr	r0, [r4, #20]
 801bacc:	6803      	ldr	r3, [r0, #0]
 801bace:	691b      	ldr	r3, [r3, #16]
 801bad0:	4629      	mov	r1, r5
 801bad2:	4798      	blx	r3
 801bad4:	b005      	add	sp, #20
 801bad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bad8:	f7fe ffe2 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 801badc:	6803      	ldr	r3, [r0, #0]
 801bade:	4631      	mov	r1, r6
 801bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bae2:	4798      	blx	r3
 801bae4:	f7fe ffdc 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 801bae8:	6803      	ldr	r3, [r0, #0]
 801baea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801baec:	e7f0      	b.n	801bad0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801baee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801baee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801baf0:	8882      	ldrh	r2, [r0, #4]
 801baf2:	880b      	ldrh	r3, [r1, #0]
 801baf4:	4413      	add	r3, r2
 801baf6:	800b      	strh	r3, [r1, #0]
 801baf8:	88c2      	ldrh	r2, [r0, #6]
 801bafa:	884b      	ldrh	r3, [r1, #2]
 801bafc:	4413      	add	r3, r2
 801bafe:	4602      	mov	r2, r0
 801bb00:	804b      	strh	r3, [r1, #2]
 801bb02:	4605      	mov	r5, r0
 801bb04:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801bb08:	460c      	mov	r4, r1
 801bb0a:	6851      	ldr	r1, [r2, #4]
 801bb0c:	466b      	mov	r3, sp
 801bb0e:	c303      	stmia	r3!, {r0, r1}
 801bb10:	4621      	mov	r1, r4
 801bb12:	4668      	mov	r0, sp
 801bb14:	f7fa fa26 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801bb18:	466b      	mov	r3, sp
 801bb1a:	cb03      	ldmia	r3!, {r0, r1}
 801bb1c:	6020      	str	r0, [r4, #0]
 801bb1e:	6061      	str	r1, [r4, #4]
 801bb20:	6968      	ldr	r0, [r5, #20]
 801bb22:	b128      	cbz	r0, 801bb30 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801bb24:	6803      	ldr	r3, [r0, #0]
 801bb26:	691b      	ldr	r3, [r3, #16]
 801bb28:	4621      	mov	r1, r4
 801bb2a:	4798      	blx	r3
 801bb2c:	b003      	add	sp, #12
 801bb2e:	bd30      	pop	{r4, r5, pc}
 801bb30:	f7fe ffb6 	bl	801aaa0 <_ZN8touchgfx11Application11getInstanceEv>
 801bb34:	6803      	ldr	r3, [r0, #0]
 801bb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb38:	e7f6      	b.n	801bb28 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801bb3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bb3a:	b570      	push	{r4, r5, r6, lr}
 801bb3c:	8882      	ldrh	r2, [r0, #4]
 801bb3e:	880b      	ldrh	r3, [r1, #0]
 801bb40:	4413      	add	r3, r2
 801bb42:	800b      	strh	r3, [r1, #0]
 801bb44:	88c2      	ldrh	r2, [r0, #6]
 801bb46:	884b      	ldrh	r3, [r1, #2]
 801bb48:	460c      	mov	r4, r1
 801bb4a:	4413      	add	r3, r2
 801bb4c:	804b      	strh	r3, [r1, #2]
 801bb4e:	4605      	mov	r5, r0
 801bb50:	1d01      	adds	r1, r0, #4
 801bb52:	4620      	mov	r0, r4
 801bb54:	f7fa fa06 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801bb58:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	dd0b      	ble.n	801bb78 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bb60:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	dd07      	ble.n	801bb78 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bb68:	6968      	ldr	r0, [r5, #20]
 801bb6a:	b128      	cbz	r0, 801bb78 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bb6c:	6803      	ldr	r3, [r0, #0]
 801bb6e:	4621      	mov	r1, r4
 801bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb76:	4718      	bx	r3
 801bb78:	bd70      	pop	{r4, r5, r6, pc}

0801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bb7a:	b510      	push	{r4, lr}
 801bb7c:	4604      	mov	r4, r0
 801bb7e:	4608      	mov	r0, r1
 801bb80:	2300      	movs	r3, #0
 801bb82:	8023      	strh	r3, [r4, #0]
 801bb84:	8063      	strh	r3, [r4, #2]
 801bb86:	6803      	ldr	r3, [r0, #0]
 801bb88:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bb8c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bb90:	80a1      	strh	r1, [r4, #4]
 801bb92:	80e2      	strh	r2, [r4, #6]
 801bb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb96:	4621      	mov	r1, r4
 801bb98:	4798      	blx	r3
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	bd10      	pop	{r4, pc}
	...

0801bba0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801bba0:	b530      	push	{r4, r5, lr}
 801bba2:	8083      	strh	r3, [r0, #4]
 801bba4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bba8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bbac:	7183      	strb	r3, [r0, #6]
 801bbae:	79c3      	ldrb	r3, [r0, #7]
 801bbb0:	6101      	str	r1, [r0, #16]
 801bbb2:	f365 0306 	bfi	r3, r5, #0, #7
 801bbb6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bbba:	8282      	strh	r2, [r0, #20]
 801bbbc:	f365 13c7 	bfi	r3, r5, #7, #1
 801bbc0:	71c3      	strb	r3, [r0, #7]
 801bbc2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801bbc6:	7203      	strb	r3, [r0, #8]
 801bbc8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bbcc:	7243      	strb	r3, [r0, #9]
 801bbce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bbd2:	8143      	strh	r3, [r0, #10]
 801bbd4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801bbd8:	8183      	strh	r3, [r0, #12]
 801bbda:	4b01      	ldr	r3, [pc, #4]	; (801bbe0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801bbdc:	6003      	str	r3, [r0, #0]
 801bbde:	bd30      	pop	{r4, r5, pc}
 801bbe0:	080309cc 	.word	0x080309cc

0801bbe4 <_ZNK8touchgfx9ConstFont4findEt>:
 801bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbe6:	6904      	ldr	r4, [r0, #16]
 801bbe8:	b3bc      	cbz	r4, 801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bbea:	88a3      	ldrh	r3, [r4, #4]
 801bbec:	8a82      	ldrh	r2, [r0, #20]
 801bbee:	1acb      	subs	r3, r1, r3
 801bbf0:	f102 32ff 	add.w	r2, r2, #4294967295
 801bbf4:	d431      	bmi.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bbf6:	4293      	cmp	r3, r2
 801bbf8:	dd0c      	ble.n	801bc14 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bbfa:	230e      	movs	r3, #14
 801bbfc:	fb03 4302 	mla	r3, r3, r2, r4
 801bc00:	889b      	ldrh	r3, [r3, #4]
 801bc02:	1a5b      	subs	r3, r3, r1
 801bc04:	1ad3      	subs	r3, r2, r3
 801bc06:	429a      	cmp	r2, r3
 801bc08:	db27      	blt.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	bfbc      	itt	lt
 801bc0e:	2302      	movlt	r3, #2
 801bc10:	fb92 f3f3 	sdivlt	r3, r2, r3
 801bc14:	2500      	movs	r5, #0
 801bc16:	260e      	movs	r6, #14
 801bc18:	4295      	cmp	r5, r2
 801bc1a:	dc1e      	bgt.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc1c:	fb06 4003 	mla	r0, r6, r3, r4
 801bc20:	8887      	ldrh	r7, [r0, #4]
 801bc22:	42b9      	cmp	r1, r7
 801bc24:	d01a      	beq.n	801bc5c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801bc26:	d20d      	bcs.n	801bc44 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801bc28:	1e5a      	subs	r2, r3, #1
 801bc2a:	4295      	cmp	r5, r2
 801bc2c:	dc15      	bgt.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc2e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801bc32:	1a5b      	subs	r3, r3, r1
 801bc34:	1ad3      	subs	r3, r2, r3
 801bc36:	429a      	cmp	r2, r3
 801bc38:	db0f      	blt.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc3a:	429d      	cmp	r5, r3
 801bc3c:	ddec      	ble.n	801bc18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bc3e:	1953      	adds	r3, r2, r5
 801bc40:	105b      	asrs	r3, r3, #1
 801bc42:	e7e9      	b.n	801bc18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bc44:	1c5d      	adds	r5, r3, #1
 801bc46:	42aa      	cmp	r2, r5
 801bc48:	db07      	blt.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc4a:	8a43      	ldrh	r3, [r0, #18]
 801bc4c:	1acb      	subs	r3, r1, r3
 801bc4e:	442b      	add	r3, r5
 801bc50:	429d      	cmp	r5, r3
 801bc52:	dc02      	bgt.n	801bc5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc54:	429a      	cmp	r2, r3
 801bc56:	dadf      	bge.n	801bc18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bc58:	e7f1      	b.n	801bc3e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801bc5a:	2000      	movs	r0, #0
 801bc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bc5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801bc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc60:	4604      	mov	r4, r0
 801bc62:	4617      	mov	r7, r2
 801bc64:	461e      	mov	r6, r3
 801bc66:	b911      	cbnz	r1, 801bc6e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801bc68:	2500      	movs	r5, #0
 801bc6a:	4628      	mov	r0, r5
 801bc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc6e:	290a      	cmp	r1, #10
 801bc70:	d0fa      	beq.n	801bc68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bc72:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bc76:	4291      	cmp	r1, r2
 801bc78:	d0f6      	beq.n	801bc68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bc7a:	f242 020b 	movw	r2, #8203	; 0x200b
 801bc7e:	4291      	cmp	r1, r2
 801bc80:	d0f2      	beq.n	801bc68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bc82:	f7ff ffaf 	bl	801bbe4 <_ZNK8touchgfx9ConstFont4findEt>
 801bc86:	4605      	mov	r5, r0
 801bc88:	b950      	cbnz	r0, 801bca0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801bc8a:	6823      	ldr	r3, [r4, #0]
 801bc8c:	4620      	mov	r0, r4
 801bc8e:	691b      	ldr	r3, [r3, #16]
 801bc90:	4798      	blx	r3
 801bc92:	4601      	mov	r1, r0
 801bc94:	4620      	mov	r0, r4
 801bc96:	f7ff ffa5 	bl	801bbe4 <_ZNK8touchgfx9ConstFont4findEt>
 801bc9a:	4605      	mov	r5, r0
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	d0e3      	beq.n	801bc68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bca0:	6823      	ldr	r3, [r4, #0]
 801bca2:	4629      	mov	r1, r5
 801bca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bca6:	4620      	mov	r0, r4
 801bca8:	4798      	blx	r3
 801bcaa:	6038      	str	r0, [r7, #0]
 801bcac:	6823      	ldr	r3, [r4, #0]
 801bcae:	4620      	mov	r0, r4
 801bcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcb2:	4798      	blx	r3
 801bcb4:	7030      	strb	r0, [r6, #0]
 801bcb6:	e7d8      	b.n	801bc6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bcb8 <_ZN8touchgfx6memsetEPvhm>:
 801bcb8:	4402      	add	r2, r0
 801bcba:	4290      	cmp	r0, r2
 801bcbc:	d002      	beq.n	801bcc4 <_ZN8touchgfx6memsetEPvhm+0xc>
 801bcbe:	f800 1b01 	strb.w	r1, [r0], #1
 801bcc2:	e7fa      	b.n	801bcba <_ZN8touchgfx6memsetEPvhm+0x2>
 801bcc4:	4770      	bx	lr

0801bcc6 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801bcc6:	b538      	push	{r3, r4, r5, lr}
 801bcc8:	4605      	mov	r5, r0
 801bcca:	f002 fcdf 	bl	801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bcce:	4604      	mov	r4, r0
 801bcd0:	4628      	mov	r0, r5
 801bcd2:	f002 fc17 	bl	801e504 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801bcd6:	2800      	cmp	r0, #0
 801bcd8:	bf14      	ite	ne
 801bcda:	2002      	movne	r0, #2
 801bcdc:	2000      	moveq	r0, #0
 801bcde:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801bce2:	b280      	uxth	r0, r0
 801bce4:	bd38      	pop	{r3, r4, r5, pc}

0801bce6 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801bce6:	b538      	push	{r3, r4, r5, lr}
 801bce8:	4605      	mov	r5, r0
 801bcea:	f002 fccf 	bl	801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bcee:	4604      	mov	r4, r0
 801bcf0:	4628      	mov	r0, r5
 801bcf2:	f002 fc07 	bl	801e504 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	bf14      	ite	ne
 801bcfa:	2002      	movne	r0, #2
 801bcfc:	2000      	moveq	r0, #0
 801bcfe:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801bd02:	f040 0001 	orr.w	r0, r0, #1
 801bd06:	b280      	uxth	r0, r0
 801bd08:	bd38      	pop	{r3, r4, r5, pc}

0801bd0a <_ZN8touchgfx4clzuEm>:
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	b1c8      	cbz	r0, 801bd42 <_ZN8touchgfx4clzuEm+0x38>
 801bd0e:	0c02      	lsrs	r2, r0, #16
 801bd10:	0412      	lsls	r2, r2, #16
 801bd12:	b9a2      	cbnz	r2, 801bd3e <_ZN8touchgfx4clzuEm+0x34>
 801bd14:	0403      	lsls	r3, r0, #16
 801bd16:	2010      	movs	r0, #16
 801bd18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bd1c:	bf04      	itt	eq
 801bd1e:	021b      	lsleq	r3, r3, #8
 801bd20:	3008      	addeq	r0, #8
 801bd22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bd26:	bf04      	itt	eq
 801bd28:	011b      	lsleq	r3, r3, #4
 801bd2a:	3004      	addeq	r0, #4
 801bd2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bd30:	bf04      	itt	eq
 801bd32:	009b      	lsleq	r3, r3, #2
 801bd34:	3002      	addeq	r0, #2
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	db04      	blt.n	801bd44 <_ZN8touchgfx4clzuEm+0x3a>
 801bd3a:	3001      	adds	r0, #1
 801bd3c:	4770      	bx	lr
 801bd3e:	2000      	movs	r0, #0
 801bd40:	e7ea      	b.n	801bd18 <_ZN8touchgfx4clzuEm+0xe>
 801bd42:	2020      	movs	r0, #32
 801bd44:	4770      	bx	lr

0801bd46 <_ZN8touchgfx7muldivuEmmmRm>:
 801bd46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd4a:	4680      	mov	r8, r0
 801bd4c:	460f      	mov	r7, r1
 801bd4e:	4615      	mov	r5, r2
 801bd50:	461e      	mov	r6, r3
 801bd52:	f7ff ffda 	bl	801bd0a <_ZN8touchgfx4clzuEm>
 801bd56:	b998      	cbnz	r0, 801bd80 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801bd58:	4608      	mov	r0, r1
 801bd5a:	f7ff ffd6 	bl	801bd0a <_ZN8touchgfx4clzuEm>
 801bd5e:	2800      	cmp	r0, #0
 801bd60:	dd08      	ble.n	801bd74 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801bd62:	4633      	mov	r3, r6
 801bd64:	462a      	mov	r2, r5
 801bd66:	4641      	mov	r1, r8
 801bd68:	4638      	mov	r0, r7
 801bd6a:	f7ff ffec 	bl	801bd46 <_ZN8touchgfx7muldivuEmmmRm>
 801bd6e:	b003      	add	sp, #12
 801bd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd74:	f04f 33ff 	mov.w	r3, #4294967295
 801bd78:	6033      	str	r3, [r6, #0]
 801bd7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801bd7e:	e7f6      	b.n	801bd6e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801bd80:	fa31 f900 	lsrs.w	r9, r1, r0
 801bd84:	fb01 f308 	mul.w	r3, r1, r8
 801bd88:	d105      	bne.n	801bd96 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801bd8a:	fbb3 f0f5 	udiv	r0, r3, r5
 801bd8e:	fb05 3510 	mls	r5, r5, r0, r3
 801bd92:	6035      	str	r5, [r6, #0]
 801bd94:	e7eb      	b.n	801bd6e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801bd96:	2301      	movs	r3, #1
 801bd98:	fa08 fb00 	lsl.w	fp, r8, r0
 801bd9c:	fa03 f000 	lsl.w	r0, r3, r0
 801bda0:	3801      	subs	r0, #1
 801bda2:	462a      	mov	r2, r5
 801bda4:	4633      	mov	r3, r6
 801bda6:	4641      	mov	r1, r8
 801bda8:	4038      	ands	r0, r7
 801bdaa:	f7ff ffcc 	bl	801bd46 <_ZN8touchgfx7muldivuEmmmRm>
 801bdae:	fbbb faf5 	udiv	sl, fp, r5
 801bdb2:	462a      	mov	r2, r5
 801bdb4:	4607      	mov	r7, r0
 801bdb6:	ab01      	add	r3, sp, #4
 801bdb8:	fb05 b11a 	mls	r1, r5, sl, fp
 801bdbc:	4648      	mov	r0, r9
 801bdbe:	f7ff ffc2 	bl	801bd46 <_ZN8touchgfx7muldivuEmmmRm>
 801bdc2:	9b01      	ldr	r3, [sp, #4]
 801bdc4:	6832      	ldr	r2, [r6, #0]
 801bdc6:	fb09 f40a 	mul.w	r4, r9, sl
 801bdca:	441a      	add	r2, r3
 801bdcc:	fbb2 f3f5 	udiv	r3, r2, r5
 801bdd0:	441c      	add	r4, r3
 801bdd2:	443c      	add	r4, r7
 801bdd4:	4420      	add	r0, r4
 801bdd6:	fb05 2513 	mls	r5, r5, r3, r2
 801bdda:	e7da      	b.n	801bd92 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801bddc <_ZN8touchgfx6muldivElllRl>:
 801bddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bdde:	2800      	cmp	r0, #0
 801bde0:	bfba      	itte	lt
 801bde2:	4240      	neglt	r0, r0
 801bde4:	f04f 34ff 	movlt.w	r4, #4294967295
 801bde8:	2401      	movge	r4, #1
 801bdea:	2900      	cmp	r1, #0
 801bdec:	bfbc      	itt	lt
 801bdee:	4249      	neglt	r1, r1
 801bdf0:	4264      	neglt	r4, r4
 801bdf2:	2a00      	cmp	r2, #0
 801bdf4:	bfb6      	itet	lt
 801bdf6:	4265      	neglt	r5, r4
 801bdf8:	4625      	movge	r5, r4
 801bdfa:	4252      	neglt	r2, r2
 801bdfc:	4288      	cmp	r0, r1
 801bdfe:	461e      	mov	r6, r3
 801be00:	bfc2      	ittt	gt
 801be02:	4603      	movgt	r3, r0
 801be04:	4608      	movgt	r0, r1
 801be06:	4619      	movgt	r1, r3
 801be08:	ab01      	add	r3, sp, #4
 801be0a:	f7ff ff9c 	bl	801bd46 <_ZN8touchgfx7muldivuEmmmRm>
 801be0e:	9b01      	ldr	r3, [sp, #4]
 801be10:	4368      	muls	r0, r5
 801be12:	435c      	muls	r4, r3
 801be14:	6034      	str	r4, [r6, #0]
 801be16:	b002      	add	sp, #8
 801be18:	bd70      	pop	{r4, r5, r6, pc}

0801be1a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801be1a:	2000      	movs	r0, #0
 801be1c:	4770      	bx	lr

0801be1e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801be1e:	2001      	movs	r0, #1
 801be20:	4770      	bx	lr

0801be22 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801be22:	2002      	movs	r0, #2
 801be24:	4770      	bx	lr

0801be26 <_ZN8touchgfx12GestureEventD1Ev>:
 801be26:	4770      	bx	lr

0801be28 <_ZN8touchgfx9DragEventD1Ev>:
 801be28:	4770      	bx	lr

0801be2a <_ZN8touchgfx10ClickEventD1Ev>:
 801be2a:	4770      	bx	lr

0801be2c <_ZN8touchgfx10ClickEventD0Ev>:
 801be2c:	b510      	push	{r4, lr}
 801be2e:	210c      	movs	r1, #12
 801be30:	4604      	mov	r4, r0
 801be32:	f00f fdf4 	bl	802ba1e <_ZdlPvj>
 801be36:	4620      	mov	r0, r4
 801be38:	bd10      	pop	{r4, pc}

0801be3a <_ZN8touchgfx9DragEventD0Ev>:
 801be3a:	b510      	push	{r4, lr}
 801be3c:	2110      	movs	r1, #16
 801be3e:	4604      	mov	r4, r0
 801be40:	f00f fded 	bl	802ba1e <_ZdlPvj>
 801be44:	4620      	mov	r0, r4
 801be46:	bd10      	pop	{r4, pc}

0801be48 <_ZN8touchgfx12GestureEventD0Ev>:
 801be48:	b510      	push	{r4, lr}
 801be4a:	210c      	movs	r1, #12
 801be4c:	4604      	mov	r4, r0
 801be4e:	f00f fde6 	bl	802ba1e <_ZdlPvj>
 801be52:	4620      	mov	r0, r4
 801be54:	bd10      	pop	{r4, pc}
	...

0801be58 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801be58:	b530      	push	{r4, r5, lr}
 801be5a:	460d      	mov	r5, r1
 801be5c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801be5e:	b087      	sub	sp, #28
 801be60:	4604      	mov	r4, r0
 801be62:	b301      	cbz	r1, 801bea6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801be64:	a801      	add	r0, sp, #4
 801be66:	f7ff fe88 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be6a:	892a      	ldrh	r2, [r5, #8]
 801be6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801be70:	7928      	ldrb	r0, [r5, #4]
 801be72:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801be76:	f88d 0010 	strb.w	r0, [sp, #16]
 801be7a:	1ad2      	subs	r2, r2, r3
 801be7c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801be7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801be80:	f8ad 1012 	strh.w	r1, [sp, #18]
 801be84:	441a      	add	r2, r3
 801be86:	896b      	ldrh	r3, [r5, #10]
 801be88:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801be8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be90:	1b5b      	subs	r3, r3, r5
 801be92:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801be94:	442b      	add	r3, r5
 801be96:	4d05      	ldr	r5, [pc, #20]	; (801beac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801be98:	9503      	str	r5, [sp, #12]
 801be9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be9e:	6803      	ldr	r3, [r0, #0]
 801bea0:	a903      	add	r1, sp, #12
 801bea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bea4:	4798      	blx	r3
 801bea6:	b007      	add	sp, #28
 801bea8:	bd30      	pop	{r4, r5, pc}
 801beaa:	bf00      	nop
 801beac:	08030a4c 	.word	0x08030a4c

0801beb0 <_ZNK8touchgfx4Rect9intersectEss>:
 801beb0:	b510      	push	{r4, lr}
 801beb2:	f9b0 3000 	ldrsh.w	r3, [r0]
 801beb6:	428b      	cmp	r3, r1
 801beb8:	dc10      	bgt.n	801bedc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801beba:	8884      	ldrh	r4, [r0, #4]
 801bebc:	4423      	add	r3, r4
 801bebe:	b21b      	sxth	r3, r3
 801bec0:	4299      	cmp	r1, r3
 801bec2:	da0b      	bge.n	801bedc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bec4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bec8:	4293      	cmp	r3, r2
 801beca:	dc07      	bgt.n	801bedc <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801becc:	88c0      	ldrh	r0, [r0, #6]
 801bece:	4418      	add	r0, r3
 801bed0:	b200      	sxth	r0, r0
 801bed2:	4282      	cmp	r2, r0
 801bed4:	bfac      	ite	ge
 801bed6:	2000      	movge	r0, #0
 801bed8:	2001      	movlt	r0, #1
 801beda:	bd10      	pop	{r4, pc}
 801bedc:	2000      	movs	r0, #0
 801bede:	e7fc      	b.n	801beda <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801bee0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bee2:	460c      	mov	r4, r1
 801bee4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bee6:	b089      	sub	sp, #36	; 0x24
 801bee8:	4605      	mov	r5, r0
 801beea:	2900      	cmp	r1, #0
 801beec:	d054      	beq.n	801bf98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801beee:	4668      	mov	r0, sp
 801bef0:	f7ff fe43 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bef4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801bef6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801bef8:	8922      	ldrh	r2, [r4, #8]
 801befa:	88e1      	ldrh	r1, [r4, #6]
 801befc:	443a      	add	r2, r7
 801befe:	4431      	add	r1, r6
 801bf00:	b212      	sxth	r2, r2
 801bf02:	b209      	sxth	r1, r1
 801bf04:	4668      	mov	r0, sp
 801bf06:	f7ff ffd3 	bl	801beb0 <_ZNK8touchgfx4Rect9intersectEss>
 801bf0a:	b1d0      	cbz	r0, 801bf42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bf0c:	89a2      	ldrh	r2, [r4, #12]
 801bf0e:	8961      	ldrh	r1, [r4, #10]
 801bf10:	443a      	add	r2, r7
 801bf12:	4431      	add	r1, r6
 801bf14:	b212      	sxth	r2, r2
 801bf16:	b209      	sxth	r1, r1
 801bf18:	4668      	mov	r0, sp
 801bf1a:	f7ff ffc9 	bl	801beb0 <_ZNK8touchgfx4Rect9intersectEss>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	b978      	cbnz	r0, 801bf42 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bf22:	4a1e      	ldr	r2, [pc, #120]	; (801bf9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801bf24:	9204      	str	r2, [sp, #16]
 801bf26:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bf28:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf2c:	2202      	movs	r2, #2
 801bf2e:	f88d 2014 	strb.w	r2, [sp, #20]
 801bf32:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bf36:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bf3a:	6803      	ldr	r3, [r0, #0]
 801bf3c:	a904      	add	r1, sp, #16
 801bf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf40:	4798      	blx	r3
 801bf42:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801bf44:	a802      	add	r0, sp, #8
 801bf46:	f7ff fe18 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf4a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bf4e:	88e0      	ldrh	r0, [r4, #6]
 801bf50:	8961      	ldrh	r1, [r4, #10]
 801bf52:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bf56:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801bf5a:	8923      	ldrh	r3, [r4, #8]
 801bf5c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801bf5e:	7927      	ldrb	r7, [r4, #4]
 801bf60:	f88d 7014 	strb.w	r7, [sp, #20]
 801bf64:	1a80      	subs	r0, r0, r2
 801bf66:	1a89      	subs	r1, r1, r2
 801bf68:	89a2      	ldrh	r2, [r4, #12]
 801bf6a:	4c0d      	ldr	r4, [pc, #52]	; (801bfa0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bf6c:	9404      	str	r4, [sp, #16]
 801bf6e:	4460      	add	r0, ip
 801bf70:	eba3 030e 	sub.w	r3, r3, lr
 801bf74:	eba2 020e 	sub.w	r2, r2, lr
 801bf78:	f8ad 0016 	strh.w	r0, [sp, #22]
 801bf7c:	4433      	add	r3, r6
 801bf7e:	4461      	add	r1, ip
 801bf80:	4432      	add	r2, r6
 801bf82:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bf84:	f8ad 101a 	strh.w	r1, [sp, #26]
 801bf88:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bf8c:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bf90:	6803      	ldr	r3, [r0, #0]
 801bf92:	a904      	add	r1, sp, #16
 801bf94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf96:	4798      	blx	r3
 801bf98:	b009      	add	sp, #36	; 0x24
 801bf9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf9c:	08030a24 	.word	0x08030a24
 801bfa0:	08030a38 	.word	0x08030a38

0801bfa4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801bfac:	790b      	ldrb	r3, [r1, #4]
 801bfae:	b0a1      	sub	sp, #132	; 0x84
 801bfb0:	4604      	mov	r4, r0
 801bfb2:	460d      	mov	r5, r1
 801bfb4:	f1b9 0f00 	cmp.w	r9, #0
 801bfb8:	d00f      	beq.n	801bfda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	f040 80a0 	bne.w	801c100 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801bfc0:	b021      	add	sp, #132	; 0x84
 801bfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bfca:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bfce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bfd2:	1d20      	adds	r0, r4, #4
 801bfd4:	f7f9 ff14 	bl	8015e00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bfd8:	e092      	b.n	801c100 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d1f0      	bne.n	801bfc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bfde:	4b5e      	ldr	r3, [pc, #376]	; (801c158 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801bfe6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801bfea:	f1ba 0f03 	cmp.w	sl, #3
 801bfee:	ddea      	ble.n	801bfc6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801bff0:	f1ba 0f0c 	cmp.w	sl, #12
 801bff4:	f04f 0303 	mov.w	r3, #3
 801bff8:	bfdc      	itt	le
 801bffa:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801bffe:	fb92 f3f3 	sdivle	r3, r2, r3
 801c002:	9301      	str	r3, [sp, #4]
 801c004:	4b55      	ldr	r3, [pc, #340]	; (801c15c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801c006:	4956      	ldr	r1, [pc, #344]	; (801c160 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801c008:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c00c:	4b55      	ldr	r3, [pc, #340]	; (801c164 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801c00e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c012:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c016:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c01a:	ab0e      	add	r3, sp, #56	; 0x38
 801c01c:	2248      	movs	r2, #72	; 0x48
 801c01e:	2600      	movs	r6, #0
 801c020:	4618      	mov	r0, r3
 801c022:	960a      	str	r6, [sp, #40]	; 0x28
 801c024:	f010 fb98 	bl	802c758 <memcpy>
 801c028:	f04f 32ff 	mov.w	r2, #4294967295
 801c02c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801c030:	f8cd a008 	str.w	sl, [sp, #8]
 801c034:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c038:	fb93 f3f2 	sdiv	r3, r3, r2
 801c03c:	b29b      	uxth	r3, r3
 801c03e:	46b3      	mov	fp, r6
 801c040:	9303      	str	r3, [sp, #12]
 801c042:	2300      	movs	r3, #0
 801c044:	9309      	str	r3, [sp, #36]	; 0x24
 801c046:	9b07      	ldr	r3, [sp, #28]
 801c048:	9a03      	ldr	r2, [sp, #12]
 801c04a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801c04e:	88ef      	ldrh	r7, [r5, #6]
 801c050:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801c054:	fb13 f302 	smulbb	r3, r3, r2
 801c058:	b29b      	uxth	r3, r3
 801c05a:	9304      	str	r3, [sp, #16]
 801c05c:	9b07      	ldr	r3, [sp, #28]
 801c05e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c062:	a80a      	add	r0, sp, #40	; 0x28
 801c064:	685b      	ldr	r3, [r3, #4]
 801c066:	fb13 f302 	smulbb	r3, r3, r2
 801c06a:	b29b      	uxth	r3, r3
 801c06c:	9305      	str	r3, [sp, #20]
 801c06e:	9b04      	ldr	r3, [sp, #16]
 801c070:	441f      	add	r7, r3
 801c072:	9b05      	ldr	r3, [sp, #20]
 801c074:	4498      	add	r8, r3
 801c076:	b23f      	sxth	r7, r7
 801c078:	fa0f f888 	sxth.w	r8, r8
 801c07c:	4642      	mov	r2, r8
 801c07e:	4639      	mov	r1, r7
 801c080:	f7ff ff16 	bl	801beb0 <_ZNK8touchgfx4Rect9intersectEss>
 801c084:	b380      	cbz	r0, 801c0e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c086:	4639      	mov	r1, r7
 801c088:	ab09      	add	r3, sp, #36	; 0x24
 801c08a:	4642      	mov	r2, r8
 801c08c:	1d20      	adds	r0, r4, #4
 801c08e:	f7f9 feb7 	bl	8015e00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c092:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c094:	b341      	cbz	r1, 801c0e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c096:	4549      	cmp	r1, r9
 801c098:	d026      	beq.n	801c0e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c09a:	a80c      	add	r0, sp, #48	; 0x30
 801c09c:	f7ff fd6d 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c0a0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c0a4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c0a8:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c0ac:	2002      	movs	r0, #2
 801c0ae:	fb92 f2f0 	sdiv	r2, r2, r0
 801c0b2:	440a      	add	r2, r1
 801c0b4:	1a99      	subs	r1, r3, r2
 801c0b6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c0ba:	fb93 f3f0 	sdiv	r3, r3, r0
 801c0be:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c0c2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c0c6:	4403      	add	r3, r0
 801c0c8:	1ad3      	subs	r3, r2, r3
 801c0ca:	435b      	muls	r3, r3
 801c0cc:	9a06      	ldr	r2, [sp, #24]
 801c0ce:	fb01 3301 	mla	r3, r1, r1, r3
 801c0d2:	4293      	cmp	r3, r2
 801c0d4:	d208      	bcs.n	801c0e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c0d6:	9a04      	ldr	r2, [sp, #16]
 801c0d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c0dc:	86a2      	strh	r2, [r4, #52]	; 0x34
 801c0de:	9a05      	ldr	r2, [sp, #20]
 801c0e0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801c0e4:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c0e6:	9306      	str	r3, [sp, #24]
 801c0e8:	f10b 0b02 	add.w	fp, fp, #2
 801c0ec:	f1bb 0f08 	cmp.w	fp, #8
 801c0f0:	dda7      	ble.n	801c042 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c0f2:	9b02      	ldr	r3, [sp, #8]
 801c0f4:	4453      	add	r3, sl
 801c0f6:	9302      	str	r3, [sp, #8]
 801c0f8:	9b01      	ldr	r3, [sp, #4]
 801c0fa:	3601      	adds	r6, #1
 801c0fc:	42b3      	cmp	r3, r6
 801c0fe:	d199      	bne.n	801c034 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 801c100:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c102:	2900      	cmp	r1, #0
 801c104:	f43f af5c 	beq.w	801bfc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c108:	a80c      	add	r0, sp, #48	; 0x30
 801c10a:	f7ff fd36 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c10e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c112:	88ea      	ldrh	r2, [r5, #6]
 801c114:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c118:	7929      	ldrb	r1, [r5, #4]
 801c11a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c11e:	1ad2      	subs	r2, r2, r3
 801c120:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c122:	441a      	add	r2, r3
 801c124:	892b      	ldrh	r3, [r5, #8]
 801c126:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c12a:	1a1b      	subs	r3, r3, r0
 801c12c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c12e:	4403      	add	r3, r0
 801c130:	480d      	ldr	r0, [pc, #52]	; (801c168 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801c132:	900e      	str	r0, [sp, #56]	; 0x38
 801c134:	2600      	movs	r6, #0
 801c136:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c138:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c13c:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c140:	6803      	ldr	r3, [r0, #0]
 801c142:	a90e      	add	r1, sp, #56	; 0x38
 801c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c146:	4798      	blx	r3
 801c148:	792b      	ldrb	r3, [r5, #4]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	f43f af38 	beq.w	801bfc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c150:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c154:	e734      	b.n	801bfc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c156:	bf00      	nop
 801c158:	20006700 	.word	0x20006700
 801c15c:	200066f4 	.word	0x200066f4
 801c160:	0802e930 	.word	0x0802e930
 801c164:	200066f6 	.word	0x200066f6
 801c168:	08030a24 	.word	0x08030a24

0801c16c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c16e:	4604      	mov	r4, r0
 801c170:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c174:	3201      	adds	r2, #1
 801c176:	d112      	bne.n	801c19e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c178:	6803      	ldr	r3, [r0, #0]
 801c17a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c17e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c182:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c186:	2500      	movs	r5, #0
 801c188:	9500      	str	r5, [sp, #0]
 801c18a:	466d      	mov	r5, sp
 801c18c:	4629      	mov	r1, r5
 801c18e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c194:	4798      	blx	r3
 801c196:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c19a:	e884 0003 	stmia.w	r4, {r0, r1}
 801c19e:	4620      	mov	r0, r4
 801c1a0:	b003      	add	sp, #12
 801c1a2:	bd30      	pop	{r4, r5, pc}

0801c1a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c1a4:	b513      	push	{r0, r1, r4, lr}
 801c1a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c1aa:	3301      	adds	r3, #1
 801c1ac:	4604      	mov	r4, r0
 801c1ae:	d109      	bne.n	801c1c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c1b0:	4601      	mov	r1, r0
 801c1b2:	4668      	mov	r0, sp
 801c1b4:	f7ff fce1 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c1b8:	f8bd 3000 	ldrh.w	r3, [sp]
 801c1bc:	8423      	strh	r3, [r4, #32]
 801c1be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c1c2:	8463      	strh	r3, [r4, #34]	; 0x22
 801c1c4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c1c8:	b002      	add	sp, #8
 801c1ca:	bd10      	pop	{r4, pc}

0801c1cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c1cc:	b513      	push	{r0, r1, r4, lr}
 801c1ce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c1d2:	3301      	adds	r3, #1
 801c1d4:	4604      	mov	r4, r0
 801c1d6:	d109      	bne.n	801c1ec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c1d8:	4601      	mov	r1, r0
 801c1da:	4668      	mov	r0, sp
 801c1dc:	f7ff fccd 	bl	801bb7a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c1e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801c1e4:	8423      	strh	r3, [r4, #32]
 801c1e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c1ea:	8463      	strh	r3, [r4, #34]	; 0x22
 801c1ec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c1f0:	b002      	add	sp, #8
 801c1f2:	bd10      	pop	{r4, pc}

0801c1f4 <_ZN8touchgfx6ScreenC1Ev>:
 801c1f4:	b570      	push	{r4, r5, r6, lr}
 801c1f6:	4605      	mov	r5, r0
 801c1f8:	4b16      	ldr	r3, [pc, #88]	; (801c254 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c1fa:	f845 3b04 	str.w	r3, [r5], #4
 801c1fe:	2300      	movs	r3, #0
 801c200:	8103      	strh	r3, [r0, #8]
 801c202:	8143      	strh	r3, [r0, #10]
 801c204:	8183      	strh	r3, [r0, #12]
 801c206:	81c3      	strh	r3, [r0, #14]
 801c208:	8203      	strh	r3, [r0, #16]
 801c20a:	8243      	strh	r3, [r0, #18]
 801c20c:	8283      	strh	r3, [r0, #20]
 801c20e:	82c3      	strh	r3, [r0, #22]
 801c210:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c214:	6203      	str	r3, [r0, #32]
 801c216:	8483      	strh	r3, [r0, #36]	; 0x24
 801c218:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c21a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c21e:	4a0e      	ldr	r2, [pc, #56]	; (801c258 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c220:	6343      	str	r3, [r0, #52]	; 0x34
 801c222:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c226:	4b0d      	ldr	r3, [pc, #52]	; (801c25c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c228:	6042      	str	r2, [r0, #4]
 801c22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c22e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c230:	4a0b      	ldr	r2, [pc, #44]	; (801c260 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c232:	4604      	mov	r4, r0
 801c234:	2101      	movs	r1, #1
 801c236:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c23a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c23e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c242:	4628      	mov	r0, r5
 801c244:	4798      	blx	r3
 801c246:	6863      	ldr	r3, [r4, #4]
 801c248:	4628      	mov	r0, r5
 801c24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c24c:	4631      	mov	r1, r6
 801c24e:	4798      	blx	r3
 801c250:	4620      	mov	r0, r4
 801c252:	bd70      	pop	{r4, r5, r6, pc}
 801c254:	08030a60 	.word	0x08030a60
 801c258:	0802f600 	.word	0x0802f600
 801c25c:	200066f6 	.word	0x200066f6
 801c260:	200066f4 	.word	0x200066f4

0801c264 <_ZN8touchgfx6Screen4drawEv>:
 801c264:	b507      	push	{r0, r1, r2, lr}
 801c266:	4b09      	ldr	r3, [pc, #36]	; (801c28c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c268:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c26c:	4b08      	ldr	r3, [pc, #32]	; (801c290 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c26e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c272:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c276:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c27a:	6803      	ldr	r3, [r0, #0]
 801c27c:	2100      	movs	r1, #0
 801c27e:	9100      	str	r1, [sp, #0]
 801c280:	689b      	ldr	r3, [r3, #8]
 801c282:	4669      	mov	r1, sp
 801c284:	4798      	blx	r3
 801c286:	b003      	add	sp, #12
 801c288:	f85d fb04 	ldr.w	pc, [sp], #4
 801c28c:	200066f4 	.word	0x200066f4
 801c290:	200066f6 	.word	0x200066f6

0801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c298:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	b089      	sub	sp, #36	; 0x24
 801c2a0:	4680      	mov	r8, r0
 801c2a2:	460c      	mov	r4, r1
 801c2a4:	4615      	mov	r5, r2
 801c2a6:	dd0e      	ble.n	801c2c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	dd0a      	ble.n	801c2c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2b0:	4628      	mov	r0, r5
 801c2b2:	f7ff ff5b 	bl	801c16c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c2b6:	4621      	mov	r1, r4
 801c2b8:	f7fb fb52 	bl	8017960 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c2bc:	69eb      	ldr	r3, [r5, #28]
 801c2be:	b928      	cbnz	r0, 801c2cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c2c0:	461d      	mov	r5, r3
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d1f4      	bne.n	801c2b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c2c6:	b009      	add	sp, #36	; 0x24
 801c2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2cc:	ae04      	add	r6, sp, #16
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	f000 80b5 	beq.w	801c43e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c2d4:	682b      	ldr	r3, [r5, #0]
 801c2d6:	4629      	mov	r1, r5
 801c2d8:	68db      	ldr	r3, [r3, #12]
 801c2da:	a802      	add	r0, sp, #8
 801c2dc:	4798      	blx	r3
 801c2de:	4628      	mov	r0, r5
 801c2e0:	f7ff ff60 	bl	801c1a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c2e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c2e8:	4407      	add	r7, r0
 801c2ea:	4628      	mov	r0, r5
 801c2ec:	f7ff ff6e 	bl	801c1cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c2f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c2f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c2f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c2fc:	4418      	add	r0, r3
 801c2fe:	4621      	mov	r1, r4
 801c300:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c304:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c308:	b23f      	sxth	r7, r7
 801c30a:	4630      	mov	r0, r6
 801c30c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c310:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c314:	f7f9 fe26 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801c318:	4628      	mov	r0, r5
 801c31a:	f7ff ff27 	bl	801c16c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c31e:	4602      	mov	r2, r0
 801c320:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c324:	ab06      	add	r3, sp, #24
 801c326:	e883 0003 	stmia.w	r3, {r0, r1}
 801c32a:	4611      	mov	r1, r2
 801c32c:	4618      	mov	r0, r3
 801c32e:	f7f9 fe19 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801c332:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c336:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c33a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c33e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c342:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c346:	4299      	cmp	r1, r3
 801c348:	d10b      	bne.n	801c362 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c34a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c34e:	4552      	cmp	r2, sl
 801c350:	d107      	bne.n	801c362 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c352:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c356:	455a      	cmp	r2, fp
 801c358:	d103      	bne.n	801c362 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c35a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c35e:	454a      	cmp	r2, r9
 801c360:	d06d      	beq.n	801c43e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c362:	f1bb 0f00 	cmp.w	fp, #0
 801c366:	dd65      	ble.n	801c434 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c368:	f1b9 0f00 	cmp.w	r9, #0
 801c36c:	dd62      	ble.n	801c434 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c36e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c372:	fa1f f08a 	uxth.w	r0, sl
 801c376:	4552      	cmp	r2, sl
 801c378:	9000      	str	r0, [sp, #0]
 801c37a:	da12      	bge.n	801c3a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c37c:	9301      	str	r3, [sp, #4]
 801c37e:	9b00      	ldr	r3, [sp, #0]
 801c380:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c384:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c388:	1a9a      	subs	r2, r3, r2
 801c38a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c38e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c392:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c396:	69ea      	ldr	r2, [r5, #28]
 801c398:	4631      	mov	r1, r6
 801c39a:	4640      	mov	r0, r8
 801c39c:	f7ff ff7a 	bl	801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3a0:	9b01      	ldr	r3, [sp, #4]
 801c3a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c3a6:	429a      	cmp	r2, r3
 801c3a8:	b29f      	uxth	r7, r3
 801c3aa:	da0d      	bge.n	801c3c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c3ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c3b0:	1aba      	subs	r2, r7, r2
 801c3b2:	f8ad a012 	strh.w	sl, [sp, #18]
 801c3b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c3ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c3be:	69ea      	ldr	r2, [r5, #28]
 801c3c0:	4631      	mov	r1, r6
 801c3c2:	4640      	mov	r0, r8
 801c3c4:	f7ff ff66 	bl	801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3c8:	8822      	ldrh	r2, [r4, #0]
 801c3ca:	88a3      	ldrh	r3, [r4, #4]
 801c3cc:	445f      	add	r7, fp
 801c3ce:	4413      	add	r3, r2
 801c3d0:	b29b      	uxth	r3, r3
 801c3d2:	b2bf      	uxth	r7, r7
 801c3d4:	b23a      	sxth	r2, r7
 801c3d6:	b219      	sxth	r1, r3
 801c3d8:	4291      	cmp	r1, r2
 801c3da:	dd0d      	ble.n	801c3f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c3dc:	1bdb      	subs	r3, r3, r7
 801c3de:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c3e2:	f8ad a012 	strh.w	sl, [sp, #18]
 801c3e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c3ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c3ee:	69ea      	ldr	r2, [r5, #28]
 801c3f0:	4631      	mov	r1, r6
 801c3f2:	4640      	mov	r0, r8
 801c3f4:	f7ff ff4e 	bl	801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3f8:	88e2      	ldrh	r2, [r4, #6]
 801c3fa:	8863      	ldrh	r3, [r4, #2]
 801c3fc:	4413      	add	r3, r2
 801c3fe:	9a00      	ldr	r2, [sp, #0]
 801c400:	444a      	add	r2, r9
 801c402:	b29b      	uxth	r3, r3
 801c404:	fa1f f982 	uxth.w	r9, r2
 801c408:	fa0f f289 	sxth.w	r2, r9
 801c40c:	b219      	sxth	r1, r3
 801c40e:	428a      	cmp	r2, r1
 801c410:	da15      	bge.n	801c43e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c412:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c416:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c41a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c41e:	eba3 0309 	sub.w	r3, r3, r9
 801c422:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c426:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c42a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c42e:	69ea      	ldr	r2, [r5, #28]
 801c430:	4631      	mov	r1, r6
 801c432:	e001      	b.n	801c438 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c434:	69ea      	ldr	r2, [r5, #28]
 801c436:	4621      	mov	r1, r4
 801c438:	4640      	mov	r0, r8
 801c43a:	f7ff ff2b 	bl	801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c43e:	4628      	mov	r0, r5
 801c440:	f7ff fe94 	bl	801c16c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c444:	6861      	ldr	r1, [r4, #4]
 801c446:	4602      	mov	r2, r0
 801c448:	6820      	ldr	r0, [r4, #0]
 801c44a:	4633      	mov	r3, r6
 801c44c:	c303      	stmia	r3!, {r0, r1}
 801c44e:	4611      	mov	r1, r2
 801c450:	4630      	mov	r0, r6
 801c452:	f7f9 fd87 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801c456:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	f77f af33 	ble.w	801c2c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c460:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c464:	2b00      	cmp	r3, #0
 801c466:	f77f af2e 	ble.w	801c2c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c46a:	4628      	mov	r0, r5
 801c46c:	f7ff fe9a 	bl	801c1a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c470:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c474:	1a18      	subs	r0, r3, r0
 801c476:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c47a:	4628      	mov	r0, r5
 801c47c:	f7ff fea6 	bl	801c1cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c480:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c484:	1a18      	subs	r0, r3, r0
 801c486:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c48a:	682b      	ldr	r3, [r5, #0]
 801c48c:	4631      	mov	r1, r6
 801c48e:	689b      	ldr	r3, [r3, #8]
 801c490:	4628      	mov	r0, r5
 801c492:	4798      	blx	r3
 801c494:	e717      	b.n	801c2c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c496 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c498:	aa02      	add	r2, sp, #8
 801c49a:	2300      	movs	r3, #0
 801c49c:	f842 3d04 	str.w	r3, [r2, #-4]!
 801c4a0:	4604      	mov	r4, r0
 801c4a2:	3004      	adds	r0, #4
 801c4a4:	460d      	mov	r5, r1
 801c4a6:	f7f9 fe35 	bl	8016114 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c4aa:	9a01      	ldr	r2, [sp, #4]
 801c4ac:	b11a      	cbz	r2, 801c4b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801c4ae:	4629      	mov	r1, r5
 801c4b0:	4620      	mov	r0, r4
 801c4b2:	f7ff feef 	bl	801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4b6:	b003      	add	sp, #12
 801c4b8:	bd30      	pop	{r4, r5, pc}

0801c4ba <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c4ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c4bc:	4602      	mov	r2, r0
 801c4be:	4604      	mov	r4, r0
 801c4c0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c4c4:	460d      	mov	r5, r1
 801c4c6:	6851      	ldr	r1, [r2, #4]
 801c4c8:	466b      	mov	r3, sp
 801c4ca:	c303      	stmia	r3!, {r0, r1}
 801c4cc:	4629      	mov	r1, r5
 801c4ce:	4668      	mov	r0, sp
 801c4d0:	f7f9 fd48 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 801c4d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c4d8:	4669      	mov	r1, sp
 801c4da:	b123      	cbz	r3, 801c4e6 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f7ff ffda 	bl	801c496 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c4e2:	b003      	add	sp, #12
 801c4e4:	bd30      	pop	{r4, r5, pc}
 801c4e6:	1d20      	adds	r0, r4, #4
 801c4e8:	f7f9 fddb 	bl	80160a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c4ec:	e7f9      	b.n	801c4e2 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c4ee <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c4ee:	680a      	ldr	r2, [r1, #0]
 801c4f0:	460b      	mov	r3, r1
 801c4f2:	6992      	ldr	r2, [r2, #24]
 801c4f4:	1d01      	adds	r1, r0, #4
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	4710      	bx	r2

0801c4fa <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801c4fa:	b510      	push	{r4, lr}
 801c4fc:	4298      	cmp	r0, r3
 801c4fe:	eb01 0402 	add.w	r4, r1, r2
 801c502:	b224      	sxth	r4, r4
 801c504:	d226      	bcs.n	801c554 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c506:	b32b      	cbz	r3, 801c554 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c508:	ee07 2a90 	vmov	s15, r2
 801c50c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c510:	ee07 0a90 	vmov	s15, r0
 801c514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c518:	ee07 3a90 	vmov	s15, r3
 801c51c:	ee67 6a26 	vmul.f32	s13, s14, s13
 801c520:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c524:	ee07 1a90 	vmov	s15, r1
 801c528:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801c52c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c530:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c534:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c540:	bfcc      	ite	gt
 801c542:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c546:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c54a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c54e:	ee17 3a90 	vmov	r3, s15
 801c552:	b21c      	sxth	r4, r3
 801c554:	4620      	mov	r0, r4
 801c556:	bd10      	pop	{r4, pc}

0801c558 <_ZN8touchgfx12TextProviderC1Ev>:
 801c558:	b538      	push	{r3, r4, r5, lr}
 801c55a:	2500      	movs	r5, #0
 801c55c:	4604      	mov	r4, r0
 801c55e:	e9c0 5500 	strd	r5, r5, [r0]
 801c562:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801c566:	7405      	strb	r5, [r0, #16]
 801c568:	82c5      	strh	r5, [r0, #22]
 801c56a:	8305      	strh	r5, [r0, #24]
 801c56c:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c56e:	8605      	strh	r5, [r0, #48]	; 0x30
 801c570:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c572:	8705      	strh	r5, [r0, #56]	; 0x38
 801c574:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801c578:	220e      	movs	r2, #14
 801c57a:	4629      	mov	r1, r5
 801c57c:	3044      	adds	r0, #68	; 0x44
 801c57e:	f010 f8f9 	bl	802c774 <memset>
 801c582:	2301      	movs	r3, #1
 801c584:	4620      	mov	r0, r4
 801c586:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801c58a:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801c58e:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801c592:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801c596:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801c59a:	f7f6 fd2b 	bl	8012ff4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c59e:	4620      	mov	r0, r4
 801c5a0:	bd38      	pop	{r3, r4, r5, pc}

0801c5a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c5a2:	b530      	push	{r4, r5, lr}
 801c5a4:	2500      	movs	r5, #0
 801c5a6:	2401      	movs	r4, #1
 801c5a8:	6843      	ldr	r3, [r0, #4]
 801c5aa:	b913      	cbnz	r3, 801c5b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c5ac:	6803      	ldr	r3, [r0, #0]
 801c5ae:	b1f3      	cbz	r3, 801c5ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c5b0:	6043      	str	r3, [r0, #4]
 801c5b2:	7c03      	ldrb	r3, [r0, #16]
 801c5b4:	b143      	cbz	r3, 801c5c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c5b6:	68c3      	ldr	r3, [r0, #12]
 801c5b8:	b12b      	cbz	r3, 801c5c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c5ba:	881a      	ldrh	r2, [r3, #0]
 801c5bc:	b11a      	cbz	r2, 801c5c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c5be:	1c9a      	adds	r2, r3, #2
 801c5c0:	60c2      	str	r2, [r0, #12]
 801c5c2:	8818      	ldrh	r0, [r3, #0]
 801c5c4:	bd30      	pop	{r4, r5, pc}
 801c5c6:	7405      	strb	r5, [r0, #16]
 801c5c8:	6843      	ldr	r3, [r0, #4]
 801c5ca:	8819      	ldrh	r1, [r3, #0]
 801c5cc:	b179      	cbz	r1, 801c5ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c5ce:	1c9a      	adds	r2, r3, #2
 801c5d0:	2902      	cmp	r1, #2
 801c5d2:	6042      	str	r2, [r0, #4]
 801c5d4:	d1f5      	bne.n	801c5c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c5d6:	6883      	ldr	r3, [r0, #8]
 801c5d8:	1d1a      	adds	r2, r3, #4
 801c5da:	6082      	str	r2, [r0, #8]
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	60c3      	str	r3, [r0, #12]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d0e1      	beq.n	801c5a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5e4:	881b      	ldrh	r3, [r3, #0]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d0de      	beq.n	801c5a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5ea:	7404      	strb	r4, [r0, #16]
 801c5ec:	e7dc      	b.n	801c5a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5ee:	2000      	movs	r0, #0
 801c5f0:	e7e8      	b.n	801c5c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c5f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c5f2:	b410      	push	{r4}
 801c5f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c5f6:	9b01      	ldr	r3, [sp, #4]
 801c5f8:	6403      	str	r3, [r0, #64]	; 0x40
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	6082      	str	r2, [r0, #8]
 801c5fe:	6001      	str	r1, [r0, #0]
 801c600:	6043      	str	r3, [r0, #4]
 801c602:	60c3      	str	r3, [r0, #12]
 801c604:	7403      	strb	r3, [r0, #16]
 801c606:	8603      	strh	r3, [r0, #48]	; 0x30
 801c608:	8303      	strh	r3, [r0, #24]
 801c60a:	8703      	strh	r3, [r0, #56]	; 0x38
 801c60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c610:	f7f6 bcf0 	b.w	8012ff4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c614 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c614:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c616:	4605      	mov	r5, r0
 801c618:	4608      	mov	r0, r1
 801c61a:	b1e9      	cbz	r1, 801c658 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801c61c:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801c620:	460b      	mov	r3, r1
 801c622:	f101 0708 	add.w	r7, r1, #8
 801c626:	4622      	mov	r2, r4
 801c628:	6818      	ldr	r0, [r3, #0]
 801c62a:	6859      	ldr	r1, [r3, #4]
 801c62c:	4626      	mov	r6, r4
 801c62e:	c603      	stmia	r6!, {r0, r1}
 801c630:	3308      	adds	r3, #8
 801c632:	42bb      	cmp	r3, r7
 801c634:	4634      	mov	r4, r6
 801c636:	d1f7      	bne.n	801c628 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c638:	6818      	ldr	r0, [r3, #0]
 801c63a:	6030      	str	r0, [r6, #0]
 801c63c:	889b      	ldrh	r3, [r3, #4]
 801c63e:	80b3      	strh	r3, [r6, #4]
 801c640:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801c644:	015b      	lsls	r3, r3, #5
 801c646:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c64a:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801c64e:	430b      	orrs	r3, r1
 801c650:	425b      	negs	r3, r3
 801c652:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801c656:	4610      	mov	r0, r2
 801c658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c65a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c65a:	b538      	push	{r3, r4, r5, lr}
 801c65c:	460c      	mov	r4, r1
 801c65e:	6811      	ldr	r1, [r2, #0]
 801c660:	4610      	mov	r0, r2
 801c662:	68cd      	ldr	r5, [r1, #12]
 801c664:	4619      	mov	r1, r3
 801c666:	47a8      	blx	r5
 801c668:	2800      	cmp	r0, #0
 801c66a:	bf08      	it	eq
 801c66c:	4620      	moveq	r0, r4
 801c66e:	bd38      	pop	{r3, r4, r5, pc}

0801c670 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c672:	4604      	mov	r4, r0
 801c674:	4615      	mov	r5, r2
 801c676:	4608      	mov	r0, r1
 801c678:	b93a      	cbnz	r2, 801c68a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c67a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c67e:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801c682:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801c686:	4628      	mov	r0, r5
 801c688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c68a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c68e:	8893      	ldrh	r3, [r2, #4]
 801c690:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c694:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c698:	79ee      	ldrb	r6, [r5, #7]
 801c69a:	4316      	orrs	r6, r2
 801c69c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c6a0:	189a      	adds	r2, r3, r2
 801c6a2:	b291      	uxth	r1, r2
 801c6a4:	291d      	cmp	r1, #29
 801c6a6:	b2b7      	uxth	r7, r6
 801c6a8:	f200 8083 	bhi.w	801c7b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801c6ac:	2201      	movs	r2, #1
 801c6ae:	408a      	lsls	r2, r1
 801c6b0:	4978      	ldr	r1, [pc, #480]	; (801c894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c6b2:	420a      	tst	r2, r1
 801c6b4:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801c6b8:	d12d      	bne.n	801c716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c6ba:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c6be:	d078      	beq.n	801c7b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801c6c0:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801c6c4:	462b      	mov	r3, r5
 801c6c6:	f105 0e08 	add.w	lr, r5, #8
 801c6ca:	4615      	mov	r5, r2
 801c6cc:	6818      	ldr	r0, [r3, #0]
 801c6ce:	6859      	ldr	r1, [r3, #4]
 801c6d0:	4694      	mov	ip, r2
 801c6d2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c6d6:	3308      	adds	r3, #8
 801c6d8:	4573      	cmp	r3, lr
 801c6da:	4662      	mov	r2, ip
 801c6dc:	d1f6      	bne.n	801c6cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801c6de:	6818      	ldr	r0, [r3, #0]
 801c6e0:	f8cc 0000 	str.w	r0, [ip]
 801c6e4:	889b      	ldrh	r3, [r3, #4]
 801c6e6:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c6ea:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801c6ee:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801c6f2:	b2b3      	uxth	r3, r6
 801c6f4:	1aca      	subs	r2, r1, r3
 801c6f6:	b292      	uxth	r2, r2
 801c6f8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801c6fc:	10d2      	asrs	r2, r2, #3
 801c6fe:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c702:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c706:	4302      	orrs	r2, r0
 801c708:	1bcf      	subs	r7, r1, r7
 801c70a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801c70e:	1afb      	subs	r3, r7, r3
 801c710:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801c714:	e7b7      	b.n	801c686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c716:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c718:	b92b      	cbnz	r3, 801c726 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c71a:	4b5f      	ldr	r3, [pc, #380]	; (801c898 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c71c:	4a5f      	ldr	r2, [pc, #380]	; (801c89c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c71e:	4860      	ldr	r0, [pc, #384]	; (801c8a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c720:	21bf      	movs	r1, #191	; 0xbf
 801c722:	f00f ff9b 	bl	802c65c <__assert_func>
 801c726:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c728:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c72c:	8b59      	ldrh	r1, [r3, #26]
 801c72e:	f640 6333 	movw	r3, #3635	; 0xe33
 801c732:	4299      	cmp	r1, r3
 801c734:	d110      	bne.n	801c758 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c736:	6803      	ldr	r3, [r0, #0]
 801c738:	68db      	ldr	r3, [r3, #12]
 801c73a:	4798      	blx	r3
 801c73c:	7b41      	ldrb	r1, [r0, #13]
 801c73e:	00cb      	lsls	r3, r1, #3
 801c740:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c744:	7a03      	ldrb	r3, [r0, #8]
 801c746:	0648      	lsls	r0, r1, #25
 801c748:	ea43 0302 	orr.w	r3, r3, r2
 801c74c:	bf44      	itt	mi
 801c74e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c752:	b21b      	sxthmi	r3, r3
 801c754:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c758:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801c75c:	443b      	add	r3, r7
 801c75e:	4433      	add	r3, r6
 801c760:	b29b      	uxth	r3, r3
 801c762:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801c766:	462a      	mov	r2, r5
 801c768:	f105 0c08 	add.w	ip, r5, #8
 801c76c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c770:	4635      	mov	r5, r6
 801c772:	6810      	ldr	r0, [r2, #0]
 801c774:	6851      	ldr	r1, [r2, #4]
 801c776:	4637      	mov	r7, r6
 801c778:	c703      	stmia	r7!, {r0, r1}
 801c77a:	3208      	adds	r2, #8
 801c77c:	4562      	cmp	r2, ip
 801c77e:	463e      	mov	r6, r7
 801c780:	d1f7      	bne.n	801c772 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c782:	6810      	ldr	r0, [r2, #0]
 801c784:	6038      	str	r0, [r7, #0]
 801c786:	8892      	ldrh	r2, [r2, #4]
 801c788:	80ba      	strh	r2, [r7, #4]
 801c78a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801c78e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801c792:	10db      	asrs	r3, r3, #3
 801c794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c79c:	4313      	orrs	r3, r2
 801c79e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801c7a2:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801c7a6:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801c7aa:	1a9b      	subs	r3, r3, r2
 801c7ac:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c7b0:	e769      	b.n	801c686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c7b2:	f023 0204 	bic.w	r2, r3, #4
 801c7b6:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c7ba:	428a      	cmp	r2, r1
 801c7bc:	d003      	beq.n	801c7c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801c7be:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c7c2:	4293      	cmp	r3, r2
 801c7c4:	d120      	bne.n	801c808 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801c7c6:	3b01      	subs	r3, #1
 801c7c8:	4602      	mov	r2, r0
 801c7ca:	b29b      	uxth	r3, r3
 801c7cc:	4629      	mov	r1, r5
 801c7ce:	4620      	mov	r0, r4
 801c7d0:	f7ff ff43 	bl	801c65a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c7d4:	7b41      	ldrb	r1, [r0, #13]
 801c7d6:	00cb      	lsls	r3, r1, #3
 801c7d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7dc:	7a03      	ldrb	r3, [r0, #8]
 801c7de:	0649      	lsls	r1, r1, #25
 801c7e0:	ea43 0302 	orr.w	r3, r3, r2
 801c7e4:	bf44      	itt	mi
 801c7e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7ea:	b21b      	sxthmi	r3, r3
 801c7ec:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c7f0:	7b6b      	ldrb	r3, [r5, #13]
 801c7f2:	7aaa      	ldrb	r2, [r5, #10]
 801c7f4:	005b      	lsls	r3, r3, #1
 801c7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c7fa:	4313      	orrs	r3, r2
 801c7fc:	115a      	asrs	r2, r3, #5
 801c7fe:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c802:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801c806:	e036      	b.n	801c876 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c808:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c80c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c810:	7a2a      	ldrb	r2, [r5, #8]
 801c812:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c816:	ea42 0201 	orr.w	r2, r2, r1
 801c81a:	bf1c      	itt	ne
 801c81c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c820:	b212      	sxthne	r2, r2
 801c822:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c826:	f640 6109 	movw	r1, #3593	; 0xe09
 801c82a:	f023 0210 	bic.w	r2, r3, #16
 801c82e:	428a      	cmp	r2, r1
 801c830:	d003      	beq.n	801c83a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801c832:	f640 6213 	movw	r2, #3603	; 0xe13
 801c836:	4293      	cmp	r3, r2
 801c838:	d12a      	bne.n	801c890 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c83a:	7b6e      	ldrb	r6, [r5, #13]
 801c83c:	0076      	lsls	r6, r6, #1
 801c83e:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c842:	7aae      	ldrb	r6, [r5, #10]
 801c844:	4316      	orrs	r6, r2
 801c846:	f640 6213 	movw	r2, #3603	; 0xe13
 801c84a:	4293      	cmp	r3, r2
 801c84c:	bf18      	it	ne
 801c84e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c852:	4602      	mov	r2, r0
 801c854:	bf14      	ite	ne
 801c856:	b29b      	uxthne	r3, r3
 801c858:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c85c:	4629      	mov	r1, r5
 801c85e:	4620      	mov	r0, r4
 801c860:	f7ff fefb 	bl	801c65a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c864:	7b43      	ldrb	r3, [r0, #13]
 801c866:	7a82      	ldrb	r2, [r0, #10]
 801c868:	005b      	lsls	r3, r3, #1
 801c86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c86e:	4313      	orrs	r3, r2
 801c870:	1af6      	subs	r6, r6, r3
 801c872:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801c876:	7b69      	ldrb	r1, [r5, #13]
 801c878:	00cb      	lsls	r3, r1, #3
 801c87a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c87e:	7a2b      	ldrb	r3, [r5, #8]
 801c880:	4313      	orrs	r3, r2
 801c882:	064a      	lsls	r2, r1, #25
 801c884:	bf44      	itt	mi
 801c886:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c88a:	b21b      	sxthmi	r3, r3
 801c88c:	1bdb      	subs	r3, r3, r7
 801c88e:	e73f      	b.n	801c710 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c890:	2300      	movs	r3, #0
 801c892:	e7b6      	b.n	801c802 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801c894:	3fc00079 	.word	0x3fc00079
 801c898:	08030a8c 	.word	0x08030a8c
 801c89c:	08030cfe 	.word	0x08030cfe
 801c8a0:	08030a95 	.word	0x08030a95

0801c8a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8a8:	4604      	mov	r4, r0
 801c8aa:	b942      	cbnz	r2, 801c8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c8ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c8b0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c8b4:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801c8b8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801c8bc:	e046      	b.n	801c94c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c8be:	7b51      	ldrb	r1, [r2, #13]
 801c8c0:	8893      	ldrh	r3, [r2, #4]
 801c8c2:	010f      	lsls	r7, r1, #4
 801c8c4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c8c8:	79d7      	ldrb	r7, [r2, #7]
 801c8ca:	4307      	orrs	r7, r0
 801c8cc:	2f04      	cmp	r7, #4
 801c8ce:	b2bd      	uxth	r5, r7
 801c8d0:	bfcc      	ite	gt
 801c8d2:	08bf      	lsrgt	r7, r7, #2
 801c8d4:	2701      	movle	r7, #1
 801c8d6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c8da:	f200 80ab 	bhi.w	801ca34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c8de:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c8e2:	4283      	cmp	r3, r0
 801c8e4:	d216      	bcs.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c8e6:	f240 605b 	movw	r0, #1627	; 0x65b
 801c8ea:	4283      	cmp	r3, r0
 801c8ec:	d859      	bhi.n	801c9a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c8ee:	f240 6057 	movw	r0, #1623	; 0x657
 801c8f2:	4283      	cmp	r3, r0
 801c8f4:	d20e      	bcs.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c8f6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c8fa:	d24a      	bcs.n	801c992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c8fc:	f240 604e 	movw	r0, #1614	; 0x64e
 801c900:	4283      	cmp	r3, r0
 801c902:	d207      	bcs.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c904:	f240 601a 	movw	r0, #1562	; 0x61a
 801c908:	4283      	cmp	r3, r0
 801c90a:	d02a      	beq.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c90c:	d821      	bhi.n	801c952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c90e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c912:	d35b      	bcc.n	801c9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c914:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801c918:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c91c:	f040 80d0 	bne.w	801cac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c920:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801c924:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c928:	f040 80ca 	bne.w	801cac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c92c:	00cb      	lsls	r3, r1, #3
 801c92e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c932:	7a13      	ldrb	r3, [r2, #8]
 801c934:	0649      	lsls	r1, r1, #25
 801c936:	ea43 0300 	orr.w	r3, r3, r0
 801c93a:	bf44      	itt	mi
 801c93c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c940:	b21b      	sxthmi	r3, r3
 801c942:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c946:	1b5d      	subs	r5, r3, r5
 801c948:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801c94c:	4610      	mov	r0, r2
 801c94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c952:	f240 604b 	movw	r0, #1611	; 0x64b
 801c956:	4283      	cmp	r3, r0
 801c958:	d338      	bcc.n	801c9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c95a:	f240 604c 	movw	r0, #1612	; 0x64c
 801c95e:	4283      	cmp	r3, r0
 801c960:	d9d8      	bls.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c962:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c966:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801c96a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c96e:	f040 80f1 	bne.w	801cb54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801c972:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c976:	f040 80ed 	bne.w	801cb54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801c97a:	00cb      	lsls	r3, r1, #3
 801c97c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c980:	7a13      	ldrb	r3, [r2, #8]
 801c982:	064e      	lsls	r6, r1, #25
 801c984:	ea43 0300 	orr.w	r3, r3, r0
 801c988:	bf44      	itt	mi
 801c98a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c98e:	b21b      	sxthmi	r3, r3
 801c990:	e7d9      	b.n	801c946 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c992:	f240 6054 	movw	r0, #1620	; 0x654
 801c996:	4283      	cmp	r3, r0
 801c998:	d8e3      	bhi.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c99a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c99e:	d9e0      	bls.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9a0:	e7b8      	b.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9a2:	f240 6074 	movw	r0, #1652	; 0x674
 801c9a6:	4283      	cmp	r3, r0
 801c9a8:	d0b4      	beq.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9aa:	d82d      	bhi.n	801ca08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c9ac:	f240 605e 	movw	r0, #1630	; 0x65e
 801c9b0:	4283      	cmp	r3, r0
 801c9b2:	d804      	bhi.n	801c9be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c9b4:	f240 605d 	movw	r0, #1629	; 0x65d
 801c9b8:	4283      	cmp	r3, r0
 801c9ba:	d3d2      	bcc.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9bc:	e7aa      	b.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9be:	f240 605f 	movw	r0, #1631	; 0x65f
 801c9c2:	4283      	cmp	r3, r0
 801c9c4:	d0cd      	beq.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c9c6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c9ca:	d0a3      	beq.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9cc:	00cb      	lsls	r3, r1, #3
 801c9ce:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9d2:	7a13      	ldrb	r3, [r2, #8]
 801c9d4:	0649      	lsls	r1, r1, #25
 801c9d6:	ea43 0300 	orr.w	r3, r3, r0
 801c9da:	bf44      	itt	mi
 801c9dc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9e0:	b21b      	sxthmi	r3, r3
 801c9e2:	1b5d      	subs	r5, r3, r5
 801c9e4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c9e8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801c9ec:	7b53      	ldrb	r3, [r2, #13]
 801c9ee:	015b      	lsls	r3, r3, #5
 801c9f0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c9f4:	7993      	ldrb	r3, [r2, #6]
 801c9f6:	430b      	orrs	r3, r1
 801c9f8:	005b      	lsls	r3, r3, #1
 801c9fa:	2105      	movs	r1, #5
 801c9fc:	fb93 f3f1 	sdiv	r3, r3, r1
 801ca00:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ca04:	440b      	add	r3, r1
 801ca06:	e757      	b.n	801c8b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ca08:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ca0c:	4283      	cmp	r3, r0
 801ca0e:	d809      	bhi.n	801ca24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ca10:	f240 60df 	movw	r0, #1759	; 0x6df
 801ca14:	4283      	cmp	r3, r0
 801ca16:	f4bf af7d 	bcs.w	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca1a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ca1e:	2b05      	cmp	r3, #5
 801ca20:	d8d4      	bhi.n	801c9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ca22:	e777      	b.n	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca24:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ca28:	4283      	cmp	r3, r0
 801ca2a:	d09a      	beq.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca2c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ca30:	4283      	cmp	r3, r0
 801ca32:	e7ca      	b.n	801c9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ca34:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ca38:	d22b      	bcs.n	801ca92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ca3a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ca3e:	4283      	cmp	r3, r0
 801ca40:	d28f      	bcs.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca42:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ca46:	4283      	cmp	r3, r0
 801ca48:	d816      	bhi.n	801ca78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ca4a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ca4e:	4283      	cmp	r3, r0
 801ca50:	f4bf af60 	bcs.w	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca54:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ca58:	4283      	cmp	r3, r0
 801ca5a:	d80a      	bhi.n	801ca72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ca5c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ca60:	4283      	cmp	r3, r0
 801ca62:	f4bf af57 	bcs.w	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca66:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ca6a:	4283      	cmp	r3, r0
 801ca6c:	f43f af79 	beq.w	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca70:	e7ac      	b.n	801c9cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ca72:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ca76:	e7f8      	b.n	801ca6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801ca78:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ca7c:	4283      	cmp	r3, r0
 801ca7e:	d802      	bhi.n	801ca86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801ca80:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ca84:	e798      	b.n	801c9b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801ca86:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ca8a:	4283      	cmp	r3, r0
 801ca8c:	f47f af42 	bne.w	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca90:	e767      	b.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca92:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ca96:	4283      	cmp	r3, r0
 801ca98:	f43f af63 	beq.w	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca9c:	d802      	bhi.n	801caa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ca9e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801caa2:	e7f2      	b.n	801ca8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801caa4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801caa8:	4283      	cmp	r3, r0
 801caaa:	d805      	bhi.n	801cab8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801caac:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801cab0:	4283      	cmp	r3, r0
 801cab2:	f4ff af2f 	bcc.w	801c914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cab6:	e754      	b.n	801c962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cab8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801cabc:	4283      	cmp	r3, r0
 801cabe:	e7af      	b.n	801ca20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801cac0:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801cac4:	4617      	mov	r7, r2
 801cac6:	f102 0808 	add.w	r8, r2, #8
 801caca:	4666      	mov	r6, ip
 801cacc:	6838      	ldr	r0, [r7, #0]
 801cace:	6879      	ldr	r1, [r7, #4]
 801cad0:	46e6      	mov	lr, ip
 801cad2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cad6:	3708      	adds	r7, #8
 801cad8:	4547      	cmp	r7, r8
 801cada:	46f4      	mov	ip, lr
 801cadc:	d1f6      	bne.n	801cacc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801cade:	6838      	ldr	r0, [r7, #0]
 801cae0:	f8ce 0000 	str.w	r0, [lr]
 801cae4:	88b9      	ldrh	r1, [r7, #4]
 801cae6:	f8ae 1004 	strh.w	r1, [lr, #4]
 801caea:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801caee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801caf2:	d009      	beq.n	801cb08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801caf4:	7b51      	ldrb	r1, [r2, #13]
 801caf6:	7992      	ldrb	r2, [r2, #6]
 801caf8:	0149      	lsls	r1, r1, #5
 801cafa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cafe:	4311      	orrs	r1, r2
 801cb00:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cb04:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801cb08:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb0c:	d00d      	beq.n	801cb2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801cb0e:	442b      	add	r3, r5
 801cb10:	b29b      	uxth	r3, r3
 801cb12:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801cb16:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801cb1a:	10db      	asrs	r3, r3, #3
 801cb1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cb20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb24:	4313      	orrs	r3, r2
 801cb26:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801cb2a:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801cb2e:	00cb      	lsls	r3, r1, #3
 801cb30:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cb34:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801cb38:	064f      	lsls	r7, r1, #25
 801cb3a:	ea43 0302 	orr.w	r3, r3, r2
 801cb3e:	bf44      	itt	mi
 801cb40:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb44:	b21b      	sxthmi	r3, r3
 801cb46:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801cb4a:	1b5d      	subs	r5, r3, r5
 801cb4c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801cb50:	4632      	mov	r2, r6
 801cb52:	e6fb      	b.n	801c94c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801cb54:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801cb58:	4694      	mov	ip, r2
 801cb5a:	f102 0908 	add.w	r9, r2, #8
 801cb5e:	4676      	mov	r6, lr
 801cb60:	f8dc 0000 	ldr.w	r0, [ip]
 801cb64:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801cb68:	46f0      	mov	r8, lr
 801cb6a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cb6e:	f10c 0c08 	add.w	ip, ip, #8
 801cb72:	45cc      	cmp	ip, r9
 801cb74:	46c6      	mov	lr, r8
 801cb76:	d1f3      	bne.n	801cb60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801cb78:	f8dc 0000 	ldr.w	r0, [ip]
 801cb7c:	f8c8 0000 	str.w	r0, [r8]
 801cb80:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801cb84:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cb88:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801cb8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb90:	d009      	beq.n	801cba6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801cb92:	7b51      	ldrb	r1, [r2, #13]
 801cb94:	7992      	ldrb	r2, [r2, #6]
 801cb96:	0149      	lsls	r1, r1, #5
 801cb98:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cb9c:	4311      	orrs	r1, r2
 801cb9e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cba2:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801cba6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cbaa:	d00d      	beq.n	801cbc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801cbac:	1bdb      	subs	r3, r3, r7
 801cbae:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801cbb2:	b29b      	uxth	r3, r3
 801cbb4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801cbb8:	10db      	asrs	r3, r3, #3
 801cbba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cbbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cbc2:	4313      	orrs	r3, r2
 801cbc4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801cbc8:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801cbcc:	00cb      	lsls	r3, r1, #3
 801cbce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cbd2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801cbd6:	0648      	lsls	r0, r1, #25
 801cbd8:	ea43 0302 	orr.w	r3, r3, r2
 801cbdc:	bf44      	itt	mi
 801cbde:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbe2:	b21b      	sxthmi	r3, r3
 801cbe4:	e7b1      	b.n	801cb4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801cbe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbec:	461e      	mov	r6, r3
 801cbee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801cbf0:	4604      	mov	r4, r0
 801cbf2:	4617      	mov	r7, r2
 801cbf4:	b92b      	cbnz	r3, 801cc02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801cbf6:	4b25      	ldr	r3, [pc, #148]	; (801cc8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801cbf8:	4a25      	ldr	r2, [pc, #148]	; (801cc90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801cbfa:	4826      	ldr	r0, [pc, #152]	; (801cc94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801cbfc:	21bf      	movs	r1, #191	; 0xbf
 801cbfe:	f00f fd2d 	bl	802c65c <__assert_func>
 801cc02:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cc04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc08:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cc0c:	f7f6 f94c 	bl	8012ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc10:	4605      	mov	r5, r0
 801cc12:	b918      	cbnz	r0, 801cc1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801cc14:	6030      	str	r0, [r6, #0]
 801cc16:	4628      	mov	r0, r5
 801cc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc1c:	683b      	ldr	r3, [r7, #0]
 801cc1e:	4601      	mov	r1, r0
 801cc20:	68db      	ldr	r3, [r3, #12]
 801cc22:	4638      	mov	r0, r7
 801cc24:	4798      	blx	r3
 801cc26:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cc2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cc2e:	4602      	mov	r2, r0
 801cc30:	6030      	str	r0, [r6, #0]
 801cc32:	d213      	bcs.n	801cc5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801cc34:	4643      	mov	r3, r8
 801cc36:	4639      	mov	r1, r7
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f7ff fe33 	bl	801c8a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cc3e:	6030      	str	r0, [r6, #0]
 801cc40:	6833      	ldr	r3, [r6, #0]
 801cc42:	b143      	cbz	r3, 801cc56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801cc44:	7b5a      	ldrb	r2, [r3, #13]
 801cc46:	7a9b      	ldrb	r3, [r3, #10]
 801cc48:	0052      	lsls	r2, r2, #1
 801cc4a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cc4e:	4313      	orrs	r3, r2
 801cc50:	bf0c      	ite	eq
 801cc52:	2301      	moveq	r3, #1
 801cc54:	2300      	movne	r3, #0
 801cc56:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cc5a:	e7dc      	b.n	801cc16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801cc5c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cc60:	b29b      	uxth	r3, r3
 801cc62:	2b7f      	cmp	r3, #127	; 0x7f
 801cc64:	d804      	bhi.n	801cc70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801cc66:	4639      	mov	r1, r7
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f7ff fd01 	bl	801c670 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cc6e:	e7e6      	b.n	801cc3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801cc70:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d0e3      	beq.n	801cc40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801cc78:	f640 1302 	movw	r3, #2306	; 0x902
 801cc7c:	429d      	cmp	r5, r3
 801cc7e:	d1df      	bne.n	801cc40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801cc80:	4601      	mov	r1, r0
 801cc82:	4620      	mov	r0, r4
 801cc84:	f7ff fcc6 	bl	801c614 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cc88:	e7d9      	b.n	801cc3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801cc8a:	bf00      	nop
 801cc8c:	08030a8c 	.word	0x08030a8c
 801cc90:	08030cfe 	.word	0x08030cfe
 801cc94:	08030a95 	.word	0x08030a95

0801cc98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc9c:	461e      	mov	r6, r3
 801cc9e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801cca0:	4604      	mov	r4, r0
 801cca2:	4617      	mov	r7, r2
 801cca4:	b92b      	cbnz	r3, 801ccb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801cca6:	4b26      	ldr	r3, [pc, #152]	; (801cd40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801cca8:	4a26      	ldr	r2, [pc, #152]	; (801cd44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ccaa:	4827      	ldr	r0, [pc, #156]	; (801cd48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ccac:	21bf      	movs	r1, #191	; 0xbf
 801ccae:	f00f fcd5 	bl	802c65c <__assert_func>
 801ccb2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ccb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ccb8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801ccbc:	f7f6 f8f4 	bl	8012ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ccc0:	4605      	mov	r5, r0
 801ccc2:	b918      	cbnz	r0, 801cccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801ccc4:	6030      	str	r0, [r6, #0]
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	4601      	mov	r1, r0
 801ccd0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ccd4:	4638      	mov	r0, r7
 801ccd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ccda:	47c8      	blx	r9
 801ccdc:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cce4:	4602      	mov	r2, r0
 801cce6:	6030      	str	r0, [r6, #0]
 801cce8:	d213      	bcs.n	801cd12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ccea:	4643      	mov	r3, r8
 801ccec:	4639      	mov	r1, r7
 801ccee:	4620      	mov	r0, r4
 801ccf0:	f7ff fdd8 	bl	801c8a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ccf4:	6030      	str	r0, [r6, #0]
 801ccf6:	6833      	ldr	r3, [r6, #0]
 801ccf8:	b143      	cbz	r3, 801cd0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ccfa:	7b5a      	ldrb	r2, [r3, #13]
 801ccfc:	7a9b      	ldrb	r3, [r3, #10]
 801ccfe:	0052      	lsls	r2, r2, #1
 801cd00:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cd04:	4313      	orrs	r3, r2
 801cd06:	bf0c      	ite	eq
 801cd08:	2301      	moveq	r3, #1
 801cd0a:	2300      	movne	r3, #0
 801cd0c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cd10:	e7d9      	b.n	801ccc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801cd12:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cd16:	b29b      	uxth	r3, r3
 801cd18:	2b7f      	cmp	r3, #127	; 0x7f
 801cd1a:	d804      	bhi.n	801cd26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801cd1c:	4639      	mov	r1, r7
 801cd1e:	4620      	mov	r0, r4
 801cd20:	f7ff fca6 	bl	801c670 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cd24:	e7e6      	b.n	801ccf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cd26:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d0e3      	beq.n	801ccf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cd2e:	f640 1302 	movw	r3, #2306	; 0x902
 801cd32:	429d      	cmp	r5, r3
 801cd34:	d1df      	bne.n	801ccf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cd36:	4601      	mov	r1, r0
 801cd38:	4620      	mov	r0, r4
 801cd3a:	f7ff fc6b 	bl	801c614 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cd3e:	e7d9      	b.n	801ccf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cd40:	08030a8c 	.word	0x08030a8c
 801cd44:	08030cfe 	.word	0x08030cfe
 801cd48:	08030a95 	.word	0x08030a95

0801cd4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cd4c:	b510      	push	{r4, lr}
 801cd4e:	4604      	mov	r4, r0
 801cd50:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801cd52:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd54:	b9d9      	cbnz	r1, 801cd8e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801cd56:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd58:	2b0a      	cmp	r3, #10
 801cd5a:	d036      	beq.n	801cdca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801cd5c:	4620      	mov	r0, r4
 801cd5e:	f7ff fc20 	bl	801c5a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cd62:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cd64:	2b09      	cmp	r3, #9
 801cd66:	d906      	bls.n	801cd76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801cd68:	4b18      	ldr	r3, [pc, #96]	; (801cdcc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801cd6a:	4a19      	ldr	r2, [pc, #100]	; (801cdd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801cd6c:	4819      	ldr	r0, [pc, #100]	; (801cdd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801cd6e:	f240 1103 	movw	r1, #259	; 0x103
 801cd72:	f00f fc73 	bl	802c65c <__assert_func>
 801cd76:	1c5a      	adds	r2, r3, #1
 801cd78:	8622      	strh	r2, [r4, #48]	; 0x30
 801cd7a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801cd7c:	4413      	add	r3, r2
 801cd7e:	b29b      	uxth	r3, r3
 801cd80:	2b09      	cmp	r3, #9
 801cd82:	bf88      	it	hi
 801cd84:	3b0a      	subhi	r3, #10
 801cd86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd8a:	8358      	strh	r0, [r3, #26]
 801cd8c:	e7e3      	b.n	801cd56 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801cd8e:	2b0a      	cmp	r3, #10
 801cd90:	d01b      	beq.n	801cdca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801cd92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cd94:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cd98:	3901      	subs	r1, #1
 801cd9a:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801cd9c:	8721      	strh	r1, [r4, #56]	; 0x38
 801cd9e:	1c51      	adds	r1, r2, #1
 801cda0:	b289      	uxth	r1, r1
 801cda2:	2901      	cmp	r1, #1
 801cda4:	bf8a      	itet	hi
 801cda6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cdaa:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801cdac:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801cdae:	2b09      	cmp	r3, #9
 801cdb0:	d8da      	bhi.n	801cd68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801cdb2:	1c5a      	adds	r2, r3, #1
 801cdb4:	8622      	strh	r2, [r4, #48]	; 0x30
 801cdb6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801cdb8:	4413      	add	r3, r2
 801cdba:	b29b      	uxth	r3, r3
 801cdbc:	2b09      	cmp	r3, #9
 801cdbe:	bf88      	it	hi
 801cdc0:	3b0a      	subhi	r3, #10
 801cdc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cdc6:	8358      	strh	r0, [r3, #26]
 801cdc8:	e7c2      	b.n	801cd50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cdca:	bd10      	pop	{r4, pc}
 801cdcc:	08030ac1 	.word	0x08030ac1
 801cdd0:	08030e54 	.word	0x08030e54
 801cdd4:	08030a95 	.word	0x08030a95

0801cdd8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cdd8:	b538      	push	{r3, r4, r5, lr}
 801cdda:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801cddc:	4604      	mov	r4, r0
 801cdde:	b92a      	cbnz	r2, 801cdec <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801cde0:	4b13      	ldr	r3, [pc, #76]	; (801ce30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801cde2:	4a14      	ldr	r2, [pc, #80]	; (801ce34 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801cde4:	4814      	ldr	r0, [pc, #80]	; (801ce38 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801cde6:	21d4      	movs	r1, #212	; 0xd4
 801cde8:	f00f fc38 	bl	802c65c <__assert_func>
 801cdec:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cdee:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801cdf2:	3a01      	subs	r2, #1
 801cdf4:	8b4d      	ldrh	r5, [r1, #26]
 801cdf6:	8602      	strh	r2, [r0, #48]	; 0x30
 801cdf8:	1c5a      	adds	r2, r3, #1
 801cdfa:	b292      	uxth	r2, r2
 801cdfc:	2a09      	cmp	r2, #9
 801cdfe:	bf86      	itte	hi
 801ce00:	3b09      	subhi	r3, #9
 801ce02:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ce04:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ce06:	f7ff ffa1 	bl	801cd4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ce0a:	8b23      	ldrh	r3, [r4, #24]
 801ce0c:	2b01      	cmp	r3, #1
 801ce0e:	bf9c      	itt	ls
 801ce10:	3301      	addls	r3, #1
 801ce12:	8323      	strhls	r3, [r4, #24]
 801ce14:	8ae3      	ldrh	r3, [r4, #22]
 801ce16:	b90b      	cbnz	r3, 801ce1c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801ce18:	2302      	movs	r3, #2
 801ce1a:	82e3      	strh	r3, [r4, #22]
 801ce1c:	8ae3      	ldrh	r3, [r4, #22]
 801ce1e:	3b01      	subs	r3, #1
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	82e3      	strh	r3, [r4, #22]
 801ce24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce28:	4628      	mov	r0, r5
 801ce2a:	8265      	strh	r5, [r4, #18]
 801ce2c:	bd38      	pop	{r3, r4, r5, pc}
 801ce2e:	bf00      	nop
 801ce30:	08030a8c 	.word	0x08030a8c
 801ce34:	08030da9 	.word	0x08030da9
 801ce38:	08030a95 	.word	0x08030a95

0801ce3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ce3c:	b538      	push	{r3, r4, r5, lr}
 801ce3e:	428a      	cmp	r2, r1
 801ce40:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801ce42:	d90c      	bls.n	801ce5e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ce44:	b92c      	cbnz	r4, 801ce52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ce46:	4b1c      	ldr	r3, [pc, #112]	; (801ceb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ce48:	4a1c      	ldr	r2, [pc, #112]	; (801cebc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ce4a:	21e0      	movs	r1, #224	; 0xe0
 801ce4c:	481c      	ldr	r0, [pc, #112]	; (801cec0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ce4e:	f00f fc05 	bl	802c65c <__assert_func>
 801ce52:	3c01      	subs	r4, #1
 801ce54:	8604      	strh	r4, [r0, #48]	; 0x30
 801ce56:	4b1b      	ldr	r3, [pc, #108]	; (801cec4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801ce58:	4a1b      	ldr	r2, [pc, #108]	; (801cec8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801ce5a:	21c4      	movs	r1, #196	; 0xc4
 801ce5c:	e7f6      	b.n	801ce4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce5e:	428c      	cmp	r4, r1
 801ce60:	d203      	bcs.n	801ce6a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ce62:	4b1a      	ldr	r3, [pc, #104]	; (801cecc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801ce64:	4a1a      	ldr	r2, [pc, #104]	; (801ced0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801ce66:	21ca      	movs	r1, #202	; 0xca
 801ce68:	e7f0      	b.n	801ce4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce6a:	1a64      	subs	r4, r4, r1
 801ce6c:	8604      	strh	r4, [r0, #48]	; 0x30
 801ce6e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801ce70:	4421      	add	r1, r4
 801ce72:	b289      	uxth	r1, r1
 801ce74:	2909      	cmp	r1, #9
 801ce76:	bf88      	it	hi
 801ce78:	390a      	subhi	r1, #10
 801ce7a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ce7c:	250a      	movs	r5, #10
 801ce7e:	b1ba      	cbz	r2, 801ceb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ce80:	3a01      	subs	r2, #1
 801ce82:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801ce84:	b292      	uxth	r2, r2
 801ce86:	2909      	cmp	r1, #9
 801ce88:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ce8c:	d903      	bls.n	801ce96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801ce8e:	4b11      	ldr	r3, [pc, #68]	; (801ced4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801ce90:	4a11      	ldr	r2, [pc, #68]	; (801ced8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801ce92:	21e5      	movs	r1, #229	; 0xe5
 801ce94:	e7da      	b.n	801ce4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce96:	3101      	adds	r1, #1
 801ce98:	8601      	strh	r1, [r0, #48]	; 0x30
 801ce9a:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801ce9c:	b901      	cbnz	r1, 801cea0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801ce9e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801cea0:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801cea2:	3901      	subs	r1, #1
 801cea4:	b289      	uxth	r1, r1
 801cea6:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801cea8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ceac:	834c      	strh	r4, [r1, #26]
 801ceae:	e7e6      	b.n	801ce7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801ceb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ceb4:	f7ff bf4a 	b.w	801cd4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ceb8:	08030a8c 	.word	0x08030a8c
 801cebc:	08030b82 	.word	0x08030b82
 801cec0:	08030a95 	.word	0x08030a95
 801cec4:	08030acd 	.word	0x08030acd
 801cec8:	08030c2c 	.word	0x08030c2c
 801cecc:	08030adb 	.word	0x08030adb
 801ced0:	08030f03 	.word	0x08030f03
 801ced4:	08030ae7 	.word	0x08030ae7
 801ced8:	08030afa 	.word	0x08030afa

0801cedc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801cedc:	3a01      	subs	r2, #1
 801cede:	b570      	push	{r4, r5, r6, lr}
 801cee0:	b292      	uxth	r2, r2
 801cee2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801cee6:	42b2      	cmp	r2, r6
 801cee8:	d019      	beq.n	801cf1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801ceea:	8b04      	ldrh	r4, [r0, #24]
 801ceec:	f831 5b02 	ldrh.w	r5, [r1], #2
 801cef0:	4294      	cmp	r4, r2
 801cef2:	d805      	bhi.n	801cf00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801cef4:	4b19      	ldr	r3, [pc, #100]	; (801cf5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cef6:	4a1a      	ldr	r2, [pc, #104]	; (801cf60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801cef8:	481a      	ldr	r0, [pc, #104]	; (801cf64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801cefa:	21c4      	movs	r1, #196	; 0xc4
 801cefc:	f00f fbae 	bl	802c65c <__assert_func>
 801cf00:	8ac4      	ldrh	r4, [r0, #22]
 801cf02:	4414      	add	r4, r2
 801cf04:	b2a4      	uxth	r4, r4
 801cf06:	2c01      	cmp	r4, #1
 801cf08:	bf88      	it	hi
 801cf0a:	3c02      	subhi	r4, #2
 801cf0c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cf10:	3a01      	subs	r2, #1
 801cf12:	8a64      	ldrh	r4, [r4, #18]
 801cf14:	42ac      	cmp	r4, r5
 801cf16:	b292      	uxth	r2, r2
 801cf18:	d0e5      	beq.n	801cee6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801cf1a:	2000      	movs	r0, #0
 801cf1c:	bd70      	pop	{r4, r5, r6, pc}
 801cf1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf22:	2400      	movs	r4, #0
 801cf24:	4413      	add	r3, r2
 801cf26:	b2a2      	uxth	r2, r4
 801cf28:	429a      	cmp	r2, r3
 801cf2a:	da14      	bge.n	801cf56 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801cf2c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801cf2e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cf32:	4296      	cmp	r6, r2
 801cf34:	d802      	bhi.n	801cf3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801cf36:	4b09      	ldr	r3, [pc, #36]	; (801cf5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cf38:	4a0b      	ldr	r2, [pc, #44]	; (801cf68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801cf3a:	e7dd      	b.n	801cef8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801cf3c:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801cf3e:	4432      	add	r2, r6
 801cf40:	b292      	uxth	r2, r2
 801cf42:	2a09      	cmp	r2, #9
 801cf44:	bf88      	it	hi
 801cf46:	3a0a      	subhi	r2, #10
 801cf48:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cf4c:	3401      	adds	r4, #1
 801cf4e:	8b52      	ldrh	r2, [r2, #26]
 801cf50:	42aa      	cmp	r2, r5
 801cf52:	d0e8      	beq.n	801cf26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801cf54:	e7e1      	b.n	801cf1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801cf56:	2001      	movs	r0, #1
 801cf58:	e7e0      	b.n	801cf1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801cf5a:	bf00      	nop
 801cf5c:	08030acd 	.word	0x08030acd
 801cf60:	08030f87 	.word	0x08030f87
 801cf64:	08030a95 	.word	0x08030a95
 801cf68:	08030c2c 	.word	0x08030c2c

0801cf6c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cf6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf70:	4605      	mov	r5, r0
 801cf72:	4616      	mov	r6, r2
 801cf74:	1c8c      	adds	r4, r1, #2
 801cf76:	8809      	ldrh	r1, [r1, #0]
 801cf78:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cf7c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cf80:	42b3      	cmp	r3, r6
 801cf82:	d124      	bne.n	801cfce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cf84:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cf88:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cf8c:	f001 070f 	and.w	r7, r1, #15
 801cf90:	f8cd 8000 	str.w	r8, [sp]
 801cf94:	464b      	mov	r3, r9
 801cf96:	4652      	mov	r2, sl
 801cf98:	4621      	mov	r1, r4
 801cf9a:	4628      	mov	r0, r5
 801cf9c:	f7ff ff9e 	bl	801cedc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cfa0:	4683      	mov	fp, r0
 801cfa2:	b168      	cbz	r0, 801cfc0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cfa4:	eb0a 0109 	add.w	r1, sl, r9
 801cfa8:	4441      	add	r1, r8
 801cfaa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cfae:	463a      	mov	r2, r7
 801cfb0:	4649      	mov	r1, r9
 801cfb2:	4628      	mov	r0, r5
 801cfb4:	f7ff ff42 	bl	801ce3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cfb8:	4658      	mov	r0, fp
 801cfba:	b003      	add	sp, #12
 801cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfc0:	eb07 010a 	add.w	r1, r7, sl
 801cfc4:	4449      	add	r1, r9
 801cfc6:	4441      	add	r1, r8
 801cfc8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cfcc:	e7d2      	b.n	801cf74 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cfce:	f04f 0b00 	mov.w	fp, #0
 801cfd2:	e7f1      	b.n	801cfb8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cfd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cfd4:	b570      	push	{r4, r5, r6, lr}
 801cfd6:	8810      	ldrh	r0, [r2, #0]
 801cfd8:	4298      	cmp	r0, r3
 801cfda:	d817      	bhi.n	801d00c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfdc:	1e48      	subs	r0, r1, #1
 801cfde:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cfe2:	4298      	cmp	r0, r3
 801cfe4:	d312      	bcc.n	801d00c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfe6:	2400      	movs	r4, #0
 801cfe8:	428c      	cmp	r4, r1
 801cfea:	d20f      	bcs.n	801d00c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfec:	1860      	adds	r0, r4, r1
 801cfee:	1040      	asrs	r0, r0, #1
 801cff0:	0085      	lsls	r5, r0, #2
 801cff2:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cff6:	42b3      	cmp	r3, r6
 801cff8:	d902      	bls.n	801d000 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cffa:	3001      	adds	r0, #1
 801cffc:	b284      	uxth	r4, r0
 801cffe:	e7f3      	b.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d000:	d201      	bcs.n	801d006 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d002:	b281      	uxth	r1, r0
 801d004:	e7f0      	b.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d006:	442a      	add	r2, r5
 801d008:	8850      	ldrh	r0, [r2, #2]
 801d00a:	bd70      	pop	{r4, r5, r6, pc}
 801d00c:	2000      	movs	r0, #0
 801d00e:	e7fc      	b.n	801d00a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d010 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d014:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801d016:	886f      	ldrh	r7, [r5, #2]
 801d018:	4604      	mov	r4, r0
 801d01a:	087f      	lsrs	r7, r7, #1
 801d01c:	260b      	movs	r6, #11
 801d01e:	3e01      	subs	r6, #1
 801d020:	d01b      	beq.n	801d05a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d022:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d024:	b92b      	cbnz	r3, 801d032 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d026:	4b0e      	ldr	r3, [pc, #56]	; (801d060 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d028:	4a0e      	ldr	r2, [pc, #56]	; (801d064 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d02a:	480f      	ldr	r0, [pc, #60]	; (801d068 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d02c:	21bf      	movs	r1, #191	; 0xbf
 801d02e:	f00f fb15 	bl	802c65c <__assert_func>
 801d032:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801d034:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d038:	462a      	mov	r2, r5
 801d03a:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801d03e:	4639      	mov	r1, r7
 801d040:	4643      	mov	r3, r8
 801d042:	4620      	mov	r0, r4
 801d044:	f7ff ffc6 	bl	801cfd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d048:	b138      	cbz	r0, 801d05a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d04a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d04e:	4642      	mov	r2, r8
 801d050:	4620      	mov	r0, r4
 801d052:	f7ff ff8b 	bl	801cf6c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d056:	2800      	cmp	r0, #0
 801d058:	d1e1      	bne.n	801d01e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d05e:	bf00      	nop
 801d060:	08030a8c 	.word	0x08030a8c
 801d064:	08030cfe 	.word	0x08030cfe
 801d068:	08030a95 	.word	0x08030a95

0801d06c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801d06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d06e:	b08d      	sub	sp, #52	; 0x34
 801d070:	2300      	movs	r3, #0
 801d072:	9304      	str	r3, [sp, #16]
 801d074:	9305      	str	r3, [sp, #20]
 801d076:	9306      	str	r3, [sp, #24]
 801d078:	aa04      	add	r2, sp, #16
 801d07a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801d07e:	9307      	str	r3, [sp, #28]
 801d080:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d084:	4613      	mov	r3, r2
 801d086:	f101 0710 	add.w	r7, r1, #16
 801d08a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d0c8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801d08e:	460c      	mov	r4, r1
 801d090:	4605      	mov	r5, r0
 801d092:	ecb4 7a01 	vldmia	r4!, {s14}
 801d096:	ecf5 6a01 	vldmia	r5!, {s13}
 801d09a:	42bc      	cmp	r4, r7
 801d09c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d0a0:	d1f7      	bne.n	801d092 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801d0a2:	3010      	adds	r0, #16
 801d0a4:	42b0      	cmp	r0, r6
 801d0a6:	ece2 7a01 	vstmia	r2!, {s15}
 801d0aa:	d1ee      	bne.n	801d08a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801d0ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d0ae:	ac0c      	add	r4, sp, #48	; 0x30
 801d0b0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801d0b4:	ed9d 0a08 	vldr	s0, [sp, #32]
 801d0b8:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801d0bc:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801d0c0:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801d0c4:	b00d      	add	sp, #52	; 0x34
 801d0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0c8:	00000000 	.word	0x00000000

0801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>:
 801d0cc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801d0fc <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d0d6:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801d0da:	2200      	movs	r2, #0
 801d0dc:	4293      	cmp	r3, r2
 801d0de:	f102 0201 	add.w	r2, r2, #1
 801d0e2:	bf14      	ite	ne
 801d0e4:	eef0 6a47 	vmovne.f32	s13, s14
 801d0e8:	eef0 6a67 	vmoveq.f32	s13, s15
 801d0ec:	2a04      	cmp	r2, #4
 801d0ee:	ece1 6a01 	vstmia	r1!, {s13}
 801d0f2:	d1f3      	bne.n	801d0dc <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801d0f4:	3301      	adds	r3, #1
 801d0f6:	2b04      	cmp	r3, #4
 801d0f8:	d1ed      	bne.n	801d0d6 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801d0fa:	4770      	bx	lr
 801d0fc:	00000000 	.word	0x00000000

0801d100 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801d100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d104:	460c      	mov	r4, r1
 801d106:	4605      	mov	r5, r0
 801d108:	4690      	mov	r8, r2
 801d10a:	f7ff ffdf 	bl	801d0cc <_ZN8touchgfx9Matrix4x4C1Ev>
 801d10e:	4628      	mov	r0, r5
 801d110:	4621      	mov	r1, r4
 801d112:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801d116:	2300      	movs	r3, #0
 801d118:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d158 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801d11c:	eb08 0603 	add.w	r6, r8, r3
 801d120:	460f      	mov	r7, r1
 801d122:	2400      	movs	r4, #0
 801d124:	4632      	mov	r2, r6
 801d126:	ecf7 6a01 	vldmia	r7!, {s13}
 801d12a:	ed92 7a00 	vldr	s14, [r2]
 801d12e:	3401      	adds	r4, #1
 801d130:	2c04      	cmp	r4, #4
 801d132:	f106 0610 	add.w	r6, r6, #16
 801d136:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d13a:	d1f3      	bne.n	801d124 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801d13c:	18c2      	adds	r2, r0, r3
 801d13e:	3304      	adds	r3, #4
 801d140:	2b10      	cmp	r3, #16
 801d142:	edc2 7a00 	vstr	s15, [r2]
 801d146:	d1e7      	bne.n	801d118 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801d148:	3110      	adds	r1, #16
 801d14a:	4561      	cmp	r1, ip
 801d14c:	f100 0010 	add.w	r0, r0, #16
 801d150:	d1e1      	bne.n	801d116 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801d152:	4628      	mov	r0, r5
 801d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d158:	00000000 	.word	0x00000000

0801d15c <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801d15c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d160:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d164:	f100 0320 	add.w	r3, r0, #32
 801d168:	3030      	adds	r0, #48	; 0x30
 801d16a:	ecf3 7a01 	vldmia	r3!, {s15}
 801d16e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d172:	4283      	cmp	r3, r0
 801d174:	edc3 7a03 	vstr	s15, [r3, #12]
 801d178:	d1f7      	bne.n	801d16a <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801d17a:	4770      	bx	lr

0801d17c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801d17c:	b510      	push	{r4, lr}
 801d17e:	ed2d 8b02 	vpush	{d8}
 801d182:	4604      	mov	r4, r0
 801d184:	eef0 8a40 	vmov.f32	s17, s0
 801d188:	f00e fd36 	bl	802bbf8 <sinf>
 801d18c:	eeb0 8a40 	vmov.f32	s16, s0
 801d190:	eeb0 0a68 	vmov.f32	s0, s17
 801d194:	f00e fcae 	bl	802baf4 <cosf>
 801d198:	f104 0310 	add.w	r3, r4, #16
 801d19c:	f104 0220 	add.w	r2, r4, #32
 801d1a0:	eeb1 6a48 	vneg.f32	s12, s16
 801d1a4:	edd3 7a04 	vldr	s15, [r3, #16]
 801d1a8:	edd3 6a00 	vldr	s13, [r3]
 801d1ac:	ee26 7a27 	vmul.f32	s14, s12, s15
 801d1b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d1b4:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d1b8:	eee6 7a88 	vfma.f32	s15, s13, s16
 801d1bc:	eca3 7a01 	vstmia	r3!, {s14}
 801d1c0:	429a      	cmp	r2, r3
 801d1c2:	edc3 7a03 	vstr	s15, [r3, #12]
 801d1c6:	d1ed      	bne.n	801d1a4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801d1c8:	ecbd 8b02 	vpop	{d8}
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	bd10      	pop	{r4, pc}

0801d1d0 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801d1d0:	b510      	push	{r4, lr}
 801d1d2:	ed2d 8b02 	vpush	{d8}
 801d1d6:	4604      	mov	r4, r0
 801d1d8:	eef0 8a40 	vmov.f32	s17, s0
 801d1dc:	f00e fd0c 	bl	802bbf8 <sinf>
 801d1e0:	eeb0 8a40 	vmov.f32	s16, s0
 801d1e4:	eeb0 0a68 	vmov.f32	s0, s17
 801d1e8:	f00e fc84 	bl	802baf4 <cosf>
 801d1ec:	4623      	mov	r3, r4
 801d1ee:	f104 0210 	add.w	r2, r4, #16
 801d1f2:	eeb1 6a48 	vneg.f32	s12, s16
 801d1f6:	edd3 7a08 	vldr	s15, [r3, #32]
 801d1fa:	edd3 6a00 	vldr	s13, [r3]
 801d1fe:	ee27 7a88 	vmul.f32	s14, s15, s16
 801d202:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d206:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d20a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d20e:	eca3 7a01 	vstmia	r3!, {s14}
 801d212:	429a      	cmp	r2, r3
 801d214:	edc3 7a07 	vstr	s15, [r3, #28]
 801d218:	d1ed      	bne.n	801d1f6 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801d21a:	ecbd 8b02 	vpop	{d8}
 801d21e:	4620      	mov	r0, r4
 801d220:	bd10      	pop	{r4, pc}

0801d222 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801d222:	b510      	push	{r4, lr}
 801d224:	ed2d 8b02 	vpush	{d8}
 801d228:	4604      	mov	r4, r0
 801d22a:	eef0 8a40 	vmov.f32	s17, s0
 801d22e:	f00e fce3 	bl	802bbf8 <sinf>
 801d232:	eeb0 8a40 	vmov.f32	s16, s0
 801d236:	eeb0 0a68 	vmov.f32	s0, s17
 801d23a:	f00e fc5b 	bl	802baf4 <cosf>
 801d23e:	4623      	mov	r3, r4
 801d240:	f104 0210 	add.w	r2, r4, #16
 801d244:	eeb1 6a48 	vneg.f32	s12, s16
 801d248:	edd3 7a04 	vldr	s15, [r3, #16]
 801d24c:	edd3 6a00 	vldr	s13, [r3]
 801d250:	ee26 7a27 	vmul.f32	s14, s12, s15
 801d254:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d258:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d25c:	eee6 7a88 	vfma.f32	s15, s13, s16
 801d260:	eca3 7a01 	vstmia	r3!, {s14}
 801d264:	429a      	cmp	r2, r3
 801d266:	edc3 7a03 	vstr	s15, [r3, #12]
 801d26a:	d1ed      	bne.n	801d248 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801d26c:	ecbd 8b02 	vpop	{d8}
 801d270:	4620      	mov	r0, r4
 801d272:	bd10      	pop	{r4, pc}

0801d274 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801d274:	4603      	mov	r3, r0
 801d276:	f100 0210 	add.w	r2, r0, #16
 801d27a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801d27e:	edd3 7a00 	vldr	s15, [r3]
 801d282:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d286:	ece3 7a01 	vstmia	r3!, {s15}
 801d28a:	4293      	cmp	r3, r2
 801d28c:	d1f5      	bne.n	801d27a <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801d28e:	4770      	bx	lr

0801d290 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801d290:	f100 0310 	add.w	r3, r0, #16
 801d294:	f100 0220 	add.w	r2, r0, #32
 801d298:	ed93 7a08 	vldr	s14, [r3, #32]
 801d29c:	edd3 7a00 	vldr	s15, [r3]
 801d2a0:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d2a4:	ece3 7a01 	vstmia	r3!, {s15}
 801d2a8:	4293      	cmp	r3, r2
 801d2aa:	d1f5      	bne.n	801d298 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801d2ac:	4770      	bx	lr

0801d2ae <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801d2ae:	f100 0320 	add.w	r3, r0, #32
 801d2b2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801d2b6:	ed93 7a04 	vldr	s14, [r3, #16]
 801d2ba:	edd3 7a00 	vldr	s15, [r3]
 801d2be:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d2c2:	ece3 7a01 	vstmia	r3!, {s15}
 801d2c6:	4293      	cmp	r3, r2
 801d2c8:	d1f5      	bne.n	801d2b6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801d2ca:	4770      	bx	lr

0801d2cc <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801d2cc:	4603      	mov	r3, r0
 801d2ce:	f100 0210 	add.w	r2, r0, #16
 801d2d2:	edd3 7a00 	vldr	s15, [r3]
 801d2d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d2da:	ece3 7a01 	vstmia	r3!, {s15}
 801d2de:	4293      	cmp	r3, r2
 801d2e0:	d1f7      	bne.n	801d2d2 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801d2e2:	4770      	bx	lr

0801d2e4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801d2e4:	f100 0310 	add.w	r3, r0, #16
 801d2e8:	f100 0220 	add.w	r2, r0, #32
 801d2ec:	edd3 7a00 	vldr	s15, [r3]
 801d2f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d2f4:	ece3 7a01 	vstmia	r3!, {s15}
 801d2f8:	4293      	cmp	r3, r2
 801d2fa:	d1f7      	bne.n	801d2ec <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801d2fc:	4770      	bx	lr

0801d2fe <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801d2fe:	f100 0320 	add.w	r3, r0, #32
 801d302:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801d306:	edd3 7a00 	vldr	s15, [r3]
 801d30a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d30e:	ece3 7a01 	vstmia	r3!, {s15}
 801d312:	4293      	cmp	r3, r2
 801d314:	d1f7      	bne.n	801d306 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801d316:	4770      	bx	lr

0801d318 <_ZN8touchgfx8ceil28_4El>:
 801d318:	f110 030f 	adds.w	r3, r0, #15
 801d31c:	d401      	bmi.n	801d322 <_ZN8touchgfx8ceil28_4El+0xa>
 801d31e:	1118      	asrs	r0, r3, #4
 801d320:	4770      	bx	lr
 801d322:	f1c0 0001 	rsb	r0, r0, #1
 801d326:	f010 000f 	ands.w	r0, r0, #15
 801d32a:	bf18      	it	ne
 801d32c:	2001      	movne	r0, #1
 801d32e:	2210      	movs	r2, #16
 801d330:	fb93 f3f2 	sdiv	r3, r3, r2
 801d334:	1a18      	subs	r0, r3, r0
 801d336:	4770      	bx	lr

0801d338 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801d338:	2900      	cmp	r1, #0
 801d33a:	b538      	push	{r3, r4, r5, lr}
 801d33c:	dc05      	bgt.n	801d34a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801d33e:	4b0f      	ldr	r3, [pc, #60]	; (801d37c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801d340:	4a0f      	ldr	r2, [pc, #60]	; (801d380 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801d342:	4810      	ldr	r0, [pc, #64]	; (801d384 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801d344:	21f7      	movs	r1, #247	; 0xf7
 801d346:	f00f f989 	bl	802c65c <__assert_func>
 801d34a:	2800      	cmp	r0, #0
 801d34c:	db06      	blt.n	801d35c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801d34e:	fb90 f4f1 	sdiv	r4, r0, r1
 801d352:	6014      	str	r4, [r2, #0]
 801d354:	fb01 0114 	mls	r1, r1, r4, r0
 801d358:	6019      	str	r1, [r3, #0]
 801d35a:	bd38      	pop	{r3, r4, r5, pc}
 801d35c:	4240      	negs	r0, r0
 801d35e:	fb90 f4f1 	sdiv	r4, r0, r1
 801d362:	4265      	negs	r5, r4
 801d364:	fb01 0014 	mls	r0, r1, r4, r0
 801d368:	6015      	str	r5, [r2, #0]
 801d36a:	6018      	str	r0, [r3, #0]
 801d36c:	2800      	cmp	r0, #0
 801d36e:	d0f4      	beq.n	801d35a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801d370:	6810      	ldr	r0, [r2, #0]
 801d372:	3801      	subs	r0, #1
 801d374:	6010      	str	r0, [r2, #0]
 801d376:	6818      	ldr	r0, [r3, #0]
 801d378:	1a09      	subs	r1, r1, r0
 801d37a:	e7ed      	b.n	801d358 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801d37c:	08031058 	.word	0x08031058
 801d380:	08031097 	.word	0x08031097
 801d384:	08031068 	.word	0x08031068

0801d388 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d388:	b570      	push	{r4, r5, r6, lr}
 801d38a:	694a      	ldr	r2, [r1, #20]
 801d38c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d38e:	684b      	ldr	r3, [r1, #4]
 801d390:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d392:	1b54      	subs	r4, r2, r5
 801d394:	f000 8106 	beq.w	801d5a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d398:	1b9b      	subs	r3, r3, r6
 801d39a:	d003      	beq.n	801d3a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d39c:	4363      	muls	r3, r4
 801d39e:	2210      	movs	r2, #16
 801d3a0:	fb93 f3f2 	sdiv	r3, r3, r2
 801d3a4:	680c      	ldr	r4, [r1, #0]
 801d3a6:	698a      	ldr	r2, [r1, #24]
 801d3a8:	1b65      	subs	r5, r4, r5
 801d3aa:	f000 80fd 	beq.w	801d5a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d3ae:	1b92      	subs	r2, r2, r6
 801d3b0:	d003      	beq.n	801d3ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d3b2:	436a      	muls	r2, r5
 801d3b4:	2410      	movs	r4, #16
 801d3b6:	fb92 f2f4 	sdiv	r2, r2, r4
 801d3ba:	1a9b      	subs	r3, r3, r2
 801d3bc:	ee07 3a90 	vmov	s15, r3
 801d3c0:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801d5e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d3cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d3d0:	460a      	mov	r2, r1
 801d3d2:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d3d6:	4603      	mov	r3, r0
 801d3d8:	f100 040c 	add.w	r4, r0, #12
 801d3dc:	eeb1 6a43 	vneg.f32	s12, s6
 801d3e0:	edd2 7a02 	vldr	s15, [r2, #8]
 801d3e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d3e8:	3214      	adds	r2, #20
 801d3ea:	ece3 6a01 	vstmia	r3!, {s13}
 801d3ee:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d3f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d3f6:	429c      	cmp	r4, r3
 801d3f8:	edc3 7a02 	vstr	s15, [r3, #8]
 801d3fc:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d400:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d404:	edc3 7a05 	vstr	s15, [r3, #20]
 801d408:	d1ea      	bne.n	801d3e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d40a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d40c:	698b      	ldr	r3, [r1, #24]
 801d40e:	edd0 4a02 	vldr	s9, [r0, #8]
 801d412:	edd0 3a00 	vldr	s7, [r0]
 801d416:	edd0 6a01 	vldr	s13, [r0, #4]
 801d41a:	ed90 5a05 	vldr	s10, [r0, #20]
 801d41e:	ed90 2a03 	vldr	s4, [r0, #12]
 801d422:	edd0 5a04 	vldr	s11, [r0, #16]
 801d426:	ed90 1a07 	vldr	s2, [r0, #28]
 801d42a:	edd0 2a06 	vldr	s5, [r0, #24]
 801d42e:	1a9b      	subs	r3, r3, r2
 801d430:	ee07 3a90 	vmov	s15, r3
 801d434:	684b      	ldr	r3, [r1, #4]
 801d436:	1a9b      	subs	r3, r3, r2
 801d438:	ee07 3a10 	vmov	s14, r3
 801d43c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d440:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d444:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d448:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d44c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d450:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d454:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d458:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d45c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d460:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d464:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d468:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d46c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d46e:	694a      	ldr	r2, [r1, #20]
 801d470:	1b13      	subs	r3, r2, r4
 801d472:	ee07 3a10 	vmov	s14, r3
 801d476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d47a:	680b      	ldr	r3, [r1, #0]
 801d47c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d480:	1b1b      	subs	r3, r3, r4
 801d482:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d486:	ee07 3a10 	vmov	s14, r3
 801d48a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d48e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d492:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d496:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d49a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d49e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d4a0:	698b      	ldr	r3, [r1, #24]
 801d4a2:	1a9b      	subs	r3, r3, r2
 801d4a4:	ee06 3a90 	vmov	s13, r3
 801d4a8:	684b      	ldr	r3, [r1, #4]
 801d4aa:	1a9b      	subs	r3, r3, r2
 801d4ac:	ee07 3a10 	vmov	s14, r3
 801d4b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d4b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4b8:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d4bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4c0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d4c4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d4c8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d4cc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d4d0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d4d2:	694a      	ldr	r2, [r1, #20]
 801d4d4:	1b13      	subs	r3, r2, r4
 801d4d6:	ee07 3a10 	vmov	s14, r3
 801d4da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4de:	680b      	ldr	r3, [r1, #0]
 801d4e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4e4:	1b1b      	subs	r3, r3, r4
 801d4e6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d4ea:	ee07 3a10 	vmov	s14, r3
 801d4ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4f6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d4fa:	edd0 5a08 	vldr	s11, [r0, #32]
 801d4fe:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d502:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d506:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d50a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d50c:	698b      	ldr	r3, [r1, #24]
 801d50e:	1a9b      	subs	r3, r3, r2
 801d510:	ee07 3a10 	vmov	s14, r3
 801d514:	684b      	ldr	r3, [r1, #4]
 801d516:	1a9b      	subs	r3, r3, r2
 801d518:	ee01 3a90 	vmov	s3, r3
 801d51c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d520:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d524:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d528:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d52c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d530:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d534:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d538:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d53c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d540:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d542:	694a      	ldr	r2, [r1, #20]
 801d544:	1b13      	subs	r3, r2, r4
 801d546:	ee03 3a10 	vmov	s6, r3
 801d54a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d54e:	680b      	ldr	r3, [r1, #0]
 801d550:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d554:	1b1b      	subs	r3, r3, r4
 801d556:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d55a:	ee03 3a10 	vmov	s6, r3
 801d55e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d562:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d566:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d56a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d56e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d572:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d576:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d57a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d582:	dd13      	ble.n	801d5ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d588:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d58c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d58e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d59a:	dd15      	ble.n	801d5c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d59c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d5a0:	6403      	str	r3, [r0, #64]	; 0x40
 801d5a2:	bd70      	pop	{r4, r5, r6, pc}
 801d5a4:	4623      	mov	r3, r4
 801d5a6:	e6fd      	b.n	801d3a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d5a8:	462a      	mov	r2, r5
 801d5aa:	e706      	b.n	801d3ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d5ac:	d502      	bpl.n	801d5b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d5ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d5b2:	e7e9      	b.n	801d588 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d5b4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d5b8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d5bc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c4:	dade      	bge.n	801d584 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d5c6:	e7f2      	b.n	801d5ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d5c8:	d502      	bpl.n	801d5d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d5ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d5ce:	e7e7      	b.n	801d5a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d5d0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d5d4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d5d8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5e0:	dadc      	bge.n	801d59c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d5e2:	e7f2      	b.n	801d5ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d5e4:	3d800000 	.word	0x3d800000

0801d5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ec:	f04f 0814 	mov.w	r8, #20
 801d5f0:	fb08 f903 	mul.w	r9, r8, r3
 801d5f4:	eb02 0a09 	add.w	sl, r2, r9
 801d5f8:	4604      	mov	r4, r0
 801d5fa:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d5fe:	4617      	mov	r7, r2
 801d600:	460d      	mov	r5, r1
 801d602:	461e      	mov	r6, r3
 801d604:	f7ff fe88 	bl	801d318 <_ZN8touchgfx8ceil28_4El>
 801d608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d60a:	6160      	str	r0, [r4, #20]
 801d60c:	fb08 f803 	mul.w	r8, r8, r3
 801d610:	eb07 0b08 	add.w	fp, r7, r8
 801d614:	9001      	str	r0, [sp, #4]
 801d616:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d61a:	f7ff fe7d 	bl	801d318 <_ZN8touchgfx8ceil28_4El>
 801d61e:	9a01      	ldr	r2, [sp, #4]
 801d620:	1a80      	subs	r0, r0, r2
 801d622:	61a0      	str	r0, [r4, #24]
 801d624:	2800      	cmp	r0, #0
 801d626:	f000 8088 	beq.w	801d73a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d62a:	f857 3009 	ldr.w	r3, [r7, r9]
 801d62e:	f857 c008 	ldr.w	ip, [r7, r8]
 801d632:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d636:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d63a:	ebac 0c03 	sub.w	ip, ip, r3
 801d63e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d642:	fb0b f202 	mul.w	r2, fp, r2
 801d646:	fb0c 2211 	mls	r2, ip, r1, r2
 801d64a:	1a40      	subs	r0, r0, r1
 801d64c:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d650:	fb00 2003 	mla	r0, r0, r3, r2
 801d654:	3801      	subs	r0, #1
 801d656:	f104 0310 	add.w	r3, r4, #16
 801d65a:	4622      	mov	r2, r4
 801d65c:	4641      	mov	r1, r8
 801d65e:	4440      	add	r0, r8
 801d660:	f7ff fe6a 	bl	801d338 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d664:	f104 0308 	add.w	r3, r4, #8
 801d668:	1d22      	adds	r2, r4, #4
 801d66a:	4641      	mov	r1, r8
 801d66c:	4658      	mov	r0, fp
 801d66e:	f7ff fe63 	bl	801d338 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d672:	f8c4 800c 	str.w	r8, [r4, #12]
 801d676:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d67a:	6962      	ldr	r2, [r4, #20]
 801d67c:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d744 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d680:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d684:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d688:	ee07 3a10 	vmov	s14, r3
 801d68c:	6822      	ldr	r2, [r4, #0]
 801d68e:	f857 3009 	ldr.w	r3, [r7, r9]
 801d692:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d696:	ee07 3a90 	vmov	s15, r3
 801d69a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d69e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6a2:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d6a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d6aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d6ae:	edd3 6a00 	vldr	s13, [r3]
 801d6b2:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d6b6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d6ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d6be:	edc4 6a07 	vstr	s13, [r4, #28]
 801d6c2:	edd4 6a01 	vldr	s13, [r4, #4]
 801d6c6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d6ca:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d6ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d6d2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d6d6:	ed84 6a08 	vstr	s12, [r4, #32]
 801d6da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d6dc:	6262      	str	r2, [r4, #36]	; 0x24
 801d6de:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801d6e2:	ed93 6a03 	vldr	s12, [r3, #12]
 801d6e6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d6ea:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d6ee:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d6f2:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801d6f6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d6fa:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801d6fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d702:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801d706:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801d708:	6322      	str	r2, [r4, #48]	; 0x30
 801d70a:	ed93 6a06 	vldr	s12, [r3, #24]
 801d70e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801d712:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d716:	eeb0 7a46 	vmov.f32	s14, s12
 801d71a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801d71e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d722:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d726:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801d72a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801d72e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d732:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801d736:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801d738:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d73a:	4620      	mov	r0, r4
 801d73c:	b003      	add	sp, #12
 801d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d742:	bf00      	nop
 801d744:	3d800000 	.word	0x3d800000

0801d748 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d748:	4602      	mov	r2, r0
 801d74a:	b148      	cbz	r0, 801d760 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d74c:	2300      	movs	r3, #0
 801d74e:	b298      	uxth	r0, r3
 801d750:	3301      	adds	r3, #1
 801d752:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d756:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d75a:	2900      	cmp	r1, #0
 801d75c:	d1f7      	bne.n	801d74e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d75e:	4770      	bx	lr
 801d760:	4770      	bx	lr

0801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d762:	b530      	push	{r4, r5, lr}
 801d764:	4604      	mov	r4, r0
 801d766:	b159      	cbz	r1, 801d780 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d768:	b148      	cbz	r0, 801d77e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d76a:	2300      	movs	r3, #0
 801d76c:	b298      	uxth	r0, r3
 801d76e:	4282      	cmp	r2, r0
 801d770:	d905      	bls.n	801d77e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d772:	5ccd      	ldrb	r5, [r1, r3]
 801d774:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d778:	3301      	adds	r3, #1
 801d77a:	2d00      	cmp	r5, #0
 801d77c:	d1f6      	bne.n	801d76c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d77e:	bd30      	pop	{r4, r5, pc}
 801d780:	4608      	mov	r0, r1
 801d782:	e7fc      	b.n	801d77e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d784 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d784:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d786:	b08b      	sub	sp, #44	; 0x2c
 801d788:	468c      	mov	ip, r1
 801d78a:	2100      	movs	r1, #0
 801d78c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d790:	ae01      	add	r6, sp, #4
 801d792:	211f      	movs	r1, #31
 801d794:	fbb0 f7f3 	udiv	r7, r0, r3
 801d798:	fb03 0517 	mls	r5, r3, r7, r0
 801d79c:	b2ec      	uxtb	r4, r5
 801d79e:	2d09      	cmp	r5, #9
 801d7a0:	bfd4      	ite	le
 801d7a2:	3430      	addle	r4, #48	; 0x30
 801d7a4:	3457      	addgt	r4, #87	; 0x57
 801d7a6:	b2e4      	uxtb	r4, r4
 801d7a8:	558c      	strb	r4, [r1, r6]
 801d7aa:	4638      	mov	r0, r7
 801d7ac:	1e4c      	subs	r4, r1, #1
 801d7ae:	b92f      	cbnz	r7, 801d7bc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d7b0:	4431      	add	r1, r6
 801d7b2:	4660      	mov	r0, ip
 801d7b4:	f7ff ffd5 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d7b8:	b00b      	add	sp, #44	; 0x2c
 801d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7bc:	4621      	mov	r1, r4
 801d7be:	e7e9      	b.n	801d794 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d7c0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7c2:	4607      	mov	r7, r0
 801d7c4:	b08b      	sub	sp, #44	; 0x2c
 801d7c6:	4608      	mov	r0, r1
 801d7c8:	b341      	cbz	r1, 801d81c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d7ca:	1e99      	subs	r1, r3, #2
 801d7cc:	2922      	cmp	r1, #34	; 0x22
 801d7ce:	d825      	bhi.n	801d81c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d7d0:	2100      	movs	r1, #0
 801d7d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d7d6:	463c      	mov	r4, r7
 801d7d8:	261f      	movs	r6, #31
 801d7da:	f10d 0c04 	add.w	ip, sp, #4
 801d7de:	fb94 fef3 	sdiv	lr, r4, r3
 801d7e2:	fb03 441e 	mls	r4, r3, lr, r4
 801d7e6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d7ea:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d7ee:	b2ec      	uxtb	r4, r5
 801d7f0:	2d09      	cmp	r5, #9
 801d7f2:	bfd4      	ite	le
 801d7f4:	3430      	addle	r4, #48	; 0x30
 801d7f6:	3457      	addgt	r4, #87	; 0x57
 801d7f8:	b2e4      	uxtb	r4, r4
 801d7fa:	f80c 4006 	strb.w	r4, [ip, r6]
 801d7fe:	4674      	mov	r4, lr
 801d800:	1e71      	subs	r1, r6, #1
 801d802:	b96c      	cbnz	r4, 801d820 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d804:	2f00      	cmp	r7, #0
 801d806:	da05      	bge.n	801d814 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d808:	ab0a      	add	r3, sp, #40	; 0x28
 801d80a:	4419      	add	r1, r3
 801d80c:	232d      	movs	r3, #45	; 0x2d
 801d80e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d812:	1eb1      	subs	r1, r6, #2
 801d814:	3101      	adds	r1, #1
 801d816:	4461      	add	r1, ip
 801d818:	f7ff ffa3 	bl	801d762 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d81c:	b00b      	add	sp, #44	; 0x2c
 801d81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d820:	460e      	mov	r6, r1
 801d822:	e7dc      	b.n	801d7de <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d824 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d828:	4691      	mov	r9, r2
 801d82a:	b085      	sub	sp, #20
 801d82c:	6802      	ldr	r2, [r0, #0]
 801d82e:	9201      	str	r2, [sp, #4]
 801d830:	4688      	mov	r8, r1
 801d832:	4683      	mov	fp, r0
 801d834:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d838:	9103      	str	r1, [sp, #12]
 801d83a:	4610      	mov	r0, r2
 801d83c:	461c      	mov	r4, r3
 801d83e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d842:	9302      	str	r3, [sp, #8]
 801d844:	f7ff ff80 	bl	801d748 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d848:	f1b8 0f00 	cmp.w	r8, #0
 801d84c:	bf0c      	ite	eq
 801d84e:	4684      	moveq	ip, r0
 801d850:	f100 0c01 	addne.w	ip, r0, #1
 801d854:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d858:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d85c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d85e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d860:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d864:	9903      	ldr	r1, [sp, #12]
 801d866:	fa1f fc8c 	uxth.w	ip, ip
 801d86a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d86e:	d041      	beq.n	801d8f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d870:	d834      	bhi.n	801d8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d872:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d876:	d059      	beq.n	801d92c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d878:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d87c:	d03a      	beq.n	801d8f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d87e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d882:	d034      	beq.n	801d8ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d884:	2400      	movs	r4, #0
 801d886:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d88a:	3a01      	subs	r2, #1
 801d88c:	b169      	cbz	r1, 801d8aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d88e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d890:	458c      	cmp	ip, r1
 801d892:	da09      	bge.n	801d8a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d894:	eba1 010c 	sub.w	r1, r1, ip
 801d898:	b289      	uxth	r1, r1
 801d89a:	b933      	cbnz	r3, 801d8aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d89c:	2e00      	cmp	r6, #0
 801d89e:	d051      	beq.n	801d944 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d8a0:	2800      	cmp	r0, #0
 801d8a2:	d04f      	beq.n	801d944 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d8a4:	440c      	add	r4, r1
 801d8a6:	b2a4      	uxth	r4, r4
 801d8a8:	2100      	movs	r1, #0
 801d8aa:	682b      	ldr	r3, [r5, #0]
 801d8ac:	4293      	cmp	r3, r2
 801d8ae:	da07      	bge.n	801d8c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d8b0:	f1b8 0f00 	cmp.w	r8, #0
 801d8b4:	d004      	beq.n	801d8c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d8b6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d8ba:	682b      	ldr	r3, [r5, #0]
 801d8bc:	3301      	adds	r3, #1
 801d8be:	602b      	str	r3, [r5, #0]
 801d8c0:	2730      	movs	r7, #48	; 0x30
 801d8c2:	2c00      	cmp	r4, #0
 801d8c4:	d04e      	beq.n	801d964 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d8c6:	682e      	ldr	r6, [r5, #0]
 801d8c8:	3c01      	subs	r4, #1
 801d8ca:	42b2      	cmp	r2, r6
 801d8cc:	b2a4      	uxth	r4, r4
 801d8ce:	dd49      	ble.n	801d964 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d8d0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d8d4:	682b      	ldr	r3, [r5, #0]
 801d8d6:	3301      	adds	r3, #1
 801d8d8:	602b      	str	r3, [r5, #0]
 801d8da:	e7f2      	b.n	801d8c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d8dc:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d8e0:	d01d      	beq.n	801d91e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d8e2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d8e6:	d002      	beq.n	801d8ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d8e8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d8ec:	e7c9      	b.n	801d882 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d8ee:	4684      	mov	ip, r0
 801d8f0:	f04f 0800 	mov.w	r8, #0
 801d8f4:	2c00      	cmp	r4, #0
 801d8f6:	d0c6      	beq.n	801d886 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d8f8:	b947      	cbnz	r7, 801d90c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d8fa:	2801      	cmp	r0, #1
 801d8fc:	d106      	bne.n	801d90c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d8fe:	8814      	ldrh	r4, [r2, #0]
 801d900:	2c30      	cmp	r4, #48	; 0x30
 801d902:	bf02      	ittt	eq
 801d904:	3202      	addeq	r2, #2
 801d906:	f8cb 2000 	streq.w	r2, [fp]
 801d90a:	4638      	moveq	r0, r7
 801d90c:	45bc      	cmp	ip, r7
 801d90e:	da14      	bge.n	801d93a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d910:	b2bf      	uxth	r7, r7
 801d912:	eba7 040c 	sub.w	r4, r7, ip
 801d916:	b2a4      	uxth	r4, r4
 801d918:	46bc      	mov	ip, r7
 801d91a:	2600      	movs	r6, #0
 801d91c:	e7b3      	b.n	801d886 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d91e:	4684      	mov	ip, r0
 801d920:	b16c      	cbz	r4, 801d93e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d922:	42b8      	cmp	r0, r7
 801d924:	dd00      	ble.n	801d928 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d926:	b2b8      	uxth	r0, r7
 801d928:	2400      	movs	r4, #0
 801d92a:	e003      	b.n	801d934 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d92c:	f04f 0c01 	mov.w	ip, #1
 801d930:	2400      	movs	r4, #0
 801d932:	4660      	mov	r0, ip
 801d934:	4626      	mov	r6, r4
 801d936:	46a0      	mov	r8, r4
 801d938:	e7a5      	b.n	801d886 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d93a:	2400      	movs	r4, #0
 801d93c:	e7ed      	b.n	801d91a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d93e:	4626      	mov	r6, r4
 801d940:	46a0      	mov	r8, r4
 801d942:	e7a0      	b.n	801d886 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d944:	2900      	cmp	r1, #0
 801d946:	d0b0      	beq.n	801d8aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d948:	2720      	movs	r7, #32
 801d94a:	682e      	ldr	r6, [r5, #0]
 801d94c:	2900      	cmp	r1, #0
 801d94e:	d0ac      	beq.n	801d8aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d950:	3901      	subs	r1, #1
 801d952:	4296      	cmp	r6, r2
 801d954:	b289      	uxth	r1, r1
 801d956:	daa7      	bge.n	801d8a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d958:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d95c:	682b      	ldr	r3, [r5, #0]
 801d95e:	3301      	adds	r3, #1
 801d960:	602b      	str	r3, [r5, #0]
 801d962:	e7f2      	b.n	801d94a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d964:	b188      	cbz	r0, 801d98a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d966:	682b      	ldr	r3, [r5, #0]
 801d968:	3801      	subs	r0, #1
 801d96a:	429a      	cmp	r2, r3
 801d96c:	b280      	uxth	r0, r0
 801d96e:	dd0c      	ble.n	801d98a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d970:	f8db 3000 	ldr.w	r3, [fp]
 801d974:	1c9c      	adds	r4, r3, #2
 801d976:	f8cb 4000 	str.w	r4, [fp]
 801d97a:	881c      	ldrh	r4, [r3, #0]
 801d97c:	682b      	ldr	r3, [r5, #0]
 801d97e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d982:	682b      	ldr	r3, [r5, #0]
 801d984:	3301      	adds	r3, #1
 801d986:	602b      	str	r3, [r5, #0]
 801d988:	e7ec      	b.n	801d964 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d98a:	2620      	movs	r6, #32
 801d98c:	b151      	cbz	r1, 801d9a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d98e:	6828      	ldr	r0, [r5, #0]
 801d990:	3901      	subs	r1, #1
 801d992:	4282      	cmp	r2, r0
 801d994:	b289      	uxth	r1, r1
 801d996:	dd05      	ble.n	801d9a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d998:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d99c:	682b      	ldr	r3, [r5, #0]
 801d99e:	3301      	adds	r3, #1
 801d9a0:	602b      	str	r3, [r5, #0]
 801d9a2:	e7f3      	b.n	801d98c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d9a4:	b005      	add	sp, #20
 801d9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d9aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d9ae:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d9b2:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d9b6:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d9ba:	2400      	movs	r4, #0
 801d9bc:	8014      	strh	r4, [r2, #0]
 801d9be:	701c      	strb	r4, [r3, #0]
 801d9c0:	f888 4000 	strb.w	r4, [r8]
 801d9c4:	f88c 4000 	strb.w	r4, [ip]
 801d9c8:	f88e 4000 	strb.w	r4, [lr]
 801d9cc:	703c      	strb	r4, [r7, #0]
 801d9ce:	6804      	ldr	r4, [r0, #0]
 801d9d0:	b1a4      	cbz	r4, 801d9fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d9d2:	8824      	ldrh	r4, [r4, #0]
 801d9d4:	f04f 0901 	mov.w	r9, #1
 801d9d8:	b314      	cbz	r4, 801da20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d9da:	2c2b      	cmp	r4, #43	; 0x2b
 801d9dc:	d001      	beq.n	801d9e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d9de:	2c20      	cmp	r4, #32
 801d9e0:	d110      	bne.n	801da04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d9e2:	8014      	strh	r4, [r2, #0]
 801d9e4:	6804      	ldr	r4, [r0, #0]
 801d9e6:	b10c      	cbz	r4, 801d9ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d9e8:	3402      	adds	r4, #2
 801d9ea:	6004      	str	r4, [r0, #0]
 801d9ec:	680c      	ldr	r4, [r1, #0]
 801d9ee:	b10c      	cbz	r4, 801d9f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d9f0:	3401      	adds	r4, #1
 801d9f2:	600c      	str	r4, [r1, #0]
 801d9f4:	6804      	ldr	r4, [r0, #0]
 801d9f6:	b17c      	cbz	r4, 801da18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d9f8:	8824      	ldrh	r4, [r4, #0]
 801d9fa:	e7ed      	b.n	801d9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d9fc:	680c      	ldr	r4, [r1, #0]
 801d9fe:	b17c      	cbz	r4, 801da20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801da00:	7824      	ldrb	r4, [r4, #0]
 801da02:	e7e7      	b.n	801d9d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801da04:	2c2d      	cmp	r4, #45	; 0x2d
 801da06:	d102      	bne.n	801da0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801da08:	f883 9000 	strb.w	r9, [r3]
 801da0c:	e7ea      	b.n	801d9e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801da0e:	2c23      	cmp	r4, #35	; 0x23
 801da10:	d107      	bne.n	801da22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801da12:	f888 9000 	strb.w	r9, [r8]
 801da16:	e7e5      	b.n	801d9e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801da18:	680c      	ldr	r4, [r1, #0]
 801da1a:	b10c      	cbz	r4, 801da20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801da1c:	7824      	ldrb	r4, [r4, #0]
 801da1e:	e7db      	b.n	801d9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801da20:	2400      	movs	r4, #0
 801da22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801da26:	2b09      	cmp	r3, #9
 801da28:	d901      	bls.n	801da2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801da2a:	2c2a      	cmp	r4, #42	; 0x2a
 801da2c:	d122      	bne.n	801da74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801da2e:	2301      	movs	r3, #1
 801da30:	2c30      	cmp	r4, #48	; 0x30
 801da32:	f88e 3000 	strb.w	r3, [lr]
 801da36:	d10d      	bne.n	801da54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801da38:	f88c 3000 	strb.w	r3, [ip]
 801da3c:	6803      	ldr	r3, [r0, #0]
 801da3e:	b10b      	cbz	r3, 801da44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801da40:	3302      	adds	r3, #2
 801da42:	6003      	str	r3, [r0, #0]
 801da44:	680b      	ldr	r3, [r1, #0]
 801da46:	b10b      	cbz	r3, 801da4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801da48:	3301      	adds	r3, #1
 801da4a:	600b      	str	r3, [r1, #0]
 801da4c:	6803      	ldr	r3, [r0, #0]
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d02f      	beq.n	801dab2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801da52:	881c      	ldrh	r4, [r3, #0]
 801da54:	2c2a      	cmp	r4, #42	; 0x2a
 801da56:	d135      	bne.n	801dac4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801da58:	f04f 33ff 	mov.w	r3, #4294967295
 801da5c:	6033      	str	r3, [r6, #0]
 801da5e:	6803      	ldr	r3, [r0, #0]
 801da60:	b10b      	cbz	r3, 801da66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801da62:	3302      	adds	r3, #2
 801da64:	6003      	str	r3, [r0, #0]
 801da66:	680b      	ldr	r3, [r1, #0]
 801da68:	b10b      	cbz	r3, 801da6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801da6a:	3301      	adds	r3, #1
 801da6c:	600b      	str	r3, [r1, #0]
 801da6e:	6803      	ldr	r3, [r0, #0]
 801da70:	b31b      	cbz	r3, 801daba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801da72:	881c      	ldrh	r4, [r3, #0]
 801da74:	2c2e      	cmp	r4, #46	; 0x2e
 801da76:	d11a      	bne.n	801daae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801da78:	2301      	movs	r3, #1
 801da7a:	703b      	strb	r3, [r7, #0]
 801da7c:	6803      	ldr	r3, [r0, #0]
 801da7e:	b10b      	cbz	r3, 801da84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801da80:	3302      	adds	r3, #2
 801da82:	6003      	str	r3, [r0, #0]
 801da84:	680b      	ldr	r3, [r1, #0]
 801da86:	b10b      	cbz	r3, 801da8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801da88:	3301      	adds	r3, #1
 801da8a:	600b      	str	r3, [r1, #0]
 801da8c:	6803      	ldr	r3, [r0, #0]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d036      	beq.n	801db00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801da92:	881b      	ldrh	r3, [r3, #0]
 801da94:	2b2a      	cmp	r3, #42	; 0x2a
 801da96:	d137      	bne.n	801db08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801da98:	f04f 33ff 	mov.w	r3, #4294967295
 801da9c:	602b      	str	r3, [r5, #0]
 801da9e:	6803      	ldr	r3, [r0, #0]
 801daa0:	b10b      	cbz	r3, 801daa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801daa2:	3302      	adds	r3, #2
 801daa4:	6003      	str	r3, [r0, #0]
 801daa6:	680b      	ldr	r3, [r1, #0]
 801daa8:	b10b      	cbz	r3, 801daae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801daaa:	3301      	adds	r3, #1
 801daac:	600b      	str	r3, [r1, #0]
 801daae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dab2:	680c      	ldr	r4, [r1, #0]
 801dab4:	b134      	cbz	r4, 801dac4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801dab6:	7824      	ldrb	r4, [r4, #0]
 801dab8:	e7cc      	b.n	801da54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801daba:	680b      	ldr	r3, [r1, #0]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d0f6      	beq.n	801daae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dac0:	781c      	ldrb	r4, [r3, #0]
 801dac2:	e7d7      	b.n	801da74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dac4:	2300      	movs	r3, #0
 801dac6:	6033      	str	r3, [r6, #0]
 801dac8:	220a      	movs	r2, #10
 801daca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801dace:	fa1f f38c 	uxth.w	r3, ip
 801dad2:	2b09      	cmp	r3, #9
 801dad4:	d8ce      	bhi.n	801da74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dad6:	6833      	ldr	r3, [r6, #0]
 801dad8:	fb02 c303 	mla	r3, r2, r3, ip
 801dadc:	6033      	str	r3, [r6, #0]
 801dade:	6803      	ldr	r3, [r0, #0]
 801dae0:	b10b      	cbz	r3, 801dae6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801dae2:	3302      	adds	r3, #2
 801dae4:	6003      	str	r3, [r0, #0]
 801dae6:	680b      	ldr	r3, [r1, #0]
 801dae8:	b10b      	cbz	r3, 801daee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801daea:	3301      	adds	r3, #1
 801daec:	600b      	str	r3, [r1, #0]
 801daee:	6803      	ldr	r3, [r0, #0]
 801daf0:	b10b      	cbz	r3, 801daf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801daf2:	881c      	ldrh	r4, [r3, #0]
 801daf4:	e7e9      	b.n	801daca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801daf6:	680c      	ldr	r4, [r1, #0]
 801daf8:	2c00      	cmp	r4, #0
 801dafa:	d0e6      	beq.n	801daca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801dafc:	7824      	ldrb	r4, [r4, #0]
 801dafe:	e7e4      	b.n	801daca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801db00:	680b      	ldr	r3, [r1, #0]
 801db02:	b10b      	cbz	r3, 801db08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801db04:	781b      	ldrb	r3, [r3, #0]
 801db06:	e7c5      	b.n	801da94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801db08:	2200      	movs	r2, #0
 801db0a:	602a      	str	r2, [r5, #0]
 801db0c:	240a      	movs	r4, #10
 801db0e:	3b30      	subs	r3, #48	; 0x30
 801db10:	b29e      	uxth	r6, r3
 801db12:	2e09      	cmp	r6, #9
 801db14:	682a      	ldr	r2, [r5, #0]
 801db16:	d813      	bhi.n	801db40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801db18:	fb04 3302 	mla	r3, r4, r2, r3
 801db1c:	602b      	str	r3, [r5, #0]
 801db1e:	6803      	ldr	r3, [r0, #0]
 801db20:	b10b      	cbz	r3, 801db26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801db22:	3302      	adds	r3, #2
 801db24:	6003      	str	r3, [r0, #0]
 801db26:	680b      	ldr	r3, [r1, #0]
 801db28:	b10b      	cbz	r3, 801db2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801db2a:	3301      	adds	r3, #1
 801db2c:	600b      	str	r3, [r1, #0]
 801db2e:	6803      	ldr	r3, [r0, #0]
 801db30:	b10b      	cbz	r3, 801db36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801db32:	881b      	ldrh	r3, [r3, #0]
 801db34:	e7eb      	b.n	801db0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801db36:	680b      	ldr	r3, [r1, #0]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d0e8      	beq.n	801db0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801db3c:	781b      	ldrb	r3, [r3, #0]
 801db3e:	e7e6      	b.n	801db0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801db40:	2a06      	cmp	r2, #6
 801db42:	bfa8      	it	ge
 801db44:	2206      	movge	r2, #6
 801db46:	602a      	str	r2, [r5, #0]
 801db48:	e7b1      	b.n	801daae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801db4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801db4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db4e:	b0a3      	sub	sp, #140	; 0x8c
 801db50:	2600      	movs	r6, #0
 801db52:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801db56:	4607      	mov	r7, r0
 801db58:	4688      	mov	r8, r1
 801db5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801db5e:	4631      	mov	r1, r6
 801db60:	2242      	movs	r2, #66	; 0x42
 801db62:	4648      	mov	r0, r9
 801db64:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801db66:	960d      	str	r6, [sp, #52]	; 0x34
 801db68:	f00e fe04 	bl	802c774 <memset>
 801db6c:	b15f      	cbz	r7, 801db86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801db6e:	f108 3aff 	add.w	sl, r8, #4294967295
 801db72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db76:	b152      	cbz	r2, 801db8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801db78:	8812      	ldrh	r2, [r2, #0]
 801db7a:	b10a      	cbz	r2, 801db80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801db7c:	459a      	cmp	sl, r3
 801db7e:	dc2e      	bgt.n	801dbde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801db80:	2200      	movs	r2, #0
 801db82:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801db86:	4638      	mov	r0, r7
 801db88:	b023      	add	sp, #140	; 0x8c
 801db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db8e:	9a08      	ldr	r2, [sp, #32]
 801db90:	2a00      	cmp	r2, #0
 801db92:	d0f5      	beq.n	801db80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801db94:	7812      	ldrb	r2, [r2, #0]
 801db96:	e7f0      	b.n	801db7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801db98:	2d00      	cmp	r5, #0
 801db9a:	d0ea      	beq.n	801db72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801db9c:	782a      	ldrb	r2, [r5, #0]
 801db9e:	b142      	cbz	r2, 801dbb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801dba0:	2a25      	cmp	r2, #37	; 0x25
 801dba2:	d001      	beq.n	801dba8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801dba4:	459a      	cmp	sl, r3
 801dba6:	dc08      	bgt.n	801dbba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801dba8:	f1bb 0f00 	cmp.w	fp, #0
 801dbac:	d121      	bne.n	801dbf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801dbae:	2d00      	cmp	r5, #0
 801dbb0:	d0df      	beq.n	801db72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dbb2:	782a      	ldrb	r2, [r5, #0]
 801dbb4:	f04f 0b00 	mov.w	fp, #0
 801dbb8:	e01d      	b.n	801dbf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801dbba:	f1bb 0f00 	cmp.w	fp, #0
 801dbbe:	d078      	beq.n	801dcb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801dbc0:	f8bb 2000 	ldrh.w	r2, [fp]
 801dbc4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dbc8:	f1bb 0f00 	cmp.w	fp, #0
 801dbcc:	d002      	beq.n	801dbd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801dbce:	f10b 0202 	add.w	r2, fp, #2
 801dbd2:	9209      	str	r2, [sp, #36]	; 0x24
 801dbd4:	b10d      	cbz	r5, 801dbda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801dbd6:	3501      	adds	r5, #1
 801dbd8:	9508      	str	r5, [sp, #32]
 801dbda:	3301      	adds	r3, #1
 801dbdc:	930d      	str	r3, [sp, #52]	; 0x34
 801dbde:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801dbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dbe4:	f1bb 0f00 	cmp.w	fp, #0
 801dbe8:	d0d6      	beq.n	801db98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801dbea:	f8bb 2000 	ldrh.w	r2, [fp]
 801dbee:	2a00      	cmp	r2, #0
 801dbf0:	d1d6      	bne.n	801dba0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801dbf2:	f8bb 2000 	ldrh.w	r2, [fp]
 801dbf6:	2a00      	cmp	r2, #0
 801dbf8:	d0bb      	beq.n	801db72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dbfa:	459a      	cmp	sl, r3
 801dbfc:	ddb9      	ble.n	801db72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dbfe:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801dc02:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801dc06:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801dc0a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801dc0e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801dc12:	960e      	str	r6, [sp, #56]	; 0x38
 801dc14:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801dc18:	960f      	str	r6, [sp, #60]	; 0x3c
 801dc1a:	f1bb 0f00 	cmp.w	fp, #0
 801dc1e:	d002      	beq.n	801dc26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801dc20:	f10b 0302 	add.w	r3, fp, #2
 801dc24:	9309      	str	r3, [sp, #36]	; 0x24
 801dc26:	b10d      	cbz	r5, 801dc2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801dc28:	1c6b      	adds	r3, r5, #1
 801dc2a:	9308      	str	r3, [sp, #32]
 801dc2c:	ab0f      	add	r3, sp, #60	; 0x3c
 801dc2e:	9305      	str	r3, [sp, #20]
 801dc30:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801dc34:	9304      	str	r3, [sp, #16]
 801dc36:	ab0e      	add	r3, sp, #56	; 0x38
 801dc38:	9303      	str	r3, [sp, #12]
 801dc3a:	ab0c      	add	r3, sp, #48	; 0x30
 801dc3c:	9302      	str	r3, [sp, #8]
 801dc3e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801dc42:	9301      	str	r3, [sp, #4]
 801dc44:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801dc48:	9300      	str	r3, [sp, #0]
 801dc4a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801dc4e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801dc52:	a908      	add	r1, sp, #32
 801dc54:	a809      	add	r0, sp, #36	; 0x24
 801dc56:	f7ff fea8 	bl	801d9aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801dc5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	bfbe      	ittt	lt
 801dc60:	6823      	ldrlt	r3, [r4, #0]
 801dc62:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dc66:	930e      	strlt	r3, [sp, #56]	; 0x38
 801dc68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dc6a:	bfb8      	it	lt
 801dc6c:	3404      	addlt	r4, #4
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	bfb8      	it	lt
 801dc72:	6823      	ldrlt	r3, [r4, #0]
 801dc74:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801dc78:	bfbe      	ittt	lt
 801dc7a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dc7e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801dc80:	3404      	addlt	r4, #4
 801dc82:	b1d9      	cbz	r1, 801dcbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801dc84:	880b      	ldrh	r3, [r1, #0]
 801dc86:	2b69      	cmp	r3, #105	; 0x69
 801dc88:	d01f      	beq.n	801dcca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dc8a:	d82f      	bhi.n	801dcec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801dc8c:	2b58      	cmp	r3, #88	; 0x58
 801dc8e:	d01c      	beq.n	801dcca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dc90:	d818      	bhi.n	801dcc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801dc92:	2b25      	cmp	r3, #37	; 0x25
 801dc94:	d034      	beq.n	801dd00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801dc96:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801dc9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc9c:	f1bb 0f00 	cmp.w	fp, #0
 801dca0:	f000 80b8 	beq.w	801de14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801dca4:	f8bb 5000 	ldrh.w	r5, [fp]
 801dca8:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801dcac:	3301      	adds	r3, #1
 801dcae:	930d      	str	r3, [sp, #52]	; 0x34
 801dcb0:	e029      	b.n	801dd06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801dcb2:	b10d      	cbz	r5, 801dcb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801dcb4:	782a      	ldrb	r2, [r5, #0]
 801dcb6:	e785      	b.n	801dbc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dcb8:	462a      	mov	r2, r5
 801dcba:	e783      	b.n	801dbc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dcbc:	2a00      	cmp	r2, #0
 801dcbe:	d0ea      	beq.n	801dc96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801dcc0:	7813      	ldrb	r3, [r2, #0]
 801dcc2:	e7e0      	b.n	801dc86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801dcc4:	3b63      	subs	r3, #99	; 0x63
 801dcc6:	2b01      	cmp	r3, #1
 801dcc8:	d8e5      	bhi.n	801dc96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801dcca:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801dcce:	b329      	cbz	r1, 801dd1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801dcd0:	880b      	ldrh	r3, [r1, #0]
 801dcd2:	2b69      	cmp	r3, #105	; 0x69
 801dcd4:	d063      	beq.n	801dd9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801dcd6:	d825      	bhi.n	801dd24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801dcd8:	2b63      	cmp	r3, #99	; 0x63
 801dcda:	d038      	beq.n	801dd4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801dcdc:	2b64      	cmp	r3, #100	; 0x64
 801dcde:	d05e      	beq.n	801dd9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801dce0:	2b58      	cmp	r3, #88	; 0x58
 801dce2:	d07b      	beq.n	801dddc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801dce4:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801dce8:	4625      	mov	r5, r4
 801dcea:	e036      	b.n	801dd5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801dcec:	2b73      	cmp	r3, #115	; 0x73
 801dcee:	d0ec      	beq.n	801dcca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dcf0:	d802      	bhi.n	801dcf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801dcf2:	2b6f      	cmp	r3, #111	; 0x6f
 801dcf4:	d1cf      	bne.n	801dc96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801dcf6:	e7e8      	b.n	801dcca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dcf8:	2b75      	cmp	r3, #117	; 0x75
 801dcfa:	d0e6      	beq.n	801dcca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dcfc:	2b78      	cmp	r3, #120	; 0x78
 801dcfe:	e7f9      	b.n	801dcf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801dd00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd02:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801dd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd08:	b10b      	cbz	r3, 801dd0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801dd0a:	3302      	adds	r3, #2
 801dd0c:	9309      	str	r3, [sp, #36]	; 0x24
 801dd0e:	9b08      	ldr	r3, [sp, #32]
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	f43f af2e 	beq.w	801db72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dd16:	3301      	adds	r3, #1
 801dd18:	9308      	str	r3, [sp, #32]
 801dd1a:	e72a      	b.n	801db72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dd1c:	2a00      	cmp	r2, #0
 801dd1e:	d0e1      	beq.n	801dce4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801dd20:	7813      	ldrb	r3, [r2, #0]
 801dd22:	e7d6      	b.n	801dcd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801dd24:	2b73      	cmp	r3, #115	; 0x73
 801dd26:	d036      	beq.n	801dd96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801dd28:	d807      	bhi.n	801dd3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801dd2a:	2b6f      	cmp	r3, #111	; 0x6f
 801dd2c:	d1da      	bne.n	801dce4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801dd2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd30:	1d25      	adds	r5, r4, #4
 801dd32:	eba8 0202 	sub.w	r2, r8, r2
 801dd36:	2308      	movs	r3, #8
 801dd38:	e04a      	b.n	801ddd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801dd3a:	2b75      	cmp	r3, #117	; 0x75
 801dd3c:	d043      	beq.n	801ddc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801dd3e:	2b78      	cmp	r3, #120	; 0x78
 801dd40:	d1d0      	bne.n	801dce4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801dd42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd44:	1d25      	adds	r5, r4, #4
 801dd46:	eba8 0202 	sub.w	r2, r8, r2
 801dd4a:	2310      	movs	r3, #16
 801dd4c:	e040      	b.n	801ddd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801dd4e:	7823      	ldrb	r3, [r4, #0]
 801dd50:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801dd54:	1d25      	adds	r5, r4, #4
 801dd56:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801dd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd5c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d052      	beq.n	801de0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801dd64:	881a      	ldrh	r2, [r3, #0]
 801dd66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801dd6a:	a80d      	add	r0, sp, #52	; 0x34
 801dd6c:	9005      	str	r0, [sp, #20]
 801dd6e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801dd72:	9004      	str	r0, [sp, #16]
 801dd74:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dd76:	9003      	str	r0, [sp, #12]
 801dd78:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801dd7c:	9002      	str	r0, [sp, #8]
 801dd7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dd80:	9001      	str	r0, [sp, #4]
 801dd82:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801dd86:	9000      	str	r0, [sp, #0]
 801dd88:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801dd8c:	a810      	add	r0, sp, #64	; 0x40
 801dd8e:	f7ff fd49 	bl	801d824 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801dd92:	462c      	mov	r4, r5
 801dd94:	e7b7      	b.n	801dd06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801dd96:	6823      	ldr	r3, [r4, #0]
 801dd98:	1d25      	adds	r5, r4, #4
 801dd9a:	9310      	str	r3, [sp, #64]	; 0x40
 801dd9c:	e7dd      	b.n	801dd5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801dd9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dda0:	6820      	ldr	r0, [r4, #0]
 801dda2:	eba8 0202 	sub.w	r2, r8, r2
 801dda6:	230a      	movs	r3, #10
 801dda8:	b292      	uxth	r2, r2
 801ddaa:	4649      	mov	r1, r9
 801ddac:	f7ff fd08 	bl	801d7c0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ddb0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ddb4:	2b2d      	cmp	r3, #45	; 0x2d
 801ddb6:	f104 0504 	add.w	r5, r4, #4
 801ddba:	d1ce      	bne.n	801dd5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801ddbc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ddc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ddc2:	3302      	adds	r3, #2
 801ddc4:	e7e9      	b.n	801dd9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801ddc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddc8:	1d25      	adds	r5, r4, #4
 801ddca:	eba8 0202 	sub.w	r2, r8, r2
 801ddce:	230a      	movs	r3, #10
 801ddd0:	b292      	uxth	r2, r2
 801ddd2:	4649      	mov	r1, r9
 801ddd4:	6820      	ldr	r0, [r4, #0]
 801ddd6:	f7ff fcd5 	bl	801d784 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ddda:	e7be      	b.n	801dd5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801dddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddde:	6820      	ldr	r0, [r4, #0]
 801dde0:	eba8 0202 	sub.w	r2, r8, r2
 801dde4:	b292      	uxth	r2, r2
 801dde6:	2310      	movs	r3, #16
 801dde8:	4649      	mov	r1, r9
 801ddea:	f7ff fccb 	bl	801d784 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ddee:	1d25      	adds	r5, r4, #4
 801ddf0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ddf4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d0ae      	beq.n	801dd5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801ddfc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801de00:	2919      	cmp	r1, #25
 801de02:	d8f7      	bhi.n	801ddf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801de04:	3b20      	subs	r3, #32
 801de06:	8013      	strh	r3, [r2, #0]
 801de08:	e7f4      	b.n	801ddf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801de0a:	9a08      	ldr	r2, [sp, #32]
 801de0c:	2a00      	cmp	r2, #0
 801de0e:	d0aa      	beq.n	801dd66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801de10:	7812      	ldrb	r2, [r2, #0]
 801de12:	e7a8      	b.n	801dd66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801de14:	2d00      	cmp	r5, #0
 801de16:	f43f af47 	beq.w	801dca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801de1a:	782d      	ldrb	r5, [r5, #0]
 801de1c:	e744      	b.n	801dca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801de1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801de1e:	b507      	push	{r0, r1, r2, lr}
 801de20:	9300      	str	r3, [sp, #0]
 801de22:	4613      	mov	r3, r2
 801de24:	2200      	movs	r2, #0
 801de26:	f7ff fe90 	bl	801db4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801de2a:	b003      	add	sp, #12
 801de2c:	f85d fb04 	ldr.w	pc, [sp], #4

0801de30 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801de30:	b40c      	push	{r2, r3}
 801de32:	b507      	push	{r0, r1, r2, lr}
 801de34:	ab04      	add	r3, sp, #16
 801de36:	f853 2b04 	ldr.w	r2, [r3], #4
 801de3a:	9301      	str	r3, [sp, #4]
 801de3c:	f7ff ffef 	bl	801de1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801de40:	b003      	add	sp, #12
 801de42:	f85d eb04 	ldr.w	lr, [sp], #4
 801de46:	b002      	add	sp, #8
 801de48:	4770      	bx	lr
	...

0801de4c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de50:	b0c3      	sub	sp, #268	; 0x10c
 801de52:	2600      	movs	r6, #0
 801de54:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801de58:	4607      	mov	r7, r0
 801de5a:	4689      	mov	r9, r1
 801de5c:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801de60:	4631      	mov	r1, r6
 801de62:	22c8      	movs	r2, #200	; 0xc8
 801de64:	4640      	mov	r0, r8
 801de66:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801de6a:	960c      	str	r6, [sp, #48]	; 0x30
 801de6c:	f00e fc82 	bl	802c774 <memset>
 801de70:	b16f      	cbz	r7, 801de8e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 801de72:	f04f 0b0a 	mov.w	fp, #10
 801de76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de7a:	b162      	cbz	r2, 801de96 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 801de7c:	8812      	ldrh	r2, [r2, #0]
 801de7e:	b11a      	cbz	r2, 801de88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801de80:	f109 31ff 	add.w	r1, r9, #4294967295
 801de84:	4299      	cmp	r1, r3
 801de86:	dc26      	bgt.n	801ded6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801de88:	2200      	movs	r2, #0
 801de8a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801de8e:	4638      	mov	r0, r7
 801de90:	b043      	add	sp, #268	; 0x10c
 801de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de96:	9a08      	ldr	r2, [sp, #32]
 801de98:	2a00      	cmp	r2, #0
 801de9a:	d0f5      	beq.n	801de88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801de9c:	7812      	ldrb	r2, [r2, #0]
 801de9e:	e7ee      	b.n	801de7e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 801dea0:	2c00      	cmp	r4, #0
 801dea2:	d0e8      	beq.n	801de76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801dea4:	7822      	ldrb	r2, [r4, #0]
 801dea6:	b132      	cbz	r2, 801deb6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801dea8:	2a25      	cmp	r2, #37	; 0x25
 801deaa:	d001      	beq.n	801deb0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 801deac:	4299      	cmp	r1, r3
 801deae:	dc05      	bgt.n	801debc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 801deb0:	b9cd      	cbnz	r5, 801dee6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 801deb2:	2c00      	cmp	r4, #0
 801deb4:	d0df      	beq.n	801de76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801deb6:	7822      	ldrb	r2, [r4, #0]
 801deb8:	2500      	movs	r5, #0
 801deba:	e015      	b.n	801dee8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 801debc:	2d00      	cmp	r5, #0
 801debe:	d073      	beq.n	801dfa8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 801dec0:	882a      	ldrh	r2, [r5, #0]
 801dec2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dec6:	b10d      	cbz	r5, 801decc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801dec8:	3502      	adds	r5, #2
 801deca:	9509      	str	r5, [sp, #36]	; 0x24
 801decc:	b10c      	cbz	r4, 801ded2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 801dece:	3401      	adds	r4, #1
 801ded0:	9408      	str	r4, [sp, #32]
 801ded2:	3301      	adds	r3, #1
 801ded4:	930c      	str	r3, [sp, #48]	; 0x30
 801ded6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801deda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dedc:	2d00      	cmp	r5, #0
 801dede:	d0df      	beq.n	801dea0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 801dee0:	882a      	ldrh	r2, [r5, #0]
 801dee2:	2a00      	cmp	r2, #0
 801dee4:	d1e0      	bne.n	801dea8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801dee6:	882a      	ldrh	r2, [r5, #0]
 801dee8:	2a00      	cmp	r2, #0
 801deea:	d0c4      	beq.n	801de76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801deec:	4299      	cmp	r1, r3
 801deee:	ddc2      	ble.n	801de76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801def0:	2300      	movs	r3, #0
 801def2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801def6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801defa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801defe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801df02:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801df06:	930d      	str	r3, [sp, #52]	; 0x34
 801df08:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801df0c:	930e      	str	r3, [sp, #56]	; 0x38
 801df0e:	b10d      	cbz	r5, 801df14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 801df10:	1cab      	adds	r3, r5, #2
 801df12:	9309      	str	r3, [sp, #36]	; 0x24
 801df14:	b10c      	cbz	r4, 801df1a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801df16:	1c63      	adds	r3, r4, #1
 801df18:	9308      	str	r3, [sp, #32]
 801df1a:	ab0e      	add	r3, sp, #56	; 0x38
 801df1c:	9305      	str	r3, [sp, #20]
 801df1e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801df22:	9304      	str	r3, [sp, #16]
 801df24:	ab0d      	add	r3, sp, #52	; 0x34
 801df26:	9303      	str	r3, [sp, #12]
 801df28:	ab0b      	add	r3, sp, #44	; 0x2c
 801df2a:	9302      	str	r3, [sp, #8]
 801df2c:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801df30:	9301      	str	r3, [sp, #4]
 801df32:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801df36:	9300      	str	r3, [sp, #0]
 801df38:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801df3c:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801df40:	a908      	add	r1, sp, #32
 801df42:	a809      	add	r0, sp, #36	; 0x24
 801df44:	f7ff fd31 	bl	801d9aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801df48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	da0b      	bge.n	801df66 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 801df4e:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801df52:	edd3 7a00 	vldr	s15, [r3]
 801df56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801df5a:	3601      	adds	r6, #1
 801df5c:	ee17 3a90 	vmov	r3, s15
 801df60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df64:	930d      	str	r3, [sp, #52]	; 0x34
 801df66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df68:	2b00      	cmp	r3, #0
 801df6a:	da0b      	bge.n	801df84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 801df6c:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801df70:	edd3 7a00 	vldr	s15, [r3]
 801df74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801df78:	3601      	adds	r6, #1
 801df7a:	ee17 3a90 	vmov	r3, s15
 801df7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df82:	930e      	str	r3, [sp, #56]	; 0x38
 801df84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df86:	b1a3      	cbz	r3, 801dfb2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801df88:	881a      	ldrh	r2, [r3, #0]
 801df8a:	2a25      	cmp	r2, #37	; 0x25
 801df8c:	d016      	beq.n	801dfbc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 801df8e:	2a66      	cmp	r2, #102	; 0x66
 801df90:	d01a      	beq.n	801dfc8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801df92:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801df96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df98:	2d00      	cmp	r5, #0
 801df9a:	f000 80fd 	beq.w	801e198 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34c>
 801df9e:	882c      	ldrh	r4, [r5, #0]
 801dfa0:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801dfa4:	3301      	adds	r3, #1
 801dfa6:	e00d      	b.n	801dfc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801dfa8:	b10c      	cbz	r4, 801dfae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801dfaa:	7822      	ldrb	r2, [r4, #0]
 801dfac:	e789      	b.n	801dec2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801dfae:	4622      	mov	r2, r4
 801dfb0:	e787      	b.n	801dec2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801dfb2:	9b08      	ldr	r3, [sp, #32]
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d0ec      	beq.n	801df92 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801dfb8:	781a      	ldrb	r2, [r3, #0]
 801dfba:	e7e6      	b.n	801df8a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 801dfbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dfbe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dfc2:	3302      	adds	r3, #2
 801dfc4:	930c      	str	r3, [sp, #48]	; 0x30
 801dfc6:	e04b      	b.n	801e060 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x214>
 801dfc8:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801dfcc:	ed93 7a00 	vldr	s14, [r3]
 801dfd0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801dfd4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801dfd8:	3601      	adds	r6, #1
 801dfda:	b923      	cbnz	r3, 801dfe6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 801dfdc:	2301      	movs	r3, #1
 801dfde:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801dfe2:	2306      	movs	r3, #6
 801dfe4:	930e      	str	r3, [sp, #56]	; 0x38
 801dfe6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801dfea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfee:	bf48      	it	mi
 801dff0:	eeb1 7a47 	vnegmi.f32	s14, s14
 801dff4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dff8:	ee77 6a67 	vsub.f32	s13, s14, s15
 801dffc:	bf48      	it	mi
 801dffe:	232d      	movmi	r3, #45	; 0x2d
 801e000:	eef4 6a47 	vcmp.f32	s13, s14
 801e004:	bf48      	it	mi
 801e006:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801e00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e00e:	d132      	bne.n	801e076 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801e010:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e014:	eef4 7a47 	vcmp.f32	s15, s14
 801e018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e01c:	d12b      	bne.n	801e076 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801e01e:	4b61      	ldr	r3, [pc, #388]	; (801e1a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>)
 801e020:	9310      	str	r3, [sp, #64]	; 0x40
 801e022:	2366      	movs	r3, #102	; 0x66
 801e024:	9311      	str	r3, [sp, #68]	; 0x44
 801e026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e028:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	f000 80ad 	beq.w	801e18c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x340>
 801e032:	881a      	ldrh	r2, [r3, #0]
 801e034:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e038:	a80c      	add	r0, sp, #48	; 0x30
 801e03a:	9005      	str	r0, [sp, #20]
 801e03c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801e040:	9004      	str	r0, [sp, #16]
 801e042:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e044:	9003      	str	r0, [sp, #12]
 801e046:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801e04a:	9002      	str	r0, [sp, #8]
 801e04c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e04e:	9001      	str	r0, [sp, #4]
 801e050:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801e054:	9000      	str	r0, [sp, #0]
 801e056:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801e05a:	a80f      	add	r0, sp, #60	; 0x3c
 801e05c:	f7ff fbe2 	bl	801d824 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e062:	b10b      	cbz	r3, 801e068 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801e064:	3302      	adds	r3, #2
 801e066:	9309      	str	r3, [sp, #36]	; 0x24
 801e068:	9b08      	ldr	r3, [sp, #32]
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	f43f af03 	beq.w	801de76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801e070:	3301      	adds	r3, #1
 801e072:	9308      	str	r3, [sp, #32]
 801e074:	e6ff      	b.n	801de76 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801e076:	eeb4 7a47 	vcmp.f32	s14, s14
 801e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e07e:	d10b      	bne.n	801e098 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24c>
 801e080:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e082:	eddf 7a49 	vldr	s15, [pc, #292]	; 801e1a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>
 801e086:	2300      	movs	r3, #0
 801e088:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801e08c:	4283      	cmp	r3, r0
 801e08e:	da07      	bge.n	801e0a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x254>
 801e090:	eec7 7a86 	vdiv.f32	s15, s15, s12
 801e094:	3301      	adds	r3, #1
 801e096:	e7f9      	b.n	801e08c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x240>
 801e098:	4b44      	ldr	r3, [pc, #272]	; (801e1ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x360>)
 801e09a:	9310      	str	r3, [sp, #64]	; 0x40
 801e09c:	236e      	movs	r3, #110	; 0x6e
 801e09e:	e7c1      	b.n	801e024 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d8>
 801e0a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0a8:	eeb0 7a67 	vmov.f32	s14, s15
 801e0ac:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0b4:	da27      	bge.n	801e106 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ba>
 801e0b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e0b8:	2100      	movs	r1, #0
 801e0ba:	eba9 0202 	sub.w	r2, r9, r2
 801e0be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e0c2:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0ca:	b28c      	uxth	r4, r1
 801e0cc:	db21      	blt.n	801e112 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801e0ce:	1a53      	subs	r3, r2, r1
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	dd1e      	ble.n	801e112 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801e0d4:	2963      	cmp	r1, #99	; 0x63
 801e0d6:	d01b      	beq.n	801e110 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801e0d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e0dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801e0e0:	ee17 3a10 	vmov	r3, s14
 801e0e4:	2b09      	cmp	r3, #9
 801e0e6:	bfa8      	it	ge
 801e0e8:	2309      	movge	r3, #9
 801e0ea:	ee07 3a10 	vmov	s14, r3
 801e0ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e0f2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801e0f6:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801e0fa:	eee7 7a66 	vfms.f32	s15, s14, s13
 801e0fe:	3101      	adds	r1, #1
 801e100:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801e104:	e7dd      	b.n	801e0c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x276>
 801e106:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e10a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e10e:	e7cd      	b.n	801e0ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x260>
 801e110:	460c      	mov	r4, r1
 801e112:	2a63      	cmp	r2, #99	; 0x63
 801e114:	bfd4      	ite	le
 801e116:	ebc4 0202 	rsble	r2, r4, r2
 801e11a:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801e11e:	2a00      	cmp	r2, #0
 801e120:	dd2f      	ble.n	801e182 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801e122:	4603      	mov	r3, r0
 801e124:	2501      	movs	r5, #1
 801e126:	2b00      	cmp	r3, #0
 801e128:	dd0d      	ble.n	801e146 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fa>
 801e12a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e12e:	3b01      	subs	r3, #1
 801e130:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e134:	ee17 1a10 	vmov	r1, s14
 801e138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e13c:	fb0b 1505 	mla	r5, fp, r5, r1
 801e140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e144:	e7ef      	b.n	801e126 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2da>
 801e146:	2800      	cmp	r0, #0
 801e148:	f100 33ff 	add.w	r3, r0, #4294967295
 801e14c:	bfac      	ite	ge
 801e14e:	1a18      	subge	r0, r3, r0
 801e150:	4618      	movlt	r0, r3
 801e152:	0064      	lsls	r4, r4, #1
 801e154:	900e      	str	r0, [sp, #56]	; 0x38
 801e156:	230a      	movs	r3, #10
 801e158:	b292      	uxth	r2, r2
 801e15a:	eb08 0104 	add.w	r1, r8, r4
 801e15e:	4628      	mov	r0, r5
 801e160:	f7ff fb2e 	bl	801d7c0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e164:	2d01      	cmp	r5, #1
 801e166:	dc0a      	bgt.n	801e17e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801e168:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	bf0c      	ite	eq
 801e170:	2300      	moveq	r3, #0
 801e172:	232e      	movne	r3, #46	; 0x2e
 801e174:	aa42      	add	r2, sp, #264	; 0x108
 801e176:	4414      	add	r4, r2
 801e178:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801e17c:	e753      	b.n	801e026 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801e17e:	232e      	movs	r3, #46	; 0x2e
 801e180:	e7f8      	b.n	801e174 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x328>
 801e182:	ab42      	add	r3, sp, #264	; 0x108
 801e184:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801e188:	2300      	movs	r3, #0
 801e18a:	e7f5      	b.n	801e178 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 801e18c:	9a08      	ldr	r2, [sp, #32]
 801e18e:	2a00      	cmp	r2, #0
 801e190:	f43f af50 	beq.w	801e034 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801e194:	7812      	ldrb	r2, [r2, #0]
 801e196:	e74d      	b.n	801e034 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801e198:	2c00      	cmp	r4, #0
 801e19a:	f43f af01 	beq.w	801dfa0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801e19e:	7824      	ldrb	r4, [r4, #0]
 801e1a0:	e6fe      	b.n	801dfa0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801e1a2:	bf00      	nop
 801e1a4:	006e0069 	.word	0x006e0069
 801e1a8:	3f000002 	.word	0x3f000002
 801e1ac:	0061006e 	.word	0x0061006e

0801e1b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801e1b0:	b507      	push	{r0, r1, r2, lr}
 801e1b2:	9300      	str	r3, [sp, #0]
 801e1b4:	4613      	mov	r3, r2
 801e1b6:	2200      	movs	r2, #0
 801e1b8:	f7ff fe48 	bl	801de4c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801e1bc:	b003      	add	sp, #12
 801e1be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801e1c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e1c4:	4b01      	ldr	r3, [pc, #4]	; (801e1cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e1c6:	6018      	str	r0, [r3, #0]
 801e1c8:	4770      	bx	lr
 801e1ca:	bf00      	nop
 801e1cc:	20006760 	.word	0x20006760

0801e1d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e1d0:	4b06      	ldr	r3, [pc, #24]	; (801e1ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e1d2:	881a      	ldrh	r2, [r3, #0]
 801e1d4:	4282      	cmp	r2, r0
 801e1d6:	d807      	bhi.n	801e1e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e1d8:	4b05      	ldr	r3, [pc, #20]	; (801e1f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e1da:	881b      	ldrh	r3, [r3, #0]
 801e1dc:	4413      	add	r3, r2
 801e1de:	4298      	cmp	r0, r3
 801e1e0:	bfac      	ite	ge
 801e1e2:	2000      	movge	r0, #0
 801e1e4:	2001      	movlt	r0, #1
 801e1e6:	4770      	bx	lr
 801e1e8:	2000      	movs	r0, #0
 801e1ea:	4770      	bx	lr
 801e1ec:	20006780 	.word	0x20006780
 801e1f0:	20006784 	.word	0x20006784

0801e1f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e1f4:	b508      	push	{r3, lr}
 801e1f6:	4601      	mov	r1, r0
 801e1f8:	f7ff ffea 	bl	801e1d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e1fc:	b118      	cbz	r0, 801e206 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e1fe:	4b02      	ldr	r3, [pc, #8]	; (801e208 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e206:	bd08      	pop	{r3, pc}
 801e208:	20006764 	.word	0x20006764

0801e20c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e210:	4d28      	ldr	r5, [pc, #160]	; (801e2b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e212:	682b      	ldr	r3, [r5, #0]
 801e214:	2b00      	cmp	r3, #0
 801e216:	d04a      	beq.n	801e2ae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e218:	4a27      	ldr	r2, [pc, #156]	; (801e2b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e21a:	4e28      	ldr	r6, [pc, #160]	; (801e2bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e21c:	8810      	ldrh	r0, [r2, #0]
 801e21e:	f8b6 8000 	ldrh.w	r8, [r6]
 801e222:	4c27      	ldr	r4, [pc, #156]	; (801e2c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e224:	4f27      	ldr	r7, [pc, #156]	; (801e2c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e226:	4440      	add	r0, r8
 801e228:	1c41      	adds	r1, r0, #1
 801e22a:	f021 0101 	bic.w	r1, r1, #1
 801e22e:	0409      	lsls	r1, r1, #16
 801e230:	0c09      	lsrs	r1, r1, #16
 801e232:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801e236:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801e23a:	eb03 020e 	add.w	r2, r3, lr
 801e23e:	eb0e 010c 	add.w	r1, lr, ip
 801e242:	6022      	str	r2, [r4, #0]
 801e244:	185a      	adds	r2, r3, r1
 801e246:	603a      	str	r2, [r7, #0]
 801e248:	220e      	movs	r2, #14
 801e24a:	fb02 f208 	mul.w	r2, r2, r8
 801e24e:	3203      	adds	r2, #3
 801e250:	f022 0203 	bic.w	r2, r2, #3
 801e254:	4411      	add	r1, r2
 801e256:	440b      	add	r3, r1
 801e258:	491b      	ldr	r1, [pc, #108]	; (801e2c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e25a:	600b      	str	r3, [r1, #0]
 801e25c:	491b      	ldr	r1, [pc, #108]	; (801e2cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e25e:	2300      	movs	r3, #0
 801e260:	800b      	strh	r3, [r1, #0]
 801e262:	491b      	ldr	r1, [pc, #108]	; (801e2d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e264:	6809      	ldr	r1, [r1, #0]
 801e266:	eba1 010e 	sub.w	r1, r1, lr
 801e26a:	eba1 010c 	sub.w	r1, r1, ip
 801e26e:	1a8a      	subs	r2, r1, r2
 801e270:	4918      	ldr	r1, [pc, #96]	; (801e2d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801e272:	600a      	str	r2, [r1, #0]
 801e274:	4a18      	ldr	r2, [pc, #96]	; (801e2d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801e276:	469c      	mov	ip, r3
 801e278:	8013      	strh	r3, [r2, #0]
 801e27a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e27e:	4283      	cmp	r3, r0
 801e280:	d10d      	bne.n	801e29e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801e282:	8835      	ldrh	r5, [r6, #0]
 801e284:	6838      	ldr	r0, [r7, #0]
 801e286:	2300      	movs	r3, #0
 801e288:	240e      	movs	r4, #14
 801e28a:	429d      	cmp	r5, r3
 801e28c:	d90f      	bls.n	801e2ae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e28e:	fb04 0203 	mla	r2, r4, r3, r0
 801e292:	3301      	adds	r3, #1
 801e294:	7b11      	ldrb	r1, [r2, #12]
 801e296:	f36f 1145 	bfc	r1, #5, #1
 801e29a:	7311      	strb	r1, [r2, #12]
 801e29c:	e7f5      	b.n	801e28a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801e29e:	682a      	ldr	r2, [r5, #0]
 801e2a0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e2a4:	6822      	ldr	r2, [r4, #0]
 801e2a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e2aa:	3301      	adds	r3, #1
 801e2ac:	e7e7      	b.n	801e27e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2b2:	bf00      	nop
 801e2b4:	20006764 	.word	0x20006764
 801e2b8:	20006780 	.word	0x20006780
 801e2bc:	20006784 	.word	0x20006784
 801e2c0:	20006778 	.word	0x20006778
 801e2c4:	20006768 	.word	0x20006768
 801e2c8:	20006770 	.word	0x20006770
 801e2cc:	20006782 	.word	0x20006782
 801e2d0:	2000676c 	.word	0x2000676c
 801e2d4:	2000677c 	.word	0x2000677c
 801e2d8:	20006774 	.word	0x20006774

0801e2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e2dc:	b510      	push	{r4, lr}
 801e2de:	4b10      	ldr	r3, [pc, #64]	; (801e320 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	b9db      	cbnz	r3, 801e31c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e2e4:	b1d1      	cbz	r1, 801e31c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e2e6:	4b0f      	ldr	r3, [pc, #60]	; (801e324 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e2e8:	801a      	strh	r2, [r3, #0]
 801e2ea:	4b0f      	ldr	r3, [pc, #60]	; (801e328 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e2ec:	881b      	ldrh	r3, [r3, #0]
 801e2ee:	b292      	uxth	r2, r2
 801e2f0:	240e      	movs	r4, #14
 801e2f2:	4413      	add	r3, r2
 801e2f4:	4362      	muls	r2, r4
 801e2f6:	2406      	movs	r4, #6
 801e2f8:	fb04 2203 	mla	r2, r4, r3, r2
 801e2fc:	428a      	cmp	r2, r1
 801e2fe:	d305      	bcc.n	801e30c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e300:	4b0a      	ldr	r3, [pc, #40]	; (801e32c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e302:	4a0b      	ldr	r2, [pc, #44]	; (801e330 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e304:	480b      	ldr	r0, [pc, #44]	; (801e334 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e306:	2135      	movs	r1, #53	; 0x35
 801e308:	f00e f9a8 	bl	802c65c <__assert_func>
 801e30c:	4b0a      	ldr	r3, [pc, #40]	; (801e338 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e30e:	6019      	str	r1, [r3, #0]
 801e310:	4b0a      	ldr	r3, [pc, #40]	; (801e33c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e312:	6018      	str	r0, [r3, #0]
 801e314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e318:	f7ff bf78 	b.w	801e20c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e31c:	bd10      	pop	{r4, pc}
 801e31e:	bf00      	nop
 801e320:	20006770 	.word	0x20006770
 801e324:	20006784 	.word	0x20006784
 801e328:	20006780 	.word	0x20006780
 801e32c:	08031135 	.word	0x08031135
 801e330:	080311ca 	.word	0x080311ca
 801e334:	08031110 	.word	0x08031110
 801e338:	2000676c 	.word	0x2000676c
 801e33c:	20006764 	.word	0x20006764

0801e340 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e340:	b470      	push	{r4, r5, r6}
 801e342:	4c07      	ldr	r4, [pc, #28]	; (801e360 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e344:	6826      	ldr	r6, [r4, #0]
 801e346:	4605      	mov	r5, r0
 801e348:	4610      	mov	r0, r2
 801e34a:	9a03      	ldr	r2, [sp, #12]
 801e34c:	b936      	cbnz	r6, 801e35c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e34e:	6025      	str	r5, [r4, #0]
 801e350:	4c04      	ldr	r4, [pc, #16]	; (801e364 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e352:	8021      	strh	r1, [r4, #0]
 801e354:	bc70      	pop	{r4, r5, r6}
 801e356:	4619      	mov	r1, r3
 801e358:	f7ff bfc0 	b.w	801e2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e35c:	bc70      	pop	{r4, r5, r6}
 801e35e:	4770      	bx	lr
 801e360:	20006788 	.word	0x20006788
 801e364:	20006780 	.word	0x20006780

0801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e368:	b508      	push	{r3, lr}
 801e36a:	4b14      	ldr	r3, [pc, #80]	; (801e3bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e36c:	6819      	ldr	r1, [r3, #0]
 801e36e:	b931      	cbnz	r1, 801e37e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e370:	4b13      	ldr	r3, [pc, #76]	; (801e3c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e372:	4a14      	ldr	r2, [pc, #80]	; (801e3c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e374:	4814      	ldr	r0, [pc, #80]	; (801e3c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e376:	f240 4186 	movw	r1, #1158	; 0x486
 801e37a:	f00e f96f 	bl	802c65c <__assert_func>
 801e37e:	4a13      	ldr	r2, [pc, #76]	; (801e3cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e380:	8803      	ldrh	r3, [r0, #0]
 801e382:	8812      	ldrh	r2, [r2, #0]
 801e384:	4293      	cmp	r3, r2
 801e386:	d204      	bcs.n	801e392 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e388:	2214      	movs	r2, #20
 801e38a:	fb02 1303 	mla	r3, r2, r3, r1
 801e38e:	8918      	ldrh	r0, [r3, #8]
 801e390:	bd08      	pop	{r3, pc}
 801e392:	490f      	ldr	r1, [pc, #60]	; (801e3d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e394:	8809      	ldrh	r1, [r1, #0]
 801e396:	4411      	add	r1, r2
 801e398:	428b      	cmp	r3, r1
 801e39a:	da06      	bge.n	801e3aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e39c:	1a9b      	subs	r3, r3, r2
 801e39e:	4a0d      	ldr	r2, [pc, #52]	; (801e3d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e3a0:	6812      	ldr	r2, [r2, #0]
 801e3a2:	210e      	movs	r1, #14
 801e3a4:	fb01 2303 	mla	r3, r1, r3, r2
 801e3a8:	e7f1      	b.n	801e38e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e3aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e3ae:	4293      	cmp	r3, r2
 801e3b0:	bf0a      	itet	eq
 801e3b2:	4b09      	ldreq	r3, [pc, #36]	; (801e3d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e3b4:	2000      	movne	r0, #0
 801e3b6:	8818      	ldrheq	r0, [r3, #0]
 801e3b8:	e7ea      	b.n	801e390 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e3ba:	bf00      	nop
 801e3bc:	20006788 	.word	0x20006788
 801e3c0:	0803118e 	.word	0x0803118e
 801e3c4:	08031277 	.word	0x08031277
 801e3c8:	08031110 	.word	0x08031110
 801e3cc:	20006780 	.word	0x20006780
 801e3d0:	20006784 	.word	0x20006784
 801e3d4:	20006768 	.word	0x20006768
 801e3d8:	200066f4 	.word	0x200066f4

0801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e3dc:	b508      	push	{r3, lr}
 801e3de:	4b14      	ldr	r3, [pc, #80]	; (801e430 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e3e0:	6819      	ldr	r1, [r3, #0]
 801e3e2:	b931      	cbnz	r1, 801e3f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e3e4:	4b13      	ldr	r3, [pc, #76]	; (801e434 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e3e6:	4a14      	ldr	r2, [pc, #80]	; (801e438 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e3e8:	4814      	ldr	r0, [pc, #80]	; (801e43c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e3ea:	f240 419a 	movw	r1, #1178	; 0x49a
 801e3ee:	f00e f935 	bl	802c65c <__assert_func>
 801e3f2:	4a13      	ldr	r2, [pc, #76]	; (801e440 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e3f4:	8803      	ldrh	r3, [r0, #0]
 801e3f6:	8812      	ldrh	r2, [r2, #0]
 801e3f8:	4293      	cmp	r3, r2
 801e3fa:	d204      	bcs.n	801e406 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e3fc:	2214      	movs	r2, #20
 801e3fe:	fb02 1303 	mla	r3, r2, r3, r1
 801e402:	8958      	ldrh	r0, [r3, #10]
 801e404:	bd08      	pop	{r3, pc}
 801e406:	490f      	ldr	r1, [pc, #60]	; (801e444 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e408:	8809      	ldrh	r1, [r1, #0]
 801e40a:	4411      	add	r1, r2
 801e40c:	428b      	cmp	r3, r1
 801e40e:	da06      	bge.n	801e41e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e410:	1a9b      	subs	r3, r3, r2
 801e412:	4a0d      	ldr	r2, [pc, #52]	; (801e448 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e414:	6812      	ldr	r2, [r2, #0]
 801e416:	210e      	movs	r1, #14
 801e418:	fb01 2303 	mla	r3, r1, r3, r2
 801e41c:	e7f1      	b.n	801e402 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e41e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e422:	4293      	cmp	r3, r2
 801e424:	bf0a      	itet	eq
 801e426:	4b09      	ldreq	r3, [pc, #36]	; (801e44c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e428:	2000      	movne	r0, #0
 801e42a:	8818      	ldrheq	r0, [r3, #0]
 801e42c:	e7ea      	b.n	801e404 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e42e:	bf00      	nop
 801e430:	20006788 	.word	0x20006788
 801e434:	0803118e 	.word	0x0803118e
 801e438:	080312a3 	.word	0x080312a3
 801e43c:	08031110 	.word	0x08031110
 801e440:	20006780 	.word	0x20006780
 801e444:	20006784 	.word	0x20006784
 801e448:	20006768 	.word	0x20006768
 801e44c:	200066f6 	.word	0x200066f6

0801e450 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e450:	b510      	push	{r4, lr}
 801e452:	4b23      	ldr	r3, [pc, #140]	; (801e4e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e454:	681c      	ldr	r4, [r3, #0]
 801e456:	b934      	cbnz	r4, 801e466 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e458:	4b22      	ldr	r3, [pc, #136]	; (801e4e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e45a:	4a23      	ldr	r2, [pc, #140]	; (801e4e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e45c:	4823      	ldr	r0, [pc, #140]	; (801e4ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e45e:	f240 41ae 	movw	r1, #1198	; 0x4ae
 801e462:	f00e f8fb 	bl	802c65c <__assert_func>
 801e466:	4a22      	ldr	r2, [pc, #136]	; (801e4f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e468:	880b      	ldrh	r3, [r1, #0]
 801e46a:	8812      	ldrh	r2, [r2, #0]
 801e46c:	4293      	cmp	r3, r2
 801e46e:	d211      	bcs.n	801e494 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e470:	2214      	movs	r2, #20
 801e472:	fb02 4303 	mla	r3, r2, r3, r4
 801e476:	8a1a      	ldrh	r2, [r3, #16]
 801e478:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e47c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e480:	8a5b      	ldrh	r3, [r3, #18]
 801e482:	8004      	strh	r4, [r0, #0]
 801e484:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e48c:	8041      	strh	r1, [r0, #2]
 801e48e:	8082      	strh	r2, [r0, #4]
 801e490:	80c3      	strh	r3, [r0, #6]
 801e492:	e00e      	b.n	801e4b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e494:	4917      	ldr	r1, [pc, #92]	; (801e4f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e496:	8809      	ldrh	r1, [r1, #0]
 801e498:	4411      	add	r1, r2
 801e49a:	428b      	cmp	r3, r1
 801e49c:	da0a      	bge.n	801e4b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e49e:	1a9b      	subs	r3, r3, r2
 801e4a0:	4a15      	ldr	r2, [pc, #84]	; (801e4f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e4a2:	6812      	ldr	r2, [r2, #0]
 801e4a4:	210e      	movs	r1, #14
 801e4a6:	fb01 2303 	mla	r3, r1, r3, r2
 801e4aa:	681a      	ldr	r2, [r3, #0]
 801e4ac:	6002      	str	r2, [r0, #0]
 801e4ae:	685a      	ldr	r2, [r3, #4]
 801e4b0:	6042      	str	r2, [r0, #4]
 801e4b2:	bd10      	pop	{r4, pc}
 801e4b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e4b8:	4293      	cmp	r3, r2
 801e4ba:	d10b      	bne.n	801e4d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e4bc:	4b0f      	ldr	r3, [pc, #60]	; (801e4fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e4be:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e4c2:	4b0f      	ldr	r3, [pc, #60]	; (801e500 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e4c4:	8081      	strh	r1, [r0, #4]
 801e4c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e4ca:	80c2      	strh	r2, [r0, #6]
 801e4cc:	2300      	movs	r3, #0
 801e4ce:	8003      	strh	r3, [r0, #0]
 801e4d0:	8043      	strh	r3, [r0, #2]
 801e4d2:	e7ee      	b.n	801e4b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e4d4:	2300      	movs	r3, #0
 801e4d6:	8003      	strh	r3, [r0, #0]
 801e4d8:	8043      	strh	r3, [r0, #2]
 801e4da:	8083      	strh	r3, [r0, #4]
 801e4dc:	e7d8      	b.n	801e490 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e4de:	bf00      	nop
 801e4e0:	20006788 	.word	0x20006788
 801e4e4:	0803118e 	.word	0x0803118e
 801e4e8:	08031210 	.word	0x08031210
 801e4ec:	08031110 	.word	0x08031110
 801e4f0:	20006780 	.word	0x20006780
 801e4f4:	20006784 	.word	0x20006784
 801e4f8:	20006768 	.word	0x20006768
 801e4fc:	200066f4 	.word	0x200066f4
 801e500:	200066f6 	.word	0x200066f6

0801e504 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e504:	4b18      	ldr	r3, [pc, #96]	; (801e568 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	b34b      	cbz	r3, 801e55e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e50a:	4a18      	ldr	r2, [pc, #96]	; (801e56c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e50c:	8800      	ldrh	r0, [r0, #0]
 801e50e:	8812      	ldrh	r2, [r2, #0]
 801e510:	4290      	cmp	r0, r2
 801e512:	d211      	bcs.n	801e538 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e514:	2214      	movs	r2, #20
 801e516:	fb02 3300 	mla	r3, r2, r0, r3
 801e51a:	8a1a      	ldrh	r2, [r3, #16]
 801e51c:	8919      	ldrh	r1, [r3, #8]
 801e51e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e522:	428a      	cmp	r2, r1
 801e524:	db1d      	blt.n	801e562 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e526:	8a58      	ldrh	r0, [r3, #18]
 801e528:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e52c:	895b      	ldrh	r3, [r3, #10]
 801e52e:	4298      	cmp	r0, r3
 801e530:	bfac      	ite	ge
 801e532:	2000      	movge	r0, #0
 801e534:	2001      	movlt	r0, #1
 801e536:	4770      	bx	lr
 801e538:	4b0d      	ldr	r3, [pc, #52]	; (801e570 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e53a:	881b      	ldrh	r3, [r3, #0]
 801e53c:	4413      	add	r3, r2
 801e53e:	4298      	cmp	r0, r3
 801e540:	da0d      	bge.n	801e55e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e542:	4b0c      	ldr	r3, [pc, #48]	; (801e574 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	1a80      	subs	r0, r0, r2
 801e548:	220e      	movs	r2, #14
 801e54a:	fb02 3300 	mla	r3, r2, r0, r3
 801e54e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e552:	891a      	ldrh	r2, [r3, #8]
 801e554:	4291      	cmp	r1, r2
 801e556:	db04      	blt.n	801e562 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e558:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e55c:	e7e6      	b.n	801e52c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801e55e:	2000      	movs	r0, #0
 801e560:	4770      	bx	lr
 801e562:	2001      	movs	r0, #1
 801e564:	4770      	bx	lr
 801e566:	bf00      	nop
 801e568:	20006788 	.word	0x20006788
 801e56c:	20006780 	.word	0x20006780
 801e570:	20006784 	.word	0x20006784
 801e574:	20006768 	.word	0x20006768

0801e578 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e578:	b508      	push	{r3, lr}
 801e57a:	4b12      	ldr	r3, [pc, #72]	; (801e5c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e57c:	6819      	ldr	r1, [r3, #0]
 801e57e:	b931      	cbnz	r1, 801e58e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e580:	4b11      	ldr	r3, [pc, #68]	; (801e5c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e582:	4a12      	ldr	r2, [pc, #72]	; (801e5cc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e584:	4812      	ldr	r0, [pc, #72]	; (801e5d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e586:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801e58a:	f00e f867 	bl	802c65c <__assert_func>
 801e58e:	8803      	ldrh	r3, [r0, #0]
 801e590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e594:	4293      	cmp	r3, r2
 801e596:	d012      	beq.n	801e5be <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e598:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e59c:	4293      	cmp	r3, r2
 801e59e:	d103      	bne.n	801e5a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801e5a0:	4b0c      	ldr	r3, [pc, #48]	; (801e5d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e5a6:	bd08      	pop	{r3, pc}
 801e5a8:	4a0b      	ldr	r2, [pc, #44]	; (801e5d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801e5aa:	6812      	ldr	r2, [r2, #0]
 801e5ac:	b11a      	cbz	r2, 801e5b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801e5ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e5b2:	2800      	cmp	r0, #0
 801e5b4:	d1f7      	bne.n	801e5a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e5b6:	2214      	movs	r2, #20
 801e5b8:	4353      	muls	r3, r2
 801e5ba:	58c8      	ldr	r0, [r1, r3]
 801e5bc:	e7f3      	b.n	801e5a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e5be:	2000      	movs	r0, #0
 801e5c0:	e7f1      	b.n	801e5a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e5c2:	bf00      	nop
 801e5c4:	20006788 	.word	0x20006788
 801e5c8:	0803118e 	.word	0x0803118e
 801e5cc:	08031246 	.word	0x08031246
 801e5d0:	08031110 	.word	0x08031110
 801e5d4:	20006700 	.word	0x20006700
 801e5d8:	20006764 	.word	0x20006764

0801e5dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e5dc:	8802      	ldrh	r2, [r0, #0]
 801e5de:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e5e2:	429a      	cmp	r2, r3
 801e5e4:	d845      	bhi.n	801e672 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e5e6:	4b24      	ldr	r3, [pc, #144]	; (801e678 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e5e8:	8818      	ldrh	r0, [r3, #0]
 801e5ea:	4282      	cmp	r2, r0
 801e5ec:	d221      	bcs.n	801e632 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801e5ee:	4b23      	ldr	r3, [pc, #140]	; (801e67c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e5f0:	6819      	ldr	r1, [r3, #0]
 801e5f2:	2314      	movs	r3, #20
 801e5f4:	fb03 1302 	mla	r3, r3, r2, r1
 801e5f8:	6858      	ldr	r0, [r3, #4]
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	d03a      	beq.n	801e674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e5fe:	4920      	ldr	r1, [pc, #128]	; (801e680 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e600:	6809      	ldr	r1, [r1, #0]
 801e602:	2900      	cmp	r1, #0
 801e604:	d036      	beq.n	801e674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e606:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e60a:	2900      	cmp	r1, #0
 801e60c:	d032      	beq.n	801e674 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e60e:	891a      	ldrh	r2, [r3, #8]
 801e610:	8958      	ldrh	r0, [r3, #10]
 801e612:	4350      	muls	r0, r2
 801e614:	7c5a      	ldrb	r2, [r3, #17]
 801e616:	7cdb      	ldrb	r3, [r3, #19]
 801e618:	0952      	lsrs	r2, r2, #5
 801e61a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e61e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e622:	2b0b      	cmp	r3, #11
 801e624:	bf18      	it	ne
 801e626:	0040      	lslne	r0, r0, #1
 801e628:	3003      	adds	r0, #3
 801e62a:	f020 0003 	bic.w	r0, r0, #3
 801e62e:	4408      	add	r0, r1
 801e630:	4770      	bx	lr
 801e632:	4b14      	ldr	r3, [pc, #80]	; (801e684 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801e634:	881b      	ldrh	r3, [r3, #0]
 801e636:	4403      	add	r3, r0
 801e638:	429a      	cmp	r2, r3
 801e63a:	da1a      	bge.n	801e672 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e63c:	4b12      	ldr	r3, [pc, #72]	; (801e688 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	1a10      	subs	r0, r2, r0
 801e642:	210e      	movs	r1, #14
 801e644:	fb01 3000 	mla	r0, r1, r0, r3
 801e648:	7b03      	ldrb	r3, [r0, #12]
 801e64a:	f003 031f 	and.w	r3, r3, #31
 801e64e:	2b0b      	cmp	r3, #11
 801e650:	d10b      	bne.n	801e66a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e652:	8903      	ldrh	r3, [r0, #8]
 801e654:	8940      	ldrh	r0, [r0, #10]
 801e656:	4358      	muls	r0, r3
 801e658:	4b09      	ldr	r3, [pc, #36]	; (801e680 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e65a:	6819      	ldr	r1, [r3, #0]
 801e65c:	3003      	adds	r0, #3
 801e65e:	f020 0303 	bic.w	r3, r0, #3
 801e662:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e666:	4418      	add	r0, r3
 801e668:	4770      	bx	lr
 801e66a:	2b0d      	cmp	r3, #13
 801e66c:	d101      	bne.n	801e672 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e66e:	300d      	adds	r0, #13
 801e670:	4770      	bx	lr
 801e672:	2000      	movs	r0, #0
 801e674:	4770      	bx	lr
 801e676:	bf00      	nop
 801e678:	20006780 	.word	0x20006780
 801e67c:	20006788 	.word	0x20006788
 801e680:	20006764 	.word	0x20006764
 801e684:	20006784 	.word	0x20006784
 801e688:	20006768 	.word	0x20006768

0801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e68c:	b510      	push	{r4, lr}
 801e68e:	4b17      	ldr	r3, [pc, #92]	; (801e6ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e690:	6819      	ldr	r1, [r3, #0]
 801e692:	8803      	ldrh	r3, [r0, #0]
 801e694:	b1e9      	cbz	r1, 801e6d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e696:	4a16      	ldr	r2, [pc, #88]	; (801e6f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e698:	8812      	ldrh	r2, [r2, #0]
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d90a      	bls.n	801e6b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801e69e:	2214      	movs	r2, #20
 801e6a0:	fb02 1303 	mla	r3, r2, r3, r1
 801e6a4:	7c58      	ldrb	r0, [r3, #17]
 801e6a6:	0942      	lsrs	r2, r0, #5
 801e6a8:	7cd8      	ldrb	r0, [r3, #19]
 801e6aa:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e6ae:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e6b2:	bd10      	pop	{r4, pc}
 801e6b4:	490f      	ldr	r1, [pc, #60]	; (801e6f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e6b6:	8809      	ldrh	r1, [r1, #0]
 801e6b8:	4411      	add	r1, r2
 801e6ba:	428b      	cmp	r3, r1
 801e6bc:	da09      	bge.n	801e6d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e6be:	1a9b      	subs	r3, r3, r2
 801e6c0:	4a0d      	ldr	r2, [pc, #52]	; (801e6f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e6c2:	6812      	ldr	r2, [r2, #0]
 801e6c4:	210e      	movs	r1, #14
 801e6c6:	fb01 2303 	mla	r3, r1, r3, r2
 801e6ca:	7b18      	ldrb	r0, [r3, #12]
 801e6cc:	f000 001f 	and.w	r0, r0, #31
 801e6d0:	e7ef      	b.n	801e6b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e6d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e6d6:	4293      	cmp	r3, r2
 801e6d8:	d106      	bne.n	801e6e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801e6da:	f7f0 fc39 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 801e6de:	6803      	ldr	r3, [r0, #0]
 801e6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6e6:	4718      	bx	r3
 801e6e8:	2000      	movs	r0, #0
 801e6ea:	e7e2      	b.n	801e6b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e6ec:	20006788 	.word	0x20006788
 801e6f0:	20006780 	.word	0x20006780
 801e6f4:	20006784 	.word	0x20006784
 801e6f8:	20006768 	.word	0x20006768

0801e6fc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e6fc:	2010      	movs	r0, #16
 801e6fe:	4770      	bx	lr

0801e700 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e700:	2000      	movs	r0, #0
 801e702:	4770      	bx	lr

0801e704 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e704:	2bff      	cmp	r3, #255	; 0xff
 801e706:	d050      	beq.n	801e7aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e708:	2a0b      	cmp	r2, #11
 801e70a:	d04a      	beq.n	801e7a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e70c:	d80e      	bhi.n	801e72c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e70e:	2a03      	cmp	r2, #3
 801e710:	d03f      	beq.n	801e792 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e712:	d804      	bhi.n	801e71e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e714:	2a01      	cmp	r2, #1
 801e716:	d03e      	beq.n	801e796 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e718:	d93f      	bls.n	801e79a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e71a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e71c:	4770      	bx	lr
 801e71e:	2a09      	cmp	r2, #9
 801e720:	d03f      	beq.n	801e7a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e722:	d83c      	bhi.n	801e79e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e724:	2a08      	cmp	r2, #8
 801e726:	d03a      	beq.n	801e79e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e728:	2000      	movs	r0, #0
 801e72a:	4770      	bx	lr
 801e72c:	2a2f      	cmp	r2, #47	; 0x2f
 801e72e:	d024      	beq.n	801e77a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e730:	d80d      	bhi.n	801e74e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e732:	2a2d      	cmp	r2, #45	; 0x2d
 801e734:	d014      	beq.n	801e760 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e736:	d826      	bhi.n	801e786 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e738:	2a2c      	cmp	r2, #44	; 0x2c
 801e73a:	d1f5      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e73c:	684b      	ldr	r3, [r1, #4]
 801e73e:	781b      	ldrb	r3, [r3, #0]
 801e740:	2b01      	cmp	r3, #1
 801e742:	d018      	beq.n	801e776 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e744:	d323      	bcc.n	801e78e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e746:	2b02      	cmp	r3, #2
 801e748:	d1ee      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e74a:	6880      	ldr	r0, [r0, #8]
 801e74c:	4770      	bx	lr
 801e74e:	2a31      	cmp	r2, #49	; 0x31
 801e750:	d004      	beq.n	801e75c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e752:	d328      	bcc.n	801e7a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e754:	2a32      	cmp	r2, #50	; 0x32
 801e756:	d026      	beq.n	801e7a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e758:	2a33      	cmp	r2, #51	; 0x33
 801e75a:	d1e5      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e75c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e75e:	4770      	bx	lr
 801e760:	684b      	ldr	r3, [r1, #4]
 801e762:	781b      	ldrb	r3, [r3, #0]
 801e764:	2b01      	cmp	r3, #1
 801e766:	d004      	beq.n	801e772 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e768:	d30b      	bcc.n	801e782 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e76a:	2b02      	cmp	r3, #2
 801e76c:	d1dc      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e76e:	6900      	ldr	r0, [r0, #16]
 801e770:	4770      	bx	lr
 801e772:	6a00      	ldr	r0, [r0, #32]
 801e774:	4770      	bx	lr
 801e776:	6980      	ldr	r0, [r0, #24]
 801e778:	4770      	bx	lr
 801e77a:	684b      	ldr	r3, [r1, #4]
 801e77c:	781b      	ldrb	r3, [r3, #0]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d1d2      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e782:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e784:	4770      	bx	lr
 801e786:	684b      	ldr	r3, [r1, #4]
 801e788:	781b      	ldrb	r3, [r3, #0]
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	d1cc      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e78e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e790:	4770      	bx	lr
 801e792:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e794:	4770      	bx	lr
 801e796:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e798:	4770      	bx	lr
 801e79a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e79c:	4770      	bx	lr
 801e79e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e7a0:	4770      	bx	lr
 801e7a2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e7a4:	4770      	bx	lr
 801e7a6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e7a8:	4770      	bx	lr
 801e7aa:	2a0b      	cmp	r2, #11
 801e7ac:	d049      	beq.n	801e842 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e7ae:	d80e      	bhi.n	801e7ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e7b0:	2a03      	cmp	r2, #3
 801e7b2:	d040      	beq.n	801e836 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e7b4:	d804      	bhi.n	801e7c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e7b6:	2a01      	cmp	r2, #1
 801e7b8:	d03f      	beq.n	801e83a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e7ba:	d940      	bls.n	801e83e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e7bc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e7be:	4770      	bx	lr
 801e7c0:	2a09      	cmp	r2, #9
 801e7c2:	d03e      	beq.n	801e842 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e7c4:	d801      	bhi.n	801e7ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e7c6:	2a08      	cmp	r2, #8
 801e7c8:	d1ae      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7ca:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e7cc:	4770      	bx	lr
 801e7ce:	2a2f      	cmp	r2, #47	; 0x2f
 801e7d0:	d024      	beq.n	801e81c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e7d2:	d80d      	bhi.n	801e7f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e7d4:	2a2d      	cmp	r2, #45	; 0x2d
 801e7d6:	d014      	beq.n	801e802 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e7d8:	d826      	bhi.n	801e828 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e7da:	2a2c      	cmp	r2, #44	; 0x2c
 801e7dc:	d1a4      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7de:	684b      	ldr	r3, [r1, #4]
 801e7e0:	781b      	ldrb	r3, [r3, #0]
 801e7e2:	2b01      	cmp	r3, #1
 801e7e4:	d018      	beq.n	801e818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e7e6:	d324      	bcc.n	801e832 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e7e8:	2b02      	cmp	r3, #2
 801e7ea:	d19d      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7ec:	68c0      	ldr	r0, [r0, #12]
 801e7ee:	4770      	bx	lr
 801e7f0:	2a31      	cmp	r2, #49	; 0x31
 801e7f2:	d004      	beq.n	801e7fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e7f4:	d327      	bcc.n	801e846 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e7f6:	2a32      	cmp	r2, #50	; 0x32
 801e7f8:	d025      	beq.n	801e846 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e7fa:	2a33      	cmp	r2, #51	; 0x33
 801e7fc:	d194      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7fe:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e800:	4770      	bx	lr
 801e802:	684b      	ldr	r3, [r1, #4]
 801e804:	781b      	ldrb	r3, [r3, #0]
 801e806:	2b01      	cmp	r3, #1
 801e808:	d004      	beq.n	801e814 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e80a:	d30b      	bcc.n	801e824 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e80c:	2b02      	cmp	r3, #2
 801e80e:	d18b      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e810:	6940      	ldr	r0, [r0, #20]
 801e812:	4770      	bx	lr
 801e814:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e816:	4770      	bx	lr
 801e818:	69c0      	ldr	r0, [r0, #28]
 801e81a:	4770      	bx	lr
 801e81c:	684b      	ldr	r3, [r1, #4]
 801e81e:	781b      	ldrb	r3, [r3, #0]
 801e820:	2b00      	cmp	r3, #0
 801e822:	d181      	bne.n	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e824:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e826:	4770      	bx	lr
 801e828:	684b      	ldr	r3, [r1, #4]
 801e82a:	781b      	ldrb	r3, [r3, #0]
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	f47f af7b 	bne.w	801e728 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e832:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e834:	4770      	bx	lr
 801e836:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e838:	4770      	bx	lr
 801e83a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e83c:	4770      	bx	lr
 801e83e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e840:	4770      	bx	lr
 801e842:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e844:	4770      	bx	lr
 801e846:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e848:	4770      	bx	lr

0801e84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e84a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e84e:	b087      	sub	sp, #28
 801e850:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e852:	9205      	str	r2, [sp, #20]
 801e854:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e858:	9202      	str	r2, [sp, #8]
 801e85a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e85e:	9101      	str	r1, [sp, #4]
 801e860:	6841      	ldr	r1, [r0, #4]
 801e862:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e866:	fb01 2404 	mla	r4, r1, r4, r2
 801e86a:	6802      	ldr	r2, [r0, #0]
 801e86c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e870:	f8de 2000 	ldr.w	r2, [lr]
 801e874:	9203      	str	r2, [sp, #12]
 801e876:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e87a:	3204      	adds	r2, #4
 801e87c:	9204      	str	r2, [sp, #16]
 801e87e:	9a02      	ldr	r2, [sp, #8]
 801e880:	43d6      	mvns	r6, r2
 801e882:	b2f6      	uxtb	r6, r6
 801e884:	9a01      	ldr	r2, [sp, #4]
 801e886:	2a00      	cmp	r2, #0
 801e888:	dc03      	bgt.n	801e892 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e88a:	9a05      	ldr	r2, [sp, #20]
 801e88c:	2a00      	cmp	r2, #0
 801e88e:	f340 8129 	ble.w	801eae4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e892:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e894:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e898:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e89c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e8a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e8a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	dd0e      	ble.n	801e8c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8aa:	1408      	asrs	r0, r1, #16
 801e8ac:	d405      	bmi.n	801e8ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e8ae:	4560      	cmp	r0, ip
 801e8b0:	da03      	bge.n	801e8ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e8b2:	1410      	asrs	r0, r2, #16
 801e8b4:	d401      	bmi.n	801e8ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e8b6:	42b8      	cmp	r0, r7
 801e8b8:	db07      	blt.n	801e8ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e8ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e8bc:	4401      	add	r1, r0
 801e8be:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e8c0:	3b01      	subs	r3, #1
 801e8c2:	4402      	add	r2, r0
 801e8c4:	3402      	adds	r4, #2
 801e8c6:	e7ee      	b.n	801e8a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e8c8:	d071      	beq.n	801e9ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e8ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e8cc:	1e58      	subs	r0, r3, #1
 801e8ce:	fb05 1500 	mla	r5, r5, r0, r1
 801e8d2:	142d      	asrs	r5, r5, #16
 801e8d4:	d45f      	bmi.n	801e996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e8d6:	4565      	cmp	r5, ip
 801e8d8:	da5d      	bge.n	801e996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e8da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e8dc:	fb05 2000 	mla	r0, r5, r0, r2
 801e8e0:	1400      	asrs	r0, r0, #16
 801e8e2:	d458      	bmi.n	801e996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e8e4:	42b8      	cmp	r0, r7
 801e8e6:	da56      	bge.n	801e996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e8e8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e8ec:	4699      	mov	r9, r3
 801e8ee:	46a2      	mov	sl, r4
 801e8f0:	f1b9 0f00 	cmp.w	r9, #0
 801e8f4:	dd57      	ble.n	801e9a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e8f6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e8fa:	9803      	ldr	r0, [sp, #12]
 801e8fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e900:	140d      	asrs	r5, r1, #16
 801e902:	fb07 000c 	mla	r0, r7, ip, r0
 801e906:	f109 39ff 	add.w	r9, r9, #4294967295
 801e90a:	5d40      	ldrb	r0, [r0, r5]
 801e90c:	9d04      	ldr	r5, [sp, #16]
 801e90e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e912:	f8ba 5000 	ldrh.w	r5, [sl]
 801e916:	122f      	asrs	r7, r5, #8
 801e918:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e91c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e920:	fb17 f706 	smulbb	r7, r7, r6
 801e924:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e928:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e92c:	00ed      	lsls	r5, r5, #3
 801e92e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e932:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e936:	10c7      	asrs	r7, r0, #3
 801e938:	b2ed      	uxtb	r5, r5
 801e93a:	00c0      	lsls	r0, r0, #3
 801e93c:	fb18 f806 	smulbb	r8, r8, r6
 801e940:	fb15 f506 	smulbb	r5, r5, r6
 801e944:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e948:	b2c0      	uxtb	r0, r0
 801e94a:	fa1f fc8c 	uxth.w	ip, ip
 801e94e:	fb07 870b 	mla	r7, r7, fp, r8
 801e952:	fb00 500b 	mla	r0, r0, fp, r5
 801e956:	b280      	uxth	r0, r0
 801e958:	b2bf      	uxth	r7, r7
 801e95a:	f10c 0501 	add.w	r5, ip, #1
 801e95e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e962:	f107 0801 	add.w	r8, r7, #1
 801e966:	1c45      	adds	r5, r0, #1
 801e968:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e96c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e970:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e972:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e976:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e97a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e97e:	ea45 0c0c 	orr.w	ip, r5, ip
 801e982:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e986:	4401      	add	r1, r0
 801e988:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e98a:	ea4c 0c08 	orr.w	ip, ip, r8
 801e98e:	f82a cb02 	strh.w	ip, [sl], #2
 801e992:	4402      	add	r2, r0
 801e994:	e7ac      	b.n	801e8f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e996:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e99a:	f04f 0800 	mov.w	r8, #0
 801e99e:	eb03 0008 	add.w	r0, r3, r8
 801e9a2:	2800      	cmp	r0, #0
 801e9a4:	dc41      	bgt.n	801ea2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e9a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e9aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e9ae:	9b01      	ldr	r3, [sp, #4]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	f340 8097 	ble.w	801eae4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e9b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e9be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e9c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e9d0:	eef0 6a62 	vmov.f32	s13, s5
 801e9d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9e0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e9e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9e8:	eef0 6a43 	vmov.f32	s13, s6
 801e9ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9f0:	ee12 2a90 	vmov	r2, s5
 801e9f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9fc:	ee13 2a10 	vmov	r2, s6
 801ea00:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea04:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea08:	9314      	str	r3, [sp, #80]	; 0x50
 801ea0a:	9b01      	ldr	r3, [sp, #4]
 801ea0c:	9a05      	ldr	r2, [sp, #20]
 801ea0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea12:	3b01      	subs	r3, #1
 801ea14:	9301      	str	r3, [sp, #4]
 801ea16:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ea1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea1c:	eeb0 3a67 	vmov.f32	s6, s15
 801ea20:	bf08      	it	eq
 801ea22:	4613      	moveq	r3, r2
 801ea24:	eef0 2a47 	vmov.f32	s5, s14
 801ea28:	e72c      	b.n	801e884 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ea2a:	140f      	asrs	r7, r1, #16
 801ea2c:	d453      	bmi.n	801ead6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ea2e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ea32:	42bd      	cmp	r5, r7
 801ea34:	dd4f      	ble.n	801ead6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ea36:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ea3a:	d44c      	bmi.n	801ead6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ea3c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ea40:	4560      	cmp	r0, ip
 801ea42:	dd48      	ble.n	801ead6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ea44:	9803      	ldr	r0, [sp, #12]
 801ea46:	b22d      	sxth	r5, r5
 801ea48:	fb0c 0505 	mla	r5, ip, r5, r0
 801ea4c:	5de8      	ldrb	r0, [r5, r7]
 801ea4e:	9d04      	ldr	r5, [sp, #16]
 801ea50:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ea54:	f06f 0501 	mvn.w	r5, #1
 801ea58:	fb05 fb08 	mul.w	fp, r5, r8
 801ea5c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ea60:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ea64:	122f      	asrs	r7, r5, #8
 801ea66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea6a:	fb17 f706 	smulbb	r7, r7, r6
 801ea6e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ea72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ea76:	00ed      	lsls	r5, r5, #3
 801ea78:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ea7c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ea80:	10c7      	asrs	r7, r0, #3
 801ea82:	b2ed      	uxtb	r5, r5
 801ea84:	00c0      	lsls	r0, r0, #3
 801ea86:	fb19 f906 	smulbb	r9, r9, r6
 801ea8a:	fb15 f506 	smulbb	r5, r5, r6
 801ea8e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ea92:	b2c0      	uxtb	r0, r0
 801ea94:	fa1f fc8c 	uxth.w	ip, ip
 801ea98:	fb07 970a 	mla	r7, r7, sl, r9
 801ea9c:	fb00 500a 	mla	r0, r0, sl, r5
 801eaa0:	b2bf      	uxth	r7, r7
 801eaa2:	b280      	uxth	r0, r0
 801eaa4:	f10c 0501 	add.w	r5, ip, #1
 801eaa8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eaac:	f107 0901 	add.w	r9, r7, #1
 801eab0:	1c45      	adds	r5, r0, #1
 801eab2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801eab6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801eaba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eabe:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801eac2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801eac6:	ea45 0c0c 	orr.w	ip, r5, ip
 801eaca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eace:	ea4c 0c09 	orr.w	ip, ip, r9
 801ead2:	f824 c00b 	strh.w	ip, [r4, fp]
 801ead6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ead8:	4401      	add	r1, r0
 801eada:	9814      	ldr	r0, [sp, #80]	; 0x50
 801eadc:	f108 38ff 	add.w	r8, r8, #4294967295
 801eae0:	4402      	add	r2, r0
 801eae2:	e75c      	b.n	801e99e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801eae4:	b007      	add	sp, #28
 801eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eaea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eaea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaee:	b085      	sub	sp, #20
 801eaf0:	4693      	mov	fp, r2
 801eaf2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801eaf4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801eaf6:	6870      	ldr	r0, [r6, #4]
 801eaf8:	9100      	str	r1, [sp, #0]
 801eafa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eafe:	fb00 2404 	mla	r4, r0, r4, r2
 801eb02:	6832      	ldr	r2, [r6, #0]
 801eb04:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb08:	682a      	ldr	r2, [r5, #0]
 801eb0a:	9201      	str	r2, [sp, #4]
 801eb0c:	686a      	ldr	r2, [r5, #4]
 801eb0e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801eb12:	3204      	adds	r2, #4
 801eb14:	9202      	str	r2, [sp, #8]
 801eb16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb1a:	9a00      	ldr	r2, [sp, #0]
 801eb1c:	2a00      	cmp	r2, #0
 801eb1e:	dc03      	bgt.n	801eb28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eb20:	f1bb 0f00 	cmp.w	fp, #0
 801eb24:	f340 80a0 	ble.w	801ec68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801eb28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb2a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801eb2e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801eb32:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eb36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb38:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	dd0c      	ble.n	801eb5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eb40:	1406      	asrs	r6, r0, #16
 801eb42:	d405      	bmi.n	801eb50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801eb44:	454e      	cmp	r6, r9
 801eb46:	da03      	bge.n	801eb50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801eb48:	1416      	asrs	r6, r2, #16
 801eb4a:	d401      	bmi.n	801eb50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801eb4c:	4546      	cmp	r6, r8
 801eb4e:	db05      	blt.n	801eb5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb50:	4470      	add	r0, lr
 801eb52:	4462      	add	r2, ip
 801eb54:	3b01      	subs	r3, #1
 801eb56:	3402      	adds	r4, #2
 801eb58:	e7f0      	b.n	801eb3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801eb5a:	d00f      	beq.n	801eb7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801eb5c:	1e5e      	subs	r6, r3, #1
 801eb5e:	fb0e 0706 	mla	r7, lr, r6, r0
 801eb62:	143f      	asrs	r7, r7, #16
 801eb64:	d541      	bpl.n	801ebea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801eb66:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801eb6a:	4698      	mov	r8, r3
 801eb6c:	9603      	str	r6, [sp, #12]
 801eb6e:	f1b8 0f00 	cmp.w	r8, #0
 801eb72:	dc59      	bgt.n	801ec28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801eb74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb78:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb7c:	9b00      	ldr	r3, [sp, #0]
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	dd72      	ble.n	801ec68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801eb82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb98:	eeb0 6a62 	vmov.f32	s12, s5
 801eb9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eba0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eba4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eba8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ebac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebb0:	eeb0 6a43 	vmov.f32	s12, s6
 801ebb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebb8:	ee12 2a90 	vmov	r2, s5
 801ebbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebc0:	fb92 fef3 	sdiv	lr, r2, r3
 801ebc4:	ee13 2a10 	vmov	r2, s6
 801ebc8:	fb92 fcf3 	sdiv	ip, r2, r3
 801ebcc:	9b00      	ldr	r3, [sp, #0]
 801ebce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebd2:	3b01      	subs	r3, #1
 801ebd4:	9300      	str	r3, [sp, #0]
 801ebd6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ebda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebdc:	eeb0 3a67 	vmov.f32	s6, s15
 801ebe0:	bf08      	it	eq
 801ebe2:	465b      	moveq	r3, fp
 801ebe4:	eef0 2a47 	vmov.f32	s5, s14
 801ebe8:	e797      	b.n	801eb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ebea:	454f      	cmp	r7, r9
 801ebec:	dabb      	bge.n	801eb66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ebee:	fb0c 2606 	mla	r6, ip, r6, r2
 801ebf2:	1436      	asrs	r6, r6, #16
 801ebf4:	d4b7      	bmi.n	801eb66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ebf6:	4546      	cmp	r6, r8
 801ebf8:	dab5      	bge.n	801eb66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ebfa:	461e      	mov	r6, r3
 801ebfc:	46a0      	mov	r8, r4
 801ebfe:	2e00      	cmp	r6, #0
 801ec00:	ddb8      	ble.n	801eb74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ec02:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ec06:	9901      	ldr	r1, [sp, #4]
 801ec08:	1417      	asrs	r7, r2, #16
 801ec0a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801ec0e:	fb0a 1707 	mla	r7, sl, r7, r1
 801ec12:	9902      	ldr	r1, [sp, #8]
 801ec14:	f817 7009 	ldrb.w	r7, [r7, r9]
 801ec18:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801ec1c:	f828 7b02 	strh.w	r7, [r8], #2
 801ec20:	4470      	add	r0, lr
 801ec22:	4462      	add	r2, ip
 801ec24:	3e01      	subs	r6, #1
 801ec26:	e7ea      	b.n	801ebfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ec28:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ec2c:	d417      	bmi.n	801ec5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ec2e:	68ae      	ldr	r6, [r5, #8]
 801ec30:	454e      	cmp	r6, r9
 801ec32:	dd14      	ble.n	801ec5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ec34:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ec38:	d411      	bmi.n	801ec5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ec3a:	68ef      	ldr	r7, [r5, #12]
 801ec3c:	4557      	cmp	r7, sl
 801ec3e:	dd0e      	ble.n	801ec5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ec40:	9f01      	ldr	r7, [sp, #4]
 801ec42:	b236      	sxth	r6, r6
 801ec44:	fb0a 7606 	mla	r6, sl, r6, r7
 801ec48:	9f02      	ldr	r7, [sp, #8]
 801ec4a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801ec4e:	f06f 0101 	mvn.w	r1, #1
 801ec52:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801ec56:	fb01 f608 	mul.w	r6, r1, r8
 801ec5a:	9903      	ldr	r1, [sp, #12]
 801ec5c:	538f      	strh	r7, [r1, r6]
 801ec5e:	4470      	add	r0, lr
 801ec60:	4462      	add	r2, ip
 801ec62:	f108 38ff 	add.w	r8, r8, #4294967295
 801ec66:	e782      	b.n	801eb6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ec68:	b005      	add	sp, #20
 801ec6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec72:	b087      	sub	sp, #28
 801ec74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec76:	9205      	str	r2, [sp, #20]
 801ec78:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ec7c:	9203      	str	r2, [sp, #12]
 801ec7e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ec82:	9102      	str	r1, [sp, #8]
 801ec84:	6861      	ldr	r1, [r4, #4]
 801ec86:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ec8a:	fb01 2000 	mla	r0, r1, r0, r2
 801ec8e:	6822      	ldr	r2, [r4, #0]
 801ec90:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ec94:	9200      	str	r2, [sp, #0]
 801ec96:	f8dc 2000 	ldr.w	r2, [ip]
 801ec9a:	9204      	str	r2, [sp, #16]
 801ec9c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801eca0:	3204      	adds	r2, #4
 801eca2:	9201      	str	r2, [sp, #4]
 801eca4:	9a03      	ldr	r2, [sp, #12]
 801eca6:	43d5      	mvns	r5, r2
 801eca8:	b2ed      	uxtb	r5, r5
 801ecaa:	9a02      	ldr	r2, [sp, #8]
 801ecac:	2a00      	cmp	r2, #0
 801ecae:	dc03      	bgt.n	801ecb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ecb0:	9a05      	ldr	r2, [sp, #20]
 801ecb2:	2a00      	cmp	r2, #0
 801ecb4:	f340 812c 	ble.w	801ef10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ecb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ecba:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ecbe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ecc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ecc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ecc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	dd10      	ble.n	801ecf2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ecd0:	140c      	asrs	r4, r1, #16
 801ecd2:	d405      	bmi.n	801ece0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecd4:	4574      	cmp	r4, lr
 801ecd6:	da03      	bge.n	801ece0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecd8:	1414      	asrs	r4, r2, #16
 801ecda:	d401      	bmi.n	801ece0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecdc:	42bc      	cmp	r4, r7
 801ecde:	db09      	blt.n	801ecf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ece0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ece2:	9800      	ldr	r0, [sp, #0]
 801ece4:	4421      	add	r1, r4
 801ece6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ece8:	3002      	adds	r0, #2
 801ecea:	4422      	add	r2, r4
 801ecec:	3b01      	subs	r3, #1
 801ecee:	9000      	str	r0, [sp, #0]
 801ecf0:	e7ec      	b.n	801eccc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ecf2:	d071      	beq.n	801edd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ecf4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ecf6:	1e5c      	subs	r4, r3, #1
 801ecf8:	fb06 1604 	mla	r6, r6, r4, r1
 801ecfc:	1436      	asrs	r6, r6, #16
 801ecfe:	d45d      	bmi.n	801edbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed00:	4576      	cmp	r6, lr
 801ed02:	da5b      	bge.n	801edbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed04:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ed06:	fb06 2404 	mla	r4, r6, r4, r2
 801ed0a:	1424      	asrs	r4, r4, #16
 801ed0c:	d456      	bmi.n	801edbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed0e:	42bc      	cmp	r4, r7
 801ed10:	da54      	bge.n	801edbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed12:	f8dd 9000 	ldr.w	r9, [sp]
 801ed16:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801ed1a:	4698      	mov	r8, r3
 801ed1c:	f1b8 0f00 	cmp.w	r8, #0
 801ed20:	dd54      	ble.n	801edcc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ed22:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ed26:	9804      	ldr	r0, [sp, #16]
 801ed28:	1414      	asrs	r4, r2, #16
 801ed2a:	fb07 0404 	mla	r4, r7, r4, r0
 801ed2e:	140e      	asrs	r6, r1, #16
 801ed30:	9801      	ldr	r0, [sp, #4]
 801ed32:	f814 e006 	ldrb.w	lr, [r4, r6]
 801ed36:	f8b9 4000 	ldrh.w	r4, [r9]
 801ed3a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ed3e:	eb00 0b0e 	add.w	fp, r0, lr
 801ed42:	1227      	asrs	r7, r4, #8
 801ed44:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ed48:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ed4c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801ed50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ed52:	fb16 f60a 	smulbb	r6, r6, sl
 801ed56:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ed5a:	fb07 6705 	mla	r7, r7, r5, r6
 801ed5e:	10e6      	asrs	r6, r4, #3
 801ed60:	00e4      	lsls	r4, r4, #3
 801ed62:	b2e4      	uxtb	r4, r4
 801ed64:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed68:	fb14 f405 	smulbb	r4, r4, r5
 801ed6c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ed70:	b2bf      	uxth	r7, r7
 801ed72:	fb06 b605 	mla	r6, r6, r5, fp
 801ed76:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801ed7a:	b2b6      	uxth	r6, r6
 801ed7c:	fa1f fe8e 	uxth.w	lr, lr
 801ed80:	1c7c      	adds	r4, r7, #1
 801ed82:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ed86:	f106 0b01 	add.w	fp, r6, #1
 801ed8a:	f10e 0401 	add.w	r4, lr, #1
 801ed8e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801ed92:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ed96:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ed9a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ed9e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801eda2:	4327      	orrs	r7, r4
 801eda4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801eda8:	4401      	add	r1, r0
 801edaa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801edac:	ea47 070b 	orr.w	r7, r7, fp
 801edb0:	f829 7b02 	strh.w	r7, [r9], #2
 801edb4:	4402      	add	r2, r0
 801edb6:	f108 38ff 	add.w	r8, r8, #4294967295
 801edba:	e7af      	b.n	801ed1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801edbc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801edc0:	f04f 0e00 	mov.w	lr, #0
 801edc4:	eb03 040e 	add.w	r4, r3, lr
 801edc8:	2c00      	cmp	r4, #0
 801edca:	dc43      	bgt.n	801ee54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801edcc:	9a00      	ldr	r2, [sp, #0]
 801edce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801edd2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801edd6:	9300      	str	r3, [sp, #0]
 801edd8:	9b02      	ldr	r3, [sp, #8]
 801edda:	2b00      	cmp	r3, #0
 801eddc:	f340 8098 	ble.w	801ef10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ede0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ede4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ede8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801edec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801edee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edfa:	eef0 6a62 	vmov.f32	s13, s5
 801edfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee06:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee0a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ee0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee12:	eef0 6a43 	vmov.f32	s13, s6
 801ee16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee1a:	ee12 2a90 	vmov	r2, s5
 801ee1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee26:	ee13 2a10 	vmov	r2, s6
 801ee2a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ee2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee2e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee32:	9314      	str	r3, [sp, #80]	; 0x50
 801ee34:	9b02      	ldr	r3, [sp, #8]
 801ee36:	9a05      	ldr	r2, [sp, #20]
 801ee38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee3c:	3b01      	subs	r3, #1
 801ee3e:	9302      	str	r3, [sp, #8]
 801ee40:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ee44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee46:	eeb0 3a67 	vmov.f32	s6, s15
 801ee4a:	bf08      	it	eq
 801ee4c:	4613      	moveq	r3, r2
 801ee4e:	eef0 2a47 	vmov.f32	s5, s14
 801ee52:	e72a      	b.n	801ecaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ee54:	140f      	asrs	r7, r1, #16
 801ee56:	d454      	bmi.n	801ef02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ee58:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ee5c:	42be      	cmp	r6, r7
 801ee5e:	dd50      	ble.n	801ef02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ee60:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ee64:	d44d      	bmi.n	801ef02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ee66:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801ee6a:	4544      	cmp	r4, r8
 801ee6c:	dd49      	ble.n	801ef02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ee6e:	9c04      	ldr	r4, [sp, #16]
 801ee70:	b236      	sxth	r6, r6
 801ee72:	fb08 4606 	mla	r6, r8, r6, r4
 801ee76:	f06f 0001 	mvn.w	r0, #1
 801ee7a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801ee7e:	9c01      	ldr	r4, [sp, #4]
 801ee80:	fb00 fa0e 	mul.w	sl, r0, lr
 801ee84:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ee88:	9800      	ldr	r0, [sp, #0]
 801ee8a:	eb04 0b08 	add.w	fp, r4, r8
 801ee8e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ee92:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ee96:	9801      	ldr	r0, [sp, #4]
 801ee98:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ee9c:	f810 8008 	ldrb.w	r8, [r0, r8]
 801eea0:	9800      	ldr	r0, [sp, #0]
 801eea2:	1227      	asrs	r7, r4, #8
 801eea4:	fb16 f609 	smulbb	r6, r6, r9
 801eea8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eeac:	fb07 6705 	mla	r7, r7, r5, r6
 801eeb0:	10e6      	asrs	r6, r4, #3
 801eeb2:	00e4      	lsls	r4, r4, #3
 801eeb4:	b2e4      	uxtb	r4, r4
 801eeb6:	fb1b fb09 	smulbb	fp, fp, r9
 801eeba:	fb14 f405 	smulbb	r4, r4, r5
 801eebe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eec2:	b2bf      	uxth	r7, r7
 801eec4:	fb06 b605 	mla	r6, r6, r5, fp
 801eec8:	fb08 4809 	mla	r8, r8, r9, r4
 801eecc:	b2b6      	uxth	r6, r6
 801eece:	fa1f f888 	uxth.w	r8, r8
 801eed2:	1c7c      	adds	r4, r7, #1
 801eed4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801eed8:	f106 0b01 	add.w	fp, r6, #1
 801eedc:	f108 0401 	add.w	r4, r8, #1
 801eee0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801eee4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801eee8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eeec:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801eef0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801eef4:	4327      	orrs	r7, r4
 801eef6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801eefa:	ea47 070b 	orr.w	r7, r7, fp
 801eefe:	f820 700a 	strh.w	r7, [r0, sl]
 801ef02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ef04:	4401      	add	r1, r0
 801ef06:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ef08:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ef0c:	4402      	add	r2, r0
 801ef0e:	e759      	b.n	801edc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ef10:	b007      	add	sp, #28
 801ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ef18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef1c:	b085      	sub	sp, #20
 801ef1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef22:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ef24:	9203      	str	r2, [sp, #12]
 801ef26:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ef2a:	6870      	ldr	r0, [r6, #4]
 801ef2c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ef2e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801ef32:	686f      	ldr	r7, [r5, #4]
 801ef34:	9101      	str	r1, [sp, #4]
 801ef36:	fb00 2404 	mla	r4, r0, r4, r2
 801ef3a:	6832      	ldr	r2, [r6, #0]
 801ef3c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ef40:	682a      	ldr	r2, [r5, #0]
 801ef42:	9202      	str	r2, [sp, #8]
 801ef44:	3704      	adds	r7, #4
 801ef46:	9a01      	ldr	r2, [sp, #4]
 801ef48:	2a00      	cmp	r2, #0
 801ef4a:	dc03      	bgt.n	801ef54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ef4c:	9a03      	ldr	r2, [sp, #12]
 801ef4e:	2a00      	cmp	r2, #0
 801ef50:	f340 80cc 	ble.w	801f0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ef54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef56:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ef5a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ef5e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	dd0d      	ble.n	801ef88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ef6c:	1406      	asrs	r6, r0, #16
 801ef6e:	d405      	bmi.n	801ef7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ef70:	454e      	cmp	r6, r9
 801ef72:	da03      	bge.n	801ef7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ef74:	1416      	asrs	r6, r2, #16
 801ef76:	d401      	bmi.n	801ef7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ef78:	4546      	cmp	r6, r8
 801ef7a:	db06      	blt.n	801ef8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef7c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ef7e:	4460      	add	r0, ip
 801ef80:	4432      	add	r2, r6
 801ef82:	3b01      	subs	r3, #1
 801ef84:	3402      	adds	r4, #2
 801ef86:	e7ef      	b.n	801ef68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ef88:	d00f      	beq.n	801efaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ef8a:	1e5e      	subs	r6, r3, #1
 801ef8c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801ef90:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ef94:	d543      	bpl.n	801f01e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ef96:	4698      	mov	r8, r3
 801ef98:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801ef9c:	f1b8 0f00 	cmp.w	r8, #0
 801efa0:	dc71      	bgt.n	801f086 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801efa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efa6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801efaa:	9b01      	ldr	r3, [sp, #4]
 801efac:	2b00      	cmp	r3, #0
 801efae:	f340 809d 	ble.w	801f0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801efb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efb6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801efbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efc8:	eeb0 6a62 	vmov.f32	s12, s5
 801efcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efd8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801efdc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efe0:	eeb0 6a43 	vmov.f32	s12, s6
 801efe4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efe8:	ee12 2a90 	vmov	r2, s5
 801efec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eff0:	fb92 fcf3 	sdiv	ip, r2, r3
 801eff4:	ee13 2a10 	vmov	r2, s6
 801eff8:	fb92 f3f3 	sdiv	r3, r2, r3
 801effc:	9312      	str	r3, [sp, #72]	; 0x48
 801effe:	9b01      	ldr	r3, [sp, #4]
 801f000:	9a03      	ldr	r2, [sp, #12]
 801f002:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f006:	3b01      	subs	r3, #1
 801f008:	9301      	str	r3, [sp, #4]
 801f00a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f010:	eeb0 3a67 	vmov.f32	s6, s15
 801f014:	bf08      	it	eq
 801f016:	4613      	moveq	r3, r2
 801f018:	eef0 2a47 	vmov.f32	s5, s14
 801f01c:	e793      	b.n	801ef46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f01e:	45ce      	cmp	lr, r9
 801f020:	dab9      	bge.n	801ef96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f022:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f024:	fb01 2606 	mla	r6, r1, r6, r2
 801f028:	1436      	asrs	r6, r6, #16
 801f02a:	d4b4      	bmi.n	801ef96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f02c:	4546      	cmp	r6, r8
 801f02e:	dab2      	bge.n	801ef96 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f030:	4698      	mov	r8, r3
 801f032:	46a2      	mov	sl, r4
 801f034:	f1b8 0f00 	cmp.w	r8, #0
 801f038:	ddb3      	ble.n	801efa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f03a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f03e:	9902      	ldr	r1, [sp, #8]
 801f040:	1416      	asrs	r6, r2, #16
 801f042:	fb09 1606 	mla	r6, r9, r6, r1
 801f046:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801f04a:	492a      	ldr	r1, [pc, #168]	; (801f0f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801f04c:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801f050:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f054:	eb07 0b0e 	add.w	fp, r7, lr
 801f058:	4460      	add	r0, ip
 801f05a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801f05e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f062:	00f6      	lsls	r6, r6, #3
 801f064:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801f068:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f06c:	ea49 0606 	orr.w	r6, r9, r6
 801f070:	f817 900e 	ldrb.w	r9, [r7, lr]
 801f074:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f076:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801f07a:	f82a 6b02 	strh.w	r6, [sl], #2
 801f07e:	440a      	add	r2, r1
 801f080:	f108 38ff 	add.w	r8, r8, #4294967295
 801f084:	e7d6      	b.n	801f034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f086:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f08a:	d429      	bmi.n	801f0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f08c:	68ae      	ldr	r6, [r5, #8]
 801f08e:	454e      	cmp	r6, r9
 801f090:	dd26      	ble.n	801f0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f092:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f096:	d423      	bmi.n	801f0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f098:	68e9      	ldr	r1, [r5, #12]
 801f09a:	4559      	cmp	r1, fp
 801f09c:	dd20      	ble.n	801f0e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f09e:	9902      	ldr	r1, [sp, #8]
 801f0a0:	fa0f fe86 	sxth.w	lr, r6
 801f0a4:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801f0a8:	f06f 0101 	mvn.w	r1, #1
 801f0ac:	f81e e009 	ldrb.w	lr, [lr, r9]
 801f0b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f0b4:	eb07 060e 	add.w	r6, r7, lr
 801f0b8:	fb01 f908 	mul.w	r9, r1, r8
 801f0bc:	f896 b002 	ldrb.w	fp, [r6, #2]
 801f0c0:	7876      	ldrb	r6, [r6, #1]
 801f0c2:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801f0c6:	00f6      	lsls	r6, r6, #3
 801f0c8:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801f0cc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f0d0:	ea4b 0606 	orr.w	r6, fp, r6
 801f0d4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801f0d8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801f0dc:	f82a 6009 	strh.w	r6, [sl, r9]
 801f0e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f0e2:	4460      	add	r0, ip
 801f0e4:	440a      	add	r2, r1
 801f0e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f0ea:	e757      	b.n	801ef9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f0ec:	b005      	add	sp, #20
 801f0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0f2:	bf00      	nop
 801f0f4:	fffff800 	.word	0xfffff800

0801f0f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	b087      	sub	sp, #28
 801f0fe:	468b      	mov	fp, r1
 801f100:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f102:	9204      	str	r2, [sp, #16]
 801f104:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f108:	9205      	str	r2, [sp, #20]
 801f10a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f10e:	6841      	ldr	r1, [r0, #4]
 801f110:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f114:	fb01 2404 	mla	r4, r1, r4, r2
 801f118:	6802      	ldr	r2, [r0, #0]
 801f11a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f11e:	f8dc 2000 	ldr.w	r2, [ip]
 801f122:	9201      	str	r2, [sp, #4]
 801f124:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f128:	3204      	adds	r2, #4
 801f12a:	9202      	str	r2, [sp, #8]
 801f12c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f130:	f1bb 0f00 	cmp.w	fp, #0
 801f134:	dc03      	bgt.n	801f13e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f136:	9a04      	ldr	r2, [sp, #16]
 801f138:	2a00      	cmp	r2, #0
 801f13a:	f340 8138 	ble.w	801f3ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f13e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f140:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f144:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801f148:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f14e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f152:	2b00      	cmp	r3, #0
 801f154:	dd0e      	ble.n	801f174 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f156:	1402      	asrs	r2, r0, #16
 801f158:	d405      	bmi.n	801f166 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f15a:	42ba      	cmp	r2, r7
 801f15c:	da03      	bge.n	801f166 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f15e:	140a      	asrs	r2, r1, #16
 801f160:	d401      	bmi.n	801f166 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f162:	42b2      	cmp	r2, r6
 801f164:	db07      	blt.n	801f176 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f166:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f168:	4410      	add	r0, r2
 801f16a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f16c:	3b01      	subs	r3, #1
 801f16e:	4411      	add	r1, r2
 801f170:	3402      	adds	r4, #2
 801f172:	e7ee      	b.n	801f152 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f174:	d019      	beq.n	801f1aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f176:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f178:	1e5a      	subs	r2, r3, #1
 801f17a:	fb05 0502 	mla	r5, r5, r2, r0
 801f17e:	142d      	asrs	r5, r5, #16
 801f180:	d409      	bmi.n	801f196 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f182:	42bd      	cmp	r5, r7
 801f184:	da07      	bge.n	801f196 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f186:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f188:	fb05 1202 	mla	r2, r5, r2, r1
 801f18c:	1412      	asrs	r2, r2, #16
 801f18e:	d402      	bmi.n	801f196 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f190:	42b2      	cmp	r2, r6
 801f192:	f2c0 80ac 	blt.w	801f2ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f196:	f04f 0e00 	mov.w	lr, #0
 801f19a:	eb03 020e 	add.w	r2, r3, lr
 801f19e:	2a00      	cmp	r2, #0
 801f1a0:	dc3e      	bgt.n	801f220 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f1a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1aa:	f1bb 0f00 	cmp.w	fp, #0
 801f1ae:	f340 80fe 	ble.w	801f3ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f1b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f1be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1c0:	f1bb 0b01 	subs.w	fp, fp, #1
 801f1c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f1cc:	eeb0 6a62 	vmov.f32	s12, s5
 801f1d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f1d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f1dc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f1e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f1e4:	eeb0 6a43 	vmov.f32	s12, s6
 801f1e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1ec:	ee12 2a90 	vmov	r2, s5
 801f1f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f1f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1f8:	ee13 2a10 	vmov	r2, s6
 801f1fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f200:	9313      	str	r3, [sp, #76]	; 0x4c
 801f202:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f204:	fb92 f3f3 	sdiv	r3, r2, r3
 801f208:	9a04      	ldr	r2, [sp, #16]
 801f20a:	9314      	str	r3, [sp, #80]	; 0x50
 801f20c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f210:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f212:	eeb0 3a67 	vmov.f32	s6, s15
 801f216:	bf08      	it	eq
 801f218:	4613      	moveq	r3, r2
 801f21a:	eef0 2a47 	vmov.f32	s5, s14
 801f21e:	e787      	b.n	801f130 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f220:	1406      	asrs	r6, r0, #16
 801f222:	d45d      	bmi.n	801f2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f224:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801f228:	42b5      	cmp	r5, r6
 801f22a:	dd59      	ble.n	801f2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f22c:	140f      	asrs	r7, r1, #16
 801f22e:	d457      	bmi.n	801f2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f230:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f234:	42ba      	cmp	r2, r7
 801f236:	dd53      	ble.n	801f2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f238:	9a01      	ldr	r2, [sp, #4]
 801f23a:	b22d      	sxth	r5, r5
 801f23c:	fb07 2505 	mla	r5, r7, r5, r2
 801f240:	5daa      	ldrb	r2, [r5, r6]
 801f242:	9d02      	ldr	r5, [sp, #8]
 801f244:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f248:	0e2e      	lsrs	r6, r5, #24
 801f24a:	d049      	beq.n	801f2e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f24c:	f06f 0201 	mvn.w	r2, #1
 801f250:	fb02 f20e 	mul.w	r2, r2, lr
 801f254:	9203      	str	r2, [sp, #12]
 801f256:	f834 8002 	ldrh.w	r8, [r4, r2]
 801f25a:	9a05      	ldr	r2, [sp, #20]
 801f25c:	4356      	muls	r6, r2
 801f25e:	1c72      	adds	r2, r6, #1
 801f260:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f264:	1212      	asrs	r2, r2, #8
 801f266:	fa1f f982 	uxth.w	r9, r2
 801f26a:	ea4f 2728 	mov.w	r7, r8, asr #8
 801f26e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f272:	43d2      	mvns	r2, r2
 801f274:	b2d2      	uxtb	r2, r2
 801f276:	fb16 f609 	smulbb	r6, r6, r9
 801f27a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f27e:	fb07 6702 	mla	r7, r7, r2, r6
 801f282:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f286:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f28a:	b2ed      	uxtb	r5, r5
 801f28c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f290:	fa5f f888 	uxtb.w	r8, r8
 801f294:	fb15 f509 	smulbb	r5, r5, r9
 801f298:	fb08 5502 	mla	r5, r8, r2, r5
 801f29c:	b2bf      	uxth	r7, r7
 801f29e:	fb1a fa09 	smulbb	sl, sl, r9
 801f2a2:	b2ad      	uxth	r5, r5
 801f2a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f2a8:	fb06 a602 	mla	r6, r6, r2, sl
 801f2ac:	1c7a      	adds	r2, r7, #1
 801f2ae:	f105 0a01 	add.w	sl, r5, #1
 801f2b2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f2b6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f2ba:	b2b6      	uxth	r6, r6
 801f2bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f2c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f2c4:	ea4a 0707 	orr.w	r7, sl, r7
 801f2c8:	f106 0a01 	add.w	sl, r6, #1
 801f2cc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f2d0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2d4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f2d8:	9a03      	ldr	r2, [sp, #12]
 801f2da:	ea47 070a 	orr.w	r7, r7, sl
 801f2de:	52a7      	strh	r7, [r4, r2]
 801f2e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2e2:	4410      	add	r0, r2
 801f2e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f2ea:	4411      	add	r1, r2
 801f2ec:	e755      	b.n	801f19a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f2ee:	f04f 0800 	mov.w	r8, #0
 801f2f2:	eba3 0208 	sub.w	r2, r3, r8
 801f2f6:	2a00      	cmp	r2, #0
 801f2f8:	f77f af53 	ble.w	801f1a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f2fc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801f300:	9f01      	ldr	r7, [sp, #4]
 801f302:	140a      	asrs	r2, r1, #16
 801f304:	1405      	asrs	r5, r0, #16
 801f306:	fb06 7202 	mla	r2, r6, r2, r7
 801f30a:	5d52      	ldrb	r2, [r2, r5]
 801f30c:	9d02      	ldr	r5, [sp, #8]
 801f30e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f312:	0e2e      	lsrs	r6, r5, #24
 801f314:	d044      	beq.n	801f3a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f316:	9a05      	ldr	r2, [sp, #20]
 801f318:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f31c:	4356      	muls	r6, r2
 801f31e:	1c72      	adds	r2, r6, #1
 801f320:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f324:	1212      	asrs	r2, r2, #8
 801f326:	fa1f f982 	uxth.w	r9, r2
 801f32a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f32e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f332:	43d2      	mvns	r2, r2
 801f334:	b2d2      	uxtb	r2, r2
 801f336:	fb16 f609 	smulbb	r6, r6, r9
 801f33a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f33e:	fb07 6702 	mla	r7, r7, r2, r6
 801f342:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f346:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f34a:	b2ed      	uxtb	r5, r5
 801f34c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f350:	fa5f fe8e 	uxtb.w	lr, lr
 801f354:	fb15 f509 	smulbb	r5, r5, r9
 801f358:	fb0e 5502 	mla	r5, lr, r2, r5
 801f35c:	b2bf      	uxth	r7, r7
 801f35e:	fb1a fa09 	smulbb	sl, sl, r9
 801f362:	b2ad      	uxth	r5, r5
 801f364:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f368:	fb06 a602 	mla	r6, r6, r2, sl
 801f36c:	1c7a      	adds	r2, r7, #1
 801f36e:	f105 0a01 	add.w	sl, r5, #1
 801f372:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f376:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f37a:	b2b6      	uxth	r6, r6
 801f37c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f380:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f384:	ea4a 0707 	orr.w	r7, sl, r7
 801f388:	f106 0a01 	add.w	sl, r6, #1
 801f38c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f390:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f394:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f398:	ea47 070a 	orr.w	r7, r7, sl
 801f39c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f3a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3a2:	4410      	add	r0, r2
 801f3a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f3a6:	f108 0801 	add.w	r8, r8, #1
 801f3aa:	4411      	add	r1, r2
 801f3ac:	e7a1      	b.n	801f2f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f3ae:	b007      	add	sp, #28
 801f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3b8:	b085      	sub	sp, #20
 801f3ba:	468b      	mov	fp, r1
 801f3bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f3be:	9203      	str	r2, [sp, #12]
 801f3c0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f3c4:	6841      	ldr	r1, [r0, #4]
 801f3c6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f3ca:	fb01 2404 	mla	r4, r1, r4, r2
 801f3ce:	6802      	ldr	r2, [r0, #0]
 801f3d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f3d4:	f8de 2000 	ldr.w	r2, [lr]
 801f3d8:	9200      	str	r2, [sp, #0]
 801f3da:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f3de:	3204      	adds	r2, #4
 801f3e0:	9201      	str	r2, [sp, #4]
 801f3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f3e6:	f1bb 0f00 	cmp.w	fp, #0
 801f3ea:	dc03      	bgt.n	801f3f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f3ec:	9a03      	ldr	r2, [sp, #12]
 801f3ee:	2a00      	cmp	r2, #0
 801f3f0:	f340 8153 	ble.w	801f69a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f3f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f3f6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f3fa:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f3fe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f402:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f404:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f408:	2b00      	cmp	r3, #0
 801f40a:	dd0e      	ble.n	801f42a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f40c:	1408      	asrs	r0, r1, #16
 801f40e:	d405      	bmi.n	801f41c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f410:	42b8      	cmp	r0, r7
 801f412:	da03      	bge.n	801f41c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f414:	1410      	asrs	r0, r2, #16
 801f416:	d401      	bmi.n	801f41c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f418:	42b0      	cmp	r0, r6
 801f41a:	db07      	blt.n	801f42c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f41c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f41e:	4401      	add	r1, r0
 801f420:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f422:	3b01      	subs	r3, #1
 801f424:	4402      	add	r2, r0
 801f426:	3402      	adds	r4, #2
 801f428:	e7ee      	b.n	801f408 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f42a:	d017      	beq.n	801f45c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f42c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f42e:	1e58      	subs	r0, r3, #1
 801f430:	fb05 1500 	mla	r5, r5, r0, r1
 801f434:	142d      	asrs	r5, r5, #16
 801f436:	d409      	bmi.n	801f44c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f438:	42bd      	cmp	r5, r7
 801f43a:	da07      	bge.n	801f44c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f43c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f43e:	fb05 2000 	mla	r0, r5, r0, r2
 801f442:	1400      	asrs	r0, r0, #16
 801f444:	d402      	bmi.n	801f44c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f446:	42b0      	cmp	r0, r6
 801f448:	f2c0 80bc 	blt.w	801f5c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f44c:	2600      	movs	r6, #0
 801f44e:	1998      	adds	r0, r3, r6
 801f450:	2800      	cmp	r0, #0
 801f452:	dc3e      	bgt.n	801f4d2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f454:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f458:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f45c:	f1bb 0f00 	cmp.w	fp, #0
 801f460:	f340 811b 	ble.w	801f69a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f464:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f468:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f46c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f472:	f1bb 0b01 	subs.w	fp, fp, #1
 801f476:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f47a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f47e:	eeb0 6a62 	vmov.f32	s12, s5
 801f482:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f486:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f48a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f48e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f492:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f496:	eeb0 6a43 	vmov.f32	s12, s6
 801f49a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f49e:	ee12 2a90 	vmov	r2, s5
 801f4a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4aa:	ee13 2a10 	vmov	r2, s6
 801f4ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4b2:	9311      	str	r3, [sp, #68]	; 0x44
 801f4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4ba:	9a03      	ldr	r2, [sp, #12]
 801f4bc:	9312      	str	r3, [sp, #72]	; 0x48
 801f4be:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4c4:	eeb0 3a67 	vmov.f32	s6, s15
 801f4c8:	bf08      	it	eq
 801f4ca:	4613      	moveq	r3, r2
 801f4cc:	eef0 2a47 	vmov.f32	s5, s14
 801f4d0:	e789      	b.n	801f3e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f4d2:	140f      	asrs	r7, r1, #16
 801f4d4:	d45e      	bmi.n	801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f4d6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f4da:	42bd      	cmp	r5, r7
 801f4dc:	dd5a      	ble.n	801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f4de:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f4e2:	d457      	bmi.n	801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f4e4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f4e8:	4560      	cmp	r0, ip
 801f4ea:	dd53      	ble.n	801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f4ec:	9800      	ldr	r0, [sp, #0]
 801f4ee:	b22d      	sxth	r5, r5
 801f4f0:	fb0c 0505 	mla	r5, ip, r5, r0
 801f4f4:	5de8      	ldrb	r0, [r5, r7]
 801f4f6:	9d01      	ldr	r5, [sp, #4]
 801f4f8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f4fc:	0e07      	lsrs	r7, r0, #24
 801f4fe:	2fff      	cmp	r7, #255	; 0xff
 801f500:	d04e      	beq.n	801f5a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801f502:	b2fd      	uxtb	r5, r7
 801f504:	2f00      	cmp	r7, #0
 801f506:	d045      	beq.n	801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f508:	f06f 0701 	mvn.w	r7, #1
 801f50c:	4377      	muls	r7, r6
 801f50e:	fa1f f985 	uxth.w	r9, r5
 801f512:	f834 8007 	ldrh.w	r8, [r4, r7]
 801f516:	9702      	str	r7, [sp, #8]
 801f518:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f51c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f520:	43ed      	mvns	r5, r5
 801f522:	b2ed      	uxtb	r5, r5
 801f524:	fb17 f709 	smulbb	r7, r7, r9
 801f528:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f52c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f530:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f534:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801f538:	b2c0      	uxtb	r0, r0
 801f53a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f53e:	fa5f f888 	uxtb.w	r8, r8
 801f542:	fb10 f009 	smulbb	r0, r0, r9
 801f546:	fb08 0005 	mla	r0, r8, r5, r0
 801f54a:	b280      	uxth	r0, r0
 801f54c:	fa1f fc8c 	uxth.w	ip, ip
 801f550:	fb1a fa09 	smulbb	sl, sl, r9
 801f554:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f558:	fb07 a705 	mla	r7, r7, r5, sl
 801f55c:	f100 0a01 	add.w	sl, r0, #1
 801f560:	f10c 0501 	add.w	r5, ip, #1
 801f564:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f568:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f56c:	b2bf      	uxth	r7, r7
 801f56e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f572:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f576:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f57a:	f107 0a01 	add.w	sl, r7, #1
 801f57e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f582:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f586:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f58a:	9802      	ldr	r0, [sp, #8]
 801f58c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f590:	f824 c000 	strh.w	ip, [r4, r0]
 801f594:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f596:	4401      	add	r1, r0
 801f598:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f59a:	3e01      	subs	r6, #1
 801f59c:	4402      	add	r2, r0
 801f59e:	e756      	b.n	801f44e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f5a0:	f06f 0501 	mvn.w	r5, #1
 801f5a4:	fb05 f706 	mul.w	r7, r5, r6
 801f5a8:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f5ac:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f5b0:	0945      	lsrs	r5, r0, #5
 801f5b2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f5b6:	ea4c 0505 	orr.w	r5, ip, r5
 801f5ba:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f5be:	4305      	orrs	r5, r0
 801f5c0:	53e5      	strh	r5, [r4, r7]
 801f5c2:	e7e7      	b.n	801f594 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f5c4:	f04f 0800 	mov.w	r8, #0
 801f5c8:	eba3 0008 	sub.w	r0, r3, r8
 801f5cc:	2800      	cmp	r0, #0
 801f5ce:	f77f af41 	ble.w	801f454 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f5d2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f5d6:	9f00      	ldr	r7, [sp, #0]
 801f5d8:	1410      	asrs	r0, r2, #16
 801f5da:	140d      	asrs	r5, r1, #16
 801f5dc:	fb06 7000 	mla	r0, r6, r0, r7
 801f5e0:	5d40      	ldrb	r0, [r0, r5]
 801f5e2:	9d01      	ldr	r5, [sp, #4]
 801f5e4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f5e8:	0e06      	lsrs	r6, r0, #24
 801f5ea:	2eff      	cmp	r6, #255	; 0xff
 801f5ec:	d048      	beq.n	801f680 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f5ee:	b2f5      	uxtb	r5, r6
 801f5f0:	2e00      	cmp	r6, #0
 801f5f2:	d03e      	beq.n	801f672 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801f5f4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801f5f8:	fa1f f985 	uxth.w	r9, r5
 801f5fc:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f600:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801f604:	43ed      	mvns	r5, r5
 801f606:	b2ed      	uxtb	r5, r5
 801f608:	fb16 f609 	smulbb	r6, r6, r9
 801f60c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f610:	fb07 6705 	mla	r7, r7, r5, r6
 801f614:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f618:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f61c:	b2c0      	uxtb	r0, r0
 801f61e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f622:	fa5f fc8c 	uxtb.w	ip, ip
 801f626:	fb10 f009 	smulbb	r0, r0, r9
 801f62a:	fb0c 0005 	mla	r0, ip, r5, r0
 801f62e:	b2bf      	uxth	r7, r7
 801f630:	fb1a fa09 	smulbb	sl, sl, r9
 801f634:	b280      	uxth	r0, r0
 801f636:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f63a:	fb06 a605 	mla	r6, r6, r5, sl
 801f63e:	1c7d      	adds	r5, r7, #1
 801f640:	f100 0a01 	add.w	sl, r0, #1
 801f644:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801f648:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f64c:	b2b6      	uxth	r6, r6
 801f64e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f652:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f656:	ea4a 0707 	orr.w	r7, sl, r7
 801f65a:	f106 0a01 	add.w	sl, r6, #1
 801f65e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f662:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f666:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f66a:	ea47 070a 	orr.w	r7, r7, sl
 801f66e:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f672:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f674:	4401      	add	r1, r0
 801f676:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f678:	f108 0801 	add.w	r8, r8, #1
 801f67c:	4402      	add	r2, r0
 801f67e:	e7a3      	b.n	801f5c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f680:	4d07      	ldr	r5, [pc, #28]	; (801f6a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f682:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801f686:	0945      	lsrs	r5, r0, #5
 801f688:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f68c:	4335      	orrs	r5, r6
 801f68e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f692:	4305      	orrs	r5, r0
 801f694:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f698:	e7eb      	b.n	801f672 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801f69a:	b005      	add	sp, #20
 801f69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6a0:	fffff800 	.word	0xfffff800

0801f6a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6a8:	b087      	sub	sp, #28
 801f6aa:	468b      	mov	fp, r1
 801f6ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f6ae:	9204      	str	r2, [sp, #16]
 801f6b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f6b4:	9205      	str	r2, [sp, #20]
 801f6b6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f6ba:	6861      	ldr	r1, [r4, #4]
 801f6bc:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f6c0:	fb01 2000 	mla	r0, r1, r0, r2
 801f6c4:	6822      	ldr	r2, [r4, #0]
 801f6c6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f6ca:	f8de 2000 	ldr.w	r2, [lr]
 801f6ce:	9201      	str	r2, [sp, #4]
 801f6d0:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f6d4:	9202      	str	r2, [sp, #8]
 801f6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f6da:	f1bb 0f00 	cmp.w	fp, #0
 801f6de:	dc03      	bgt.n	801f6e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f6e0:	9a04      	ldr	r2, [sp, #16]
 801f6e2:	2a00      	cmp	r2, #0
 801f6e4:	f340 8142 	ble.w	801f96c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f6e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f6ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f6ee:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f6f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f6f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	dd0e      	ble.n	801f71e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f700:	140c      	asrs	r4, r1, #16
 801f702:	d405      	bmi.n	801f710 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f704:	42bc      	cmp	r4, r7
 801f706:	da03      	bge.n	801f710 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f708:	1414      	asrs	r4, r2, #16
 801f70a:	d401      	bmi.n	801f710 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f70c:	42b4      	cmp	r4, r6
 801f70e:	db07      	blt.n	801f720 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f710:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f712:	4421      	add	r1, r4
 801f714:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f716:	3b01      	subs	r3, #1
 801f718:	4422      	add	r2, r4
 801f71a:	3002      	adds	r0, #2
 801f71c:	e7ee      	b.n	801f6fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f71e:	d019      	beq.n	801f754 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f720:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f722:	1e5c      	subs	r4, r3, #1
 801f724:	fb05 1504 	mla	r5, r5, r4, r1
 801f728:	142d      	asrs	r5, r5, #16
 801f72a:	d409      	bmi.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f72c:	42bd      	cmp	r5, r7
 801f72e:	da07      	bge.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f730:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f732:	fb05 2404 	mla	r4, r5, r4, r2
 801f736:	1424      	asrs	r4, r4, #16
 801f738:	d402      	bmi.n	801f740 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f73a:	42b4      	cmp	r4, r6
 801f73c:	f2c0 80b1 	blt.w	801f8a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f740:	f04f 0800 	mov.w	r8, #0
 801f744:	eb03 0408 	add.w	r4, r3, r8
 801f748:	2c00      	cmp	r4, #0
 801f74a:	dc3e      	bgt.n	801f7ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f74c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f750:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f754:	f1bb 0f00 	cmp.w	fp, #0
 801f758:	f340 8108 	ble.w	801f96c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f75c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f760:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f764:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f76a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f76e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f772:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f776:	eeb0 6a62 	vmov.f32	s12, s5
 801f77a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f77e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f782:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f786:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f78a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f78e:	eeb0 6a43 	vmov.f32	s12, s6
 801f792:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f796:	ee12 2a90 	vmov	r2, s5
 801f79a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f79e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7a2:	ee13 2a10 	vmov	r2, s6
 801f7a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801f7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7b2:	9a04      	ldr	r2, [sp, #16]
 801f7b4:	9314      	str	r3, [sp, #80]	; 0x50
 801f7b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f7ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7bc:	eeb0 3a67 	vmov.f32	s6, s15
 801f7c0:	bf08      	it	eq
 801f7c2:	4613      	moveq	r3, r2
 801f7c4:	eef0 2a47 	vmov.f32	s5, s14
 801f7c8:	e787      	b.n	801f6da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f7ca:	140e      	asrs	r6, r1, #16
 801f7cc:	d462      	bmi.n	801f894 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f7ce:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f7d2:	42b5      	cmp	r5, r6
 801f7d4:	dd5e      	ble.n	801f894 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f7d6:	1417      	asrs	r7, r2, #16
 801f7d8:	d45c      	bmi.n	801f894 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f7da:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f7de:	42bc      	cmp	r4, r7
 801f7e0:	dd58      	ble.n	801f894 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f7e2:	b22d      	sxth	r5, r5
 801f7e4:	fb07 6505 	mla	r5, r7, r5, r6
 801f7e8:	9c02      	ldr	r4, [sp, #8]
 801f7ea:	5d66      	ldrb	r6, [r4, r5]
 801f7ec:	2e00      	cmp	r6, #0
 801f7ee:	d051      	beq.n	801f894 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f7f0:	9c01      	ldr	r4, [sp, #4]
 801f7f2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f7f6:	f06f 0401 	mvn.w	r4, #1
 801f7fa:	fb04 f408 	mul.w	r4, r4, r8
 801f7fe:	9403      	str	r4, [sp, #12]
 801f800:	5b05      	ldrh	r5, [r0, r4]
 801f802:	9c05      	ldr	r4, [sp, #20]
 801f804:	4366      	muls	r6, r4
 801f806:	1c74      	adds	r4, r6, #1
 801f808:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f80c:	1224      	asrs	r4, r4, #8
 801f80e:	b2a7      	uxth	r7, r4
 801f810:	122e      	asrs	r6, r5, #8
 801f812:	43e4      	mvns	r4, r4
 801f814:	b2e4      	uxtb	r4, r4
 801f816:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f81a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f81e:	fb16 f604 	smulbb	r6, r6, r4
 801f822:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f826:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f82a:	00ed      	lsls	r5, r5, #3
 801f82c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f830:	b2ed      	uxtb	r5, r5
 801f832:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f836:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f83a:	fb15 f504 	smulbb	r5, r5, r4
 801f83e:	fa5f f989 	uxtb.w	r9, r9
 801f842:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f846:	fb09 5507 	mla	r5, r9, r7, r5
 801f84a:	fb1a fa04 	smulbb	sl, sl, r4
 801f84e:	fa1f fc8c 	uxth.w	ip, ip
 801f852:	b2ad      	uxth	r5, r5
 801f854:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f858:	fb06 a607 	mla	r6, r6, r7, sl
 801f85c:	f10c 0401 	add.w	r4, ip, #1
 801f860:	f105 0a01 	add.w	sl, r5, #1
 801f864:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f868:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f86c:	b2b6      	uxth	r6, r6
 801f86e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f872:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f876:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f87a:	f106 0a01 	add.w	sl, r6, #1
 801f87e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f882:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f886:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f88a:	9c03      	ldr	r4, [sp, #12]
 801f88c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f890:	f820 c004 	strh.w	ip, [r0, r4]
 801f894:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f896:	4421      	add	r1, r4
 801f898:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f89a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f89e:	4422      	add	r2, r4
 801f8a0:	e750      	b.n	801f744 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f8a2:	f04f 0900 	mov.w	r9, #0
 801f8a6:	eba3 0409 	sub.w	r4, r3, r9
 801f8aa:	2c00      	cmp	r4, #0
 801f8ac:	f77f af4e 	ble.w	801f74c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f8b0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f8b4:	140d      	asrs	r5, r1, #16
 801f8b6:	1414      	asrs	r4, r2, #16
 801f8b8:	fb06 5404 	mla	r4, r6, r4, r5
 801f8bc:	9d02      	ldr	r5, [sp, #8]
 801f8be:	5d2e      	ldrb	r6, [r5, r4]
 801f8c0:	2e00      	cmp	r6, #0
 801f8c2:	d04c      	beq.n	801f95e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f8c4:	9d01      	ldr	r5, [sp, #4]
 801f8c6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f8ca:	9c05      	ldr	r4, [sp, #20]
 801f8cc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f8d0:	4366      	muls	r6, r4
 801f8d2:	1c74      	adds	r4, r6, #1
 801f8d4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f8d8:	1224      	asrs	r4, r4, #8
 801f8da:	b2a7      	uxth	r7, r4
 801f8dc:	122e      	asrs	r6, r5, #8
 801f8de:	43e4      	mvns	r4, r4
 801f8e0:	b2e4      	uxtb	r4, r4
 801f8e2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f8e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f8ea:	fb16 f604 	smulbb	r6, r6, r4
 801f8ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f8f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f8f6:	00ed      	lsls	r5, r5, #3
 801f8f8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f8fc:	b2ed      	uxtb	r5, r5
 801f8fe:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f902:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f906:	fb15 f504 	smulbb	r5, r5, r4
 801f90a:	fa5f f888 	uxtb.w	r8, r8
 801f90e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f912:	fb08 5507 	mla	r5, r8, r7, r5
 801f916:	fb1a fa04 	smulbb	sl, sl, r4
 801f91a:	fa1f fc8c 	uxth.w	ip, ip
 801f91e:	b2ad      	uxth	r5, r5
 801f920:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f924:	fb06 a607 	mla	r6, r6, r7, sl
 801f928:	f10c 0401 	add.w	r4, ip, #1
 801f92c:	f105 0a01 	add.w	sl, r5, #1
 801f930:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f934:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f938:	b2b6      	uxth	r6, r6
 801f93a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f93e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f942:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f946:	f106 0a01 	add.w	sl, r6, #1
 801f94a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f94e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f952:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f956:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f95a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f95e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f960:	4421      	add	r1, r4
 801f962:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f964:	f109 0901 	add.w	r9, r9, #1
 801f968:	4422      	add	r2, r4
 801f96a:	e79c      	b.n	801f8a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f96c:	b007      	add	sp, #28
 801f96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f972 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f976:	b085      	sub	sp, #20
 801f978:	468b      	mov	fp, r1
 801f97a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f97c:	9203      	str	r2, [sp, #12]
 801f97e:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f982:	6861      	ldr	r1, [r4, #4]
 801f984:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f988:	fb01 2000 	mla	r0, r1, r0, r2
 801f98c:	6822      	ldr	r2, [r4, #0]
 801f98e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f992:	f8d8 2000 	ldr.w	r2, [r8]
 801f996:	9200      	str	r2, [sp, #0]
 801f998:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f99c:	9201      	str	r2, [sp, #4]
 801f99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f9a2:	f1bb 0f00 	cmp.w	fp, #0
 801f9a6:	dc03      	bgt.n	801f9b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f9a8:	9a03      	ldr	r2, [sp, #12]
 801f9aa:	2a00      	cmp	r2, #0
 801f9ac:	f340 8146 	ble.w	801fc3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f9b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f9b2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f9b6:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f9ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f9be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f9c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	dd0e      	ble.n	801f9e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f9c8:	140c      	asrs	r4, r1, #16
 801f9ca:	d405      	bmi.n	801f9d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9cc:	42bc      	cmp	r4, r7
 801f9ce:	da03      	bge.n	801f9d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9d0:	1414      	asrs	r4, r2, #16
 801f9d2:	d401      	bmi.n	801f9d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9d4:	42b4      	cmp	r4, r6
 801f9d6:	db07      	blt.n	801f9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f9d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f9da:	4421      	add	r1, r4
 801f9dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f9de:	3b01      	subs	r3, #1
 801f9e0:	4422      	add	r2, r4
 801f9e2:	3002      	adds	r0, #2
 801f9e4:	e7ee      	b.n	801f9c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f9e6:	d017      	beq.n	801fa18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f9e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f9ea:	1e5c      	subs	r4, r3, #1
 801f9ec:	fb05 1504 	mla	r5, r5, r4, r1
 801f9f0:	142d      	asrs	r5, r5, #16
 801f9f2:	d409      	bmi.n	801fa08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9f4:	42bd      	cmp	r5, r7
 801f9f6:	da07      	bge.n	801fa08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f9fa:	fb05 2404 	mla	r4, r5, r4, r2
 801f9fe:	1424      	asrs	r4, r4, #16
 801fa00:	d402      	bmi.n	801fa08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa02:	42b4      	cmp	r4, r6
 801fa04:	f2c0 80b3 	blt.w	801fb6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fa08:	2600      	movs	r6, #0
 801fa0a:	199c      	adds	r4, r3, r6
 801fa0c:	2c00      	cmp	r4, #0
 801fa0e:	dc3e      	bgt.n	801fa8e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fa18:	f1bb 0f00 	cmp.w	fp, #0
 801fa1c:	f340 810e 	ble.w	801fc3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fa20:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa2e:	f1bb 0b01 	subs.w	fp, fp, #1
 801fa32:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa3a:	eeb0 6a62 	vmov.f32	s12, s5
 801fa3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa46:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa4a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fa4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa52:	eeb0 6a43 	vmov.f32	s12, s6
 801fa56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa5a:	ee12 2a90 	vmov	r2, s5
 801fa5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa62:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa66:	ee13 2a10 	vmov	r2, s6
 801fa6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa6e:	9311      	str	r3, [sp, #68]	; 0x44
 801fa70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa72:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa76:	9a03      	ldr	r2, [sp, #12]
 801fa78:	9312      	str	r3, [sp, #72]	; 0x48
 801fa7a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fa7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa80:	eeb0 3a67 	vmov.f32	s6, s15
 801fa84:	bf08      	it	eq
 801fa86:	4613      	moveq	r3, r2
 801fa88:	eef0 2a47 	vmov.f32	s5, s14
 801fa8c:	e789      	b.n	801f9a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fa8e:	140f      	asrs	r7, r1, #16
 801fa90:	d45f      	bmi.n	801fb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fa92:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fa96:	42bd      	cmp	r5, r7
 801fa98:	dd5b      	ble.n	801fb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fa9a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fa9e:	d458      	bmi.n	801fb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801faa0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801faa4:	4564      	cmp	r4, ip
 801faa6:	dd54      	ble.n	801fb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801faa8:	b22d      	sxth	r5, r5
 801faaa:	fb0c 7505 	mla	r5, ip, r5, r7
 801faae:	9c01      	ldr	r4, [sp, #4]
 801fab0:	5d64      	ldrb	r4, [r4, r5]
 801fab2:	2cff      	cmp	r4, #255	; 0xff
 801fab4:	d053      	beq.n	801fb5e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801fab6:	2c00      	cmp	r4, #0
 801fab8:	d04b      	beq.n	801fb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801faba:	9f00      	ldr	r7, [sp, #0]
 801fabc:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801fac0:	f06f 0501 	mvn.w	r5, #1
 801fac4:	4375      	muls	r5, r6
 801fac6:	9502      	str	r5, [sp, #8]
 801fac8:	5b45      	ldrh	r5, [r0, r5]
 801faca:	fa1f fc84 	uxth.w	ip, r4
 801face:	122f      	asrs	r7, r5, #8
 801fad0:	43e4      	mvns	r4, r4
 801fad2:	b2e4      	uxtb	r4, r4
 801fad4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801fad8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fadc:	fb17 f704 	smulbb	r7, r7, r4
 801fae0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fae4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fae8:	00ed      	lsls	r5, r5, #3
 801faea:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801faee:	b2ed      	uxtb	r5, r5
 801faf0:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801faf4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801faf8:	fb15 f504 	smulbb	r5, r5, r4
 801fafc:	fa5f f989 	uxtb.w	r9, r9
 801fb00:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fb04:	fb09 550c 	mla	r5, r9, ip, r5
 801fb08:	fb1a fa04 	smulbb	sl, sl, r4
 801fb0c:	fa1f fe8e 	uxth.w	lr, lr
 801fb10:	b2ad      	uxth	r5, r5
 801fb12:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb16:	fb07 a70c 	mla	r7, r7, ip, sl
 801fb1a:	f10e 0401 	add.w	r4, lr, #1
 801fb1e:	f105 0a01 	add.w	sl, r5, #1
 801fb22:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801fb26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fb2a:	b2bf      	uxth	r7, r7
 801fb2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fb30:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fb34:	ea4a 0e0e 	orr.w	lr, sl, lr
 801fb38:	f107 0a01 	add.w	sl, r7, #1
 801fb3c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fb40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb44:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fb48:	9c02      	ldr	r4, [sp, #8]
 801fb4a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801fb4e:	f820 e004 	strh.w	lr, [r0, r4]
 801fb52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fb54:	4421      	add	r1, r4
 801fb56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb58:	3e01      	subs	r6, #1
 801fb5a:	4422      	add	r2, r4
 801fb5c:	e755      	b.n	801fa0a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fb5e:	9c00      	ldr	r4, [sp, #0]
 801fb60:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801fb64:	f06f 0401 	mvn.w	r4, #1
 801fb68:	4374      	muls	r4, r6
 801fb6a:	5305      	strh	r5, [r0, r4]
 801fb6c:	e7f1      	b.n	801fb52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb6e:	f04f 0900 	mov.w	r9, #0
 801fb72:	eba3 0409 	sub.w	r4, r3, r9
 801fb76:	2c00      	cmp	r4, #0
 801fb78:	f77f af4a 	ble.w	801fa10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fb7c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fb80:	1414      	asrs	r4, r2, #16
 801fb82:	140d      	asrs	r5, r1, #16
 801fb84:	fb06 5504 	mla	r5, r6, r4, r5
 801fb88:	9c01      	ldr	r4, [sp, #4]
 801fb8a:	5d64      	ldrb	r4, [r4, r5]
 801fb8c:	2cff      	cmp	r4, #255	; 0xff
 801fb8e:	d04f      	beq.n	801fc30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801fb90:	2c00      	cmp	r4, #0
 801fb92:	d046      	beq.n	801fc22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fb94:	9e00      	ldr	r6, [sp, #0]
 801fb96:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801fb9a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801fb9e:	b2a7      	uxth	r7, r4
 801fba0:	122e      	asrs	r6, r5, #8
 801fba2:	43e4      	mvns	r4, r4
 801fba4:	b2e4      	uxtb	r4, r4
 801fba6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fbaa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fbae:	fb16 f604 	smulbb	r6, r6, r4
 801fbb2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fbb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fbba:	00ed      	lsls	r5, r5, #3
 801fbbc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fbc0:	b2ed      	uxtb	r5, r5
 801fbc2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fbc6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fbca:	fb15 f504 	smulbb	r5, r5, r4
 801fbce:	fa5f fe8e 	uxtb.w	lr, lr
 801fbd2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fbd6:	fb0e 5507 	mla	r5, lr, r7, r5
 801fbda:	fb1a fa04 	smulbb	sl, sl, r4
 801fbde:	fa1f fc8c 	uxth.w	ip, ip
 801fbe2:	b2ad      	uxth	r5, r5
 801fbe4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fbe8:	fb06 a607 	mla	r6, r6, r7, sl
 801fbec:	f10c 0401 	add.w	r4, ip, #1
 801fbf0:	f105 0a01 	add.w	sl, r5, #1
 801fbf4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fbf8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fbfc:	b2b6      	uxth	r6, r6
 801fbfe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fc02:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fc06:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fc0a:	f106 0a01 	add.w	sl, r6, #1
 801fc0e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fc12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fc16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fc1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fc1e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801fc22:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fc24:	4421      	add	r1, r4
 801fc26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fc28:	f109 0901 	add.w	r9, r9, #1
 801fc2c:	4422      	add	r2, r4
 801fc2e:	e7a0      	b.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fc30:	9c00      	ldr	r4, [sp, #0]
 801fc32:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801fc36:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801fc3a:	e7f2      	b.n	801fc22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fc3c:	b005      	add	sp, #20
 801fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc46:	b085      	sub	sp, #20
 801fc48:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fc4a:	9203      	str	r2, [sp, #12]
 801fc4c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801fc50:	9201      	str	r2, [sp, #4]
 801fc52:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fc56:	9100      	str	r1, [sp, #0]
 801fc58:	6841      	ldr	r1, [r0, #4]
 801fc5a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fc5e:	fb01 2404 	mla	r4, r1, r4, r2
 801fc62:	6802      	ldr	r2, [r0, #0]
 801fc64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fc68:	f8de 2000 	ldr.w	r2, [lr]
 801fc6c:	9202      	str	r2, [sp, #8]
 801fc6e:	9a01      	ldr	r2, [sp, #4]
 801fc70:	43d6      	mvns	r6, r2
 801fc72:	b2f6      	uxtb	r6, r6
 801fc74:	9a00      	ldr	r2, [sp, #0]
 801fc76:	2a00      	cmp	r2, #0
 801fc78:	dc03      	bgt.n	801fc82 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fc7a:	9a03      	ldr	r2, [sp, #12]
 801fc7c:	2a00      	cmp	r2, #0
 801fc7e:	f340 8124 	ble.w	801feca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fc82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fc84:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801fc88:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801fc8c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc92:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	dd0e      	ble.n	801fcb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fc9a:	1408      	asrs	r0, r1, #16
 801fc9c:	d405      	bmi.n	801fcaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc9e:	4560      	cmp	r0, ip
 801fca0:	da03      	bge.n	801fcaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fca2:	1410      	asrs	r0, r2, #16
 801fca4:	d401      	bmi.n	801fcaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fca6:	42b8      	cmp	r0, r7
 801fca8:	db07      	blt.n	801fcba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fcaa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fcac:	4401      	add	r1, r0
 801fcae:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fcb0:	3b01      	subs	r3, #1
 801fcb2:	4402      	add	r2, r0
 801fcb4:	3402      	adds	r4, #2
 801fcb6:	e7ee      	b.n	801fc96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fcb8:	d06e      	beq.n	801fd98 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fcba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fcbc:	1e58      	subs	r0, r3, #1
 801fcbe:	fb05 1500 	mla	r5, r5, r0, r1
 801fcc2:	142d      	asrs	r5, r5, #16
 801fcc4:	d45c      	bmi.n	801fd80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fcc6:	4565      	cmp	r5, ip
 801fcc8:	da5a      	bge.n	801fd80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fcca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fccc:	fb05 2000 	mla	r0, r5, r0, r2
 801fcd0:	1400      	asrs	r0, r0, #16
 801fcd2:	d455      	bmi.n	801fd80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fcd4:	42b8      	cmp	r0, r7
 801fcd6:	da53      	bge.n	801fd80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fcd8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801fcdc:	4699      	mov	r9, r3
 801fcde:	46a2      	mov	sl, r4
 801fce0:	f1b9 0f00 	cmp.w	r9, #0
 801fce4:	dd54      	ble.n	801fd90 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fce6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fcea:	140d      	asrs	r5, r1, #16
 801fcec:	1410      	asrs	r0, r2, #16
 801fcee:	fb07 5000 	mla	r0, r7, r0, r5
 801fcf2:	9d02      	ldr	r5, [sp, #8]
 801fcf4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801fcf8:	f8ba 5000 	ldrh.w	r5, [sl]
 801fcfc:	122f      	asrs	r7, r5, #8
 801fcfe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fd02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd06:	fb17 f706 	smulbb	r7, r7, r6
 801fd0a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fd0e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd12:	00ed      	lsls	r5, r5, #3
 801fd14:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801fd18:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801fd1c:	10c7      	asrs	r7, r0, #3
 801fd1e:	b2ed      	uxtb	r5, r5
 801fd20:	00c0      	lsls	r0, r0, #3
 801fd22:	fb18 f806 	smulbb	r8, r8, r6
 801fd26:	fb15 f506 	smulbb	r5, r5, r6
 801fd2a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fd2e:	b2c0      	uxtb	r0, r0
 801fd30:	fa1f fc8c 	uxth.w	ip, ip
 801fd34:	fb07 870b 	mla	r7, r7, fp, r8
 801fd38:	fb00 500b 	mla	r0, r0, fp, r5
 801fd3c:	b280      	uxth	r0, r0
 801fd3e:	b2bf      	uxth	r7, r7
 801fd40:	f10c 0501 	add.w	r5, ip, #1
 801fd44:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fd48:	f107 0801 	add.w	r8, r7, #1
 801fd4c:	1c45      	adds	r5, r0, #1
 801fd4e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fd52:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fd56:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd58:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fd5c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fd60:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fd64:	ea45 0c0c 	orr.w	ip, r5, ip
 801fd68:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fd6c:	4401      	add	r1, r0
 801fd6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd70:	ea4c 0c08 	orr.w	ip, ip, r8
 801fd74:	f82a cb02 	strh.w	ip, [sl], #2
 801fd78:	4402      	add	r2, r0
 801fd7a:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd7e:	e7af      	b.n	801fce0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fd80:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801fd84:	f04f 0800 	mov.w	r8, #0
 801fd88:	eb03 0008 	add.w	r0, r3, r8
 801fd8c:	2800      	cmp	r0, #0
 801fd8e:	dc41      	bgt.n	801fe14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801fd90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd98:	9b00      	ldr	r3, [sp, #0]
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	f340 8095 	ble.w	801feca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fda0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fda4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fda8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fdac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fdb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdba:	eef0 6a62 	vmov.f32	s13, s5
 801fdbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdca:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801fdce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdd2:	eef0 6a43 	vmov.f32	s13, s6
 801fdd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdda:	ee12 2a90 	vmov	r2, s5
 801fdde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fde2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fde6:	ee13 2a10 	vmov	r2, s6
 801fdea:	9311      	str	r3, [sp, #68]	; 0x44
 801fdec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdee:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdf2:	9312      	str	r3, [sp, #72]	; 0x48
 801fdf4:	9b00      	ldr	r3, [sp, #0]
 801fdf6:	9a03      	ldr	r2, [sp, #12]
 801fdf8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdfc:	3b01      	subs	r3, #1
 801fdfe:	9300      	str	r3, [sp, #0]
 801fe00:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801fe04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe06:	eeb0 3a67 	vmov.f32	s6, s15
 801fe0a:	bf08      	it	eq
 801fe0c:	4613      	moveq	r3, r2
 801fe0e:	eef0 2a47 	vmov.f32	s5, s14
 801fe12:	e72f      	b.n	801fc74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fe14:	140f      	asrs	r7, r1, #16
 801fe16:	d451      	bmi.n	801febc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fe18:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fe1c:	42bd      	cmp	r5, r7
 801fe1e:	dd4d      	ble.n	801febc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fe20:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fe24:	d44a      	bmi.n	801febc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fe26:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fe2a:	4560      	cmp	r0, ip
 801fe2c:	dd46      	ble.n	801febc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fe2e:	b22d      	sxth	r5, r5
 801fe30:	fb0c 7505 	mla	r5, ip, r5, r7
 801fe34:	9802      	ldr	r0, [sp, #8]
 801fe36:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801fe3a:	f06f 0501 	mvn.w	r5, #1
 801fe3e:	fb05 fb08 	mul.w	fp, r5, r8
 801fe42:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fe46:	f834 500b 	ldrh.w	r5, [r4, fp]
 801fe4a:	122f      	asrs	r7, r5, #8
 801fe4c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fe50:	fb17 f706 	smulbb	r7, r7, r6
 801fe54:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801fe58:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fe5c:	00ed      	lsls	r5, r5, #3
 801fe5e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801fe62:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fe66:	10c7      	asrs	r7, r0, #3
 801fe68:	b2ed      	uxtb	r5, r5
 801fe6a:	00c0      	lsls	r0, r0, #3
 801fe6c:	fb19 f906 	smulbb	r9, r9, r6
 801fe70:	fb15 f506 	smulbb	r5, r5, r6
 801fe74:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fe78:	b2c0      	uxtb	r0, r0
 801fe7a:	fa1f fc8c 	uxth.w	ip, ip
 801fe7e:	fb07 970a 	mla	r7, r7, sl, r9
 801fe82:	fb00 500a 	mla	r0, r0, sl, r5
 801fe86:	b2bf      	uxth	r7, r7
 801fe88:	b280      	uxth	r0, r0
 801fe8a:	f10c 0501 	add.w	r5, ip, #1
 801fe8e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fe92:	f107 0901 	add.w	r9, r7, #1
 801fe96:	1c45      	adds	r5, r0, #1
 801fe98:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fe9c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801fea0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fea4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fea8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801feac:	ea45 0c0c 	orr.w	ip, r5, ip
 801feb0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801feb4:	ea4c 0c09 	orr.w	ip, ip, r9
 801feb8:	f824 c00b 	strh.w	ip, [r4, fp]
 801febc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801febe:	4401      	add	r1, r0
 801fec0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fec2:	f108 38ff 	add.w	r8, r8, #4294967295
 801fec6:	4402      	add	r2, r0
 801fec8:	e75e      	b.n	801fd88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801feca:	b005      	add	sp, #20
 801fecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fed0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed4:	b085      	sub	sp, #20
 801fed6:	4693      	mov	fp, r2
 801fed8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801feda:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fedc:	6870      	ldr	r0, [r6, #4]
 801fede:	9101      	str	r1, [sp, #4]
 801fee0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fee4:	fb00 2404 	mla	r4, r0, r4, r2
 801fee8:	6832      	ldr	r2, [r6, #0]
 801feea:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801feee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fef2:	682a      	ldr	r2, [r5, #0]
 801fef4:	9202      	str	r2, [sp, #8]
 801fef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fefa:	9a01      	ldr	r2, [sp, #4]
 801fefc:	2a00      	cmp	r2, #0
 801fefe:	dc03      	bgt.n	801ff08 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff00:	f1bb 0f00 	cmp.w	fp, #0
 801ff04:	f340 809a 	ble.w	802003c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ff08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ff0a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ff0e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ff12:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	dd0c      	ble.n	801ff3a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff20:	1406      	asrs	r6, r0, #16
 801ff22:	d405      	bmi.n	801ff30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ff24:	454e      	cmp	r6, r9
 801ff26:	da03      	bge.n	801ff30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ff28:	1416      	asrs	r6, r2, #16
 801ff2a:	d401      	bmi.n	801ff30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ff2c:	4546      	cmp	r6, r8
 801ff2e:	db05      	blt.n	801ff3c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ff30:	4470      	add	r0, lr
 801ff32:	4462      	add	r2, ip
 801ff34:	3b01      	subs	r3, #1
 801ff36:	3402      	adds	r4, #2
 801ff38:	e7f0      	b.n	801ff1c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ff3a:	d00f      	beq.n	801ff5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ff3c:	1e5e      	subs	r6, r3, #1
 801ff3e:	fb0e 0706 	mla	r7, lr, r6, r0
 801ff42:	143f      	asrs	r7, r7, #16
 801ff44:	d541      	bpl.n	801ffca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ff46:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ff4a:	4698      	mov	r8, r3
 801ff4c:	9603      	str	r6, [sp, #12]
 801ff4e:	f1b8 0f00 	cmp.w	r8, #0
 801ff52:	dc56      	bgt.n	8020002 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ff54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff58:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff5c:	9b01      	ldr	r3, [sp, #4]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	dd6c      	ble.n	802003c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ff62:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff78:	eeb0 6a62 	vmov.f32	s12, s5
 801ff7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff84:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff88:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ff8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff90:	eeb0 6a43 	vmov.f32	s12, s6
 801ff94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff98:	ee12 2a90 	vmov	r2, s5
 801ff9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffa0:	fb92 fef3 	sdiv	lr, r2, r3
 801ffa4:	ee13 2a10 	vmov	r2, s6
 801ffa8:	fb92 fcf3 	sdiv	ip, r2, r3
 801ffac:	9b01      	ldr	r3, [sp, #4]
 801ffae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffb2:	3b01      	subs	r3, #1
 801ffb4:	9301      	str	r3, [sp, #4]
 801ffb6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ffba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffbc:	eeb0 3a67 	vmov.f32	s6, s15
 801ffc0:	bf08      	it	eq
 801ffc2:	465b      	moveq	r3, fp
 801ffc4:	eef0 2a47 	vmov.f32	s5, s14
 801ffc8:	e797      	b.n	801fefa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ffca:	454f      	cmp	r7, r9
 801ffcc:	dabb      	bge.n	801ff46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ffce:	fb0c 2606 	mla	r6, ip, r6, r2
 801ffd2:	1436      	asrs	r6, r6, #16
 801ffd4:	d4b7      	bmi.n	801ff46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ffd6:	4546      	cmp	r6, r8
 801ffd8:	dab5      	bge.n	801ff46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ffda:	461e      	mov	r6, r3
 801ffdc:	46a0      	mov	r8, r4
 801ffde:	2e00      	cmp	r6, #0
 801ffe0:	ddb8      	ble.n	801ff54 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ffe2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ffe6:	9902      	ldr	r1, [sp, #8]
 801ffe8:	1417      	asrs	r7, r2, #16
 801ffea:	ea4f 4920 	mov.w	r9, r0, asr #16
 801ffee:	fb0a 9707 	mla	r7, sl, r7, r9
 801fff2:	4470      	add	r0, lr
 801fff4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801fff8:	f828 7b02 	strh.w	r7, [r8], #2
 801fffc:	4462      	add	r2, ip
 801fffe:	3e01      	subs	r6, #1
 8020000:	e7ed      	b.n	801ffde <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020002:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020006:	d414      	bmi.n	8020032 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020008:	68ae      	ldr	r6, [r5, #8]
 802000a:	454e      	cmp	r6, r9
 802000c:	dd11      	ble.n	8020032 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802000e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020012:	d40e      	bmi.n	8020032 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020014:	68ef      	ldr	r7, [r5, #12]
 8020016:	4557      	cmp	r7, sl
 8020018:	dd0b      	ble.n	8020032 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802001a:	b236      	sxth	r6, r6
 802001c:	fb0a 9606 	mla	r6, sl, r6, r9
 8020020:	9f02      	ldr	r7, [sp, #8]
 8020022:	f06f 0101 	mvn.w	r1, #1
 8020026:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 802002a:	fb01 f608 	mul.w	r6, r1, r8
 802002e:	9903      	ldr	r1, [sp, #12]
 8020030:	538f      	strh	r7, [r1, r6]
 8020032:	4470      	add	r0, lr
 8020034:	4462      	add	r2, ip
 8020036:	f108 38ff 	add.w	r8, r8, #4294967295
 802003a:	e788      	b.n	801ff4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802003c:	b005      	add	sp, #20
 802003e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020042 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020046:	b085      	sub	sp, #20
 8020048:	468b      	mov	fp, r1
 802004a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802004c:	9202      	str	r2, [sp, #8]
 802004e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020052:	9203      	str	r2, [sp, #12]
 8020054:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020058:	6841      	ldr	r1, [r0, #4]
 802005a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802005e:	fb01 2404 	mla	r4, r1, r4, r2
 8020062:	6802      	ldr	r2, [r0, #0]
 8020064:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020068:	f8d8 2000 	ldr.w	r2, [r8]
 802006c:	9200      	str	r2, [sp, #0]
 802006e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020072:	f1bb 0f00 	cmp.w	fp, #0
 8020076:	dc03      	bgt.n	8020080 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020078:	9a02      	ldr	r2, [sp, #8]
 802007a:	2a00      	cmp	r2, #0
 802007c:	f340 8134 	ble.w	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020082:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020086:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 802008a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802008e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020090:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020094:	2b00      	cmp	r3, #0
 8020096:	dd0e      	ble.n	80200b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020098:	1402      	asrs	r2, r0, #16
 802009a:	d405      	bmi.n	80200a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802009c:	42ba      	cmp	r2, r7
 802009e:	da03      	bge.n	80200a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80200a0:	140a      	asrs	r2, r1, #16
 80200a2:	d401      	bmi.n	80200a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80200a4:	42b2      	cmp	r2, r6
 80200a6:	db07      	blt.n	80200b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80200a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80200aa:	4410      	add	r0, r2
 80200ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200ae:	3b01      	subs	r3, #1
 80200b0:	4411      	add	r1, r2
 80200b2:	3402      	adds	r4, #2
 80200b4:	e7ee      	b.n	8020094 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80200b6:	d019      	beq.n	80200ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80200b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80200ba:	1e5a      	subs	r2, r3, #1
 80200bc:	fb05 0502 	mla	r5, r5, r2, r0
 80200c0:	142d      	asrs	r5, r5, #16
 80200c2:	d409      	bmi.n	80200d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80200c4:	42bd      	cmp	r5, r7
 80200c6:	da07      	bge.n	80200d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80200c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80200ca:	fb05 1202 	mla	r2, r5, r2, r1
 80200ce:	1412      	asrs	r2, r2, #16
 80200d0:	d402      	bmi.n	80200d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80200d2:	42b2      	cmp	r2, r6
 80200d4:	f2c0 80aa 	blt.w	802022c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80200d8:	f04f 0c00 	mov.w	ip, #0
 80200dc:	eb03 020c 	add.w	r2, r3, ip
 80200e0:	2a00      	cmp	r2, #0
 80200e2:	dc3e      	bgt.n	8020162 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80200e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80200ec:	f1bb 0f00 	cmp.w	fp, #0
 80200f0:	f340 80fa 	ble.w	80202e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80200f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020102:	f1bb 0b01 	subs.w	fp, fp, #1
 8020106:	ee31 1a05 	vadd.f32	s2, s2, s10
 802010a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802010e:	eeb0 6a62 	vmov.f32	s12, s5
 8020112:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020116:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802011a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802011e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020122:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020126:	eeb0 6a43 	vmov.f32	s12, s6
 802012a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802012e:	ee12 2a90 	vmov	r2, s5
 8020132:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020136:	fb92 f3f3 	sdiv	r3, r2, r3
 802013a:	ee13 2a10 	vmov	r2, s6
 802013e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020142:	9311      	str	r3, [sp, #68]	; 0x44
 8020144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020146:	fb92 f3f3 	sdiv	r3, r2, r3
 802014a:	9a02      	ldr	r2, [sp, #8]
 802014c:	9312      	str	r3, [sp, #72]	; 0x48
 802014e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020154:	eeb0 3a67 	vmov.f32	s6, s15
 8020158:	bf08      	it	eq
 802015a:	4613      	moveq	r3, r2
 802015c:	eef0 2a47 	vmov.f32	s5, s14
 8020160:	e787      	b.n	8020072 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020162:	1406      	asrs	r6, r0, #16
 8020164:	d45b      	bmi.n	802021e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020166:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802016a:	42b5      	cmp	r5, r6
 802016c:	dd57      	ble.n	802021e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802016e:	140f      	asrs	r7, r1, #16
 8020170:	d455      	bmi.n	802021e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020172:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8020176:	42ba      	cmp	r2, r7
 8020178:	dd51      	ble.n	802021e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802017a:	b22d      	sxth	r5, r5
 802017c:	fb07 6505 	mla	r5, r7, r5, r6
 8020180:	9a00      	ldr	r2, [sp, #0]
 8020182:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020186:	0e2e      	lsrs	r6, r5, #24
 8020188:	d049      	beq.n	802021e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802018a:	f06f 0201 	mvn.w	r2, #1
 802018e:	fb02 f20c 	mul.w	r2, r2, ip
 8020192:	9201      	str	r2, [sp, #4]
 8020194:	f834 e002 	ldrh.w	lr, [r4, r2]
 8020198:	9a03      	ldr	r2, [sp, #12]
 802019a:	4356      	muls	r6, r2
 802019c:	1c72      	adds	r2, r6, #1
 802019e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80201a2:	1212      	asrs	r2, r2, #8
 80201a4:	fa1f f982 	uxth.w	r9, r2
 80201a8:	ea4f 272e 	mov.w	r7, lr, asr #8
 80201ac:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80201b0:	43d2      	mvns	r2, r2
 80201b2:	b2d2      	uxtb	r2, r2
 80201b4:	fb16 f609 	smulbb	r6, r6, r9
 80201b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80201bc:	fb07 6702 	mla	r7, r7, r2, r6
 80201c0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80201c4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80201c8:	b2ed      	uxtb	r5, r5
 80201ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80201ce:	fa5f fe8e 	uxtb.w	lr, lr
 80201d2:	fb15 f509 	smulbb	r5, r5, r9
 80201d6:	fb0e 5502 	mla	r5, lr, r2, r5
 80201da:	b2bf      	uxth	r7, r7
 80201dc:	fb1a fa09 	smulbb	sl, sl, r9
 80201e0:	b2ad      	uxth	r5, r5
 80201e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80201e6:	fb06 a602 	mla	r6, r6, r2, sl
 80201ea:	1c7a      	adds	r2, r7, #1
 80201ec:	f105 0a01 	add.w	sl, r5, #1
 80201f0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80201f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80201f8:	b2b6      	uxth	r6, r6
 80201fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80201fe:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020202:	ea4a 0707 	orr.w	r7, sl, r7
 8020206:	f106 0a01 	add.w	sl, r6, #1
 802020a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802020e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020212:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020216:	9a01      	ldr	r2, [sp, #4]
 8020218:	ea47 070a 	orr.w	r7, r7, sl
 802021c:	52a7      	strh	r7, [r4, r2]
 802021e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020220:	4410      	add	r0, r2
 8020222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020224:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020228:	4411      	add	r1, r2
 802022a:	e757      	b.n	80200dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802022c:	f04f 0e00 	mov.w	lr, #0
 8020230:	eba3 020e 	sub.w	r2, r3, lr
 8020234:	2a00      	cmp	r2, #0
 8020236:	f77f af55 	ble.w	80200e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802023a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802023e:	1405      	asrs	r5, r0, #16
 8020240:	140a      	asrs	r2, r1, #16
 8020242:	fb06 5202 	mla	r2, r6, r2, r5
 8020246:	9d00      	ldr	r5, [sp, #0]
 8020248:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 802024c:	0e2e      	lsrs	r6, r5, #24
 802024e:	d044      	beq.n	80202da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8020250:	9a03      	ldr	r2, [sp, #12]
 8020252:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020256:	4356      	muls	r6, r2
 8020258:	1c72      	adds	r2, r6, #1
 802025a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 802025e:	1212      	asrs	r2, r2, #8
 8020260:	fa1f f982 	uxth.w	r9, r2
 8020264:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020268:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802026c:	43d2      	mvns	r2, r2
 802026e:	b2d2      	uxtb	r2, r2
 8020270:	fb16 f609 	smulbb	r6, r6, r9
 8020274:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020278:	fb07 6702 	mla	r7, r7, r2, r6
 802027c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020280:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020284:	b2ed      	uxtb	r5, r5
 8020286:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802028a:	fa5f fc8c 	uxtb.w	ip, ip
 802028e:	fb15 f509 	smulbb	r5, r5, r9
 8020292:	fb0c 5502 	mla	r5, ip, r2, r5
 8020296:	b2bf      	uxth	r7, r7
 8020298:	fb1a fa09 	smulbb	sl, sl, r9
 802029c:	b2ad      	uxth	r5, r5
 802029e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202a2:	fb06 a602 	mla	r6, r6, r2, sl
 80202a6:	1c7a      	adds	r2, r7, #1
 80202a8:	f105 0a01 	add.w	sl, r5, #1
 80202ac:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80202b0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80202b4:	b2b6      	uxth	r6, r6
 80202b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80202ba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202be:	ea4a 0707 	orr.w	r7, sl, r7
 80202c2:	f106 0a01 	add.w	sl, r6, #1
 80202c6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80202ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80202ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80202d2:	ea47 070a 	orr.w	r7, r7, sl
 80202d6:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80202da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202dc:	4410      	add	r0, r2
 80202de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202e0:	f10e 0e01 	add.w	lr, lr, #1
 80202e4:	4411      	add	r1, r2
 80202e6:	e7a3      	b.n	8020230 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80202e8:	b005      	add	sp, #20
 80202ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080202f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f4:	b085      	sub	sp, #20
 80202f6:	468b      	mov	fp, r1
 80202f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80202fa:	9203      	str	r2, [sp, #12]
 80202fc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020300:	6861      	ldr	r1, [r4, #4]
 8020302:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8020306:	fb01 2000 	mla	r0, r1, r0, r2
 802030a:	6822      	ldr	r2, [r4, #0]
 802030c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020310:	f8d9 2000 	ldr.w	r2, [r9]
 8020314:	9200      	str	r2, [sp, #0]
 8020316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802031a:	f1bb 0f00 	cmp.w	fp, #0
 802031e:	dc03      	bgt.n	8020328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020320:	9a03      	ldr	r2, [sp, #12]
 8020322:	2a00      	cmp	r2, #0
 8020324:	f340 814a 	ble.w	80205bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802032a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802032e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020332:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020338:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802033c:	2b00      	cmp	r3, #0
 802033e:	dd0e      	ble.n	802035e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020340:	140c      	asrs	r4, r1, #16
 8020342:	d405      	bmi.n	8020350 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020344:	42bc      	cmp	r4, r7
 8020346:	da03      	bge.n	8020350 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020348:	1414      	asrs	r4, r2, #16
 802034a:	d401      	bmi.n	8020350 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802034c:	42b4      	cmp	r4, r6
 802034e:	db07      	blt.n	8020360 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020350:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020352:	4421      	add	r1, r4
 8020354:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020356:	3b01      	subs	r3, #1
 8020358:	4422      	add	r2, r4
 802035a:	3002      	adds	r0, #2
 802035c:	e7ee      	b.n	802033c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802035e:	d017      	beq.n	8020390 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020360:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020362:	1e5c      	subs	r4, r3, #1
 8020364:	fb05 1504 	mla	r5, r5, r4, r1
 8020368:	142d      	asrs	r5, r5, #16
 802036a:	d409      	bmi.n	8020380 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802036c:	42bd      	cmp	r5, r7
 802036e:	da07      	bge.n	8020380 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020370:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020372:	fb05 2404 	mla	r4, r5, r4, r2
 8020376:	1424      	asrs	r4, r4, #16
 8020378:	d402      	bmi.n	8020380 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802037a:	42b4      	cmp	r4, r6
 802037c:	f2c0 80ba 	blt.w	80204f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020380:	2700      	movs	r7, #0
 8020382:	19dc      	adds	r4, r3, r7
 8020384:	2c00      	cmp	r4, #0
 8020386:	dc3e      	bgt.n	8020406 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020388:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802038c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020390:	f1bb 0f00 	cmp.w	fp, #0
 8020394:	f340 8112 	ble.w	80205bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020398:	ee30 0a04 	vadd.f32	s0, s0, s8
 802039c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203a6:	f1bb 0b01 	subs.w	fp, fp, #1
 80203aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203b2:	eeb0 6a62 	vmov.f32	s12, s5
 80203b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80203c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203ca:	eeb0 6a43 	vmov.f32	s12, s6
 80203ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203d2:	ee12 2a90 	vmov	r2, s5
 80203d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203da:	fb92 f3f3 	sdiv	r3, r2, r3
 80203de:	ee13 2a10 	vmov	r2, s6
 80203e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203e6:	9311      	str	r3, [sp, #68]	; 0x44
 80203e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ee:	9a03      	ldr	r2, [sp, #12]
 80203f0:	9312      	str	r3, [sp, #72]	; 0x48
 80203f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80203f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203f8:	eeb0 3a67 	vmov.f32	s6, s15
 80203fc:	bf08      	it	eq
 80203fe:	4613      	moveq	r3, r2
 8020400:	eef0 2a47 	vmov.f32	s5, s14
 8020404:	e789      	b.n	802031a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020406:	140e      	asrs	r6, r1, #16
 8020408:	d45f      	bmi.n	80204ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802040a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 802040e:	42b5      	cmp	r5, r6
 8020410:	dd5b      	ble.n	80204ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020412:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020416:	d458      	bmi.n	80204ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020418:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802041c:	4564      	cmp	r4, ip
 802041e:	dd54      	ble.n	80204ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020420:	b22d      	sxth	r5, r5
 8020422:	fb0c 6505 	mla	r5, ip, r5, r6
 8020426:	9c00      	ldr	r4, [sp, #0]
 8020428:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 802042c:	ea5f 6e1c 	movs.w	lr, ip, lsr #24
 8020430:	d04b      	beq.n	80204ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020432:	fa5f f48e 	uxtb.w	r4, lr
 8020436:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802043a:	9401      	str	r4, [sp, #4]
 802043c:	ea4f 461c 	mov.w	r6, ip, lsr #16
 8020440:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020444:	f06f 0401 	mvn.w	r4, #1
 8020448:	fa5f fc8c 	uxtb.w	ip, ip
 802044c:	d043      	beq.n	80204d6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802044e:	437c      	muls	r4, r7
 8020450:	9402      	str	r4, [sp, #8]
 8020452:	f830 8004 	ldrh.w	r8, [r0, r4]
 8020456:	9c01      	ldr	r4, [sp, #4]
 8020458:	f8bd a004 	ldrh.w	sl, [sp, #4]
 802045c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020460:	43e4      	mvns	r4, r4
 8020462:	b2f6      	uxtb	r6, r6
 8020464:	b2e4      	uxtb	r4, r4
 8020466:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802046a:	fb16 f60a 	smulbb	r6, r6, sl
 802046e:	fb0e 6604 	mla	r6, lr, r4, r6
 8020472:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8020476:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802047a:	fa5f f888 	uxtb.w	r8, r8
 802047e:	fb1c fc0a 	smulbb	ip, ip, sl
 8020482:	fb08 cc04 	mla	ip, r8, r4, ip
 8020486:	b2ed      	uxtb	r5, r5
 8020488:	b2b6      	uxth	r6, r6
 802048a:	fb15 f50a 	smulbb	r5, r5, sl
 802048e:	fa1f fc8c 	uxth.w	ip, ip
 8020492:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020496:	fb0e 5e04 	mla	lr, lr, r4, r5
 802049a:	1c74      	adds	r4, r6, #1
 802049c:	f10c 0501 	add.w	r5, ip, #1
 80204a0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80204a4:	eb05 251c 	add.w	r5, r5, ip, lsr #8
 80204a8:	fa1f fe8e 	uxth.w	lr, lr
 80204ac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80204b0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80204b4:	432e      	orrs	r6, r5
 80204b6:	f10e 0501 	add.w	r5, lr, #1
 80204ba:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 80204be:	096d      	lsrs	r5, r5, #5
 80204c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80204c4:	9c02      	ldr	r4, [sp, #8]
 80204c6:	432e      	orrs	r6, r5
 80204c8:	5306      	strh	r6, [r0, r4]
 80204ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80204cc:	4421      	add	r1, r4
 80204ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80204d0:	3f01      	subs	r7, #1
 80204d2:	4422      	add	r2, r4
 80204d4:	e755      	b.n	8020382 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80204d6:	fb04 fe07 	mul.w	lr, r4, r7
 80204da:	f2a4 74fe 	subw	r4, r4, #2046	; 0x7fe
 80204de:	ea04 2606 	and.w	r6, r4, r6, lsl #8
 80204e2:	00ed      	lsls	r5, r5, #3
 80204e4:	ea46 06dc 	orr.w	r6, r6, ip, lsr #3
 80204e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80204ec:	432e      	orrs	r6, r5
 80204ee:	f820 600e 	strh.w	r6, [r0, lr]
 80204f2:	e7ea      	b.n	80204ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80204f4:	f04f 0800 	mov.w	r8, #0
 80204f8:	eba3 0408 	sub.w	r4, r3, r8
 80204fc:	2c00      	cmp	r4, #0
 80204fe:	f77f af43 	ble.w	8020388 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020502:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020506:	140d      	asrs	r5, r1, #16
 8020508:	1414      	asrs	r4, r2, #16
 802050a:	fb06 5404 	mla	r4, r6, r4, r5
 802050e:	9d00      	ldr	r5, [sp, #0]
 8020510:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
 8020514:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8020518:	d042      	beq.n	80205a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802051a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802051e:	ea4f 4517 	mov.w	r5, r7, lsr #16
 8020522:	ea4f 2617 	mov.w	r6, r7, lsr #8
 8020526:	fa5f f48c 	uxtb.w	r4, ip
 802052a:	b2ff      	uxtb	r7, r7
 802052c:	d03f      	beq.n	80205ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802052e:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 8020532:	fa1f fa84 	uxth.w	sl, r4
 8020536:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802053a:	43e4      	mvns	r4, r4
 802053c:	b2ed      	uxtb	r5, r5
 802053e:	b2e4      	uxtb	r4, r4
 8020540:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020544:	fb15 f50a 	smulbb	r5, r5, sl
 8020548:	fb0c 5504 	mla	r5, ip, r4, r5
 802054c:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8020550:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020554:	fa5f fe8e 	uxtb.w	lr, lr
 8020558:	fb17 f70a 	smulbb	r7, r7, sl
 802055c:	fb0e 7704 	mla	r7, lr, r4, r7
 8020560:	b2f6      	uxtb	r6, r6
 8020562:	b2ad      	uxth	r5, r5
 8020564:	fb16 f60a 	smulbb	r6, r6, sl
 8020568:	b2bf      	uxth	r7, r7
 802056a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802056e:	fb0c 6c04 	mla	ip, ip, r4, r6
 8020572:	1c6c      	adds	r4, r5, #1
 8020574:	1c7e      	adds	r6, r7, #1
 8020576:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 802057a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802057e:	fa1f fc8c 	uxth.w	ip, ip
 8020582:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020586:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802058a:	4335      	orrs	r5, r6
 802058c:	f10c 0601 	add.w	r6, ip, #1
 8020590:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020594:	0976      	lsrs	r6, r6, #5
 8020596:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802059a:	4335      	orrs	r5, r6
 802059c:	f820 5018 	strh.w	r5, [r0, r8, lsl #1]
 80205a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205a2:	4421      	add	r1, r4
 80205a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80205a6:	f108 0801 	add.w	r8, r8, #1
 80205aa:	4422      	add	r2, r4
 80205ac:	e7a4      	b.n	80204f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80205ae:	4c05      	ldr	r4, [pc, #20]	; (80205c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>)
 80205b0:	ea04 2505 	and.w	r5, r4, r5, lsl #8
 80205b4:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 80205b8:	00f6      	lsls	r6, r6, #3
 80205ba:	e7ec      	b.n	8020596 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80205bc:	b005      	add	sp, #20
 80205be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205c2:	bf00      	nop
 80205c4:	fffff800 	.word	0xfffff800

080205c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205cc:	b087      	sub	sp, #28
 80205ce:	468b      	mov	fp, r1
 80205d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80205d2:	9204      	str	r2, [sp, #16]
 80205d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80205d8:	9205      	str	r2, [sp, #20]
 80205da:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80205de:	6841      	ldr	r1, [r0, #4]
 80205e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80205e4:	fb01 2404 	mla	r4, r1, r4, r2
 80205e8:	6802      	ldr	r2, [r0, #0]
 80205ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80205ee:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80205f2:	3201      	adds	r2, #1
 80205f4:	f022 0201 	bic.w	r2, r2, #1
 80205f8:	9201      	str	r2, [sp, #4]
 80205fa:	f8d8 2000 	ldr.w	r2, [r8]
 80205fe:	9202      	str	r2, [sp, #8]
 8020600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020604:	f1bb 0f00 	cmp.w	fp, #0
 8020608:	dc03      	bgt.n	8020612 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802060a:	9a04      	ldr	r2, [sp, #16]
 802060c:	2a00      	cmp	r2, #0
 802060e:	f340 8146 	ble.w	802089e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020614:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020618:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 802061c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020622:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020626:	2b00      	cmp	r3, #0
 8020628:	dd0e      	ble.n	8020648 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802062a:	1402      	asrs	r2, r0, #16
 802062c:	d405      	bmi.n	802063a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802062e:	42ba      	cmp	r2, r7
 8020630:	da03      	bge.n	802063a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020632:	140a      	asrs	r2, r1, #16
 8020634:	d401      	bmi.n	802063a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020636:	42b2      	cmp	r2, r6
 8020638:	db07      	blt.n	802064a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802063a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802063c:	4410      	add	r0, r2
 802063e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020640:	3b01      	subs	r3, #1
 8020642:	4411      	add	r1, r2
 8020644:	3402      	adds	r4, #2
 8020646:	e7ee      	b.n	8020626 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020648:	d017      	beq.n	802067a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802064a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802064c:	1e5a      	subs	r2, r3, #1
 802064e:	fb05 0502 	mla	r5, r5, r2, r0
 8020652:	142d      	asrs	r5, r5, #16
 8020654:	d409      	bmi.n	802066a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020656:	42bd      	cmp	r5, r7
 8020658:	da07      	bge.n	802066a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802065a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802065c:	fb05 1202 	mla	r2, r5, r2, r1
 8020660:	1412      	asrs	r2, r2, #16
 8020662:	d402      	bmi.n	802066a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020664:	42b2      	cmp	r2, r6
 8020666:	f2c0 80b3 	blt.w	80207d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802066a:	2700      	movs	r7, #0
 802066c:	19da      	adds	r2, r3, r7
 802066e:	2a00      	cmp	r2, #0
 8020670:	dc3e      	bgt.n	80206f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020676:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802067a:	f1bb 0f00 	cmp.w	fp, #0
 802067e:	f340 810e 	ble.w	802089e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020682:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020686:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802068a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802068e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020690:	f1bb 0b01 	subs.w	fp, fp, #1
 8020694:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020698:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802069c:	eeb0 6a62 	vmov.f32	s12, s5
 80206a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80206a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80206a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80206ac:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80206b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80206b4:	eeb0 6a43 	vmov.f32	s12, s6
 80206b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80206bc:	ee12 2a90 	vmov	r2, s5
 80206c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80206c8:	ee13 2a10 	vmov	r2, s6
 80206cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80206d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80206d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80206d8:	9a04      	ldr	r2, [sp, #16]
 80206da:	9314      	str	r3, [sp, #80]	; 0x50
 80206dc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80206e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206e2:	eeb0 3a67 	vmov.f32	s6, s15
 80206e6:	bf08      	it	eq
 80206e8:	4613      	moveq	r3, r2
 80206ea:	eef0 2a47 	vmov.f32	s5, s14
 80206ee:	e789      	b.n	8020604 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80206f0:	1405      	asrs	r5, r0, #16
 80206f2:	d467      	bmi.n	80207c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80206f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80206f8:	42aa      	cmp	r2, r5
 80206fa:	dd63      	ble.n	80207c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80206fc:	140e      	asrs	r6, r1, #16
 80206fe:	d461      	bmi.n	80207c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020700:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8020704:	42b2      	cmp	r2, r6
 8020706:	dd5d      	ble.n	80207c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020708:	9a01      	ldr	r2, [sp, #4]
 802070a:	fb06 5502 	mla	r5, r6, r2, r5
 802070e:	086a      	lsrs	r2, r5, #1
 8020710:	9e02      	ldr	r6, [sp, #8]
 8020712:	5cb2      	ldrb	r2, [r6, r2]
 8020714:	07ee      	lsls	r6, r5, #31
 8020716:	bf54      	ite	pl
 8020718:	f002 020f 	andpl.w	r2, r2, #15
 802071c:	1112      	asrmi	r2, r2, #4
 802071e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020722:	b2d2      	uxtb	r2, r2
 8020724:	2a00      	cmp	r2, #0
 8020726:	d04d      	beq.n	80207c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020728:	4d5e      	ldr	r5, [pc, #376]	; (80208a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 802072a:	f8d5 c000 	ldr.w	ip, [r5]
 802072e:	f06f 0501 	mvn.w	r5, #1
 8020732:	437d      	muls	r5, r7
 8020734:	9503      	str	r5, [sp, #12]
 8020736:	f834 e005 	ldrh.w	lr, [r4, r5]
 802073a:	9d05      	ldr	r5, [sp, #20]
 802073c:	436a      	muls	r2, r5
 802073e:	1c55      	adds	r5, r2, #1
 8020740:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020744:	1212      	asrs	r2, r2, #8
 8020746:	fa1f f982 	uxth.w	r9, r2
 802074a:	ea4f 262e 	mov.w	r6, lr, asr #8
 802074e:	f3cc 4507 	ubfx	r5, ip, #16, #8
 8020752:	43d2      	mvns	r2, r2
 8020754:	b2d2      	uxtb	r2, r2
 8020756:	fb15 f509 	smulbb	r5, r5, r9
 802075a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802075e:	fb06 5602 	mla	r6, r6, r2, r5
 8020762:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020766:	ea4f 05ee 	mov.w	r5, lr, asr #3
 802076a:	fa5f fc8c 	uxtb.w	ip, ip
 802076e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020772:	fa5f fe8e 	uxtb.w	lr, lr
 8020776:	fb1c fc09 	smulbb	ip, ip, r9
 802077a:	fb0e cc02 	mla	ip, lr, r2, ip
 802077e:	b2b6      	uxth	r6, r6
 8020780:	fb1a fa09 	smulbb	sl, sl, r9
 8020784:	fa1f fc8c 	uxth.w	ip, ip
 8020788:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802078c:	fb05 a502 	mla	r5, r5, r2, sl
 8020790:	1c72      	adds	r2, r6, #1
 8020792:	f10c 0a01 	add.w	sl, ip, #1
 8020796:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802079a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802079e:	b2ad      	uxth	r5, r5
 80207a0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80207a4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80207a8:	ea4a 0606 	orr.w	r6, sl, r6
 80207ac:	f105 0a01 	add.w	sl, r5, #1
 80207b0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80207b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80207b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80207bc:	9a03      	ldr	r2, [sp, #12]
 80207be:	ea46 060a 	orr.w	r6, r6, sl
 80207c2:	52a6      	strh	r6, [r4, r2]
 80207c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80207c6:	4410      	add	r0, r2
 80207c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80207ca:	3f01      	subs	r7, #1
 80207cc:	4411      	add	r1, r2
 80207ce:	e74d      	b.n	802066c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80207d0:	f04f 0e00 	mov.w	lr, #0
 80207d4:	eba3 020e 	sub.w	r2, r3, lr
 80207d8:	2a00      	cmp	r2, #0
 80207da:	f77f af4a 	ble.w	8020672 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80207de:	9e01      	ldr	r6, [sp, #4]
 80207e0:	1402      	asrs	r2, r0, #16
 80207e2:	140d      	asrs	r5, r1, #16
 80207e4:	fb06 2505 	mla	r5, r6, r5, r2
 80207e8:	086a      	lsrs	r2, r5, #1
 80207ea:	9e02      	ldr	r6, [sp, #8]
 80207ec:	5cb2      	ldrb	r2, [r6, r2]
 80207ee:	07ed      	lsls	r5, r5, #31
 80207f0:	bf54      	ite	pl
 80207f2:	f002 020f 	andpl.w	r2, r2, #15
 80207f6:	1112      	asrmi	r2, r2, #4
 80207f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80207fc:	b2d2      	uxtb	r2, r2
 80207fe:	2a00      	cmp	r2, #0
 8020800:	d046      	beq.n	8020890 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020802:	4d28      	ldr	r5, [pc, #160]	; (80208a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020804:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020808:	682f      	ldr	r7, [r5, #0]
 802080a:	9d05      	ldr	r5, [sp, #20]
 802080c:	436a      	muls	r2, r5
 802080e:	1c55      	adds	r5, r2, #1
 8020810:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020814:	1212      	asrs	r2, r2, #8
 8020816:	fa1f f982 	uxth.w	r9, r2
 802081a:	ea4f 262c 	mov.w	r6, ip, asr #8
 802081e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8020822:	43d2      	mvns	r2, r2
 8020824:	b2d2      	uxtb	r2, r2
 8020826:	fb15 f509 	smulbb	r5, r5, r9
 802082a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802082e:	fb06 5602 	mla	r6, r6, r2, r5
 8020832:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020836:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802083a:	b2ff      	uxtb	r7, r7
 802083c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020840:	fa5f fc8c 	uxtb.w	ip, ip
 8020844:	fb17 f709 	smulbb	r7, r7, r9
 8020848:	fb0c 7702 	mla	r7, ip, r2, r7
 802084c:	b2b6      	uxth	r6, r6
 802084e:	fb1a fa09 	smulbb	sl, sl, r9
 8020852:	b2bf      	uxth	r7, r7
 8020854:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020858:	fb05 a502 	mla	r5, r5, r2, sl
 802085c:	1c72      	adds	r2, r6, #1
 802085e:	f107 0a01 	add.w	sl, r7, #1
 8020862:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020866:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802086a:	b2ad      	uxth	r5, r5
 802086c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020870:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020874:	ea4a 0606 	orr.w	r6, sl, r6
 8020878:	f105 0a01 	add.w	sl, r5, #1
 802087c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020880:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020884:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020888:	ea46 060a 	orr.w	r6, r6, sl
 802088c:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8020890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020892:	4410      	add	r0, r2
 8020894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020896:	f10e 0e01 	add.w	lr, lr, #1
 802089a:	4411      	add	r1, r2
 802089c:	e79a      	b.n	80207d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802089e:	b007      	add	sp, #28
 80208a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208a4:	20006708 	.word	0x20006708

080208a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208ac:	b087      	sub	sp, #28
 80208ae:	468b      	mov	fp, r1
 80208b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80208b2:	9205      	str	r2, [sp, #20]
 80208b4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80208b8:	6841      	ldr	r1, [r0, #4]
 80208ba:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80208be:	fb01 2404 	mla	r4, r1, r4, r2
 80208c2:	6802      	ldr	r2, [r0, #0]
 80208c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80208c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80208cc:	3201      	adds	r2, #1
 80208ce:	f022 0201 	bic.w	r2, r2, #1
 80208d2:	9201      	str	r2, [sp, #4]
 80208d4:	f8d8 2000 	ldr.w	r2, [r8]
 80208d8:	9202      	str	r2, [sp, #8]
 80208da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80208de:	f1bb 0f00 	cmp.w	fp, #0
 80208e2:	dc03      	bgt.n	80208ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80208e4:	9a05      	ldr	r2, [sp, #20]
 80208e6:	2a00      	cmp	r2, #0
 80208e8:	f340 8159 	ble.w	8020b9e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 80208ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208ee:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80208f2:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80208f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208fc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020900:	2b00      	cmp	r3, #0
 8020902:	dd0e      	ble.n	8020922 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020904:	1402      	asrs	r2, r0, #16
 8020906:	d405      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020908:	42ba      	cmp	r2, r7
 802090a:	da03      	bge.n	8020914 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802090c:	140a      	asrs	r2, r1, #16
 802090e:	d401      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020910:	42b2      	cmp	r2, r6
 8020912:	db07      	blt.n	8020924 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020914:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020916:	4410      	add	r0, r2
 8020918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802091a:	3b01      	subs	r3, #1
 802091c:	4411      	add	r1, r2
 802091e:	3402      	adds	r4, #2
 8020920:	e7ee      	b.n	8020900 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020922:	d017      	beq.n	8020954 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8020924:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020926:	1e5a      	subs	r2, r3, #1
 8020928:	fb05 0502 	mla	r5, r5, r2, r0
 802092c:	142d      	asrs	r5, r5, #16
 802092e:	d409      	bmi.n	8020944 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020930:	42bd      	cmp	r5, r7
 8020932:	da07      	bge.n	8020944 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020934:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020936:	fb05 1202 	mla	r2, r5, r2, r1
 802093a:	1412      	asrs	r2, r2, #16
 802093c:	d402      	bmi.n	8020944 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802093e:	42b2      	cmp	r2, r6
 8020940:	f2c0 80c3 	blt.w	8020aca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8020944:	2700      	movs	r7, #0
 8020946:	19da      	adds	r2, r3, r7
 8020948:	2a00      	cmp	r2, #0
 802094a:	dc3e      	bgt.n	80209ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802094c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020950:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020954:	f1bb 0f00 	cmp.w	fp, #0
 8020958:	f340 8121 	ble.w	8020b9e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 802095c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020960:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020964:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802096a:	f1bb 0b01 	subs.w	fp, fp, #1
 802096e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020972:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020976:	eeb0 6a62 	vmov.f32	s12, s5
 802097a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802097e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020982:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020986:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802098a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802098e:	eeb0 6a43 	vmov.f32	s12, s6
 8020992:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020996:	ee12 2a90 	vmov	r2, s5
 802099a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802099e:	fb92 f3f3 	sdiv	r3, r2, r3
 80209a2:	ee13 2a10 	vmov	r2, s6
 80209a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80209ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80209ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80209b2:	9a05      	ldr	r2, [sp, #20]
 80209b4:	9314      	str	r3, [sp, #80]	; 0x50
 80209b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80209ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80209bc:	eeb0 3a67 	vmov.f32	s6, s15
 80209c0:	bf08      	it	eq
 80209c2:	4613      	moveq	r3, r2
 80209c4:	eef0 2a47 	vmov.f32	s5, s14
 80209c8:	e789      	b.n	80208de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80209ca:	1405      	asrs	r5, r0, #16
 80209cc:	d465      	bmi.n	8020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 80209ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80209d2:	42aa      	cmp	r2, r5
 80209d4:	dd61      	ble.n	8020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 80209d6:	140e      	asrs	r6, r1, #16
 80209d8:	d45f      	bmi.n	8020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 80209da:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80209de:	42b2      	cmp	r2, r6
 80209e0:	dd5b      	ble.n	8020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 80209e2:	9a01      	ldr	r2, [sp, #4]
 80209e4:	fb06 5502 	mla	r5, r6, r2, r5
 80209e8:	086a      	lsrs	r2, r5, #1
 80209ea:	9e02      	ldr	r6, [sp, #8]
 80209ec:	5cb2      	ldrb	r2, [r6, r2]
 80209ee:	07ee      	lsls	r6, r5, #31
 80209f0:	bf54      	ite	pl
 80209f2:	f002 020f 	andpl.w	r2, r2, #15
 80209f6:	1112      	asrmi	r2, r2, #4
 80209f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80209fc:	b2d2      	uxtb	r2, r2
 80209fe:	2a00      	cmp	r2, #0
 8020a00:	d04b      	beq.n	8020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020a02:	4d68      	ldr	r5, [pc, #416]	; (8020ba4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020a04:	f8d5 9000 	ldr.w	r9, [r5]
 8020a08:	2aff      	cmp	r2, #255	; 0xff
 8020a0a:	ea4f 2519 	mov.w	r5, r9, lsr #8
 8020a0e:	ea4f 4619 	mov.w	r6, r9, lsr #16
 8020a12:	9503      	str	r5, [sp, #12]
 8020a14:	fa5f f989 	uxtb.w	r9, r9
 8020a18:	d045      	beq.n	8020aa6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020a1a:	f06f 0501 	mvn.w	r5, #1
 8020a1e:	437d      	muls	r5, r7
 8020a20:	fa1f fa82 	uxth.w	sl, r2
 8020a24:	f834 e005 	ldrh.w	lr, [r4, r5]
 8020a28:	9504      	str	r5, [sp, #16]
 8020a2a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020a2e:	43d2      	mvns	r2, r2
 8020a30:	b2f6      	uxtb	r6, r6
 8020a32:	b2d2      	uxtb	r2, r2
 8020a34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a38:	fb16 f60a 	smulbb	r6, r6, sl
 8020a3c:	fb0c 6602 	mla	r6, ip, r2, r6
 8020a40:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8020a44:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020a48:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8020a4c:	fa5f fe8e 	uxtb.w	lr, lr
 8020a50:	fb19 f90a 	smulbb	r9, r9, sl
 8020a54:	fb0e 9902 	mla	r9, lr, r2, r9
 8020a58:	b2b6      	uxth	r6, r6
 8020a5a:	fb15 f50a 	smulbb	r5, r5, sl
 8020a5e:	fa1f f989 	uxth.w	r9, r9
 8020a62:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020a66:	fb0c 5c02 	mla	ip, ip, r2, r5
 8020a6a:	1c72      	adds	r2, r6, #1
 8020a6c:	f109 0501 	add.w	r5, r9, #1
 8020a70:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020a74:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8020a78:	fa1f fc8c 	uxth.w	ip, ip
 8020a7c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020a80:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020a84:	432e      	orrs	r6, r5
 8020a86:	f10c 0501 	add.w	r5, ip, #1
 8020a8a:	eb05 251c 	add.w	r5, r5, ip, lsr #8
 8020a8e:	096d      	lsrs	r5, r5, #5
 8020a90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020a94:	9a04      	ldr	r2, [sp, #16]
 8020a96:	432e      	orrs	r6, r5
 8020a98:	52a6      	strh	r6, [r4, r2]
 8020a9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020a9c:	4410      	add	r0, r2
 8020a9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020aa0:	3f01      	subs	r7, #1
 8020aa2:	4411      	add	r1, r2
 8020aa4:	e74f      	b.n	8020946 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020aa6:	f06f 0201 	mvn.w	r2, #1
 8020aaa:	fb02 fc07 	mul.w	ip, r2, r7
 8020aae:	f2a2 72fe 	subw	r2, r2, #2046	; 0x7fe
 8020ab2:	ea02 2606 	and.w	r6, r2, r6, lsl #8
 8020ab6:	9a03      	ldr	r2, [sp, #12]
 8020ab8:	00d5      	lsls	r5, r2, #3
 8020aba:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8020abe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020ac2:	432e      	orrs	r6, r5
 8020ac4:	f824 600c 	strh.w	r6, [r4, ip]
 8020ac8:	e7e7      	b.n	8020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020aca:	f04f 0e00 	mov.w	lr, #0
 8020ace:	eba3 020e 	sub.w	r2, r3, lr
 8020ad2:	2a00      	cmp	r2, #0
 8020ad4:	f77f af3a 	ble.w	802094c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020ad8:	9e01      	ldr	r6, [sp, #4]
 8020ada:	1402      	asrs	r2, r0, #16
 8020adc:	140d      	asrs	r5, r1, #16
 8020ade:	fb06 2505 	mla	r5, r6, r5, r2
 8020ae2:	086a      	lsrs	r2, r5, #1
 8020ae4:	9e02      	ldr	r6, [sp, #8]
 8020ae6:	5cb2      	ldrb	r2, [r6, r2]
 8020ae8:	07ed      	lsls	r5, r5, #31
 8020aea:	bf54      	ite	pl
 8020aec:	f002 020f 	andpl.w	r2, r2, #15
 8020af0:	1112      	asrmi	r2, r2, #4
 8020af2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020af6:	b2d2      	uxtb	r2, r2
 8020af8:	2a00      	cmp	r2, #0
 8020afa:	d042      	beq.n	8020b82 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020afc:	4d29      	ldr	r5, [pc, #164]	; (8020ba4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020afe:	682f      	ldr	r7, [r5, #0]
 8020b00:	2aff      	cmp	r2, #255	; 0xff
 8020b02:	ea4f 4517 	mov.w	r5, r7, lsr #16
 8020b06:	ea4f 2617 	mov.w	r6, r7, lsr #8
 8020b0a:	fa5f f987 	uxtb.w	r9, r7
 8020b0e:	d03f      	beq.n	8020b90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020b10:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020b14:	fa1f fa82 	uxth.w	sl, r2
 8020b18:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020b1c:	43d2      	mvns	r2, r2
 8020b1e:	b2ed      	uxtb	r5, r5
 8020b20:	b2d2      	uxtb	r2, r2
 8020b22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020b26:	fb15 f50a 	smulbb	r5, r5, sl
 8020b2a:	fb07 5502 	mla	r5, r7, r2, r5
 8020b2e:	ea4f 07ec 	mov.w	r7, ip, asr #3
 8020b32:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020b36:	fa5f fc8c 	uxtb.w	ip, ip
 8020b3a:	fb19 f90a 	smulbb	r9, r9, sl
 8020b3e:	fb0c 9902 	mla	r9, ip, r2, r9
 8020b42:	b2f6      	uxtb	r6, r6
 8020b44:	b2ad      	uxth	r5, r5
 8020b46:	fb16 f60a 	smulbb	r6, r6, sl
 8020b4a:	fa1f f989 	uxth.w	r9, r9
 8020b4e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020b52:	fb07 6702 	mla	r7, r7, r2, r6
 8020b56:	1c6a      	adds	r2, r5, #1
 8020b58:	f109 0601 	add.w	r6, r9, #1
 8020b5c:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020b60:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8020b64:	b2bf      	uxth	r7, r7
 8020b66:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020b6a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020b6e:	4335      	orrs	r5, r6
 8020b70:	1c7e      	adds	r6, r7, #1
 8020b72:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020b76:	0976      	lsrs	r6, r6, #5
 8020b78:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020b7c:	4335      	orrs	r5, r6
 8020b7e:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8020b82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020b84:	4410      	add	r0, r2
 8020b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b88:	f10e 0e01 	add.w	lr, lr, #1
 8020b8c:	4411      	add	r1, r2
 8020b8e:	e79e      	b.n	8020ace <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020b90:	4a05      	ldr	r2, [pc, #20]	; (8020ba8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>)
 8020b92:	ea02 2505 	and.w	r5, r2, r5, lsl #8
 8020b96:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 8020b9a:	00f6      	lsls	r6, r6, #3
 8020b9c:	e7ec      	b.n	8020b78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020b9e:	b007      	add	sp, #28
 8020ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ba4:	20006708 	.word	0x20006708
 8020ba8:	fffff800 	.word	0xfffff800

08020bac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020bac:	4770      	bx	lr

08020bae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020bae:	4770      	bx	lr

08020bb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020bb0:	4770      	bx	lr

08020bb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020bb2:	4770      	bx	lr

08020bb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020bb4:	4770      	bx	lr

08020bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020bb6:	4770      	bx	lr

08020bb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020bb8:	4770      	bx	lr

08020bba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020bba:	4770      	bx	lr

08020bbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020bbc:	4770      	bx	lr

08020bbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020bbe:	4770      	bx	lr

08020bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020bc0:	4770      	bx	lr

08020bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020bc2:	4770      	bx	lr

08020bc4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020bc4:	4770      	bx	lr

08020bc6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020bc6:	4770      	bx	lr

08020bc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020bc8:	4770      	bx	lr

08020bca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020bca:	4770      	bx	lr

08020bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020bcc:	4770      	bx	lr

08020bce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020bce:	4770      	bx	lr

08020bd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020bd0:	4770      	bx	lr

08020bd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020bd2:	4770      	bx	lr

08020bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020bd4:	4770      	bx	lr

08020bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020bd6:	4770      	bx	lr

08020bd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020bd8:	4770      	bx	lr

08020bda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020bda:	4770      	bx	lr

08020bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020bdc:	4770      	bx	lr

08020bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020bde:	4770      	bx	lr

08020be0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020be0:	4770      	bx	lr

08020be2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020be2:	4770      	bx	lr

08020be4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020be4:	b508      	push	{r3, lr}
 8020be6:	4b06      	ldr	r3, [pc, #24]	; (8020c00 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8020be8:	8818      	ldrh	r0, [r3, #0]
 8020bea:	b928      	cbnz	r0, 8020bf8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8020bec:	4b05      	ldr	r3, [pc, #20]	; (8020c04 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8020bee:	4a06      	ldr	r2, [pc, #24]	; (8020c08 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020bf0:	4806      	ldr	r0, [pc, #24]	; (8020c0c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020bf2:	2150      	movs	r1, #80	; 0x50
 8020bf4:	f00b fd32 	bl	802c65c <__assert_func>
 8020bf8:	0040      	lsls	r0, r0, #1
 8020bfa:	b280      	uxth	r0, r0
 8020bfc:	bd08      	pop	{r3, pc}
 8020bfe:	bf00      	nop
 8020c00:	200066fa 	.word	0x200066fa
 8020c04:	08031627 	.word	0x08031627
 8020c08:	08031c1c 	.word	0x08031c1c
 8020c0c:	08031669 	.word	0x08031669

08020c10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c14:	b08b      	sub	sp, #44	; 0x2c
 8020c16:	460f      	mov	r7, r1
 8020c18:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020c1c:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020c20:	4616      	mov	r6, r2
 8020c22:	f1bb 0f00 	cmp.w	fp, #0
 8020c26:	d046      	beq.n	8020cb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020c28:	6810      	ldr	r0, [r2, #0]
 8020c2a:	6851      	ldr	r1, [r2, #4]
 8020c2c:	ad06      	add	r5, sp, #24
 8020c2e:	c503      	stmia	r5!, {r0, r1}
 8020c30:	6818      	ldr	r0, [r3, #0]
 8020c32:	6859      	ldr	r1, [r3, #4]
 8020c34:	ad08      	add	r5, sp, #32
 8020c36:	c503      	stmia	r5!, {r0, r1}
 8020c38:	a806      	add	r0, sp, #24
 8020c3a:	f7f9 fdc9 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c3e:	4631      	mov	r1, r6
 8020c40:	a808      	add	r0, sp, #32
 8020c42:	f7f9 fdad 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c46:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020c4a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020c4e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020c52:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020c56:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020c5a:	fb16 2103 	smlabb	r1, r6, r3, r2
 8020c5e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8020c62:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020c66:	4f5e      	ldr	r7, [pc, #376]	; (8020de0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8020c68:	440a      	add	r2, r1
 8020c6a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020c6e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020c72:	6838      	ldr	r0, [r7, #0]
 8020c74:	4413      	add	r3, r2
 8020c76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020c7a:	6803      	ldr	r3, [r0, #0]
 8020c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c7e:	4798      	blx	r3
 8020c80:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020c84:	46b9      	mov	r9, r7
 8020c86:	d019      	beq.n	8020cbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020c88:	f010 0f04 	tst.w	r0, #4
 8020c8c:	d01a      	beq.n	8020cc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020c8e:	f8d9 0000 	ldr.w	r0, [r9]
 8020c92:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020c96:	6801      	ldr	r1, [r0, #0]
 8020c98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020c9c:	e9cd b403 	strd	fp, r4, [sp, #12]
 8020ca0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020ca4:	9402      	str	r4, [sp, #8]
 8020ca6:	b2ad      	uxth	r5, r5
 8020ca8:	fa1f f488 	uxth.w	r4, r8
 8020cac:	9501      	str	r5, [sp, #4]
 8020cae:	9400      	str	r4, [sp, #0]
 8020cb0:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8020cb2:	4631      	mov	r1, r6
 8020cb4:	47a0      	blx	r4
 8020cb6:	b00b      	add	sp, #44	; 0x2c
 8020cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cbc:	b914      	cbnz	r4, 8020cc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020cbe:	f010 0f01 	tst.w	r0, #1
 8020cc2:	e7e3      	b.n	8020c8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8020cc8:	6803      	ldr	r3, [r0, #0]
 8020cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ccc:	4798      	blx	r3
 8020cce:	4b45      	ldr	r3, [pc, #276]	; (8020de4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020cd0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020cd4:	881a      	ldrh	r2, [r3, #0]
 8020cd6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020cda:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020cde:	fb02 1404 	mla	r4, r2, r4, r1
 8020ce2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020ce6:	469a      	mov	sl, r3
 8020ce8:	fb05 f502 	mul.w	r5, r5, r2
 8020cec:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020cf0:	d059      	beq.n	8020da6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x196>
 8020cf2:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020cf6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020cfa:	fa1f f28b 	uxth.w	r2, fp
 8020cfe:	fa1f f989 	uxth.w	r9, r9
 8020d02:	469e      	mov	lr, r3
 8020d04:	42ac      	cmp	r4, r5
 8020d06:	d264      	bcs.n	8020dd2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c2>
 8020d08:	eb04 0a07 	add.w	sl, r4, r7
 8020d0c:	4554      	cmp	r4, sl
 8020d0e:	d23d      	bcs.n	8020d8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17c>
 8020d10:	8821      	ldrh	r1, [r4, #0]
 8020d12:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020d16:	1208      	asrs	r0, r1, #8
 8020d18:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020d1c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020d20:	fb10 f009 	smulbb	r0, r0, r9
 8020d24:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8020d28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020d2c:	00c9      	lsls	r1, r1, #3
 8020d2e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020d32:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020d36:	10d8      	asrs	r0, r3, #3
 8020d38:	b2c9      	uxtb	r1, r1
 8020d3a:	00db      	lsls	r3, r3, #3
 8020d3c:	fa1f fc8c 	uxth.w	ip, ip
 8020d40:	fb1b fb09 	smulbb	fp, fp, r9
 8020d44:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020d48:	b2db      	uxtb	r3, r3
 8020d4a:	fb11 f109 	smulbb	r1, r1, r9
 8020d4e:	fb00 b002 	mla	r0, r0, r2, fp
 8020d52:	fb03 1302 	mla	r3, r3, r2, r1
 8020d56:	f10c 0b01 	add.w	fp, ip, #1
 8020d5a:	b29b      	uxth	r3, r3
 8020d5c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020d60:	b280      	uxth	r0, r0
 8020d62:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8020d66:	f103 0c01 	add.w	ip, r3, #1
 8020d6a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020d6e:	1c43      	adds	r3, r0, #1
 8020d70:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020d74:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020d78:	0940      	lsrs	r0, r0, #5
 8020d7a:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020d7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020d82:	ea4c 0c00 	orr.w	ip, ip, r0
 8020d86:	f824 cb02 	strh.w	ip, [r4], #2
 8020d8a:	e7bf      	b.n	8020d0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8020d8c:	f8be 3000 	ldrh.w	r3, [lr]
 8020d90:	eba3 0308 	sub.w	r3, r3, r8
 8020d94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020d98:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020d9c:	eba3 0308 	sub.w	r3, r3, r8
 8020da0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020da4:	e7ae      	b.n	8020d04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020da6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020daa:	f8d9 0000 	ldr.w	r0, [r9]
 8020dae:	42ac      	cmp	r4, r5
 8020db0:	6803      	ldr	r3, [r0, #0]
 8020db2:	d20e      	bcs.n	8020dd2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c2>
 8020db4:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 8020db8:	4632      	mov	r2, r6
 8020dba:	463b      	mov	r3, r7
 8020dbc:	4621      	mov	r1, r4
 8020dbe:	47c0      	blx	r8
 8020dc0:	f8ba 3000 	ldrh.w	r3, [sl]
 8020dc4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020dc8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020dcc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020dd0:	e7eb      	b.n	8020daa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19a>
 8020dd2:	4b03      	ldr	r3, [pc, #12]	; (8020de0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8020dd4:	6818      	ldr	r0, [r3, #0]
 8020dd6:	6803      	ldr	r3, [r0, #0]
 8020dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020dda:	4798      	blx	r3
 8020ddc:	e76b      	b.n	8020cb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020dde:	bf00      	nop
 8020de0:	20006700 	.word	0x20006700
 8020de4:	200066fa 	.word	0x200066fa

08020de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020de8:	b510      	push	{r4, lr}
 8020dea:	2104      	movs	r1, #4
 8020dec:	4604      	mov	r4, r0
 8020dee:	f00a fe16 	bl	802ba1e <_ZdlPvj>
 8020df2:	4620      	mov	r0, r4
 8020df4:	bd10      	pop	{r4, pc}

08020df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020df6:	b510      	push	{r4, lr}
 8020df8:	2104      	movs	r1, #4
 8020dfa:	4604      	mov	r4, r0
 8020dfc:	f00a fe0f 	bl	802ba1e <_ZdlPvj>
 8020e00:	4620      	mov	r0, r4
 8020e02:	bd10      	pop	{r4, pc}

08020e04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020e04:	b510      	push	{r4, lr}
 8020e06:	2104      	movs	r1, #4
 8020e08:	4604      	mov	r4, r0
 8020e0a:	f00a fe08 	bl	802ba1e <_ZdlPvj>
 8020e0e:	4620      	mov	r0, r4
 8020e10:	bd10      	pop	{r4, pc}

08020e12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020e12:	b510      	push	{r4, lr}
 8020e14:	2104      	movs	r1, #4
 8020e16:	4604      	mov	r4, r0
 8020e18:	f00a fe01 	bl	802ba1e <_ZdlPvj>
 8020e1c:	4620      	mov	r0, r4
 8020e1e:	bd10      	pop	{r4, pc}

08020e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020e20:	b510      	push	{r4, lr}
 8020e22:	2104      	movs	r1, #4
 8020e24:	4604      	mov	r4, r0
 8020e26:	f00a fdfa 	bl	802ba1e <_ZdlPvj>
 8020e2a:	4620      	mov	r0, r4
 8020e2c:	bd10      	pop	{r4, pc}

08020e2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020e2e:	b510      	push	{r4, lr}
 8020e30:	2104      	movs	r1, #4
 8020e32:	4604      	mov	r4, r0
 8020e34:	f00a fdf3 	bl	802ba1e <_ZdlPvj>
 8020e38:	4620      	mov	r0, r4
 8020e3a:	bd10      	pop	{r4, pc}

08020e3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020e3c:	b510      	push	{r4, lr}
 8020e3e:	2104      	movs	r1, #4
 8020e40:	4604      	mov	r4, r0
 8020e42:	f00a fdec 	bl	802ba1e <_ZdlPvj>
 8020e46:	4620      	mov	r0, r4
 8020e48:	bd10      	pop	{r4, pc}

08020e4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020e4a:	b510      	push	{r4, lr}
 8020e4c:	2104      	movs	r1, #4
 8020e4e:	4604      	mov	r4, r0
 8020e50:	f00a fde5 	bl	802ba1e <_ZdlPvj>
 8020e54:	4620      	mov	r0, r4
 8020e56:	bd10      	pop	{r4, pc}

08020e58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020e58:	b510      	push	{r4, lr}
 8020e5a:	2104      	movs	r1, #4
 8020e5c:	4604      	mov	r4, r0
 8020e5e:	f00a fdde 	bl	802ba1e <_ZdlPvj>
 8020e62:	4620      	mov	r0, r4
 8020e64:	bd10      	pop	{r4, pc}

08020e66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020e66:	b510      	push	{r4, lr}
 8020e68:	2104      	movs	r1, #4
 8020e6a:	4604      	mov	r4, r0
 8020e6c:	f00a fdd7 	bl	802ba1e <_ZdlPvj>
 8020e70:	4620      	mov	r0, r4
 8020e72:	bd10      	pop	{r4, pc}

08020e74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020e74:	b510      	push	{r4, lr}
 8020e76:	2104      	movs	r1, #4
 8020e78:	4604      	mov	r4, r0
 8020e7a:	f00a fdd0 	bl	802ba1e <_ZdlPvj>
 8020e7e:	4620      	mov	r0, r4
 8020e80:	bd10      	pop	{r4, pc}

08020e82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020e82:	b510      	push	{r4, lr}
 8020e84:	2104      	movs	r1, #4
 8020e86:	4604      	mov	r4, r0
 8020e88:	f00a fdc9 	bl	802ba1e <_ZdlPvj>
 8020e8c:	4620      	mov	r0, r4
 8020e8e:	bd10      	pop	{r4, pc}

08020e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020e90:	b510      	push	{r4, lr}
 8020e92:	2104      	movs	r1, #4
 8020e94:	4604      	mov	r4, r0
 8020e96:	f00a fdc2 	bl	802ba1e <_ZdlPvj>
 8020e9a:	4620      	mov	r0, r4
 8020e9c:	bd10      	pop	{r4, pc}

08020e9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020e9e:	b510      	push	{r4, lr}
 8020ea0:	2104      	movs	r1, #4
 8020ea2:	4604      	mov	r4, r0
 8020ea4:	f00a fdbb 	bl	802ba1e <_ZdlPvj>
 8020ea8:	4620      	mov	r0, r4
 8020eaa:	bd10      	pop	{r4, pc}

08020eac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020eac:	b510      	push	{r4, lr}
 8020eae:	2104      	movs	r1, #4
 8020eb0:	4604      	mov	r4, r0
 8020eb2:	f00a fdb4 	bl	802ba1e <_ZdlPvj>
 8020eb6:	4620      	mov	r0, r4
 8020eb8:	bd10      	pop	{r4, pc}

08020eba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020eba:	b510      	push	{r4, lr}
 8020ebc:	2104      	movs	r1, #4
 8020ebe:	4604      	mov	r4, r0
 8020ec0:	f00a fdad 	bl	802ba1e <_ZdlPvj>
 8020ec4:	4620      	mov	r0, r4
 8020ec6:	bd10      	pop	{r4, pc}

08020ec8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020ec8:	b510      	push	{r4, lr}
 8020eca:	2104      	movs	r1, #4
 8020ecc:	4604      	mov	r4, r0
 8020ece:	f00a fda6 	bl	802ba1e <_ZdlPvj>
 8020ed2:	4620      	mov	r0, r4
 8020ed4:	bd10      	pop	{r4, pc}

08020ed6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020ed6:	b510      	push	{r4, lr}
 8020ed8:	2104      	movs	r1, #4
 8020eda:	4604      	mov	r4, r0
 8020edc:	f00a fd9f 	bl	802ba1e <_ZdlPvj>
 8020ee0:	4620      	mov	r0, r4
 8020ee2:	bd10      	pop	{r4, pc}

08020ee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020ee4:	b510      	push	{r4, lr}
 8020ee6:	2104      	movs	r1, #4
 8020ee8:	4604      	mov	r4, r0
 8020eea:	f00a fd98 	bl	802ba1e <_ZdlPvj>
 8020eee:	4620      	mov	r0, r4
 8020ef0:	bd10      	pop	{r4, pc}

08020ef2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020ef2:	b510      	push	{r4, lr}
 8020ef4:	2104      	movs	r1, #4
 8020ef6:	4604      	mov	r4, r0
 8020ef8:	f00a fd91 	bl	802ba1e <_ZdlPvj>
 8020efc:	4620      	mov	r0, r4
 8020efe:	bd10      	pop	{r4, pc}

08020f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020f00:	b510      	push	{r4, lr}
 8020f02:	2104      	movs	r1, #4
 8020f04:	4604      	mov	r4, r0
 8020f06:	f00a fd8a 	bl	802ba1e <_ZdlPvj>
 8020f0a:	4620      	mov	r0, r4
 8020f0c:	bd10      	pop	{r4, pc}

08020f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020f0e:	b510      	push	{r4, lr}
 8020f10:	2104      	movs	r1, #4
 8020f12:	4604      	mov	r4, r0
 8020f14:	f00a fd83 	bl	802ba1e <_ZdlPvj>
 8020f18:	4620      	mov	r0, r4
 8020f1a:	bd10      	pop	{r4, pc}

08020f1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020f1c:	b510      	push	{r4, lr}
 8020f1e:	2104      	movs	r1, #4
 8020f20:	4604      	mov	r4, r0
 8020f22:	f00a fd7c 	bl	802ba1e <_ZdlPvj>
 8020f26:	4620      	mov	r0, r4
 8020f28:	bd10      	pop	{r4, pc}

08020f2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020f2a:	b510      	push	{r4, lr}
 8020f2c:	2104      	movs	r1, #4
 8020f2e:	4604      	mov	r4, r0
 8020f30:	f00a fd75 	bl	802ba1e <_ZdlPvj>
 8020f34:	4620      	mov	r0, r4
 8020f36:	bd10      	pop	{r4, pc}

08020f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020f38:	b510      	push	{r4, lr}
 8020f3a:	2104      	movs	r1, #4
 8020f3c:	4604      	mov	r4, r0
 8020f3e:	f00a fd6e 	bl	802ba1e <_ZdlPvj>
 8020f42:	4620      	mov	r0, r4
 8020f44:	bd10      	pop	{r4, pc}

08020f46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020f46:	b510      	push	{r4, lr}
 8020f48:	2104      	movs	r1, #4
 8020f4a:	4604      	mov	r4, r0
 8020f4c:	f00a fd67 	bl	802ba1e <_ZdlPvj>
 8020f50:	4620      	mov	r0, r4
 8020f52:	bd10      	pop	{r4, pc}

08020f54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020f54:	b510      	push	{r4, lr}
 8020f56:	2104      	movs	r1, #4
 8020f58:	4604      	mov	r4, r0
 8020f5a:	f00a fd60 	bl	802ba1e <_ZdlPvj>
 8020f5e:	4620      	mov	r0, r4
 8020f60:	bd10      	pop	{r4, pc}

08020f62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020f62:	b510      	push	{r4, lr}
 8020f64:	2104      	movs	r1, #4
 8020f66:	4604      	mov	r4, r0
 8020f68:	f00a fd59 	bl	802ba1e <_ZdlPvj>
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	bd10      	pop	{r4, pc}

08020f70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f74:	4f97      	ldr	r7, [pc, #604]	; (80211d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8020f76:	4616      	mov	r6, r2
 8020f78:	683a      	ldr	r2, [r7, #0]
 8020f7a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020f7e:	2a02      	cmp	r2, #2
 8020f80:	b08f      	sub	sp, #60	; 0x3c
 8020f82:	4604      	mov	r4, r0
 8020f84:	4689      	mov	r9, r1
 8020f86:	d106      	bne.n	8020f96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020f88:	4b93      	ldr	r3, [pc, #588]	; (80211d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8020f8a:	4a94      	ldr	r2, [pc, #592]	; (80211dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020f8c:	f240 310f 	movw	r1, #783	; 0x30f
 8020f90:	4893      	ldr	r0, [pc, #588]	; (80211e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8020f92:	f00b fb63 	bl	802c65c <__assert_func>
 8020f96:	ad0e      	add	r5, sp, #56	; 0x38
 8020f98:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8020f9c:	4628      	mov	r0, r5
 8020f9e:	f7fd fb75 	bl	801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020fa2:	6823      	ldr	r3, [r4, #0]
 8020fa4:	4680      	mov	r8, r0
 8020fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020fa8:	4620      	mov	r0, r4
 8020faa:	4798      	blx	r3
 8020fac:	4580      	cmp	r8, r0
 8020fae:	d004      	beq.n	8020fba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020fb0:	4b8c      	ldr	r3, [pc, #560]	; (80211e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8020fb2:	4a8a      	ldr	r2, [pc, #552]	; (80211dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020fb4:	f240 3111 	movw	r1, #785	; 0x311
 8020fb8:	e7ea      	b.n	8020f90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020fba:	4628      	mov	r0, r5
 8020fbc:	f7fd fadc 	bl	801e578 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020fc0:	4680      	mov	r8, r0
 8020fc2:	b920      	cbnz	r0, 8020fce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020fc4:	4b88      	ldr	r3, [pc, #544]	; (80211e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8020fc6:	4a85      	ldr	r2, [pc, #532]	; (80211dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020fc8:	f240 3113 	movw	r1, #787	; 0x313
 8020fcc:	e7e0      	b.n	8020f90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020fce:	6830      	ldr	r0, [r6, #0]
 8020fd0:	6871      	ldr	r1, [r6, #4]
 8020fd2:	f9b6 a000 	ldrsh.w	sl, [r6]
 8020fd6:	ab06      	add	r3, sp, #24
 8020fd8:	c303      	stmia	r3!, {r0, r1}
 8020fda:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020fde:	f8d9 0000 	ldr.w	r0, [r9]
 8020fe2:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8020fe6:	ab08      	add	r3, sp, #32
 8020fe8:	c303      	stmia	r3!, {r0, r1}
 8020fea:	4628      	mov	r0, r5
 8020fec:	f7fd f9bc 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020ff0:	4606      	mov	r6, r0
 8020ff2:	4628      	mov	r0, r5
 8020ff4:	f7fd f9f2 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020ff8:	f10d 0b20 	add.w	fp, sp, #32
 8020ffc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8021000:	a806      	add	r0, sp, #24
 8021002:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8021006:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 802100a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 802100e:	f7f9 fbdf 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021012:	4658      	mov	r0, fp
 8021014:	f7f9 fbdc 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021018:	a80a      	add	r0, sp, #40	; 0x28
 802101a:	f7f9 fbd9 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802101e:	4d73      	ldr	r5, [pc, #460]	; (80211ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8021020:	4b73      	ldr	r3, [pc, #460]	; (80211f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8021022:	f9b5 2000 	ldrsh.w	r2, [r5]
 8021026:	f9b3 3000 	ldrsh.w	r3, [r3]
 802102a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802102e:	2100      	movs	r1, #0
 8021030:	910c      	str	r1, [sp, #48]	; 0x30
 8021032:	4658      	mov	r0, fp
 8021034:	a90c      	add	r1, sp, #48	; 0x30
 8021036:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802103a:	f7f4 ff93 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 802103e:	4658      	mov	r0, fp
 8021040:	f7f4 ffd3 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 8021044:	2800      	cmp	r0, #0
 8021046:	f040 8099 	bne.w	802117c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 802104a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802104e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8021052:	4288      	cmp	r0, r1
 8021054:	db37      	blt.n	80210c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8021056:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 802105a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802105e:	429a      	cmp	r2, r3
 8021060:	db31      	blt.n	80210c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8021062:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8021066:	4430      	add	r0, r6
 8021068:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802106c:	4431      	add	r1, r6
 802106e:	b200      	sxth	r0, r0
 8021070:	b209      	sxth	r1, r1
 8021072:	4288      	cmp	r0, r1
 8021074:	dc27      	bgt.n	80210c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8021076:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 802107a:	440a      	add	r2, r1
 802107c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8021080:	440b      	add	r3, r1
 8021082:	b212      	sxth	r2, r2
 8021084:	b21b      	sxth	r3, r3
 8021086:	429a      	cmp	r2, r3
 8021088:	dc1d      	bgt.n	80210c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 802108a:	6823      	ldr	r3, [r4, #0]
 802108c:	4620      	mov	r0, r4
 802108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021090:	4798      	blx	r3
 8021092:	4682      	mov	sl, r0
 8021094:	6838      	ldr	r0, [r7, #0]
 8021096:	6803      	ldr	r3, [r0, #0]
 8021098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802109a:	4798      	blx	r3
 802109c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80210a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80210a4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80210a8:	1a5b      	subs	r3, r3, r1
 80210aa:	b29b      	uxth	r3, r3
 80210ac:	b21c      	sxth	r4, r3
 80210ae:	2c00      	cmp	r4, #0
 80210b0:	dc0e      	bgt.n	80210d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 80210b2:	bf1f      	itttt	ne
 80210b4:	f8ad 1020 	strhne.w	r1, [sp, #32]
 80210b8:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 80210bc:	185b      	addne	r3, r3, r1
 80210be:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 80210c2:	4644      	mov	r4, r8
 80210c4:	e009      	b.n	80210da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 80210c6:	4b4b      	ldr	r3, [pc, #300]	; (80211f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80210c8:	4a44      	ldr	r2, [pc, #272]	; (80211dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80210ca:	f240 3121 	movw	r1, #801	; 0x321
 80210ce:	e75f      	b.n	8020f90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80210d0:	1ad3      	subs	r3, r2, r3
 80210d2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80210d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80210da:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 80210de:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80210e2:	1b9b      	subs	r3, r3, r6
 80210e4:	b29b      	uxth	r3, r3
 80210e6:	b219      	sxth	r1, r3
 80210e8:	2900      	cmp	r1, #0
 80210ea:	dd4b      	ble.n	8021184 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 80210ec:	4351      	muls	r1, r2
 80210ee:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80210f2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80210f6:	1acb      	subs	r3, r1, r3
 80210f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80210fc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021100:	2e00      	cmp	r6, #0
 8021102:	dd3b      	ble.n	802117c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8021104:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8021108:	2b00      	cmp	r3, #0
 802110a:	dd37      	ble.n	802117c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 802110c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8021110:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021114:	fb0a f90c 	mul.w	r9, sl, ip
 8021118:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 802111c:	4481      	add	r9, r0
 802111e:	8828      	ldrh	r0, [r5, #0]
 8021120:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8021124:	42ae      	cmp	r6, r5
 8021126:	bfa8      	it	ge
 8021128:	462e      	movge	r6, r5
 802112a:	1a41      	subs	r1, r0, r1
 802112c:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8021130:	428e      	cmp	r6, r1
 8021132:	bfa8      	it	ge
 8021134:	460e      	movge	r6, r1
 8021136:	429d      	cmp	r5, r3
 8021138:	bfa8      	it	ge
 802113a:	461d      	movge	r5, r3
 802113c:	4b2c      	ldr	r3, [pc, #176]	; (80211f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802113e:	881b      	ldrh	r3, [r3, #0]
 8021140:	eba3 030c 	sub.w	r3, r3, ip
 8021144:	429d      	cmp	r5, r3
 8021146:	bfa8      	it	ge
 8021148:	461d      	movge	r5, r3
 802114a:	42b0      	cmp	r0, r6
 802114c:	d12c      	bne.n	80211a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 802114e:	4290      	cmp	r0, r2
 8021150:	d12a      	bne.n	80211a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 8021152:	6838      	ldr	r0, [r7, #0]
 8021154:	9203      	str	r2, [sp, #12]
 8021156:	6803      	ldr	r3, [r0, #0]
 8021158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802115a:	4798      	blx	r3
 802115c:	07c3      	lsls	r3, r0, #31
 802115e:	d51a      	bpl.n	8021196 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 8021160:	9a03      	ldr	r2, [sp, #12]
 8021162:	6838      	ldr	r0, [r7, #0]
 8021164:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8021168:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 802116c:	6803      	ldr	r3, [r0, #0]
 802116e:	9200      	str	r2, [sp, #0]
 8021170:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8021172:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021176:	4623      	mov	r3, r4
 8021178:	47a8      	blx	r5
 802117a:	4680      	mov	r8, r0
 802117c:	4640      	mov	r0, r8
 802117e:	b00f      	add	sp, #60	; 0x3c
 8021180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021184:	bf1f      	itttt	ne
 8021186:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 802118a:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 802118e:	185b      	addne	r3, r3, r1
 8021190:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8021194:	e7b2      	b.n	80210fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 8021196:	6838      	ldr	r0, [r7, #0]
 8021198:	6803      	ldr	r3, [r0, #0]
 802119a:	464a      	mov	r2, r9
 802119c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 802119e:	4621      	mov	r1, r4
 80211a0:	fb05 f30a 	mul.w	r3, r5, sl
 80211a4:	47b0      	blx	r6
 80211a6:	e7e9      	b.n	802117c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80211a8:	4355      	muls	r5, r2
 80211aa:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 80211ae:	9303      	str	r3, [sp, #12]
 80211b0:	0076      	lsls	r6, r6, #1
 80211b2:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80211b6:	9b03      	ldr	r3, [sp, #12]
 80211b8:	429c      	cmp	r4, r3
 80211ba:	d2df      	bcs.n	802117c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80211bc:	6838      	ldr	r0, [r7, #0]
 80211be:	6803      	ldr	r3, [r0, #0]
 80211c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211c2:	464a      	mov	r2, r9
 80211c4:	461d      	mov	r5, r3
 80211c6:	4621      	mov	r1, r4
 80211c8:	4633      	mov	r3, r6
 80211ca:	47a8      	blx	r5
 80211cc:	44d1      	add	r9, sl
 80211ce:	445c      	add	r4, fp
 80211d0:	e7f1      	b.n	80211b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 80211d2:	bf00      	nop
 80211d4:	20006700 	.word	0x20006700
 80211d8:	0803141f 	.word	0x0803141f
 80211dc:	08031ccc 	.word	0x08031ccc
 80211e0:	080314d1 	.word	0x080314d1
 80211e4:	08031503 	.word	0x08031503
 80211e8:	08031558 	.word	0x08031558
 80211ec:	200066fa 	.word	0x200066fa
 80211f0:	200066fc 	.word	0x200066fc
 80211f4:	08031596 	.word	0x08031596

080211f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80211f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211fa:	4607      	mov	r7, r0
 80211fc:	b087      	sub	sp, #28
 80211fe:	460d      	mov	r5, r1
 8021200:	4614      	mov	r4, r2
 8021202:	461e      	mov	r6, r3
 8021204:	b373      	cbz	r3, 8021264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021206:	4608      	mov	r0, r1
 8021208:	f7f4 feef 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 802120c:	bb50      	cbnz	r0, 8021264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 802120e:	6828      	ldr	r0, [r5, #0]
 8021210:	6869      	ldr	r1, [r5, #4]
 8021212:	4d1f      	ldr	r5, [pc, #124]	; (8021290 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x98>)
 8021214:	ab04      	add	r3, sp, #16
 8021216:	c303      	stmia	r3!, {r0, r1}
 8021218:	a804      	add	r0, sp, #16
 802121a:	f7f9 fad9 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802121e:	6828      	ldr	r0, [r5, #0]
 8021220:	6803      	ldr	r3, [r0, #0]
 8021222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021224:	4798      	blx	r3
 8021226:	2eff      	cmp	r6, #255	; 0xff
 8021228:	d01e      	beq.n	8021268 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x70>
 802122a:	f010 0f08 	tst.w	r0, #8
 802122e:	6828      	ldr	r0, [r5, #0]
 8021230:	6803      	ldr	r3, [r0, #0]
 8021232:	d01c      	beq.n	802126e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x76>
 8021234:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8021236:	4b17      	ldr	r3, [pc, #92]	; (8021294 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9c>)
 8021238:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802123c:	9602      	str	r6, [sp, #8]
 802123e:	ea03 2314 	and.w	r3, r3, r4, lsr #8
 8021242:	f3c4 01c4 	ubfx	r1, r4, #3, #5
 8021246:	0964      	lsrs	r4, r4, #5
 8021248:	4319      	orrs	r1, r3
 802124a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802124e:	4321      	orrs	r1, r4
 8021250:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021254:	9401      	str	r4, [sp, #4]
 8021256:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802125a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802125e:	9400      	str	r4, [sp, #0]
 8021260:	b289      	uxth	r1, r1
 8021262:	47a8      	blx	r5
 8021264:	b007      	add	sp, #28
 8021266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021268:	f010 0f02 	tst.w	r0, #2
 802126c:	e7df      	b.n	802122e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021270:	4798      	blx	r3
 8021272:	4b09      	ldr	r3, [pc, #36]	; (8021298 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>)
 8021274:	881a      	ldrh	r2, [r3, #0]
 8021276:	683b      	ldr	r3, [r7, #0]
 8021278:	e9cd 4600 	strd	r4, r6, [sp]
 802127c:	4601      	mov	r1, r0
 802127e:	69dc      	ldr	r4, [r3, #28]
 8021280:	4638      	mov	r0, r7
 8021282:	ab04      	add	r3, sp, #16
 8021284:	47a0      	blx	r4
 8021286:	6828      	ldr	r0, [r5, #0]
 8021288:	6803      	ldr	r3, [r0, #0]
 802128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802128c:	4798      	blx	r3
 802128e:	e7e9      	b.n	8021264 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021290:	20006700 	.word	0x20006700
 8021294:	fffff800 	.word	0xfffff800
 8021298:	200066fa 	.word	0x200066fa

0802129c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 802129c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212a0:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 80212a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80212a8:	460f      	mov	r7, r1
 80212aa:	4614      	mov	r4, r2
 80212ac:	461d      	mov	r5, r3
 80212ae:	2e00      	cmp	r6, #0
 80212b0:	f000 80b6 	beq.w	8021420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 80212b4:	4618      	mov	r0, r3
 80212b6:	f7f4 fe98 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 80212ba:	2800      	cmp	r0, #0
 80212bc:	f040 80b0 	bne.w	8021420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 80212c0:	f9b5 1000 	ldrsh.w	r1, [r5]
 80212c4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80212c8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80212cc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80212d0:	fb04 1303 	mla	r3, r4, r3, r1
 80212d4:	eb07 0143 	add.w	r1, r7, r3, lsl #1
 80212d8:	4365      	muls	r5, r4
 80212da:	2eff      	cmp	r6, #255	; 0xff
 80212dc:	eba4 0c00 	sub.w	ip, r4, r0
 80212e0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80212e4:	ea4f 4e18 	mov.w	lr, r8, lsr #16
 80212e8:	ea4f 2718 	mov.w	r7, r8, lsr #8
 80212ec:	fa5f f288 	uxtb.w	r2, r8
 80212f0:	d04a      	beq.n	8021388 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80212f2:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
 80212f6:	fa5f fe8e 	uxtb.w	lr, lr
 80212fa:	b2b6      	uxth	r6, r6
 80212fc:	b2ff      	uxtb	r7, r7
 80212fe:	0040      	lsls	r0, r0, #1
 8021300:	fb0e fe06 	mul.w	lr, lr, r6
 8021304:	4377      	muls	r7, r6
 8021306:	fb02 f306 	mul.w	r3, r2, r6
 802130a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 802130e:	fa1f f888 	uxth.w	r8, r8
 8021312:	42a9      	cmp	r1, r5
 8021314:	f080 8084 	bcs.w	8021420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 8021318:	eb01 0900 	add.w	r9, r1, r0
 802131c:	4549      	cmp	r1, r9
 802131e:	d231      	bcs.n	8021384 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 8021320:	880a      	ldrh	r2, [r1, #0]
 8021322:	1214      	asrs	r4, r2, #8
 8021324:	10d6      	asrs	r6, r2, #3
 8021326:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802132a:	00d2      	lsls	r2, r2, #3
 802132c:	b2d2      	uxtb	r2, r2
 802132e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021332:	fb14 f408 	smulbb	r4, r4, r8
 8021336:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802133a:	4474      	add	r4, lr
 802133c:	fb12 f208 	smulbb	r2, r2, r8
 8021340:	b2a4      	uxth	r4, r4
 8021342:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021346:	441a      	add	r2, r3
 8021348:	b292      	uxth	r2, r2
 802134a:	f104 0a01 	add.w	sl, r4, #1
 802134e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021352:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021356:	fb16 f608 	smulbb	r6, r6, r8
 802135a:	f102 0a01 	add.w	sl, r2, #1
 802135e:	443e      	add	r6, r7
 8021360:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021364:	b2b6      	uxth	r6, r6
 8021366:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802136a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802136e:	4322      	orrs	r2, r4
 8021370:	1c74      	adds	r4, r6, #1
 8021372:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021376:	0976      	lsrs	r6, r6, #5
 8021378:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802137c:	4332      	orrs	r2, r6
 802137e:	f821 2b02 	strh.w	r2, [r1], #2
 8021382:	e7cb      	b.n	802131c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 8021384:	4461      	add	r1, ip
 8021386:	e7c4      	b.n	8021312 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8021388:	4b26      	ldr	r3, [pc, #152]	; (8021424 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 802138a:	00ff      	lsls	r7, r7, #3
 802138c:	ea03 230e 	and.w	r3, r3, lr, lsl #8
 8021390:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021394:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021398:	433b      	orrs	r3, r7
 802139a:	07e2      	lsls	r2, r4, #31
 802139c:	b29b      	uxth	r3, r3
 802139e:	d50c      	bpl.n	80213ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11e>
 80213a0:	0040      	lsls	r0, r0, #1
 80213a2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80213a6:	42a9      	cmp	r1, r5
 80213a8:	d23a      	bcs.n	8021420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 80213aa:	180a      	adds	r2, r1, r0
 80213ac:	4291      	cmp	r1, r2
 80213ae:	d202      	bcs.n	80213b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11a>
 80213b0:	f821 3b02 	strh.w	r3, [r1], #2
 80213b4:	e7fa      	b.n	80213ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 80213b6:	4461      	add	r1, ip
 80213b8:	e7f5      	b.n	80213a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80213ba:	078f      	lsls	r7, r1, #30
 80213bc:	d008      	beq.n	80213d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 80213be:	0066      	lsls	r6, r4, #1
 80213c0:	460a      	mov	r2, r1
 80213c2:	42aa      	cmp	r2, r5
 80213c4:	d202      	bcs.n	80213cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>
 80213c6:	8013      	strh	r3, [r2, #0]
 80213c8:	4432      	add	r2, r6
 80213ca:	e7fa      	b.n	80213c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80213cc:	3102      	adds	r1, #2
 80213ce:	3801      	subs	r0, #1
 80213d0:	07c6      	lsls	r6, r0, #31
 80213d2:	d50b      	bpl.n	80213ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x150>
 80213d4:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80213d8:	3a01      	subs	r2, #1
 80213da:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80213de:	0066      	lsls	r6, r4, #1
 80213e0:	42aa      	cmp	r2, r5
 80213e2:	d202      	bcs.n	80213ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14e>
 80213e4:	8013      	strh	r3, [r2, #0]
 80213e6:	4432      	add	r2, r6
 80213e8:	e7fa      	b.n	80213e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80213ea:	3801      	subs	r0, #1
 80213ec:	b1c0      	cbz	r0, 8021420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 80213ee:	1040      	asrs	r0, r0, #1
 80213f0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80213f4:	0080      	lsls	r0, r0, #2
 80213f6:	0064      	lsls	r4, r4, #1
 80213f8:	42a9      	cmp	r1, r5
 80213fa:	d211      	bcs.n	8021420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 80213fc:	078a      	lsls	r2, r1, #30
 80213fe:	d006      	beq.n	802140e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x172>
 8021400:	4b09      	ldr	r3, [pc, #36]	; (8021428 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8021402:	4a0a      	ldr	r2, [pc, #40]	; (802142c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8021404:	480a      	ldr	r0, [pc, #40]	; (8021430 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x194>)
 8021406:	f240 31d6 	movw	r1, #982	; 0x3d6
 802140a:	f00b f927 	bl	802c65c <__assert_func>
 802140e:	180e      	adds	r6, r1, r0
 8021410:	460a      	mov	r2, r1
 8021412:	42b2      	cmp	r2, r6
 8021414:	d202      	bcs.n	802141c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>
 8021416:	f842 3b04 	str.w	r3, [r2], #4
 802141a:	e7fa      	b.n	8021412 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x176>
 802141c:	4421      	add	r1, r4
 802141e:	e7eb      	b.n	80213f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 8021420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021424:	fffff800 	.word	0xfffff800
 8021428:	080312d0 	.word	0x080312d0
 802142c:	08031918 	.word	0x08031918
 8021430:	080314d1 	.word	0x080314d1

08021434 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021434:	2200      	movs	r2, #0
 8021436:	4910      	ldr	r1, [pc, #64]	; (8021478 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021438:	6042      	str	r2, [r0, #4]
 802143a:	6001      	str	r1, [r0, #0]
 802143c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021440:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021444:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021448:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802144c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021450:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021454:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021458:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 802145c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021460:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021464:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8021468:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 802146c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8021470:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021474:	4770      	bx	lr
 8021476:	bf00      	nop
 8021478:	080318d4 	.word	0x080318d4

0802147c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021480:	460d      	mov	r5, r1
 8021482:	b08b      	sub	sp, #44	; 0x2c
 8021484:	4604      	mov	r4, r0
 8021486:	6808      	ldr	r0, [r1, #0]
 8021488:	6849      	ldr	r1, [r1, #4]
 802148a:	4699      	mov	r9, r3
 802148c:	ab06      	add	r3, sp, #24
 802148e:	c303      	stmia	r3!, {r0, r1}
 8021490:	6810      	ldr	r0, [r2, #0]
 8021492:	6851      	ldr	r1, [r2, #4]
 8021494:	ab08      	add	r3, sp, #32
 8021496:	c303      	stmia	r3!, {r0, r1}
 8021498:	a806      	add	r0, sp, #24
 802149a:	f7f9 f999 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802149e:	4629      	mov	r1, r5
 80214a0:	a808      	add	r0, sp, #32
 80214a2:	f7f9 f97d 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80214aa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80214ae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80214b2:	4d62      	ldr	r5, [pc, #392]	; (802163c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c0>)
 80214b4:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80214b8:	6828      	ldr	r0, [r5, #0]
 80214ba:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80214be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80214c2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80214c6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80214ca:	440a      	add	r2, r1
 80214cc:	f8ad 2020 	strh.w	r2, [sp, #32]
 80214d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80214d4:	4413      	add	r3, r2
 80214d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80214da:	6803      	ldr	r3, [r0, #0]
 80214dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80214de:	4798      	blx	r3
 80214e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80214e4:	d118      	bne.n	8021518 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80214e6:	f010 0f20 	tst.w	r0, #32
 80214ea:	6828      	ldr	r0, [r5, #0]
 80214ec:	d017      	beq.n	802151e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80214ee:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 80214f2:	6801      	ldr	r1, [r0, #0]
 80214f4:	9502      	str	r5, [sp, #8]
 80214f6:	b2b6      	uxth	r6, r6
 80214f8:	fa1f f588 	uxth.w	r5, r8
 80214fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8021500:	9601      	str	r6, [sp, #4]
 8021502:	9500      	str	r5, [sp, #0]
 8021504:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 8021506:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802150a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802150e:	4621      	mov	r1, r4
 8021510:	47a8      	blx	r5
 8021512:	b00b      	add	sp, #44	; 0x2c
 8021514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021518:	f010 0f40 	tst.w	r0, #64	; 0x40
 802151c:	e7e5      	b.n	80214ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802151e:	6803      	ldr	r3, [r0, #0]
 8021520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021522:	4798      	blx	r3
 8021524:	4946      	ldr	r1, [pc, #280]	; (8021640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021526:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 802152a:	880b      	ldrh	r3, [r1, #0]
 802152c:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8021530:	fb03 5202 	mla	r2, r3, r2, r5
 8021534:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021538:	4373      	muls	r3, r6
 802153a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802153e:	9305      	str	r3, [sp, #20]
 8021540:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021544:	9304      	str	r3, [sp, #16]
 8021546:	468a      	mov	sl, r1
 8021548:	9b05      	ldr	r3, [sp, #20]
 802154a:	4298      	cmp	r0, r3
 802154c:	d26f      	bcs.n	802162e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b2>
 802154e:	9b04      	ldr	r3, [sp, #16]
 8021550:	4621      	mov	r1, r4
 8021552:	eb00 0b03 	add.w	fp, r0, r3
 8021556:	4558      	cmp	r0, fp
 8021558:	d25c      	bcs.n	8021614 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x198>
 802155a:	f851 2b04 	ldr.w	r2, [r1], #4
 802155e:	0e14      	lsrs	r4, r2, #24
 8021560:	d016      	beq.n	8021590 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8021562:	2cff      	cmp	r4, #255	; 0xff
 8021564:	b2d3      	uxtb	r3, r2
 8021566:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802156a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 802156e:	d111      	bne.n	8021594 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021570:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021574:	d10e      	bne.n	8021594 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021576:	f6a4 04ff 	subw	r4, r4, #2303	; 0x8ff
 802157a:	ea04 2202 	and.w	r2, r4, r2, lsl #8
 802157e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021582:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8021586:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802158a:	ea43 030c 	orr.w	r3, r3, ip
 802158e:	8003      	strh	r3, [r0, #0]
 8021590:	3002      	adds	r0, #2
 8021592:	e7e0      	b.n	8021556 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8021594:	fb09 f404 	mul.w	r4, r9, r4
 8021598:	8807      	ldrh	r7, [r0, #0]
 802159a:	1c65      	adds	r5, r4, #1
 802159c:	eb05 2424 	add.w	r4, r5, r4, asr #8
 80215a0:	1224      	asrs	r4, r4, #8
 80215a2:	123e      	asrs	r6, r7, #8
 80215a4:	fa1f fe84 	uxth.w	lr, r4
 80215a8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80215ac:	43e4      	mvns	r4, r4
 80215ae:	b2d2      	uxtb	r2, r2
 80215b0:	b2e4      	uxtb	r4, r4
 80215b2:	10fd      	asrs	r5, r7, #3
 80215b4:	fb12 f20e 	smulbb	r2, r2, lr
 80215b8:	00ff      	lsls	r7, r7, #3
 80215ba:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80215be:	fb06 2604 	mla	r6, r6, r4, r2
 80215c2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80215c6:	b2ff      	uxtb	r7, r7
 80215c8:	fa5f fc8c 	uxtb.w	ip, ip
 80215cc:	b2b6      	uxth	r6, r6
 80215ce:	fb1c fc0e 	smulbb	ip, ip, lr
 80215d2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80215d6:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80215da:	fb13 f30e 	smulbb	r3, r3, lr
 80215de:	fb05 c504 	mla	r5, r5, r4, ip
 80215e2:	1c72      	adds	r2, r6, #1
 80215e4:	fb07 3704 	mla	r7, r7, r4, r3
 80215e8:	b2ad      	uxth	r5, r5
 80215ea:	b2bf      	uxth	r7, r7
 80215ec:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80215f0:	f406 4278 	and.w	r2, r6, #63488	; 0xf800
 80215f4:	f105 0c01 	add.w	ip, r5, #1
 80215f8:	1c7e      	adds	r6, r7, #1
 80215fa:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80215fe:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021602:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021606:	096d      	lsrs	r5, r5, #5
 8021608:	4316      	orrs	r6, r2
 802160a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802160e:	432e      	orrs	r6, r5
 8021610:	8006      	strh	r6, [r0, #0]
 8021612:	e7bd      	b.n	8021590 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8021614:	f8ba 3000 	ldrh.w	r3, [sl]
 8021618:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 802161c:	eba3 0308 	sub.w	r3, r3, r8
 8021620:	eba4 0408 	sub.w	r4, r4, r8
 8021624:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021628:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802162c:	e78c      	b.n	8021548 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xcc>
 802162e:	4b03      	ldr	r3, [pc, #12]	; (802163c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c0>)
 8021630:	6818      	ldr	r0, [r3, #0]
 8021632:	6803      	ldr	r3, [r0, #0]
 8021634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021636:	4798      	blx	r3
 8021638:	e76b      	b.n	8021512 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802163a:	bf00      	nop
 802163c:	20006700 	.word	0x20006700
 8021640:	200066fa 	.word	0x200066fa

08021644 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021644:	b570      	push	{r4, r5, r6, lr}
 8021646:	9d04      	ldr	r5, [sp, #16]
 8021648:	f89d 6018 	ldrb.w	r6, [sp, #24]
 802164c:	460c      	mov	r4, r1
 802164e:	4619      	mov	r1, r3
 8021650:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021654:	2a0d      	cmp	r2, #13
 8021656:	d820      	bhi.n	802169a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8021658:	e8df f002 	tbb	[pc, r2]
 802165c:	18121807 	.word	0x18121807
 8021660:	18181818 	.word	0x18181818
 8021664:	18181818 	.word	0x18181818
 8021668:	1818      	.short	0x1818
 802166a:	6802      	ldr	r2, [r0, #0]
 802166c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021670:	68d6      	ldr	r6, [r2, #12]
 8021672:	462b      	mov	r3, r5
 8021674:	460a      	mov	r2, r1
 8021676:	46b4      	mov	ip, r6
 8021678:	4621      	mov	r1, r4
 802167a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802167e:	4760      	bx	ip
 8021680:	462a      	mov	r2, r5
 8021682:	4620      	mov	r0, r4
 8021684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021688:	f7ff bef8 	b.w	802147c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802168c:	4b03      	ldr	r3, [pc, #12]	; (802169c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 802168e:	4a04      	ldr	r2, [pc, #16]	; (80216a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8021690:	4804      	ldr	r0, [pc, #16]	; (80216a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8021692:	f44f 7142 	mov.w	r1, #776	; 0x308
 8021696:	f00a ffe1 	bl	802c65c <__assert_func>
 802169a:	bd70      	pop	{r4, r5, r6, pc}
 802169c:	080315f6 	.word	0x080315f6
 80216a0:	08031d52 	.word	0x08031d52
 80216a4:	080314d1 	.word	0x080314d1

080216a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80216a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80216ac:	460e      	mov	r6, r1
 80216ae:	b08c      	sub	sp, #48	; 0x30
 80216b0:	4604      	mov	r4, r0
 80216b2:	6808      	ldr	r0, [r1, #0]
 80216b4:	6849      	ldr	r1, [r1, #4]
 80216b6:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8021888 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e0>
 80216ba:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 802188c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>
 80216be:	461d      	mov	r5, r3
 80216c0:	ab08      	add	r3, sp, #32
 80216c2:	c303      	stmia	r3!, {r0, r1}
 80216c4:	6810      	ldr	r0, [r2, #0]
 80216c6:	6851      	ldr	r1, [r2, #4]
 80216c8:	ab0a      	add	r3, sp, #40	; 0x28
 80216ca:	c303      	stmia	r3!, {r0, r1}
 80216cc:	a808      	add	r0, sp, #32
 80216ce:	f7f9 f87f 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216d2:	4631      	mov	r1, r6
 80216d4:	a80a      	add	r0, sp, #40	; 0x28
 80216d6:	f7f9 f863 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216da:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80216de:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80216e2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80216e6:	f8d8 0000 	ldr.w	r0, [r8]
 80216ea:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 80216ee:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80216f2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80216f6:	440c      	add	r4, r1
 80216f8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80216fc:	440a      	add	r2, r1
 80216fe:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021702:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8021706:	4413      	add	r3, r2
 8021708:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 802170c:	6803      	ldr	r3, [r0, #0]
 802170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021710:	4798      	blx	r3
 8021712:	2dff      	cmp	r5, #255	; 0xff
 8021714:	d122      	bne.n	802175c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb4>
 8021716:	f010 0f01 	tst.w	r0, #1
 802171a:	f8d8 0000 	ldr.w	r0, [r8]
 802171e:	d020      	beq.n	8021762 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xba>
 8021720:	2100      	movs	r1, #0
 8021722:	f04f 0e01 	mov.w	lr, #1
 8021726:	f8d0 c000 	ldr.w	ip, [r0]
 802172a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802172e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021732:	e9cd e106 	strd	lr, r1, [sp, #24]
 8021736:	f8b9 e000 	ldrh.w	lr, [r9]
 802173a:	9503      	str	r5, [sp, #12]
 802173c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021740:	b2b6      	uxth	r6, r6
 8021742:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8021746:	9102      	str	r1, [sp, #8]
 8021748:	b2bf      	uxth	r7, r7
 802174a:	9601      	str	r6, [sp, #4]
 802174c:	9700      	str	r7, [sp, #0]
 802174e:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8021752:	4621      	mov	r1, r4
 8021754:	47a8      	blx	r5
 8021756:	b00c      	add	sp, #48	; 0x30
 8021758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802175c:	f010 0f04 	tst.w	r0, #4
 8021760:	e7db      	b.n	802171a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x72>
 8021762:	6803      	ldr	r3, [r0, #0]
 8021764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021766:	4798      	blx	r3
 8021768:	f8b9 3000 	ldrh.w	r3, [r9]
 802176c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021770:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021774:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8021778:	fb03 1202 	mla	r2, r3, r2, r1
 802177c:	ebac 0c07 	sub.w	ip, ip, r7
 8021780:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021784:	435e      	muls	r6, r3
 8021786:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 802178a:	2dff      	cmp	r5, #255	; 0xff
 802178c:	eba3 0707 	sub.w	r7, r3, r7
 8021790:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021794:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021798:	ea4f 0747 	mov.w	r7, r7, lsl #1
 802179c:	d049      	beq.n	8021832 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x18a>
 802179e:	43eb      	mvns	r3, r5
 80217a0:	fa1f f985 	uxth.w	r9, r5
 80217a4:	b2db      	uxtb	r3, r3
 80217a6:	42b0      	cmp	r0, r6
 80217a8:	d266      	bcs.n	8021878 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80217aa:	eb00 0a0e 	add.w	sl, r0, lr
 80217ae:	4550      	cmp	r0, sl
 80217b0:	4621      	mov	r1, r4
 80217b2:	f104 0403 	add.w	r4, r4, #3
 80217b6:	d25b      	bcs.n	8021870 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80217b8:	8802      	ldrh	r2, [r0, #0]
 80217ba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80217be:	ea4f 2822 	mov.w	r8, r2, asr #8
 80217c2:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80217c6:	fb11 f109 	smulbb	r1, r1, r9
 80217ca:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80217ce:	10d5      	asrs	r5, r2, #3
 80217d0:	fb08 1803 	mla	r8, r8, r3, r1
 80217d4:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80217d8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80217dc:	fb11 f109 	smulbb	r1, r1, r9
 80217e0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80217e4:	fb05 1503 	mla	r5, r5, r3, r1
 80217e8:	00d2      	lsls	r2, r2, #3
 80217ea:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80217ee:	b2d2      	uxtb	r2, r2
 80217f0:	fb11 f109 	smulbb	r1, r1, r9
 80217f4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80217f8:	fa1f f888 	uxth.w	r8, r8
 80217fc:	fb02 1203 	mla	r2, r2, r3, r1
 8021800:	b292      	uxth	r2, r2
 8021802:	f108 0101 	add.w	r1, r8, #1
 8021806:	b2ad      	uxth	r5, r5
 8021808:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802180c:	1c51      	adds	r1, r2, #1
 802180e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021812:	1c69      	adds	r1, r5, #1
 8021814:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021818:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802181c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021820:	096d      	lsrs	r5, r5, #5
 8021822:	ea42 0208 	orr.w	r2, r2, r8
 8021826:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802182a:	432a      	orrs	r2, r5
 802182c:	f820 2b02 	strh.w	r2, [r0], #2
 8021830:	e7bd      	b.n	80217ae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021832:	4a14      	ldr	r2, [pc, #80]	; (8021884 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1dc>)
 8021834:	42b0      	cmp	r0, r6
 8021836:	d21f      	bcs.n	8021878 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021838:	eb00 050e 	add.w	r5, r0, lr
 802183c:	42a8      	cmp	r0, r5
 802183e:	4621      	mov	r1, r4
 8021840:	f104 0403 	add.w	r4, r4, #3
 8021844:	d210      	bcs.n	8021868 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c0>
 8021846:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802184a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802184e:	00db      	lsls	r3, r3, #3
 8021850:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8021854:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021858:	430b      	orrs	r3, r1
 802185a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802185e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8021862:	f820 3b02 	strh.w	r3, [r0], #2
 8021866:	e7e9      	b.n	802183c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8021868:	4438      	add	r0, r7
 802186a:	eb01 040c 	add.w	r4, r1, ip
 802186e:	e7e1      	b.n	8021834 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x18c>
 8021870:	4438      	add	r0, r7
 8021872:	eb01 040c 	add.w	r4, r1, ip
 8021876:	e796      	b.n	80217a6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xfe>
 8021878:	4b03      	ldr	r3, [pc, #12]	; (8021888 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e0>)
 802187a:	6818      	ldr	r0, [r3, #0]
 802187c:	6803      	ldr	r3, [r0, #0]
 802187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021880:	4798      	blx	r3
 8021882:	e768      	b.n	8021756 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xae>
 8021884:	fffff800 	.word	0xfffff800
 8021888:	20006700 	.word	0x20006700
 802188c:	200066fa 	.word	0x200066fa

08021890 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021894:	b093      	sub	sp, #76	; 0x4c
 8021896:	880e      	ldrh	r6, [r1, #0]
 8021898:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 802189c:	4681      	mov	r9, r0
 802189e:	4688      	mov	r8, r1
 80218a0:	4615      	mov	r5, r2
 80218a2:	b136      	cbz	r6, 80218b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80218a4:	4b70      	ldr	r3, [pc, #448]	; (8021a68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80218a6:	4a71      	ldr	r2, [pc, #452]	; (8021a6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80218a8:	4871      	ldr	r0, [pc, #452]	; (8021a70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80218aa:	f44f 719a 	mov.w	r1, #308	; 0x134
 80218ae:	f00a fed5 	bl	802c65c <__assert_func>
 80218b2:	6810      	ldr	r0, [r2, #0]
 80218b4:	6851      	ldr	r1, [r2, #4]
 80218b6:	4f6f      	ldr	r7, [pc, #444]	; (8021a74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80218b8:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8021a78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80218bc:	ac0e      	add	r4, sp, #56	; 0x38
 80218be:	c403      	stmia	r4!, {r0, r1}
 80218c0:	6818      	ldr	r0, [r3, #0]
 80218c2:	6859      	ldr	r1, [r3, #4]
 80218c4:	ac10      	add	r4, sp, #64	; 0x40
 80218c6:	c403      	stmia	r4!, {r0, r1}
 80218c8:	a80e      	add	r0, sp, #56	; 0x38
 80218ca:	f7f8 ff81 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218ce:	4629      	mov	r1, r5
 80218d0:	a810      	add	r0, sp, #64	; 0x40
 80218d2:	f7f8 ff65 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218d6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80218da:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80218de:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80218e2:	6838      	ldr	r0, [r7, #0]
 80218e4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80218e8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80218ec:	fb11 2103 	smlabb	r1, r1, r3, r2
 80218f0:	4489      	add	r9, r1
 80218f2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80218f6:	440a      	add	r2, r1
 80218f8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80218fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021900:	4413      	add	r3, r2
 8021902:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021906:	6803      	ldr	r3, [r0, #0]
 8021908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802190a:	4798      	blx	r3
 802190c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021910:	6838      	ldr	r0, [r7, #0]
 8021912:	d01c      	beq.n	802194e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8021914:	210b      	movs	r1, #11
 8021916:	6802      	ldr	r2, [r0, #0]
 8021918:	9608      	str	r6, [sp, #32]
 802191a:	9107      	str	r1, [sp, #28]
 802191c:	f8bb 1000 	ldrh.w	r1, [fp]
 8021920:	9106      	str	r1, [sp, #24]
 8021922:	2101      	movs	r1, #1
 8021924:	e9cd a104 	strd	sl, r1, [sp, #16]
 8021928:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802192c:	9103      	str	r1, [sp, #12]
 802192e:	b2a4      	uxth	r4, r4
 8021930:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8021934:	9100      	str	r1, [sp, #0]
 8021936:	b2ad      	uxth	r5, r5
 8021938:	9502      	str	r5, [sp, #8]
 802193a:	9401      	str	r4, [sp, #4]
 802193c:	6b94      	ldr	r4, [r2, #56]	; 0x38
 802193e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021942:	4642      	mov	r2, r8
 8021944:	4649      	mov	r1, r9
 8021946:	47a0      	blx	r4
 8021948:	b013      	add	sp, #76	; 0x4c
 802194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802194e:	6803      	ldr	r3, [r0, #0]
 8021950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021952:	4798      	blx	r3
 8021954:	f8bb 3000 	ldrh.w	r3, [fp]
 8021958:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802195c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021960:	fb03 1202 	mla	r2, r3, r2, r1
 8021964:	435d      	muls	r5, r3
 8021966:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802196a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802196e:	920c      	str	r2, [sp, #48]	; 0x30
 8021970:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021974:	1b12      	subs	r2, r2, r4
 8021976:	920d      	str	r2, [sp, #52]	; 0x34
 8021978:	0062      	lsls	r2, r4, #1
 802197a:	1b1c      	subs	r4, r3, r4
 802197c:	0063      	lsls	r3, r4, #1
 802197e:	920a      	str	r2, [sp, #40]	; 0x28
 8021980:	930b      	str	r3, [sp, #44]	; 0x2c
 8021982:	f04f 0e04 	mov.w	lr, #4
 8021986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021988:	4298      	cmp	r0, r3
 802198a:	d266      	bcs.n	8021a5a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ca>
 802198c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802198e:	eb00 0b03 	add.w	fp, r0, r3
 8021992:	4558      	cmp	r0, fp
 8021994:	d25c      	bcs.n	8021a50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8021996:	f819 3b01 	ldrb.w	r3, [r9], #1
 802199a:	fb1e e303 	smlabb	r3, lr, r3, lr
 802199e:	f858 2003 	ldr.w	r2, [r8, r3]
 80219a2:	0e11      	lsrs	r1, r2, #24
 80219a4:	d012      	beq.n	80219cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80219a6:	29ff      	cmp	r1, #255	; 0xff
 80219a8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80219ac:	d110      	bne.n	80219d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80219ae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80219b2:	d10d      	bne.n	80219d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80219b4:	0953      	lsrs	r3, r2, #5
 80219b6:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80219ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80219be:	f027 0707 	bic.w	r7, r7, #7
 80219c2:	431f      	orrs	r7, r3
 80219c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80219c8:	433a      	orrs	r2, r7
 80219ca:	8002      	strh	r2, [r0, #0]
 80219cc:	3002      	adds	r0, #2
 80219ce:	e7e0      	b.n	8021992 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x102>
 80219d0:	fb0a f101 	mul.w	r1, sl, r1
 80219d4:	8806      	ldrh	r6, [r0, #0]
 80219d6:	1c4b      	adds	r3, r1, #1
 80219d8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80219dc:	1235      	asrs	r5, r6, #8
 80219de:	10f4      	asrs	r4, r6, #3
 80219e0:	121b      	asrs	r3, r3, #8
 80219e2:	00f6      	lsls	r6, r6, #3
 80219e4:	b299      	uxth	r1, r3
 80219e6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80219ea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80219ee:	b2f6      	uxtb	r6, r6
 80219f0:	43db      	mvns	r3, r3
 80219f2:	b2d2      	uxtb	r2, r2
 80219f4:	b2db      	uxtb	r3, r3
 80219f6:	fb1c fc01 	smulbb	ip, ip, r1
 80219fa:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80219fe:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021a02:	fb12 f201 	smulbb	r2, r2, r1
 8021a06:	fb05 c503 	mla	r5, r5, r3, ip
 8021a0a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021a0e:	b2ff      	uxtb	r7, r7
 8021a10:	fb06 2203 	mla	r2, r6, r3, r2
 8021a14:	b2ad      	uxth	r5, r5
 8021a16:	fb17 f701 	smulbb	r7, r7, r1
 8021a1a:	b292      	uxth	r2, r2
 8021a1c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021a20:	fb04 7403 	mla	r4, r4, r3, r7
 8021a24:	f105 0c01 	add.w	ip, r5, #1
 8021a28:	1c57      	adds	r7, r2, #1
 8021a2a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021a2e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021a32:	b2a4      	uxth	r4, r4
 8021a34:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021a38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021a3c:	433d      	orrs	r5, r7
 8021a3e:	1c67      	adds	r7, r4, #1
 8021a40:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8021a44:	0964      	lsrs	r4, r4, #5
 8021a46:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021a4a:	4325      	orrs	r5, r4
 8021a4c:	8005      	strh	r5, [r0, #0]
 8021a4e:	e7bd      	b.n	80219cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a52:	4418      	add	r0, r3
 8021a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a56:	4499      	add	r9, r3
 8021a58:	e795      	b.n	8021986 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 8021a5a:	4b06      	ldr	r3, [pc, #24]	; (8021a74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021a5c:	6818      	ldr	r0, [r3, #0]
 8021a5e:	6803      	ldr	r3, [r0, #0]
 8021a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a62:	4798      	blx	r3
 8021a64:	e770      	b.n	8021948 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8021a66:	bf00      	nop
 8021a68:	080313cf 	.word	0x080313cf
 8021a6c:	08031b23 	.word	0x08031b23
 8021a70:	080314d1 	.word	0x080314d1
 8021a74:	20006700 	.word	0x20006700
 8021a78:	200066fa 	.word	0x200066fa

08021a7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a80:	4614      	mov	r4, r2
 8021a82:	880a      	ldrh	r2, [r1, #0]
 8021a84:	b087      	sub	sp, #28
 8021a86:	2a02      	cmp	r2, #2
 8021a88:	4680      	mov	r8, r0
 8021a8a:	460d      	mov	r5, r1
 8021a8c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8021a90:	d006      	beq.n	8021aa0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8021a92:	4b63      	ldr	r3, [pc, #396]	; (8021c20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8021a94:	4a63      	ldr	r2, [pc, #396]	; (8021c24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021a96:	4864      	ldr	r0, [pc, #400]	; (8021c28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8021a98:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8021a9c:	f00a fdde 	bl	802c65c <__assert_func>
 8021aa0:	2e00      	cmp	r6, #0
 8021aa2:	f000 80b9 	beq.w	8021c18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8021aa6:	6820      	ldr	r0, [r4, #0]
 8021aa8:	6861      	ldr	r1, [r4, #4]
 8021aaa:	af02      	add	r7, sp, #8
 8021aac:	c703      	stmia	r7!, {r0, r1}
 8021aae:	6818      	ldr	r0, [r3, #0]
 8021ab0:	6859      	ldr	r1, [r3, #4]
 8021ab2:	af04      	add	r7, sp, #16
 8021ab4:	c703      	stmia	r7!, {r0, r1}
 8021ab6:	a802      	add	r0, sp, #8
 8021ab8:	f7f8 fe8a 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021abc:	4621      	mov	r1, r4
 8021abe:	a804      	add	r0, sp, #16
 8021ac0:	f7f8 fe6e 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ac4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021ac8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021acc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021ad0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021ad4:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021ad8:	eb08 0401 	add.w	r4, r8, r1
 8021adc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021ae0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021ae4:	440a      	add	r2, r1
 8021ae6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021aea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021aee:	4413      	add	r3, r2
 8021af0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021af4:	4b4d      	ldr	r3, [pc, #308]	; (8021c2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021af6:	6818      	ldr	r0, [r3, #0]
 8021af8:	6803      	ldr	r3, [r0, #0]
 8021afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021afc:	4798      	blx	r3
 8021afe:	4b4c      	ldr	r3, [pc, #304]	; (8021c30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8021b00:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021b04:	881a      	ldrh	r2, [r3, #0]
 8021b06:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021b0a:	2eff      	cmp	r6, #255	; 0xff
 8021b0c:	fb02 c101 	mla	r1, r2, r1, ip
 8021b10:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021b14:	fb02 f207 	mul.w	r2, r2, r7
 8021b18:	f105 0104 	add.w	r1, r5, #4
 8021b1c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021b20:	461d      	mov	r5, r3
 8021b22:	d05a      	beq.n	8021bda <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8021b24:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021b28:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021b2c:	b2b6      	uxth	r6, r6
 8021b2e:	fa1f fe8e 	uxth.w	lr, lr
 8021b32:	9301      	str	r3, [sp, #4]
 8021b34:	4282      	cmp	r2, r0
 8021b36:	d96a      	bls.n	8021c0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021b38:	eb00 0b0a 	add.w	fp, r0, sl
 8021b3c:	4583      	cmp	fp, r0
 8021b3e:	d940      	bls.n	8021bc2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8021b40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021b44:	8805      	ldrh	r5, [r0, #0]
 8021b46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021b4a:	122f      	asrs	r7, r5, #8
 8021b4c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021b50:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021b54:	fb17 f70e 	smulbb	r7, r7, lr
 8021b58:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021b5c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021b60:	00ed      	lsls	r5, r5, #3
 8021b62:	fb0c 7c06 	mla	ip, ip, r6, r7
 8021b66:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021b6a:	10df      	asrs	r7, r3, #3
 8021b6c:	b2ed      	uxtb	r5, r5
 8021b6e:	00db      	lsls	r3, r3, #3
 8021b70:	fa1f fc8c 	uxth.w	ip, ip
 8021b74:	fb19 f90e 	smulbb	r9, r9, lr
 8021b78:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021b7c:	b2db      	uxtb	r3, r3
 8021b7e:	fb15 f50e 	smulbb	r5, r5, lr
 8021b82:	fb07 9706 	mla	r7, r7, r6, r9
 8021b86:	fb03 5306 	mla	r3, r3, r6, r5
 8021b8a:	f10c 0901 	add.w	r9, ip, #1
 8021b8e:	b29b      	uxth	r3, r3
 8021b90:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8021b94:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8021b98:	f103 0c01 	add.w	ip, r3, #1
 8021b9c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021ba0:	b2bf      	uxth	r7, r7
 8021ba2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021ba6:	ea4c 0c09 	orr.w	ip, ip, r9
 8021baa:	f107 0901 	add.w	r9, r7, #1
 8021bae:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021bb2:	097f      	lsrs	r7, r7, #5
 8021bb4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021bb8:	ea4c 0c07 	orr.w	ip, ip, r7
 8021bbc:	f820 cb02 	strh.w	ip, [r0], #2
 8021bc0:	e7bc      	b.n	8021b3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8021bc2:	9b01      	ldr	r3, [sp, #4]
 8021bc4:	881b      	ldrh	r3, [r3, #0]
 8021bc6:	eba3 0308 	sub.w	r3, r3, r8
 8021bca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021bce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021bd2:	eba3 0308 	sub.w	r3, r3, r8
 8021bd6:	441c      	add	r4, r3
 8021bd8:	e7ac      	b.n	8021b34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8021bda:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021bde:	4282      	cmp	r2, r0
 8021be0:	d915      	bls.n	8021c0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021be2:	eb00 060a 	add.w	r6, r0, sl
 8021be6:	4286      	cmp	r6, r0
 8021be8:	d906      	bls.n	8021bf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8021bea:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021bee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021bf2:	f820 3b02 	strh.w	r3, [r0], #2
 8021bf6:	e7f6      	b.n	8021be6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8021bf8:	882b      	ldrh	r3, [r5, #0]
 8021bfa:	eba3 0308 	sub.w	r3, r3, r8
 8021bfe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021c02:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021c06:	eba3 0308 	sub.w	r3, r3, r8
 8021c0a:	441c      	add	r4, r3
 8021c0c:	e7e7      	b.n	8021bde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8021c0e:	4b07      	ldr	r3, [pc, #28]	; (8021c2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021c10:	6818      	ldr	r0, [r3, #0]
 8021c12:	6803      	ldr	r3, [r0, #0]
 8021c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c16:	4798      	blx	r3
 8021c18:	b007      	add	sp, #28
 8021c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c1e:	bf00      	nop
 8021c20:	080312ff 	.word	0x080312ff
 8021c24:	0803198d 	.word	0x0803198d
 8021c28:	080314d1 	.word	0x080314d1
 8021c2c:	20006700 	.word	0x20006700
 8021c30:	200066fa 	.word	0x200066fa

08021c34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c38:	f8b1 9000 	ldrh.w	r9, [r1]
 8021c3c:	b091      	sub	sp, #68	; 0x44
 8021c3e:	f1b9 0f01 	cmp.w	r9, #1
 8021c42:	4604      	mov	r4, r0
 8021c44:	460f      	mov	r7, r1
 8021c46:	4690      	mov	r8, r2
 8021c48:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021c4c:	d006      	beq.n	8021c5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8021c4e:	4b84      	ldr	r3, [pc, #528]	; (8021e60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8021c50:	4a84      	ldr	r2, [pc, #528]	; (8021e64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8021c52:	4885      	ldr	r0, [pc, #532]	; (8021e68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8021c54:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8021c58:	f00a fd00 	bl	802c65c <__assert_func>
 8021c5c:	2d00      	cmp	r5, #0
 8021c5e:	d04f      	beq.n	8021d00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021c60:	6810      	ldr	r0, [r2, #0]
 8021c62:	6851      	ldr	r1, [r2, #4]
 8021c64:	f8df b208 	ldr.w	fp, [pc, #520]	; 8021e70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8021c68:	ae0c      	add	r6, sp, #48	; 0x30
 8021c6a:	c603      	stmia	r6!, {r0, r1}
 8021c6c:	6818      	ldr	r0, [r3, #0]
 8021c6e:	6859      	ldr	r1, [r3, #4]
 8021c70:	ae0e      	add	r6, sp, #56	; 0x38
 8021c72:	c603      	stmia	r6!, {r0, r1}
 8021c74:	a80c      	add	r0, sp, #48	; 0x30
 8021c76:	f7f8 fdab 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c7a:	4641      	mov	r1, r8
 8021c7c:	a80e      	add	r0, sp, #56	; 0x38
 8021c7e:	f7f8 fd8f 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c82:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021c86:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021c8a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021c8e:	f8db 0000 	ldr.w	r0, [fp]
 8021c92:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8021c96:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8021c9a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8021e74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8021c9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021ca2:	440c      	add	r4, r1
 8021ca4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021ca8:	440a      	add	r2, r1
 8021caa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021cae:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021cb2:	4413      	add	r3, r2
 8021cb4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021cb8:	6803      	ldr	r3, [r0, #0]
 8021cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021cbc:	4798      	blx	r3
 8021cbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021cc2:	f8db 0000 	ldr.w	r0, [fp]
 8021cc6:	d01e      	beq.n	8021d06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8021cc8:	210b      	movs	r1, #11
 8021cca:	f04f 0c00 	mov.w	ip, #0
 8021cce:	6802      	ldr	r2, [r0, #0]
 8021cd0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021cd4:	e9cd 1c07 	strd	r1, ip, [sp, #28]
 8021cd8:	f8b8 1000 	ldrh.w	r1, [r8]
 8021cdc:	9504      	str	r5, [sp, #16]
 8021cde:	e9cd 9105 	strd	r9, r1, [sp, #20]
 8021ce2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021ce6:	9103      	str	r1, [sp, #12]
 8021ce8:	fa1f f18a 	uxth.w	r1, sl
 8021cec:	9102      	str	r1, [sp, #8]
 8021cee:	b2b6      	uxth	r6, r6
 8021cf0:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 8021cf4:	9100      	str	r1, [sp, #0]
 8021cf6:	9601      	str	r6, [sp, #4]
 8021cf8:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8021cfa:	4621      	mov	r1, r4
 8021cfc:	463a      	mov	r2, r7
 8021cfe:	47a8      	blx	r5
 8021d00:	b011      	add	sp, #68	; 0x44
 8021d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d06:	6803      	ldr	r3, [r0, #0]
 8021d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d0a:	4798      	blx	r3
 8021d0c:	f8b8 2000 	ldrh.w	r2, [r8]
 8021d10:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021d14:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021d18:	2dff      	cmp	r5, #255	; 0xff
 8021d1a:	fb02 1303 	mla	r3, r2, r3, r1
 8021d1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021d22:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021d26:	fb0a fa02 	mul.w	sl, sl, r2
 8021d2a:	d062      	beq.n	8021df2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8021d2c:	ea6f 0c05 	mvn.w	ip, r5
 8021d30:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021d34:	930a      	str	r3, [sp, #40]	; 0x28
 8021d36:	b2ad      	uxth	r5, r5
 8021d38:	fa5f fc8c 	uxtb.w	ip, ip
 8021d3c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d42:	4298      	cmp	r0, r3
 8021d44:	f080 8085 	bcs.w	8021e52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021d48:	eb00 0b09 	add.w	fp, r0, r9
 8021d4c:	4558      	cmp	r0, fp
 8021d4e:	d246      	bcs.n	8021dde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021d50:	f814 eb01 	ldrb.w	lr, [r4], #1
 8021d54:	2303      	movs	r3, #3
 8021d56:	2204      	movs	r2, #4
 8021d58:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8021d5c:	eb07 0a0e 	add.w	sl, r7, lr
 8021d60:	8803      	ldrh	r3, [r0, #0]
 8021d62:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8021d66:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021d6a:	1219      	asrs	r1, r3, #8
 8021d6c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021d70:	fb18 f805 	smulbb	r8, r8, r5
 8021d74:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021d78:	10da      	asrs	r2, r3, #3
 8021d7a:	fb01 810c 	mla	r1, r1, ip, r8
 8021d7e:	00db      	lsls	r3, r3, #3
 8021d80:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021d84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021d88:	b2db      	uxtb	r3, r3
 8021d8a:	fb18 f805 	smulbb	r8, r8, r5
 8021d8e:	fb1e fe05 	smulbb	lr, lr, r5
 8021d92:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021d96:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021d9a:	b289      	uxth	r1, r1
 8021d9c:	fb02 820c 	mla	r2, r2, ip, r8
 8021da0:	fb03 e30c 	mla	r3, r3, ip, lr
 8021da4:	b292      	uxth	r2, r2
 8021da6:	b29b      	uxth	r3, r3
 8021da8:	f101 0801 	add.w	r8, r1, #1
 8021dac:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021db0:	f103 0e01 	add.w	lr, r3, #1
 8021db4:	f102 0801 	add.w	r8, r2, #1
 8021db8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021dbc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021dc0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021dc4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021dc8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021dcc:	ea4e 0101 	orr.w	r1, lr, r1
 8021dd0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021dd4:	ea41 0108 	orr.w	r1, r1, r8
 8021dd8:	f820 1b02 	strh.w	r1, [r0], #2
 8021ddc:	e7b6      	b.n	8021d4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8021dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021de0:	881b      	ldrh	r3, [r3, #0]
 8021de2:	1b9b      	subs	r3, r3, r6
 8021de4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021de8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021dec:	1b9b      	subs	r3, r3, r6
 8021dee:	441c      	add	r4, r3
 8021df0:	e7a6      	b.n	8021d40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8021df2:	491e      	ldr	r1, [pc, #120]	; (8021e6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8021df4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021df8:	2203      	movs	r2, #3
 8021dfa:	2504      	movs	r5, #4
 8021dfc:	4550      	cmp	r0, sl
 8021dfe:	d228      	bcs.n	8021e52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021e00:	eb00 0c09 	add.w	ip, r0, r9
 8021e04:	4560      	cmp	r0, ip
 8021e06:	4623      	mov	r3, r4
 8021e08:	d219      	bcs.n	8021e3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021e0a:	f893 e000 	ldrb.w	lr, [r3]
 8021e0e:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021e12:	eb07 0b0e 	add.w	fp, r7, lr
 8021e16:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021e1a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021e1e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021e22:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8021e26:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021e2a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021e2e:	ea43 030b 	orr.w	r3, r3, fp
 8021e32:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021e36:	3401      	adds	r4, #1
 8021e38:	f820 3b02 	strh.w	r3, [r0], #2
 8021e3c:	e7e2      	b.n	8021e04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8021e3e:	f8b8 3000 	ldrh.w	r3, [r8]
 8021e42:	1b9b      	subs	r3, r3, r6
 8021e44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021e48:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021e4c:	1b9b      	subs	r3, r3, r6
 8021e4e:	441c      	add	r4, r3
 8021e50:	e7d4      	b.n	8021dfc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8021e52:	4b07      	ldr	r3, [pc, #28]	; (8021e70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8021e54:	6818      	ldr	r0, [r3, #0]
 8021e56:	6803      	ldr	r3, [r0, #0]
 8021e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e5a:	4798      	blx	r3
 8021e5c:	e750      	b.n	8021d00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021e5e:	bf00      	nop
 8021e60:	0803134d 	.word	0x0803134d
 8021e64:	08031a16 	.word	0x08031a16
 8021e68:	080314d1 	.word	0x080314d1
 8021e6c:	fffff800 	.word	0xfffff800
 8021e70:	20006700 	.word	0x20006700
 8021e74:	200066fa 	.word	0x200066fa

08021e78 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021e78:	b430      	push	{r4, r5}
 8021e7a:	780d      	ldrb	r5, [r1, #0]
 8021e7c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8021e80:	2d01      	cmp	r5, #1
 8021e82:	d00a      	beq.n	8021e9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8021e84:	d305      	bcc.n	8021e92 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8021e86:	2d02      	cmp	r5, #2
 8021e88:	d10b      	bne.n	8021ea2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8021e8a:	9402      	str	r4, [sp, #8]
 8021e8c:	bc30      	pop	{r4, r5}
 8021e8e:	f7ff bdf5 	b.w	8021a7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021e92:	9402      	str	r4, [sp, #8]
 8021e94:	bc30      	pop	{r4, r5}
 8021e96:	f7ff bcfb 	b.w	8021890 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021e9a:	9402      	str	r4, [sp, #8]
 8021e9c:	bc30      	pop	{r4, r5}
 8021e9e:	f7ff bec9 	b.w	8021c34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021ea2:	bc30      	pop	{r4, r5}
 8021ea4:	4770      	bx	lr
	...

08021ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eac:	4604      	mov	r4, r0
 8021eae:	b087      	sub	sp, #28
 8021eb0:	6810      	ldr	r0, [r2, #0]
 8021eb2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8021eb6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80220f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8021eba:	460e      	mov	r6, r1
 8021ebc:	6851      	ldr	r1, [r2, #4]
 8021ebe:	ad02      	add	r5, sp, #8
 8021ec0:	c503      	stmia	r5!, {r0, r1}
 8021ec2:	6818      	ldr	r0, [r3, #0]
 8021ec4:	6859      	ldr	r1, [r3, #4]
 8021ec6:	ad04      	add	r5, sp, #16
 8021ec8:	4617      	mov	r7, r2
 8021eca:	c503      	stmia	r5!, {r0, r1}
 8021ecc:	a802      	add	r0, sp, #8
 8021ece:	f7f8 fc7f 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ed2:	4639      	mov	r1, r7
 8021ed4:	a804      	add	r0, sp, #16
 8021ed6:	f7f8 fc63 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021eda:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021ede:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ee2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021ee6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021eea:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021eee:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021ef2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021ef6:	440e      	add	r6, r1
 8021ef8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021efc:	440a      	add	r2, r1
 8021efe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021f02:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021f06:	4413      	add	r3, r2
 8021f08:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021f0c:	4b77      	ldr	r3, [pc, #476]	; (80220ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021f0e:	6818      	ldr	r0, [r3, #0]
 8021f10:	6803      	ldr	r3, [r0, #0]
 8021f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f14:	4798      	blx	r3
 8021f16:	f8b9 b000 	ldrh.w	fp, [r9]
 8021f1a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021f1e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021f22:	fb0b 2303 	mla	r3, fp, r3, r2
 8021f26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021f2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021f2e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021f32:	fb05 f50b 	mul.w	r5, r5, fp
 8021f36:	9300      	str	r3, [sp, #0]
 8021f38:	d069      	beq.n	802200e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021f3a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021f3e:	4558      	cmp	r0, fp
 8021f40:	f080 80cc 	bcs.w	80220dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021f44:	9b00      	ldr	r3, [sp, #0]
 8021f46:	18c3      	adds	r3, r0, r3
 8021f48:	9301      	str	r3, [sp, #4]
 8021f4a:	4631      	mov	r1, r6
 8021f4c:	9b01      	ldr	r3, [sp, #4]
 8021f4e:	4298      	cmp	r0, r3
 8021f50:	d24f      	bcs.n	8021ff2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021f56:	2a00      	cmp	r2, #0
 8021f58:	d048      	beq.n	8021fec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021f5a:	fb0a f202 	mul.w	r2, sl, r2
 8021f5e:	1c53      	adds	r3, r2, #1
 8021f60:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f64:	121b      	asrs	r3, r3, #8
 8021f66:	d041      	beq.n	8021fec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021f68:	8802      	ldrh	r2, [r0, #0]
 8021f6a:	f8b4 c000 	ldrh.w	ip, [r4]
 8021f6e:	b29e      	uxth	r6, r3
 8021f70:	1215      	asrs	r5, r2, #8
 8021f72:	43db      	mvns	r3, r3
 8021f74:	b2db      	uxtb	r3, r3
 8021f76:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021f7a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021f7e:	fb15 f503 	smulbb	r5, r5, r3
 8021f82:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021f86:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021f8a:	00d2      	lsls	r2, r2, #3
 8021f8c:	fb07 5706 	mla	r7, r7, r6, r5
 8021f90:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021f94:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021f98:	b2d2      	uxtb	r2, r2
 8021f9a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021f9e:	b2bf      	uxth	r7, r7
 8021fa0:	fb1e fe03 	smulbb	lr, lr, r3
 8021fa4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021fa8:	fa5f fc8c 	uxtb.w	ip, ip
 8021fac:	fb12 f203 	smulbb	r2, r2, r3
 8021fb0:	fb05 e506 	mla	r5, r5, r6, lr
 8021fb4:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021fb8:	f107 0e01 	add.w	lr, r7, #1
 8021fbc:	fa1f fc8c 	uxth.w	ip, ip
 8021fc0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021fc4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021fc8:	f10c 0701 	add.w	r7, ip, #1
 8021fcc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021fd0:	b2ad      	uxth	r5, r5
 8021fd2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021fd6:	ea47 070e 	orr.w	r7, r7, lr
 8021fda:	f105 0e01 	add.w	lr, r5, #1
 8021fde:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021fe2:	096d      	lsrs	r5, r5, #5
 8021fe4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021fe8:	432f      	orrs	r7, r5
 8021fea:	8007      	strh	r7, [r0, #0]
 8021fec:	3002      	adds	r0, #2
 8021fee:	3402      	adds	r4, #2
 8021ff0:	e7ac      	b.n	8021f4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021ff2:	f8b9 3000 	ldrh.w	r3, [r9]
 8021ff6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021ffa:	eba3 0308 	sub.w	r3, r3, r8
 8021ffe:	eba6 0608 	sub.w	r6, r6, r8
 8022002:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022006:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802200a:	440e      	add	r6, r1
 802200c:	e797      	b.n	8021f3e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802200e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022012:	42a8      	cmp	r0, r5
 8022014:	d262      	bcs.n	80220dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022016:	9b00      	ldr	r3, [sp, #0]
 8022018:	4631      	mov	r1, r6
 802201a:	eb00 0b03 	add.w	fp, r0, r3
 802201e:	4558      	cmp	r0, fp
 8022020:	d24e      	bcs.n	80220c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022026:	b12b      	cbz	r3, 8022034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022028:	2bff      	cmp	r3, #255	; 0xff
 802202a:	f8b4 e000 	ldrh.w	lr, [r4]
 802202e:	d104      	bne.n	802203a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022030:	f8a0 e000 	strh.w	lr, [r0]
 8022034:	3002      	adds	r0, #2
 8022036:	3402      	adds	r4, #2
 8022038:	e7f1      	b.n	802201e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 802203a:	8802      	ldrh	r2, [r0, #0]
 802203c:	b29f      	uxth	r7, r3
 802203e:	1216      	asrs	r6, r2, #8
 8022040:	43db      	mvns	r3, r3
 8022042:	b2db      	uxtb	r3, r3
 8022044:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022048:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802204c:	fb16 f603 	smulbb	r6, r6, r3
 8022050:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022054:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022058:	00d2      	lsls	r2, r2, #3
 802205a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802205e:	b2d2      	uxtb	r2, r2
 8022060:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022064:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022068:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802206c:	fb1a fa03 	smulbb	sl, sl, r3
 8022070:	fa1f fc8c 	uxth.w	ip, ip
 8022074:	fb12 f303 	smulbb	r3, r2, r3
 8022078:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802207c:	fa5f fe8e 	uxtb.w	lr, lr
 8022080:	fb06 a607 	mla	r6, r6, r7, sl
 8022084:	f10c 0201 	add.w	r2, ip, #1
 8022088:	fb0e 3307 	mla	r3, lr, r7, r3
 802208c:	b2b6      	uxth	r6, r6
 802208e:	b29b      	uxth	r3, r3
 8022090:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022094:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022098:	f106 0a01 	add.w	sl, r6, #1
 802209c:	f103 0c01 	add.w	ip, r3, #1
 80220a0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80220a4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80220a8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80220ac:	0976      	lsrs	r6, r6, #5
 80220ae:	ea4c 0c02 	orr.w	ip, ip, r2
 80220b2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80220b6:	ea4c 0c06 	orr.w	ip, ip, r6
 80220ba:	f8a0 c000 	strh.w	ip, [r0]
 80220be:	e7b9      	b.n	8022034 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80220c0:	f8b9 3000 	ldrh.w	r3, [r9]
 80220c4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80220c8:	eba3 0308 	sub.w	r3, r3, r8
 80220cc:	eba6 0608 	sub.w	r6, r6, r8
 80220d0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80220d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80220d8:	440e      	add	r6, r1
 80220da:	e79a      	b.n	8022012 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80220dc:	4b03      	ldr	r3, [pc, #12]	; (80220ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80220de:	6818      	ldr	r0, [r3, #0]
 80220e0:	6803      	ldr	r3, [r0, #0]
 80220e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220e4:	4798      	blx	r3
 80220e6:	b007      	add	sp, #28
 80220e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220ec:	20006700 	.word	0x20006700
 80220f0:	200066fa 	.word	0x200066fa

080220f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80220f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220f8:	b089      	sub	sp, #36	; 0x24
 80220fa:	4682      	mov	sl, r0
 80220fc:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8022100:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022102:	4689      	mov	r9, r1
 8022104:	4690      	mov	r8, r2
 8022106:	461f      	mov	r7, r3
 8022108:	b355      	cbz	r5, 8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 802210a:	4608      	mov	r0, r1
 802210c:	f7fc f92c 	bl	801e368 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022110:	4606      	mov	r6, r0
 8022112:	4648      	mov	r0, r9
 8022114:	f7fc f962 	bl	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022118:	f8ad 000e 	strh.w	r0, [sp, #14]
 802211c:	4648      	mov	r0, r9
 802211e:	f8ad 8008 	strh.w	r8, [sp, #8]
 8022122:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022126:	f8ad 700a 	strh.w	r7, [sp, #10]
 802212a:	f7fc fa25 	bl	801e578 <_ZNK8touchgfx6Bitmap7getDataEv>
 802212e:	4606      	mov	r6, r0
 8022130:	4648      	mov	r0, r9
 8022132:	f7fc fa53 	bl	801e5dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022136:	4680      	mov	r8, r0
 8022138:	4648      	mov	r0, r9
 802213a:	f7fc faa7 	bl	801e68c <_ZNK8touchgfx6Bitmap9getFormatEv>
 802213e:	280b      	cmp	r0, #11
 8022140:	f200 80ca 	bhi.w	80222d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e4>
 8022144:	e8df f000 	tbb	[pc, r0]
 8022148:	c8060f1e 	.word	0xc8060f1e
 802214c:	c8c8c8c8 	.word	0xc8c8c8c8
 8022150:	16c8c8c8 	.word	0x16c8c8c8
 8022154:	462b      	mov	r3, r5
 8022156:	4622      	mov	r2, r4
 8022158:	a902      	add	r1, sp, #8
 802215a:	4630      	mov	r0, r6
 802215c:	f7ff f98e 	bl	802147c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022160:	b009      	add	sp, #36	; 0x24
 8022162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022166:	462b      	mov	r3, r5
 8022168:	4622      	mov	r2, r4
 802216a:	a902      	add	r1, sp, #8
 802216c:	4630      	mov	r0, r6
 802216e:	f7ff fa9b 	bl	80216a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022172:	e7f5      	b.n	8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022174:	9500      	str	r5, [sp, #0]
 8022176:	4623      	mov	r3, r4
 8022178:	aa02      	add	r2, sp, #8
 802217a:	4641      	mov	r1, r8
 802217c:	4630      	mov	r0, r6
 802217e:	f7ff fe7b 	bl	8021e78 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022182:	e7ed      	b.n	8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022184:	4648      	mov	r0, r9
 8022186:	f7fc f9bd 	bl	801e504 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802218a:	b950      	cbnz	r0, 80221a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 802218c:	e9cd 5000 	strd	r5, r0, [sp]
 8022190:	f8da 3000 	ldr.w	r3, [sl]
 8022194:	aa02      	add	r2, sp, #8
 8022196:	68dd      	ldr	r5, [r3, #12]
 8022198:	4631      	mov	r1, r6
 802219a:	4623      	mov	r3, r4
 802219c:	4650      	mov	r0, sl
 802219e:	47a8      	blx	r5
 80221a0:	e7de      	b.n	8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 80221a2:	af06      	add	r7, sp, #24
 80221a4:	4649      	mov	r1, r9
 80221a6:	4638      	mov	r0, r7
 80221a8:	f7fc f952 	bl	801e450 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80221ac:	e897 0003 	ldmia.w	r7, {r0, r1}
 80221b0:	f10d 0910 	add.w	r9, sp, #16
 80221b4:	e889 0003 	stmia.w	r9, {r0, r1}
 80221b8:	4648      	mov	r0, r9
 80221ba:	4621      	mov	r1, r4
 80221bc:	f7f3 fed2 	bl	8015f64 <_ZN8touchgfx4RectaNERKS0_>
 80221c0:	4648      	mov	r0, r9
 80221c2:	f7f3 ff12 	bl	8015fea <_ZNK8touchgfx4Rect7isEmptyEv>
 80221c6:	b138      	cbz	r0, 80221d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>
 80221c8:	9500      	str	r5, [sp, #0]
 80221ca:	4623      	mov	r3, r4
 80221cc:	aa02      	add	r2, sp, #8
 80221ce:	4641      	mov	r1, r8
 80221d0:	4630      	mov	r0, r6
 80221d2:	f7ff fe69 	bl	8021ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80221d6:	e7c3      	b.n	8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 80221d8:	e9cd 5000 	strd	r5, r0, [sp]
 80221dc:	f8da 3000 	ldr.w	r3, [sl]
 80221e0:	aa02      	add	r2, sp, #8
 80221e2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80221e6:	4631      	mov	r1, r6
 80221e8:	464b      	mov	r3, r9
 80221ea:	4650      	mov	r0, sl
 80221ec:	47d8      	blx	fp
 80221ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80221f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80221f6:	4293      	cmp	r3, r2
 80221f8:	dd13      	ble.n	8022222 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x12e>
 80221fa:	f9b4 0000 	ldrsh.w	r0, [r4]
 80221fe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022202:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022206:	1a9b      	subs	r3, r3, r2
 8022208:	f8ad 201a 	strh.w	r2, [sp, #26]
 802220c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022210:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022214:	9500      	str	r5, [sp, #0]
 8022216:	463b      	mov	r3, r7
 8022218:	aa02      	add	r2, sp, #8
 802221a:	4641      	mov	r1, r8
 802221c:	4630      	mov	r0, r6
 802221e:	f7ff fe43 	bl	8021ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022222:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022226:	f9b4 2000 	ldrsh.w	r2, [r4]
 802222a:	4293      	cmp	r3, r2
 802222c:	dd13      	ble.n	8022256 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x162>
 802222e:	1a9b      	subs	r3, r3, r2
 8022230:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022234:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022238:	f8ad 2018 	strh.w	r2, [sp, #24]
 802223c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022240:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022244:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022248:	9500      	str	r5, [sp, #0]
 802224a:	463b      	mov	r3, r7
 802224c:	aa02      	add	r2, sp, #8
 802224e:	4641      	mov	r1, r8
 8022250:	4630      	mov	r0, r6
 8022252:	f7ff fe29 	bl	8021ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022256:	88a2      	ldrh	r2, [r4, #4]
 8022258:	8823      	ldrh	r3, [r4, #0]
 802225a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802225e:	4413      	add	r3, r2
 8022260:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022264:	440a      	add	r2, r1
 8022266:	b29b      	uxth	r3, r3
 8022268:	b292      	uxth	r2, r2
 802226a:	b211      	sxth	r1, r2
 802226c:	b218      	sxth	r0, r3
 802226e:	4288      	cmp	r0, r1
 8022270:	dd13      	ble.n	802229a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1a6>
 8022272:	1a9b      	subs	r3, r3, r2
 8022274:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022278:	f9bd c012 	ldrsh.w	ip, [sp, #18]
 802227c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022280:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022284:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022288:	9500      	str	r5, [sp, #0]
 802228a:	463b      	mov	r3, r7
 802228c:	aa02      	add	r2, sp, #8
 802228e:	4641      	mov	r1, r8
 8022290:	4630      	mov	r0, r6
 8022292:	f8ad c01a 	strh.w	ip, [sp, #26]
 8022296:	f7ff fe07 	bl	8021ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802229a:	88e2      	ldrh	r2, [r4, #6]
 802229c:	8863      	ldrh	r3, [r4, #2]
 802229e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80222a2:	4413      	add	r3, r2
 80222a4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80222a8:	440a      	add	r2, r1
 80222aa:	b29b      	uxth	r3, r3
 80222ac:	b292      	uxth	r2, r2
 80222ae:	b211      	sxth	r1, r2
 80222b0:	b218      	sxth	r0, r3
 80222b2:	4288      	cmp	r0, r1
 80222b4:	f77f af54 	ble.w	8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 80222b8:	f9b4 c000 	ldrsh.w	ip, [r4]
 80222bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80222c0:	f8ad c018 	strh.w	ip, [sp, #24]
 80222c4:	1a9b      	subs	r3, r3, r2
 80222c6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80222ca:	f8ad 101a 	strh.w	r1, [sp, #26]
 80222ce:	f8ad 001c 	strh.w	r0, [sp, #28]
 80222d2:	9500      	str	r5, [sp, #0]
 80222d4:	463b      	mov	r3, r7
 80222d6:	e779      	b.n	80221cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xd8>
 80222d8:	4b02      	ldr	r3, [pc, #8]	; (80222e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f0>)
 80222da:	4a03      	ldr	r2, [pc, #12]	; (80222e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f4>)
 80222dc:	4803      	ldr	r0, [pc, #12]	; (80222ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 80222de:	2181      	movs	r1, #129	; 0x81
 80222e0:	f00a f9bc 	bl	802c65c <__assert_func>
 80222e4:	0803139b 	.word	0x0803139b
 80222e8:	08031a9f 	.word	0x08031a9f
 80222ec:	080314d1 	.word	0x080314d1

080222f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80222f0:	b508      	push	{r3, lr}
 80222f2:	b180      	cbz	r0, 8022316 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80222f4:	2902      	cmp	r1, #2
 80222f6:	d014      	beq.n	8022322 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80222f8:	2903      	cmp	r1, #3
 80222fa:	d01d      	beq.n	8022338 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80222fc:	2901      	cmp	r1, #1
 80222fe:	d101      	bne.n	8022304 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022300:	2001      	movs	r0, #1
 8022302:	bd08      	pop	{r3, pc}
 8022304:	4b0e      	ldr	r3, [pc, #56]	; (8022340 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022306:	8818      	ldrh	r0, [r3, #0]
 8022308:	b990      	cbnz	r0, 8022330 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802230a:	4b0e      	ldr	r3, [pc, #56]	; (8022344 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 802230c:	4a0e      	ldr	r2, [pc, #56]	; (8022348 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802230e:	480f      	ldr	r0, [pc, #60]	; (802234c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8022310:	2150      	movs	r1, #80	; 0x50
 8022312:	f00a f9a3 	bl	802c65c <__assert_func>
 8022316:	2902      	cmp	r1, #2
 8022318:	d00e      	beq.n	8022338 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802231a:	2903      	cmp	r1, #3
 802231c:	d0f2      	beq.n	8022304 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802231e:	2901      	cmp	r1, #1
 8022320:	d1ee      	bne.n	8022300 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8022322:	4b07      	ldr	r3, [pc, #28]	; (8022340 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022324:	8818      	ldrh	r0, [r3, #0]
 8022326:	2800      	cmp	r0, #0
 8022328:	d0ef      	beq.n	802230a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802232a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802232e:	e7e8      	b.n	8022302 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022330:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022334:	4240      	negs	r0, r0
 8022336:	e7e4      	b.n	8022302 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022338:	f04f 30ff 	mov.w	r0, #4294967295
 802233c:	e7e1      	b.n	8022302 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802233e:	bf00      	nop
 8022340:	200066fa 	.word	0x200066fa
 8022344:	08031627 	.word	0x08031627
 8022348:	08031c1c 	.word	0x08031c1c
 802234c:	08031669 	.word	0x08031669

08022350 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022350:	b508      	push	{r3, lr}
 8022352:	b180      	cbz	r0, 8022376 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022354:	2902      	cmp	r1, #2
 8022356:	d014      	beq.n	8022382 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8022358:	2903      	cmp	r1, #3
 802235a:	d018      	beq.n	802238e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802235c:	2901      	cmp	r1, #1
 802235e:	d001      	beq.n	8022364 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022360:	2001      	movs	r0, #1
 8022362:	e013      	b.n	802238c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022364:	4b0e      	ldr	r3, [pc, #56]	; (80223a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022366:	8818      	ldrh	r0, [r3, #0]
 8022368:	b970      	cbnz	r0, 8022388 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 802236a:	4b0e      	ldr	r3, [pc, #56]	; (80223a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 802236c:	4a0e      	ldr	r2, [pc, #56]	; (80223a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 802236e:	480f      	ldr	r0, [pc, #60]	; (80223ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8022370:	2150      	movs	r1, #80	; 0x50
 8022372:	f00a f973 	bl	802c65c <__assert_func>
 8022376:	2902      	cmp	r1, #2
 8022378:	d009      	beq.n	802238e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802237a:	2903      	cmp	r1, #3
 802237c:	d0f0      	beq.n	8022360 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802237e:	2901      	cmp	r1, #1
 8022380:	d1f0      	bne.n	8022364 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022382:	f04f 30ff 	mov.w	r0, #4294967295
 8022386:	e001      	b.n	802238c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022388:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802238c:	bd08      	pop	{r3, pc}
 802238e:	4b04      	ldr	r3, [pc, #16]	; (80223a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022390:	8818      	ldrh	r0, [r3, #0]
 8022392:	2800      	cmp	r0, #0
 8022394:	d0e9      	beq.n	802236a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022396:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802239a:	4240      	negs	r0, r0
 802239c:	e7f6      	b.n	802238c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802239e:	bf00      	nop
 80223a0:	200066fa 	.word	0x200066fa
 80223a4:	08031627 	.word	0x08031627
 80223a8:	08031c1c 	.word	0x08031c1c
 80223ac:	08031669 	.word	0x08031669

080223b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80223b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b4:	b097      	sub	sp, #92	; 0x5c
 80223b6:	9109      	str	r1, [sp, #36]	; 0x24
 80223b8:	a912      	add	r1, sp, #72	; 0x48
 80223ba:	e881 000c 	stmia.w	r1, {r2, r3}
 80223be:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80223c2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80223c6:	9308      	str	r3, [sp, #32]
 80223c8:	f891 900d 	ldrb.w	r9, [r1, #13]
 80223cc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80223d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80223d2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80223d6:	930a      	str	r3, [sp, #40]	; 0x28
 80223d8:	7988      	ldrb	r0, [r1, #6]
 80223da:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 80223de:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 80223e2:	f8bd 708c 	ldrh.w	r7, [sp, #140]	; 0x8c
 80223e6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80223ea:	f89d a0ac 	ldrb.w	sl, [sp, #172]	; 0xac
 80223ee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80223f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80223f6:	4303      	orrs	r3, r0
 80223f8:	9307      	str	r3, [sp, #28]
 80223fa:	f000 81b3 	beq.w	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 80223fe:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022402:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8022406:	f891 9007 	ldrb.w	r9, [r1, #7]
 802240a:	ea59 0903 	orrs.w	r9, r9, r3
 802240e:	f000 81a9 	beq.w	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022412:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022416:	b29b      	uxth	r3, r3
 8022418:	2e00      	cmp	r6, #0
 802241a:	f000 8137 	beq.w	802268c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 802241e:	1af6      	subs	r6, r6, r3
 8022420:	b2b6      	uxth	r6, r6
 8022422:	0434      	lsls	r4, r6, #16
 8022424:	d502      	bpl.n	802242c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022426:	1bad      	subs	r5, r5, r6
 8022428:	b22d      	sxth	r5, r5
 802242a:	2600      	movs	r6, #0
 802242c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022430:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8022434:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8022438:	428d      	cmp	r5, r1
 802243a:	b28b      	uxth	r3, r1
 802243c:	bfbf      	itttt	lt
 802243e:	18f6      	addlt	r6, r6, r3
 8022440:	1b75      	sublt	r5, r6, r5
 8022442:	b2ae      	uxthlt	r6, r5
 8022444:	460d      	movlt	r5, r1
 8022446:	8891      	ldrh	r1, [r2, #4]
 8022448:	440b      	add	r3, r1
 802244a:	b21b      	sxth	r3, r3
 802244c:	930e      	str	r3, [sp, #56]	; 0x38
 802244e:	88d3      	ldrh	r3, [r2, #6]
 8022450:	8852      	ldrh	r2, [r2, #2]
 8022452:	4413      	add	r3, r2
 8022454:	b21b      	sxth	r3, r3
 8022456:	930d      	str	r3, [sp, #52]	; 0x34
 8022458:	4b8e      	ldr	r3, [pc, #568]	; (8022694 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>)
 802245a:	9a08      	ldr	r2, [sp, #32]
 802245c:	f893 b000 	ldrb.w	fp, [r3]
 8022460:	f10b 30ff 	add.w	r0, fp, #4294967295
 8022464:	4243      	negs	r3, r0
 8022466:	4143      	adcs	r3, r0
 8022468:	930c      	str	r3, [sp, #48]	; 0x30
 802246a:	4629      	mov	r1, r5
 802246c:	4653      	mov	r3, sl
 802246e:	a812      	add	r0, sp, #72	; 0x48
 8022470:	f7f7 ffea 	bl	801a448 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022474:	4629      	mov	r1, r5
 8022476:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802247a:	4653      	mov	r3, sl
 802247c:	9a08      	ldr	r2, [sp, #32]
 802247e:	a812      	add	r0, sp, #72	; 0x48
 8022480:	f7f7 fffa 	bl	801a478 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022484:	a916      	add	r1, sp, #88	; 0x58
 8022486:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802248a:	a815      	add	r0, sp, #84	; 0x54
 802248c:	f7f8 f956 	bl	801a73c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022490:	f1ba 0f00 	cmp.w	sl, #0
 8022494:	f040 8106 	bne.w	80226a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f4>
 8022498:	f1bb 0f01 	cmp.w	fp, #1
 802249c:	f040 810a 	bne.w	80226b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 80224a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80224a2:	b153      	cbz	r3, 80224ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80224a4:	9a07      	ldr	r2, [sp, #28]
 80224a6:	2408      	movs	r4, #8
 80224a8:	fb94 f3f8 	sdiv	r3, r4, r8
 80224ac:	1e5c      	subs	r4, r3, #1
 80224ae:	4414      	add	r4, r2
 80224b0:	fb94 f4f3 	sdiv	r4, r4, r3
 80224b4:	fb14 f403 	smulbb	r4, r4, r3
 80224b8:	b2a4      	uxth	r4, r4
 80224ba:	b906      	cbnz	r6, 80224be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80224bc:	b16f      	cbz	r7, 80224da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80224be:	fb07 6304 	mla	r3, r7, r4, r6
 80224c2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80224c4:	fb08 f303 	mul.w	r3, r8, r3
 80224c8:	463a      	mov	r2, r7
 80224ca:	f003 0707 	and.w	r7, r3, #7
 80224ce:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 80224d2:	9326      	str	r3, [sp, #152]	; 0x98
 80224d4:	eba9 0302 	sub.w	r3, r9, r2
 80224d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80224da:	4651      	mov	r1, sl
 80224dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80224de:	f7ff ff07 	bl	80222f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80224e2:	4651      	mov	r1, sl
 80224e4:	4681      	mov	r9, r0
 80224e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80224e8:	f7ff ff32 	bl	8022350 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80224ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80224ee:	9a08      	ldr	r2, [sp, #32]
 80224f0:	eba3 0a02 	sub.w	sl, r3, r2
 80224f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224f6:	459a      	cmp	sl, r3
 80224f8:	bfa8      	it	ge
 80224fa:	469a      	movge	sl, r3
 80224fc:	f1ba 0f00 	cmp.w	sl, #0
 8022500:	4683      	mov	fp, r0
 8022502:	f340 812f 	ble.w	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022508:	1bad      	subs	r5, r5, r6
 802250a:	1b5d      	subs	r5, r3, r5
 802250c:	9b07      	ldr	r3, [sp, #28]
 802250e:	429d      	cmp	r5, r3
 8022510:	bfd4      	ite	le
 8022512:	ebc6 0605 	rsble	r6, r6, r5
 8022516:	ebc6 0603 	rsbgt	r6, r6, r3
 802251a:	2e00      	cmp	r6, #0
 802251c:	f340 8122 	ble.w	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022520:	1ba4      	subs	r4, r4, r6
 8022522:	fb08 f304 	mul.w	r3, r8, r4
 8022526:	930d      	str	r3, [sp, #52]	; 0x34
 8022528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802252a:	2b00      	cmp	r3, #0
 802252c:	f040 811f 	bne.w	802276e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8022530:	4b59      	ldr	r3, [pc, #356]	; (8022698 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>)
 8022532:	6818      	ldr	r0, [r3, #0]
 8022534:	6803      	ldr	r3, [r0, #0]
 8022536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022538:	4798      	blx	r3
 802253a:	2301      	movs	r3, #1
 802253c:	fa03 f308 	lsl.w	r3, r3, r8
 8022540:	4a56      	ldr	r2, [pc, #344]	; (802269c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>)
 8022542:	3b01      	subs	r3, #1
 8022544:	b2db      	uxtb	r3, r3
 8022546:	8811      	ldrh	r1, [r2, #0]
 8022548:	930c      	str	r3, [sp, #48]	; 0x30
 802254a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802254e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8022552:	fb01 2303 	mla	r3, r1, r3, r2
 8022556:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802255a:	9308      	str	r3, [sp, #32]
 802255c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802255e:	0c1a      	lsrs	r2, r3, #16
 8022560:	b2d3      	uxtb	r3, r2
 8022562:	9311      	str	r3, [sp, #68]	; 0x44
 8022564:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022566:	0a1b      	lsrs	r3, r3, #8
 8022568:	b2d9      	uxtb	r1, r3
 802256a:	9110      	str	r1, [sp, #64]	; 0x40
 802256c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802256e:	b2c9      	uxtb	r1, r1
 8022570:	910e      	str	r1, [sp, #56]	; 0x38
 8022572:	494b      	ldr	r1, [pc, #300]	; (80226a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>)
 8022574:	ea01 2202 	and.w	r2, r1, r2, lsl #8
 8022578:	990e      	ldr	r1, [sp, #56]	; 0x38
 802257a:	00db      	lsls	r3, r3, #3
 802257c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022580:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8022584:	431a      	orrs	r2, r3
 8022586:	b293      	uxth	r3, r2
 8022588:	930f      	str	r3, [sp, #60]	; 0x3c
 802258a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802258c:	781a      	ldrb	r2, [r3, #0]
 802258e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022592:	413a      	asrs	r2, r7
 8022594:	fb06 b919 	mls	r9, r6, r9, fp
 8022598:	fb03 fb06 	mul.w	fp, r3, r6
 802259c:	b2d2      	uxtb	r2, r2
 802259e:	930b      	str	r3, [sp, #44]	; 0x2c
 80225a0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80225a4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80225a8:	f0c0 80f6 	bcc.w	8022798 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 80225ac:	f8dd c020 	ldr.w	ip, [sp, #32]
 80225b0:	46b6      	mov	lr, r6
 80225b2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80225b6:	f0c0 80de 	bcc.w	8022776 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 80225ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225bc:	4013      	ands	r3, r2
 80225be:	d055      	beq.n	802266c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2bc>
 80225c0:	20ff      	movs	r0, #255	; 0xff
 80225c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80225c4:	fb90 f1f1 	sdiv	r1, r0, r1
 80225c8:	434b      	muls	r3, r1
 80225ca:	2bfe      	cmp	r3, #254	; 0xfe
 80225cc:	dd03      	ble.n	80225d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 80225ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80225d0:	4281      	cmp	r1, r0
 80225d2:	f000 80ce 	beq.w	8022772 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c2>
 80225d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80225d8:	f8bc 4000 	ldrh.w	r4, [ip]
 80225dc:	fb11 f303 	smulbb	r3, r1, r3
 80225e0:	b29b      	uxth	r3, r3
 80225e2:	1c59      	adds	r1, r3, #1
 80225e4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80225e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80225ec:	b29d      	uxth	r5, r3
 80225ee:	43db      	mvns	r3, r3
 80225f0:	b2db      	uxtb	r3, r3
 80225f2:	9307      	str	r3, [sp, #28]
 80225f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80225f6:	1220      	asrs	r0, r4, #8
 80225f8:	fb13 f905 	smulbb	r9, r3, r5
 80225fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022600:	9b07      	ldr	r3, [sp, #28]
 8022602:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022606:	fb00 9003 	mla	r0, r0, r3, r9
 802260a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802260c:	10e1      	asrs	r1, r4, #3
 802260e:	fb13 f905 	smulbb	r9, r3, r5
 8022612:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022616:	9b07      	ldr	r3, [sp, #28]
 8022618:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802261c:	fb01 9103 	mla	r1, r1, r3, r9
 8022620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022622:	00e4      	lsls	r4, r4, #3
 8022624:	fb13 f505 	smulbb	r5, r3, r5
 8022628:	b2e4      	uxtb	r4, r4
 802262a:	9b07      	ldr	r3, [sp, #28]
 802262c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022630:	fb04 5403 	mla	r4, r4, r3, r5
 8022634:	b280      	uxth	r0, r0
 8022636:	b2a4      	uxth	r4, r4
 8022638:	1c43      	adds	r3, r0, #1
 802263a:	f104 0901 	add.w	r9, r4, #1
 802263e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022642:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8022646:	b289      	uxth	r1, r1
 8022648:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802264c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022650:	ea49 0000 	orr.w	r0, r9, r0
 8022654:	f101 0901 	add.w	r9, r1, #1
 8022658:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 802265c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022660:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022664:	ea40 0009 	orr.w	r0, r0, r9
 8022668:	f8ac 0000 	strh.w	r0, [ip]
 802266c:	4447      	add	r7, r8
 802266e:	b2bf      	uxth	r7, r7
 8022670:	2f07      	cmp	r7, #7
 8022672:	bf81      	itttt	hi
 8022674:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8022676:	785a      	ldrbhi	r2, [r3, #1]
 8022678:	3301      	addhi	r3, #1
 802267a:	9326      	strhi	r3, [sp, #152]	; 0x98
 802267c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802267e:	bf9a      	itte	ls
 8022680:	fa42 f208 	asrls.w	r2, r2, r8
 8022684:	b2d2      	uxtbls	r2, r2
 8022686:	2700      	movhi	r7, #0
 8022688:	449c      	add	ip, r3
 802268a:	e792      	b.n	80225b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 802268c:	441d      	add	r5, r3
 802268e:	b22d      	sxth	r5, r5
 8022690:	e6cc      	b.n	802242c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022692:	bf00      	nop
 8022694:	200066f8 	.word	0x200066f8
 8022698:	20006700 	.word	0x20006700
 802269c:	200066fa 	.word	0x200066fa
 80226a0:	fffff800 	.word	0xfffff800
 80226a4:	f1ba 0f01 	cmp.w	sl, #1
 80226a8:	f47f aefa 	bne.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80226ac:	f1bb 0f01 	cmp.w	fp, #1
 80226b0:	f47f aef6 	bne.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80226b4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80227bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x40c>
 80226b8:	f8db 0000 	ldr.w	r0, [fp]
 80226bc:	6803      	ldr	r3, [r0, #0]
 80226be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80226c0:	4798      	blx	r3
 80226c2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80226c6:	465a      	mov	r2, fp
 80226c8:	d006      	beq.n	80226d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x328>
 80226ca:	f1b8 0f04 	cmp.w	r8, #4
 80226ce:	d14c      	bne.n	802276a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 80226d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80226d2:	3300      	adds	r3, #0
 80226d4:	bf18      	it	ne
 80226d6:	2301      	movne	r3, #1
 80226d8:	0581      	lsls	r1, r0, #22
 80226da:	d566      	bpl.n	80227aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fa>
 80226dc:	f1b8 0f08 	cmp.w	r8, #8
 80226e0:	d163      	bne.n	80227aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fa>
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	bf0c      	ite	eq
 80226e6:	f44f 7c00 	moveq.w	ip, #512	; 0x200
 80226ea:	f44f 7c80 	movne.w	ip, #256	; 0x100
 80226ee:	2e00      	cmp	r6, #0
 80226f0:	f47f aed6 	bne.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80226f4:	2f00      	cmp	r7, #0
 80226f6:	f47f aed3 	bne.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80226fa:	9b07      	ldr	r3, [sp, #28]
 80226fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80226fe:	18eb      	adds	r3, r5, r3
 8022700:	428b      	cmp	r3, r1
 8022702:	f73f aecd 	bgt.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022706:	9b08      	ldr	r3, [sp, #32]
 8022708:	990d      	ldr	r1, [sp, #52]	; 0x34
 802270a:	444b      	add	r3, r9
 802270c:	428b      	cmp	r3, r1
 802270e:	f73f aec7 	bgt.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022712:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022714:	4e28      	ldr	r6, [pc, #160]	; (80227b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x408>)
 8022716:	6810      	ldr	r0, [r2, #0]
 8022718:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802271c:	6803      	ldr	r3, [r0, #0]
 802271e:	ea06 2611 	and.w	r6, r6, r1, lsr #8
 8022722:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022726:	4331      	orrs	r1, r6
 8022728:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 802272a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 802272c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8022730:	f8cd c014 	str.w	ip, [sp, #20]
 8022734:	f1b8 0f08 	cmp.w	r8, #8
 8022738:	ea4f 1656 	mov.w	r6, r6, lsr #5
 802273c:	bf18      	it	ne
 802273e:	3401      	addne	r4, #1
 8022740:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022744:	bf18      	it	ne
 8022746:	f024 0401 	bicne.w	r4, r4, #1
 802274a:	ea41 0106 	orr.w	r1, r1, r6
 802274e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022750:	bf18      	it	ne
 8022752:	b2a4      	uxthne	r4, r4
 8022754:	b289      	uxth	r1, r1
 8022756:	e9cd 1603 	strd	r1, r6, [sp, #12]
 802275a:	e9cd 9401 	strd	r9, r4, [sp, #4]
 802275e:	9400      	str	r4, [sp, #0]
 8022760:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022762:	47a8      	blx	r5
 8022764:	b017      	add	sp, #92	; 0x5c
 8022766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802276a:	2300      	movs	r3, #0
 802276c:	e7b4      	b.n	80226d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x328>
 802276e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022770:	e6e3      	b.n	802253a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18a>
 8022772:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022774:	e778      	b.n	8022668 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b8>
 8022776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022778:	b153      	cbz	r3, 8022790 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 802277a:	441f      	add	r7, r3
 802277c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802277e:	b2bf      	uxth	r7, r7
 8022780:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8022784:	f007 0707 	and.w	r7, r7, #7
 8022788:	781a      	ldrb	r2, [r3, #0]
 802278a:	9326      	str	r3, [sp, #152]	; 0x98
 802278c:	413a      	asrs	r2, r7
 802278e:	b2d2      	uxtb	r2, r2
 8022790:	9b08      	ldr	r3, [sp, #32]
 8022792:	445b      	add	r3, fp
 8022794:	9308      	str	r3, [sp, #32]
 8022796:	e705      	b.n	80225a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8022798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802279a:	2b00      	cmp	r3, #0
 802279c:	d1e2      	bne.n	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802279e:	4b07      	ldr	r3, [pc, #28]	; (80227bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x40c>)
 80227a0:	6818      	ldr	r0, [r3, #0]
 80227a2:	6803      	ldr	r3, [r0, #0]
 80227a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80227a6:	4798      	blx	r3
 80227a8:	e7dc      	b.n	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	f43f ae78 	beq.w	80224a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80227b0:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80227b4:	e79b      	b.n	80226ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80227b6:	bf00      	nop
 80227b8:	fffff800 	.word	0xfffff800
 80227bc:	20006700 	.word	0x20006700

080227c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80227c0:	b538      	push	{r3, r4, r5, lr}
 80227c2:	4c15      	ldr	r4, [pc, #84]	; (8022818 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80227c4:	7823      	ldrb	r3, [r4, #0]
 80227c6:	f3bf 8f5b 	dmb	ish
 80227ca:	07da      	lsls	r2, r3, #31
 80227cc:	4605      	mov	r5, r0
 80227ce:	d40b      	bmi.n	80227e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80227d0:	4620      	mov	r0, r4
 80227d2:	f009 f926 	bl	802ba22 <__cxa_guard_acquire>
 80227d6:	b138      	cbz	r0, 80227e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80227d8:	4620      	mov	r0, r4
 80227da:	f009 f92e 	bl	802ba3a <__cxa_guard_release>
 80227de:	4a0f      	ldr	r2, [pc, #60]	; (802281c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80227e0:	490f      	ldr	r1, [pc, #60]	; (8022820 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80227e2:	4810      	ldr	r0, [pc, #64]	; (8022824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80227e4:	f009 f916 	bl	802ba14 <__aeabi_atexit>
 80227e8:	4c0f      	ldr	r4, [pc, #60]	; (8022828 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80227ea:	7823      	ldrb	r3, [r4, #0]
 80227ec:	f3bf 8f5b 	dmb	ish
 80227f0:	07db      	lsls	r3, r3, #31
 80227f2:	d40b      	bmi.n	802280c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80227f4:	4620      	mov	r0, r4
 80227f6:	f009 f914 	bl	802ba22 <__cxa_guard_acquire>
 80227fa:	b138      	cbz	r0, 802280c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80227fc:	4620      	mov	r0, r4
 80227fe:	f009 f91c 	bl	802ba3a <__cxa_guard_release>
 8022802:	4a06      	ldr	r2, [pc, #24]	; (802281c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022804:	4909      	ldr	r1, [pc, #36]	; (802282c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022806:	480a      	ldr	r0, [pc, #40]	; (8022830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022808:	f009 f904 	bl	802ba14 <__aeabi_atexit>
 802280c:	4b05      	ldr	r3, [pc, #20]	; (8022824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802280e:	612b      	str	r3, [r5, #16]
 8022810:	4b07      	ldr	r3, [pc, #28]	; (8022830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022812:	616b      	str	r3, [r5, #20]
 8022814:	bd38      	pop	{r3, r4, r5, pc}
 8022816:	bf00      	nop
 8022818:	200067cc 	.word	0x200067cc
 802281c:	20000000 	.word	0x20000000
 8022820:	08020bdf 	.word	0x08020bdf
 8022824:	20000074 	.word	0x20000074
 8022828:	200067d0 	.word	0x200067d0
 802282c:	08020bdd 	.word	0x08020bdd
 8022830:	20000078 	.word	0x20000078

08022834 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022834:	b538      	push	{r3, r4, r5, lr}
 8022836:	4c15      	ldr	r4, [pc, #84]	; (802288c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022838:	7823      	ldrb	r3, [r4, #0]
 802283a:	f3bf 8f5b 	dmb	ish
 802283e:	07da      	lsls	r2, r3, #31
 8022840:	4605      	mov	r5, r0
 8022842:	d40b      	bmi.n	802285c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022844:	4620      	mov	r0, r4
 8022846:	f009 f8ec 	bl	802ba22 <__cxa_guard_acquire>
 802284a:	b138      	cbz	r0, 802285c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802284c:	4620      	mov	r0, r4
 802284e:	f009 f8f4 	bl	802ba3a <__cxa_guard_release>
 8022852:	4a0f      	ldr	r2, [pc, #60]	; (8022890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022854:	490f      	ldr	r1, [pc, #60]	; (8022894 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022856:	4810      	ldr	r0, [pc, #64]	; (8022898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022858:	f009 f8dc 	bl	802ba14 <__aeabi_atexit>
 802285c:	4c0f      	ldr	r4, [pc, #60]	; (802289c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802285e:	7823      	ldrb	r3, [r4, #0]
 8022860:	f3bf 8f5b 	dmb	ish
 8022864:	07db      	lsls	r3, r3, #31
 8022866:	d40b      	bmi.n	8022880 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022868:	4620      	mov	r0, r4
 802286a:	f009 f8da 	bl	802ba22 <__cxa_guard_acquire>
 802286e:	b138      	cbz	r0, 8022880 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022870:	4620      	mov	r0, r4
 8022872:	f009 f8e2 	bl	802ba3a <__cxa_guard_release>
 8022876:	4a06      	ldr	r2, [pc, #24]	; (8022890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022878:	4909      	ldr	r1, [pc, #36]	; (80228a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802287a:	480a      	ldr	r0, [pc, #40]	; (80228a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802287c:	f009 f8ca 	bl	802ba14 <__aeabi_atexit>
 8022880:	4b05      	ldr	r3, [pc, #20]	; (8022898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022882:	60ab      	str	r3, [r5, #8]
 8022884:	4b07      	ldr	r3, [pc, #28]	; (80228a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022886:	60eb      	str	r3, [r5, #12]
 8022888:	bd38      	pop	{r3, r4, r5, pc}
 802288a:	bf00      	nop
 802288c:	200067a4 	.word	0x200067a4
 8022890:	20000000 	.word	0x20000000
 8022894:	08020be3 	.word	0x08020be3
 8022898:	2000004c 	.word	0x2000004c
 802289c:	200067a8 	.word	0x200067a8
 80228a0:	08020be1 	.word	0x08020be1
 80228a4:	20000050 	.word	0x20000050

080228a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80228a8:	b510      	push	{r4, lr}
 80228aa:	4604      	mov	r4, r0
 80228ac:	f7ff ff88 	bl	80227c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80228b0:	4620      	mov	r0, r4
 80228b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228b6:	f7ff bfbd 	b.w	8022834 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080228bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80228bc:	b538      	push	{r3, r4, r5, lr}
 80228be:	4c15      	ldr	r4, [pc, #84]	; (8022914 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80228c0:	7823      	ldrb	r3, [r4, #0]
 80228c2:	f3bf 8f5b 	dmb	ish
 80228c6:	07da      	lsls	r2, r3, #31
 80228c8:	4605      	mov	r5, r0
 80228ca:	d40b      	bmi.n	80228e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80228cc:	4620      	mov	r0, r4
 80228ce:	f009 f8a8 	bl	802ba22 <__cxa_guard_acquire>
 80228d2:	b138      	cbz	r0, 80228e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80228d4:	4620      	mov	r0, r4
 80228d6:	f009 f8b0 	bl	802ba3a <__cxa_guard_release>
 80228da:	4a0f      	ldr	r2, [pc, #60]	; (8022918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80228dc:	490f      	ldr	r1, [pc, #60]	; (802291c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80228de:	4810      	ldr	r0, [pc, #64]	; (8022920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80228e0:	f009 f898 	bl	802ba14 <__aeabi_atexit>
 80228e4:	4c0f      	ldr	r4, [pc, #60]	; (8022924 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80228e6:	7823      	ldrb	r3, [r4, #0]
 80228e8:	f3bf 8f5b 	dmb	ish
 80228ec:	07db      	lsls	r3, r3, #31
 80228ee:	d40b      	bmi.n	8022908 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80228f0:	4620      	mov	r0, r4
 80228f2:	f009 f896 	bl	802ba22 <__cxa_guard_acquire>
 80228f6:	b138      	cbz	r0, 8022908 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80228f8:	4620      	mov	r0, r4
 80228fa:	f009 f89e 	bl	802ba3a <__cxa_guard_release>
 80228fe:	4a06      	ldr	r2, [pc, #24]	; (8022918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022900:	4909      	ldr	r1, [pc, #36]	; (8022928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022902:	480a      	ldr	r0, [pc, #40]	; (802292c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022904:	f009 f886 	bl	802ba14 <__aeabi_atexit>
 8022908:	4b05      	ldr	r3, [pc, #20]	; (8022920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802290a:	622b      	str	r3, [r5, #32]
 802290c:	4b07      	ldr	r3, [pc, #28]	; (802292c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802290e:	626b      	str	r3, [r5, #36]	; 0x24
 8022910:	bd38      	pop	{r3, r4, r5, pc}
 8022912:	bf00      	nop
 8022914:	200067d4 	.word	0x200067d4
 8022918:	20000000 	.word	0x20000000
 802291c:	08020bd7 	.word	0x08020bd7
 8022920:	2000007c 	.word	0x2000007c
 8022924:	200067d8 	.word	0x200067d8
 8022928:	08020bd5 	.word	0x08020bd5
 802292c:	20000080 	.word	0x20000080

08022930 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022930:	b538      	push	{r3, r4, r5, lr}
 8022932:	4c15      	ldr	r4, [pc, #84]	; (8022988 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022934:	7823      	ldrb	r3, [r4, #0]
 8022936:	f3bf 8f5b 	dmb	ish
 802293a:	07da      	lsls	r2, r3, #31
 802293c:	4605      	mov	r5, r0
 802293e:	d40b      	bmi.n	8022958 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022940:	4620      	mov	r0, r4
 8022942:	f009 f86e 	bl	802ba22 <__cxa_guard_acquire>
 8022946:	b138      	cbz	r0, 8022958 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022948:	4620      	mov	r0, r4
 802294a:	f009 f876 	bl	802ba3a <__cxa_guard_release>
 802294e:	4a0f      	ldr	r2, [pc, #60]	; (802298c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022950:	490f      	ldr	r1, [pc, #60]	; (8022990 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022952:	4810      	ldr	r0, [pc, #64]	; (8022994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022954:	f009 f85e 	bl	802ba14 <__aeabi_atexit>
 8022958:	4c0f      	ldr	r4, [pc, #60]	; (8022998 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802295a:	7823      	ldrb	r3, [r4, #0]
 802295c:	f3bf 8f5b 	dmb	ish
 8022960:	07db      	lsls	r3, r3, #31
 8022962:	d40b      	bmi.n	802297c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022964:	4620      	mov	r0, r4
 8022966:	f009 f85c 	bl	802ba22 <__cxa_guard_acquire>
 802296a:	b138      	cbz	r0, 802297c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802296c:	4620      	mov	r0, r4
 802296e:	f009 f864 	bl	802ba3a <__cxa_guard_release>
 8022972:	4a06      	ldr	r2, [pc, #24]	; (802298c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022974:	4909      	ldr	r1, [pc, #36]	; (802299c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022976:	480a      	ldr	r0, [pc, #40]	; (80229a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022978:	f009 f84c 	bl	802ba14 <__aeabi_atexit>
 802297c:	4b05      	ldr	r3, [pc, #20]	; (8022994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802297e:	61ab      	str	r3, [r5, #24]
 8022980:	4b07      	ldr	r3, [pc, #28]	; (80229a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022982:	61eb      	str	r3, [r5, #28]
 8022984:	bd38      	pop	{r3, r4, r5, pc}
 8022986:	bf00      	nop
 8022988:	200067ac 	.word	0x200067ac
 802298c:	20000000 	.word	0x20000000
 8022990:	08020bdb 	.word	0x08020bdb
 8022994:	20000054 	.word	0x20000054
 8022998:	200067b0 	.word	0x200067b0
 802299c:	08020bd9 	.word	0x08020bd9
 80229a0:	20000058 	.word	0x20000058

080229a4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80229a4:	b510      	push	{r4, lr}
 80229a6:	4604      	mov	r4, r0
 80229a8:	f7ff ff88 	bl	80228bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80229ac:	4620      	mov	r0, r4
 80229ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229b2:	f7ff bfbd 	b.w	8022930 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080229b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80229b8:	b538      	push	{r3, r4, r5, lr}
 80229ba:	4c15      	ldr	r4, [pc, #84]	; (8022a10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80229bc:	7823      	ldrb	r3, [r4, #0]
 80229be:	f3bf 8f5b 	dmb	ish
 80229c2:	07da      	lsls	r2, r3, #31
 80229c4:	4605      	mov	r5, r0
 80229c6:	d40b      	bmi.n	80229e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80229c8:	4620      	mov	r0, r4
 80229ca:	f009 f82a 	bl	802ba22 <__cxa_guard_acquire>
 80229ce:	b138      	cbz	r0, 80229e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80229d0:	4620      	mov	r0, r4
 80229d2:	f009 f832 	bl	802ba3a <__cxa_guard_release>
 80229d6:	4a0f      	ldr	r2, [pc, #60]	; (8022a14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80229d8:	490f      	ldr	r1, [pc, #60]	; (8022a18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80229da:	4810      	ldr	r0, [pc, #64]	; (8022a1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80229dc:	f009 f81a 	bl	802ba14 <__aeabi_atexit>
 80229e0:	4c0f      	ldr	r4, [pc, #60]	; (8022a20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80229e2:	7823      	ldrb	r3, [r4, #0]
 80229e4:	f3bf 8f5b 	dmb	ish
 80229e8:	07db      	lsls	r3, r3, #31
 80229ea:	d40b      	bmi.n	8022a04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80229ec:	4620      	mov	r0, r4
 80229ee:	f009 f818 	bl	802ba22 <__cxa_guard_acquire>
 80229f2:	b138      	cbz	r0, 8022a04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80229f4:	4620      	mov	r0, r4
 80229f6:	f009 f820 	bl	802ba3a <__cxa_guard_release>
 80229fa:	4a06      	ldr	r2, [pc, #24]	; (8022a14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80229fc:	4909      	ldr	r1, [pc, #36]	; (8022a24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80229fe:	480a      	ldr	r0, [pc, #40]	; (8022a28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022a00:	f009 f808 	bl	802ba14 <__aeabi_atexit>
 8022a04:	4b05      	ldr	r3, [pc, #20]	; (8022a1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022a06:	632b      	str	r3, [r5, #48]	; 0x30
 8022a08:	4b07      	ldr	r3, [pc, #28]	; (8022a28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022a0a:	636b      	str	r3, [r5, #52]	; 0x34
 8022a0c:	bd38      	pop	{r3, r4, r5, pc}
 8022a0e:	bf00      	nop
 8022a10:	200067e4 	.word	0x200067e4
 8022a14:	20000000 	.word	0x20000000
 8022a18:	08020bcf 	.word	0x08020bcf
 8022a1c:	2000008c 	.word	0x2000008c
 8022a20:	200067e8 	.word	0x200067e8
 8022a24:	08020bcd 	.word	0x08020bcd
 8022a28:	20000090 	.word	0x20000090

08022a2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022a2c:	b538      	push	{r3, r4, r5, lr}
 8022a2e:	4c15      	ldr	r4, [pc, #84]	; (8022a84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022a30:	7823      	ldrb	r3, [r4, #0]
 8022a32:	f3bf 8f5b 	dmb	ish
 8022a36:	07da      	lsls	r2, r3, #31
 8022a38:	4605      	mov	r5, r0
 8022a3a:	d40b      	bmi.n	8022a54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022a3c:	4620      	mov	r0, r4
 8022a3e:	f008 fff0 	bl	802ba22 <__cxa_guard_acquire>
 8022a42:	b138      	cbz	r0, 8022a54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022a44:	4620      	mov	r0, r4
 8022a46:	f008 fff8 	bl	802ba3a <__cxa_guard_release>
 8022a4a:	4a0f      	ldr	r2, [pc, #60]	; (8022a88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022a4c:	490f      	ldr	r1, [pc, #60]	; (8022a8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022a4e:	4810      	ldr	r0, [pc, #64]	; (8022a90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022a50:	f008 ffe0 	bl	802ba14 <__aeabi_atexit>
 8022a54:	4c0f      	ldr	r4, [pc, #60]	; (8022a94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022a56:	7823      	ldrb	r3, [r4, #0]
 8022a58:	f3bf 8f5b 	dmb	ish
 8022a5c:	07db      	lsls	r3, r3, #31
 8022a5e:	d40b      	bmi.n	8022a78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022a60:	4620      	mov	r0, r4
 8022a62:	f008 ffde 	bl	802ba22 <__cxa_guard_acquire>
 8022a66:	b138      	cbz	r0, 8022a78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022a68:	4620      	mov	r0, r4
 8022a6a:	f008 ffe6 	bl	802ba3a <__cxa_guard_release>
 8022a6e:	4a06      	ldr	r2, [pc, #24]	; (8022a88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022a70:	4909      	ldr	r1, [pc, #36]	; (8022a98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022a72:	480a      	ldr	r0, [pc, #40]	; (8022a9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022a74:	f008 ffce 	bl	802ba14 <__aeabi_atexit>
 8022a78:	4b05      	ldr	r3, [pc, #20]	; (8022a90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022a7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8022a7c:	4b07      	ldr	r3, [pc, #28]	; (8022a9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022a7e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022a80:	bd38      	pop	{r3, r4, r5, pc}
 8022a82:	bf00      	nop
 8022a84:	200067b4 	.word	0x200067b4
 8022a88:	20000000 	.word	0x20000000
 8022a8c:	08020bd3 	.word	0x08020bd3
 8022a90:	2000005c 	.word	0x2000005c
 8022a94:	200067b8 	.word	0x200067b8
 8022a98:	08020bd1 	.word	0x08020bd1
 8022a9c:	20000060 	.word	0x20000060

08022aa0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022aa0:	b510      	push	{r4, lr}
 8022aa2:	4604      	mov	r4, r0
 8022aa4:	f7ff ff88 	bl	80229b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022aa8:	4620      	mov	r0, r4
 8022aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022aae:	f7ff bfbd 	b.w	8022a2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022ab4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022ab4:	b538      	push	{r3, r4, r5, lr}
 8022ab6:	4c15      	ldr	r4, [pc, #84]	; (8022b0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022ab8:	7823      	ldrb	r3, [r4, #0]
 8022aba:	f3bf 8f5b 	dmb	ish
 8022abe:	07da      	lsls	r2, r3, #31
 8022ac0:	4605      	mov	r5, r0
 8022ac2:	d40b      	bmi.n	8022adc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	f008 ffac 	bl	802ba22 <__cxa_guard_acquire>
 8022aca:	b138      	cbz	r0, 8022adc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022acc:	4620      	mov	r0, r4
 8022ace:	f008 ffb4 	bl	802ba3a <__cxa_guard_release>
 8022ad2:	4a0f      	ldr	r2, [pc, #60]	; (8022b10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022ad4:	490f      	ldr	r1, [pc, #60]	; (8022b14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022ad6:	4810      	ldr	r0, [pc, #64]	; (8022b18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022ad8:	f008 ff9c 	bl	802ba14 <__aeabi_atexit>
 8022adc:	4c0f      	ldr	r4, [pc, #60]	; (8022b1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022ade:	7823      	ldrb	r3, [r4, #0]
 8022ae0:	f3bf 8f5b 	dmb	ish
 8022ae4:	07db      	lsls	r3, r3, #31
 8022ae6:	d40b      	bmi.n	8022b00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022ae8:	4620      	mov	r0, r4
 8022aea:	f008 ff9a 	bl	802ba22 <__cxa_guard_acquire>
 8022aee:	b138      	cbz	r0, 8022b00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022af0:	4620      	mov	r0, r4
 8022af2:	f008 ffa2 	bl	802ba3a <__cxa_guard_release>
 8022af6:	4a06      	ldr	r2, [pc, #24]	; (8022b10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022af8:	4909      	ldr	r1, [pc, #36]	; (8022b20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022afa:	480a      	ldr	r0, [pc, #40]	; (8022b24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022afc:	f008 ff8a 	bl	802ba14 <__aeabi_atexit>
 8022b00:	4b05      	ldr	r3, [pc, #20]	; (8022b18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022b02:	652b      	str	r3, [r5, #80]	; 0x50
 8022b04:	4b07      	ldr	r3, [pc, #28]	; (8022b24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022b06:	656b      	str	r3, [r5, #84]	; 0x54
 8022b08:	bd38      	pop	{r3, r4, r5, pc}
 8022b0a:	bf00      	nop
 8022b0c:	200067ec 	.word	0x200067ec
 8022b10:	20000000 	.word	0x20000000
 8022b14:	08020bbf 	.word	0x08020bbf
 8022b18:	20000094 	.word	0x20000094
 8022b1c:	200067f0 	.word	0x200067f0
 8022b20:	08020bbd 	.word	0x08020bbd
 8022b24:	20000098 	.word	0x20000098

08022b28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022b28:	b538      	push	{r3, r4, r5, lr}
 8022b2a:	4c15      	ldr	r4, [pc, #84]	; (8022b80 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022b2c:	7823      	ldrb	r3, [r4, #0]
 8022b2e:	f3bf 8f5b 	dmb	ish
 8022b32:	07da      	lsls	r2, r3, #31
 8022b34:	4605      	mov	r5, r0
 8022b36:	d40b      	bmi.n	8022b50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022b38:	4620      	mov	r0, r4
 8022b3a:	f008 ff72 	bl	802ba22 <__cxa_guard_acquire>
 8022b3e:	b138      	cbz	r0, 8022b50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022b40:	4620      	mov	r0, r4
 8022b42:	f008 ff7a 	bl	802ba3a <__cxa_guard_release>
 8022b46:	4a0f      	ldr	r2, [pc, #60]	; (8022b84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022b48:	490f      	ldr	r1, [pc, #60]	; (8022b88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022b4a:	4810      	ldr	r0, [pc, #64]	; (8022b8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022b4c:	f008 ff62 	bl	802ba14 <__aeabi_atexit>
 8022b50:	4c0f      	ldr	r4, [pc, #60]	; (8022b90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8022b52:	7823      	ldrb	r3, [r4, #0]
 8022b54:	f3bf 8f5b 	dmb	ish
 8022b58:	07db      	lsls	r3, r3, #31
 8022b5a:	d40b      	bmi.n	8022b74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022b5c:	4620      	mov	r0, r4
 8022b5e:	f008 ff60 	bl	802ba22 <__cxa_guard_acquire>
 8022b62:	b138      	cbz	r0, 8022b74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022b64:	4620      	mov	r0, r4
 8022b66:	f008 ff68 	bl	802ba3a <__cxa_guard_release>
 8022b6a:	4a06      	ldr	r2, [pc, #24]	; (8022b84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022b6c:	4909      	ldr	r1, [pc, #36]	; (8022b94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022b6e:	480a      	ldr	r0, [pc, #40]	; (8022b98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022b70:	f008 ff50 	bl	802ba14 <__aeabi_atexit>
 8022b74:	4b05      	ldr	r3, [pc, #20]	; (8022b8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022b76:	64ab      	str	r3, [r5, #72]	; 0x48
 8022b78:	4b07      	ldr	r3, [pc, #28]	; (8022b98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022b7a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022b7c:	bd38      	pop	{r3, r4, r5, pc}
 8022b7e:	bf00      	nop
 8022b80:	200067f4 	.word	0x200067f4
 8022b84:	20000000 	.word	0x20000000
 8022b88:	08020bc3 	.word	0x08020bc3
 8022b8c:	2000009c 	.word	0x2000009c
 8022b90:	200067f8 	.word	0x200067f8
 8022b94:	08020bc1 	.word	0x08020bc1
 8022b98:	200000a0 	.word	0x200000a0

08022b9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022b9c:	b538      	push	{r3, r4, r5, lr}
 8022b9e:	4c15      	ldr	r4, [pc, #84]	; (8022bf4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022ba0:	7823      	ldrb	r3, [r4, #0]
 8022ba2:	f3bf 8f5b 	dmb	ish
 8022ba6:	07da      	lsls	r2, r3, #31
 8022ba8:	4605      	mov	r5, r0
 8022baa:	d40b      	bmi.n	8022bc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022bac:	4620      	mov	r0, r4
 8022bae:	f008 ff38 	bl	802ba22 <__cxa_guard_acquire>
 8022bb2:	b138      	cbz	r0, 8022bc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022bb4:	4620      	mov	r0, r4
 8022bb6:	f008 ff40 	bl	802ba3a <__cxa_guard_release>
 8022bba:	4a0f      	ldr	r2, [pc, #60]	; (8022bf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022bbc:	490f      	ldr	r1, [pc, #60]	; (8022bfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022bbe:	4810      	ldr	r0, [pc, #64]	; (8022c00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022bc0:	f008 ff28 	bl	802ba14 <__aeabi_atexit>
 8022bc4:	4c0f      	ldr	r4, [pc, #60]	; (8022c04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022bc6:	7823      	ldrb	r3, [r4, #0]
 8022bc8:	f3bf 8f5b 	dmb	ish
 8022bcc:	07db      	lsls	r3, r3, #31
 8022bce:	d40b      	bmi.n	8022be8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022bd0:	4620      	mov	r0, r4
 8022bd2:	f008 ff26 	bl	802ba22 <__cxa_guard_acquire>
 8022bd6:	b138      	cbz	r0, 8022be8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022bd8:	4620      	mov	r0, r4
 8022bda:	f008 ff2e 	bl	802ba3a <__cxa_guard_release>
 8022bde:	4a06      	ldr	r2, [pc, #24]	; (8022bf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022be0:	4909      	ldr	r1, [pc, #36]	; (8022c08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022be2:	480a      	ldr	r0, [pc, #40]	; (8022c0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022be4:	f008 ff16 	bl	802ba14 <__aeabi_atexit>
 8022be8:	4b05      	ldr	r3, [pc, #20]	; (8022c00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022bea:	642b      	str	r3, [r5, #64]	; 0x40
 8022bec:	4b07      	ldr	r3, [pc, #28]	; (8022c0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022bee:	646b      	str	r3, [r5, #68]	; 0x44
 8022bf0:	bd38      	pop	{r3, r4, r5, pc}
 8022bf2:	bf00      	nop
 8022bf4:	200067bc 	.word	0x200067bc
 8022bf8:	20000000 	.word	0x20000000
 8022bfc:	08020bc7 	.word	0x08020bc7
 8022c00:	20000064 	.word	0x20000064
 8022c04:	200067c0 	.word	0x200067c0
 8022c08:	08020bc5 	.word	0x08020bc5
 8022c0c:	20000068 	.word	0x20000068

08022c10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022c10:	b538      	push	{r3, r4, r5, lr}
 8022c12:	4c15      	ldr	r4, [pc, #84]	; (8022c68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022c14:	7823      	ldrb	r3, [r4, #0]
 8022c16:	f3bf 8f5b 	dmb	ish
 8022c1a:	07da      	lsls	r2, r3, #31
 8022c1c:	4605      	mov	r5, r0
 8022c1e:	d40b      	bmi.n	8022c38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022c20:	4620      	mov	r0, r4
 8022c22:	f008 fefe 	bl	802ba22 <__cxa_guard_acquire>
 8022c26:	b138      	cbz	r0, 8022c38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022c28:	4620      	mov	r0, r4
 8022c2a:	f008 ff06 	bl	802ba3a <__cxa_guard_release>
 8022c2e:	4a0f      	ldr	r2, [pc, #60]	; (8022c6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022c30:	490f      	ldr	r1, [pc, #60]	; (8022c70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8022c32:	4810      	ldr	r0, [pc, #64]	; (8022c74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022c34:	f008 feee 	bl	802ba14 <__aeabi_atexit>
 8022c38:	4c0f      	ldr	r4, [pc, #60]	; (8022c78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022c3a:	7823      	ldrb	r3, [r4, #0]
 8022c3c:	f3bf 8f5b 	dmb	ish
 8022c40:	07db      	lsls	r3, r3, #31
 8022c42:	d40b      	bmi.n	8022c5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022c44:	4620      	mov	r0, r4
 8022c46:	f008 feec 	bl	802ba22 <__cxa_guard_acquire>
 8022c4a:	b138      	cbz	r0, 8022c5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022c4c:	4620      	mov	r0, r4
 8022c4e:	f008 fef4 	bl	802ba3a <__cxa_guard_release>
 8022c52:	4a06      	ldr	r2, [pc, #24]	; (8022c6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022c54:	4909      	ldr	r1, [pc, #36]	; (8022c7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022c56:	480a      	ldr	r0, [pc, #40]	; (8022c80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022c58:	f008 fedc 	bl	802ba14 <__aeabi_atexit>
 8022c5c:	4b05      	ldr	r3, [pc, #20]	; (8022c74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022c5e:	63ab      	str	r3, [r5, #56]	; 0x38
 8022c60:	4b07      	ldr	r3, [pc, #28]	; (8022c80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022c62:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022c64:	bd38      	pop	{r3, r4, r5, pc}
 8022c66:	bf00      	nop
 8022c68:	200067dc 	.word	0x200067dc
 8022c6c:	20000000 	.word	0x20000000
 8022c70:	08020bcb 	.word	0x08020bcb
 8022c74:	20000084 	.word	0x20000084
 8022c78:	200067e0 	.word	0x200067e0
 8022c7c:	08020bc9 	.word	0x08020bc9
 8022c80:	20000088 	.word	0x20000088

08022c84 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022c84:	b510      	push	{r4, lr}
 8022c86:	4604      	mov	r4, r0
 8022c88:	f7ff ff14 	bl	8022ab4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022c8c:	4620      	mov	r0, r4
 8022c8e:	f7ff ff85 	bl	8022b9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022c92:	4620      	mov	r0, r4
 8022c94:	f7ff ff48 	bl	8022b28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022c98:	4620      	mov	r0, r4
 8022c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c9e:	f7ff bfb7 	b.w	8022c10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022ca4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022ca4:	b538      	push	{r3, r4, r5, lr}
 8022ca6:	4c15      	ldr	r4, [pc, #84]	; (8022cfc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022ca8:	7823      	ldrb	r3, [r4, #0]
 8022caa:	f3bf 8f5b 	dmb	ish
 8022cae:	07da      	lsls	r2, r3, #31
 8022cb0:	4605      	mov	r5, r0
 8022cb2:	d40b      	bmi.n	8022ccc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022cb4:	4620      	mov	r0, r4
 8022cb6:	f008 feb4 	bl	802ba22 <__cxa_guard_acquire>
 8022cba:	b138      	cbz	r0, 8022ccc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022cbc:	4620      	mov	r0, r4
 8022cbe:	f008 febc 	bl	802ba3a <__cxa_guard_release>
 8022cc2:	4a0f      	ldr	r2, [pc, #60]	; (8022d00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022cc4:	490f      	ldr	r1, [pc, #60]	; (8022d04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022cc6:	4810      	ldr	r0, [pc, #64]	; (8022d08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022cc8:	f008 fea4 	bl	802ba14 <__aeabi_atexit>
 8022ccc:	4c0f      	ldr	r4, [pc, #60]	; (8022d0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022cce:	7823      	ldrb	r3, [r4, #0]
 8022cd0:	f3bf 8f5b 	dmb	ish
 8022cd4:	07db      	lsls	r3, r3, #31
 8022cd6:	d40b      	bmi.n	8022cf0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022cd8:	4620      	mov	r0, r4
 8022cda:	f008 fea2 	bl	802ba22 <__cxa_guard_acquire>
 8022cde:	b138      	cbz	r0, 8022cf0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022ce0:	4620      	mov	r0, r4
 8022ce2:	f008 feaa 	bl	802ba3a <__cxa_guard_release>
 8022ce6:	4a06      	ldr	r2, [pc, #24]	; (8022d00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022ce8:	4909      	ldr	r1, [pc, #36]	; (8022d10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022cea:	480a      	ldr	r0, [pc, #40]	; (8022d14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022cec:	f008 fe92 	bl	802ba14 <__aeabi_atexit>
 8022cf0:	4b05      	ldr	r3, [pc, #20]	; (8022d08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022cf2:	662b      	str	r3, [r5, #96]	; 0x60
 8022cf4:	4b07      	ldr	r3, [pc, #28]	; (8022d14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022cf6:	666b      	str	r3, [r5, #100]	; 0x64
 8022cf8:	bd38      	pop	{r3, r4, r5, pc}
 8022cfa:	bf00      	nop
 8022cfc:	200067c4 	.word	0x200067c4
 8022d00:	20000000 	.word	0x20000000
 8022d04:	08020bb7 	.word	0x08020bb7
 8022d08:	2000006c 	.word	0x2000006c
 8022d0c:	200067c8 	.word	0x200067c8
 8022d10:	08020bb5 	.word	0x08020bb5
 8022d14:	20000070 	.word	0x20000070

08022d18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022d18:	b538      	push	{r3, r4, r5, lr}
 8022d1a:	4c15      	ldr	r4, [pc, #84]	; (8022d70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022d1c:	7823      	ldrb	r3, [r4, #0]
 8022d1e:	f3bf 8f5b 	dmb	ish
 8022d22:	07da      	lsls	r2, r3, #31
 8022d24:	4605      	mov	r5, r0
 8022d26:	d40b      	bmi.n	8022d40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022d28:	4620      	mov	r0, r4
 8022d2a:	f008 fe7a 	bl	802ba22 <__cxa_guard_acquire>
 8022d2e:	b138      	cbz	r0, 8022d40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022d30:	4620      	mov	r0, r4
 8022d32:	f008 fe82 	bl	802ba3a <__cxa_guard_release>
 8022d36:	4a0f      	ldr	r2, [pc, #60]	; (8022d74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022d38:	490f      	ldr	r1, [pc, #60]	; (8022d78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022d3a:	4810      	ldr	r0, [pc, #64]	; (8022d7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022d3c:	f008 fe6a 	bl	802ba14 <__aeabi_atexit>
 8022d40:	4c0f      	ldr	r4, [pc, #60]	; (8022d80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022d42:	7823      	ldrb	r3, [r4, #0]
 8022d44:	f3bf 8f5b 	dmb	ish
 8022d48:	07db      	lsls	r3, r3, #31
 8022d4a:	d40b      	bmi.n	8022d64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022d4c:	4620      	mov	r0, r4
 8022d4e:	f008 fe68 	bl	802ba22 <__cxa_guard_acquire>
 8022d52:	b138      	cbz	r0, 8022d64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022d54:	4620      	mov	r0, r4
 8022d56:	f008 fe70 	bl	802ba3a <__cxa_guard_release>
 8022d5a:	4a06      	ldr	r2, [pc, #24]	; (8022d74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022d5c:	4909      	ldr	r1, [pc, #36]	; (8022d84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8022d5e:	480a      	ldr	r0, [pc, #40]	; (8022d88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022d60:	f008 fe58 	bl	802ba14 <__aeabi_atexit>
 8022d64:	4b05      	ldr	r3, [pc, #20]	; (8022d7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022d66:	65ab      	str	r3, [r5, #88]	; 0x58
 8022d68:	4b07      	ldr	r3, [pc, #28]	; (8022d88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022d6a:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022d6c:	bd38      	pop	{r3, r4, r5, pc}
 8022d6e:	bf00      	nop
 8022d70:	2000679c 	.word	0x2000679c
 8022d74:	20000000 	.word	0x20000000
 8022d78:	08020bbb 	.word	0x08020bbb
 8022d7c:	20000044 	.word	0x20000044
 8022d80:	200067a0 	.word	0x200067a0
 8022d84:	08020bb9 	.word	0x08020bb9
 8022d88:	20000048 	.word	0x20000048

08022d8c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022d8c:	b510      	push	{r4, lr}
 8022d8e:	4604      	mov	r4, r0
 8022d90:	f7ff ff88 	bl	8022ca4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022d94:	4620      	mov	r0, r4
 8022d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d9a:	f7ff bfbd 	b.w	8022d18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022da0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022da0:	b538      	push	{r3, r4, r5, lr}
 8022da2:	4c15      	ldr	r4, [pc, #84]	; (8022df8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022da4:	7823      	ldrb	r3, [r4, #0]
 8022da6:	f3bf 8f5b 	dmb	ish
 8022daa:	07da      	lsls	r2, r3, #31
 8022dac:	4605      	mov	r5, r0
 8022dae:	d40b      	bmi.n	8022dc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022db0:	4620      	mov	r0, r4
 8022db2:	f008 fe36 	bl	802ba22 <__cxa_guard_acquire>
 8022db6:	b138      	cbz	r0, 8022dc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022db8:	4620      	mov	r0, r4
 8022dba:	f008 fe3e 	bl	802ba3a <__cxa_guard_release>
 8022dbe:	4a0f      	ldr	r2, [pc, #60]	; (8022dfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022dc0:	490f      	ldr	r1, [pc, #60]	; (8022e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022dc2:	4810      	ldr	r0, [pc, #64]	; (8022e04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022dc4:	f008 fe26 	bl	802ba14 <__aeabi_atexit>
 8022dc8:	4c0f      	ldr	r4, [pc, #60]	; (8022e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022dca:	7823      	ldrb	r3, [r4, #0]
 8022dcc:	f3bf 8f5b 	dmb	ish
 8022dd0:	07db      	lsls	r3, r3, #31
 8022dd2:	d40b      	bmi.n	8022dec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022dd4:	4620      	mov	r0, r4
 8022dd6:	f008 fe24 	bl	802ba22 <__cxa_guard_acquire>
 8022dda:	b138      	cbz	r0, 8022dec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022ddc:	4620      	mov	r0, r4
 8022dde:	f008 fe2c 	bl	802ba3a <__cxa_guard_release>
 8022de2:	4a06      	ldr	r2, [pc, #24]	; (8022dfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022de4:	4909      	ldr	r1, [pc, #36]	; (8022e0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022de6:	480a      	ldr	r0, [pc, #40]	; (8022e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022de8:	f008 fe14 	bl	802ba14 <__aeabi_atexit>
 8022dec:	4b05      	ldr	r3, [pc, #20]	; (8022e04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022dee:	672b      	str	r3, [r5, #112]	; 0x70
 8022df0:	4b07      	ldr	r3, [pc, #28]	; (8022e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022df2:	676b      	str	r3, [r5, #116]	; 0x74
 8022df4:	bd38      	pop	{r3, r4, r5, pc}
 8022df6:	bf00      	nop
 8022df8:	20006794 	.word	0x20006794
 8022dfc:	20000000 	.word	0x20000000
 8022e00:	08020baf 	.word	0x08020baf
 8022e04:	2000003c 	.word	0x2000003c
 8022e08:	20006798 	.word	0x20006798
 8022e0c:	08020bad 	.word	0x08020bad
 8022e10:	20000040 	.word	0x20000040

08022e14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022e14:	b538      	push	{r3, r4, r5, lr}
 8022e16:	4c15      	ldr	r4, [pc, #84]	; (8022e6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022e18:	7823      	ldrb	r3, [r4, #0]
 8022e1a:	f3bf 8f5b 	dmb	ish
 8022e1e:	07da      	lsls	r2, r3, #31
 8022e20:	4605      	mov	r5, r0
 8022e22:	d40b      	bmi.n	8022e3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022e24:	4620      	mov	r0, r4
 8022e26:	f008 fdfc 	bl	802ba22 <__cxa_guard_acquire>
 8022e2a:	b138      	cbz	r0, 8022e3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022e2c:	4620      	mov	r0, r4
 8022e2e:	f008 fe04 	bl	802ba3a <__cxa_guard_release>
 8022e32:	4a0f      	ldr	r2, [pc, #60]	; (8022e70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022e34:	490f      	ldr	r1, [pc, #60]	; (8022e74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022e36:	4810      	ldr	r0, [pc, #64]	; (8022e78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022e38:	f008 fdec 	bl	802ba14 <__aeabi_atexit>
 8022e3c:	4c0f      	ldr	r4, [pc, #60]	; (8022e7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022e3e:	7823      	ldrb	r3, [r4, #0]
 8022e40:	f3bf 8f5b 	dmb	ish
 8022e44:	07db      	lsls	r3, r3, #31
 8022e46:	d40b      	bmi.n	8022e60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022e48:	4620      	mov	r0, r4
 8022e4a:	f008 fdea 	bl	802ba22 <__cxa_guard_acquire>
 8022e4e:	b138      	cbz	r0, 8022e60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022e50:	4620      	mov	r0, r4
 8022e52:	f008 fdf2 	bl	802ba3a <__cxa_guard_release>
 8022e56:	4a06      	ldr	r2, [pc, #24]	; (8022e70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022e58:	4909      	ldr	r1, [pc, #36]	; (8022e80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022e5a:	480a      	ldr	r0, [pc, #40]	; (8022e84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022e5c:	f008 fdda 	bl	802ba14 <__aeabi_atexit>
 8022e60:	4b05      	ldr	r3, [pc, #20]	; (8022e78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022e62:	66ab      	str	r3, [r5, #104]	; 0x68
 8022e64:	4b07      	ldr	r3, [pc, #28]	; (8022e84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022e66:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022e68:	bd38      	pop	{r3, r4, r5, pc}
 8022e6a:	bf00      	nop
 8022e6c:	2000678c 	.word	0x2000678c
 8022e70:	20000000 	.word	0x20000000
 8022e74:	08020bb3 	.word	0x08020bb3
 8022e78:	20000034 	.word	0x20000034
 8022e7c:	20006790 	.word	0x20006790
 8022e80:	08020bb1 	.word	0x08020bb1
 8022e84:	20000038 	.word	0x20000038

08022e88 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022e88:	b510      	push	{r4, lr}
 8022e8a:	4604      	mov	r4, r0
 8022e8c:	f7ff ff88 	bl	8022da0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022e90:	4620      	mov	r0, r4
 8022e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022e96:	f7ff bfbd 	b.w	8022e14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022e9a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022e9a:	b510      	push	{r4, lr}
 8022e9c:	4604      	mov	r4, r0
 8022e9e:	f7ff fff3 	bl	8022e88 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022ea2:	4620      	mov	r0, r4
 8022ea4:	f7ff ff72 	bl	8022d8c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022ea8:	4620      	mov	r0, r4
 8022eaa:	f7ff fdf9 	bl	8022aa0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022eae:	4620      	mov	r0, r4
 8022eb0:	f7ff fcfa 	bl	80228a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022eb4:	4620      	mov	r0, r4
 8022eb6:	f7ff fd75 	bl	80229a4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022eba:	4620      	mov	r0, r4
 8022ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ec0:	f7ff bee0 	b.w	8022c84 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022ec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ec8:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8022ecc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022ed0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022ed4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8022ed8:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8022edc:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022ee0:	8808      	ldrh	r0, [r1, #0]
 8022ee2:	fb0e 4708 	mla	r7, lr, r8, r4
 8022ee6:	f1be 0f00 	cmp.w	lr, #0
 8022eea:	eb02 0a07 	add.w	sl, r2, r7
 8022eee:	db37      	blt.n	8022f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022ef0:	45f3      	cmp	fp, lr
 8022ef2:	dd35      	ble.n	8022f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022ef4:	2c00      	cmp	r4, #0
 8022ef6:	db31      	blt.n	8022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022ef8:	45a0      	cmp	r8, r4
 8022efa:	dd2f      	ble.n	8022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022efc:	5dd2      	ldrb	r2, [r2, r7]
 8022efe:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8022f02:	1c62      	adds	r2, r4, #1
 8022f04:	d42f      	bmi.n	8022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022f06:	4590      	cmp	r8, r2
 8022f08:	dd2d      	ble.n	8022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022f0a:	b366      	cbz	r6, 8022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022f0c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022f10:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022f14:	f11e 0e01 	adds.w	lr, lr, #1
 8022f18:	d429      	bmi.n	8022f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022f1a:	45f3      	cmp	fp, lr
 8022f1c:	dd27      	ble.n	8022f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022f1e:	f1bc 0f00 	cmp.w	ip, #0
 8022f22:	f000 80a1 	beq.w	8023068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8022f26:	2c00      	cmp	r4, #0
 8022f28:	db1f      	blt.n	8022f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022f2a:	45a0      	cmp	r8, r4
 8022f2c:	dd1d      	ble.n	8022f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022f2e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8022f32:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8022f36:	3401      	adds	r4, #1
 8022f38:	d41c      	bmi.n	8022f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022f3a:	45a0      	cmp	r8, r4
 8022f3c:	dd1a      	ble.n	8022f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022f3e:	b1de      	cbz	r6, 8022f78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8022f40:	44d0      	add	r8, sl
 8022f42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022f46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022f4a:	2e0f      	cmp	r6, #15
 8022f4c:	d915      	bls.n	8022f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8022f4e:	4b49      	ldr	r3, [pc, #292]	; (8023074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8022f50:	4a49      	ldr	r2, [pc, #292]	; (8023078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8022f52:	484a      	ldr	r0, [pc, #296]	; (802307c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8022f54:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8022f58:	f009 fb80 	bl	802c65c <__assert_func>
 8022f5c:	4681      	mov	r9, r0
 8022f5e:	e7d0      	b.n	8022f02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8022f60:	4607      	mov	r7, r0
 8022f62:	4681      	mov	r9, r0
 8022f64:	e7d6      	b.n	8022f14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022f66:	4607      	mov	r7, r0
 8022f68:	e7d4      	b.n	8022f14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022f6a:	4686      	mov	lr, r0
 8022f6c:	e7e3      	b.n	8022f36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8022f6e:	4603      	mov	r3, r0
 8022f70:	4686      	mov	lr, r0
 8022f72:	e7ea      	b.n	8022f4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022f74:	4603      	mov	r3, r0
 8022f76:	e7e8      	b.n	8022f4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022f78:	4603      	mov	r3, r0
 8022f7a:	f1bc 0f0f 	cmp.w	ip, #15
 8022f7e:	d8e6      	bhi.n	8022f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022f80:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022f84:	fb16 f80c 	smulbb	r8, r6, ip
 8022f88:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022f8c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022f90:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022f94:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022f98:	ea44 0909 	orr.w	r9, r4, r9
 8022f9c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022fa0:	f1cc 0410 	rsb	r4, ip, #16
 8022fa4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022fa8:	1ba4      	subs	r4, r4, r6
 8022faa:	041a      	lsls	r2, r3, #16
 8022fac:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022fb0:	ea4a 0707 	orr.w	r7, sl, r7
 8022fb4:	4377      	muls	r7, r6
 8022fb6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022fba:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022fbe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022fc2:	fb04 7409 	mla	r4, r4, r9, r7
 8022fc6:	4313      	orrs	r3, r2
 8022fc8:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8022fcc:	fb08 4303 	mla	r3, r8, r3, r4
 8022fd0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022fd4:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8022fd8:	4322      	orrs	r2, r4
 8022fda:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8022fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8022fe2:	0d53      	lsrs	r3, r2, #21
 8022fe4:	0952      	lsrs	r2, r2, #5
 8022fe6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022fea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022fee:	431a      	orrs	r2, r3
 8022ff0:	b293      	uxth	r3, r2
 8022ff2:	b2af      	uxth	r7, r5
 8022ff4:	1202      	asrs	r2, r0, #8
 8022ff6:	43ed      	mvns	r5, r5
 8022ff8:	b2ed      	uxtb	r5, r5
 8022ffa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022ffe:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023002:	fb12 f205 	smulbb	r2, r2, r5
 8023006:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802300a:	fb0c 2c07 	mla	ip, ip, r7, r2
 802300e:	00dc      	lsls	r4, r3, #3
 8023010:	10da      	asrs	r2, r3, #3
 8023012:	10c6      	asrs	r6, r0, #3
 8023014:	00c3      	lsls	r3, r0, #3
 8023016:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802301a:	b2db      	uxtb	r3, r3
 802301c:	fb16 f605 	smulbb	r6, r6, r5
 8023020:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023024:	b2e4      	uxtb	r4, r4
 8023026:	fb13 f305 	smulbb	r3, r3, r5
 802302a:	fa1f fc8c 	uxth.w	ip, ip
 802302e:	fb02 6207 	mla	r2, r2, r7, r6
 8023032:	fb04 3307 	mla	r3, r4, r7, r3
 8023036:	b296      	uxth	r6, r2
 8023038:	b29a      	uxth	r2, r3
 802303a:	f10c 0301 	add.w	r3, ip, #1
 802303e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023042:	1c53      	adds	r3, r2, #1
 8023044:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023048:	1c72      	adds	r2, r6, #1
 802304a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802304e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023052:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023056:	0952      	lsrs	r2, r2, #5
 8023058:	ea43 030c 	orr.w	r3, r3, ip
 802305c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023060:	4313      	orrs	r3, r2
 8023062:	800b      	strh	r3, [r1, #0]
 8023064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023068:	2e0f      	cmp	r6, #15
 802306a:	f63f af70 	bhi.w	8022f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802306e:	4603      	mov	r3, r0
 8023070:	4686      	mov	lr, r0
 8023072:	e785      	b.n	8022f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023074:	080315e5 	.word	0x080315e5
 8023078:	08031c57 	.word	0x08031c57
 802307c:	08031669 	.word	0x08031669

08023080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023084:	ed2d 8b08 	vpush	{d8-d11}
 8023088:	b099      	sub	sp, #100	; 0x64
 802308a:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 802308e:	9215      	str	r2, [sp, #84]	; 0x54
 8023090:	9309      	str	r3, [sp, #36]	; 0x24
 8023092:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023094:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023098:	930d      	str	r3, [sp, #52]	; 0x34
 802309a:	910c      	str	r1, [sp, #48]	; 0x30
 802309c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80230a0:	9016      	str	r0, [sp, #88]	; 0x58
 80230a2:	6850      	ldr	r0, [r2, #4]
 80230a4:	6812      	ldr	r2, [r2, #0]
 80230a6:	fb00 1303 	mla	r3, r0, r3, r1
 80230aa:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80230ae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80230b0:	681b      	ldr	r3, [r3, #0]
 80230b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80230b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80230b6:	685e      	ldr	r6, [r3, #4]
 80230b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80230ba:	43db      	mvns	r3, r3
 80230bc:	b2db      	uxtb	r3, r3
 80230be:	eeb0 aa40 	vmov.f32	s20, s0
 80230c2:	eef0 9a60 	vmov.f32	s19, s1
 80230c6:	eeb0 9a41 	vmov.f32	s18, s2
 80230ca:	eeb0 8a62 	vmov.f32	s16, s5
 80230ce:	eef0 8a43 	vmov.f32	s17, s6
 80230d2:	eef0 ba44 	vmov.f32	s23, s8
 80230d6:	eeb0 ba64 	vmov.f32	s22, s9
 80230da:	eef0 aa45 	vmov.f32	s21, s10
 80230de:	3604      	adds	r6, #4
 80230e0:	930a      	str	r3, [sp, #40]	; 0x28
 80230e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80230e4:	2b00      	cmp	r3, #0
 80230e6:	dc03      	bgt.n	80230f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80230e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	f340 8225 	ble.w	802353a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80230f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80230f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80230f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80230fa:	1e48      	subs	r0, r1, #1
 80230fc:	1e57      	subs	r7, r2, #1
 80230fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023100:	2b00      	cmp	r3, #0
 8023102:	f340 80e3 	ble.w	80232cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8023106:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802310a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802310e:	d406      	bmi.n	802311e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023110:	4584      	cmp	ip, r0
 8023112:	da04      	bge.n	802311e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023114:	2b00      	cmp	r3, #0
 8023116:	db02      	blt.n	802311e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023118:	42bb      	cmp	r3, r7
 802311a:	f2c0 80d8 	blt.w	80232ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802311e:	f11c 0c01 	adds.w	ip, ip, #1
 8023122:	f100 80c9 	bmi.w	80232b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023126:	4561      	cmp	r1, ip
 8023128:	f2c0 80c6 	blt.w	80232b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802312c:	3301      	adds	r3, #1
 802312e:	f100 80c3 	bmi.w	80232b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023132:	429a      	cmp	r2, r3
 8023134:	f2c0 80c0 	blt.w	80232b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023138:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802313c:	4647      	mov	r7, r8
 802313e:	f1bb 0f00 	cmp.w	fp, #0
 8023142:	f340 80e3 	ble.w	802330c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023146:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8023148:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802314a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802314e:	689b      	ldr	r3, [r3, #8]
 8023150:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023154:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023158:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802315c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023160:	f100 8121 	bmi.w	80233a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023164:	f103 39ff 	add.w	r9, r3, #4294967295
 8023168:	454a      	cmp	r2, r9
 802316a:	f280 811c 	bge.w	80233a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802316e:	f1bc 0f00 	cmp.w	ip, #0
 8023172:	f2c0 8118 	blt.w	80233a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023176:	f10e 39ff 	add.w	r9, lr, #4294967295
 802317a:	45cc      	cmp	ip, r9
 802317c:	f280 8113 	bge.w	80233a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023180:	b21b      	sxth	r3, r3
 8023182:	fb0c 2203 	mla	r2, ip, r3, r2
 8023186:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023188:	eb04 0902 	add.w	r9, r4, r2
 802318c:	5ca2      	ldrb	r2, [r4, r2]
 802318e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023192:	2800      	cmp	r0, #0
 8023194:	f000 80fe 	beq.w	8023394 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023198:	f899 2001 	ldrb.w	r2, [r9, #1]
 802319c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80231a0:	9211      	str	r2, [sp, #68]	; 0x44
 80231a2:	b151      	cbz	r1, 80231ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80231a4:	eb09 0203 	add.w	r2, r9, r3
 80231a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80231ac:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80231b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80231b2:	7853      	ldrb	r3, [r2, #1]
 80231b4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80231b8:	9312      	str	r3, [sp, #72]	; 0x48
 80231ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80231bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80231be:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80231c2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80231c6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80231ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80231ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80231d0:	041b      	lsls	r3, r3, #16
 80231d2:	fb10 f201 	smulbb	r2, r0, r1
 80231d6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80231da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80231de:	10d2      	asrs	r2, r2, #3
 80231e0:	4323      	orrs	r3, r4
 80231e2:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80231e6:	4353      	muls	r3, r2
 80231e8:	fb09 330c 	mla	r3, r9, ip, r3
 80231ec:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80231f0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80231f4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80231f8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80231fc:	f1c1 0c10 	rsb	ip, r1, #16
 8023200:	ebac 0c00 	sub.w	ip, ip, r0
 8023204:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023208:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802320c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802320e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023210:	0418      	lsls	r0, r3, #16
 8023212:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023216:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802321a:	4318      	orrs	r0, r3
 802321c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023220:	fb02 c200 	mla	r2, r2, r0, ip
 8023224:	0d53      	lsrs	r3, r2, #21
 8023226:	0952      	lsrs	r2, r2, #5
 8023228:	8838      	ldrh	r0, [r7, #0]
 802322a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802322e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023232:	431a      	orrs	r2, r3
 8023234:	b292      	uxth	r2, r2
 8023236:	1201      	asrs	r1, r0, #8
 8023238:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802323c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023240:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023244:	fb11 f104 	smulbb	r1, r1, r4
 8023248:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802324c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023250:	00c0      	lsls	r0, r0, #3
 8023252:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023256:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802325a:	10d1      	asrs	r1, r2, #3
 802325c:	b2c0      	uxtb	r0, r0
 802325e:	00d2      	lsls	r2, r2, #3
 8023260:	b2d2      	uxtb	r2, r2
 8023262:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023266:	fb1e fe04 	smulbb	lr, lr, r4
 802326a:	fb10 f004 	smulbb	r0, r0, r4
 802326e:	fa1f fc8c 	uxth.w	ip, ip
 8023272:	fb01 e103 	mla	r1, r1, r3, lr
 8023276:	fb02 0303 	mla	r3, r2, r3, r0
 802327a:	b29a      	uxth	r2, r3
 802327c:	f10c 0301 	add.w	r3, ip, #1
 8023280:	b289      	uxth	r1, r1
 8023282:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023286:	1c53      	adds	r3, r2, #1
 8023288:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802328c:	1c4a      	adds	r2, r1, #1
 802328e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023292:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023296:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802329a:	0949      	lsrs	r1, r1, #5
 802329c:	ea43 030c 	orr.w	r3, r3, ip
 80232a0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80232a4:	430b      	orrs	r3, r1
 80232a6:	803b      	strh	r3, [r7, #0]
 80232a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80232aa:	449a      	add	sl, r3
 80232ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232ae:	3702      	adds	r7, #2
 80232b0:	441d      	add	r5, r3
 80232b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80232b6:	e742      	b.n	802313e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80232b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80232ba:	449a      	add	sl, r3
 80232bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232be:	441d      	add	r5, r3
 80232c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232c2:	3b01      	subs	r3, #1
 80232c4:	9309      	str	r3, [sp, #36]	; 0x24
 80232c6:	f108 0802 	add.w	r8, r8, #2
 80232ca:	e718      	b.n	80230fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80232cc:	d023      	beq.n	8023316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80232ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232d0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80232d2:	3b01      	subs	r3, #1
 80232d4:	fb00 a003 	mla	r0, r0, r3, sl
 80232d8:	1400      	asrs	r0, r0, #16
 80232da:	f53f af2d 	bmi.w	8023138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80232de:	3901      	subs	r1, #1
 80232e0:	4288      	cmp	r0, r1
 80232e2:	f6bf af29 	bge.w	8023138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80232e6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80232e8:	fb01 5303 	mla	r3, r1, r3, r5
 80232ec:	141b      	asrs	r3, r3, #16
 80232ee:	f53f af23 	bmi.w	8023138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80232f2:	3a01      	subs	r2, #1
 80232f4:	4293      	cmp	r3, r2
 80232f6:	f6bf af1f 	bge.w	8023138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80232fa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80232fe:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8023302:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8023306:	f1be 0f00 	cmp.w	lr, #0
 802330a:	dc6c      	bgt.n	80233e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802330c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802330e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023312:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023318:	2b00      	cmp	r3, #0
 802331a:	f340 810e 	ble.w	802353a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 802331e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023326:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802332a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802332c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023330:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023334:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023338:	eef0 6a48 	vmov.f32	s13, s16
 802333c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023340:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023344:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023348:	ee16 aa90 	vmov	sl, s13
 802334c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023350:	eef0 6a68 	vmov.f32	s13, s17
 8023354:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023358:	ee18 2a10 	vmov	r2, s16
 802335c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023360:	fb92 f3f3 	sdiv	r3, r2, r3
 8023364:	ee18 2a90 	vmov	r2, s17
 8023368:	932d      	str	r3, [sp, #180]	; 0xb4
 802336a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802336c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023370:	932e      	str	r3, [sp, #184]	; 0xb8
 8023372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023374:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023376:	3b01      	subs	r3, #1
 8023378:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802337c:	930c      	str	r3, [sp, #48]	; 0x30
 802337e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023380:	bf08      	it	eq
 8023382:	4613      	moveq	r3, r2
 8023384:	ee16 5a90 	vmov	r5, s13
 8023388:	9309      	str	r3, [sp, #36]	; 0x24
 802338a:	eef0 8a67 	vmov.f32	s17, s15
 802338e:	eeb0 8a47 	vmov.f32	s16, s14
 8023392:	e6a6      	b.n	80230e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023394:	2900      	cmp	r1, #0
 8023396:	f43f af10 	beq.w	80231ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802339a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802339e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80233a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80233a4:	e709      	b.n	80231ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80233a6:	f112 0901 	adds.w	r9, r2, #1
 80233aa:	f53f af7d 	bmi.w	80232a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80233ae:	454b      	cmp	r3, r9
 80233b0:	f6ff af7a 	blt.w	80232a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80233b4:	f11c 0901 	adds.w	r9, ip, #1
 80233b8:	f53f af76 	bmi.w	80232a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80233bc:	45ce      	cmp	lr, r9
 80233be:	f6ff af73 	blt.w	80232a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80233c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80233c4:	9202      	str	r2, [sp, #8]
 80233c6:	b21b      	sxth	r3, r3
 80233c8:	fa0f f28e 	sxth.w	r2, lr
 80233cc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80233d0:	e9cd c003 	strd	ip, r0, [sp, #12]
 80233d4:	9201      	str	r2, [sp, #4]
 80233d6:	9300      	str	r3, [sp, #0]
 80233d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80233da:	9816      	ldr	r0, [sp, #88]	; 0x58
 80233dc:	4633      	mov	r3, r6
 80233de:	4639      	mov	r1, r7
 80233e0:	f7ff fd70 	bl	8022ec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80233e4:	e760      	b.n	80232a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80233e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80233e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80233ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80233ee:	ea4f 422a 	mov.w	r2, sl, asr #16
 80233f2:	1429      	asrs	r1, r5, #16
 80233f4:	fb03 2101 	mla	r1, r3, r1, r2
 80233f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80233fa:	440a      	add	r2, r1
 80233fc:	5c61      	ldrb	r1, [r4, r1]
 80233fe:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023402:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023406:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802340a:	f1bc 0f00 	cmp.w	ip, #0
 802340e:	f000 808c 	beq.w	802352a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8023412:	7857      	ldrb	r7, [r2, #1]
 8023414:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023418:	9413      	str	r4, [sp, #76]	; 0x4c
 802341a:	b140      	cbz	r0, 802342e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802341c:	18d7      	adds	r7, r2, r3
 802341e:	5cd3      	ldrb	r3, [r2, r3]
 8023420:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023424:	9310      	str	r3, [sp, #64]	; 0x40
 8023426:	787b      	ldrb	r3, [r7, #1]
 8023428:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802342c:	9314      	str	r3, [sp, #80]	; 0x50
 802342e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023430:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023432:	fb1c f200 	smulbb	r2, ip, r0
 8023436:	041f      	lsls	r7, r3, #16
 8023438:	10d2      	asrs	r2, r2, #3
 802343a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802343e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8023442:	431f      	orrs	r7, r3
 8023444:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8023448:	9317      	str	r3, [sp, #92]	; 0x5c
 802344a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802344c:	041b      	lsls	r3, r3, #16
 802344e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8023452:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023456:	ea43 030b 	orr.w	r3, r3, fp
 802345a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802345c:	4353      	muls	r3, r2
 802345e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023462:	fb04 3707 	mla	r7, r4, r7, r3
 8023466:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802346a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802346e:	ea43 0b01 	orr.w	fp, r3, r1
 8023472:	f1c0 0110 	rsb	r1, r0, #16
 8023476:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802347a:	eba1 0c0c 	sub.w	ip, r1, ip
 802347e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023482:	fb0c 770b 	mla	r7, ip, fp, r7
 8023486:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802348a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802348e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023492:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023496:	ea4c 0c0b 	orr.w	ip, ip, fp
 802349a:	fb02 770c 	mla	r7, r2, ip, r7
 802349e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80234a0:	0d79      	lsrs	r1, r7, #21
 80234a2:	097f      	lsrs	r7, r7, #5
 80234a4:	8812      	ldrh	r2, [r2, #0]
 80234a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80234aa:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80234ae:	430f      	orrs	r7, r1
 80234b0:	b2bb      	uxth	r3, r7
 80234b2:	1211      	asrs	r1, r2, #8
 80234b4:	1218      	asrs	r0, r3, #8
 80234b6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80234ba:	fb11 f104 	smulbb	r1, r1, r4
 80234be:	10d7      	asrs	r7, r2, #3
 80234c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80234c4:	00d2      	lsls	r2, r2, #3
 80234c6:	fb00 1009 	mla	r0, r0, r9, r1
 80234ca:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80234ce:	10d9      	asrs	r1, r3, #3
 80234d0:	b2d2      	uxtb	r2, r2
 80234d2:	00db      	lsls	r3, r3, #3
 80234d4:	fb17 f704 	smulbb	r7, r7, r4
 80234d8:	fb12 f204 	smulbb	r2, r2, r4
 80234dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80234e0:	b2db      	uxtb	r3, r3
 80234e2:	b280      	uxth	r0, r0
 80234e4:	fb01 7109 	mla	r1, r1, r9, r7
 80234e8:	fb03 2309 	mla	r3, r3, r9, r2
 80234ec:	b29b      	uxth	r3, r3
 80234ee:	b289      	uxth	r1, r1
 80234f0:	1c42      	adds	r2, r0, #1
 80234f2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80234f6:	1c4f      	adds	r7, r1, #1
 80234f8:	1c5a      	adds	r2, r3, #1
 80234fa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80234fe:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023502:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023506:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802350a:	0949      	lsrs	r1, r1, #5
 802350c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802350e:	4310      	orrs	r0, r2
 8023510:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023514:	4308      	orrs	r0, r1
 8023516:	f823 0b02 	strh.w	r0, [r3], #2
 802351a:	930e      	str	r3, [sp, #56]	; 0x38
 802351c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802351e:	449a      	add	sl, r3
 8023520:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023522:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023526:	441d      	add	r5, r3
 8023528:	e6ed      	b.n	8023306 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 802352a:	2800      	cmp	r0, #0
 802352c:	f43f af7f 	beq.w	802342e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023530:	5cd3      	ldrb	r3, [r2, r3]
 8023532:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023536:	9310      	str	r3, [sp, #64]	; 0x40
 8023538:	e779      	b.n	802342e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802353a:	b019      	add	sp, #100	; 0x64
 802353c:	ecbd 8b08 	vpop	{d8-d11}
 8023540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023544 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023548:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 802354c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8023550:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023554:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8023558:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802355c:	8808      	ldrh	r0, [r1, #0]
 802355e:	fb06 570e 	mla	r7, r6, lr, r5
 8023562:	2e00      	cmp	r6, #0
 8023564:	eb02 0807 	add.w	r8, r2, r7
 8023568:	db38      	blt.n	80235dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802356a:	45b1      	cmp	r9, r6
 802356c:	dd36      	ble.n	80235dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 802356e:	2d00      	cmp	r5, #0
 8023570:	db32      	blt.n	80235d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023572:	45ae      	cmp	lr, r5
 8023574:	dd30      	ble.n	80235d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023576:	5dd2      	ldrb	r2, [r2, r7]
 8023578:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802357c:	1c6a      	adds	r2, r5, #1
 802357e:	d430      	bmi.n	80235e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023580:	4596      	cmp	lr, r2
 8023582:	dd2e      	ble.n	80235e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023584:	b36c      	cbz	r4, 80235e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023586:	f898 2001 	ldrb.w	r2, [r8, #1]
 802358a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802358e:	3601      	adds	r6, #1
 8023590:	d42b      	bmi.n	80235ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023592:	45b1      	cmp	r9, r6
 8023594:	dd29      	ble.n	80235ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023596:	f1bc 0f00 	cmp.w	ip, #0
 802359a:	d028      	beq.n	80235ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 802359c:	2d00      	cmp	r5, #0
 802359e:	db22      	blt.n	80235e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80235a0:	45ae      	cmp	lr, r5
 80235a2:	dd20      	ble.n	80235e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80235a4:	f818 600e 	ldrb.w	r6, [r8, lr]
 80235a8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80235ac:	3501      	adds	r5, #1
 80235ae:	d407      	bmi.n	80235c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80235b0:	45ae      	cmp	lr, r5
 80235b2:	dd05      	ble.n	80235c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80235b4:	b134      	cbz	r4, 80235c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80235b6:	44c6      	add	lr, r8
 80235b8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80235bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80235c0:	2c0f      	cmp	r4, #15
 80235c2:	d802      	bhi.n	80235ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80235c4:	f1bc 0f0f 	cmp.w	ip, #15
 80235c8:	d914      	bls.n	80235f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80235ca:	4b26      	ldr	r3, [pc, #152]	; (8023664 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80235cc:	4a26      	ldr	r2, [pc, #152]	; (8023668 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80235ce:	4827      	ldr	r0, [pc, #156]	; (802366c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80235d0:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80235d4:	f009 f842 	bl	802c65c <__assert_func>
 80235d8:	4607      	mov	r7, r0
 80235da:	e7cf      	b.n	802357c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80235dc:	4602      	mov	r2, r0
 80235de:	4607      	mov	r7, r0
 80235e0:	e7d5      	b.n	802358e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80235e2:	4602      	mov	r2, r0
 80235e4:	e7d3      	b.n	802358e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80235e6:	4606      	mov	r6, r0
 80235e8:	e7e0      	b.n	80235ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80235ea:	4606      	mov	r6, r0
 80235ec:	e7e8      	b.n	80235c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80235ee:	2c0f      	cmp	r4, #15
 80235f0:	d8eb      	bhi.n	80235ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80235f2:	4606      	mov	r6, r0
 80235f4:	043d      	lsls	r5, r7, #16
 80235f6:	fb14 f30c 	smulbb	r3, r4, ip
 80235fa:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80235fe:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8023602:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023606:	10db      	asrs	r3, r3, #3
 8023608:	432f      	orrs	r7, r5
 802360a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802360e:	f1cc 0510 	rsb	r5, ip, #16
 8023612:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023616:	1b2d      	subs	r5, r5, r4
 8023618:	ea4e 0202 	orr.w	r2, lr, r2
 802361c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8023620:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023624:	4354      	muls	r4, r2
 8023626:	fb05 4507 	mla	r5, r5, r7, r4
 802362a:	0404      	lsls	r4, r0, #16
 802362c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023630:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023634:	4320      	orrs	r0, r4
 8023636:	fb03 5400 	mla	r4, r3, r0, r5
 802363a:	0430      	lsls	r0, r6, #16
 802363c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023640:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8023644:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023648:	4330      	orrs	r0, r6
 802364a:	fb03 4000 	mla	r0, r3, r0, r4
 802364e:	0d43      	lsrs	r3, r0, #21
 8023650:	0940      	lsrs	r0, r0, #5
 8023652:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023656:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802365a:	4318      	orrs	r0, r3
 802365c:	8008      	strh	r0, [r1, #0]
 802365e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023662:	bf00      	nop
 8023664:	080315e5 	.word	0x080315e5
 8023668:	08031c57 	.word	0x08031c57
 802366c:	08031669 	.word	0x08031669

08023670 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023674:	ed2d 8b0a 	vpush	{d8-d12}
 8023678:	b093      	sub	sp, #76	; 0x4c
 802367a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802367e:	920f      	str	r2, [sp, #60]	; 0x3c
 8023680:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023682:	9108      	str	r1, [sp, #32]
 8023684:	9306      	str	r3, [sp, #24]
 8023686:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802368a:	9010      	str	r0, [sp, #64]	; 0x40
 802368c:	6850      	ldr	r0, [r2, #4]
 802368e:	6812      	ldr	r2, [r2, #0]
 8023690:	fb00 1303 	mla	r3, r0, r3, r1
 8023694:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023698:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802369a:	681b      	ldr	r3, [r3, #0]
 802369c:	9307      	str	r3, [sp, #28]
 802369e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236a0:	685f      	ldr	r7, [r3, #4]
 80236a2:	eeb0 aa40 	vmov.f32	s20, s0
 80236a6:	eef0 9a60 	vmov.f32	s19, s1
 80236aa:	eeb0 9a41 	vmov.f32	s18, s2
 80236ae:	eeb0 8a62 	vmov.f32	s16, s5
 80236b2:	eef0 8a43 	vmov.f32	s17, s6
 80236b6:	eeb0 ca44 	vmov.f32	s24, s8
 80236ba:	eef0 ba64 	vmov.f32	s23, s9
 80236be:	eeb0 ba45 	vmov.f32	s22, s10
 80236c2:	3704      	adds	r7, #4
 80236c4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80236c8:	9b08      	ldr	r3, [sp, #32]
 80236ca:	2b00      	cmp	r3, #0
 80236cc:	dc03      	bgt.n	80236d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80236ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	f340 81b2 	ble.w	8023a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80236d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80236dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80236e0:	1e48      	subs	r0, r1, #1
 80236e2:	f102 3cff 	add.w	ip, r2, #4294967295
 80236e6:	9b06      	ldr	r3, [sp, #24]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	f340 80a9 	ble.w	8023840 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80236ee:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80236f2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80236f6:	d406      	bmi.n	8023706 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236f8:	4586      	cmp	lr, r0
 80236fa:	da04      	bge.n	8023706 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236fc:	2b00      	cmp	r3, #0
 80236fe:	db02      	blt.n	8023706 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023700:	4563      	cmp	r3, ip
 8023702:	f2c0 809e 	blt.w	8023842 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023706:	f11e 0e01 	adds.w	lr, lr, #1
 802370a:	f100 808f 	bmi.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802370e:	4571      	cmp	r1, lr
 8023710:	f2c0 808c 	blt.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023714:	3301      	adds	r3, #1
 8023716:	f100 8089 	bmi.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802371a:	429a      	cmp	r2, r3
 802371c:	f2c0 8086 	blt.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023720:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023724:	46c8      	mov	r8, r9
 8023726:	f1bb 0f00 	cmp.w	fp, #0
 802372a:	f340 80a6 	ble.w	802387a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802372e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023732:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023736:	689b      	ldr	r3, [r3, #8]
 8023738:	1422      	asrs	r2, r4, #16
 802373a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802373e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023742:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023746:	f100 80e3 	bmi.w	8023910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802374a:	f103 3aff 	add.w	sl, r3, #4294967295
 802374e:	4552      	cmp	r2, sl
 8023750:	f280 80de 	bge.w	8023910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023754:	f1bc 0f00 	cmp.w	ip, #0
 8023758:	f2c0 80da 	blt.w	8023910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802375c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023760:	45d4      	cmp	ip, sl
 8023762:	f280 80d5 	bge.w	8023910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023766:	b21b      	sxth	r3, r3
 8023768:	fb0c 2203 	mla	r2, ip, r3, r2
 802376c:	9d07      	ldr	r5, [sp, #28]
 802376e:	eb05 0a02 	add.w	sl, r5, r2
 8023772:	5caa      	ldrb	r2, [r5, r2]
 8023774:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023778:	2800      	cmp	r0, #0
 802377a:	f000 80c0 	beq.w	80238fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802377e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023782:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023786:	920b      	str	r2, [sp, #44]	; 0x2c
 8023788:	b151      	cbz	r1, 80237a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802378a:	eb0a 0203 	add.w	r2, sl, r3
 802378e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023792:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023796:	9309      	str	r3, [sp, #36]	; 0x24
 8023798:	7853      	ldrb	r3, [r2, #1]
 802379a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802379e:	930c      	str	r3, [sp, #48]	; 0x30
 80237a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80237a4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80237a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80237ac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80237b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80237b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80237b6:	041b      	lsls	r3, r3, #16
 80237b8:	fb10 f201 	smulbb	r2, r0, r1
 80237bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80237c0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80237c4:	10d2      	asrs	r2, r2, #3
 80237c6:	432b      	orrs	r3, r5
 80237c8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80237cc:	4353      	muls	r3, r2
 80237ce:	fb0a 330c 	mla	r3, sl, ip, r3
 80237d2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80237d6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80237da:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80237de:	ea4c 0e0e 	orr.w	lr, ip, lr
 80237e2:	f1c1 0c10 	rsb	ip, r1, #16
 80237e6:	ebac 0c00 	sub.w	ip, ip, r0
 80237ea:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80237ee:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80237f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237f4:	0418      	lsls	r0, r3, #16
 80237f6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80237fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80237fe:	4318      	orrs	r0, r3
 8023800:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023804:	fb02 c200 	mla	r2, r2, r0, ip
 8023808:	0d53      	lsrs	r3, r2, #21
 802380a:	0952      	lsrs	r2, r2, #5
 802380c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023810:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023814:	431a      	orrs	r2, r3
 8023816:	f8a8 2000 	strh.w	r2, [r8]
 802381a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802381c:	441c      	add	r4, r3
 802381e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023820:	f108 0802 	add.w	r8, r8, #2
 8023824:	441e      	add	r6, r3
 8023826:	f10b 3bff 	add.w	fp, fp, #4294967295
 802382a:	e77c      	b.n	8023726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802382c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802382e:	441c      	add	r4, r3
 8023830:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023832:	441e      	add	r6, r3
 8023834:	9b06      	ldr	r3, [sp, #24]
 8023836:	3b01      	subs	r3, #1
 8023838:	9306      	str	r3, [sp, #24]
 802383a:	f109 0902 	add.w	r9, r9, #2
 802383e:	e752      	b.n	80236e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023840:	d020      	beq.n	8023884 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023842:	9b06      	ldr	r3, [sp, #24]
 8023844:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023846:	3b01      	subs	r3, #1
 8023848:	fb00 4003 	mla	r0, r0, r3, r4
 802384c:	1400      	asrs	r0, r0, #16
 802384e:	f53f af67 	bmi.w	8023720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023852:	3901      	subs	r1, #1
 8023854:	4288      	cmp	r0, r1
 8023856:	f6bf af63 	bge.w	8023720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802385a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802385c:	fb01 6303 	mla	r3, r1, r3, r6
 8023860:	141b      	asrs	r3, r3, #16
 8023862:	f53f af5d 	bmi.w	8023720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023866:	3a01      	subs	r2, #1
 8023868:	4293      	cmp	r3, r2
 802386a:	f6bf af59 	bge.w	8023720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802386e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023872:	46ca      	mov	sl, r9
 8023874:	f1b8 0f00 	cmp.w	r8, #0
 8023878:	dc67      	bgt.n	802394a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802387a:	9b06      	ldr	r3, [sp, #24]
 802387c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023880:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023884:	9b08      	ldr	r3, [sp, #32]
 8023886:	2b00      	cmp	r3, #0
 8023888:	f340 80d7 	ble.w	8023a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802388c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023890:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023894:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023898:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802389a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802389e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80238a2:	eef0 6a48 	vmov.f32	s13, s16
 80238a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80238aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80238b2:	ee16 4a90 	vmov	r4, s13
 80238b6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80238ba:	eef0 6a68 	vmov.f32	s13, s17
 80238be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80238c2:	ee18 2a10 	vmov	r2, s16
 80238c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80238ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80238ce:	ee18 2a90 	vmov	r2, s17
 80238d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80238d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80238d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80238da:	932a      	str	r3, [sp, #168]	; 0xa8
 80238dc:	9b08      	ldr	r3, [sp, #32]
 80238de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80238e0:	3b01      	subs	r3, #1
 80238e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238e6:	9308      	str	r3, [sp, #32]
 80238e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80238ea:	bf08      	it	eq
 80238ec:	4613      	moveq	r3, r2
 80238ee:	ee16 6a90 	vmov	r6, s13
 80238f2:	9306      	str	r3, [sp, #24]
 80238f4:	eef0 8a67 	vmov.f32	s17, s15
 80238f8:	eeb0 8a47 	vmov.f32	s16, s14
 80238fc:	e6e4      	b.n	80236c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80238fe:	2900      	cmp	r1, #0
 8023900:	f43f af4e 	beq.w	80237a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023904:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023908:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802390c:	9309      	str	r3, [sp, #36]	; 0x24
 802390e:	e747      	b.n	80237a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023910:	f112 0a01 	adds.w	sl, r2, #1
 8023914:	d481      	bmi.n	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023916:	4553      	cmp	r3, sl
 8023918:	f6ff af7f 	blt.w	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802391c:	f11c 0a01 	adds.w	sl, ip, #1
 8023920:	f53f af7b 	bmi.w	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023924:	45d6      	cmp	lr, sl
 8023926:	f6ff af78 	blt.w	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802392a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802392e:	b21b      	sxth	r3, r3
 8023930:	fa0f f28e 	sxth.w	r2, lr
 8023934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023938:	9201      	str	r2, [sp, #4]
 802393a:	9300      	str	r3, [sp, #0]
 802393c:	9a07      	ldr	r2, [sp, #28]
 802393e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023940:	463b      	mov	r3, r7
 8023942:	4641      	mov	r1, r8
 8023944:	f7ff fdfe 	bl	8023544 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8023948:	e767      	b.n	802381a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802394a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802394c:	9d07      	ldr	r5, [sp, #28]
 802394e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023952:	1422      	asrs	r2, r4, #16
 8023954:	1431      	asrs	r1, r6, #16
 8023956:	fb03 2101 	mla	r1, r3, r1, r2
 802395a:	9a07      	ldr	r2, [sp, #28]
 802395c:	440a      	add	r2, r1
 802395e:	5c69      	ldrb	r1, [r5, r1]
 8023960:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8023964:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023968:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802396c:	f1be 0f00 	cmp.w	lr, #0
 8023970:	d05c      	beq.n	8023a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8023972:	f892 c001 	ldrb.w	ip, [r2, #1]
 8023976:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802397a:	950d      	str	r5, [sp, #52]	; 0x34
 802397c:	b150      	cbz	r0, 8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802397e:	eb02 0c03 	add.w	ip, r2, r3
 8023982:	5cd3      	ldrb	r3, [r2, r3]
 8023984:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023988:	930a      	str	r3, [sp, #40]	; 0x28
 802398a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802398e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023992:	930e      	str	r3, [sp, #56]	; 0x38
 8023994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023996:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023998:	fb1e f200 	smulbb	r2, lr, r0
 802399c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80239a0:	10d2      	asrs	r2, r2, #3
 80239a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80239a6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80239aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80239ae:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80239b2:	9311      	str	r3, [sp, #68]	; 0x44
 80239b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80239b6:	041b      	lsls	r3, r3, #16
 80239b8:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80239bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80239c0:	ea43 030b 	orr.w	r3, r3, fp
 80239c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80239c6:	4353      	muls	r3, r2
 80239c8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80239cc:	fb05 3c0c 	mla	ip, r5, ip, r3
 80239d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80239d4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80239d8:	ea43 0b01 	orr.w	fp, r3, r1
 80239dc:	f1c0 0110 	rsb	r1, r0, #16
 80239e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239e2:	eba1 0e0e 	sub.w	lr, r1, lr
 80239e6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80239ea:	fb0e cc0b 	mla	ip, lr, fp, ip
 80239ee:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80239f2:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80239f6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80239fa:	ea4b 0e0e 	orr.w	lr, fp, lr
 80239fe:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023a02:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023a06:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8023a0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023a0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a12:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023a16:	ea43 0c0c 	orr.w	ip, r3, ip
 8023a1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a1c:	f82a cb02 	strh.w	ip, [sl], #2
 8023a20:	441c      	add	r4, r3
 8023a22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a24:	f108 38ff 	add.w	r8, r8, #4294967295
 8023a28:	441e      	add	r6, r3
 8023a2a:	e723      	b.n	8023874 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023a2c:	2800      	cmp	r0, #0
 8023a2e:	d0b1      	beq.n	8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023a30:	5cd3      	ldrb	r3, [r2, r3]
 8023a32:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023a36:	930a      	str	r3, [sp, #40]	; 0x28
 8023a38:	e7ac      	b.n	8023994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023a3a:	b013      	add	sp, #76	; 0x4c
 8023a3c:	ecbd 8b0a 	vpop	{d8-d12}
 8023a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8023a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a48:	468b      	mov	fp, r1
 8023a4a:	8809      	ldrh	r1, [r1, #0]
 8023a4c:	b089      	sub	sp, #36	; 0x24
 8023a4e:	10cd      	asrs	r5, r1, #3
 8023a50:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8023a54:	ea4f 2921 	mov.w	r9, r1, asr #8
 8023a58:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023a5c:	00c9      	lsls	r1, r1, #3
 8023a5e:	9500      	str	r5, [sp, #0]
 8023a60:	b2c9      	uxtb	r1, r1
 8023a62:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8023a66:	9101      	str	r1, [sp, #4]
 8023a68:	9900      	ldr	r1, [sp, #0]
 8023a6a:	9202      	str	r2, [sp, #8]
 8023a6c:	fb04 650e 	mla	r5, r4, lr, r6
 8023a70:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023a74:	eb02 0805 	add.w	r8, r2, r5
 8023a78:	0209      	lsls	r1, r1, #8
 8023a7a:	9a01      	ldr	r2, [sp, #4]
 8023a7c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023a80:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8023a84:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8023a88:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8023a8c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8023a90:	4311      	orrs	r1, r2
 8023a92:	2c00      	cmp	r4, #0
 8023a94:	9107      	str	r1, [sp, #28]
 8023a96:	db43      	blt.n	8023b20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8023a98:	45a2      	cmp	sl, r4
 8023a9a:	dd41      	ble.n	8023b20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8023a9c:	2e00      	cmp	r6, #0
 8023a9e:	db3d      	blt.n	8023b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8023aa0:	45b6      	cmp	lr, r6
 8023aa2:	dd3b      	ble.n	8023b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8023aa4:	9a02      	ldr	r2, [sp, #8]
 8023aa6:	5d55      	ldrb	r5, [r2, r5]
 8023aa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023aac:	441d      	add	r5, r3
 8023aae:	1c72      	adds	r2, r6, #1
 8023ab0:	d439      	bmi.n	8023b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8023ab2:	4596      	cmp	lr, r2
 8023ab4:	dd37      	ble.n	8023b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8023ab6:	2f00      	cmp	r7, #0
 8023ab8:	d035      	beq.n	8023b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8023aba:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023abe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023ac2:	4419      	add	r1, r3
 8023ac4:	3401      	adds	r4, #1
 8023ac6:	d432      	bmi.n	8023b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8023ac8:	45a2      	cmp	sl, r4
 8023aca:	dd30      	ble.n	8023b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8023acc:	b378      	cbz	r0, 8023b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8023ace:	2e00      	cmp	r6, #0
 8023ad0:	db2b      	blt.n	8023b2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8023ad2:	45b6      	cmp	lr, r6
 8023ad4:	dd29      	ble.n	8023b2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8023ad6:	f818 400e 	ldrb.w	r4, [r8, lr]
 8023ada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023ade:	441c      	add	r4, r3
 8023ae0:	3601      	adds	r6, #1
 8023ae2:	d427      	bmi.n	8023b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8023ae4:	45b6      	cmp	lr, r6
 8023ae6:	dd25      	ble.n	8023b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8023ae8:	b327      	cbz	r7, 8023b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8023aea:	44c6      	add	lr, r8
 8023aec:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023af4:	4413      	add	r3, r2
 8023af6:	782a      	ldrb	r2, [r5, #0]
 8023af8:	9202      	str	r2, [sp, #8]
 8023afa:	780a      	ldrb	r2, [r1, #0]
 8023afc:	9203      	str	r2, [sp, #12]
 8023afe:	7822      	ldrb	r2, [r4, #0]
 8023b00:	9204      	str	r2, [sp, #16]
 8023b02:	2f0f      	cmp	r7, #15
 8023b04:	781a      	ldrb	r2, [r3, #0]
 8023b06:	9205      	str	r2, [sp, #20]
 8023b08:	d801      	bhi.n	8023b0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8023b0a:	280f      	cmp	r0, #15
 8023b0c:	d914      	bls.n	8023b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8023b0e:	4b3f      	ldr	r3, [pc, #252]	; (8023c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8023b10:	4a3f      	ldr	r2, [pc, #252]	; (8023c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8023b12:	4840      	ldr	r0, [pc, #256]	; (8023c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8023b14:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8023b18:	f008 fda0 	bl	802c65c <__assert_func>
 8023b1c:	ad07      	add	r5, sp, #28
 8023b1e:	e7c6      	b.n	8023aae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8023b20:	a907      	add	r1, sp, #28
 8023b22:	460d      	mov	r5, r1
 8023b24:	e7ce      	b.n	8023ac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8023b26:	a907      	add	r1, sp, #28
 8023b28:	e7cc      	b.n	8023ac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8023b2a:	ac07      	add	r4, sp, #28
 8023b2c:	e7d8      	b.n	8023ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8023b2e:	ab07      	add	r3, sp, #28
 8023b30:	461c      	mov	r4, r3
 8023b32:	e7e0      	b.n	8023af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8023b34:	ab07      	add	r3, sp, #28
 8023b36:	e7de      	b.n	8023af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8023b38:	b2ba      	uxth	r2, r7
 8023b3a:	b280      	uxth	r0, r0
 8023b3c:	fb02 fa00 	mul.w	sl, r2, r0
 8023b40:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023b44:	0112      	lsls	r2, r2, #4
 8023b46:	b280      	uxth	r0, r0
 8023b48:	f891 8002 	ldrb.w	r8, [r1, #2]
 8023b4c:	7849      	ldrb	r1, [r1, #1]
 8023b4e:	78ae      	ldrb	r6, [r5, #2]
 8023b50:	786d      	ldrb	r5, [r5, #1]
 8023b52:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8023b56:	eba2 020a 	sub.w	r2, r2, sl
 8023b5a:	b292      	uxth	r2, r2
 8023b5c:	ebae 0e00 	sub.w	lr, lr, r0
 8023b60:	fa1f fe8e 	uxth.w	lr, lr
 8023b64:	4351      	muls	r1, r2
 8023b66:	fb02 f808 	mul.w	r8, r2, r8
 8023b6a:	fb0e 8806 	mla	r8, lr, r6, r8
 8023b6e:	fb0e 1505 	mla	r5, lr, r5, r1
 8023b72:	78a6      	ldrb	r6, [r4, #2]
 8023b74:	7861      	ldrb	r1, [r4, #1]
 8023b76:	fa1f f78c 	uxth.w	r7, ip
 8023b7a:	fb00 8806 	mla	r8, r0, r6, r8
 8023b7e:	fb00 5501 	mla	r5, r0, r1, r5
 8023b82:	789e      	ldrb	r6, [r3, #2]
 8023b84:	7859      	ldrb	r1, [r3, #1]
 8023b86:	9b00      	ldr	r3, [sp, #0]
 8023b88:	ea6f 0c0c 	mvn.w	ip, ip
 8023b8c:	fa5f fc8c 	uxtb.w	ip, ip
 8023b90:	fb0a 5101 	mla	r1, sl, r1, r5
 8023b94:	fb13 f50c 	smulbb	r5, r3, ip
 8023b98:	9b03      	ldr	r3, [sp, #12]
 8023b9a:	435a      	muls	r2, r3
 8023b9c:	9b02      	ldr	r3, [sp, #8]
 8023b9e:	fb0e 2203 	mla	r2, lr, r3, r2
 8023ba2:	9b04      	ldr	r3, [sp, #16]
 8023ba4:	fb00 2003 	mla	r0, r0, r3, r2
 8023ba8:	9b05      	ldr	r3, [sp, #20]
 8023baa:	fb0a 8606 	mla	r6, sl, r6, r8
 8023bae:	fb19 f90c 	smulbb	r9, r9, ip
 8023bb2:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023bb6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023bba:	9b01      	ldr	r3, [sp, #4]
 8023bbc:	fb06 9607 	mla	r6, r6, r7, r9
 8023bc0:	b2b6      	uxth	r6, r6
 8023bc2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023bc6:	fb13 fc0c 	smulbb	ip, r3, ip
 8023bca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023bce:	fb01 5107 	mla	r1, r1, r7, r5
 8023bd2:	f106 0901 	add.w	r9, r6, #1
 8023bd6:	fb0a c707 	mla	r7, sl, r7, ip
 8023bda:	b2bf      	uxth	r7, r7
 8023bdc:	b289      	uxth	r1, r1
 8023bde:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023be2:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8023be6:	1c4d      	adds	r5, r1, #1
 8023be8:	1c7e      	adds	r6, r7, #1
 8023bea:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023bee:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8023bf2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023bf6:	0949      	lsrs	r1, r1, #5
 8023bf8:	ea46 0609 	orr.w	r6, r6, r9
 8023bfc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023c00:	430e      	orrs	r6, r1
 8023c02:	f8ab 6000 	strh.w	r6, [fp]
 8023c06:	b009      	add	sp, #36	; 0x24
 8023c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c0c:	080315e5 	.word	0x080315e5
 8023c10:	08031bae 	.word	0x08031bae
 8023c14:	08031669 	.word	0x08031669

08023c18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c1c:	ed2d 8b08 	vpush	{d8-d11}
 8023c20:	b095      	sub	sp, #84	; 0x54
 8023c22:	eeb0 aa40 	vmov.f32	s20, s0
 8023c26:	9212      	str	r2, [sp, #72]	; 0x48
 8023c28:	9309      	str	r3, [sp, #36]	; 0x24
 8023c2a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023c2c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8023c32:	910e      	str	r1, [sp, #56]	; 0x38
 8023c34:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023c38:	9013      	str	r0, [sp, #76]	; 0x4c
 8023c3a:	6850      	ldr	r0, [r2, #4]
 8023c3c:	6812      	ldr	r2, [r2, #0]
 8023c3e:	fb00 1303 	mla	r3, r0, r3, r1
 8023c42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023c46:	930a      	str	r3, [sp, #40]	; 0x28
 8023c48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023c4a:	681b      	ldr	r3, [r3, #0]
 8023c4c:	930d      	str	r3, [sp, #52]	; 0x34
 8023c4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023c50:	685c      	ldr	r4, [r3, #4]
 8023c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023c54:	43db      	mvns	r3, r3
 8023c56:	b2db      	uxtb	r3, r3
 8023c58:	eef0 9a60 	vmov.f32	s19, s1
 8023c5c:	eeb0 9a41 	vmov.f32	s18, s2
 8023c60:	eeb0 8a62 	vmov.f32	s16, s5
 8023c64:	eef0 8a43 	vmov.f32	s17, s6
 8023c68:	eef0 ba44 	vmov.f32	s23, s8
 8023c6c:	eeb0 ba64 	vmov.f32	s22, s9
 8023c70:	eef0 aa45 	vmov.f32	s21, s10
 8023c74:	3404      	adds	r4, #4
 8023c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8023c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023c7a:	2b00      	cmp	r3, #0
 8023c7c:	dc03      	bgt.n	8023c86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	f340 8255 	ble.w	8024130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023c86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023c88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c90:	1e48      	subs	r0, r1, #1
 8023c92:	1e55      	subs	r5, r2, #1
 8023c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c96:	2b00      	cmp	r3, #0
 8023c98:	f340 80f9 	ble.w	8023e8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023c9c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023c9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ca0:	1436      	asrs	r6, r6, #16
 8023ca2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023ca6:	d406      	bmi.n	8023cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023ca8:	4286      	cmp	r6, r0
 8023caa:	da04      	bge.n	8023cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	db02      	blt.n	8023cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023cb0:	42ab      	cmp	r3, r5
 8023cb2:	f2c0 80ed 	blt.w	8023e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023cb6:	3601      	adds	r6, #1
 8023cb8:	f100 80da 	bmi.w	8023e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023cbc:	42b1      	cmp	r1, r6
 8023cbe:	f2c0 80d7 	blt.w	8023e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023cc2:	3301      	adds	r3, #1
 8023cc4:	f100 80d4 	bmi.w	8023e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023cc8:	429a      	cmp	r2, r3
 8023cca:	f2c0 80d1 	blt.w	8023e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8023cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8023cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	f340 80fa 	ble.w	8023ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023cde:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8023ce0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ce2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023ce4:	68c6      	ldr	r6, [r0, #12]
 8023ce6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023ce8:	141d      	asrs	r5, r3, #16
 8023cea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023cee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023cf0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023cf2:	1400      	asrs	r0, r0, #16
 8023cf4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023cf8:	6892      	ldr	r2, [r2, #8]
 8023cfa:	f100 813e 	bmi.w	8023f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023cfe:	1e57      	subs	r7, r2, #1
 8023d00:	42b8      	cmp	r0, r7
 8023d02:	f280 813a 	bge.w	8023f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d06:	2d00      	cmp	r5, #0
 8023d08:	f2c0 8137 	blt.w	8023f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d0c:	1e77      	subs	r7, r6, #1
 8023d0e:	42bd      	cmp	r5, r7
 8023d10:	f280 8133 	bge.w	8023f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d14:	b212      	sxth	r2, r2
 8023d16:	fb05 0002 	mla	r0, r5, r2, r0
 8023d1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d1c:	f815 a000 	ldrb.w	sl, [r5, r0]
 8023d20:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023d24:	182e      	adds	r6, r5, r0
 8023d26:	eb04 050a 	add.w	r5, r4, sl
 8023d2a:	2b00      	cmp	r3, #0
 8023d2c:	f000 8117 	beq.w	8023f5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023d30:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023d34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023d38:	44a4      	add	ip, r4
 8023d3a:	2900      	cmp	r1, #0
 8023d3c:	f000 8117 	beq.w	8023f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023d40:	18b0      	adds	r0, r6, r2
 8023d42:	5cb2      	ldrb	r2, [r6, r2]
 8023d44:	7840      	ldrb	r0, [r0, #1]
 8023d46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d4e:	4422      	add	r2, r4
 8023d50:	4420      	add	r0, r4
 8023d52:	b29b      	uxth	r3, r3
 8023d54:	b289      	uxth	r1, r1
 8023d56:	fb03 f901 	mul.w	r9, r3, r1
 8023d5a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023d5e:	011b      	lsls	r3, r3, #4
 8023d60:	b289      	uxth	r1, r1
 8023d62:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8023d66:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023d6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023d6c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8023d70:	f8b6 e000 	ldrh.w	lr, [r6]
 8023d74:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8023d78:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023d7c:	eba3 0309 	sub.w	r3, r3, r9
 8023d80:	b29b      	uxth	r3, r3
 8023d82:	eba8 0801 	sub.w	r8, r8, r1
 8023d86:	fa1f f888 	uxth.w	r8, r8
 8023d8a:	435f      	muls	r7, r3
 8023d8c:	fb08 770b 	mla	r7, r8, fp, r7
 8023d90:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023d94:	9310      	str	r3, [sp, #64]	; 0x40
 8023d96:	fb01 770b 	mla	r7, r1, fp, r7
 8023d9a:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023da0:	fb09 770b 	mla	r7, r9, fp, r7
 8023da4:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8023da8:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023dac:	fb1b fb03 	smulbb	fp, fp, r3
 8023db0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023db4:	fb07 b706 	mla	r7, r7, r6, fp
 8023db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023dba:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023dbe:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023dc2:	f89c c000 	ldrb.w	ip, [ip]
 8023dc6:	435d      	muls	r5, r3
 8023dc8:	fb08 550b 	mla	r5, r8, fp, r5
 8023dcc:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023dd2:	fb01 550b 	mla	r5, r1, fp, r5
 8023dd6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023dda:	fb09 550b 	mla	r5, r9, fp, r5
 8023dde:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023de2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023de6:	fb1b fb03 	smulbb	fp, fp, r3
 8023dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023dec:	fb03 f30c 	mul.w	r3, r3, ip
 8023df0:	f892 c000 	ldrb.w	ip, [r2]
 8023df4:	fb08 330a 	mla	r3, r8, sl, r3
 8023df8:	fb01 330c 	mla	r3, r1, ip, r3
 8023dfc:	f890 c000 	ldrb.w	ip, [r0]
 8023e00:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023e04:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e0a:	fa5f fe8e 	uxtb.w	lr, lr
 8023e0e:	b2bf      	uxth	r7, r7
 8023e10:	fb1e fe03 	smulbb	lr, lr, r3
 8023e14:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023e18:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023e1c:	fb05 b506 	mla	r5, r5, r6, fp
 8023e20:	1c7b      	adds	r3, r7, #1
 8023e22:	fb0c e606 	mla	r6, ip, r6, lr
 8023e26:	b2ad      	uxth	r5, r5
 8023e28:	b2b6      	uxth	r6, r6
 8023e2a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023e2e:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8023e32:	f105 0b01 	add.w	fp, r5, #1
 8023e36:	1c77      	adds	r7, r6, #1
 8023e38:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023e3c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023e40:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023e44:	096d      	lsrs	r5, r5, #5
 8023e46:	431f      	orrs	r7, r3
 8023e48:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e4e:	433d      	orrs	r5, r7
 8023e50:	801d      	strh	r5, [r3, #0]
 8023e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e54:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023e56:	3302      	adds	r3, #2
 8023e58:	930c      	str	r3, [sp, #48]	; 0x30
 8023e5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e5c:	4413      	add	r3, r2
 8023e5e:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e60:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023e62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e64:	4413      	add	r3, r2
 8023e66:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e6a:	3b01      	subs	r3, #1
 8023e6c:	9311      	str	r3, [sp, #68]	; 0x44
 8023e6e:	e732      	b.n	8023cd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023e70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e72:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8023e74:	4433      	add	r3, r6
 8023e76:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e78:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8023e7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e7c:	4433      	add	r3, r6
 8023e7e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e82:	3b01      	subs	r3, #1
 8023e84:	9309      	str	r3, [sp, #36]	; 0x24
 8023e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e88:	3302      	adds	r3, #2
 8023e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8023e8c:	e702      	b.n	8023c94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023e8e:	d027      	beq.n	8023ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e92:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023e94:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023e96:	3b01      	subs	r3, #1
 8023e98:	fb00 5003 	mla	r0, r0, r3, r5
 8023e9c:	1400      	asrs	r0, r0, #16
 8023e9e:	f53f af16 	bmi.w	8023cce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023ea2:	3901      	subs	r1, #1
 8023ea4:	4288      	cmp	r0, r1
 8023ea6:	f6bf af12 	bge.w	8023cce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023eaa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023eac:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023eae:	fb01 0303 	mla	r3, r1, r3, r0
 8023eb2:	141b      	asrs	r3, r3, #16
 8023eb4:	f53f af0b 	bmi.w	8023cce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023eb8:	3a01      	subs	r2, #1
 8023eba:	4293      	cmp	r3, r2
 8023ebc:	f6bf af07 	bge.w	8023cce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ec2:	9311      	str	r3, [sp, #68]	; 0x44
 8023ec4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023eca:	930c      	str	r3, [sp, #48]	; 0x30
 8023ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ece:	2b00      	cmp	r3, #0
 8023ed0:	dc70      	bgt.n	8023fb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8023ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ed6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023eda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ede:	930a      	str	r3, [sp, #40]	; 0x28
 8023ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	f340 8124 	ble.w	8024130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023ee8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ef0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023ef4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ef6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023efa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023efe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023f02:	eef0 6a48 	vmov.f32	s13, s16
 8023f06:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023f0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f0e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023f12:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8023f16:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023f1a:	eef0 6a68 	vmov.f32	s13, s17
 8023f1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023f22:	ee18 2a10 	vmov	r2, s16
 8023f26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f2e:	ee18 2a90 	vmov	r2, s17
 8023f32:	9329      	str	r3, [sp, #164]	; 0xa4
 8023f34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f3a:	932a      	str	r3, [sp, #168]	; 0xa8
 8023f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023f3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023f40:	3b01      	subs	r3, #1
 8023f42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f46:	930e      	str	r3, [sp, #56]	; 0x38
 8023f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f4a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8023f4e:	bf08      	it	eq
 8023f50:	4613      	moveq	r3, r2
 8023f52:	9309      	str	r3, [sp, #36]	; 0x24
 8023f54:	eef0 8a67 	vmov.f32	s17, s15
 8023f58:	eeb0 8a47 	vmov.f32	s16, s14
 8023f5c:	e68c      	b.n	8023c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023f5e:	b149      	cbz	r1, 8023f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023f60:	5cb2      	ldrb	r2, [r6, r2]
 8023f62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f66:	4422      	add	r2, r4
 8023f68:	4628      	mov	r0, r5
 8023f6a:	46ac      	mov	ip, r5
 8023f6c:	e6f1      	b.n	8023d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023f6e:	4628      	mov	r0, r5
 8023f70:	462a      	mov	r2, r5
 8023f72:	e6ee      	b.n	8023d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023f74:	4628      	mov	r0, r5
 8023f76:	462a      	mov	r2, r5
 8023f78:	e7f7      	b.n	8023f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023f7a:	1c47      	adds	r7, r0, #1
 8023f7c:	f53f af69 	bmi.w	8023e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023f80:	42ba      	cmp	r2, r7
 8023f82:	f6ff af66 	blt.w	8023e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023f86:	1c6f      	adds	r7, r5, #1
 8023f88:	f53f af63 	bmi.w	8023e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023f8c:	42be      	cmp	r6, r7
 8023f8e:	f6ff af60 	blt.w	8023e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023f92:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023f94:	9002      	str	r0, [sp, #8]
 8023f96:	b236      	sxth	r6, r6
 8023f98:	b212      	sxth	r2, r2
 8023f9a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023f9e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023fa2:	9200      	str	r2, [sp, #0]
 8023fa4:	9601      	str	r6, [sp, #4]
 8023fa6:	4623      	mov	r3, r4
 8023fa8:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023fac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023fae:	f7ff fd49 	bl	8023a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023fb2:	e74e      	b.n	8023e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023fb4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023fb6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023fb8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023fba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023fbc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023fc0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023fc2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023fc6:	142d      	asrs	r5, r5, #16
 8023fc8:	1400      	asrs	r0, r0, #16
 8023fca:	fb02 5000 	mla	r0, r2, r0, r5
 8023fce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023fd0:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023fd4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023fd8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023fdc:	182e      	adds	r6, r5, r0
 8023fde:	eb04 0509 	add.w	r5, r4, r9
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	f000 8096 	beq.w	8024114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8023fe8:	7877      	ldrb	r7, [r6, #1]
 8023fea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023fee:	4427      	add	r7, r4
 8023ff0:	2900      	cmp	r1, #0
 8023ff2:	f000 8097 	beq.w	8024124 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8023ff6:	18b0      	adds	r0, r6, r2
 8023ff8:	5cb2      	ldrb	r2, [r6, r2]
 8023ffa:	7840      	ldrb	r0, [r0, #1]
 8023ffc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024000:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024004:	4422      	add	r2, r4
 8024006:	4420      	add	r0, r4
 8024008:	b29b      	uxth	r3, r3
 802400a:	b289      	uxth	r1, r1
 802400c:	fb03 f801 	mul.w	r8, r3, r1
 8024010:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024012:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024016:	f8b6 c000 	ldrh.w	ip, [r6]
 802401a:	78be      	ldrb	r6, [r7, #2]
 802401c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024020:	011b      	lsls	r3, r3, #4
 8024022:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024026:	b289      	uxth	r1, r1
 8024028:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802402c:	eba3 0308 	sub.w	r3, r3, r8
 8024030:	b29b      	uxth	r3, r3
 8024032:	ebae 0e01 	sub.w	lr, lr, r1
 8024036:	fa1f fe8e 	uxth.w	lr, lr
 802403a:	435e      	muls	r6, r3
 802403c:	fb0e 660b 	mla	r6, lr, fp, r6
 8024040:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024044:	9310      	str	r3, [sp, #64]	; 0x40
 8024046:	fb01 660b 	mla	r6, r1, fp, r6
 802404a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024050:	fb08 660b 	mla	r6, r8, fp, r6
 8024054:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024058:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802405c:	fb1b fb03 	smulbb	fp, fp, r3
 8024060:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024064:	fb06 b60a 	mla	r6, r6, sl, fp
 8024068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802406a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802406e:	787d      	ldrb	r5, [r7, #1]
 8024070:	783f      	ldrb	r7, [r7, #0]
 8024072:	435d      	muls	r5, r3
 8024074:	fb0e 550b 	mla	r5, lr, fp, r5
 8024078:	f892 b001 	ldrb.w	fp, [r2, #1]
 802407c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802407e:	fb01 550b 	mla	r5, r1, fp, r5
 8024082:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024086:	fb08 550b 	mla	r5, r8, fp, r5
 802408a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802408e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024092:	fb1b fb03 	smulbb	fp, fp, r3
 8024096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024098:	437b      	muls	r3, r7
 802409a:	7817      	ldrb	r7, [r2, #0]
 802409c:	fb0e 3309 	mla	r3, lr, r9, r3
 80240a0:	fb01 3307 	mla	r3, r1, r7, r3
 80240a4:	7807      	ldrb	r7, [r0, #0]
 80240a6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80240aa:	fb08 3707 	mla	r7, r8, r7, r3
 80240ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240b0:	fa5f fc8c 	uxtb.w	ip, ip
 80240b4:	fb1c fc03 	smulbb	ip, ip, r3
 80240b8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80240bc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80240c0:	fb05 b50a 	mla	r5, r5, sl, fp
 80240c4:	fb07 c70a 	mla	r7, r7, sl, ip
 80240c8:	b2b6      	uxth	r6, r6
 80240ca:	b2ad      	uxth	r5, r5
 80240cc:	b2bf      	uxth	r7, r7
 80240ce:	1c73      	adds	r3, r6, #1
 80240d0:	1c7a      	adds	r2, r7, #1
 80240d2:	f105 0b01 	add.w	fp, r5, #1
 80240d6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80240da:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80240de:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80240e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80240e6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80240ea:	096d      	lsrs	r5, r5, #5
 80240ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240ee:	4316      	orrs	r6, r2
 80240f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80240f4:	432e      	orrs	r6, r5
 80240f6:	f823 6b02 	strh.w	r6, [r3], #2
 80240fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80240fc:	930c      	str	r3, [sp, #48]	; 0x30
 80240fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024100:	4413      	add	r3, r2
 8024102:	9327      	str	r3, [sp, #156]	; 0x9c
 8024104:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024106:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024108:	4413      	add	r3, r2
 802410a:	9328      	str	r3, [sp, #160]	; 0xa0
 802410c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802410e:	3b01      	subs	r3, #1
 8024110:	9311      	str	r3, [sp, #68]	; 0x44
 8024112:	e6db      	b.n	8023ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8024114:	b149      	cbz	r1, 802412a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024116:	5cb2      	ldrb	r2, [r6, r2]
 8024118:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802411c:	4422      	add	r2, r4
 802411e:	4628      	mov	r0, r5
 8024120:	462f      	mov	r7, r5
 8024122:	e771      	b.n	8024008 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024124:	4628      	mov	r0, r5
 8024126:	462a      	mov	r2, r5
 8024128:	e76e      	b.n	8024008 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802412a:	4628      	mov	r0, r5
 802412c:	462a      	mov	r2, r5
 802412e:	e7f7      	b.n	8024120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024130:	b015      	add	sp, #84	; 0x54
 8024132:	ecbd 8b08 	vpop	{d8-d11}
 8024136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802413c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024140:	880e      	ldrh	r6, [r1, #0]
 8024142:	b085      	sub	sp, #20
 8024144:	0230      	lsls	r0, r6, #8
 8024146:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802414a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 802414e:	0170      	lsls	r0, r6, #5
 8024150:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024154:	9101      	str	r1, [sp, #4]
 8024156:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 802415a:	00f6      	lsls	r6, r6, #3
 802415c:	ea4b 0000 	orr.w	r0, fp, r0
 8024160:	b2f6      	uxtb	r6, r6
 8024162:	4691      	mov	r9, r2
 8024164:	fb05 7a0c 	mla	sl, r5, ip, r7
 8024168:	4306      	orrs	r6, r0
 802416a:	2d00      	cmp	r5, #0
 802416c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024170:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8024174:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8024178:	9603      	str	r6, [sp, #12]
 802417a:	eb09 0e0a 	add.w	lr, r9, sl
 802417e:	db42      	blt.n	8024206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024180:	45a8      	cmp	r8, r5
 8024182:	dd40      	ble.n	8024206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024184:	2f00      	cmp	r7, #0
 8024186:	db3c      	blt.n	8024202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024188:	45bc      	cmp	ip, r7
 802418a:	dd3a      	ble.n	8024202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 802418c:	f819 600a 	ldrb.w	r6, [r9, sl]
 8024190:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024194:	441e      	add	r6, r3
 8024196:	1c78      	adds	r0, r7, #1
 8024198:	d438      	bmi.n	802420c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802419a:	4584      	cmp	ip, r0
 802419c:	dd36      	ble.n	802420c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802419e:	b3aa      	cbz	r2, 802420c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80241a0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80241a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80241a8:	4418      	add	r0, r3
 80241aa:	3501      	adds	r5, #1
 80241ac:	d432      	bmi.n	8024214 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80241ae:	45a8      	cmp	r8, r5
 80241b0:	dd30      	ble.n	8024214 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80241b2:	b37c      	cbz	r4, 8024214 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80241b4:	2f00      	cmp	r7, #0
 80241b6:	db2b      	blt.n	8024210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80241b8:	45bc      	cmp	ip, r7
 80241ba:	dd29      	ble.n	8024210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80241bc:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80241c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80241c4:	441d      	add	r5, r3
 80241c6:	3701      	adds	r7, #1
 80241c8:	d427      	bmi.n	802421a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80241ca:	45bc      	cmp	ip, r7
 80241cc:	dd25      	ble.n	802421a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80241ce:	b322      	cbz	r2, 802421a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80241d0:	44f4      	add	ip, lr
 80241d2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80241d6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80241da:	443b      	add	r3, r7
 80241dc:	781f      	ldrb	r7, [r3, #0]
 80241de:	f896 9000 	ldrb.w	r9, [r6]
 80241e2:	f890 a000 	ldrb.w	sl, [r0]
 80241e6:	f895 8000 	ldrb.w	r8, [r5]
 80241ea:	2a0f      	cmp	r2, #15
 80241ec:	4639      	mov	r1, r7
 80241ee:	d801      	bhi.n	80241f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 80241f0:	2c0f      	cmp	r4, #15
 80241f2:	d914      	bls.n	802421e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 80241f4:	4b2c      	ldr	r3, [pc, #176]	; (80242a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80241f6:	4a2d      	ldr	r2, [pc, #180]	; (80242ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80241f8:	482d      	ldr	r0, [pc, #180]	; (80242b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 80241fa:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80241fe:	f008 fa2d 	bl	802c65c <__assert_func>
 8024202:	ae03      	add	r6, sp, #12
 8024204:	e7c7      	b.n	8024196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024206:	a803      	add	r0, sp, #12
 8024208:	4606      	mov	r6, r0
 802420a:	e7ce      	b.n	80241aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802420c:	a803      	add	r0, sp, #12
 802420e:	e7cc      	b.n	80241aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024210:	ad03      	add	r5, sp, #12
 8024212:	e7d8      	b.n	80241c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8024214:	ab03      	add	r3, sp, #12
 8024216:	461d      	mov	r5, r3
 8024218:	e7e0      	b.n	80241dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802421a:	ab03      	add	r3, sp, #12
 802421c:	e7de      	b.n	80241dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802421e:	b292      	uxth	r2, r2
 8024220:	b2a4      	uxth	r4, r4
 8024222:	fb02 fe04 	mul.w	lr, r2, r4
 8024226:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 802422a:	0112      	lsls	r2, r2, #4
 802422c:	b2a4      	uxth	r4, r4
 802422e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8024232:	f896 b002 	ldrb.w	fp, [r6, #2]
 8024236:	7840      	ldrb	r0, [r0, #1]
 8024238:	7876      	ldrb	r6, [r6, #1]
 802423a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802423e:	eba2 020e 	sub.w	r2, r2, lr
 8024242:	b292      	uxth	r2, r2
 8024244:	1b3f      	subs	r7, r7, r4
 8024246:	b2bf      	uxth	r7, r7
 8024248:	fb02 fc0c 	mul.w	ip, r2, ip
 802424c:	fb07 cc0b 	mla	ip, r7, fp, ip
 8024250:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024254:	fb04 cc0b 	mla	ip, r4, fp, ip
 8024258:	f893 b002 	ldrb.w	fp, [r3, #2]
 802425c:	785b      	ldrb	r3, [r3, #1]
 802425e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024262:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8024266:	fb02 fc0a 	mul.w	ip, r2, sl
 802426a:	4342      	muls	r2, r0
 802426c:	7868      	ldrb	r0, [r5, #1]
 802426e:	fb07 cc09 	mla	ip, r7, r9, ip
 8024272:	fb07 2206 	mla	r2, r7, r6, r2
 8024276:	fb04 cc08 	mla	ip, r4, r8, ip
 802427a:	fb04 2400 	mla	r4, r4, r0, r2
 802427e:	fb0e cc01 	mla	ip, lr, r1, ip
 8024282:	fb0e 4e03 	mla	lr, lr, r3, r4
 8024286:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802428a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802428e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024292:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024296:	9b01      	ldr	r3, [sp, #4]
 8024298:	ea4c 0c0e 	orr.w	ip, ip, lr
 802429c:	f8a3 c000 	strh.w	ip, [r3]
 80242a0:	b005      	add	sp, #20
 80242a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242a6:	bf00      	nop
 80242a8:	080315e5 	.word	0x080315e5
 80242ac:	08031bae 	.word	0x08031bae
 80242b0:	08031669 	.word	0x08031669

080242b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80242b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242b8:	ed2d 8b08 	vpush	{d8-d11}
 80242bc:	b08f      	sub	sp, #60	; 0x3c
 80242be:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 80242c2:	920c      	str	r2, [sp, #48]	; 0x30
 80242c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80242c6:	910a      	str	r1, [sp, #40]	; 0x28
 80242c8:	9306      	str	r3, [sp, #24]
 80242ca:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80242ce:	900d      	str	r0, [sp, #52]	; 0x34
 80242d0:	6850      	ldr	r0, [r2, #4]
 80242d2:	6812      	ldr	r2, [r2, #0]
 80242d4:	fb00 1303 	mla	r3, r0, r3, r1
 80242d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80242dc:	9307      	str	r3, [sp, #28]
 80242de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80242e0:	681b      	ldr	r3, [r3, #0]
 80242e2:	9308      	str	r3, [sp, #32]
 80242e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80242e6:	685c      	ldr	r4, [r3, #4]
 80242e8:	eeb0 aa40 	vmov.f32	s20, s0
 80242ec:	eef0 9a60 	vmov.f32	s19, s1
 80242f0:	eeb0 9a41 	vmov.f32	s18, s2
 80242f4:	eeb0 8a62 	vmov.f32	s16, s5
 80242f8:	eef0 8a43 	vmov.f32	s17, s6
 80242fc:	eef0 ba44 	vmov.f32	s23, s8
 8024300:	eeb0 ba64 	vmov.f32	s22, s9
 8024304:	eef0 aa45 	vmov.f32	s21, s10
 8024308:	3404      	adds	r4, #4
 802430a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802430c:	2b00      	cmp	r3, #0
 802430e:	dc03      	bgt.n	8024318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8024310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024312:	2b00      	cmp	r3, #0
 8024314:	f340 81d6 	ble.w	80246c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024318:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802431a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802431e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024322:	1e48      	subs	r0, r1, #1
 8024324:	1e56      	subs	r6, r2, #1
 8024326:	9b06      	ldr	r3, [sp, #24]
 8024328:	2b00      	cmp	r3, #0
 802432a:	f340 80b7 	ble.w	802449c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802432e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024332:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024336:	d406      	bmi.n	8024346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024338:	4287      	cmp	r7, r0
 802433a:	da04      	bge.n	8024346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802433c:	2b00      	cmp	r3, #0
 802433e:	db02      	blt.n	8024346 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024340:	42b3      	cmp	r3, r6
 8024342:	f2c0 80ac 	blt.w	802449e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024346:	3701      	adds	r7, #1
 8024348:	f100 809d 	bmi.w	8024486 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802434c:	42b9      	cmp	r1, r7
 802434e:	f2c0 809a 	blt.w	8024486 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024352:	3301      	adds	r3, #1
 8024354:	f100 8097 	bmi.w	8024486 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024358:	429a      	cmp	r2, r3
 802435a:	f2c0 8094 	blt.w	8024486 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802435e:	9b06      	ldr	r3, [sp, #24]
 8024360:	930b      	str	r3, [sp, #44]	; 0x2c
 8024362:	9b07      	ldr	r3, [sp, #28]
 8024364:	9309      	str	r3, [sp, #36]	; 0x24
 8024366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024368:	2b00      	cmp	r3, #0
 802436a:	f340 80b5 	ble.w	80244d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802436e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024370:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024372:	68c7      	ldr	r7, [r0, #12]
 8024374:	6892      	ldr	r2, [r2, #8]
 8024376:	ea5f 402b 	movs.w	r0, fp, asr #16
 802437a:	ea4f 4625 	mov.w	r6, r5, asr #16
 802437e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024382:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024386:	f100 80fb 	bmi.w	8024580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 802438a:	f102 3cff 	add.w	ip, r2, #4294967295
 802438e:	4560      	cmp	r0, ip
 8024390:	f280 80f6 	bge.w	8024580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8024394:	2e00      	cmp	r6, #0
 8024396:	f2c0 80f3 	blt.w	8024580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 802439a:	f107 3cff 	add.w	ip, r7, #4294967295
 802439e:	4566      	cmp	r6, ip
 80243a0:	f280 80ee 	bge.w	8024580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 80243a4:	b212      	sxth	r2, r2
 80243a6:	fb06 0002 	mla	r0, r6, r2, r0
 80243aa:	9e08      	ldr	r6, [sp, #32]
 80243ac:	1837      	adds	r7, r6, r0
 80243ae:	5c30      	ldrb	r0, [r6, r0]
 80243b0:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80243b4:	eb04 0c08 	add.w	ip, r4, r8
 80243b8:	2b00      	cmp	r3, #0
 80243ba:	f000 80d3 	beq.w	8024564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80243be:	787e      	ldrb	r6, [r7, #1]
 80243c0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80243c4:	4426      	add	r6, r4
 80243c6:	2900      	cmp	r1, #0
 80243c8:	f000 80d4 	beq.w	8024574 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 80243cc:	18b8      	adds	r0, r7, r2
 80243ce:	5cba      	ldrb	r2, [r7, r2]
 80243d0:	7840      	ldrb	r0, [r0, #1]
 80243d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80243d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80243da:	4422      	add	r2, r4
 80243dc:	4420      	add	r0, r4
 80243de:	b29b      	uxth	r3, r3
 80243e0:	b289      	uxth	r1, r1
 80243e2:	fb03 f901 	mul.w	r9, r3, r1
 80243e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80243ea:	011b      	lsls	r3, r3, #4
 80243ec:	b289      	uxth	r1, r1
 80243ee:	78b7      	ldrb	r7, [r6, #2]
 80243f0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80243f4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80243f8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80243fc:	eba3 0309 	sub.w	r3, r3, r9
 8024400:	b29b      	uxth	r3, r3
 8024402:	ebae 0e01 	sub.w	lr, lr, r1
 8024406:	fa1f fe8e 	uxth.w	lr, lr
 802440a:	435f      	muls	r7, r3
 802440c:	fb0e 770a 	mla	r7, lr, sl, r7
 8024410:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024414:	fb01 770a 	mla	r7, r1, sl, r7
 8024418:	f890 a002 	ldrb.w	sl, [r0, #2]
 802441c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024420:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024424:	f896 8000 	ldrb.w	r8, [r6]
 8024428:	7876      	ldrb	r6, [r6, #1]
 802442a:	fb03 f808 	mul.w	r8, r3, r8
 802442e:	fb0e 8807 	mla	r8, lr, r7, r8
 8024432:	7817      	ldrb	r7, [r2, #0]
 8024434:	fb01 8807 	mla	r8, r1, r7, r8
 8024438:	7807      	ldrb	r7, [r0, #0]
 802443a:	fb09 8707 	mla	r7, r9, r7, r8
 802443e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024442:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024446:	ea47 070a 	orr.w	r7, r7, sl
 802444a:	4373      	muls	r3, r6
 802444c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024450:	fb0e 330c 	mla	r3, lr, ip, r3
 8024454:	fb01 310a 	mla	r1, r1, sl, r3
 8024458:	f890 a001 	ldrb.w	sl, [r0, #1]
 802445c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802445e:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024462:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024466:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802446a:	ea47 070a 	orr.w	r7, r7, sl
 802446e:	801f      	strh	r7, [r3, #0]
 8024470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024472:	3302      	adds	r3, #2
 8024474:	9309      	str	r3, [sp, #36]	; 0x24
 8024476:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024478:	449b      	add	fp, r3
 802447a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802447c:	441d      	add	r5, r3
 802447e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024480:	3b01      	subs	r3, #1
 8024482:	930b      	str	r3, [sp, #44]	; 0x2c
 8024484:	e76f      	b.n	8024366 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024488:	449b      	add	fp, r3
 802448a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802448c:	441d      	add	r5, r3
 802448e:	9b06      	ldr	r3, [sp, #24]
 8024490:	3b01      	subs	r3, #1
 8024492:	9306      	str	r3, [sp, #24]
 8024494:	9b07      	ldr	r3, [sp, #28]
 8024496:	3302      	adds	r3, #2
 8024498:	9307      	str	r3, [sp, #28]
 802449a:	e744      	b.n	8024326 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802449c:	d023      	beq.n	80244e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802449e:	9b06      	ldr	r3, [sp, #24]
 80244a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80244a2:	3b01      	subs	r3, #1
 80244a4:	fb00 b003 	mla	r0, r0, r3, fp
 80244a8:	1400      	asrs	r0, r0, #16
 80244aa:	f53f af58 	bmi.w	802435e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80244ae:	3901      	subs	r1, #1
 80244b0:	4288      	cmp	r0, r1
 80244b2:	f6bf af54 	bge.w	802435e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80244b6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80244b8:	fb01 5303 	mla	r3, r1, r3, r5
 80244bc:	141b      	asrs	r3, r3, #16
 80244be:	f53f af4e 	bmi.w	802435e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80244c2:	3a01      	subs	r2, #1
 80244c4:	4293      	cmp	r3, r2
 80244c6:	f6bf af4a 	bge.w	802435e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80244ca:	9b06      	ldr	r3, [sp, #24]
 80244cc:	9309      	str	r3, [sp, #36]	; 0x24
 80244ce:	9b07      	ldr	r3, [sp, #28]
 80244d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80244d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	dc70      	bgt.n	80245ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80244d8:	9b06      	ldr	r3, [sp, #24]
 80244da:	9a07      	ldr	r2, [sp, #28]
 80244dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80244e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80244e4:	9307      	str	r3, [sp, #28]
 80244e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	f340 80eb 	ble.w	80246c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80244ee:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80244f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244f6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80244fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80244fc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024500:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024504:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024508:	eef0 6a48 	vmov.f32	s13, s16
 802450c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024510:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024514:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024518:	ee16 ba90 	vmov	fp, s13
 802451c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024520:	eef0 6a68 	vmov.f32	s13, s17
 8024524:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024528:	ee18 2a10 	vmov	r2, s16
 802452c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024530:	fb92 f3f3 	sdiv	r3, r2, r3
 8024534:	ee18 2a90 	vmov	r2, s17
 8024538:	9323      	str	r3, [sp, #140]	; 0x8c
 802453a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802453c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024540:	9324      	str	r3, [sp, #144]	; 0x90
 8024542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024546:	3b01      	subs	r3, #1
 8024548:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802454c:	930a      	str	r3, [sp, #40]	; 0x28
 802454e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024550:	bf08      	it	eq
 8024552:	4613      	moveq	r3, r2
 8024554:	ee16 5a90 	vmov	r5, s13
 8024558:	9306      	str	r3, [sp, #24]
 802455a:	eef0 8a67 	vmov.f32	s17, s15
 802455e:	eeb0 8a47 	vmov.f32	s16, s14
 8024562:	e6d2      	b.n	802430a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024564:	b149      	cbz	r1, 802457a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8024566:	5cba      	ldrb	r2, [r7, r2]
 8024568:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802456c:	4422      	add	r2, r4
 802456e:	4660      	mov	r0, ip
 8024570:	4666      	mov	r6, ip
 8024572:	e734      	b.n	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8024574:	4660      	mov	r0, ip
 8024576:	4662      	mov	r2, ip
 8024578:	e731      	b.n	80243de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 802457a:	4660      	mov	r0, ip
 802457c:	4662      	mov	r2, ip
 802457e:	e7f7      	b.n	8024570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8024580:	f110 0c01 	adds.w	ip, r0, #1
 8024584:	f53f af74 	bmi.w	8024470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024588:	4562      	cmp	r2, ip
 802458a:	f6ff af71 	blt.w	8024470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802458e:	f116 0c01 	adds.w	ip, r6, #1
 8024592:	f53f af6d 	bmi.w	8024470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024596:	4567      	cmp	r7, ip
 8024598:	f6ff af6a 	blt.w	8024470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802459c:	b23f      	sxth	r7, r7
 802459e:	b212      	sxth	r2, r2
 80245a0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80245a4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80245a8:	9200      	str	r2, [sp, #0]
 80245aa:	9701      	str	r7, [sp, #4]
 80245ac:	4623      	mov	r3, r4
 80245ae:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80245b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80245b4:	f7ff fdc2 	bl	802413c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80245b8:	e75a      	b.n	8024470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80245ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80245bc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80245c0:	ea4f 462b 	mov.w	r6, fp, asr #16
 80245c4:	1428      	asrs	r0, r5, #16
 80245c6:	fb02 6000 	mla	r0, r2, r0, r6
 80245ca:	9e08      	ldr	r6, [sp, #32]
 80245cc:	f816 8000 	ldrb.w	r8, [r6, r0]
 80245d0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80245d4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80245d8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80245dc:	1837      	adds	r7, r6, r0
 80245de:	eb04 0c08 	add.w	ip, r4, r8
 80245e2:	2b00      	cmp	r3, #0
 80245e4:	d060      	beq.n	80246a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80245e6:	787e      	ldrb	r6, [r7, #1]
 80245e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80245ec:	4426      	add	r6, r4
 80245ee:	2900      	cmp	r1, #0
 80245f0:	d062      	beq.n	80246b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80245f2:	18b8      	adds	r0, r7, r2
 80245f4:	5cba      	ldrb	r2, [r7, r2]
 80245f6:	7840      	ldrb	r0, [r0, #1]
 80245f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80245fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024600:	4422      	add	r2, r4
 8024602:	4420      	add	r0, r4
 8024604:	b29b      	uxth	r3, r3
 8024606:	b289      	uxth	r1, r1
 8024608:	fb03 f901 	mul.w	r9, r3, r1
 802460c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024610:	011b      	lsls	r3, r3, #4
 8024612:	b289      	uxth	r1, r1
 8024614:	78b7      	ldrb	r7, [r6, #2]
 8024616:	f89c a002 	ldrb.w	sl, [ip, #2]
 802461a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802461e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024622:	eba3 0309 	sub.w	r3, r3, r9
 8024626:	b29b      	uxth	r3, r3
 8024628:	ebae 0e01 	sub.w	lr, lr, r1
 802462c:	fa1f fe8e 	uxth.w	lr, lr
 8024630:	435f      	muls	r7, r3
 8024632:	fb0e 770a 	mla	r7, lr, sl, r7
 8024636:	f892 a002 	ldrb.w	sl, [r2, #2]
 802463a:	fb01 770a 	mla	r7, r1, sl, r7
 802463e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024642:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024646:	f814 7008 	ldrb.w	r7, [r4, r8]
 802464a:	f896 8000 	ldrb.w	r8, [r6]
 802464e:	7876      	ldrb	r6, [r6, #1]
 8024650:	fb03 f808 	mul.w	r8, r3, r8
 8024654:	fb0e 8807 	mla	r8, lr, r7, r8
 8024658:	7817      	ldrb	r7, [r2, #0]
 802465a:	fb01 8807 	mla	r8, r1, r7, r8
 802465e:	7807      	ldrb	r7, [r0, #0]
 8024660:	fb09 8707 	mla	r7, r9, r7, r8
 8024664:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024668:	4373      	muls	r3, r6
 802466a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802466e:	7856      	ldrb	r6, [r2, #1]
 8024670:	ea47 070a 	orr.w	r7, r7, sl
 8024674:	fb0e 330c 	mla	r3, lr, ip, r3
 8024678:	f890 a001 	ldrb.w	sl, [r0, #1]
 802467c:	fb01 3306 	mla	r3, r1, r6, r3
 8024680:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024684:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802468a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802468e:	ea47 070a 	orr.w	r7, r7, sl
 8024692:	f823 7b02 	strh.w	r7, [r3], #2
 8024696:	930b      	str	r3, [sp, #44]	; 0x2c
 8024698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802469a:	449b      	add	fp, r3
 802469c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802469e:	441d      	add	r5, r3
 80246a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246a2:	3b01      	subs	r3, #1
 80246a4:	9309      	str	r3, [sp, #36]	; 0x24
 80246a6:	e714      	b.n	80244d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80246a8:	b149      	cbz	r1, 80246be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80246aa:	5cba      	ldrb	r2, [r7, r2]
 80246ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246b0:	4422      	add	r2, r4
 80246b2:	4660      	mov	r0, ip
 80246b4:	4666      	mov	r6, ip
 80246b6:	e7a5      	b.n	8024604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80246b8:	4660      	mov	r0, ip
 80246ba:	4662      	mov	r2, ip
 80246bc:	e7a2      	b.n	8024604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80246be:	4660      	mov	r0, ip
 80246c0:	4662      	mov	r2, ip
 80246c2:	e7f7      	b.n	80246b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80246c4:	b00f      	add	sp, #60	; 0x3c
 80246c6:	ecbd 8b08 	vpop	{d8-d11}
 80246ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080246d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80246d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246d4:	880e      	ldrh	r6, [r1, #0]
 80246d6:	b085      	sub	sp, #20
 80246d8:	ea4f 2e26 	mov.w	lr, r6, asr #8
 80246dc:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80246e0:	4691      	mov	r9, r2
 80246e2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80246e6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80246ea:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80246ee:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80246f2:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80246f6:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80246fa:	9200      	str	r2, [sp, #0]
 80246fc:	00f6      	lsls	r6, r6, #3
 80246fe:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8024702:	9201      	str	r2, [sp, #4]
 8024704:	2c00      	cmp	r4, #0
 8024706:	b2f2      	uxtb	r2, r6
 8024708:	fb04 560c 	mla	r6, r4, ip, r5
 802470c:	9202      	str	r2, [sp, #8]
 802470e:	eb09 0e06 	add.w	lr, r9, r6
 8024712:	db3e      	blt.n	8024792 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8024714:	45a0      	cmp	r8, r4
 8024716:	dd3c      	ble.n	8024792 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8024718:	2d00      	cmp	r5, #0
 802471a:	db38      	blt.n	802478e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802471c:	45ac      	cmp	ip, r5
 802471e:	dd36      	ble.n	802478e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024720:	f819 2006 	ldrb.w	r2, [r9, r6]
 8024724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024728:	1c6e      	adds	r6, r5, #1
 802472a:	d435      	bmi.n	8024798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 802472c:	45b4      	cmp	ip, r6
 802472e:	dd33      	ble.n	8024798 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8024730:	b3a0      	cbz	r0, 802479c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8024732:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024736:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802473a:	3401      	adds	r4, #1
 802473c:	d432      	bmi.n	80247a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 802473e:	45a0      	cmp	r8, r4
 8024740:	dd30      	ble.n	80247a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8024742:	b397      	cbz	r7, 80247aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8024744:	2d00      	cmp	r5, #0
 8024746:	db2b      	blt.n	80247a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8024748:	45ac      	cmp	ip, r5
 802474a:	dd29      	ble.n	80247a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 802474c:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024750:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024754:	3501      	adds	r5, #1
 8024756:	d42b      	bmi.n	80247b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8024758:	45ac      	cmp	ip, r5
 802475a:	dd29      	ble.n	80247b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 802475c:	b350      	cbz	r0, 80247b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 802475e:	44f4      	add	ip, lr
 8024760:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024764:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024768:	280f      	cmp	r0, #15
 802476a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802476e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024772:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024776:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802477a:	d801      	bhi.n	8024780 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 802477c:	2f0f      	cmp	r7, #15
 802477e:	d91b      	bls.n	80247b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8024780:	4b84      	ldr	r3, [pc, #528]	; (8024994 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8024782:	4a85      	ldr	r2, [pc, #532]	; (8024998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8024784:	4885      	ldr	r0, [pc, #532]	; (802499c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8024786:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 802478a:	f007 ff67 	bl	802c65c <__assert_func>
 802478e:	2200      	movs	r2, #0
 8024790:	e7ca      	b.n	8024728 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 8024792:	2600      	movs	r6, #0
 8024794:	4632      	mov	r2, r6
 8024796:	e7d0      	b.n	802473a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8024798:	2600      	movs	r6, #0
 802479a:	e7ce      	b.n	802473a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 802479c:	4606      	mov	r6, r0
 802479e:	e7cc      	b.n	802473a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 80247a0:	2400      	movs	r4, #0
 80247a2:	e7d7      	b.n	8024754 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 80247a4:	2300      	movs	r3, #0
 80247a6:	461c      	mov	r4, r3
 80247a8:	e7de      	b.n	8024768 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80247aa:	463b      	mov	r3, r7
 80247ac:	463c      	mov	r4, r7
 80247ae:	e7db      	b.n	8024768 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80247b0:	2300      	movs	r3, #0
 80247b2:	e7d9      	b.n	8024768 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80247b4:	4603      	mov	r3, r0
 80247b6:	e7d7      	b.n	8024768 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80247b8:	b280      	uxth	r0, r0
 80247ba:	b2bf      	uxth	r7, r7
 80247bc:	fb00 fe07 	mul.w	lr, r0, r7
 80247c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80247c4:	0100      	lsls	r0, r0, #4
 80247c6:	eba0 0c0e 	sub.w	ip, r0, lr
 80247ca:	b2bf      	uxth	r7, r7
 80247cc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80247d0:	fa1f fc8c 	uxth.w	ip, ip
 80247d4:	1bed      	subs	r5, r5, r7
 80247d6:	b2ad      	uxth	r5, r5
 80247d8:	fb0c f00a 	mul.w	r0, ip, sl
 80247dc:	fb05 000b 	mla	r0, r5, fp, r0
 80247e0:	fb07 0009 	mla	r0, r7, r9, r0
 80247e4:	fb0e 0008 	mla	r0, lr, r8, r0
 80247e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247ec:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80247f0:	9003      	str	r0, [sp, #12]
 80247f2:	d018      	beq.n	8024826 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x156>
 80247f4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80247f8:	fb0b f000 	mul.w	r0, fp, r0
 80247fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024800:	fb0b fb02 	mul.w	fp, fp, r2
 8024804:	0a02      	lsrs	r2, r0, #8
 8024806:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802480a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802480e:	4402      	add	r2, r0
 8024810:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024814:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024818:	0a12      	lsrs	r2, r2, #8
 802481a:	0a00      	lsrs	r0, r0, #8
 802481c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024820:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024824:	4302      	orrs	r2, r0
 8024826:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802482a:	d019      	beq.n	8024860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x190>
 802482c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024830:	fb0a fb0b 	mul.w	fp, sl, fp
 8024834:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024838:	fb0a fa06 	mul.w	sl, sl, r6
 802483c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024840:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024844:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024848:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802484c:	445e      	add	r6, fp
 802484e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024852:	0a36      	lsrs	r6, r6, #8
 8024854:	0a00      	lsrs	r0, r0, #8
 8024856:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802485a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802485e:	4306      	orrs	r6, r0
 8024860:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024864:	d019      	beq.n	802489a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ca>
 8024866:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802486a:	fb09 fa0a 	mul.w	sl, r9, sl
 802486e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024872:	fb09 f904 	mul.w	r9, r9, r4
 8024876:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802487a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802487e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024882:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8024886:	4454      	add	r4, sl
 8024888:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802488c:	0a24      	lsrs	r4, r4, #8
 802488e:	0a00      	lsrs	r0, r0, #8
 8024890:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024894:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024898:	4304      	orrs	r4, r0
 802489a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802489e:	d019      	beq.n	80248d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x204>
 80248a0:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80248a4:	fb08 f909 	mul.w	r9, r8, r9
 80248a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248ac:	fb08 f803 	mul.w	r8, r8, r3
 80248b0:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80248b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248b8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80248bc:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80248c0:	444b      	add	r3, r9
 80248c2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80248c6:	0a1b      	lsrs	r3, r3, #8
 80248c8:	0a00      	lsrs	r0, r0, #8
 80248ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248ce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80248d2:	4303      	orrs	r3, r0
 80248d4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80248d8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80248dc:	fb0c f808 	mul.w	r8, ip, r8
 80248e0:	fb05 8800 	mla	r8, r5, r0, r8
 80248e4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80248e8:	fb07 8800 	mla	r8, r7, r0, r8
 80248ec:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80248f0:	fb0e 8000 	mla	r0, lr, r0, r8
 80248f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80248f8:	fb0c f606 	mul.w	r6, ip, r6
 80248fc:	0a00      	lsrs	r0, r0, #8
 80248fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024902:	fb05 6202 	mla	r2, r5, r2, r6
 8024906:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802490a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802490e:	fb07 2700 	mla	r7, r7, r0, r2
 8024912:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024916:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802491a:	9c03      	ldr	r4, [sp, #12]
 802491c:	9e01      	ldr	r6, [sp, #4]
 802491e:	b29b      	uxth	r3, r3
 8024920:	435c      	muls	r4, r3
 8024922:	fb0e 7000 	mla	r0, lr, r0, r7
 8024926:	1c62      	adds	r2, r4, #1
 8024928:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802492c:	0a00      	lsrs	r0, r0, #8
 802492e:	9c00      	ldr	r4, [sp, #0]
 8024930:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024934:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8024938:	ea48 0000 	orr.w	r0, r8, r0
 802493c:	b2d2      	uxtb	r2, r2
 802493e:	fb14 f402 	smulbb	r4, r4, r2
 8024942:	0c05      	lsrs	r5, r0, #16
 8024944:	fb05 4503 	mla	r5, r5, r3, r4
 8024948:	fb16 f602 	smulbb	r6, r6, r2
 802494c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8024950:	fb04 6403 	mla	r4, r4, r3, r6
 8024954:	9e02      	ldr	r6, [sp, #8]
 8024956:	b2c0      	uxtb	r0, r0
 8024958:	fb16 f202 	smulbb	r2, r6, r2
 802495c:	fb00 2303 	mla	r3, r0, r3, r2
 8024960:	b2ad      	uxth	r5, r5
 8024962:	b298      	uxth	r0, r3
 8024964:	1c43      	adds	r3, r0, #1
 8024966:	1c6a      	adds	r2, r5, #1
 8024968:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802496c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8024970:	b2a4      	uxth	r4, r4
 8024972:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024976:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802497a:	4313      	orrs	r3, r2
 802497c:	1c62      	adds	r2, r4, #1
 802497e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024982:	0952      	lsrs	r2, r2, #5
 8024984:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024988:	4313      	orrs	r3, r2
 802498a:	800b      	strh	r3, [r1, #0]
 802498c:	b005      	add	sp, #20
 802498e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024992:	bf00      	nop
 8024994:	080315e5 	.word	0x080315e5
 8024998:	08031bae 	.word	0x08031bae
 802499c:	08031669 	.word	0x08031669

080249a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80249a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249a4:	ed2d 8b08 	vpush	{d8-d11}
 80249a8:	b09f      	sub	sp, #124	; 0x7c
 80249aa:	eeb0 aa40 	vmov.f32	s20, s0
 80249ae:	921b      	str	r2, [sp, #108]	; 0x6c
 80249b0:	9309      	str	r3, [sp, #36]	; 0x24
 80249b2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80249b4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80249b8:	931c      	str	r3, [sp, #112]	; 0x70
 80249ba:	9119      	str	r1, [sp, #100]	; 0x64
 80249bc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80249c0:	901d      	str	r0, [sp, #116]	; 0x74
 80249c2:	6850      	ldr	r0, [r2, #4]
 80249c4:	6812      	ldr	r2, [r2, #0]
 80249c6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80249c8:	fb00 1303 	mla	r3, r0, r3, r1
 80249cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80249d0:	930c      	str	r3, [sp, #48]	; 0x30
 80249d2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80249d4:	681b      	ldr	r3, [r3, #0]
 80249d6:	9312      	str	r3, [sp, #72]	; 0x48
 80249d8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80249da:	685e      	ldr	r6, [r3, #4]
 80249dc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80249e0:	930d      	str	r3, [sp, #52]	; 0x34
 80249e2:	eef0 9a60 	vmov.f32	s19, s1
 80249e6:	eeb0 9a41 	vmov.f32	s18, s2
 80249ea:	eeb0 8a62 	vmov.f32	s16, s5
 80249ee:	eef0 8a43 	vmov.f32	s17, s6
 80249f2:	eef0 ba44 	vmov.f32	s23, s8
 80249f6:	eeb0 ba64 	vmov.f32	s22, s9
 80249fa:	eef0 aa45 	vmov.f32	s21, s10
 80249fe:	3604      	adds	r6, #4
 8024a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	dc03      	bgt.n	8024a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024a06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	f340 8388 	ble.w	802511e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024a0e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024a10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a14:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a18:	1e48      	subs	r0, r1, #1
 8024a1a:	1e57      	subs	r7, r2, #1
 8024a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	f340 8195 	ble.w	8024d4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024a24:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024a26:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024a2a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024a2e:	d406      	bmi.n	8024a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a30:	4584      	cmp	ip, r0
 8024a32:	da04      	bge.n	8024a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	db02      	blt.n	8024a3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a38:	42bb      	cmp	r3, r7
 8024a3a:	f2c0 8189 	blt.w	8024d50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024a3e:	f11c 0c01 	adds.w	ip, ip, #1
 8024a42:	f100 8177 	bmi.w	8024d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024a46:	4561      	cmp	r1, ip
 8024a48:	f2c0 8174 	blt.w	8024d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024a4c:	3301      	adds	r3, #1
 8024a4e:	f100 8171 	bmi.w	8024d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024a52:	429a      	cmp	r2, r3
 8024a54:	f2c0 816e 	blt.w	8024d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8024a5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024a60:	2b00      	cmp	r3, #0
 8024a62:	f340 8193 	ble.w	8024d8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024a66:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024a68:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024a6c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024a6e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024a72:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024a74:	141b      	asrs	r3, r3, #16
 8024a76:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024a7a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024a7e:	f100 81d6 	bmi.w	8024e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024a82:	f100 38ff 	add.w	r8, r0, #4294967295
 8024a86:	4543      	cmp	r3, r8
 8024a88:	f280 81d1 	bge.w	8024e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024a8c:	f1bc 0f00 	cmp.w	ip, #0
 8024a90:	f2c0 81cd 	blt.w	8024e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024a94:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024a98:	45c4      	cmp	ip, r8
 8024a9a:	f280 81c8 	bge.w	8024e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024a9e:	b200      	sxth	r0, r0
 8024aa0:	fb0c 3300 	mla	r3, ip, r0, r3
 8024aa4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024aa6:	eb04 0803 	add.w	r8, r4, r3
 8024aaa:	5ce3      	ldrb	r3, [r4, r3]
 8024aac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024ab0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024ab4:	2a00      	cmp	r2, #0
 8024ab6:	f000 81af 	beq.w	8024e18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8024aba:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024abe:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024ac2:	940e      	str	r4, [sp, #56]	; 0x38
 8024ac4:	0e24      	lsrs	r4, r4, #24
 8024ac6:	9415      	str	r4, [sp, #84]	; 0x54
 8024ac8:	b179      	cbz	r1, 8024aea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024aca:	eb08 0c00 	add.w	ip, r8, r0
 8024ace:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024ad2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024ad6:	900a      	str	r0, [sp, #40]	; 0x28
 8024ad8:	0e00      	lsrs	r0, r0, #24
 8024ada:	9013      	str	r0, [sp, #76]	; 0x4c
 8024adc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024ae0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024ae4:	900f      	str	r0, [sp, #60]	; 0x3c
 8024ae6:	0e00      	lsrs	r0, r0, #24
 8024ae8:	9016      	str	r0, [sp, #88]	; 0x58
 8024aea:	b292      	uxth	r2, r2
 8024aec:	b289      	uxth	r1, r1
 8024aee:	fb02 f901 	mul.w	r9, r2, r1
 8024af2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024af6:	0112      	lsls	r2, r2, #4
 8024af8:	eba2 0809 	sub.w	r8, r2, r9
 8024afc:	b289      	uxth	r1, r1
 8024afe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024b02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024b04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024b06:	fa1f f888 	uxth.w	r8, r8
 8024b0a:	1a52      	subs	r2, r2, r1
 8024b0c:	b292      	uxth	r2, r2
 8024b0e:	fb08 f000 	mul.w	r0, r8, r0
 8024b12:	fb02 000e 	mla	r0, r2, lr, r0
 8024b16:	fb01 0004 	mla	r0, r1, r4, r0
 8024b1a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024b1c:	fb09 0004 	mla	r0, r9, r4, r0
 8024b20:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024b24:	2800      	cmp	r0, #0
 8024b26:	f000 80fa 	beq.w	8024d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024b2a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024b2e:	d01b      	beq.n	8024b68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024b30:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024b34:	fb0e fa0a 	mul.w	sl, lr, sl
 8024b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b3c:	fb0e fe03 	mul.w	lr, lr, r3
 8024b40:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024b44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b4c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024b50:	4453      	add	r3, sl
 8024b52:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024b56:	0a1b      	lsrs	r3, r3, #8
 8024b58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b60:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024b64:	ea43 030c 	orr.w	r3, r3, ip
 8024b68:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024b6a:	2cff      	cmp	r4, #255	; 0xff
 8024b6c:	d021      	beq.n	8024bb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024b6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024b70:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024b74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024b76:	fb04 fb0b 	mul.w	fp, r4, fp
 8024b7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024b7c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024b80:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024b82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024b86:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024b8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b92:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024b96:	44de      	add	lr, fp
 8024b98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024b9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ba4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ba8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024bac:	ea4e 040a 	orr.w	r4, lr, sl
 8024bb0:	940e      	str	r4, [sp, #56]	; 0x38
 8024bb2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024bb4:	2cff      	cmp	r4, #255	; 0xff
 8024bb6:	d021      	beq.n	8024bfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8024bb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024bba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024bbe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024bc0:	fb04 fb0b 	mul.w	fp, r4, fp
 8024bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024bc6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024bca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024bcc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024bd0:	fb04 fa0a 	mul.w	sl, r4, sl
 8024bd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024bd8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024bdc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024be0:	44de      	add	lr, fp
 8024be2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024be6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024bea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024bee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024bf2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024bf6:	ea4e 040a 	orr.w	r4, lr, sl
 8024bfa:	940a      	str	r4, [sp, #40]	; 0x28
 8024bfc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024bfe:	2cff      	cmp	r4, #255	; 0xff
 8024c00:	d021      	beq.n	8024c46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024c02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c04:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024c08:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c0a:	fb04 fb0b 	mul.w	fp, r4, fp
 8024c0e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c14:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c16:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c26:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c2a:	44de      	add	lr, fp
 8024c2c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c40:	ea4e 040a 	orr.w	r4, lr, sl
 8024c44:	940f      	str	r4, [sp, #60]	; 0x3c
 8024c46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c48:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024c4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c4e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024c52:	fb08 fc0c 	mul.w	ip, r8, ip
 8024c56:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024c5a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024c5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c60:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024c64:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024c68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c6a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024c6e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024c72:	fb08 f80e 	mul.w	r8, r8, lr
 8024c76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c7a:	fb02 8303 	mla	r3, r2, r3, r8
 8024c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024c82:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024c86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024c88:	fb01 330a 	mla	r3, r1, sl, r3
 8024c8c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024c92:	fb09 3901 	mla	r9, r9, r1, r3
 8024c96:	4342      	muls	r2, r0
 8024c98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024ca0:	883b      	ldrh	r3, [r7, #0]
 8024ca2:	1c50      	adds	r0, r2, #1
 8024ca4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ca8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024cac:	ea4c 0c09 	orr.w	ip, ip, r9
 8024cb0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024cb4:	1219      	asrs	r1, r3, #8
 8024cb6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024cba:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024cbe:	b2c0      	uxtb	r0, r0
 8024cc0:	fb12 f204 	smulbb	r2, r2, r4
 8024cc4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024cc8:	fb01 2100 	mla	r1, r1, r0, r2
 8024ccc:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024cd0:	10da      	asrs	r2, r3, #3
 8024cd2:	fa5f fc8c 	uxtb.w	ip, ip
 8024cd6:	00db      	lsls	r3, r3, #3
 8024cd8:	fb1c fc04 	smulbb	ip, ip, r4
 8024cdc:	b2db      	uxtb	r3, r3
 8024cde:	b289      	uxth	r1, r1
 8024ce0:	fb03 c300 	mla	r3, r3, r0, ip
 8024ce4:	fa1f fc83 	uxth.w	ip, r3
 8024ce8:	1c4b      	adds	r3, r1, #1
 8024cea:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024cee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024cf2:	fb1e fe04 	smulbb	lr, lr, r4
 8024cf6:	f10c 0301 	add.w	r3, ip, #1
 8024cfa:	fb02 e200 	mla	r2, r2, r0, lr
 8024cfe:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024d02:	b292      	uxth	r2, r2
 8024d04:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024d08:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024d0c:	430b      	orrs	r3, r1
 8024d0e:	1c51      	adds	r1, r2, #1
 8024d10:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024d14:	0952      	lsrs	r2, r2, #5
 8024d16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024d1a:	4313      	orrs	r3, r2
 8024d1c:	803b      	strh	r3, [r7, #0]
 8024d1e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024d20:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024d22:	441a      	add	r2, r3
 8024d24:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024d26:	9231      	str	r2, [sp, #196]	; 0xc4
 8024d28:	441d      	add	r5, r3
 8024d2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024d2c:	3b01      	subs	r3, #1
 8024d2e:	3702      	adds	r7, #2
 8024d30:	931a      	str	r3, [sp, #104]	; 0x68
 8024d32:	e694      	b.n	8024a5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024d34:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024d36:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024d38:	441c      	add	r4, r3
 8024d3a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024d3c:	9431      	str	r4, [sp, #196]	; 0xc4
 8024d3e:	441d      	add	r5, r3
 8024d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d42:	3b01      	subs	r3, #1
 8024d44:	9309      	str	r3, [sp, #36]	; 0x24
 8024d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d48:	3302      	adds	r3, #2
 8024d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8024d4c:	e666      	b.n	8024a1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024d4e:	d024      	beq.n	8024d9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fa>
 8024d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d52:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8024d54:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024d56:	3b01      	subs	r3, #1
 8024d58:	fb00 4003 	mla	r0, r0, r3, r4
 8024d5c:	1400      	asrs	r0, r0, #16
 8024d5e:	f53f ae7b 	bmi.w	8024a58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024d62:	3901      	subs	r1, #1
 8024d64:	4288      	cmp	r0, r1
 8024d66:	f6bf ae77 	bge.w	8024a58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024d6a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8024d6c:	fb01 5303 	mla	r3, r1, r3, r5
 8024d70:	141b      	asrs	r3, r3, #16
 8024d72:	f53f ae71 	bmi.w	8024a58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024d76:	3a01      	subs	r2, #1
 8024d78:	4293      	cmp	r3, r2
 8024d7a:	f6bf ae6d 	bge.w	8024a58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024d7e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024d82:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024d86:	f1bb 0f00 	cmp.w	fp, #0
 8024d8a:	dc70      	bgt.n	8024e6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d8e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d94:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024d98:	930c      	str	r3, [sp, #48]	; 0x30
 8024d9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	f340 81be 	ble.w	802511e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024da2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024daa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024dae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024db0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024db4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024db8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024dbc:	eef0 6a48 	vmov.f32	s13, s16
 8024dc0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024dc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024dc8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024dcc:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8024dd0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024dd4:	eef0 6a68 	vmov.f32	s13, s17
 8024dd8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ddc:	ee18 2a10 	vmov	r2, s16
 8024de0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024de8:	ee18 2a90 	vmov	r2, s17
 8024dec:	9333      	str	r3, [sp, #204]	; 0xcc
 8024dee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024df0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024df4:	9334      	str	r3, [sp, #208]	; 0xd0
 8024df6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024df8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024dfa:	3b01      	subs	r3, #1
 8024dfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e00:	9319      	str	r3, [sp, #100]	; 0x64
 8024e02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024e04:	bf08      	it	eq
 8024e06:	4613      	moveq	r3, r2
 8024e08:	ee16 5a90 	vmov	r5, s13
 8024e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8024e0e:	eef0 8a67 	vmov.f32	s17, s15
 8024e12:	eeb0 8a47 	vmov.f32	s16, s14
 8024e16:	e5f3      	b.n	8024a00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024e18:	2900      	cmp	r1, #0
 8024e1a:	f43f ae66 	beq.w	8024aea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024e1e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024e22:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024e26:	900a      	str	r0, [sp, #40]	; 0x28
 8024e28:	0e00      	lsrs	r0, r0, #24
 8024e2a:	9013      	str	r0, [sp, #76]	; 0x4c
 8024e2c:	e65d      	b.n	8024aea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024e2e:	f113 0801 	adds.w	r8, r3, #1
 8024e32:	f53f af74 	bmi.w	8024d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024e36:	4540      	cmp	r0, r8
 8024e38:	f6ff af71 	blt.w	8024d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024e3c:	f11c 0801 	adds.w	r8, ip, #1
 8024e40:	f53f af6d 	bmi.w	8024d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024e44:	45c6      	cmp	lr, r8
 8024e46:	f6ff af6a 	blt.w	8024d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024e4a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024e4c:	9302      	str	r3, [sp, #8]
 8024e4e:	b200      	sxth	r0, r0
 8024e50:	fa0f f38e 	sxth.w	r3, lr
 8024e54:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024e58:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024e5c:	9301      	str	r3, [sp, #4]
 8024e5e:	9000      	str	r0, [sp, #0]
 8024e60:	4633      	mov	r3, r6
 8024e62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024e64:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024e66:	4639      	mov	r1, r7
 8024e68:	f7ff fc32 	bl	80246d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024e6c:	e757      	b.n	8024d1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024e6e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024e70:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024e72:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024e76:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024e78:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024e7c:	1427      	asrs	r7, r4, #16
 8024e7e:	142b      	asrs	r3, r5, #16
 8024e80:	fb01 7303 	mla	r3, r1, r3, r7
 8024e84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024e86:	18e7      	adds	r7, r4, r3
 8024e88:	5ce3      	ldrb	r3, [r4, r3]
 8024e8a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024e8e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024e92:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024e96:	2a00      	cmp	r2, #0
 8024e98:	f000 8137 	beq.w	802510a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 8024e9c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024ea0:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024ea4:	9410      	str	r4, [sp, #64]	; 0x40
 8024ea6:	0e24      	lsrs	r4, r4, #24
 8024ea8:	9417      	str	r4, [sp, #92]	; 0x5c
 8024eaa:	b170      	cbz	r0, 8024eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8024eac:	eb07 0e01 	add.w	lr, r7, r1
 8024eb0:	5c79      	ldrb	r1, [r7, r1]
 8024eb2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024eb6:	910b      	str	r1, [sp, #44]	; 0x2c
 8024eb8:	0e09      	lsrs	r1, r1, #24
 8024eba:	9114      	str	r1, [sp, #80]	; 0x50
 8024ebc:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024ec0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024ec4:	9111      	str	r1, [sp, #68]	; 0x44
 8024ec6:	0e09      	lsrs	r1, r1, #24
 8024ec8:	9118      	str	r1, [sp, #96]	; 0x60
 8024eca:	b292      	uxth	r2, r2
 8024ecc:	b280      	uxth	r0, r0
 8024ece:	fb02 f800 	mul.w	r8, r2, r0
 8024ed2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024ed6:	0112      	lsls	r2, r2, #4
 8024ed8:	eba2 0e08 	sub.w	lr, r2, r8
 8024edc:	b280      	uxth	r0, r0
 8024ede:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024ee2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024ee4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024ee6:	fa1f fe8e 	uxth.w	lr, lr
 8024eea:	1a12      	subs	r2, r2, r0
 8024eec:	b292      	uxth	r2, r2
 8024eee:	fb0e f101 	mul.w	r1, lr, r1
 8024ef2:	fb02 110c 	mla	r1, r2, ip, r1
 8024ef6:	fb00 1104 	mla	r1, r0, r4, r1
 8024efa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024efc:	fb08 1104 	mla	r1, r8, r4, r1
 8024f00:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024f04:	2900      	cmp	r1, #0
 8024f06:	f000 80f5 	beq.w	80250f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8024f0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024f0e:	d019      	beq.n	8024f44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8024f10:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024f14:	fb0c fa0a 	mul.w	sl, ip, sl
 8024f18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f1c:	fb0c fc03 	mul.w	ip, ip, r3
 8024f20:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024f24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024f28:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024f2c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024f30:	4453      	add	r3, sl
 8024f32:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024f36:	0a1b      	lsrs	r3, r3, #8
 8024f38:	0a3f      	lsrs	r7, r7, #8
 8024f3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024f3e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024f42:	433b      	orrs	r3, r7
 8024f44:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024f46:	2cff      	cmp	r4, #255	; 0xff
 8024f48:	d020      	beq.n	8024f8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8024f4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024f4c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024f50:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024f52:	4367      	muls	r7, r4
 8024f54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024f56:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024f5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024f5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024f60:	fb04 fa0a 	mul.w	sl, r4, sl
 8024f64:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024f68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f6c:	44bc      	add	ip, r7
 8024f6e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024f72:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024f76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f86:	ea4c 040a 	orr.w	r4, ip, sl
 8024f8a:	9410      	str	r4, [sp, #64]	; 0x40
 8024f8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f8e:	2cff      	cmp	r4, #255	; 0xff
 8024f90:	d020      	beq.n	8024fd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8024f92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f94:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024f98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f9a:	4367      	muls	r7, r4
 8024f9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f9e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024fa2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024fa4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024fa8:	fb04 fa0a 	mul.w	sl, r4, sl
 8024fac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024fb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fb4:	44bc      	add	ip, r7
 8024fb6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024fba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024fbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024fc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024fce:	ea4c 040a 	orr.w	r4, ip, sl
 8024fd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8024fd4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024fd6:	2cff      	cmp	r4, #255	; 0xff
 8024fd8:	d020      	beq.n	802501c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67c>
 8024fda:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024fdc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024fe0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024fe2:	4367      	muls	r7, r4
 8024fe4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024fe6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024fea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024fec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024ff0:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ff4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024ff8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ffc:	44bc      	add	ip, r7
 8024ffe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025002:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025006:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802500a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802500e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025012:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025016:	ea4c 040a 	orr.w	r4, ip, sl
 802501a:	9411      	str	r4, [sp, #68]	; 0x44
 802501c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802501e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025022:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025024:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025028:	fb0e f707 	mul.w	r7, lr, r7
 802502c:	fb02 770c 	mla	r7, r2, ip, r7
 8025030:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025034:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025036:	fb00 770c 	mla	r7, r0, ip, r7
 802503a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802503e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025040:	fb08 770c 	mla	r7, r8, ip, r7
 8025044:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025048:	fb0e fe0c 	mul.w	lr, lr, ip
 802504c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025050:	fb02 e303 	mla	r3, r2, r3, lr
 8025054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025056:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025058:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802505c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802505e:	fb00 330a 	mla	r3, r0, sl, r3
 8025062:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025066:	fb08 3c0c 	mla	ip, r8, ip, r3
 802506a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802506c:	f8b9 0000 	ldrh.w	r0, [r9]
 8025070:	434b      	muls	r3, r1
 8025072:	0a3f      	lsrs	r7, r7, #8
 8025074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025078:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802507c:	1c59      	adds	r1, r3, #1
 802507e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025082:	ea47 070c 	orr.w	r7, r7, ip
 8025086:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802508a:	1202      	asrs	r2, r0, #8
 802508c:	0c3b      	lsrs	r3, r7, #16
 802508e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025092:	b2c9      	uxtb	r1, r1
 8025094:	fb13 f304 	smulbb	r3, r3, r4
 8025098:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802509c:	fb02 3201 	mla	r2, r2, r1, r3
 80250a0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80250a4:	10c3      	asrs	r3, r0, #3
 80250a6:	b2ff      	uxtb	r7, r7
 80250a8:	00c0      	lsls	r0, r0, #3
 80250aa:	b292      	uxth	r2, r2
 80250ac:	fb1c fc04 	smulbb	ip, ip, r4
 80250b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80250b4:	b2c0      	uxtb	r0, r0
 80250b6:	fb17 f704 	smulbb	r7, r7, r4
 80250ba:	fb03 c301 	mla	r3, r3, r1, ip
 80250be:	fb00 7001 	mla	r0, r0, r1, r7
 80250c2:	f102 0c01 	add.w	ip, r2, #1
 80250c6:	b280      	uxth	r0, r0
 80250c8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80250cc:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80250d0:	1c42      	adds	r2, r0, #1
 80250d2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80250d6:	b29b      	uxth	r3, r3
 80250d8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80250dc:	ea42 020c 	orr.w	r2, r2, ip
 80250e0:	f103 0c01 	add.w	ip, r3, #1
 80250e4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80250e8:	095b      	lsrs	r3, r3, #5
 80250ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80250ee:	431a      	orrs	r2, r3
 80250f0:	f8a9 2000 	strh.w	r2, [r9]
 80250f4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80250f6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80250f8:	441a      	add	r2, r3
 80250fa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250fc:	9231      	str	r2, [sp, #196]	; 0xc4
 80250fe:	f109 0902 	add.w	r9, r9, #2
 8025102:	441d      	add	r5, r3
 8025104:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025108:	e63d      	b.n	8024d86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802510a:	2800      	cmp	r0, #0
 802510c:	f43f aedd 	beq.w	8024eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8025110:	5c79      	ldrb	r1, [r7, r1]
 8025112:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025116:	910b      	str	r1, [sp, #44]	; 0x2c
 8025118:	0e09      	lsrs	r1, r1, #24
 802511a:	9114      	str	r1, [sp, #80]	; 0x50
 802511c:	e6d5      	b.n	8024eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802511e:	b01f      	add	sp, #124	; 0x7c
 8025120:	ecbd 8b08 	vpop	{d8-d11}
 8025124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802512c:	880e      	ldrh	r6, [r1, #0]
 802512e:	b085      	sub	sp, #20
 8025130:	ea4f 2826 	mov.w	r8, r6, asr #8
 8025134:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8025138:	4691      	mov	r9, r2
 802513a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802513e:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8025142:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025146:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802514a:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 802514e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8025152:	9200      	str	r2, [sp, #0]
 8025154:	00f6      	lsls	r6, r6, #3
 8025156:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 802515a:	9201      	str	r2, [sp, #4]
 802515c:	2c00      	cmp	r4, #0
 802515e:	b2f2      	uxtb	r2, r6
 8025160:	fb04 560c 	mla	r6, r4, ip, r5
 8025164:	9202      	str	r2, [sp, #8]
 8025166:	eb09 0806 	add.w	r8, r9, r6
 802516a:	db3f      	blt.n	80251ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 802516c:	45a6      	cmp	lr, r4
 802516e:	dd3d      	ble.n	80251ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025170:	2d00      	cmp	r5, #0
 8025172:	db39      	blt.n	80251e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025174:	45ac      	cmp	ip, r5
 8025176:	dd37      	ble.n	80251e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025178:	f819 2006 	ldrb.w	r2, [r9, r6]
 802517c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025180:	1c6e      	adds	r6, r5, #1
 8025182:	d436      	bmi.n	80251f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025184:	45b4      	cmp	ip, r6
 8025186:	dd34      	ble.n	80251f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025188:	b3a8      	cbz	r0, 80251f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 802518a:	f898 6001 	ldrb.w	r6, [r8, #1]
 802518e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025192:	3401      	adds	r4, #1
 8025194:	d433      	bmi.n	80251fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025196:	45a6      	cmp	lr, r4
 8025198:	dd31      	ble.n	80251fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 802519a:	b39f      	cbz	r7, 8025204 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 802519c:	2d00      	cmp	r5, #0
 802519e:	eb08 0e0c 	add.w	lr, r8, ip
 80251a2:	db2a      	blt.n	80251fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80251a4:	45ac      	cmp	ip, r5
 80251a6:	dd28      	ble.n	80251fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80251a8:	f818 400c 	ldrb.w	r4, [r8, ip]
 80251ac:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80251b0:	3501      	adds	r5, #1
 80251b2:	d42a      	bmi.n	802520a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80251b4:	45ac      	cmp	ip, r5
 80251b6:	dd28      	ble.n	802520a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80251b8:	b348      	cbz	r0, 802520e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 80251ba:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80251be:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80251c2:	280f      	cmp	r0, #15
 80251c4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80251c8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80251cc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80251d0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80251d4:	d801      	bhi.n	80251da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 80251d6:	2f0f      	cmp	r7, #15
 80251d8:	d91b      	bls.n	8025212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 80251da:	4b7d      	ldr	r3, [pc, #500]	; (80253d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 80251dc:	4a7d      	ldr	r2, [pc, #500]	; (80253d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80251de:	487e      	ldr	r0, [pc, #504]	; (80253d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80251e0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80251e4:	f007 fa3a 	bl	802c65c <__assert_func>
 80251e8:	2200      	movs	r2, #0
 80251ea:	e7c9      	b.n	8025180 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 80251ec:	2600      	movs	r6, #0
 80251ee:	4632      	mov	r2, r6
 80251f0:	e7cf      	b.n	8025192 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80251f2:	2600      	movs	r6, #0
 80251f4:	e7cd      	b.n	8025192 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80251f6:	4606      	mov	r6, r0
 80251f8:	e7cb      	b.n	8025192 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80251fa:	2400      	movs	r4, #0
 80251fc:	e7d8      	b.n	80251b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 80251fe:	2300      	movs	r3, #0
 8025200:	461c      	mov	r4, r3
 8025202:	e7de      	b.n	80251c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025204:	463b      	mov	r3, r7
 8025206:	463c      	mov	r4, r7
 8025208:	e7db      	b.n	80251c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802520a:	2300      	movs	r3, #0
 802520c:	e7d9      	b.n	80251c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802520e:	4603      	mov	r3, r0
 8025210:	e7d7      	b.n	80251c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025212:	b280      	uxth	r0, r0
 8025214:	b2bf      	uxth	r7, r7
 8025216:	fb00 fe07 	mul.w	lr, r0, r7
 802521a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802521e:	0100      	lsls	r0, r0, #4
 8025220:	eba0 0c0e 	sub.w	ip, r0, lr
 8025224:	b2bf      	uxth	r7, r7
 8025226:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802522a:	fa1f fc8c 	uxth.w	ip, ip
 802522e:	1bed      	subs	r5, r5, r7
 8025230:	b2ad      	uxth	r5, r5
 8025232:	fb0c f00a 	mul.w	r0, ip, sl
 8025236:	fb05 000b 	mla	r0, r5, fp, r0
 802523a:	fb07 0009 	mla	r0, r7, r9, r0
 802523e:	fb0e 0008 	mla	r0, lr, r8, r0
 8025242:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025246:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802524a:	9003      	str	r0, [sp, #12]
 802524c:	d018      	beq.n	8025280 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x158>
 802524e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025252:	fb0b f000 	mul.w	r0, fp, r0
 8025256:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802525a:	fb0b fb02 	mul.w	fp, fp, r2
 802525e:	0a02      	lsrs	r2, r0, #8
 8025260:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025264:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025268:	4402      	add	r2, r0
 802526a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802526e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025272:	0a12      	lsrs	r2, r2, #8
 8025274:	0a00      	lsrs	r0, r0, #8
 8025276:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802527a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802527e:	4302      	orrs	r2, r0
 8025280:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025284:	d019      	beq.n	80252ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x192>
 8025286:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802528a:	fb0a fb0b 	mul.w	fp, sl, fp
 802528e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025292:	fb0a fa06 	mul.w	sl, sl, r6
 8025296:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802529a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802529e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80252a2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80252a6:	445e      	add	r6, fp
 80252a8:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80252ac:	0a36      	lsrs	r6, r6, #8
 80252ae:	0a00      	lsrs	r0, r0, #8
 80252b0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80252b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80252b8:	4306      	orrs	r6, r0
 80252ba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80252be:	d019      	beq.n	80252f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1cc>
 80252c0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80252c4:	fb09 fa0a 	mul.w	sl, r9, sl
 80252c8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80252cc:	fb09 f904 	mul.w	r9, r9, r4
 80252d0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80252d4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80252d8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80252dc:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80252e0:	4454      	add	r4, sl
 80252e2:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80252e6:	0a24      	lsrs	r4, r4, #8
 80252e8:	0a00      	lsrs	r0, r0, #8
 80252ea:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80252ee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80252f2:	4304      	orrs	r4, r0
 80252f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80252f8:	d019      	beq.n	802532e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x206>
 80252fa:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80252fe:	fb08 f909 	mul.w	r9, r8, r9
 8025302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025306:	fb08 f803 	mul.w	r8, r8, r3
 802530a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802530e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025312:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025316:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802531a:	444b      	add	r3, r9
 802531c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025320:	0a1b      	lsrs	r3, r3, #8
 8025322:	0a00      	lsrs	r0, r0, #8
 8025324:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025328:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802532c:	4303      	orrs	r3, r0
 802532e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025332:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025336:	fb0c f808 	mul.w	r8, ip, r8
 802533a:	fb05 8800 	mla	r8, r5, r0, r8
 802533e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8025342:	fb07 8800 	mla	r8, r7, r0, r8
 8025346:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802534a:	fb0e 8000 	mla	r0, lr, r0, r8
 802534e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025352:	fb0c f606 	mul.w	r6, ip, r6
 8025356:	0a00      	lsrs	r0, r0, #8
 8025358:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802535c:	fb05 6202 	mla	r2, r5, r2, r6
 8025360:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8025364:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8025368:	fb07 2700 	mla	r7, r7, r0, r2
 802536c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8025370:	9b03      	ldr	r3, [sp, #12]
 8025372:	9d00      	ldr	r5, [sp, #0]
 8025374:	9a02      	ldr	r2, [sp, #8]
 8025376:	fb0e 7000 	mla	r0, lr, r0, r7
 802537a:	43dc      	mvns	r4, r3
 802537c:	9b01      	ldr	r3, [sp, #4]
 802537e:	b2e4      	uxtb	r4, r4
 8025380:	0a00      	lsrs	r0, r0, #8
 8025382:	4363      	muls	r3, r4
 8025384:	4365      	muls	r5, r4
 8025386:	4362      	muls	r2, r4
 8025388:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802538c:	ea48 0000 	orr.w	r0, r8, r0
 8025390:	4614      	mov	r4, r2
 8025392:	1c5e      	adds	r6, r3, #1
 8025394:	1c6a      	adds	r2, r5, #1
 8025396:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 802539a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802539e:	0a03      	lsrs	r3, r0, #8
 80253a0:	0c02      	lsrs	r2, r0, #16
 80253a2:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80253a6:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80253aa:	00db      	lsls	r3, r3, #3
 80253ac:	0212      	lsls	r2, r2, #8
 80253ae:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80253b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80253b6:	4313      	orrs	r3, r2
 80253b8:	1c62      	adds	r2, r4, #1
 80253ba:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80253be:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80253c2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80253c6:	4318      	orrs	r0, r3
 80253c8:	8008      	strh	r0, [r1, #0]
 80253ca:	b005      	add	sp, #20
 80253cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253d0:	080315e5 	.word	0x080315e5
 80253d4:	08031bae 	.word	0x08031bae
 80253d8:	08031669 	.word	0x08031669

080253dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80253dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253e0:	ed2d 8b08 	vpush	{d8-d11}
 80253e4:	b09b      	sub	sp, #108	; 0x6c
 80253e6:	eeb0 aa40 	vmov.f32	s20, s0
 80253ea:	9218      	str	r2, [sp, #96]	; 0x60
 80253ec:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80253ee:	9116      	str	r1, [sp, #88]	; 0x58
 80253f0:	9307      	str	r3, [sp, #28]
 80253f2:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80253f6:	9019      	str	r0, [sp, #100]	; 0x64
 80253f8:	6850      	ldr	r0, [r2, #4]
 80253fa:	6812      	ldr	r2, [r2, #0]
 80253fc:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80253fe:	fb00 1303 	mla	r3, r0, r3, r1
 8025402:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025406:	930a      	str	r3, [sp, #40]	; 0x28
 8025408:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	930f      	str	r3, [sp, #60]	; 0x3c
 802540e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025410:	685e      	ldr	r6, [r3, #4]
 8025412:	eef0 9a60 	vmov.f32	s19, s1
 8025416:	eeb0 9a41 	vmov.f32	s18, s2
 802541a:	eeb0 8a62 	vmov.f32	s16, s5
 802541e:	eef0 8a43 	vmov.f32	s17, s6
 8025422:	eef0 ba44 	vmov.f32	s23, s8
 8025426:	eeb0 ba64 	vmov.f32	s22, s9
 802542a:	eef0 aa45 	vmov.f32	s21, s10
 802542e:	3604      	adds	r6, #4
 8025430:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025432:	2b00      	cmp	r3, #0
 8025434:	dc03      	bgt.n	802543e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025436:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025438:	2b00      	cmp	r3, #0
 802543a:	f340 8373 	ble.w	8025b24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802543e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025440:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025444:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025448:	1e48      	subs	r0, r1, #1
 802544a:	1e57      	subs	r7, r2, #1
 802544c:	9b07      	ldr	r3, [sp, #28]
 802544e:	2b00      	cmp	r3, #0
 8025450:	f340 8190 	ble.w	8025774 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025454:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025456:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802545a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802545e:	d406      	bmi.n	802546e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025460:	4584      	cmp	ip, r0
 8025462:	da04      	bge.n	802546e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025464:	2b00      	cmp	r3, #0
 8025466:	db02      	blt.n	802546e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025468:	42bb      	cmp	r3, r7
 802546a:	f2c0 8184 	blt.w	8025776 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802546e:	f11c 0c01 	adds.w	ip, ip, #1
 8025472:	f100 8172 	bmi.w	802575a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025476:	4561      	cmp	r1, ip
 8025478:	f2c0 816f 	blt.w	802575a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802547c:	3301      	adds	r3, #1
 802547e:	f100 816c 	bmi.w	802575a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025482:	429a      	cmp	r2, r3
 8025484:	f2c0 8169 	blt.w	802575a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025488:	9b07      	ldr	r3, [sp, #28]
 802548a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802548c:	9317      	str	r3, [sp, #92]	; 0x5c
 802548e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025490:	2b00      	cmp	r3, #0
 8025492:	f340 818e 	ble.w	80257b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8025496:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025498:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802549c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802549e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80254a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80254a4:	141b      	asrs	r3, r3, #16
 80254a6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80254aa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80254ae:	f100 81d1 	bmi.w	8025854 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80254b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80254b6:	4543      	cmp	r3, r8
 80254b8:	f280 81cc 	bge.w	8025854 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80254bc:	f1bc 0f00 	cmp.w	ip, #0
 80254c0:	f2c0 81c8 	blt.w	8025854 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80254c4:	f10e 38ff 	add.w	r8, lr, #4294967295
 80254c8:	45c4      	cmp	ip, r8
 80254ca:	f280 81c3 	bge.w	8025854 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80254ce:	b209      	sxth	r1, r1
 80254d0:	fb0c 3301 	mla	r3, ip, r1, r3
 80254d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80254d6:	eb04 0803 	add.w	r8, r4, r3
 80254da:	5ce3      	ldrb	r3, [r4, r3]
 80254dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80254e0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80254e4:	2a00      	cmp	r2, #0
 80254e6:	f000 81aa 	beq.w	802583e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80254ea:	f898 c001 	ldrb.w	ip, [r8, #1]
 80254ee:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80254f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80254f4:	0e24      	lsrs	r4, r4, #24
 80254f6:	9412      	str	r4, [sp, #72]	; 0x48
 80254f8:	b178      	cbz	r0, 802551a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80254fa:	eb08 0c01 	add.w	ip, r8, r1
 80254fe:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025502:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025506:	9108      	str	r1, [sp, #32]
 8025508:	0e09      	lsrs	r1, r1, #24
 802550a:	9110      	str	r1, [sp, #64]	; 0x40
 802550c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025510:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025514:	910c      	str	r1, [sp, #48]	; 0x30
 8025516:	0e09      	lsrs	r1, r1, #24
 8025518:	9113      	str	r1, [sp, #76]	; 0x4c
 802551a:	b292      	uxth	r2, r2
 802551c:	b280      	uxth	r0, r0
 802551e:	fb02 f900 	mul.w	r9, r2, r0
 8025522:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025526:	0112      	lsls	r2, r2, #4
 8025528:	eba2 0809 	sub.w	r8, r2, r9
 802552c:	b280      	uxth	r0, r0
 802552e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025532:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025534:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025536:	fa1f f888 	uxth.w	r8, r8
 802553a:	1a12      	subs	r2, r2, r0
 802553c:	b292      	uxth	r2, r2
 802553e:	fb08 f101 	mul.w	r1, r8, r1
 8025542:	fb02 110e 	mla	r1, r2, lr, r1
 8025546:	fb00 1104 	mla	r1, r0, r4, r1
 802554a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802554c:	fb09 1104 	mla	r1, r9, r4, r1
 8025550:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025554:	2900      	cmp	r1, #0
 8025556:	f000 80f5 	beq.w	8025744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802555a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802555e:	d01b      	beq.n	8025598 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025560:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025564:	fb0e fa0a 	mul.w	sl, lr, sl
 8025568:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802556c:	fb0e fe03 	mul.w	lr, lr, r3
 8025570:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025574:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025578:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802557c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025580:	4453      	add	r3, sl
 8025582:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025586:	0a1b      	lsrs	r3, r3, #8
 8025588:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802558c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025590:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025594:	ea43 030c 	orr.w	r3, r3, ip
 8025598:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802559a:	2cff      	cmp	r4, #255	; 0xff
 802559c:	d021      	beq.n	80255e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802559e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80255a0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80255a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80255aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80255ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80255b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80255b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80255ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255be:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80255c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80255c6:	44de      	add	lr, fp
 80255c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80255cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80255d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255dc:	ea4e 040a 	orr.w	r4, lr, sl
 80255e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80255e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80255e4:	2cff      	cmp	r4, #255	; 0xff
 80255e6:	d021      	beq.n	802562c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80255e8:	9c08      	ldr	r4, [sp, #32]
 80255ea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80255ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80255f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80255f4:	9c08      	ldr	r4, [sp, #32]
 80255f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80255fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80255fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025600:	fb04 fa0a 	mul.w	sl, r4, sl
 8025604:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025608:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802560c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025610:	44de      	add	lr, fp
 8025612:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025616:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802561a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802561e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025622:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025626:	ea4e 040a 	orr.w	r4, lr, sl
 802562a:	9408      	str	r4, [sp, #32]
 802562c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802562e:	2cff      	cmp	r4, #255	; 0xff
 8025630:	d021      	beq.n	8025676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8025632:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025634:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025638:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802563a:	fb04 fb0b 	mul.w	fp, r4, fp
 802563e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025640:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025644:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025646:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802564a:	fb04 fa0a 	mul.w	sl, r4, sl
 802564e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025652:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025656:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802565a:	44de      	add	lr, fp
 802565c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025660:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025664:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025668:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802566c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025670:	ea4e 040a 	orr.w	r4, lr, sl
 8025674:	940c      	str	r4, [sp, #48]	; 0x30
 8025676:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025678:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802567c:	9c08      	ldr	r4, [sp, #32]
 802567e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025682:	fb08 fc0c 	mul.w	ip, r8, ip
 8025686:	fb02 cc0e 	mla	ip, r2, lr, ip
 802568a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802568e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025690:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025694:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025698:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802569a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802569e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80256a2:	fb08 f80e 	mul.w	r8, r8, lr
 80256a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256aa:	fb02 8303 	mla	r3, r2, r3, r8
 80256ae:	9a08      	ldr	r2, [sp, #32]
 80256b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80256b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80256b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80256ba:	fb00 330a 	mla	r3, r0, sl, r3
 80256be:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80256c2:	fb09 3900 	mla	r9, r9, r0, r3
 80256c6:	43c9      	mvns	r1, r1
 80256c8:	ea4f 2228 	mov.w	r2, r8, asr #8
 80256cc:	fa5f fe81 	uxtb.w	lr, r1
 80256d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256d4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80256d8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80256dc:	fb02 f20e 	mul.w	r2, r2, lr
 80256e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256e4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80256e8:	ea4c 0c09 	orr.w	ip, ip, r9
 80256ec:	1c53      	adds	r3, r2, #1
 80256ee:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80256f2:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80256f6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80256fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80256fe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025702:	4a63      	ldr	r2, [pc, #396]	; (8025890 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025704:	fb00 f00e 	mul.w	r0, r0, lr
 8025708:	b2db      	uxtb	r3, r3
 802570a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802570e:	1c43      	adds	r3, r0, #1
 8025710:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025714:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025718:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802571c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025720:	b2c9      	uxtb	r1, r1
 8025722:	00db      	lsls	r3, r3, #3
 8025724:	fb01 f10e 	mul.w	r1, r1, lr
 8025728:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802572c:	4313      	orrs	r3, r2
 802572e:	1c4a      	adds	r2, r1, #1
 8025730:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025734:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025738:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802573c:	ea4c 0c03 	orr.w	ip, ip, r3
 8025740:	f8a7 c000 	strh.w	ip, [r7]
 8025744:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025746:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025748:	441a      	add	r2, r3
 802574a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802574c:	922d      	str	r2, [sp, #180]	; 0xb4
 802574e:	441d      	add	r5, r3
 8025750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025752:	3b01      	subs	r3, #1
 8025754:	3702      	adds	r7, #2
 8025756:	9317      	str	r3, [sp, #92]	; 0x5c
 8025758:	e699      	b.n	802548e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802575a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802575c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802575e:	441c      	add	r4, r3
 8025760:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025762:	942d      	str	r4, [sp, #180]	; 0xb4
 8025764:	441d      	add	r5, r3
 8025766:	9b07      	ldr	r3, [sp, #28]
 8025768:	3b01      	subs	r3, #1
 802576a:	9307      	str	r3, [sp, #28]
 802576c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802576e:	3302      	adds	r3, #2
 8025770:	930a      	str	r3, [sp, #40]	; 0x28
 8025772:	e66b      	b.n	802544c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025774:	d024      	beq.n	80257c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025776:	9b07      	ldr	r3, [sp, #28]
 8025778:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802577a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 802577c:	3b01      	subs	r3, #1
 802577e:	fb00 4003 	mla	r0, r0, r3, r4
 8025782:	1400      	asrs	r0, r0, #16
 8025784:	f53f ae80 	bmi.w	8025488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025788:	3901      	subs	r1, #1
 802578a:	4288      	cmp	r0, r1
 802578c:	f6bf ae7c 	bge.w	8025488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025790:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025792:	fb01 5303 	mla	r3, r1, r3, r5
 8025796:	141b      	asrs	r3, r3, #16
 8025798:	f53f ae76 	bmi.w	8025488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802579c:	3a01      	subs	r2, #1
 802579e:	4293      	cmp	r3, r2
 80257a0:	f6bf ae72 	bge.w	8025488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80257a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80257a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80257ac:	f1bb 0f00 	cmp.w	fp, #0
 80257b0:	dc70      	bgt.n	8025894 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80257b2:	9b07      	ldr	r3, [sp, #28]
 80257b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80257b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257ba:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80257be:	930a      	str	r3, [sp, #40]	; 0x28
 80257c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80257c2:	2b00      	cmp	r3, #0
 80257c4:	f340 81ae 	ble.w	8025b24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80257c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80257cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80257d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80257d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80257d6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80257da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80257de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80257e2:	eef0 6a48 	vmov.f32	s13, s16
 80257e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80257ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80257ee:	ee37 8a48 	vsub.f32	s16, s14, s16
 80257f2:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80257f6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80257fa:	eef0 6a68 	vmov.f32	s13, s17
 80257fe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025802:	ee18 2a10 	vmov	r2, s16
 8025806:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802580a:	fb92 f3f3 	sdiv	r3, r2, r3
 802580e:	ee18 2a90 	vmov	r2, s17
 8025812:	932f      	str	r3, [sp, #188]	; 0xbc
 8025814:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025816:	fb92 f3f3 	sdiv	r3, r2, r3
 802581a:	9330      	str	r3, [sp, #192]	; 0xc0
 802581c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802581e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025820:	3b01      	subs	r3, #1
 8025822:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025826:	9316      	str	r3, [sp, #88]	; 0x58
 8025828:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802582a:	bf08      	it	eq
 802582c:	4613      	moveq	r3, r2
 802582e:	ee16 5a90 	vmov	r5, s13
 8025832:	9307      	str	r3, [sp, #28]
 8025834:	eef0 8a67 	vmov.f32	s17, s15
 8025838:	eeb0 8a47 	vmov.f32	s16, s14
 802583c:	e5f8      	b.n	8025430 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802583e:	2800      	cmp	r0, #0
 8025840:	f43f ae6b 	beq.w	802551a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025844:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025848:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802584c:	9108      	str	r1, [sp, #32]
 802584e:	0e09      	lsrs	r1, r1, #24
 8025850:	9110      	str	r1, [sp, #64]	; 0x40
 8025852:	e662      	b.n	802551a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025854:	f113 0801 	adds.w	r8, r3, #1
 8025858:	f53f af74 	bmi.w	8025744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802585c:	4541      	cmp	r1, r8
 802585e:	f6ff af71 	blt.w	8025744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025862:	f11c 0801 	adds.w	r8, ip, #1
 8025866:	f53f af6d 	bmi.w	8025744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802586a:	45c6      	cmp	lr, r8
 802586c:	f6ff af6a 	blt.w	8025744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025870:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025874:	b209      	sxth	r1, r1
 8025876:	fa0f f38e 	sxth.w	r3, lr
 802587a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802587e:	9301      	str	r3, [sp, #4]
 8025880:	9100      	str	r1, [sp, #0]
 8025882:	4633      	mov	r3, r6
 8025884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025886:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025888:	4639      	mov	r1, r7
 802588a:	f7ff fc4d 	bl	8025128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802588e:	e759      	b.n	8025744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025890:	fffff800 	.word	0xfffff800
 8025894:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025896:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025898:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802589c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802589e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258a2:	1427      	asrs	r7, r4, #16
 80258a4:	142b      	asrs	r3, r5, #16
 80258a6:	fb01 7303 	mla	r3, r1, r3, r7
 80258aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80258ac:	18e7      	adds	r7, r4, r3
 80258ae:	5ce3      	ldrb	r3, [r4, r3]
 80258b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80258b4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80258b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80258bc:	2a00      	cmp	r2, #0
 80258be:	f000 8127 	beq.w	8025b10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80258c2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80258c6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80258ca:	940d      	str	r4, [sp, #52]	; 0x34
 80258cc:	0e24      	lsrs	r4, r4, #24
 80258ce:	9414      	str	r4, [sp, #80]	; 0x50
 80258d0:	b170      	cbz	r0, 80258f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80258d2:	eb07 0e01 	add.w	lr, r7, r1
 80258d6:	5c79      	ldrb	r1, [r7, r1]
 80258d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80258dc:	9109      	str	r1, [sp, #36]	; 0x24
 80258de:	0e09      	lsrs	r1, r1, #24
 80258e0:	9111      	str	r1, [sp, #68]	; 0x44
 80258e2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80258e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80258ea:	910e      	str	r1, [sp, #56]	; 0x38
 80258ec:	0e09      	lsrs	r1, r1, #24
 80258ee:	9115      	str	r1, [sp, #84]	; 0x54
 80258f0:	b292      	uxth	r2, r2
 80258f2:	b280      	uxth	r0, r0
 80258f4:	fb02 f800 	mul.w	r8, r2, r0
 80258f8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80258fc:	0112      	lsls	r2, r2, #4
 80258fe:	eba2 0e08 	sub.w	lr, r2, r8
 8025902:	b280      	uxth	r0, r0
 8025904:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802590a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802590c:	fa1f fe8e 	uxth.w	lr, lr
 8025910:	1a09      	subs	r1, r1, r0
 8025912:	b289      	uxth	r1, r1
 8025914:	fb0e f202 	mul.w	r2, lr, r2
 8025918:	fb01 220c 	mla	r2, r1, ip, r2
 802591c:	fb00 2204 	mla	r2, r0, r4, r2
 8025920:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025922:	fb08 2204 	mla	r2, r8, r4, r2
 8025926:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802592a:	2a00      	cmp	r2, #0
 802592c:	f000 80e5 	beq.w	8025afa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8025930:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025934:	d019      	beq.n	802596a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8025936:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802593a:	fb0c fa0a 	mul.w	sl, ip, sl
 802593e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025942:	fb0c fc03 	mul.w	ip, ip, r3
 8025946:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802594a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802594e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025952:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025956:	4453      	add	r3, sl
 8025958:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802595c:	0a1b      	lsrs	r3, r3, #8
 802595e:	0a3f      	lsrs	r7, r7, #8
 8025960:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025964:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025968:	433b      	orrs	r3, r7
 802596a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802596c:	2cff      	cmp	r4, #255	; 0xff
 802596e:	d020      	beq.n	80259b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8025970:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025972:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025976:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025978:	4367      	muls	r7, r4
 802597a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802597c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025980:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025982:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025986:	fb04 fa0a 	mul.w	sl, r4, sl
 802598a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802598e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025992:	44bc      	add	ip, r7
 8025994:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025998:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802599c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80259ac:	ea4c 040a 	orr.w	r4, ip, sl
 80259b0:	940d      	str	r4, [sp, #52]	; 0x34
 80259b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259b4:	2cff      	cmp	r4, #255	; 0xff
 80259b6:	d020      	beq.n	80259fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 80259b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80259ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80259be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259c0:	4367      	muls	r7, r4
 80259c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80259c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80259c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80259ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80259ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80259d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80259d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259da:	44bc      	add	ip, r7
 80259dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80259e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80259e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80259f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80259f4:	ea4c 040a 	orr.w	r4, ip, sl
 80259f8:	9409      	str	r4, [sp, #36]	; 0x24
 80259fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80259fc:	2cff      	cmp	r4, #255	; 0xff
 80259fe:	d020      	beq.n	8025a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8025a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a06:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a08:	4367      	muls	r7, r4
 8025a0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a0c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a12:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a16:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025a1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a22:	44bc      	add	ip, r7
 8025a24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025a28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a3c:	ea4c 040a 	orr.w	r4, ip, sl
 8025a40:	940e      	str	r4, [sp, #56]	; 0x38
 8025a42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a44:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025a4a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025a4e:	fb0e f707 	mul.w	r7, lr, r7
 8025a52:	fb01 770c 	mla	r7, r1, ip, r7
 8025a56:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025a5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a5c:	fb00 770c 	mla	r7, r0, ip, r7
 8025a60:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025a64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a66:	fb08 770c 	mla	r7, r8, ip, r7
 8025a6a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025a6e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025a72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a76:	fb01 e303 	mla	r3, r1, r3, lr
 8025a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025a7c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025a80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025a82:	fb00 330a 	mla	r3, r0, sl, r3
 8025a86:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025a8a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025a8e:	f8b9 3000 	ldrh.w	r3, [r9]
 8025a92:	43d2      	mvns	r2, r2
 8025a94:	1218      	asrs	r0, r3, #8
 8025a96:	b2d2      	uxtb	r2, r2
 8025a98:	10d9      	asrs	r1, r3, #3
 8025a9a:	0a3f      	lsrs	r7, r7, #8
 8025a9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025aa0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025aa4:	00db      	lsls	r3, r3, #3
 8025aa6:	4350      	muls	r0, r2
 8025aa8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025aac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025ab0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025ab4:	b2db      	uxtb	r3, r3
 8025ab6:	ea47 070c 	orr.w	r7, r7, ip
 8025aba:	4351      	muls	r1, r2
 8025abc:	4353      	muls	r3, r2
 8025abe:	1c42      	adds	r2, r0, #1
 8025ac0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025ac4:	0c3a      	lsrs	r2, r7, #16
 8025ac6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025aca:	4a19      	ldr	r2, [pc, #100]	; (8025b30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8025acc:	b2c0      	uxtb	r0, r0
 8025ace:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8025ad2:	1c4a      	adds	r2, r1, #1
 8025ad4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025ad8:	0a3a      	lsrs	r2, r7, #8
 8025ada:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025ade:	00c9      	lsls	r1, r1, #3
 8025ae0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ae4:	4301      	orrs	r1, r0
 8025ae6:	1c58      	adds	r0, r3, #1
 8025ae8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025aec:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025af0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8025af4:	4308      	orrs	r0, r1
 8025af6:	f8a9 0000 	strh.w	r0, [r9]
 8025afa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025afc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025afe:	441a      	add	r2, r3
 8025b00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b02:	922d      	str	r2, [sp, #180]	; 0xb4
 8025b04:	f109 0902 	add.w	r9, r9, #2
 8025b08:	441d      	add	r5, r3
 8025b0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025b0e:	e64d      	b.n	80257ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8025b10:	2800      	cmp	r0, #0
 8025b12:	f43f aeed 	beq.w	80258f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025b16:	5c79      	ldrb	r1, [r7, r1]
 8025b18:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025b1c:	9109      	str	r1, [sp, #36]	; 0x24
 8025b1e:	0e09      	lsrs	r1, r1, #24
 8025b20:	9111      	str	r1, [sp, #68]	; 0x44
 8025b22:	e6e5      	b.n	80258f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025b24:	b01b      	add	sp, #108	; 0x6c
 8025b26:	ecbd 8b08 	vpop	{d8-d11}
 8025b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b2e:	bf00      	nop
 8025b30:	fffff800 	.word	0xfffff800

08025b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8025b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b38:	b085      	sub	sp, #20
 8025b3a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025b3e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025b42:	9103      	str	r1, [sp, #12]
 8025b44:	fb05 7106 	mla	r1, r5, r6, r7
 8025b48:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8025b4c:	2d00      	cmp	r5, #0
 8025b4e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025b52:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025b56:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8025b5a:	9401      	str	r4, [sp, #4]
 8025b5c:	eb03 0901 	add.w	r9, r3, r1
 8025b60:	f2c0 80c0 	blt.w	8025ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025b64:	45a8      	cmp	r8, r5
 8025b66:	f340 80bd 	ble.w	8025ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025b6a:	2f00      	cmp	r7, #0
 8025b6c:	f2c0 80b6 	blt.w	8025cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025b70:	42be      	cmp	r6, r7
 8025b72:	f340 80b3 	ble.w	8025cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025b76:	f813 c001 	ldrb.w	ip, [r3, r1]
 8025b7a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8025b7e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025b82:	d019      	beq.n	8025bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8025b84:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8025b88:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025b8c:	435a      	muls	r2, r3
 8025b8e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025b92:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8025b96:	fb0c f403 	mul.w	r4, ip, r3
 8025b9a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025b9e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025ba2:	441a      	add	r2, r3
 8025ba4:	f104 0320 	add.w	r3, r4, #32
 8025ba8:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025bac:	0a1b      	lsrs	r3, r3, #8
 8025bae:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025bb2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025bb6:	4319      	orrs	r1, r3
 8025bb8:	b289      	uxth	r1, r1
 8025bba:	1c7b      	adds	r3, r7, #1
 8025bbc:	f100 8097 	bmi.w	8025cee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025bc0:	429e      	cmp	r6, r3
 8025bc2:	f340 8094 	ble.w	8025cee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025bc6:	2800      	cmp	r0, #0
 8025bc8:	f000 8094 	beq.w	8025cf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8025bcc:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025bd0:	9b01      	ldr	r3, [sp, #4]
 8025bd2:	2cff      	cmp	r4, #255	; 0xff
 8025bd4:	885b      	ldrh	r3, [r3, #2]
 8025bd6:	d01b      	beq.n	8025c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8025bd8:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025bdc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025be0:	fb0a f202 	mul.w	r2, sl, r2
 8025be4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025be8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025bec:	fb04 fa03 	mul.w	sl, r4, r3
 8025bf0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025bf4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025bf8:	441a      	add	r2, r3
 8025bfa:	f10a 0320 	add.w	r3, sl, #32
 8025bfe:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025c02:	0a1b      	lsrs	r3, r3, #8
 8025c04:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8025c08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c0c:	ea4b 0303 	orr.w	r3, fp, r3
 8025c10:	b29b      	uxth	r3, r3
 8025c12:	3501      	adds	r5, #1
 8025c14:	d474      	bmi.n	8025d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025c16:	45a8      	cmp	r8, r5
 8025c18:	dd72      	ble.n	8025d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025c1a:	f1be 0f00 	cmp.w	lr, #0
 8025c1e:	f000 8120 	beq.w	8025e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8025c22:	2f00      	cmp	r7, #0
 8025c24:	db69      	blt.n	8025cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025c26:	42be      	cmp	r6, r7
 8025c28:	dd67      	ble.n	8025cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025c2a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025c2e:	9a01      	ldr	r2, [sp, #4]
 8025c30:	2dff      	cmp	r5, #255	; 0xff
 8025c32:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8025c36:	d01c      	beq.n	8025c72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8025c38:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8025c3c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025c40:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025c44:	fb05 fa0b 	mul.w	sl, r5, fp
 8025c48:	fb08 f802 	mul.w	r8, r8, r2
 8025c4c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025c50:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025c54:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025c58:	4490      	add	r8, r2
 8025c5a:	f10a 0220 	add.w	r2, sl, #32
 8025c5e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025c62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c66:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8025c6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025c6e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025c72:	fa1f fb8b 	uxth.w	fp, fp
 8025c76:	3701      	adds	r7, #1
 8025c78:	d447      	bmi.n	8025d0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025c7a:	42be      	cmp	r6, r7
 8025c7c:	dd45      	ble.n	8025d0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025c7e:	2800      	cmp	r0, #0
 8025c80:	d046      	beq.n	8025d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8025c82:	3601      	adds	r6, #1
 8025c84:	9a01      	ldr	r2, [sp, #4]
 8025c86:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025c8a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025c8e:	2fff      	cmp	r7, #255	; 0xff
 8025c90:	d01a      	beq.n	8025cc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8025c92:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025c96:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8025c9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c9e:	fb07 f902 	mul.w	r9, r7, r2
 8025ca2:	fb08 f806 	mul.w	r8, r8, r6
 8025ca6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025caa:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025cae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025cb2:	44b0      	add	r8, r6
 8025cb4:	f109 0620 	add.w	r6, r9, #32
 8025cb8:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025cbc:	0a36      	lsrs	r6, r6, #8
 8025cbe:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025cc2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025cc6:	4332      	orrs	r2, r6
 8025cc8:	b292      	uxth	r2, r2
 8025cca:	280f      	cmp	r0, #15
 8025ccc:	d922      	bls.n	8025d14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8025cce:	4b69      	ldr	r3, [pc, #420]	; (8025e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025cd0:	4a69      	ldr	r2, [pc, #420]	; (8025e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8025cd2:	486a      	ldr	r0, [pc, #424]	; (8025e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8025cd4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8025cd8:	f006 fcc0 	bl	802c65c <__assert_func>
 8025cdc:	f04f 0c00 	mov.w	ip, #0
 8025ce0:	4661      	mov	r1, ip
 8025ce2:	e76a      	b.n	8025bba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8025ce4:	2400      	movs	r4, #0
 8025ce6:	46a4      	mov	ip, r4
 8025ce8:	4623      	mov	r3, r4
 8025cea:	4621      	mov	r1, r4
 8025cec:	e791      	b.n	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025cee:	2400      	movs	r4, #0
 8025cf0:	4623      	mov	r3, r4
 8025cf2:	e78e      	b.n	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025cf4:	4604      	mov	r4, r0
 8025cf6:	4603      	mov	r3, r0
 8025cf8:	e78b      	b.n	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025cfa:	2500      	movs	r5, #0
 8025cfc:	46ab      	mov	fp, r5
 8025cfe:	e7ba      	b.n	8025c76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8025d00:	2700      	movs	r7, #0
 8025d02:	463d      	mov	r5, r7
 8025d04:	463a      	mov	r2, r7
 8025d06:	46bb      	mov	fp, r7
 8025d08:	e7df      	b.n	8025cca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025d0a:	2700      	movs	r7, #0
 8025d0c:	463a      	mov	r2, r7
 8025d0e:	e7dc      	b.n	8025cca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025d10:	4607      	mov	r7, r0
 8025d12:	4602      	mov	r2, r0
 8025d14:	f1be 0f0f 	cmp.w	lr, #15
 8025d18:	d8d9      	bhi.n	8025cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025d1a:	b286      	uxth	r6, r0
 8025d1c:	fa1f f98e 	uxth.w	r9, lr
 8025d20:	fb06 f809 	mul.w	r8, r6, r9
 8025d24:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025d28:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025d2c:	0136      	lsls	r6, r6, #4
 8025d2e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025d32:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025d36:	9601      	str	r6, [sp, #4]
 8025d38:	ea4a 0101 	orr.w	r1, sl, r1
 8025d3c:	fa1f f689 	uxth.w	r6, r9
 8025d40:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8025d44:	fb10 f90e 	smulbb	r9, r0, lr
 8025d48:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8025d4c:	9602      	str	r6, [sp, #8]
 8025d4e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025d52:	460e      	mov	r6, r1
 8025d54:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025d58:	f1ce 0110 	rsb	r1, lr, #16
 8025d5c:	1a09      	subs	r1, r1, r0
 8025d5e:	ea4a 0303 	orr.w	r3, sl, r3
 8025d62:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8025d66:	4343      	muls	r3, r0
 8025d68:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8025d6c:	9801      	ldr	r0, [sp, #4]
 8025d6e:	fb01 3106 	mla	r1, r1, r6, r3
 8025d72:	9e02      	ldr	r6, [sp, #8]
 8025d74:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8025d78:	1b80      	subs	r0, r0, r6
 8025d7a:	9e01      	ldr	r6, [sp, #4]
 8025d7c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025d80:	eba6 0608 	sub.w	r6, r6, r8
 8025d84:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025d88:	b2b6      	uxth	r6, r6
 8025d8a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025d8e:	ea4a 0202 	orr.w	r2, sl, r2
 8025d92:	b280      	uxth	r0, r0
 8025d94:	4374      	muls	r4, r6
 8025d96:	fb09 1302 	mla	r3, r9, r2, r1
 8025d9a:	fb0c 4400 	mla	r4, ip, r0, r4
 8025d9e:	9a03      	ldr	r2, [sp, #12]
 8025da0:	9802      	ldr	r0, [sp, #8]
 8025da2:	8811      	ldrh	r1, [r2, #0]
 8025da4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8025da8:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8025dac:	fb00 4505 	mla	r5, r0, r5, r4
 8025db0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025db4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025db8:	fb08 5707 	mla	r7, r8, r7, r5
 8025dbc:	ea4a 0b0b 	orr.w	fp, sl, fp
 8025dc0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025dc4:	b292      	uxth	r2, r2
 8025dc6:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025dca:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025dce:	4357      	muls	r7, r2
 8025dd0:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8025dd4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025dd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025ddc:	f107 0801 	add.w	r8, r7, #1
 8025de0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025de4:	ea43 0e0e 	orr.w	lr, r3, lr
 8025de8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8025dec:	fa1f f38e 	uxth.w	r3, lr
 8025df0:	1208      	asrs	r0, r1, #8
 8025df2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025df6:	b2ff      	uxtb	r7, r7
 8025df8:	121c      	asrs	r4, r3, #8
 8025dfa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025dfe:	fb10 f007 	smulbb	r0, r0, r7
 8025e02:	10cd      	asrs	r5, r1, #3
 8025e04:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025e08:	fb04 0402 	mla	r4, r4, r2, r0
 8025e0c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025e10:	10d8      	asrs	r0, r3, #3
 8025e12:	fb15 f507 	smulbb	r5, r5, r7
 8025e16:	00db      	lsls	r3, r3, #3
 8025e18:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025e1c:	fb00 5002 	mla	r0, r0, r2, r5
 8025e20:	b2dd      	uxtb	r5, r3
 8025e22:	00cb      	lsls	r3, r1, #3
 8025e24:	b2db      	uxtb	r3, r3
 8025e26:	fb13 f307 	smulbb	r3, r3, r7
 8025e2a:	fb05 3202 	mla	r2, r5, r2, r3
 8025e2e:	b2a4      	uxth	r4, r4
 8025e30:	b292      	uxth	r2, r2
 8025e32:	1c63      	adds	r3, r4, #1
 8025e34:	b280      	uxth	r0, r0
 8025e36:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025e3a:	1c53      	adds	r3, r2, #1
 8025e3c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025e40:	1c42      	adds	r2, r0, #1
 8025e42:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025e46:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025e4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025e4e:	0940      	lsrs	r0, r0, #5
 8025e50:	4323      	orrs	r3, r4
 8025e52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e56:	9a03      	ldr	r2, [sp, #12]
 8025e58:	4303      	orrs	r3, r0
 8025e5a:	8013      	strh	r3, [r2, #0]
 8025e5c:	b005      	add	sp, #20
 8025e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e62:	280f      	cmp	r0, #15
 8025e64:	f63f af33 	bhi.w	8025cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025e68:	4677      	mov	r7, lr
 8025e6a:	4675      	mov	r5, lr
 8025e6c:	4672      	mov	r2, lr
 8025e6e:	46f3      	mov	fp, lr
 8025e70:	e753      	b.n	8025d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8025e72:	bf00      	nop
 8025e74:	080315e5 	.word	0x080315e5
 8025e78:	08031bae 	.word	0x08031bae
 8025e7c:	08031669 	.word	0x08031669

08025e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e84:	ed2d 8b08 	vpush	{d8-d11}
 8025e88:	b097      	sub	sp, #92	; 0x5c
 8025e8a:	eeb0 aa40 	vmov.f32	s20, s0
 8025e8e:	9214      	str	r2, [sp, #80]	; 0x50
 8025e90:	9308      	str	r3, [sp, #32]
 8025e92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025e94:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025e98:	9312      	str	r3, [sp, #72]	; 0x48
 8025e9a:	9111      	str	r1, [sp, #68]	; 0x44
 8025e9c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025ea0:	9015      	str	r0, [sp, #84]	; 0x54
 8025ea2:	6850      	ldr	r0, [r2, #4]
 8025ea4:	6812      	ldr	r2, [r2, #0]
 8025ea6:	fb00 1303 	mla	r3, r0, r3, r1
 8025eaa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025eae:	9309      	str	r3, [sp, #36]	; 0x24
 8025eb0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025eb2:	681b      	ldr	r3, [r3, #0]
 8025eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8025eb6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025eb8:	685b      	ldr	r3, [r3, #4]
 8025eba:	930c      	str	r3, [sp, #48]	; 0x30
 8025ebc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8025ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8025ec2:	eef0 9a60 	vmov.f32	s19, s1
 8025ec6:	eeb0 9a41 	vmov.f32	s18, s2
 8025eca:	eeb0 8a62 	vmov.f32	s16, s5
 8025ece:	eef0 8a43 	vmov.f32	s17, s6
 8025ed2:	eef0 ba44 	vmov.f32	s23, s8
 8025ed6:	eeb0 ba64 	vmov.f32	s22, s9
 8025eda:	eef0 aa45 	vmov.f32	s21, s10
 8025ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	dc03      	bgt.n	8025eec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	f340 83cb 	ble.w	8026682 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8025eec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025eee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ef2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025ef6:	1e48      	subs	r0, r1, #1
 8025ef8:	1e55      	subs	r5, r2, #1
 8025efa:	9b08      	ldr	r3, [sp, #32]
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	f340 81a3 	ble.w	8026248 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8025f02:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025f04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f06:	1436      	asrs	r6, r6, #16
 8025f08:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025f0c:	d406      	bmi.n	8025f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025f0e:	4286      	cmp	r6, r0
 8025f10:	da04      	bge.n	8025f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	db02      	blt.n	8025f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025f16:	42ab      	cmp	r3, r5
 8025f18:	f2c0 8197 	blt.w	802624a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8025f1c:	3601      	adds	r6, #1
 8025f1e:	f100 8184 	bmi.w	802622a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025f22:	42b1      	cmp	r1, r6
 8025f24:	f2c0 8181 	blt.w	802622a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025f28:	3301      	adds	r3, #1
 8025f2a:	f100 817e 	bmi.w	802622a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025f2e:	429a      	cmp	r2, r3
 8025f30:	f2c0 817b 	blt.w	802622a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025f34:	9b08      	ldr	r3, [sp, #32]
 8025f36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025f38:	9313      	str	r3, [sp, #76]	; 0x4c
 8025f3a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025f40:	2b00      	cmp	r3, #0
 8025f42:	f340 81a4 	ble.w	802628e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025f46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f48:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025f4a:	1418      	asrs	r0, r3, #16
 8025f4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025f4e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025f52:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f54:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025f58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f5a:	142d      	asrs	r5, r5, #16
 8025f5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025f60:	f100 81f8 	bmi.w	8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025f64:	f102 3eff 	add.w	lr, r2, #4294967295
 8025f68:	4575      	cmp	r5, lr
 8025f6a:	f280 81f3 	bge.w	8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025f6e:	2800      	cmp	r0, #0
 8025f70:	f2c0 81f0 	blt.w	8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025f74:	f103 3eff 	add.w	lr, r3, #4294967295
 8025f78:	4570      	cmp	r0, lr
 8025f7a:	f280 81eb 	bge.w	8026354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f80:	b212      	sxth	r2, r2
 8025f82:	fb00 5002 	mla	r0, r0, r2, r5
 8025f86:	fa1f fe81 	uxth.w	lr, r1
 8025f8a:	eb03 0a00 	add.w	sl, r3, r0
 8025f8e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025f92:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025f96:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025f9a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025f9e:	b29b      	uxth	r3, r3
 8025fa0:	f1bc 0f00 	cmp.w	ip, #0
 8025fa4:	f000 81b9 	beq.w	802631a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025fa8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025fac:	940d      	str	r4, [sp, #52]	; 0x34
 8025fae:	eb0a 0b02 	add.w	fp, sl, r2
 8025fb2:	fa1f fa8c 	uxth.w	sl, ip
 8025fb6:	fb0a fe0e 	mul.w	lr, sl, lr
 8025fba:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025fbe:	fa1f fa8a 	uxth.w	sl, sl
 8025fc2:	eba5 050e 	sub.w	r5, r5, lr
 8025fc6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025fca:	940e      	str	r4, [sp, #56]	; 0x38
 8025fcc:	eba3 030a 	sub.w	r3, r3, sl
 8025fd0:	b2ad      	uxth	r5, r5
 8025fd2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025fd4:	b29b      	uxth	r3, r3
 8025fd6:	fb08 f505 	mul.w	r5, r8, r5
 8025fda:	fb09 5303 	mla	r3, r9, r3, r5
 8025fde:	fb0a 3304 	mla	r3, sl, r4, r3
 8025fe2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025fe4:	fb0e 3304 	mla	r3, lr, r4, r3
 8025fe8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	f000 810f 	beq.w	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8025ff2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ff4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025ff8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025ffc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026000:	f000 8190 	beq.w	8026324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026004:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026008:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802600c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026010:	fb09 f000 	mul.w	r0, r9, r0
 8026014:	fb0a fe0e 	mul.w	lr, sl, lr
 8026018:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802601c:	f100 0b20 	add.w	fp, r0, #32
 8026020:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026024:	44ce      	add	lr, r9
 8026026:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802602a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802602e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026032:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026036:	ea4e 0909 	orr.w	r9, lr, r9
 802603a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802603e:	8868      	ldrh	r0, [r5, #2]
 8026040:	d019      	beq.n	8026076 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026042:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026046:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802604a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802604e:	fb08 f800 	mul.w	r8, r8, r0
 8026052:	fb0a fe0e 	mul.w	lr, sl, lr
 8026056:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802605a:	f108 0b20 	add.w	fp, r8, #32
 802605e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026062:	4486      	add	lr, r0
 8026064:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026068:	0a00      	lsrs	r0, r0, #8
 802606a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802606e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026072:	ea4e 0000 	orr.w	r0, lr, r0
 8026076:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802607a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802607e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026082:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026086:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802608a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802608e:	ea4e 0909 	orr.w	r9, lr, r9
 8026092:	ea4a 0000 	orr.w	r0, sl, r0
 8026096:	f1bc 0f00 	cmp.w	ip, #0
 802609a:	f000 8145 	beq.w	8026328 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802609e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80260a2:	3a01      	subs	r2, #1
 80260a4:	0052      	lsls	r2, r2, #1
 80260a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80260a8:	3202      	adds	r2, #2
 80260aa:	2cff      	cmp	r4, #255	; 0xff
 80260ac:	eb05 0e02 	add.w	lr, r5, r2
 80260b0:	5aaa      	ldrh	r2, [r5, r2]
 80260b2:	d018      	beq.n	80260e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80260b4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80260b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80260bc:	fb04 fa02 	mul.w	sl, r4, r2
 80260c0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80260c4:	fb08 f805 	mul.w	r8, r8, r5
 80260c8:	f10a 0520 	add.w	r5, sl, #32
 80260cc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80260d0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80260d4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80260d8:	4442      	add	r2, r8
 80260da:	0a2d      	lsrs	r5, r5, #8
 80260dc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80260e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80260e4:	432a      	orrs	r2, r5
 80260e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80260e8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80260ec:	2cff      	cmp	r4, #255	; 0xff
 80260ee:	d01a      	beq.n	8026126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80260f0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80260f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80260f8:	fb04 fa05 	mul.w	sl, r4, r5
 80260fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026100:	fb08 f80e 	mul.w	r8, r8, lr
 8026104:	f10a 0e20 	add.w	lr, sl, #32
 8026108:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802610c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026110:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026114:	4445      	add	r5, r8
 8026116:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802611a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802611e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026122:	ea45 050e 	orr.w	r5, r5, lr
 8026126:	fb1c fe01 	smulbb	lr, ip, r1
 802612a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802612e:	f1cc 0810 	rsb	r8, ip, #16
 8026132:	eba8 0801 	sub.w	r8, r8, r1
 8026136:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802613a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802613e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026142:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026146:	4341      	muls	r1, r0
 8026148:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802614c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026150:	ea4a 0202 	orr.w	r2, sl, r2
 8026154:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026158:	fb09 1108 	mla	r1, r9, r8, r1
 802615c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026160:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026164:	fb0c 1102 	mla	r1, ip, r2, r1
 8026168:	ea4b 0505 	orr.w	r5, fp, r5
 802616c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026170:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026174:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026178:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802617c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026180:	ea42 0e0e 	orr.w	lr, r2, lr
 8026184:	fa1f f28e 	uxth.w	r2, lr
 8026188:	2bff      	cmp	r3, #255	; 0xff
 802618a:	d103      	bne.n	8026194 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802618c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802618e:	29ff      	cmp	r1, #255	; 0xff
 8026190:	f000 80de 	beq.w	8026350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8026194:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026196:	8838      	ldrh	r0, [r7, #0]
 8026198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802619a:	434b      	muls	r3, r1
 802619c:	f103 0c01 	add.w	ip, r3, #1
 80261a0:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80261a4:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80261a8:	fa5f fc83 	uxtb.w	ip, r3
 80261ac:	1203      	asrs	r3, r0, #8
 80261ae:	1215      	asrs	r5, r2, #8
 80261b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80261b4:	fb13 f30c 	smulbb	r3, r3, ip
 80261b8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80261bc:	fb05 3501 	mla	r5, r5, r1, r3
 80261c0:	10c3      	asrs	r3, r0, #3
 80261c2:	10d1      	asrs	r1, r2, #3
 80261c4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80261c8:	fb13 f30c 	smulbb	r3, r3, ip
 80261cc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80261d0:	fb01 3104 	mla	r1, r1, r4, r3
 80261d4:	00c3      	lsls	r3, r0, #3
 80261d6:	00d2      	lsls	r2, r2, #3
 80261d8:	b2db      	uxtb	r3, r3
 80261da:	b2d2      	uxtb	r2, r2
 80261dc:	fb13 f30c 	smulbb	r3, r3, ip
 80261e0:	b2ad      	uxth	r5, r5
 80261e2:	fb02 3304 	mla	r3, r2, r4, r3
 80261e6:	b29a      	uxth	r2, r3
 80261e8:	1c6b      	adds	r3, r5, #1
 80261ea:	b289      	uxth	r1, r1
 80261ec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80261f0:	1c53      	adds	r3, r2, #1
 80261f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80261f6:	1c4a      	adds	r2, r1, #1
 80261f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80261fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026200:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026204:	0949      	lsrs	r1, r1, #5
 8026206:	432b      	orrs	r3, r5
 8026208:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802620c:	430b      	orrs	r3, r1
 802620e:	803b      	strh	r3, [r7, #0]
 8026210:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026212:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026214:	4413      	add	r3, r2
 8026216:	9329      	str	r3, [sp, #164]	; 0xa4
 8026218:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802621a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802621c:	441a      	add	r2, r3
 802621e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026220:	922a      	str	r2, [sp, #168]	; 0xa8
 8026222:	3b01      	subs	r3, #1
 8026224:	3702      	adds	r7, #2
 8026226:	9313      	str	r3, [sp, #76]	; 0x4c
 8026228:	e689      	b.n	8025f3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802622a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802622c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 802622e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8026230:	4433      	add	r3, r6
 8026232:	9329      	str	r3, [sp, #164]	; 0xa4
 8026234:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026236:	441c      	add	r4, r3
 8026238:	9b08      	ldr	r3, [sp, #32]
 802623a:	942a      	str	r4, [sp, #168]	; 0xa8
 802623c:	3b01      	subs	r3, #1
 802623e:	9308      	str	r3, [sp, #32]
 8026240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026242:	3302      	adds	r3, #2
 8026244:	9309      	str	r3, [sp, #36]	; 0x24
 8026246:	e658      	b.n	8025efa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026248:	d028      	beq.n	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802624a:	9b08      	ldr	r3, [sp, #32]
 802624c:	982b      	ldr	r0, [sp, #172]	; 0xac
 802624e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8026250:	3b01      	subs	r3, #1
 8026252:	fb00 5003 	mla	r0, r0, r3, r5
 8026256:	1400      	asrs	r0, r0, #16
 8026258:	f53f ae6c 	bmi.w	8025f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802625c:	3901      	subs	r1, #1
 802625e:	4288      	cmp	r0, r1
 8026260:	f6bf ae68 	bge.w	8025f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026264:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026266:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8026268:	fb01 0303 	mla	r3, r1, r3, r0
 802626c:	141b      	asrs	r3, r3, #16
 802626e:	f53f ae61 	bmi.w	8025f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026272:	3a01      	subs	r2, #1
 8026274:	4293      	cmp	r3, r2
 8026276:	f6bf ae5d 	bge.w	8025f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802627a:	9b08      	ldr	r3, [sp, #32]
 802627c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026280:	9313      	str	r3, [sp, #76]	; 0x4c
 8026282:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026288:	2b00      	cmp	r3, #0
 802628a:	f300 8082 	bgt.w	8026392 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802628e:	9b08      	ldr	r3, [sp, #32]
 8026290:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026296:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802629a:	9309      	str	r3, [sp, #36]	; 0x24
 802629c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802629e:	2b00      	cmp	r3, #0
 80262a0:	f340 81ef 	ble.w	8026682 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 80262a4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80262a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80262ac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80262b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262b2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80262b6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80262ba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80262be:	eef0 6a48 	vmov.f32	s13, s16
 80262c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80262c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262ca:	ee37 8a48 	vsub.f32	s16, s14, s16
 80262ce:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80262d2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80262d6:	eef0 6a68 	vmov.f32	s13, s17
 80262da:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80262de:	ee18 2a10 	vmov	r2, s16
 80262e2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80262e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80262ea:	ee18 2a90 	vmov	r2, s17
 80262ee:	932b      	str	r3, [sp, #172]	; 0xac
 80262f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80262f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80262f6:	932c      	str	r3, [sp, #176]	; 0xb0
 80262f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80262fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80262fc:	3b01      	subs	r3, #1
 80262fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026302:	9311      	str	r3, [sp, #68]	; 0x44
 8026304:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026306:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 802630a:	bf08      	it	eq
 802630c:	4613      	moveq	r3, r2
 802630e:	9308      	str	r3, [sp, #32]
 8026310:	eef0 8a67 	vmov.f32	s17, s15
 8026314:	eeb0 8a47 	vmov.f32	s16, s14
 8026318:	e5e1      	b.n	8025ede <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802631a:	fb08 f505 	mul.w	r5, r8, r5
 802631e:	fb09 5303 	mla	r3, r9, r3, r5
 8026322:	e661      	b.n	8025fe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8026324:	4681      	mov	r9, r0
 8026326:	e688      	b.n	802603a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026328:	f1c1 0210 	rsb	r2, r1, #16
 802632c:	4341      	muls	r1, r0
 802632e:	fb09 1902 	mla	r9, r9, r2, r1
 8026332:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026336:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802633a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802633e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026342:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026346:	ea42 0909 	orr.w	r9, r2, r9
 802634a:	fa1f f289 	uxth.w	r2, r9
 802634e:	e71b      	b.n	8026188 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026350:	803a      	strh	r2, [r7, #0]
 8026352:	e75d      	b.n	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8026354:	f115 0e01 	adds.w	lr, r5, #1
 8026358:	f53f af5a 	bmi.w	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802635c:	4572      	cmp	r2, lr
 802635e:	f6ff af57 	blt.w	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8026362:	f110 0e01 	adds.w	lr, r0, #1
 8026366:	f53f af53 	bmi.w	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802636a:	4573      	cmp	r3, lr
 802636c:	f6ff af50 	blt.w	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8026370:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026372:	9502      	str	r5, [sp, #8]
 8026374:	b21b      	sxth	r3, r3
 8026376:	b212      	sxth	r2, r2
 8026378:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802637c:	9301      	str	r3, [sp, #4]
 802637e:	9200      	str	r2, [sp, #0]
 8026380:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026384:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8026388:	4639      	mov	r1, r7
 802638a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802638c:	f7ff fbd2 	bl	8025b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026390:	e73e      	b.n	8026210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8026392:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026394:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026398:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802639a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802639e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80263a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80263a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80263a6:	141f      	asrs	r7, r3, #16
 80263a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80263aa:	141b      	asrs	r3, r3, #16
 80263ac:	fb01 3707 	mla	r7, r1, r7, r3
 80263b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80263b2:	fa1f fc82 	uxth.w	ip, r2
 80263b6:	eb03 0a07 	add.w	sl, r3, r7
 80263ba:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80263be:	f813 9007 	ldrb.w	r9, [r3, r7]
 80263c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80263c6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80263ca:	b29b      	uxth	r3, r3
 80263cc:	2d00      	cmp	r5, #0
 80263ce:	f000 813d 	beq.w	802664c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80263d2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80263d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80263d8:	eb0a 0b01 	add.w	fp, sl, r1
 80263dc:	fa1f fa85 	uxth.w	sl, r5
 80263e0:	fb0a fc0c 	mul.w	ip, sl, ip
 80263e4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80263e8:	fa1f fa8a 	uxth.w	sl, sl
 80263ec:	eba0 000c 	sub.w	r0, r0, ip
 80263f0:	eba3 030a 	sub.w	r3, r3, sl
 80263f4:	b280      	uxth	r0, r0
 80263f6:	fb08 f000 	mul.w	r0, r8, r0
 80263fa:	b29b      	uxth	r3, r3
 80263fc:	fb09 0303 	mla	r3, r9, r3, r0
 8026400:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026402:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026406:	9410      	str	r4, [sp, #64]	; 0x40
 8026408:	fb0a 3300 	mla	r3, sl, r0, r3
 802640c:	fb0c 3304 	mla	r3, ip, r4, r3
 8026410:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026414:	2b00      	cmp	r3, #0
 8026416:	f000 810b 	beq.w	8026630 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 802641a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802641c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802641e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026422:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026426:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802642a:	f000 8114 	beq.w	8026656 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 802642e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026432:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026436:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802643a:	fb09 f707 	mul.w	r7, r9, r7
 802643e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026442:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026446:	f107 0b20 	add.w	fp, r7, #32
 802644a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802644e:	44cc      	add	ip, r9
 8026450:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026454:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026458:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802645c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026460:	ea4c 0909 	orr.w	r9, ip, r9
 8026464:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026468:	8847      	ldrh	r7, [r0, #2]
 802646a:	d019      	beq.n	80264a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 802646c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026470:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026474:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026478:	fb08 f807 	mul.w	r8, r8, r7
 802647c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026480:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026484:	f108 0b20 	add.w	fp, r8, #32
 8026488:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802648c:	44bc      	add	ip, r7
 802648e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026492:	0a3f      	lsrs	r7, r7, #8
 8026494:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026498:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802649c:	ea4c 0707 	orr.w	r7, ip, r7
 80264a0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80264a4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80264a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80264ac:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80264b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80264b4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80264b8:	ea4c 0909 	orr.w	r9, ip, r9
 80264bc:	ea4a 0707 	orr.w	r7, sl, r7
 80264c0:	2d00      	cmp	r5, #0
 80264c2:	f000 80ca 	beq.w	802665a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 80264c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80264ca:	3901      	subs	r1, #1
 80264cc:	0049      	lsls	r1, r1, #1
 80264ce:	3102      	adds	r1, #2
 80264d0:	eb00 0c01 	add.w	ip, r0, r1
 80264d4:	5a41      	ldrh	r1, [r0, r1]
 80264d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80264d8:	28ff      	cmp	r0, #255	; 0xff
 80264da:	d019      	beq.n	8026510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 80264dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80264de:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80264e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80264e6:	fb04 fa01 	mul.w	sl, r4, r1
 80264ea:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80264ee:	fb08 f800 	mul.w	r8, r8, r0
 80264f2:	f10a 0020 	add.w	r0, sl, #32
 80264f6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80264fa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80264fe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026502:	4441      	add	r1, r8
 8026504:	0a00      	lsrs	r0, r0, #8
 8026506:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802650a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802650e:	4301      	orrs	r1, r0
 8026510:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026512:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026516:	2cff      	cmp	r4, #255	; 0xff
 8026518:	d01a      	beq.n	8026550 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802651a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802651e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026522:	fb04 fa00 	mul.w	sl, r4, r0
 8026526:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802652a:	fb08 f80c 	mul.w	r8, r8, ip
 802652e:	f10a 0c20 	add.w	ip, sl, #32
 8026532:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026536:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802653a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802653e:	4440      	add	r0, r8
 8026540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026544:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026548:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802654c:	ea40 000c 	orr.w	r0, r0, ip
 8026550:	fb15 fc02 	smulbb	ip, r5, r2
 8026554:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026558:	f1c5 0810 	rsb	r8, r5, #16
 802655c:	eba8 0802 	sub.w	r8, r8, r2
 8026560:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026564:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026568:	437a      	muls	r2, r7
 802656a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802656e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026572:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026576:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802657a:	fb09 2208 	mla	r2, r9, r8, r2
 802657e:	ea4a 0101 	orr.w	r1, sl, r1
 8026582:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026586:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802658a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802658e:	fb05 2201 	mla	r2, r5, r1, r2
 8026592:	ea4b 0000 	orr.w	r0, fp, r0
 8026596:	fb0c 2200 	mla	r2, ip, r0, r2
 802659a:	0d57      	lsrs	r7, r2, #21
 802659c:	0952      	lsrs	r2, r2, #5
 802659e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80265a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80265a6:	433a      	orrs	r2, r7
 80265a8:	2bff      	cmp	r3, #255	; 0xff
 80265aa:	b292      	uxth	r2, r2
 80265ac:	d102      	bne.n	80265b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80265ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 80265b0:	29ff      	cmp	r1, #255	; 0xff
 80265b2:	d063      	beq.n	802667c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 80265b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80265b6:	f8be 1000 	ldrh.w	r1, [lr]
 80265ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80265bc:	4343      	muls	r3, r0
 80265be:	1c58      	adds	r0, r3, #1
 80265c0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80265c4:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80265c8:	1208      	asrs	r0, r1, #8
 80265ca:	b2db      	uxtb	r3, r3
 80265cc:	1215      	asrs	r5, r2, #8
 80265ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80265d2:	fb10 f003 	smulbb	r0, r0, r3
 80265d6:	10cf      	asrs	r7, r1, #3
 80265d8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80265dc:	00c9      	lsls	r1, r1, #3
 80265de:	fb05 0504 	mla	r5, r5, r4, r0
 80265e2:	b2c9      	uxtb	r1, r1
 80265e4:	10d0      	asrs	r0, r2, #3
 80265e6:	00d2      	lsls	r2, r2, #3
 80265e8:	fb11 f103 	smulbb	r1, r1, r3
 80265ec:	b2d2      	uxtb	r2, r2
 80265ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80265f2:	fb02 1204 	mla	r2, r2, r4, r1
 80265f6:	fb17 f703 	smulbb	r7, r7, r3
 80265fa:	b2ad      	uxth	r5, r5
 80265fc:	b292      	uxth	r2, r2
 80265fe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026602:	fb00 7004 	mla	r0, r0, r4, r7
 8026606:	1c6b      	adds	r3, r5, #1
 8026608:	1c57      	adds	r7, r2, #1
 802660a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802660e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026612:	b280      	uxth	r0, r0
 8026614:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026618:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802661c:	433d      	orrs	r5, r7
 802661e:	1c47      	adds	r7, r0, #1
 8026620:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026624:	097f      	lsrs	r7, r7, #5
 8026626:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802662a:	433d      	orrs	r5, r7
 802662c:	f8ae 5000 	strh.w	r5, [lr]
 8026630:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026632:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026634:	4413      	add	r3, r2
 8026636:	9329      	str	r3, [sp, #164]	; 0xa4
 8026638:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802663a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802663c:	441a      	add	r2, r3
 802663e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026640:	922a      	str	r2, [sp, #168]	; 0xa8
 8026642:	3b01      	subs	r3, #1
 8026644:	f10e 0e02 	add.w	lr, lr, #2
 8026648:	9313      	str	r3, [sp, #76]	; 0x4c
 802664a:	e61c      	b.n	8026286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 802664c:	fb08 f000 	mul.w	r0, r8, r0
 8026650:	fb09 0303 	mla	r3, r9, r3, r0
 8026654:	e6dc      	b.n	8026410 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 8026656:	46b9      	mov	r9, r7
 8026658:	e704      	b.n	8026464 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 802665a:	f1c2 0110 	rsb	r1, r2, #16
 802665e:	437a      	muls	r2, r7
 8026660:	fb09 2901 	mla	r9, r9, r1, r2
 8026664:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026668:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802666c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026670:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026674:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026678:	4302      	orrs	r2, r0
 802667a:	e795      	b.n	80265a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 802667c:	f8ae 2000 	strh.w	r2, [lr]
 8026680:	e7d6      	b.n	8026630 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8026682:	b017      	add	sp, #92	; 0x5c
 8026684:	ecbd 8b08 	vpop	{d8-d11}
 8026688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802668c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026690:	b085      	sub	sp, #20
 8026692:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8026696:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802669a:	9103      	str	r1, [sp, #12]
 802669c:	fb05 7106 	mla	r1, r5, r6, r7
 80266a0:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80266a4:	2d00      	cmp	r5, #0
 80266a6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80266aa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80266ae:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80266b2:	9401      	str	r4, [sp, #4]
 80266b4:	eb02 0901 	add.w	r9, r2, r1
 80266b8:	f2c0 80c0 	blt.w	802683c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80266bc:	45a8      	cmp	r8, r5
 80266be:	f340 80bd 	ble.w	802683c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80266c2:	2f00      	cmp	r7, #0
 80266c4:	f2c0 80b6 	blt.w	8026834 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80266c8:	42be      	cmp	r6, r7
 80266ca:	f340 80b3 	ble.w	8026834 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80266ce:	f812 c001 	ldrb.w	ip, [r2, r1]
 80266d2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80266d6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80266da:	d019      	beq.n	8026710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80266dc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80266e0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80266e4:	435a      	muls	r2, r3
 80266e6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80266ea:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80266ee:	fb0c f403 	mul.w	r4, ip, r3
 80266f2:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80266f6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80266fa:	441a      	add	r2, r3
 80266fc:	f104 0320 	add.w	r3, r4, #32
 8026700:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026704:	0a1b      	lsrs	r3, r3, #8
 8026706:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 802670a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802670e:	4319      	orrs	r1, r3
 8026710:	b289      	uxth	r1, r1
 8026712:	1c7b      	adds	r3, r7, #1
 8026714:	f100 8097 	bmi.w	8026846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026718:	429e      	cmp	r6, r3
 802671a:	f340 8094 	ble.w	8026846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802671e:	2800      	cmp	r0, #0
 8026720:	f000 8094 	beq.w	802684c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8026724:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026728:	9b01      	ldr	r3, [sp, #4]
 802672a:	2cff      	cmp	r4, #255	; 0xff
 802672c:	885b      	ldrh	r3, [r3, #2]
 802672e:	d01b      	beq.n	8026768 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8026730:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8026734:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8026738:	fb0a f202 	mul.w	r2, sl, r2
 802673c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026740:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026744:	fb04 fa03 	mul.w	sl, r4, r3
 8026748:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802674c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026750:	441a      	add	r2, r3
 8026752:	f10a 0320 	add.w	r3, sl, #32
 8026756:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802675a:	0a1b      	lsrs	r3, r3, #8
 802675c:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8026760:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026764:	ea4b 0303 	orr.w	r3, fp, r3
 8026768:	b29b      	uxth	r3, r3
 802676a:	3501      	adds	r5, #1
 802676c:	d474      	bmi.n	8026858 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802676e:	45a8      	cmp	r8, r5
 8026770:	dd72      	ble.n	8026858 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026772:	f1be 0f00 	cmp.w	lr, #0
 8026776:	f000 8110 	beq.w	802699a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 802677a:	2f00      	cmp	r7, #0
 802677c:	db69      	blt.n	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802677e:	42be      	cmp	r6, r7
 8026780:	dd67      	ble.n	8026852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026782:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026786:	9a01      	ldr	r2, [sp, #4]
 8026788:	2dff      	cmp	r5, #255	; 0xff
 802678a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802678e:	d01c      	beq.n	80267ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8026790:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026794:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026798:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802679c:	fb05 fa0b 	mul.w	sl, r5, fp
 80267a0:	fb08 f802 	mul.w	r8, r8, r2
 80267a4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80267a8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80267ac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80267b0:	4490      	add	r8, r2
 80267b2:	f10a 0220 	add.w	r2, sl, #32
 80267b6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80267ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267be:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80267c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80267c6:	ea4b 0b0a 	orr.w	fp, fp, sl
 80267ca:	fa1f fb8b 	uxth.w	fp, fp
 80267ce:	3701      	adds	r7, #1
 80267d0:	d447      	bmi.n	8026862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80267d2:	42be      	cmp	r6, r7
 80267d4:	dd45      	ble.n	8026862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80267d6:	2800      	cmp	r0, #0
 80267d8:	d046      	beq.n	8026868 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80267da:	3601      	adds	r6, #1
 80267dc:	9a01      	ldr	r2, [sp, #4]
 80267de:	f819 7006 	ldrb.w	r7, [r9, r6]
 80267e2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80267e6:	2fff      	cmp	r7, #255	; 0xff
 80267e8:	d01a      	beq.n	8026820 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80267ea:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80267ee:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80267f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80267f6:	fb07 f902 	mul.w	r9, r7, r2
 80267fa:	fb08 f806 	mul.w	r8, r8, r6
 80267fe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026802:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026806:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802680a:	44b0      	add	r8, r6
 802680c:	f109 0620 	add.w	r6, r9, #32
 8026810:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026814:	0a36      	lsrs	r6, r6, #8
 8026816:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802681a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802681e:	4332      	orrs	r2, r6
 8026820:	b292      	uxth	r2, r2
 8026822:	280f      	cmp	r0, #15
 8026824:	d922      	bls.n	802686c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8026826:	4b61      	ldr	r3, [pc, #388]	; (80269ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8026828:	4a61      	ldr	r2, [pc, #388]	; (80269b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802682a:	4862      	ldr	r0, [pc, #392]	; (80269b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 802682c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8026830:	f005 ff14 	bl	802c65c <__assert_func>
 8026834:	f04f 0c00 	mov.w	ip, #0
 8026838:	4661      	mov	r1, ip
 802683a:	e76a      	b.n	8026712 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802683c:	2400      	movs	r4, #0
 802683e:	46a4      	mov	ip, r4
 8026840:	4623      	mov	r3, r4
 8026842:	4621      	mov	r1, r4
 8026844:	e791      	b.n	802676a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026846:	2400      	movs	r4, #0
 8026848:	4623      	mov	r3, r4
 802684a:	e78e      	b.n	802676a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802684c:	4604      	mov	r4, r0
 802684e:	4603      	mov	r3, r0
 8026850:	e78b      	b.n	802676a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026852:	2500      	movs	r5, #0
 8026854:	46ab      	mov	fp, r5
 8026856:	e7ba      	b.n	80267ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8026858:	2700      	movs	r7, #0
 802685a:	463d      	mov	r5, r7
 802685c:	463a      	mov	r2, r7
 802685e:	46bb      	mov	fp, r7
 8026860:	e7df      	b.n	8026822 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026862:	2700      	movs	r7, #0
 8026864:	463a      	mov	r2, r7
 8026866:	e7dc      	b.n	8026822 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026868:	4607      	mov	r7, r0
 802686a:	4602      	mov	r2, r0
 802686c:	f1be 0f0f 	cmp.w	lr, #15
 8026870:	d8d9      	bhi.n	8026826 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8026872:	b286      	uxth	r6, r0
 8026874:	fa1f f98e 	uxth.w	r9, lr
 8026878:	fb06 f809 	mul.w	r8, r6, r9
 802687c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026880:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026884:	0136      	lsls	r6, r6, #4
 8026886:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802688a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802688e:	9601      	str	r6, [sp, #4]
 8026890:	ea4a 0101 	orr.w	r1, sl, r1
 8026894:	fa1f f689 	uxth.w	r6, r9
 8026898:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 802689c:	fb10 f90e 	smulbb	r9, r0, lr
 80268a0:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80268a4:	9602      	str	r6, [sp, #8]
 80268a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80268aa:	460e      	mov	r6, r1
 80268ac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80268b0:	f1ce 0110 	rsb	r1, lr, #16
 80268b4:	1a09      	subs	r1, r1, r0
 80268b6:	ea4a 0303 	orr.w	r3, sl, r3
 80268ba:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80268be:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80268c2:	4343      	muls	r3, r0
 80268c4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80268c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80268cc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80268d0:	fb01 3106 	mla	r1, r1, r6, r3
 80268d4:	ea4a 0202 	orr.w	r2, sl, r2
 80268d8:	fb09 1302 	mla	r3, r9, r2, r1
 80268dc:	9a03      	ldr	r2, [sp, #12]
 80268de:	9802      	ldr	r0, [sp, #8]
 80268e0:	8811      	ldrh	r1, [r2, #0]
 80268e2:	9a01      	ldr	r2, [sp, #4]
 80268e4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80268e8:	1a12      	subs	r2, r2, r0
 80268ea:	9801      	ldr	r0, [sp, #4]
 80268ec:	eba0 0608 	sub.w	r6, r0, r8
 80268f0:	b2b6      	uxth	r6, r6
 80268f2:	b292      	uxth	r2, r2
 80268f4:	4374      	muls	r4, r6
 80268f6:	fb0c 4402 	mla	r4, ip, r2, r4
 80268fa:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80268fe:	9a02      	ldr	r2, [sp, #8]
 8026900:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026904:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026908:	fb02 4505 	mla	r5, r2, r5, r4
 802690c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026910:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026914:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026918:	fb08 5707 	mla	r7, r8, r7, r5
 802691c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8026920:	120a      	asrs	r2, r1, #8
 8026922:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026926:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802692a:	b2ff      	uxtb	r7, r7
 802692c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026930:	10c8      	asrs	r0, r1, #3
 8026932:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026936:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802693a:	00c9      	lsls	r1, r1, #3
 802693c:	437a      	muls	r2, r7
 802693e:	ea43 0e0e 	orr.w	lr, r3, lr
 8026942:	b2c9      	uxtb	r1, r1
 8026944:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026948:	fa1f f38e 	uxth.w	r3, lr
 802694c:	4378      	muls	r0, r7
 802694e:	434f      	muls	r7, r1
 8026950:	1c51      	adds	r1, r2, #1
 8026952:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8026956:	121a      	asrs	r2, r3, #8
 8026958:	f022 0207 	bic.w	r2, r2, #7
 802695c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026960:	1c41      	adds	r1, r0, #1
 8026962:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026966:	10d9      	asrs	r1, r3, #3
 8026968:	f021 0103 	bic.w	r1, r1, #3
 802696c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026970:	0212      	lsls	r2, r2, #8
 8026972:	00c9      	lsls	r1, r1, #3
 8026974:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026978:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802697c:	430a      	orrs	r2, r1
 802697e:	1c79      	adds	r1, r7, #1
 8026980:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026984:	00db      	lsls	r3, r3, #3
 8026986:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802698a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802698e:	4313      	orrs	r3, r2
 8026990:	9a03      	ldr	r2, [sp, #12]
 8026992:	8013      	strh	r3, [r2, #0]
 8026994:	b005      	add	sp, #20
 8026996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802699a:	280f      	cmp	r0, #15
 802699c:	f63f af43 	bhi.w	8026826 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80269a0:	4677      	mov	r7, lr
 80269a2:	4675      	mov	r5, lr
 80269a4:	4672      	mov	r2, lr
 80269a6:	46f3      	mov	fp, lr
 80269a8:	e763      	b.n	8026872 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80269aa:	bf00      	nop
 80269ac:	080315e5 	.word	0x080315e5
 80269b0:	08031bae 	.word	0x08031bae
 80269b4:	08031669 	.word	0x08031669

080269b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80269b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269bc:	ed2d 8b08 	vpush	{d8-d11}
 80269c0:	b093      	sub	sp, #76	; 0x4c
 80269c2:	eeb0 aa40 	vmov.f32	s20, s0
 80269c6:	9210      	str	r2, [sp, #64]	; 0x40
 80269c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80269ca:	910e      	str	r1, [sp, #56]	; 0x38
 80269cc:	9306      	str	r3, [sp, #24]
 80269ce:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80269d2:	9011      	str	r0, [sp, #68]	; 0x44
 80269d4:	6850      	ldr	r0, [r2, #4]
 80269d6:	6812      	ldr	r2, [r2, #0]
 80269d8:	fb00 1303 	mla	r3, r0, r3, r1
 80269dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80269e0:	9307      	str	r3, [sp, #28]
 80269e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269e4:	681b      	ldr	r3, [r3, #0]
 80269e6:	9308      	str	r3, [sp, #32]
 80269e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269ea:	685b      	ldr	r3, [r3, #4]
 80269ec:	9309      	str	r3, [sp, #36]	; 0x24
 80269ee:	eef0 9a60 	vmov.f32	s19, s1
 80269f2:	eeb0 9a41 	vmov.f32	s18, s2
 80269f6:	eeb0 8a62 	vmov.f32	s16, s5
 80269fa:	eef0 8a43 	vmov.f32	s17, s6
 80269fe:	eef0 ba44 	vmov.f32	s23, s8
 8026a02:	eeb0 ba64 	vmov.f32	s22, s9
 8026a06:	eef0 aa45 	vmov.f32	s21, s10
 8026a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a0c:	2b00      	cmp	r3, #0
 8026a0e:	dc03      	bgt.n	8026a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026a12:	2b00      	cmp	r3, #0
 8026a14:	f340 83b7 	ble.w	8027186 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ce>
 8026a18:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a1a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a1e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a22:	1e48      	subs	r0, r1, #1
 8026a24:	1e55      	subs	r5, r2, #1
 8026a26:	9b06      	ldr	r3, [sp, #24]
 8026a28:	2b00      	cmp	r3, #0
 8026a2a:	f340 819a 	ble.w	8026d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026a2e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8026a30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026a32:	1436      	asrs	r6, r6, #16
 8026a34:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026a38:	d406      	bmi.n	8026a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026a3a:	4286      	cmp	r6, r0
 8026a3c:	da04      	bge.n	8026a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026a3e:	2b00      	cmp	r3, #0
 8026a40:	db02      	blt.n	8026a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026a42:	42ab      	cmp	r3, r5
 8026a44:	f2c0 818e 	blt.w	8026d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8026a48:	3601      	adds	r6, #1
 8026a4a:	f100 817b 	bmi.w	8026d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026a4e:	42b1      	cmp	r1, r6
 8026a50:	f2c0 8178 	blt.w	8026d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026a54:	3301      	adds	r3, #1
 8026a56:	f100 8175 	bmi.w	8026d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026a5a:	429a      	cmp	r2, r3
 8026a5c:	f2c0 8172 	blt.w	8026d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026a60:	9b06      	ldr	r3, [sp, #24]
 8026a62:	9f07      	ldr	r7, [sp, #28]
 8026a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8026a66:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026a6c:	2b00      	cmp	r3, #0
 8026a6e:	f340 819b 	ble.w	8026da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8026a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026a74:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026a76:	1418      	asrs	r0, r3, #16
 8026a78:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026a7a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026a7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026a80:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026a84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a86:	142d      	asrs	r5, r5, #16
 8026a88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026a8c:	f100 81ef 	bmi.w	8026e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026a90:	f102 3eff 	add.w	lr, r2, #4294967295
 8026a94:	4575      	cmp	r5, lr
 8026a96:	f280 81ea 	bge.w	8026e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026a9a:	2800      	cmp	r0, #0
 8026a9c:	f2c0 81e7 	blt.w	8026e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026aa0:	f103 3eff 	add.w	lr, r3, #4294967295
 8026aa4:	4570      	cmp	r0, lr
 8026aa6:	f280 81e2 	bge.w	8026e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026aac:	b212      	sxth	r2, r2
 8026aae:	fb00 5002 	mla	r0, r0, r2, r5
 8026ab2:	fa1f fe81 	uxth.w	lr, r1
 8026ab6:	eb03 0a00 	add.w	sl, r3, r0
 8026aba:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026abe:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026ac2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026ac6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026aca:	b29b      	uxth	r3, r3
 8026acc:	f1bc 0f00 	cmp.w	ip, #0
 8026ad0:	f000 81b0 	beq.w	8026e34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8026ad4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026ad8:	940a      	str	r4, [sp, #40]	; 0x28
 8026ada:	eb0a 0b02 	add.w	fp, sl, r2
 8026ade:	fa1f fa8c 	uxth.w	sl, ip
 8026ae2:	fb0a fe0e 	mul.w	lr, sl, lr
 8026ae6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026aea:	fa1f fa8a 	uxth.w	sl, sl
 8026aee:	eba5 050e 	sub.w	r5, r5, lr
 8026af2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026af6:	940b      	str	r4, [sp, #44]	; 0x2c
 8026af8:	eba3 030a 	sub.w	r3, r3, sl
 8026afc:	b2ad      	uxth	r5, r5
 8026afe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026b00:	b29b      	uxth	r3, r3
 8026b02:	fb08 f505 	mul.w	r5, r8, r5
 8026b06:	fb09 5303 	mla	r3, r9, r3, r5
 8026b0a:	fb0a 3304 	mla	r3, sl, r4, r3
 8026b0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b10:	fb0e 3304 	mla	r3, lr, r4, r3
 8026b14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b18:	2b00      	cmp	r3, #0
 8026b1a:	f000 8106 	beq.w	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026b1e:	9c08      	ldr	r4, [sp, #32]
 8026b20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026b24:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026b28:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026b2c:	f000 8187 	beq.w	8026e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8026b30:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026b34:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026b38:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b3c:	fb09 f000 	mul.w	r0, r9, r0
 8026b40:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b44:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026b48:	f100 0b20 	add.w	fp, r0, #32
 8026b4c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026b50:	44ce      	add	lr, r9
 8026b52:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026b56:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026b5a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026b5e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026b62:	ea4e 0909 	orr.w	r9, lr, r9
 8026b66:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026b6a:	8868      	ldrh	r0, [r5, #2]
 8026b6c:	d019      	beq.n	8026ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026b6e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026b72:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026b76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b7a:	fb08 f800 	mul.w	r8, r8, r0
 8026b7e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b82:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026b86:	f108 0b20 	add.w	fp, r8, #32
 8026b8a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026b8e:	4486      	add	lr, r0
 8026b90:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026b94:	0a00      	lsrs	r0, r0, #8
 8026b96:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026b9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b9e:	ea4e 0000 	orr.w	r0, lr, r0
 8026ba2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026ba6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026baa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026bae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026bb2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026bb6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026bba:	ea4e 0909 	orr.w	r9, lr, r9
 8026bbe:	ea4a 0000 	orr.w	r0, sl, r0
 8026bc2:	f1bc 0f00 	cmp.w	ip, #0
 8026bc6:	f000 813c 	beq.w	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8026bca:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026bce:	3a01      	subs	r2, #1
 8026bd0:	0052      	lsls	r2, r2, #1
 8026bd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026bd4:	3202      	adds	r2, #2
 8026bd6:	2cff      	cmp	r4, #255	; 0xff
 8026bd8:	eb05 0e02 	add.w	lr, r5, r2
 8026bdc:	5aaa      	ldrh	r2, [r5, r2]
 8026bde:	d018      	beq.n	8026c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026be0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026be4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026be8:	fb04 fa02 	mul.w	sl, r4, r2
 8026bec:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026bf0:	fb08 f805 	mul.w	r8, r8, r5
 8026bf4:	f10a 0520 	add.w	r5, sl, #32
 8026bf8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026bfc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026c00:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026c04:	4442      	add	r2, r8
 8026c06:	0a2d      	lsrs	r5, r5, #8
 8026c08:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026c0c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026c10:	432a      	orrs	r2, r5
 8026c12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026c14:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026c18:	2cff      	cmp	r4, #255	; 0xff
 8026c1a:	d01a      	beq.n	8026c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8026c1c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026c20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026c24:	fb04 fa05 	mul.w	sl, r4, r5
 8026c28:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c2c:	fb08 f80e 	mul.w	r8, r8, lr
 8026c30:	f10a 0e20 	add.w	lr, sl, #32
 8026c34:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026c38:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026c3c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026c40:	4445      	add	r5, r8
 8026c42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c46:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026c4a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026c4e:	ea45 050e 	orr.w	r5, r5, lr
 8026c52:	fb1c fe01 	smulbb	lr, ip, r1
 8026c56:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026c5a:	f1cc 0810 	rsb	r8, ip, #16
 8026c5e:	eba8 0801 	sub.w	r8, r8, r1
 8026c62:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026c66:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026c6a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026c6e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026c72:	4341      	muls	r1, r0
 8026c74:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c78:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026c7c:	ea4a 0202 	orr.w	r2, sl, r2
 8026c80:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026c84:	fb09 1108 	mla	r1, r9, r8, r1
 8026c88:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026c8c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026c90:	fb0c 1102 	mla	r1, ip, r2, r1
 8026c94:	ea4b 0505 	orr.w	r5, fp, r5
 8026c98:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026c9c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026ca0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026ca4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026ca8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026cac:	ea42 0e0e 	orr.w	lr, r2, lr
 8026cb0:	fa1f f28e 	uxth.w	r2, lr
 8026cb4:	2bff      	cmp	r3, #255	; 0xff
 8026cb6:	f000 80d8 	beq.w	8026e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8026cba:	f8b7 c000 	ldrh.w	ip, [r7]
 8026cbe:	43db      	mvns	r3, r3
 8026cc0:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026cc4:	fa5f fe83 	uxtb.w	lr, r3
 8026cc8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026ccc:	fb00 f00e 	mul.w	r0, r0, lr
 8026cd0:	1c41      	adds	r1, r0, #1
 8026cd2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026cd6:	1211      	asrs	r1, r2, #8
 8026cd8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026cdc:	f021 0107 	bic.w	r1, r1, #7
 8026ce0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026ce4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026ce8:	486f      	ldr	r0, [pc, #444]	; (8026ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026cea:	fb05 f50e 	mul.w	r5, r5, lr
 8026cee:	b2c9      	uxtb	r1, r1
 8026cf0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026cf4:	1c69      	adds	r1, r5, #1
 8026cf6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8026cfa:	10d1      	asrs	r1, r2, #3
 8026cfc:	f021 0103 	bic.w	r1, r1, #3
 8026d00:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026d04:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026d08:	b2db      	uxtb	r3, r3
 8026d0a:	00c9      	lsls	r1, r1, #3
 8026d0c:	fb03 f30e 	mul.w	r3, r3, lr
 8026d10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026d14:	4301      	orrs	r1, r0
 8026d16:	1c58      	adds	r0, r3, #1
 8026d18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026d1c:	00d3      	lsls	r3, r2, #3
 8026d1e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026d22:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026d26:	4319      	orrs	r1, r3
 8026d28:	8039      	strh	r1, [r7, #0]
 8026d2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026d2c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026d2e:	4413      	add	r3, r2
 8026d30:	9325      	str	r3, [sp, #148]	; 0x94
 8026d32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d36:	441a      	add	r2, r3
 8026d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026d3a:	9226      	str	r2, [sp, #152]	; 0x98
 8026d3c:	3b01      	subs	r3, #1
 8026d3e:	3702      	adds	r7, #2
 8026d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d42:	e692      	b.n	8026a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026d44:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026d46:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8026d48:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8026d4a:	4433      	add	r3, r6
 8026d4c:	9325      	str	r3, [sp, #148]	; 0x94
 8026d4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d50:	441c      	add	r4, r3
 8026d52:	9b06      	ldr	r3, [sp, #24]
 8026d54:	9426      	str	r4, [sp, #152]	; 0x98
 8026d56:	3b01      	subs	r3, #1
 8026d58:	9306      	str	r3, [sp, #24]
 8026d5a:	9b07      	ldr	r3, [sp, #28]
 8026d5c:	3302      	adds	r3, #2
 8026d5e:	9307      	str	r3, [sp, #28]
 8026d60:	e661      	b.n	8026a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026d62:	d028      	beq.n	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8026d64:	9b06      	ldr	r3, [sp, #24]
 8026d66:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026d68:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026d6a:	3b01      	subs	r3, #1
 8026d6c:	fb00 5003 	mla	r0, r0, r3, r5
 8026d70:	1400      	asrs	r0, r0, #16
 8026d72:	f53f ae75 	bmi.w	8026a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026d76:	3901      	subs	r1, #1
 8026d78:	4288      	cmp	r0, r1
 8026d7a:	f6bf ae71 	bge.w	8026a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026d7e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026d80:	9826      	ldr	r0, [sp, #152]	; 0x98
 8026d82:	fb01 0303 	mla	r3, r1, r3, r0
 8026d86:	141b      	asrs	r3, r3, #16
 8026d88:	f53f ae6a 	bmi.w	8026a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026d8c:	3a01      	subs	r2, #1
 8026d8e:	4293      	cmp	r3, r2
 8026d90:	f6bf ae66 	bge.w	8026a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026d94:	9b06      	ldr	r3, [sp, #24]
 8026d96:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026d9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d9c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026da2:	2b00      	cmp	r3, #0
 8026da4:	f300 8082 	bgt.w	8026eac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8026da8:	9b06      	ldr	r3, [sp, #24]
 8026daa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026dae:	9b07      	ldr	r3, [sp, #28]
 8026db0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026db4:	9307      	str	r3, [sp, #28]
 8026db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026db8:	2b00      	cmp	r3, #0
 8026dba:	f340 81e4 	ble.w	8027186 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ce>
 8026dbe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026dc6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026dca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026dcc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026dd0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026dd4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026dd8:	eef0 6a48 	vmov.f32	s13, s16
 8026ddc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026de0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026de4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026de8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026dec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026df0:	eef0 6a68 	vmov.f32	s13, s17
 8026df4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026df8:	ee18 2a10 	vmov	r2, s16
 8026dfc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026e00:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e04:	ee18 2a90 	vmov	r2, s17
 8026e08:	9327      	str	r3, [sp, #156]	; 0x9c
 8026e0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e10:	9328      	str	r3, [sp, #160]	; 0xa0
 8026e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026e16:	3b01      	subs	r3, #1
 8026e18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8026e1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e20:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8026e24:	bf08      	it	eq
 8026e26:	4613      	moveq	r3, r2
 8026e28:	9306      	str	r3, [sp, #24]
 8026e2a:	eef0 8a67 	vmov.f32	s17, s15
 8026e2e:	eeb0 8a47 	vmov.f32	s16, s14
 8026e32:	e5ea      	b.n	8026a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026e34:	fb08 f505 	mul.w	r5, r8, r5
 8026e38:	fb09 5303 	mla	r3, r9, r3, r5
 8026e3c:	e66a      	b.n	8026b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8026e3e:	4681      	mov	r9, r0
 8026e40:	e691      	b.n	8026b66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026e42:	f1c1 0210 	rsb	r2, r1, #16
 8026e46:	4341      	muls	r1, r0
 8026e48:	fb09 1902 	mla	r9, r9, r2, r1
 8026e4c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026e50:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026e54:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026e58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e5c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026e60:	ea42 0909 	orr.w	r9, r2, r9
 8026e64:	fa1f f289 	uxth.w	r2, r9
 8026e68:	e724      	b.n	8026cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026e6a:	803a      	strh	r2, [r7, #0]
 8026e6c:	e75d      	b.n	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026e6e:	f115 0e01 	adds.w	lr, r5, #1
 8026e72:	f53f af5a 	bmi.w	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026e76:	4572      	cmp	r2, lr
 8026e78:	f6ff af57 	blt.w	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026e7c:	f110 0e01 	adds.w	lr, r0, #1
 8026e80:	f53f af53 	bmi.w	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026e84:	4573      	cmp	r3, lr
 8026e86:	f6ff af50 	blt.w	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026e8a:	b21b      	sxth	r3, r3
 8026e8c:	b212      	sxth	r2, r2
 8026e8e:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026e92:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026e96:	9301      	str	r3, [sp, #4]
 8026e98:	9200      	str	r2, [sp, #0]
 8026e9a:	4639      	mov	r1, r7
 8026e9c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026ea0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026ea2:	f7ff fbf3 	bl	802668c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026ea6:	e740      	b.n	8026d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026ea8:	fffff800 	.word	0xfffff800
 8026eac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026eae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026eb4:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026eb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026eba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026ec0:	141f      	asrs	r7, r3, #16
 8026ec2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026ec4:	141b      	asrs	r3, r3, #16
 8026ec6:	fb01 3707 	mla	r7, r1, r7, r3
 8026eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ecc:	fa1f fc82 	uxth.w	ip, r2
 8026ed0:	eb03 0a07 	add.w	sl, r3, r7
 8026ed4:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026ed8:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026edc:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026ee0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026ee4:	b29b      	uxth	r3, r3
 8026ee6:	2d00      	cmp	r5, #0
 8026ee8:	f000 8132 	beq.w	8027150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x798>
 8026eec:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026ef0:	940c      	str	r4, [sp, #48]	; 0x30
 8026ef2:	eb0a 0b01 	add.w	fp, sl, r1
 8026ef6:	fa1f fa85 	uxth.w	sl, r5
 8026efa:	fb0a fc0c 	mul.w	ip, sl, ip
 8026efe:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026f02:	fa1f fa8a 	uxth.w	sl, sl
 8026f06:	eba0 000c 	sub.w	r0, r0, ip
 8026f0a:	eba3 030a 	sub.w	r3, r3, sl
 8026f0e:	b280      	uxth	r0, r0
 8026f10:	fb08 f000 	mul.w	r0, r8, r0
 8026f14:	b29b      	uxth	r3, r3
 8026f16:	fb09 0303 	mla	r3, r9, r3, r0
 8026f1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026f1c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026f20:	940d      	str	r4, [sp, #52]	; 0x34
 8026f22:	fb0a 3300 	mla	r3, sl, r0, r3
 8026f26:	fb0c 3304 	mla	r3, ip, r4, r3
 8026f2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026f2e:	2b00      	cmp	r3, #0
 8026f30:	f000 8100 	beq.w	8027134 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8026f34:	9808      	ldr	r0, [sp, #32]
 8026f36:	9c08      	ldr	r4, [sp, #32]
 8026f38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026f3c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026f40:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026f44:	f000 8109 	beq.w	802715a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a2>
 8026f48:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026f4c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026f50:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026f54:	fb09 f707 	mul.w	r7, r9, r7
 8026f58:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f5c:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026f60:	f107 0b20 	add.w	fp, r7, #32
 8026f64:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026f68:	44cc      	add	ip, r9
 8026f6a:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026f6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f72:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026f76:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026f7a:	ea4c 0909 	orr.w	r9, ip, r9
 8026f7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026f82:	8847      	ldrh	r7, [r0, #2]
 8026f84:	d019      	beq.n	8026fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 8026f86:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026f8a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026f8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026f92:	fb08 f807 	mul.w	r8, r8, r7
 8026f96:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f9a:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026f9e:	f108 0b20 	add.w	fp, r8, #32
 8026fa2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026fa6:	44bc      	add	ip, r7
 8026fa8:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026fac:	0a3f      	lsrs	r7, r7, #8
 8026fae:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026fb2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026fb6:	ea4c 0707 	orr.w	r7, ip, r7
 8026fba:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026fbe:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026fc2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026fc6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026fca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026fce:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026fd2:	ea4c 0909 	orr.w	r9, ip, r9
 8026fd6:	ea4a 0707 	orr.w	r7, sl, r7
 8026fda:	2d00      	cmp	r5, #0
 8026fdc:	f000 80bf 	beq.w	802715e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8026fe0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026fe4:	3901      	subs	r1, #1
 8026fe6:	0049      	lsls	r1, r1, #1
 8026fe8:	3102      	adds	r1, #2
 8026fea:	eb00 0c01 	add.w	ip, r0, r1
 8026fee:	5a41      	ldrh	r1, [r0, r1]
 8026ff0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026ff2:	28ff      	cmp	r0, #255	; 0xff
 8026ff4:	d019      	beq.n	802702a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8026ff6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026ff8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026ffc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027000:	fb04 fa01 	mul.w	sl, r4, r1
 8027004:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027008:	fb08 f800 	mul.w	r8, r8, r0
 802700c:	f10a 0020 	add.w	r0, sl, #32
 8027010:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027014:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027018:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802701c:	4441      	add	r1, r8
 802701e:	0a00      	lsrs	r0, r0, #8
 8027020:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027024:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027028:	4301      	orrs	r1, r0
 802702a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802702c:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027030:	2cff      	cmp	r4, #255	; 0xff
 8027032:	d01a      	beq.n	802706a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b2>
 8027034:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027038:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802703c:	fb04 fa00 	mul.w	sl, r4, r0
 8027040:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027044:	fb08 f80c 	mul.w	r8, r8, ip
 8027048:	f10a 0c20 	add.w	ip, sl, #32
 802704c:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027050:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027054:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027058:	4440      	add	r0, r8
 802705a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802705e:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027062:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027066:	ea40 000c 	orr.w	r0, r0, ip
 802706a:	fb15 fc02 	smulbb	ip, r5, r2
 802706e:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027072:	f1c5 0810 	rsb	r8, r5, #16
 8027076:	eba8 0802 	sub.w	r8, r8, r2
 802707a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802707e:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027082:	437a      	muls	r2, r7
 8027084:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027088:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802708c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027090:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027094:	fb09 2208 	mla	r2, r9, r8, r2
 8027098:	ea4a 0101 	orr.w	r1, sl, r1
 802709c:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80270a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80270a4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80270a8:	fb05 2201 	mla	r2, r5, r1, r2
 80270ac:	ea4b 0000 	orr.w	r0, fp, r0
 80270b0:	fb0c 2200 	mla	r2, ip, r0, r2
 80270b4:	0d57      	lsrs	r7, r2, #21
 80270b6:	0952      	lsrs	r2, r2, #5
 80270b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80270bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80270c0:	433a      	orrs	r2, r7
 80270c2:	2bff      	cmp	r3, #255	; 0xff
 80270c4:	b292      	uxth	r2, r2
 80270c6:	d05b      	beq.n	8027180 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 80270c8:	f8be 7000 	ldrh.w	r7, [lr]
 80270cc:	4c30      	ldr	r4, [pc, #192]	; (8027190 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 80270ce:	43db      	mvns	r3, r3
 80270d0:	1238      	asrs	r0, r7, #8
 80270d2:	fa5f fc83 	uxtb.w	ip, r3
 80270d6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80270da:	10fd      	asrs	r5, r7, #3
 80270dc:	fb00 f00c 	mul.w	r0, r0, ip
 80270e0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80270e4:	fb05 f10c 	mul.w	r1, r5, ip
 80270e8:	1c45      	adds	r5, r0, #1
 80270ea:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80270ee:	1215      	asrs	r5, r2, #8
 80270f0:	f025 0507 	bic.w	r5, r5, #7
 80270f4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80270f8:	1c4d      	adds	r5, r1, #1
 80270fa:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80270fe:	10d1      	asrs	r1, r2, #3
 8027100:	f021 0103 	bic.w	r1, r1, #3
 8027104:	00fb      	lsls	r3, r7, #3
 8027106:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802710a:	b2db      	uxtb	r3, r3
 802710c:	b2c0      	uxtb	r0, r0
 802710e:	00c9      	lsls	r1, r1, #3
 8027110:	fb03 f30c 	mul.w	r3, r3, ip
 8027114:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027118:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802711c:	4308      	orrs	r0, r1
 802711e:	1c59      	adds	r1, r3, #1
 8027120:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027124:	00d2      	lsls	r2, r2, #3
 8027126:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802712a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802712e:	4318      	orrs	r0, r3
 8027130:	f8ae 0000 	strh.w	r0, [lr]
 8027134:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027136:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027138:	4413      	add	r3, r2
 802713a:	9325      	str	r3, [sp, #148]	; 0x94
 802713c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802713e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027140:	441a      	add	r2, r3
 8027142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027144:	9226      	str	r2, [sp, #152]	; 0x98
 8027146:	3b01      	subs	r3, #1
 8027148:	f10e 0e02 	add.w	lr, lr, #2
 802714c:	930f      	str	r3, [sp, #60]	; 0x3c
 802714e:	e627      	b.n	8026da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e8>
 8027150:	fb08 f000 	mul.w	r0, r8, r0
 8027154:	fb09 0303 	mla	r3, r9, r3, r0
 8027158:	e6e7      	b.n	8026f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x572>
 802715a:	46b9      	mov	r9, r7
 802715c:	e70f      	b.n	8026f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 802715e:	f1c2 0110 	rsb	r1, r2, #16
 8027162:	437a      	muls	r2, r7
 8027164:	fb09 2901 	mla	r9, r9, r1, r2
 8027168:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802716c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027170:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027174:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027178:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802717c:	4302      	orrs	r2, r0
 802717e:	e7a0      	b.n	80270c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027180:	f8ae 2000 	strh.w	r2, [lr]
 8027184:	e7d6      	b.n	8027134 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8027186:	b013      	add	sp, #76	; 0x4c
 8027188:	ecbd 8b08 	vpop	{d8-d11}
 802718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027190:	fffff800 	.word	0xfffff800

08027194 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027198:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 802719c:	fb0c 4e03 	mla	lr, ip, r3, r4
 80271a0:	f1bc 0f00 	cmp.w	ip, #0
 80271a4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80271a8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80271ac:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80271b0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80271b4:	8808      	ldrh	r0, [r1, #0]
 80271b6:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80271ba:	db2f      	blt.n	802721c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80271bc:	45e2      	cmp	sl, ip
 80271be:	dd2d      	ble.n	802721c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80271c0:	2c00      	cmp	r4, #0
 80271c2:	db29      	blt.n	8027218 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80271c4:	42a3      	cmp	r3, r4
 80271c6:	dd27      	ble.n	8027218 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80271c8:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80271cc:	1c62      	adds	r2, r4, #1
 80271ce:	d428      	bmi.n	8027222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80271d0:	4293      	cmp	r3, r2
 80271d2:	dd26      	ble.n	8027222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80271d4:	b32f      	cbz	r7, 8027222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80271d6:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80271da:	f11c 0c01 	adds.w	ip, ip, #1
 80271de:	d424      	bmi.n	802722a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80271e0:	45e2      	cmp	sl, ip
 80271e2:	dd22      	ble.n	802722a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80271e4:	2e00      	cmp	r6, #0
 80271e6:	f000 809d 	beq.w	8027324 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 80271ea:	2c00      	cmp	r4, #0
 80271ec:	db1b      	blt.n	8027226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80271ee:	42a3      	cmp	r3, r4
 80271f0:	dd19      	ble.n	8027226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80271f2:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80271f6:	3401      	adds	r4, #1
 80271f8:	d41a      	bmi.n	8027230 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80271fa:	42a3      	cmp	r3, r4
 80271fc:	dd18      	ble.n	8027230 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80271fe:	b1cf      	cbz	r7, 8027234 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8027200:	3301      	adds	r3, #1
 8027202:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027206:	2f0f      	cmp	r7, #15
 8027208:	d915      	bls.n	8027236 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802720a:	4b49      	ldr	r3, [pc, #292]	; (8027330 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802720c:	4a49      	ldr	r2, [pc, #292]	; (8027334 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802720e:	484a      	ldr	r0, [pc, #296]	; (8027338 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8027210:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8027214:	f005 fa22 	bl	802c65c <__assert_func>
 8027218:	4681      	mov	r9, r0
 802721a:	e7d7      	b.n	80271cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802721c:	4686      	mov	lr, r0
 802721e:	4681      	mov	r9, r0
 8027220:	e7db      	b.n	80271da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027222:	4686      	mov	lr, r0
 8027224:	e7d9      	b.n	80271da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027226:	4684      	mov	ip, r0
 8027228:	e7e5      	b.n	80271f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802722a:	4603      	mov	r3, r0
 802722c:	4684      	mov	ip, r0
 802722e:	e7ea      	b.n	8027206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027230:	4603      	mov	r3, r0
 8027232:	e7e8      	b.n	8027206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027234:	4603      	mov	r3, r0
 8027236:	2e0f      	cmp	r6, #15
 8027238:	d8e7      	bhi.n	802720a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802723a:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802723e:	fb17 f806 	smulbb	r8, r7, r6
 8027242:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027246:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 802724a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802724e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8027252:	ea44 0909 	orr.w	r9, r4, r9
 8027256:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802725a:	f1c6 0410 	rsb	r4, r6, #16
 802725e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027262:	1be4      	subs	r4, r4, r7
 8027264:	041a      	lsls	r2, r3, #16
 8027266:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 802726a:	ea4a 0e0e 	orr.w	lr, sl, lr
 802726e:	fb07 fe0e 	mul.w	lr, r7, lr
 8027272:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027276:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802727a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802727e:	fb04 e409 	mla	r4, r4, r9, lr
 8027282:	4313      	orrs	r3, r2
 8027284:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8027288:	fb08 4303 	mla	r3, r8, r3, r4
 802728c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027290:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8027294:	4322      	orrs	r2, r4
 8027296:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802729a:	fb06 3202 	mla	r2, r6, r2, r3
 802729e:	0d53      	lsrs	r3, r2, #21
 80272a0:	0952      	lsrs	r2, r2, #5
 80272a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80272a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80272aa:	431a      	orrs	r2, r3
 80272ac:	b293      	uxth	r3, r2
 80272ae:	b2af      	uxth	r7, r5
 80272b0:	1202      	asrs	r2, r0, #8
 80272b2:	43ed      	mvns	r5, r5
 80272b4:	b2ed      	uxtb	r5, r5
 80272b6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80272ba:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80272be:	fb12 f205 	smulbb	r2, r2, r5
 80272c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80272c6:	fb0c 2c07 	mla	ip, ip, r7, r2
 80272ca:	00dc      	lsls	r4, r3, #3
 80272cc:	10da      	asrs	r2, r3, #3
 80272ce:	10c6      	asrs	r6, r0, #3
 80272d0:	00c3      	lsls	r3, r0, #3
 80272d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80272d6:	b2db      	uxtb	r3, r3
 80272d8:	fb16 f605 	smulbb	r6, r6, r5
 80272dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80272e0:	b2e4      	uxtb	r4, r4
 80272e2:	fb13 f305 	smulbb	r3, r3, r5
 80272e6:	fa1f fc8c 	uxth.w	ip, ip
 80272ea:	fb02 6207 	mla	r2, r2, r7, r6
 80272ee:	fb04 3307 	mla	r3, r4, r7, r3
 80272f2:	b296      	uxth	r6, r2
 80272f4:	b29a      	uxth	r2, r3
 80272f6:	f10c 0301 	add.w	r3, ip, #1
 80272fa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80272fe:	1c53      	adds	r3, r2, #1
 8027300:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027304:	1c72      	adds	r2, r6, #1
 8027306:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802730a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802730e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027312:	0952      	lsrs	r2, r2, #5
 8027314:	ea43 030c 	orr.w	r3, r3, ip
 8027318:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802731c:	4313      	orrs	r3, r2
 802731e:	800b      	strh	r3, [r1, #0]
 8027320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027324:	2f0f      	cmp	r7, #15
 8027326:	f63f af70 	bhi.w	802720a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802732a:	4603      	mov	r3, r0
 802732c:	4684      	mov	ip, r0
 802732e:	e784      	b.n	802723a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8027330:	080315e5 	.word	0x080315e5
 8027334:	08031c57 	.word	0x08031c57
 8027338:	08031669 	.word	0x08031669

0802733c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027340:	ed2d 8b08 	vpush	{d8-d11}
 8027344:	b093      	sub	sp, #76	; 0x4c
 8027346:	461d      	mov	r5, r3
 8027348:	9210      	str	r2, [sp, #64]	; 0x40
 802734a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802734c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8027350:	920b      	str	r2, [sp, #44]	; 0x2c
 8027352:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8027356:	910a      	str	r1, [sp, #40]	; 0x28
 8027358:	6859      	ldr	r1, [r3, #4]
 802735a:	681b      	ldr	r3, [r3, #0]
 802735c:	9011      	str	r0, [sp, #68]	; 0x44
 802735e:	fb01 2707 	mla	r7, r1, r7, r2
 8027362:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027366:	9307      	str	r3, [sp, #28]
 8027368:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802736a:	681b      	ldr	r3, [r3, #0]
 802736c:	9309      	str	r3, [sp, #36]	; 0x24
 802736e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027370:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027374:	43db      	mvns	r3, r3
 8027376:	b2db      	uxtb	r3, r3
 8027378:	eeb0 aa40 	vmov.f32	s20, s0
 802737c:	eef0 9a60 	vmov.f32	s19, s1
 8027380:	eeb0 9a41 	vmov.f32	s18, s2
 8027384:	eeb0 8a62 	vmov.f32	s16, s5
 8027388:	eef0 8a43 	vmov.f32	s17, s6
 802738c:	eef0 ba44 	vmov.f32	s23, s8
 8027390:	eeb0 ba64 	vmov.f32	s22, s9
 8027394:	eef0 aa45 	vmov.f32	s21, s10
 8027398:	9308      	str	r3, [sp, #32]
 802739a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802739c:	2b00      	cmp	r3, #0
 802739e:	dc03      	bgt.n	80273a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80273a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80273a2:	2b00      	cmp	r3, #0
 80273a4:	f340 8203 	ble.w	80277ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80273a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80273aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80273ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80273b2:	1e48      	subs	r0, r1, #1
 80273b4:	f102 3cff 	add.w	ip, r2, #4294967295
 80273b8:	2d00      	cmp	r5, #0
 80273ba:	f340 80da 	ble.w	8027572 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80273be:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80273c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80273c6:	d406      	bmi.n	80273d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80273c8:	4586      	cmp	lr, r0
 80273ca:	da04      	bge.n	80273d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	db02      	blt.n	80273d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80273d0:	4563      	cmp	r3, ip
 80273d2:	f2c0 80cf 	blt.w	8027574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80273d6:	f11e 0e01 	adds.w	lr, lr, #1
 80273da:	f100 80c1 	bmi.w	8027560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80273de:	4571      	cmp	r1, lr
 80273e0:	f2c0 80be 	blt.w	8027560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80273e4:	3301      	adds	r3, #1
 80273e6:	f100 80bb 	bmi.w	8027560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80273ea:	429a      	cmp	r2, r3
 80273ec:	f2c0 80b8 	blt.w	8027560 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80273f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80273f4:	46a9      	mov	r9, r5
 80273f6:	f1b9 0f00 	cmp.w	r9, #0
 80273fa:	f340 80d8 	ble.w	80275ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80273fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027400:	1421      	asrs	r1, r4, #16
 8027402:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027406:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802740a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802740e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027412:	f100 8111 	bmi.w	8027638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027416:	f10e 3aff 	add.w	sl, lr, #4294967295
 802741a:	4551      	cmp	r1, sl
 802741c:	f280 810c 	bge.w	8027638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027420:	2800      	cmp	r0, #0
 8027422:	f2c0 8109 	blt.w	8027638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027426:	f103 3aff 	add.w	sl, r3, #4294967295
 802742a:	4550      	cmp	r0, sl
 802742c:	f280 8104 	bge.w	8027638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027430:	fa0f f38e 	sxth.w	r3, lr
 8027434:	fb00 1103 	mla	r1, r0, r3, r1
 8027438:	9809      	ldr	r0, [sp, #36]	; 0x24
 802743a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802743e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027442:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027446:	f1bc 0f00 	cmp.w	ip, #0
 802744a:	d007      	beq.n	802745c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 802744c:	005b      	lsls	r3, r3, #1
 802744e:	eb0a 0003 	add.w	r0, sl, r3
 8027452:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027456:	930c      	str	r3, [sp, #48]	; 0x30
 8027458:	8843      	ldrh	r3, [r0, #2]
 802745a:	930d      	str	r3, [sp, #52]	; 0x34
 802745c:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027460:	fb12 f30c 	smulbb	r3, r2, ip
 8027464:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027468:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802746c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027470:	10db      	asrs	r3, r3, #3
 8027472:	ea40 000e 	orr.w	r0, r0, lr
 8027476:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802747a:	f1cc 0e10 	rsb	lr, ip, #16
 802747e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027482:	ebae 0e02 	sub.w	lr, lr, r2
 8027486:	ea4a 0101 	orr.w	r1, sl, r1
 802748a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802748e:	4351      	muls	r1, r2
 8027490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027492:	9f08      	ldr	r7, [sp, #32]
 8027494:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027498:	fb0e 1e00 	mla	lr, lr, r0, r1
 802749c:	0410      	lsls	r0, r2, #16
 802749e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80274a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80274a6:	4310      	orrs	r0, r2
 80274a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80274aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80274ac:	0412      	lsls	r2, r2, #16
 80274ae:	fb03 e000 	mla	r0, r3, r0, lr
 80274b2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80274b6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80274ba:	ea42 020e 	orr.w	r2, r2, lr
 80274be:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80274c2:	fb03 0302 	mla	r3, r3, r2, r0
 80274c6:	0d5a      	lsrs	r2, r3, #21
 80274c8:	095b      	lsrs	r3, r3, #5
 80274ca:	f8b8 0000 	ldrh.w	r0, [r8]
 80274ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80274d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80274d6:	4313      	orrs	r3, r2
 80274d8:	b29b      	uxth	r3, r3
 80274da:	1201      	asrs	r1, r0, #8
 80274dc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80274e0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80274e4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80274e8:	fb11 f107 	smulbb	r1, r1, r7
 80274ec:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80274f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80274f4:	00c0      	lsls	r0, r0, #3
 80274f6:	fb0c 1c02 	mla	ip, ip, r2, r1
 80274fa:	b2c0      	uxtb	r0, r0
 80274fc:	10d9      	asrs	r1, r3, #3
 80274fe:	00db      	lsls	r3, r3, #3
 8027500:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027504:	b2db      	uxtb	r3, r3
 8027506:	fb10 f007 	smulbb	r0, r0, r7
 802750a:	fa1f fc8c 	uxth.w	ip, ip
 802750e:	fb03 0302 	mla	r3, r3, r2, r0
 8027512:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027516:	fb1e fe07 	smulbb	lr, lr, r7
 802751a:	fb01 e102 	mla	r1, r1, r2, lr
 802751e:	b29a      	uxth	r2, r3
 8027520:	f10c 0301 	add.w	r3, ip, #1
 8027524:	b289      	uxth	r1, r1
 8027526:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802752a:	1c53      	adds	r3, r2, #1
 802752c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027530:	1c4a      	adds	r2, r1, #1
 8027532:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027536:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802753a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802753e:	0949      	lsrs	r1, r1, #5
 8027540:	ea43 030c 	orr.w	r3, r3, ip
 8027544:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027548:	430b      	orrs	r3, r1
 802754a:	f8a8 3000 	strh.w	r3, [r8]
 802754e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027550:	441c      	add	r4, r3
 8027552:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027554:	f108 0802 	add.w	r8, r8, #2
 8027558:	441e      	add	r6, r3
 802755a:	f109 39ff 	add.w	r9, r9, #4294967295
 802755e:	e74a      	b.n	80273f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027560:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027562:	441c      	add	r4, r3
 8027564:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027566:	441e      	add	r6, r3
 8027568:	9b07      	ldr	r3, [sp, #28]
 802756a:	3302      	adds	r3, #2
 802756c:	3d01      	subs	r5, #1
 802756e:	9307      	str	r3, [sp, #28]
 8027570:	e722      	b.n	80273b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027572:	d022      	beq.n	80275ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027574:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027576:	1e6b      	subs	r3, r5, #1
 8027578:	fb00 4003 	mla	r0, r0, r3, r4
 802757c:	1400      	asrs	r0, r0, #16
 802757e:	f53f af37 	bmi.w	80273f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027582:	3901      	subs	r1, #1
 8027584:	4288      	cmp	r0, r1
 8027586:	f6bf af33 	bge.w	80273f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802758a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802758c:	fb01 6303 	mla	r3, r1, r3, r6
 8027590:	141b      	asrs	r3, r3, #16
 8027592:	f53f af2d 	bmi.w	80273f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027596:	3a01      	subs	r2, #1
 8027598:	4293      	cmp	r3, r2
 802759a:	f6bf af29 	bge.w	80273f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802759e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80275a2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80275a6:	46a8      	mov	r8, r5
 80275a8:	f1b8 0f00 	cmp.w	r8, #0
 80275ac:	dc5e      	bgt.n	802766c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80275ae:	9b07      	ldr	r3, [sp, #28]
 80275b0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80275b4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80275b8:	9307      	str	r3, [sp, #28]
 80275ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80275bc:	2b00      	cmp	r3, #0
 80275be:	f340 80f6 	ble.w	80277ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80275c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80275c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80275ca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80275ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80275d0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80275d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80275d8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80275dc:	eef0 6a48 	vmov.f32	s13, s16
 80275e0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80275e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80275ec:	ee16 4a90 	vmov	r4, s13
 80275f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80275f4:	eef0 6a68 	vmov.f32	s13, s17
 80275f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80275fc:	ee18 2a10 	vmov	r2, s16
 8027600:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027604:	fb92 f3f3 	sdiv	r3, r2, r3
 8027608:	ee18 2a90 	vmov	r2, s17
 802760c:	9327      	str	r3, [sp, #156]	; 0x9c
 802760e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027610:	fb92 f3f3 	sdiv	r3, r2, r3
 8027614:	9328      	str	r3, [sp, #160]	; 0xa0
 8027616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027618:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802761a:	3b01      	subs	r3, #1
 802761c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027620:	930a      	str	r3, [sp, #40]	; 0x28
 8027622:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027624:	ee16 6a90 	vmov	r6, s13
 8027628:	bf14      	ite	ne
 802762a:	461d      	movne	r5, r3
 802762c:	4615      	moveq	r5, r2
 802762e:	eef0 8a67 	vmov.f32	s17, s15
 8027632:	eeb0 8a47 	vmov.f32	s16, s14
 8027636:	e6b0      	b.n	802739a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027638:	f111 0a01 	adds.w	sl, r1, #1
 802763c:	d487      	bmi.n	802754e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802763e:	45d6      	cmp	lr, sl
 8027640:	db85      	blt.n	802754e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027642:	f110 0a01 	adds.w	sl, r0, #1
 8027646:	d482      	bmi.n	802754e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027648:	4553      	cmp	r3, sl
 802764a:	db80      	blt.n	802754e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802764c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802764e:	9101      	str	r1, [sp, #4]
 8027650:	b21b      	sxth	r3, r3
 8027652:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027656:	9300      	str	r3, [sp, #0]
 8027658:	e9cd c704 	strd	ip, r7, [sp, #16]
 802765c:	fa0f f38e 	sxth.w	r3, lr
 8027660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027662:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027664:	4641      	mov	r1, r8
 8027666:	f7ff fd95 	bl	8027194 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802766a:	e770      	b.n	802754e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802766c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802766e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027670:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027674:	1430      	asrs	r0, r6, #16
 8027676:	1423      	asrs	r3, r4, #16
 8027678:	fb01 3000 	mla	r0, r1, r0, r3
 802767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802767e:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027682:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027686:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802768a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802768e:	8858      	ldrh	r0, [r3, #2]
 8027690:	f1be 0f00 	cmp.w	lr, #0
 8027694:	d00b      	beq.n	80276ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8027696:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802769a:	3901      	subs	r1, #1
 802769c:	0049      	lsls	r1, r1, #1
 802769e:	3102      	adds	r1, #2
 80276a0:	eb03 0b01 	add.w	fp, r3, r1
 80276a4:	5a5b      	ldrh	r3, [r3, r1]
 80276a6:	930e      	str	r3, [sp, #56]	; 0x38
 80276a8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80276ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80276ae:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80276b2:	fb12 f30e 	smulbb	r3, r2, lr
 80276b6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80276ba:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80276be:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80276c2:	10db      	asrs	r3, r3, #3
 80276c4:	ea41 010c 	orr.w	r1, r1, ip
 80276c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80276cc:	f1ce 0c10 	rsb	ip, lr, #16
 80276d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80276d4:	ebac 0c02 	sub.w	ip, ip, r2
 80276d8:	ea4b 0000 	orr.w	r0, fp, r0
 80276dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80276e0:	4350      	muls	r0, r2
 80276e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80276e4:	9f08      	ldr	r7, [sp, #32]
 80276e6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80276ea:	fb0c 0c01 	mla	ip, ip, r1, r0
 80276ee:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80276f2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80276f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80276f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80276fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80276fe:	0412      	lsls	r2, r2, #16
 8027700:	ea4b 0101 	orr.w	r1, fp, r1
 8027704:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027708:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802770c:	fb03 c101 	mla	r1, r3, r1, ip
 8027710:	4302      	orrs	r2, r0
 8027712:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027716:	fb03 1202 	mla	r2, r3, r2, r1
 802771a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802771e:	0952      	lsrs	r2, r2, #5
 8027720:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8027724:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027728:	f8b9 2000 	ldrh.w	r2, [r9]
 802772c:	ea4b 0303 	orr.w	r3, fp, r3
 8027730:	b29b      	uxth	r3, r3
 8027732:	1211      	asrs	r1, r2, #8
 8027734:	1218      	asrs	r0, r3, #8
 8027736:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802773a:	fb11 f107 	smulbb	r1, r1, r7
 802773e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027742:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027746:	00d2      	lsls	r2, r2, #3
 8027748:	fb00 100a 	mla	r0, r0, sl, r1
 802774c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027750:	10d9      	asrs	r1, r3, #3
 8027752:	b2d2      	uxtb	r2, r2
 8027754:	00db      	lsls	r3, r3, #3
 8027756:	fb1c fc07 	smulbb	ip, ip, r7
 802775a:	fb12 f207 	smulbb	r2, r2, r7
 802775e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027762:	b2db      	uxtb	r3, r3
 8027764:	b280      	uxth	r0, r0
 8027766:	fb01 c10a 	mla	r1, r1, sl, ip
 802776a:	fb03 230a 	mla	r3, r3, sl, r2
 802776e:	b29b      	uxth	r3, r3
 8027770:	b289      	uxth	r1, r1
 8027772:	1c42      	adds	r2, r0, #1
 8027774:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027778:	f101 0c01 	add.w	ip, r1, #1
 802777c:	1c5a      	adds	r2, r3, #1
 802777e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027782:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027786:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027788:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802778c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027790:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027794:	4310      	orrs	r0, r2
 8027796:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802779a:	441c      	add	r4, r3
 802779c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802779e:	ea40 000c 	orr.w	r0, r0, ip
 80277a2:	f829 0b02 	strh.w	r0, [r9], #2
 80277a6:	441e      	add	r6, r3
 80277a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80277ac:	e6fc      	b.n	80275a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80277ae:	b013      	add	sp, #76	; 0x4c
 80277b0:	ecbd 8b08 	vpop	{d8-d11}
 80277b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080277b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80277b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80277bc:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80277c0:	fb06 5c03 	mla	ip, r6, r3, r5
 80277c4:	2e00      	cmp	r6, #0
 80277c6:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80277ca:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80277ce:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80277d2:	8808      	ldrh	r0, [r1, #0]
 80277d4:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80277d8:	db2e      	blt.n	8027838 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80277da:	45b0      	cmp	r8, r6
 80277dc:	dd2c      	ble.n	8027838 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80277de:	2d00      	cmp	r5, #0
 80277e0:	db28      	blt.n	8027834 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80277e2:	42ab      	cmp	r3, r5
 80277e4:	dd26      	ble.n	8027834 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80277e6:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80277ea:	1c6a      	adds	r2, r5, #1
 80277ec:	d427      	bmi.n	802783e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80277ee:	4293      	cmp	r3, r2
 80277f0:	dd25      	ble.n	802783e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80277f2:	b324      	cbz	r4, 802783e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80277f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80277f8:	3601      	adds	r6, #1
 80277fa:	d424      	bmi.n	8027846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80277fc:	45b0      	cmp	r8, r6
 80277fe:	dd22      	ble.n	8027846 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027800:	b31f      	cbz	r7, 802784a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8027802:	2d00      	cmp	r5, #0
 8027804:	db1d      	blt.n	8027842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027806:	42ab      	cmp	r3, r5
 8027808:	dd1b      	ble.n	8027842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802780a:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802780e:	3501      	adds	r5, #1
 8027810:	d405      	bmi.n	802781e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027812:	42ab      	cmp	r3, r5
 8027814:	dd03      	ble.n	802781e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027816:	b124      	cbz	r4, 8027822 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8027818:	3301      	adds	r3, #1
 802781a:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802781e:	2c0f      	cmp	r4, #15
 8027820:	d801      	bhi.n	8027826 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027822:	2f0f      	cmp	r7, #15
 8027824:	d914      	bls.n	8027850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8027826:	4b27      	ldr	r3, [pc, #156]	; (80278c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8027828:	4a27      	ldr	r2, [pc, #156]	; (80278c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802782a:	4828      	ldr	r0, [pc, #160]	; (80278cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 802782c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8027830:	f004 ff14 	bl	802c65c <__assert_func>
 8027834:	4684      	mov	ip, r0
 8027836:	e7d8      	b.n	80277ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8027838:	4602      	mov	r2, r0
 802783a:	4684      	mov	ip, r0
 802783c:	e7dc      	b.n	80277f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802783e:	4602      	mov	r2, r0
 8027840:	e7da      	b.n	80277f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8027842:	4606      	mov	r6, r0
 8027844:	e7e3      	b.n	802780e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8027846:	4606      	mov	r6, r0
 8027848:	e7e9      	b.n	802781e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802784a:	2c0f      	cmp	r4, #15
 802784c:	d8eb      	bhi.n	8027826 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802784e:	4606      	mov	r6, r0
 8027850:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8027854:	fb14 f307 	smulbb	r3, r4, r7
 8027858:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802785c:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8027860:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027864:	10db      	asrs	r3, r3, #3
 8027866:	ea45 0c0c 	orr.w	ip, r5, ip
 802786a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802786e:	f1c7 0510 	rsb	r5, r7, #16
 8027872:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027876:	1b2d      	subs	r5, r5, r4
 8027878:	ea4e 0202 	orr.w	r2, lr, r2
 802787c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8027880:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8027884:	4354      	muls	r4, r2
 8027886:	fb05 450c 	mla	r5, r5, ip, r4
 802788a:	0404      	lsls	r4, r0, #16
 802788c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027890:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027894:	4320      	orrs	r0, r4
 8027896:	fb03 5400 	mla	r4, r3, r0, r5
 802789a:	0430      	lsls	r0, r6, #16
 802789c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80278a0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80278a4:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80278a8:	4330      	orrs	r0, r6
 80278aa:	fb07 4000 	mla	r0, r7, r0, r4
 80278ae:	0d43      	lsrs	r3, r0, #21
 80278b0:	0940      	lsrs	r0, r0, #5
 80278b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80278b6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80278ba:	4318      	orrs	r0, r3
 80278bc:	8008      	strh	r0, [r1, #0]
 80278be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278c2:	bf00      	nop
 80278c4:	080315e5 	.word	0x080315e5
 80278c8:	08031c57 	.word	0x08031c57
 80278cc:	08031669 	.word	0x08031669

080278d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80278d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278d4:	ed2d 8b08 	vpush	{d8-d11}
 80278d8:	b08f      	sub	sp, #60	; 0x3c
 80278da:	461d      	mov	r5, r3
 80278dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80278de:	920c      	str	r2, [sp, #48]	; 0x30
 80278e0:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80278e4:	9107      	str	r1, [sp, #28]
 80278e6:	6859      	ldr	r1, [r3, #4]
 80278e8:	681b      	ldr	r3, [r3, #0]
 80278ea:	900d      	str	r0, [sp, #52]	; 0x34
 80278ec:	fb01 2707 	mla	r7, r1, r7, r2
 80278f0:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80278f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80278f6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80278fa:	f8d3 8000 	ldr.w	r8, [r3]
 80278fe:	eeb0 aa40 	vmov.f32	s20, s0
 8027902:	eef0 9a60 	vmov.f32	s19, s1
 8027906:	eeb0 9a41 	vmov.f32	s18, s2
 802790a:	eeb0 8a62 	vmov.f32	s16, s5
 802790e:	eef0 8a43 	vmov.f32	s17, s6
 8027912:	eef0 ba44 	vmov.f32	s23, s8
 8027916:	eeb0 ba64 	vmov.f32	s22, s9
 802791a:	eef0 aa45 	vmov.f32	s21, s10
 802791e:	9b07      	ldr	r3, [sp, #28]
 8027920:	2b00      	cmp	r3, #0
 8027922:	dc03      	bgt.n	802792c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027926:	2b00      	cmp	r3, #0
 8027928:	f340 8181 	ble.w	8027c2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802792c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802792e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027932:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027936:	1e48      	subs	r0, r1, #1
 8027938:	f102 3cff 	add.w	ip, r2, #4294967295
 802793c:	2d00      	cmp	r5, #0
 802793e:	f340 809b 	ble.w	8027a78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8027942:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027946:	ea4f 4326 	mov.w	r3, r6, asr #16
 802794a:	d406      	bmi.n	802795a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802794c:	4586      	cmp	lr, r0
 802794e:	da04      	bge.n	802795a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027950:	2b00      	cmp	r3, #0
 8027952:	db02      	blt.n	802795a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027954:	4563      	cmp	r3, ip
 8027956:	f2c0 8090 	blt.w	8027a7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802795a:	f11e 0e01 	adds.w	lr, lr, #1
 802795e:	f100 8084 	bmi.w	8027a6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027962:	4571      	cmp	r1, lr
 8027964:	f2c0 8081 	blt.w	8027a6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027968:	3301      	adds	r3, #1
 802796a:	d47e      	bmi.n	8027a6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802796c:	429a      	cmp	r2, r3
 802796e:	db7c      	blt.n	8027a6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027970:	46aa      	mov	sl, r5
 8027972:	46b9      	mov	r9, r7
 8027974:	f1ba 0f00 	cmp.w	sl, #0
 8027978:	f340 8099 	ble.w	8027aae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802797c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802797e:	1421      	asrs	r1, r4, #16
 8027980:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027984:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027988:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802798c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027990:	f100 80d0 	bmi.w	8027b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8027994:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027998:	4559      	cmp	r1, fp
 802799a:	f280 80cb 	bge.w	8027b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802799e:	2800      	cmp	r0, #0
 80279a0:	f2c0 80c8 	blt.w	8027b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80279a4:	f103 3bff 	add.w	fp, r3, #4294967295
 80279a8:	4558      	cmp	r0, fp
 80279aa:	f280 80c3 	bge.w	8027b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80279ae:	fa0f fe8e 	sxth.w	lr, lr
 80279b2:	fb00 110e 	mla	r1, r0, lr, r1
 80279b6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80279ba:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80279be:	8841      	ldrh	r1, [r0, #2]
 80279c0:	f1bc 0f00 	cmp.w	ip, #0
 80279c4:	d00b      	beq.n	80279de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80279c6:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80279ca:	3b01      	subs	r3, #1
 80279cc:	005b      	lsls	r3, r3, #1
 80279ce:	3302      	adds	r3, #2
 80279d0:	eb00 0e03 	add.w	lr, r0, r3
 80279d4:	5ac3      	ldrh	r3, [r0, r3]
 80279d6:	9308      	str	r3, [sp, #32]
 80279d8:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80279dc:	9309      	str	r3, [sp, #36]	; 0x24
 80279de:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80279e2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80279e6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80279ea:	ea40 000b 	orr.w	r0, r0, fp
 80279ee:	fb12 f30c 	smulbb	r3, r2, ip
 80279f2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80279f6:	10db      	asrs	r3, r3, #3
 80279f8:	f1cc 0e10 	rsb	lr, ip, #16
 80279fc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a00:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027a04:	ebae 0e02 	sub.w	lr, lr, r2
 8027a08:	ea4b 0101 	orr.w	r1, fp, r1
 8027a0c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027a10:	4351      	muls	r1, r2
 8027a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027a14:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027a18:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027a1c:	0410      	lsls	r0, r2, #16
 8027a1e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027a22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027a26:	4310      	orrs	r0, r2
 8027a28:	9a08      	ldr	r2, [sp, #32]
 8027a2a:	9908      	ldr	r1, [sp, #32]
 8027a2c:	0412      	lsls	r2, r2, #16
 8027a2e:	fb03 e000 	mla	r0, r3, r0, lr
 8027a32:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027a36:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027a3a:	ea42 020e 	orr.w	r2, r2, lr
 8027a3e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027a42:	fb03 0302 	mla	r3, r3, r2, r0
 8027a46:	0d5a      	lsrs	r2, r3, #21
 8027a48:	095b      	lsrs	r3, r3, #5
 8027a4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027a52:	4313      	orrs	r3, r2
 8027a54:	f8a9 3000 	strh.w	r3, [r9]
 8027a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027a5a:	441c      	add	r4, r3
 8027a5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027a5e:	f109 0902 	add.w	r9, r9, #2
 8027a62:	441e      	add	r6, r3
 8027a64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027a68:	e784      	b.n	8027974 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027a6c:	441c      	add	r4, r3
 8027a6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027a70:	3d01      	subs	r5, #1
 8027a72:	441e      	add	r6, r3
 8027a74:	3702      	adds	r7, #2
 8027a76:	e761      	b.n	802793c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027a78:	d01d      	beq.n	8027ab6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8027a7a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027a7c:	1e6b      	subs	r3, r5, #1
 8027a7e:	fb00 4003 	mla	r0, r0, r3, r4
 8027a82:	1400      	asrs	r0, r0, #16
 8027a84:	f53f af74 	bmi.w	8027970 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027a88:	3901      	subs	r1, #1
 8027a8a:	4288      	cmp	r0, r1
 8027a8c:	f6bf af70 	bge.w	8027970 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027a90:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027a92:	fb01 6303 	mla	r3, r1, r3, r6
 8027a96:	141b      	asrs	r3, r3, #16
 8027a98:	f53f af6a 	bmi.w	8027970 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027a9c:	3a01      	subs	r2, #1
 8027a9e:	4293      	cmp	r3, r2
 8027aa0:	f6bf af66 	bge.w	8027970 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027aa4:	46a9      	mov	r9, r5
 8027aa6:	46ba      	mov	sl, r7
 8027aa8:	f1b9 0f00 	cmp.w	r9, #0
 8027aac:	dc5a      	bgt.n	8027b64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8027aae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027ab2:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027ab6:	9b07      	ldr	r3, [sp, #28]
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	f340 80b8 	ble.w	8027c2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027abe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ac6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027aca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027acc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027ad0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027ad4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027ad8:	eef0 6a48 	vmov.f32	s13, s16
 8027adc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ae0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ae4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027ae8:	ee16 4a90 	vmov	r4, s13
 8027aec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027af0:	eef0 6a68 	vmov.f32	s13, s17
 8027af4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027af8:	ee18 2a10 	vmov	r2, s16
 8027afc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027b00:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b04:	ee18 2a90 	vmov	r2, s17
 8027b08:	9323      	str	r3, [sp, #140]	; 0x8c
 8027b0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b10:	9324      	str	r3, [sp, #144]	; 0x90
 8027b12:	9b07      	ldr	r3, [sp, #28]
 8027b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027b16:	3b01      	subs	r3, #1
 8027b18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b1c:	9307      	str	r3, [sp, #28]
 8027b1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b20:	ee16 6a90 	vmov	r6, s13
 8027b24:	bf14      	ite	ne
 8027b26:	461d      	movne	r5, r3
 8027b28:	4615      	moveq	r5, r2
 8027b2a:	eef0 8a67 	vmov.f32	s17, s15
 8027b2e:	eeb0 8a47 	vmov.f32	s16, s14
 8027b32:	e6f4      	b.n	802791e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8027b34:	f111 0b01 	adds.w	fp, r1, #1
 8027b38:	d48e      	bmi.n	8027a58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027b3a:	45de      	cmp	lr, fp
 8027b3c:	db8c      	blt.n	8027a58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027b3e:	f110 0b01 	adds.w	fp, r0, #1
 8027b42:	d489      	bmi.n	8027a58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027b44:	455b      	cmp	r3, fp
 8027b46:	db87      	blt.n	8027a58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027b48:	b21b      	sxth	r3, r3
 8027b4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8027b4e:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8027b52:	9300      	str	r3, [sp, #0]
 8027b54:	4642      	mov	r2, r8
 8027b56:	fa0f f38e 	sxth.w	r3, lr
 8027b5a:	4649      	mov	r1, r9
 8027b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027b5e:	f7ff fe2b 	bl	80277b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8027b62:	e779      	b.n	8027a58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027b64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027b6a:	1420      	asrs	r0, r4, #16
 8027b6c:	1431      	asrs	r1, r6, #16
 8027b6e:	fb03 0101 	mla	r1, r3, r1, r0
 8027b72:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027b76:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027b7a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027b7e:	8841      	ldrh	r1, [r0, #2]
 8027b80:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027b84:	f1be 0f00 	cmp.w	lr, #0
 8027b88:	d00b      	beq.n	8027ba2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8027b8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027b8e:	3b01      	subs	r3, #1
 8027b90:	005b      	lsls	r3, r3, #1
 8027b92:	3302      	adds	r3, #2
 8027b94:	eb00 0b03 	add.w	fp, r0, r3
 8027b98:	5ac3      	ldrh	r3, [r0, r3]
 8027b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8027b9c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8027ba2:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027ba6:	fb12 f30e 	smulbb	r3, r2, lr
 8027baa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027bae:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027bb2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027bb6:	10db      	asrs	r3, r3, #3
 8027bb8:	ea40 000c 	orr.w	r0, r0, ip
 8027bbc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027bc0:	f1ce 0c10 	rsb	ip, lr, #16
 8027bc4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027bc8:	ebac 0c02 	sub.w	ip, ip, r2
 8027bcc:	ea4b 0101 	orr.w	r1, fp, r1
 8027bd0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027bd4:	4351      	muls	r1, r2
 8027bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027bd8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027bdc:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027be0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027be4:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8027be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027bea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027bec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027bf0:	0412      	lsls	r2, r2, #16
 8027bf2:	ea4b 0000 	orr.w	r0, fp, r0
 8027bf6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027bfa:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8027bfe:	fb03 c000 	mla	r0, r3, r0, ip
 8027c02:	ea42 0b0b 	orr.w	fp, r2, fp
 8027c06:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027c0a:	fb03 000b 	mla	r0, r3, fp, r0
 8027c0e:	0d43      	lsrs	r3, r0, #21
 8027c10:	0940      	lsrs	r0, r0, #5
 8027c12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027c16:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027c1a:	4318      	orrs	r0, r3
 8027c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027c1e:	f82a 0b02 	strh.w	r0, [sl], #2
 8027c22:	441c      	add	r4, r3
 8027c24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c26:	f109 39ff 	add.w	r9, r9, #4294967295
 8027c2a:	441e      	add	r6, r3
 8027c2c:	e73c      	b.n	8027aa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027c2e:	b00f      	add	sp, #60	; 0x3c
 8027c30:	ecbd 8b08 	vpop	{d8-d11}
 8027c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8027c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c3c:	880e      	ldrh	r6, [r1, #0]
 8027c3e:	b085      	sub	sp, #20
 8027c40:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8027c44:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8027c48:	4690      	mov	r8, r2
 8027c4a:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8027c4e:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8027c52:	9200      	str	r2, [sp, #0]
 8027c54:	00f6      	lsls	r6, r6, #3
 8027c56:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8027c5a:	9201      	str	r2, [sp, #4]
 8027c5c:	2c00      	cmp	r4, #0
 8027c5e:	b2f2      	uxtb	r2, r6
 8027c60:	fb04 5603 	mla	r6, r4, r3, r5
 8027c64:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027c68:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027c6c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027c70:	9202      	str	r2, [sp, #8]
 8027c72:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8027c76:	db36      	blt.n	8027ce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8027c78:	45a6      	cmp	lr, r4
 8027c7a:	dd34      	ble.n	8027ce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8027c7c:	2d00      	cmp	r5, #0
 8027c7e:	db30      	blt.n	8027ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8027c80:	42ab      	cmp	r3, r5
 8027c82:	dd2e      	ble.n	8027ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8027c84:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8027c88:	1c6e      	adds	r6, r5, #1
 8027c8a:	d42f      	bmi.n	8027cec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027c8c:	42b3      	cmp	r3, r6
 8027c8e:	dd2d      	ble.n	8027cec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027c90:	b370      	cbz	r0, 8027cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8027c92:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027c96:	3401      	adds	r4, #1
 8027c98:	d42e      	bmi.n	8027cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8027c9a:	45a6      	cmp	lr, r4
 8027c9c:	dd2c      	ble.n	8027cf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8027c9e:	b377      	cbz	r7, 8027cfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8027ca0:	2d00      	cmp	r5, #0
 8027ca2:	db27      	blt.n	8027cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8027ca4:	42ab      	cmp	r3, r5
 8027ca6:	dd25      	ble.n	8027cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8027ca8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027cac:	3501      	adds	r5, #1
 8027cae:	d429      	bmi.n	8027d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8027cb0:	42ab      	cmp	r3, r5
 8027cb2:	dd27      	ble.n	8027d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8027cb4:	b340      	cbz	r0, 8027d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8027cb6:	3301      	adds	r3, #1
 8027cb8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027cbc:	280f      	cmp	r0, #15
 8027cbe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027cc2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027cc6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027cca:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027cce:	d801      	bhi.n	8027cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027cd0:	2f0f      	cmp	r7, #15
 8027cd2:	d91b      	bls.n	8027d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8027cd4:	4b84      	ldr	r3, [pc, #528]	; (8027ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b0>)
 8027cd6:	4a85      	ldr	r2, [pc, #532]	; (8027eec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8027cd8:	4885      	ldr	r0, [pc, #532]	; (8027ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8027cda:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8027cde:	f004 fcbd 	bl	802c65c <__assert_func>
 8027ce2:	2200      	movs	r2, #0
 8027ce4:	e7d0      	b.n	8027c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 8027ce6:	2600      	movs	r6, #0
 8027ce8:	4632      	mov	r2, r6
 8027cea:	e7d4      	b.n	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8027cec:	2600      	movs	r6, #0
 8027cee:	e7d2      	b.n	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8027cf0:	4606      	mov	r6, r0
 8027cf2:	e7d0      	b.n	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8027cf4:	2400      	movs	r4, #0
 8027cf6:	e7d9      	b.n	8027cac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8027cf8:	2300      	movs	r3, #0
 8027cfa:	461c      	mov	r4, r3
 8027cfc:	e7de      	b.n	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027cfe:	463b      	mov	r3, r7
 8027d00:	463c      	mov	r4, r7
 8027d02:	e7db      	b.n	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d04:	2300      	movs	r3, #0
 8027d06:	e7d9      	b.n	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d08:	4603      	mov	r3, r0
 8027d0a:	e7d7      	b.n	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d0c:	b280      	uxth	r0, r0
 8027d0e:	b2bf      	uxth	r7, r7
 8027d10:	fb00 fe07 	mul.w	lr, r0, r7
 8027d14:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027d18:	0100      	lsls	r0, r0, #4
 8027d1a:	eba0 0c0e 	sub.w	ip, r0, lr
 8027d1e:	b2bf      	uxth	r7, r7
 8027d20:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027d24:	fa1f fc8c 	uxth.w	ip, ip
 8027d28:	1bed      	subs	r5, r5, r7
 8027d2a:	b2ad      	uxth	r5, r5
 8027d2c:	fb0c f00a 	mul.w	r0, ip, sl
 8027d30:	fb05 000b 	mla	r0, r5, fp, r0
 8027d34:	fb07 0009 	mla	r0, r7, r9, r0
 8027d38:	fb0e 0008 	mla	r0, lr, r8, r0
 8027d3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d40:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027d44:	9003      	str	r0, [sp, #12]
 8027d46:	d018      	beq.n	8027d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8027d48:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027d4c:	fb0b f000 	mul.w	r0, fp, r0
 8027d50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027d54:	fb0b fb02 	mul.w	fp, fp, r2
 8027d58:	0a02      	lsrs	r2, r0, #8
 8027d5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027d5e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027d62:	4402      	add	r2, r0
 8027d64:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027d68:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027d6c:	0a12      	lsrs	r2, r2, #8
 8027d6e:	0a00      	lsrs	r0, r0, #8
 8027d70:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027d74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027d78:	4302      	orrs	r2, r0
 8027d7a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027d7e:	d019      	beq.n	8027db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8027d80:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027d84:	fb0a fb0b 	mul.w	fp, sl, fp
 8027d88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027d8c:	fb0a fa06 	mul.w	sl, sl, r6
 8027d90:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027d94:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027d98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027d9c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027da0:	445e      	add	r6, fp
 8027da2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027da6:	0a36      	lsrs	r6, r6, #8
 8027da8:	0a00      	lsrs	r0, r0, #8
 8027daa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027dae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027db2:	4306      	orrs	r6, r0
 8027db4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027db8:	d019      	beq.n	8027dee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 8027dba:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027dbe:	fb09 fa0a 	mul.w	sl, r9, sl
 8027dc2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027dc6:	fb09 f904 	mul.w	r9, r9, r4
 8027dca:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027dce:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027dd2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027dd6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8027dda:	4454      	add	r4, sl
 8027ddc:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8027de0:	0a24      	lsrs	r4, r4, #8
 8027de2:	0a00      	lsrs	r0, r0, #8
 8027de4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027de8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027dec:	4304      	orrs	r4, r0
 8027dee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027df2:	d019      	beq.n	8027e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 8027df4:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027df8:	fb08 f909 	mul.w	r9, r8, r9
 8027dfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e00:	fb08 f803 	mul.w	r8, r8, r3
 8027e04:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027e08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027e0c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027e10:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027e14:	444b      	add	r3, r9
 8027e16:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027e1a:	0a1b      	lsrs	r3, r3, #8
 8027e1c:	0a00      	lsrs	r0, r0, #8
 8027e1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027e22:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e26:	4303      	orrs	r3, r0
 8027e28:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027e2c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027e30:	fb0c f808 	mul.w	r8, ip, r8
 8027e34:	fb05 8800 	mla	r8, r5, r0, r8
 8027e38:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027e3c:	fb07 8800 	mla	r8, r7, r0, r8
 8027e40:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027e44:	fb0e 8000 	mla	r0, lr, r0, r8
 8027e48:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027e4c:	fb0c f606 	mul.w	r6, ip, r6
 8027e50:	0a00      	lsrs	r0, r0, #8
 8027e52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027e56:	fb05 6202 	mla	r2, r5, r2, r6
 8027e5a:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8027e5e:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8027e62:	fb07 2700 	mla	r7, r7, r0, r2
 8027e66:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8027e6a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8027e6e:	9c03      	ldr	r4, [sp, #12]
 8027e70:	9e01      	ldr	r6, [sp, #4]
 8027e72:	b29b      	uxth	r3, r3
 8027e74:	435c      	muls	r4, r3
 8027e76:	fb0e 7000 	mla	r0, lr, r0, r7
 8027e7a:	1c62      	adds	r2, r4, #1
 8027e7c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027e80:	0a00      	lsrs	r0, r0, #8
 8027e82:	9c00      	ldr	r4, [sp, #0]
 8027e84:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e88:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8027e8c:	ea48 0000 	orr.w	r0, r8, r0
 8027e90:	b2d2      	uxtb	r2, r2
 8027e92:	fb14 f402 	smulbb	r4, r4, r2
 8027e96:	0c05      	lsrs	r5, r0, #16
 8027e98:	fb05 4503 	mla	r5, r5, r3, r4
 8027e9c:	fb16 f602 	smulbb	r6, r6, r2
 8027ea0:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8027ea4:	fb04 6403 	mla	r4, r4, r3, r6
 8027ea8:	9e02      	ldr	r6, [sp, #8]
 8027eaa:	b2c0      	uxtb	r0, r0
 8027eac:	fb16 f202 	smulbb	r2, r6, r2
 8027eb0:	fb00 2303 	mla	r3, r0, r3, r2
 8027eb4:	b2ad      	uxth	r5, r5
 8027eb6:	b298      	uxth	r0, r3
 8027eb8:	1c43      	adds	r3, r0, #1
 8027eba:	1c6a      	adds	r2, r5, #1
 8027ebc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027ec0:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8027ec4:	b2a4      	uxth	r4, r4
 8027ec6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027eca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ece:	4313      	orrs	r3, r2
 8027ed0:	1c62      	adds	r2, r4, #1
 8027ed2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027ed6:	0952      	lsrs	r2, r2, #5
 8027ed8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027edc:	4313      	orrs	r3, r2
 8027ede:	800b      	strh	r3, [r1, #0]
 8027ee0:	b005      	add	sp, #20
 8027ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ee6:	bf00      	nop
 8027ee8:	080315e5 	.word	0x080315e5
 8027eec:	08031bae 	.word	0x08031bae
 8027ef0:	08031669 	.word	0x08031669

08027ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ef8:	ed2d 8b08 	vpush	{d8-d11}
 8027efc:	b09d      	sub	sp, #116	; 0x74
 8027efe:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8027f02:	9219      	str	r2, [sp, #100]	; 0x64
 8027f04:	9307      	str	r3, [sp, #28]
 8027f06:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027f08:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027f0c:	931a      	str	r3, [sp, #104]	; 0x68
 8027f0e:	9117      	str	r1, [sp, #92]	; 0x5c
 8027f10:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027f14:	901b      	str	r0, [sp, #108]	; 0x6c
 8027f16:	6850      	ldr	r0, [r2, #4]
 8027f18:	6812      	ldr	r2, [r2, #0]
 8027f1a:	fb00 1303 	mla	r3, r0, r3, r1
 8027f1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027f22:	930a      	str	r3, [sp, #40]	; 0x28
 8027f24:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027f26:	681b      	ldr	r3, [r3, #0]
 8027f28:	9310      	str	r3, [sp, #64]	; 0x40
 8027f2a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027f30:	eeb0 aa40 	vmov.f32	s20, s0
 8027f34:	eef0 9a60 	vmov.f32	s19, s1
 8027f38:	eeb0 9a41 	vmov.f32	s18, s2
 8027f3c:	eeb0 8a62 	vmov.f32	s16, s5
 8027f40:	eef0 8a43 	vmov.f32	s17, s6
 8027f44:	eef0 ba44 	vmov.f32	s23, s8
 8027f48:	eeb0 ba64 	vmov.f32	s22, s9
 8027f4c:	eef0 aa45 	vmov.f32	s21, s10
 8027f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027f52:	2b00      	cmp	r3, #0
 8027f54:	dc03      	bgt.n	8027f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027f56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	f340 8375 	ble.w	8028648 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027f5e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027f60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f68:	1e48      	subs	r0, r1, #1
 8027f6a:	1e57      	subs	r7, r2, #1
 8027f6c:	9b07      	ldr	r3, [sp, #28]
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	f340 818e 	ble.w	8028290 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027f74:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027f78:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027f7c:	d406      	bmi.n	8027f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027f7e:	4584      	cmp	ip, r0
 8027f80:	da04      	bge.n	8027f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027f82:	2b00      	cmp	r3, #0
 8027f84:	db02      	blt.n	8027f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027f86:	42bb      	cmp	r3, r7
 8027f88:	f2c0 8183 	blt.w	8028292 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027f8c:	f11c 0c01 	adds.w	ip, ip, #1
 8027f90:	f100 8173 	bmi.w	802827a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027f94:	4561      	cmp	r1, ip
 8027f96:	f2c0 8170 	blt.w	802827a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027f9a:	3301      	adds	r3, #1
 8027f9c:	f100 816d 	bmi.w	802827a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027fa0:	429a      	cmp	r2, r3
 8027fa2:	f2c0 816a 	blt.w	802827a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027fa6:	9b07      	ldr	r3, [sp, #28]
 8027fa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027faa:	9318      	str	r3, [sp, #96]	; 0x60
 8027fac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027fae:	2b00      	cmp	r3, #0
 8027fb0:	f340 818c 	ble.w	80282cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8027fb4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027fb6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027fb8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027fbc:	689b      	ldr	r3, [r3, #8]
 8027fbe:	1422      	asrs	r2, r4, #16
 8027fc0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027fc4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027fc8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027fcc:	f100 81cd 	bmi.w	802836a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027fd0:	f103 38ff 	add.w	r8, r3, #4294967295
 8027fd4:	4542      	cmp	r2, r8
 8027fd6:	f280 81c8 	bge.w	802836a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027fda:	f1bc 0f00 	cmp.w	ip, #0
 8027fde:	f2c0 81c4 	blt.w	802836a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027fe2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027fe6:	45c4      	cmp	ip, r8
 8027fe8:	f280 81bf 	bge.w	802836a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027fec:	b21b      	sxth	r3, r3
 8027fee:	fb0c 2203 	mla	r2, ip, r3, r2
 8027ff2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027ff4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027ff8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027ffc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028000:	2800      	cmp	r0, #0
 8028002:	f000 81a9 	beq.w	8028358 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028006:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802800a:	950c      	str	r5, [sp, #48]	; 0x30
 802800c:	0e2d      	lsrs	r5, r5, #24
 802800e:	9513      	str	r5, [sp, #76]	; 0x4c
 8028010:	b181      	cbz	r1, 8028034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028016:	3b01      	subs	r3, #1
 8028018:	009b      	lsls	r3, r3, #2
 802801a:	3304      	adds	r3, #4
 802801c:	eb08 0c03 	add.w	ip, r8, r3
 8028020:	f858 3003 	ldr.w	r3, [r8, r3]
 8028024:	9308      	str	r3, [sp, #32]
 8028026:	0e1b      	lsrs	r3, r3, #24
 8028028:	9311      	str	r3, [sp, #68]	; 0x44
 802802a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802802e:	930d      	str	r3, [sp, #52]	; 0x34
 8028030:	0e1b      	lsrs	r3, r3, #24
 8028032:	9314      	str	r3, [sp, #80]	; 0x50
 8028034:	b280      	uxth	r0, r0
 8028036:	b289      	uxth	r1, r1
 8028038:	fb00 f901 	mul.w	r9, r0, r1
 802803c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028040:	0100      	lsls	r0, r0, #4
 8028042:	eba0 0809 	sub.w	r8, r0, r9
 8028046:	b289      	uxth	r1, r1
 8028048:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802804c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802804e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028050:	fa1f f888 	uxth.w	r8, r8
 8028054:	1a5b      	subs	r3, r3, r1
 8028056:	b29b      	uxth	r3, r3
 8028058:	fb08 f000 	mul.w	r0, r8, r0
 802805c:	fb03 000e 	mla	r0, r3, lr, r0
 8028060:	fb01 0005 	mla	r0, r1, r5, r0
 8028064:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028066:	fb09 0005 	mla	r0, r9, r5, r0
 802806a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802806e:	2800      	cmp	r0, #0
 8028070:	f000 80fa 	beq.w	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028074:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028078:	d01b      	beq.n	80280b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802807a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802807e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028082:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028086:	fb0e fe02 	mul.w	lr, lr, r2
 802808a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802808e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028092:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028096:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802809a:	4452      	add	r2, sl
 802809c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80280a0:	0a12      	lsrs	r2, r2, #8
 80280a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280a6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80280aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80280ae:	ea42 020c 	orr.w	r2, r2, ip
 80280b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80280b4:	2dff      	cmp	r5, #255	; 0xff
 80280b6:	d021      	beq.n	80280fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80280b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80280ba:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80280be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80280c0:	fb05 fb0b 	mul.w	fp, r5, fp
 80280c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80280c6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80280ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80280cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80280d0:	fb05 fa0a 	mul.w	sl, r5, sl
 80280d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80280dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80280e0:	44de      	add	lr, fp
 80280e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80280e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80280ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80280f6:	ea4e 050a 	orr.w	r5, lr, sl
 80280fa:	950c      	str	r5, [sp, #48]	; 0x30
 80280fc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80280fe:	2dff      	cmp	r5, #255	; 0xff
 8028100:	d021      	beq.n	8028146 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028102:	9d08      	ldr	r5, [sp, #32]
 8028104:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028108:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802810a:	fb05 fb0b 	mul.w	fp, r5, fp
 802810e:	9d08      	ldr	r5, [sp, #32]
 8028110:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028114:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028116:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802811a:	fb05 fa0a 	mul.w	sl, r5, sl
 802811e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028122:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028126:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802812a:	44de      	add	lr, fp
 802812c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028130:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028134:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028138:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802813c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028140:	ea4e 050a 	orr.w	r5, lr, sl
 8028144:	9508      	str	r5, [sp, #32]
 8028146:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028148:	2dff      	cmp	r5, #255	; 0xff
 802814a:	d021      	beq.n	8028190 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802814c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802814e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028152:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028154:	fb05 fb0b 	mul.w	fp, r5, fp
 8028158:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802815a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802815e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028160:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028164:	fb05 fa0a 	mul.w	sl, r5, sl
 8028168:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802816c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028170:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028174:	44de      	add	lr, fp
 8028176:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802817a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802817e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028182:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028186:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802818a:	ea4e 050a 	orr.w	r5, lr, sl
 802818e:	950d      	str	r5, [sp, #52]	; 0x34
 8028190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028192:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028196:	9d08      	ldr	r5, [sp, #32]
 8028198:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802819c:	fb08 fc0c 	mul.w	ip, r8, ip
 80281a0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80281a4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80281a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80281aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80281ae:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80281b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80281b4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80281b8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80281bc:	fb08 f80e 	mul.w	r8, r8, lr
 80281c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80281c4:	fb03 8202 	mla	r2, r3, r2, r8
 80281c8:	9b08      	ldr	r3, [sp, #32]
 80281ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80281cc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80281d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80281d2:	fb01 220a 	mla	r2, r1, sl, r2
 80281d6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80281da:	fb09 2901 	mla	r9, r9, r1, r2
 80281de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80281e0:	883b      	ldrh	r3, [r7, #0]
 80281e2:	4342      	muls	r2, r0
 80281e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80281ec:	1c50      	adds	r0, r2, #1
 80281ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281f2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80281f6:	ea4c 0c09 	orr.w	ip, ip, r9
 80281fa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80281fe:	1219      	asrs	r1, r3, #8
 8028200:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028204:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028208:	b2c0      	uxtb	r0, r0
 802820a:	fb12 f205 	smulbb	r2, r2, r5
 802820e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028212:	fb01 2100 	mla	r1, r1, r0, r2
 8028216:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802821a:	10da      	asrs	r2, r3, #3
 802821c:	fa5f fc8c 	uxtb.w	ip, ip
 8028220:	00db      	lsls	r3, r3, #3
 8028222:	fb1c fc05 	smulbb	ip, ip, r5
 8028226:	b2db      	uxtb	r3, r3
 8028228:	b289      	uxth	r1, r1
 802822a:	fb03 c300 	mla	r3, r3, r0, ip
 802822e:	fa1f fc83 	uxth.w	ip, r3
 8028232:	1c4b      	adds	r3, r1, #1
 8028234:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028238:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802823c:	fb1e fe05 	smulbb	lr, lr, r5
 8028240:	f10c 0301 	add.w	r3, ip, #1
 8028244:	fb02 e200 	mla	r2, r2, r0, lr
 8028248:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802824c:	b292      	uxth	r2, r2
 802824e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028252:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028256:	430b      	orrs	r3, r1
 8028258:	1c51      	adds	r1, r2, #1
 802825a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802825e:	0952      	lsrs	r2, r2, #5
 8028260:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028264:	4313      	orrs	r3, r2
 8028266:	803b      	strh	r3, [r7, #0]
 8028268:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802826a:	441c      	add	r4, r3
 802826c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802826e:	441e      	add	r6, r3
 8028270:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028272:	3b01      	subs	r3, #1
 8028274:	3702      	adds	r7, #2
 8028276:	9318      	str	r3, [sp, #96]	; 0x60
 8028278:	e698      	b.n	8027fac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802827a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802827c:	441c      	add	r4, r3
 802827e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028280:	441e      	add	r6, r3
 8028282:	9b07      	ldr	r3, [sp, #28]
 8028284:	3b01      	subs	r3, #1
 8028286:	9307      	str	r3, [sp, #28]
 8028288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802828a:	3302      	adds	r3, #2
 802828c:	930a      	str	r3, [sp, #40]	; 0x28
 802828e:	e66d      	b.n	8027f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028290:	d023      	beq.n	80282da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8028292:	9b07      	ldr	r3, [sp, #28]
 8028294:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8028296:	3b01      	subs	r3, #1
 8028298:	fb00 4003 	mla	r0, r0, r3, r4
 802829c:	1400      	asrs	r0, r0, #16
 802829e:	f53f ae82 	bmi.w	8027fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80282a2:	3901      	subs	r1, #1
 80282a4:	4288      	cmp	r0, r1
 80282a6:	f6bf ae7e 	bge.w	8027fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80282aa:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80282ac:	fb01 6303 	mla	r3, r1, r3, r6
 80282b0:	141b      	asrs	r3, r3, #16
 80282b2:	f53f ae78 	bmi.w	8027fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80282b6:	3a01      	subs	r2, #1
 80282b8:	4293      	cmp	r3, r2
 80282ba:	f6bf ae74 	bge.w	8027fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80282be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80282c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80282c6:	f1bb 0f00 	cmp.w	fp, #0
 80282ca:	dc6c      	bgt.n	80283a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80282cc:	9b07      	ldr	r3, [sp, #28]
 80282ce:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80282d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282d4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80282d8:	930a      	str	r3, [sp, #40]	; 0x28
 80282da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80282dc:	2b00      	cmp	r3, #0
 80282de:	f340 81b3 	ble.w	8028648 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80282e2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80282e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80282ea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80282ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80282f0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80282f4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80282f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80282fc:	eef0 6a48 	vmov.f32	s13, s16
 8028300:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028308:	ee37 8a48 	vsub.f32	s16, s14, s16
 802830c:	ee16 4a90 	vmov	r4, s13
 8028310:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028314:	eef0 6a68 	vmov.f32	s13, s17
 8028318:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802831c:	ee18 2a10 	vmov	r2, s16
 8028320:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028324:	fb92 f3f3 	sdiv	r3, r2, r3
 8028328:	ee18 2a90 	vmov	r2, s17
 802832c:	9331      	str	r3, [sp, #196]	; 0xc4
 802832e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028330:	fb92 f3f3 	sdiv	r3, r2, r3
 8028334:	9332      	str	r3, [sp, #200]	; 0xc8
 8028336:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028338:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802833a:	3b01      	subs	r3, #1
 802833c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028340:	9317      	str	r3, [sp, #92]	; 0x5c
 8028342:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028344:	bf08      	it	eq
 8028346:	4613      	moveq	r3, r2
 8028348:	ee16 6a90 	vmov	r6, s13
 802834c:	9307      	str	r3, [sp, #28]
 802834e:	eef0 8a67 	vmov.f32	s17, s15
 8028352:	eeb0 8a47 	vmov.f32	s16, s14
 8028356:	e5fb      	b.n	8027f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028358:	2900      	cmp	r1, #0
 802835a:	f43f ae6b 	beq.w	8028034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802835e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028362:	9308      	str	r3, [sp, #32]
 8028364:	0e1b      	lsrs	r3, r3, #24
 8028366:	9311      	str	r3, [sp, #68]	; 0x44
 8028368:	e664      	b.n	8028034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802836a:	f112 0801 	adds.w	r8, r2, #1
 802836e:	f53f af7b 	bmi.w	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028372:	4543      	cmp	r3, r8
 8028374:	f6ff af78 	blt.w	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028378:	f11c 0801 	adds.w	r8, ip, #1
 802837c:	f53f af74 	bmi.w	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028380:	45c6      	cmp	lr, r8
 8028382:	f6ff af71 	blt.w	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028386:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028388:	9201      	str	r2, [sp, #4]
 802838a:	fa0f f28e 	sxth.w	r2, lr
 802838e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028392:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028396:	9200      	str	r2, [sp, #0]
 8028398:	b21b      	sxth	r3, r3
 802839a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802839c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802839e:	4639      	mov	r1, r7
 80283a0:	f7ff fc4a 	bl	8027c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80283a4:	e760      	b.n	8028268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80283a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80283a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80283aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80283ae:	1427      	asrs	r7, r4, #16
 80283b0:	1433      	asrs	r3, r6, #16
 80283b2:	fb01 7303 	mla	r3, r1, r3, r7
 80283b6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80283ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80283be:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80283c2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80283c6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80283ca:	2a00      	cmp	r2, #0
 80283cc:	f000 8133 	beq.w	8028636 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 80283d0:	687d      	ldr	r5, [r7, #4]
 80283d2:	950e      	str	r5, [sp, #56]	; 0x38
 80283d4:	0e2d      	lsrs	r5, r5, #24
 80283d6:	9515      	str	r5, [sp, #84]	; 0x54
 80283d8:	b178      	cbz	r0, 80283fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80283da:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80283de:	3901      	subs	r1, #1
 80283e0:	0089      	lsls	r1, r1, #2
 80283e2:	3104      	adds	r1, #4
 80283e4:	eb07 0e01 	add.w	lr, r7, r1
 80283e8:	5879      	ldr	r1, [r7, r1]
 80283ea:	9109      	str	r1, [sp, #36]	; 0x24
 80283ec:	0e09      	lsrs	r1, r1, #24
 80283ee:	9112      	str	r1, [sp, #72]	; 0x48
 80283f0:	f8de 1004 	ldr.w	r1, [lr, #4]
 80283f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80283f6:	0e09      	lsrs	r1, r1, #24
 80283f8:	9116      	str	r1, [sp, #88]	; 0x58
 80283fa:	b292      	uxth	r2, r2
 80283fc:	b280      	uxth	r0, r0
 80283fe:	fb02 f800 	mul.w	r8, r2, r0
 8028402:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028406:	0112      	lsls	r2, r2, #4
 8028408:	eba2 0e08 	sub.w	lr, r2, r8
 802840c:	b280      	uxth	r0, r0
 802840e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028412:	9915      	ldr	r1, [sp, #84]	; 0x54
 8028414:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028416:	fa1f fe8e 	uxth.w	lr, lr
 802841a:	1a12      	subs	r2, r2, r0
 802841c:	b292      	uxth	r2, r2
 802841e:	fb0e f101 	mul.w	r1, lr, r1
 8028422:	fb02 110c 	mla	r1, r2, ip, r1
 8028426:	fb00 1105 	mla	r1, r0, r5, r1
 802842a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802842c:	fb08 1105 	mla	r1, r8, r5, r1
 8028430:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028434:	2900      	cmp	r1, #0
 8028436:	f000 80f5 	beq.w	8028624 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802843a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802843e:	d019      	beq.n	8028474 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8028440:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028444:	fb0c fa0a 	mul.w	sl, ip, sl
 8028448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802844c:	fb0c fc03 	mul.w	ip, ip, r3
 8028450:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028454:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028458:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802845c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028460:	4453      	add	r3, sl
 8028462:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028466:	0a1b      	lsrs	r3, r3, #8
 8028468:	0a3f      	lsrs	r7, r7, #8
 802846a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802846e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028472:	433b      	orrs	r3, r7
 8028474:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028476:	2dff      	cmp	r5, #255	; 0xff
 8028478:	d020      	beq.n	80284bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 802847a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802847c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028480:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028482:	436f      	muls	r7, r5
 8028484:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028486:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802848a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802848c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028490:	fb05 fa0a 	mul.w	sl, r5, sl
 8028494:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028498:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802849c:	44bc      	add	ip, r7
 802849e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80284a2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80284a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80284b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284b6:	ea4c 050a 	orr.w	r5, ip, sl
 80284ba:	950e      	str	r5, [sp, #56]	; 0x38
 80284bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80284be:	2dff      	cmp	r5, #255	; 0xff
 80284c0:	d020      	beq.n	8028504 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80284c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80284c4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80284c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80284ca:	436f      	muls	r7, r5
 80284cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80284ce:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80284d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80284d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80284d8:	fb05 fa0a 	mul.w	sl, r5, sl
 80284dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80284e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80284e4:	44bc      	add	ip, r7
 80284e6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80284ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80284ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80284fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284fe:	ea4c 050a 	orr.w	r5, ip, sl
 8028502:	9509      	str	r5, [sp, #36]	; 0x24
 8028504:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028506:	2dff      	cmp	r5, #255	; 0xff
 8028508:	d020      	beq.n	802854c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802850a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802850c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028510:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028512:	436f      	muls	r7, r5
 8028514:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028516:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802851a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802851c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028520:	fb05 fa0a 	mul.w	sl, r5, sl
 8028524:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028528:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802852c:	44bc      	add	ip, r7
 802852e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028532:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028536:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802853a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802853e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028542:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028546:	ea4c 050a 	orr.w	r5, ip, sl
 802854a:	950f      	str	r5, [sp, #60]	; 0x3c
 802854c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802854e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028552:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028554:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028558:	fb0e f707 	mul.w	r7, lr, r7
 802855c:	fb02 770c 	mla	r7, r2, ip, r7
 8028560:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028566:	fb00 770c 	mla	r7, r0, ip, r7
 802856a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802856e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028570:	fb08 770c 	mla	r7, r8, ip, r7
 8028574:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028578:	fb0e fe0c 	mul.w	lr, lr, ip
 802857c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028580:	fb02 e303 	mla	r3, r2, r3, lr
 8028584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028586:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028588:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802858c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802858e:	fb00 330a 	mla	r3, r0, sl, r3
 8028592:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028596:	fb08 3c0c 	mla	ip, r8, ip, r3
 802859a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802859c:	f8b9 0000 	ldrh.w	r0, [r9]
 80285a0:	4359      	muls	r1, r3
 80285a2:	0a3f      	lsrs	r7, r7, #8
 80285a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80285a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80285ac:	1c4b      	adds	r3, r1, #1
 80285ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80285b2:	ea47 070c 	orr.w	r7, r7, ip
 80285b6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80285ba:	1202      	asrs	r2, r0, #8
 80285bc:	0c3b      	lsrs	r3, r7, #16
 80285be:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80285c2:	b2c9      	uxtb	r1, r1
 80285c4:	fb13 f305 	smulbb	r3, r3, r5
 80285c8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80285cc:	fb02 3201 	mla	r2, r2, r1, r3
 80285d0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80285d4:	10c3      	asrs	r3, r0, #3
 80285d6:	b2ff      	uxtb	r7, r7
 80285d8:	00c0      	lsls	r0, r0, #3
 80285da:	b2c0      	uxtb	r0, r0
 80285dc:	fb17 f705 	smulbb	r7, r7, r5
 80285e0:	fb00 7001 	mla	r0, r0, r1, r7
 80285e4:	b292      	uxth	r2, r2
 80285e6:	fb1c fc05 	smulbb	ip, ip, r5
 80285ea:	b280      	uxth	r0, r0
 80285ec:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80285f0:	fb03 c301 	mla	r3, r3, r1, ip
 80285f4:	1c51      	adds	r1, r2, #1
 80285f6:	f100 0c01 	add.w	ip, r0, #1
 80285fa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80285fe:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028602:	b29b      	uxth	r3, r3
 8028604:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028608:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802860c:	ea4c 0202 	orr.w	r2, ip, r2
 8028610:	f103 0c01 	add.w	ip, r3, #1
 8028614:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028618:	095b      	lsrs	r3, r3, #5
 802861a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802861e:	431a      	orrs	r2, r3
 8028620:	f8a9 2000 	strh.w	r2, [r9]
 8028624:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8028626:	441c      	add	r4, r3
 8028628:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802862a:	f109 0902 	add.w	r9, r9, #2
 802862e:	441e      	add	r6, r3
 8028630:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028634:	e647      	b.n	80282c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8028636:	2800      	cmp	r0, #0
 8028638:	f43f aedf 	beq.w	80283fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802863c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028640:	9109      	str	r1, [sp, #36]	; 0x24
 8028642:	0e09      	lsrs	r1, r1, #24
 8028644:	9112      	str	r1, [sp, #72]	; 0x48
 8028646:	e6d8      	b.n	80283fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028648:	b01d      	add	sp, #116	; 0x74
 802864a:	ecbd 8b08 	vpop	{d8-d11}
 802864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028658:	880e      	ldrh	r6, [r1, #0]
 802865a:	b085      	sub	sp, #20
 802865c:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8028660:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8028664:	4690      	mov	r8, r2
 8028666:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 802866a:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 802866e:	9200      	str	r2, [sp, #0]
 8028670:	00f6      	lsls	r6, r6, #3
 8028672:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8028676:	9201      	str	r2, [sp, #4]
 8028678:	2c00      	cmp	r4, #0
 802867a:	b2f2      	uxtb	r2, r6
 802867c:	fb04 5603 	mla	r6, r4, r3, r5
 8028680:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8028684:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8028688:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802868c:	9202      	str	r2, [sp, #8]
 802868e:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
 8028692:	db37      	blt.n	8028704 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 8028694:	45a4      	cmp	ip, r4
 8028696:	dd35      	ble.n	8028704 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 8028698:	2d00      	cmp	r5, #0
 802869a:	db31      	blt.n	8028700 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xac>
 802869c:	42ab      	cmp	r3, r5
 802869e:	dd2f      	ble.n	8028700 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xac>
 80286a0:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 80286a4:	1c6e      	adds	r6, r5, #1
 80286a6:	d430      	bmi.n	802870a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80286a8:	42b3      	cmp	r3, r6
 80286aa:	dd2e      	ble.n	802870a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80286ac:	b378      	cbz	r0, 802870e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xba>
 80286ae:	f8de 6004 	ldr.w	r6, [lr, #4]
 80286b2:	3401      	adds	r4, #1
 80286b4:	d42f      	bmi.n	8028716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 80286b6:	45a4      	cmp	ip, r4
 80286b8:	dd2d      	ble.n	8028716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 80286ba:	b37f      	cbz	r7, 802871c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 80286bc:	2d00      	cmp	r5, #0
 80286be:	eb0e 0c83 	add.w	ip, lr, r3, lsl #2
 80286c2:	db26      	blt.n	8028712 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 80286c4:	42ab      	cmp	r3, r5
 80286c6:	dd24      	ble.n	8028712 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 80286c8:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80286cc:	3501      	adds	r5, #1
 80286ce:	d428      	bmi.n	8028722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xce>
 80286d0:	42ab      	cmp	r3, r5
 80286d2:	dd26      	ble.n	8028722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xce>
 80286d4:	b338      	cbz	r0, 8028726 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd2>
 80286d6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80286da:	280f      	cmp	r0, #15
 80286dc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80286e0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80286e4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80286e8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80286ec:	d801      	bhi.n	80286f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80286ee:	2f0f      	cmp	r7, #15
 80286f0:	d91b      	bls.n	802872a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd6>
 80286f2:	4b7d      	ldr	r3, [pc, #500]	; (80288e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>)
 80286f4:	4a7d      	ldr	r2, [pc, #500]	; (80288ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 80286f6:	487e      	ldr	r0, [pc, #504]	; (80288f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80286f8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80286fc:	f003 ffae 	bl	802c65c <__assert_func>
 8028700:	2200      	movs	r2, #0
 8028702:	e7cf      	b.n	80286a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8028704:	2600      	movs	r6, #0
 8028706:	4632      	mov	r2, r6
 8028708:	e7d3      	b.n	80286b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802870a:	2600      	movs	r6, #0
 802870c:	e7d1      	b.n	80286b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802870e:	4606      	mov	r6, r0
 8028710:	e7cf      	b.n	80286b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8028712:	2400      	movs	r4, #0
 8028714:	e7da      	b.n	80286cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8028716:	2300      	movs	r3, #0
 8028718:	461c      	mov	r4, r3
 802871a:	e7de      	b.n	80286da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 802871c:	463b      	mov	r3, r7
 802871e:	463c      	mov	r4, r7
 8028720:	e7db      	b.n	80286da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 8028722:	2300      	movs	r3, #0
 8028724:	e7d9      	b.n	80286da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 8028726:	4603      	mov	r3, r0
 8028728:	e7d7      	b.n	80286da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 802872a:	b280      	uxth	r0, r0
 802872c:	b2bf      	uxth	r7, r7
 802872e:	fb00 fe07 	mul.w	lr, r0, r7
 8028732:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028736:	0100      	lsls	r0, r0, #4
 8028738:	eba0 0c0e 	sub.w	ip, r0, lr
 802873c:	b2bf      	uxth	r7, r7
 802873e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028742:	fa1f fc8c 	uxth.w	ip, ip
 8028746:	1bed      	subs	r5, r5, r7
 8028748:	b2ad      	uxth	r5, r5
 802874a:	fb0c f00a 	mul.w	r0, ip, sl
 802874e:	fb05 000b 	mla	r0, r5, fp, r0
 8028752:	fb07 0009 	mla	r0, r7, r9, r0
 8028756:	fb0e 0008 	mla	r0, lr, r8, r0
 802875a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802875e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028762:	9003      	str	r0, [sp, #12]
 8028764:	d018      	beq.n	8028798 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x144>
 8028766:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802876a:	fb0b f000 	mul.w	r0, fp, r0
 802876e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028772:	fb0b fb02 	mul.w	fp, fp, r2
 8028776:	0a02      	lsrs	r2, r0, #8
 8028778:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802877c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028780:	4402      	add	r2, r0
 8028782:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8028786:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802878a:	0a12      	lsrs	r2, r2, #8
 802878c:	0a00      	lsrs	r0, r0, #8
 802878e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028792:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028796:	4302      	orrs	r2, r0
 8028798:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802879c:	d019      	beq.n	80287d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17e>
 802879e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80287a2:	fb0a fb0b 	mul.w	fp, sl, fp
 80287a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80287aa:	fb0a fa06 	mul.w	sl, sl, r6
 80287ae:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80287b2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80287b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80287ba:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80287be:	445e      	add	r6, fp
 80287c0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80287c4:	0a36      	lsrs	r6, r6, #8
 80287c6:	0a00      	lsrs	r0, r0, #8
 80287c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80287cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80287d0:	4306      	orrs	r6, r0
 80287d2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80287d6:	d019      	beq.n	802880c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b8>
 80287d8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80287dc:	fb09 fa0a 	mul.w	sl, r9, sl
 80287e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80287e4:	fb09 f904 	mul.w	r9, r9, r4
 80287e8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80287ec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80287f0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80287f4:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80287f8:	4454      	add	r4, sl
 80287fa:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80287fe:	0a24      	lsrs	r4, r4, #8
 8028800:	0a00      	lsrs	r0, r0, #8
 8028802:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028806:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802880a:	4304      	orrs	r4, r0
 802880c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028810:	d019      	beq.n	8028846 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f2>
 8028812:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028816:	fb08 f909 	mul.w	r9, r8, r9
 802881a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802881e:	fb08 f803 	mul.w	r8, r8, r3
 8028822:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028826:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802882a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802882e:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8028832:	444b      	add	r3, r9
 8028834:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8028838:	0a1b      	lsrs	r3, r3, #8
 802883a:	0a00      	lsrs	r0, r0, #8
 802883c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028840:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028844:	4303      	orrs	r3, r0
 8028846:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802884a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802884e:	fb0c f808 	mul.w	r8, ip, r8
 8028852:	fb05 8800 	mla	r8, r5, r0, r8
 8028856:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802885a:	fb07 8800 	mla	r8, r7, r0, r8
 802885e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8028862:	fb0e 8000 	mla	r0, lr, r0, r8
 8028866:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802886a:	fb0c f606 	mul.w	r6, ip, r6
 802886e:	0a00      	lsrs	r0, r0, #8
 8028870:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028874:	fb05 6202 	mla	r2, r5, r2, r6
 8028878:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802887c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8028880:	fb07 2700 	mla	r7, r7, r0, r2
 8028884:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8028888:	9b03      	ldr	r3, [sp, #12]
 802888a:	9d00      	ldr	r5, [sp, #0]
 802888c:	9a02      	ldr	r2, [sp, #8]
 802888e:	fb0e 7000 	mla	r0, lr, r0, r7
 8028892:	43dc      	mvns	r4, r3
 8028894:	9b01      	ldr	r3, [sp, #4]
 8028896:	b2e4      	uxtb	r4, r4
 8028898:	0a00      	lsrs	r0, r0, #8
 802889a:	4363      	muls	r3, r4
 802889c:	4365      	muls	r5, r4
 802889e:	4362      	muls	r2, r4
 80288a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80288a4:	ea48 0000 	orr.w	r0, r8, r0
 80288a8:	4614      	mov	r4, r2
 80288aa:	1c5e      	adds	r6, r3, #1
 80288ac:	1c6a      	adds	r2, r5, #1
 80288ae:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 80288b2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80288b6:	0a03      	lsrs	r3, r0, #8
 80288b8:	0c02      	lsrs	r2, r0, #16
 80288ba:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80288be:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80288c2:	00db      	lsls	r3, r3, #3
 80288c4:	0212      	lsls	r2, r2, #8
 80288c6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80288ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80288ce:	4313      	orrs	r3, r2
 80288d0:	1c62      	adds	r2, r4, #1
 80288d2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80288d6:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80288da:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80288de:	4318      	orrs	r0, r3
 80288e0:	8008      	strh	r0, [r1, #0]
 80288e2:	b005      	add	sp, #20
 80288e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288e8:	080315e5 	.word	0x080315e5
 80288ec:	08031bae 	.word	0x08031bae
 80288f0:	08031669 	.word	0x08031669

080288f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80288f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288f8:	ed2d 8b08 	vpush	{d8-d11}
 80288fc:	b09b      	sub	sp, #108	; 0x6c
 80288fe:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8028902:	9218      	str	r2, [sp, #96]	; 0x60
 8028904:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8028906:	9116      	str	r1, [sp, #88]	; 0x58
 8028908:	9307      	str	r3, [sp, #28]
 802890a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802890e:	9019      	str	r0, [sp, #100]	; 0x64
 8028910:	6850      	ldr	r0, [r2, #4]
 8028912:	6812      	ldr	r2, [r2, #0]
 8028914:	fb00 1303 	mla	r3, r0, r3, r1
 8028918:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802891c:	930a      	str	r3, [sp, #40]	; 0x28
 802891e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028920:	681b      	ldr	r3, [r3, #0]
 8028922:	930f      	str	r3, [sp, #60]	; 0x3c
 8028924:	eeb0 aa40 	vmov.f32	s20, s0
 8028928:	eef0 9a60 	vmov.f32	s19, s1
 802892c:	eeb0 9a41 	vmov.f32	s18, s2
 8028930:	eeb0 8a62 	vmov.f32	s16, s5
 8028934:	eef0 8a43 	vmov.f32	s17, s6
 8028938:	eef0 ba44 	vmov.f32	s23, s8
 802893c:	eeb0 ba64 	vmov.f32	s22, s9
 8028940:	eef0 aa45 	vmov.f32	s21, s10
 8028944:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028946:	2b00      	cmp	r3, #0
 8028948:	dc03      	bgt.n	8028952 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802894a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802894c:	2b00      	cmp	r3, #0
 802894e:	f340 8389 	ble.w	8029064 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x770>
 8028952:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028954:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028958:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802895c:	1e48      	subs	r0, r1, #1
 802895e:	1e57      	subs	r7, r2, #1
 8028960:	9b07      	ldr	r3, [sp, #28]
 8028962:	2b00      	cmp	r3, #0
 8028964:	f340 818b 	ble.w	8028c7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8028968:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802896c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028970:	d406      	bmi.n	8028980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028972:	4584      	cmp	ip, r0
 8028974:	da04      	bge.n	8028980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028976:	2b00      	cmp	r3, #0
 8028978:	db02      	blt.n	8028980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802897a:	42bb      	cmp	r3, r7
 802897c:	f2c0 8180 	blt.w	8028c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8028980:	f11c 0c01 	adds.w	ip, ip, #1
 8028984:	f100 8170 	bmi.w	8028c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028988:	4561      	cmp	r1, ip
 802898a:	f2c0 816d 	blt.w	8028c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802898e:	3301      	adds	r3, #1
 8028990:	f100 816a 	bmi.w	8028c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028994:	429a      	cmp	r2, r3
 8028996:	f2c0 8167 	blt.w	8028c68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802899a:	9b07      	ldr	r3, [sp, #28]
 802899c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802899e:	9317      	str	r3, [sp, #92]	; 0x5c
 80289a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80289a2:	2b00      	cmp	r3, #0
 80289a4:	f340 8189 	ble.w	8028cba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80289a8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80289aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80289ac:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80289b0:	689b      	ldr	r3, [r3, #8]
 80289b2:	1422      	asrs	r2, r4, #16
 80289b4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80289b8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80289bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80289c0:	f100 81d4 	bmi.w	8028d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80289c4:	f103 38ff 	add.w	r8, r3, #4294967295
 80289c8:	4542      	cmp	r2, r8
 80289ca:	f280 81cf 	bge.w	8028d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80289ce:	f1bc 0f00 	cmp.w	ip, #0
 80289d2:	f2c0 81cb 	blt.w	8028d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80289d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80289da:	45c4      	cmp	ip, r8
 80289dc:	f280 81c6 	bge.w	8028d6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80289e0:	b21b      	sxth	r3, r3
 80289e2:	fb0c 2203 	mla	r2, ip, r3, r2
 80289e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80289e8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80289ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80289f0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80289f4:	2900      	cmp	r1, #0
 80289f6:	f000 81a6 	beq.w	8028d46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80289fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80289fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8028a00:	0e2d      	lsrs	r5, r5, #24
 8028a02:	9512      	str	r5, [sp, #72]	; 0x48
 8028a04:	b180      	cbz	r0, 8028a28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028a0a:	3b01      	subs	r3, #1
 8028a0c:	009b      	lsls	r3, r3, #2
 8028a0e:	3304      	adds	r3, #4
 8028a10:	eb08 0c03 	add.w	ip, r8, r3
 8028a14:	f858 3003 	ldr.w	r3, [r8, r3]
 8028a18:	9308      	str	r3, [sp, #32]
 8028a1a:	0e1b      	lsrs	r3, r3, #24
 8028a1c:	9310      	str	r3, [sp, #64]	; 0x40
 8028a1e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028a22:	930c      	str	r3, [sp, #48]	; 0x30
 8028a24:	0e1b      	lsrs	r3, r3, #24
 8028a26:	9313      	str	r3, [sp, #76]	; 0x4c
 8028a28:	b289      	uxth	r1, r1
 8028a2a:	b280      	uxth	r0, r0
 8028a2c:	fb01 f900 	mul.w	r9, r1, r0
 8028a30:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028a34:	0109      	lsls	r1, r1, #4
 8028a36:	eba1 0809 	sub.w	r8, r1, r9
 8028a3a:	b280      	uxth	r0, r0
 8028a3c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8028a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028a42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028a44:	fa1f f888 	uxth.w	r8, r8
 8028a48:	1a09      	subs	r1, r1, r0
 8028a4a:	b289      	uxth	r1, r1
 8028a4c:	fb08 f303 	mul.w	r3, r8, r3
 8028a50:	fb01 330e 	mla	r3, r1, lr, r3
 8028a54:	fb00 3305 	mla	r3, r0, r5, r3
 8028a58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028a5a:	fb09 3305 	mla	r3, r9, r5, r3
 8028a5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a62:	2b00      	cmp	r3, #0
 8028a64:	f000 80f7 	beq.w	8028c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028a68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028a6c:	d01b      	beq.n	8028aa6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8028a6e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028a72:	fb0e fa0a 	mul.w	sl, lr, sl
 8028a76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028a7a:	fb0e fe02 	mul.w	lr, lr, r2
 8028a7e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028a82:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028a86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028a8a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028a8e:	4452      	add	r2, sl
 8028a90:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028a94:	0a12      	lsrs	r2, r2, #8
 8028a96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a9a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028a9e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028aa2:	ea42 020c 	orr.w	r2, r2, ip
 8028aa6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028aa8:	2dff      	cmp	r5, #255	; 0xff
 8028aaa:	d021      	beq.n	8028af0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028aac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028aae:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028ab2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028ab4:	fb05 fb0b 	mul.w	fp, r5, fp
 8028ab8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028aba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028abe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028ac0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028ac4:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ac8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028acc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028ad0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028ad4:	44de      	add	lr, fp
 8028ad6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028ada:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ade:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ae2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ae6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028aea:	ea4e 050a 	orr.w	r5, lr, sl
 8028aee:	950b      	str	r5, [sp, #44]	; 0x2c
 8028af0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028af2:	2dff      	cmp	r5, #255	; 0xff
 8028af4:	d021      	beq.n	8028b3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028af6:	9d08      	ldr	r5, [sp, #32]
 8028af8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028afc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028afe:	fb05 fb0b 	mul.w	fp, r5, fp
 8028b02:	9d08      	ldr	r5, [sp, #32]
 8028b04:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028b08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028b0a:	fb05 fa0e 	mul.w	sl, r5, lr
 8028b0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028b12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028b1a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028b1e:	44de      	add	lr, fp
 8028b20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b34:	ea4e 050a 	orr.w	r5, lr, sl
 8028b38:	9508      	str	r5, [sp, #32]
 8028b3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028b3c:	2dff      	cmp	r5, #255	; 0xff
 8028b3e:	d021      	beq.n	8028b84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8028b40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028b42:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028b46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028b48:	fb05 fb0b 	mul.w	fp, r5, fp
 8028b4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028b4e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028b52:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028b54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028b58:	fb05 fa0a 	mul.w	sl, r5, sl
 8028b5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028b64:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028b68:	44de      	add	lr, fp
 8028b6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b7e:	ea4e 050a 	orr.w	r5, lr, sl
 8028b82:	950c      	str	r5, [sp, #48]	; 0x30
 8028b84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028b86:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028b8a:	9d08      	ldr	r5, [sp, #32]
 8028b8c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028b90:	fb08 fc0c 	mul.w	ip, r8, ip
 8028b94:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028b98:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028b9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028b9e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028ba2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028ba6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028ba8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028bac:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028bb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028bb4:	fb08 f80e 	mul.w	r8, r8, lr
 8028bb8:	fb01 8202 	mla	r2, r1, r2, r8
 8028bbc:	9908      	ldr	r1, [sp, #32]
 8028bbe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028bc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028bc4:	fb00 220a 	mla	r2, r0, sl, r2
 8028bc8:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028bcc:	fb09 2900 	mla	r9, r9, r0, r2
 8028bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028bd4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028bd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028bdc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028be0:	ea4c 0c09 	orr.w	ip, ip, r9
 8028be4:	2bff      	cmp	r3, #255	; 0xff
 8028be6:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8028bea:	f000 80b5 	beq.w	8028d58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028bee:	8839      	ldrh	r1, [r7, #0]
 8028bf0:	43db      	mvns	r3, r3
 8028bf2:	ea4f 2821 	mov.w	r8, r1, asr #8
 8028bf6:	fa5f f983 	uxtb.w	r9, r3
 8028bfa:	10ca      	asrs	r2, r1, #3
 8028bfc:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8028c00:	fb08 f809 	mul.w	r8, r8, r9
 8028c04:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c08:	fb02 fe09 	mul.w	lr, r2, r9
 8028c0c:	f108 0201 	add.w	r2, r8, #1
 8028c10:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028c14:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028c18:	00cb      	lsls	r3, r1, #3
 8028c1a:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8028c1e:	4961      	ldr	r1, [pc, #388]	; (8028da4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028c20:	b2d2      	uxtb	r2, r2
 8028c22:	ea01 2102 	and.w	r1, r1, r2, lsl #8
 8028c26:	f10e 0201 	add.w	r2, lr, #1
 8028c2a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8028c2e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028c32:	b2db      	uxtb	r3, r3
 8028c34:	00d2      	lsls	r2, r2, #3
 8028c36:	fb03 f309 	mul.w	r3, r3, r9
 8028c3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c3e:	430a      	orrs	r2, r1
 8028c40:	1c59      	adds	r1, r3, #1
 8028c42:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028c46:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028c4a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028c4e:	ea42 0c0c 	orr.w	ip, r2, ip
 8028c52:	f8a7 c000 	strh.w	ip, [r7]
 8028c56:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028c58:	441c      	add	r4, r3
 8028c5a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028c5c:	441e      	add	r6, r3
 8028c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028c60:	3b01      	subs	r3, #1
 8028c62:	3702      	adds	r7, #2
 8028c64:	9317      	str	r3, [sp, #92]	; 0x5c
 8028c66:	e69b      	b.n	80289a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8028c68:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028c6a:	441c      	add	r4, r3
 8028c6c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028c6e:	441e      	add	r6, r3
 8028c70:	9b07      	ldr	r3, [sp, #28]
 8028c72:	3b01      	subs	r3, #1
 8028c74:	9307      	str	r3, [sp, #28]
 8028c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c78:	3302      	adds	r3, #2
 8028c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8028c7c:	e670      	b.n	8028960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028c7e:	d023      	beq.n	8028cc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8028c80:	9b07      	ldr	r3, [sp, #28]
 8028c82:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8028c84:	3b01      	subs	r3, #1
 8028c86:	fb00 4003 	mla	r0, r0, r3, r4
 8028c8a:	1400      	asrs	r0, r0, #16
 8028c8c:	f53f ae85 	bmi.w	802899a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028c90:	3901      	subs	r1, #1
 8028c92:	4288      	cmp	r0, r1
 8028c94:	f6bf ae81 	bge.w	802899a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028c98:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8028c9a:	fb01 6303 	mla	r3, r1, r3, r6
 8028c9e:	141b      	asrs	r3, r3, #16
 8028ca0:	f53f ae7b 	bmi.w	802899a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028ca4:	3a01      	subs	r2, #1
 8028ca6:	4293      	cmp	r3, r2
 8028ca8:	f6bf ae77 	bge.w	802899a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028cac:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028cb0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028cb4:	f1bb 0f00 	cmp.w	fp, #0
 8028cb8:	dc76      	bgt.n	8028da8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028cba:	9b07      	ldr	r3, [sp, #28]
 8028cbc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028cc2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8028cc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028cca:	2b00      	cmp	r3, #0
 8028ccc:	f340 81ca 	ble.w	8029064 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x770>
 8028cd0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028cd8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028cdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028cde:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028ce2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028ce6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028cea:	eef0 6a48 	vmov.f32	s13, s16
 8028cee:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028cf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028cf6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028cfa:	ee16 4a90 	vmov	r4, s13
 8028cfe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028d02:	eef0 6a68 	vmov.f32	s13, s17
 8028d06:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028d0a:	ee18 2a10 	vmov	r2, s16
 8028d0e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d16:	ee18 2a90 	vmov	r2, s17
 8028d1a:	932f      	str	r3, [sp, #188]	; 0xbc
 8028d1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d22:	9330      	str	r3, [sp, #192]	; 0xc0
 8028d24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028d26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028d28:	3b01      	subs	r3, #1
 8028d2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d2e:	9316      	str	r3, [sp, #88]	; 0x58
 8028d30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028d32:	bf08      	it	eq
 8028d34:	4613      	moveq	r3, r2
 8028d36:	ee16 6a90 	vmov	r6, s13
 8028d3a:	9307      	str	r3, [sp, #28]
 8028d3c:	eef0 8a67 	vmov.f32	s17, s15
 8028d40:	eeb0 8a47 	vmov.f32	s16, s14
 8028d44:	e5fe      	b.n	8028944 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8028d46:	2800      	cmp	r0, #0
 8028d48:	f43f ae6e 	beq.w	8028a28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028d4c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028d50:	9308      	str	r3, [sp, #32]
 8028d52:	0e1b      	lsrs	r3, r3, #24
 8028d54:	9310      	str	r3, [sp, #64]	; 0x40
 8028d56:	e667      	b.n	8028a28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028d58:	ea4f 125c 	mov.w	r2, ip, lsr #5
 8028d5c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8028d60:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8028d64:	f022 0207 	bic.w	r2, r2, #7
 8028d68:	431a      	orrs	r2, r3
 8028d6a:	e76e      	b.n	8028c4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028d6c:	f112 0801 	adds.w	r8, r2, #1
 8028d70:	f53f af71 	bmi.w	8028c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d74:	4543      	cmp	r3, r8
 8028d76:	f6ff af6e 	blt.w	8028c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d7a:	f11c 0801 	adds.w	r8, ip, #1
 8028d7e:	f53f af6a 	bmi.w	8028c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d82:	45c6      	cmp	lr, r8
 8028d84:	f6ff af67 	blt.w	8028c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d88:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028d8c:	fa0f f28e 	sxth.w	r2, lr
 8028d90:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028d94:	9200      	str	r2, [sp, #0]
 8028d96:	b21b      	sxth	r3, r3
 8028d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028d9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028d9c:	4639      	mov	r1, r7
 8028d9e:	f7ff fc59 	bl	8028654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028da2:	e758      	b.n	8028c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028da4:	fffff800 	.word	0xfffff800
 8028da8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028daa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028dac:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028db0:	1421      	asrs	r1, r4, #16
 8028db2:	1433      	asrs	r3, r6, #16
 8028db4:	fb07 1303 	mla	r3, r7, r3, r1
 8028db8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028dba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028dbe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028dc2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028dc6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028dca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028dce:	2a00      	cmp	r2, #0
 8028dd0:	f000 8131 	beq.w	8029036 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028dd4:	684d      	ldr	r5, [r1, #4]
 8028dd6:	950d      	str	r5, [sp, #52]	; 0x34
 8028dd8:	0e2d      	lsrs	r5, r5, #24
 8028dda:	9514      	str	r5, [sp, #80]	; 0x50
 8028ddc:	b178      	cbz	r0, 8028dfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8028dde:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028de2:	3f01      	subs	r7, #1
 8028de4:	00bf      	lsls	r7, r7, #2
 8028de6:	3704      	adds	r7, #4
 8028de8:	eb01 0e07 	add.w	lr, r1, r7
 8028dec:	59c9      	ldr	r1, [r1, r7]
 8028dee:	9109      	str	r1, [sp, #36]	; 0x24
 8028df0:	0e09      	lsrs	r1, r1, #24
 8028df2:	9111      	str	r1, [sp, #68]	; 0x44
 8028df4:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028df8:	910e      	str	r1, [sp, #56]	; 0x38
 8028dfa:	0e09      	lsrs	r1, r1, #24
 8028dfc:	9115      	str	r1, [sp, #84]	; 0x54
 8028dfe:	b292      	uxth	r2, r2
 8028e00:	b280      	uxth	r0, r0
 8028e02:	fb02 f900 	mul.w	r9, r2, r0
 8028e06:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028e0a:	0112      	lsls	r2, r2, #4
 8028e0c:	eba2 0e09 	sub.w	lr, r2, r9
 8028e10:	b280      	uxth	r0, r0
 8028e12:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028e16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028e18:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028e1a:	fa1f fe8e 	uxth.w	lr, lr
 8028e1e:	1a09      	subs	r1, r1, r0
 8028e20:	b289      	uxth	r1, r1
 8028e22:	fb0e f202 	mul.w	r2, lr, r2
 8028e26:	fb01 220c 	mla	r2, r1, ip, r2
 8028e2a:	fb00 2205 	mla	r2, r0, r5, r2
 8028e2e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028e30:	fb09 2205 	mla	r2, r9, r5, r2
 8028e34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028e38:	2a00      	cmp	r2, #0
 8028e3a:	f000 80f3 	beq.w	8029024 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028e3e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028e42:	d019      	beq.n	8028e78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8028e44:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028e48:	fb0c fa0a 	mul.w	sl, ip, sl
 8028e4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028e50:	fb0c fc03 	mul.w	ip, ip, r3
 8028e54:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028e58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028e5c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028e60:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028e64:	4453      	add	r3, sl
 8028e66:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028e6a:	0a1b      	lsrs	r3, r3, #8
 8028e6c:	0a3f      	lsrs	r7, r7, #8
 8028e6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028e72:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028e76:	433b      	orrs	r3, r7
 8028e78:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e7a:	2dff      	cmp	r5, #255	; 0xff
 8028e7c:	d020      	beq.n	8028ec0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8028e7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028e80:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028e84:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e86:	436f      	muls	r7, r5
 8028e88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028e8a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e94:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028e9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ea0:	44bc      	add	ip, r7
 8028ea2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028ea6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028eaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028eae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028eb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028eb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028eba:	ea4c 050a 	orr.w	r5, ip, sl
 8028ebe:	950d      	str	r5, [sp, #52]	; 0x34
 8028ec0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ec2:	2dff      	cmp	r5, #255	; 0xff
 8028ec4:	d020      	beq.n	8028f08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8028ec6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028ec8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028ecc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ece:	436f      	muls	r7, r5
 8028ed0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028ed2:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028ed6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ed8:	fb05 fa0c 	mul.w	sl, r5, ip
 8028edc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028ee0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ee4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028ee8:	44bc      	add	ip, r7
 8028eea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028eee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028ef2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ef6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028efa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028efe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f02:	ea4c 050a 	orr.w	r5, ip, sl
 8028f06:	9509      	str	r5, [sp, #36]	; 0x24
 8028f08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028f0a:	2dff      	cmp	r5, #255	; 0xff
 8028f0c:	d020      	beq.n	8028f50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65c>
 8028f0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f10:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028f14:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028f16:	436f      	muls	r7, r5
 8028f18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f1a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028f1e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028f20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028f24:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028f2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f30:	44bc      	add	ip, r7
 8028f32:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028f36:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028f3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f4a:	ea4c 050a 	orr.w	r5, ip, sl
 8028f4e:	950e      	str	r5, [sp, #56]	; 0x38
 8028f50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028f52:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028f56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028f58:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028f5c:	fb0e f707 	mul.w	r7, lr, r7
 8028f60:	fb01 770c 	mla	r7, r1, ip, r7
 8028f64:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028f68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f6a:	fb00 770c 	mla	r7, r0, ip, r7
 8028f6e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028f72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028f74:	fb09 770c 	mla	r7, r9, ip, r7
 8028f78:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028f7c:	fb0e fe0c 	mul.w	lr, lr, ip
 8028f80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028f84:	fb01 e303 	mla	r3, r1, r3, lr
 8028f88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028f8a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028f8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028f90:	fb00 330a 	mla	r3, r0, sl, r3
 8028f94:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028f98:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028f9c:	0a3f      	lsrs	r7, r7, #8
 8028f9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028fa2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028fa6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028faa:	ea47 070c 	orr.w	r7, r7, ip
 8028fae:	2aff      	cmp	r2, #255	; 0xff
 8028fb0:	ea4f 2017 	mov.w	r0, r7, lsr #8
 8028fb4:	d048      	beq.n	8029048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028fb6:	f8b8 1000 	ldrh.w	r1, [r8]
 8028fba:	43d2      	mvns	r2, r2
 8028fbc:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8028fc0:	fa5f f982 	uxtb.w	r9, r2
 8028fc4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028fc8:	fb0e fe09 	mul.w	lr, lr, r9
 8028fcc:	f10e 0301 	add.w	r3, lr, #1
 8028fd0:	ea4f 0ce1 	mov.w	ip, r1, asr #3
 8028fd4:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8028fd8:	0c3b      	lsrs	r3, r7, #16
 8028fda:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8028fde:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028fe2:	4b23      	ldr	r3, [pc, #140]	; (8029070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>)
 8028fe4:	fb0c fc09 	mul.w	ip, ip, r9
 8028fe8:	00ca      	lsls	r2, r1, #3
 8028fea:	fa5f fe8e 	uxtb.w	lr, lr
 8028fee:	ea03 2e0e 	and.w	lr, r3, lr, lsl #8
 8028ff2:	b2d2      	uxtb	r2, r2
 8028ff4:	f10c 0301 	add.w	r3, ip, #1
 8028ff8:	fb02 f209 	mul.w	r2, r2, r9
 8028ffc:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029000:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8029004:	1c51      	adds	r1, r2, #1
 8029006:	00db      	lsls	r3, r3, #3
 8029008:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802900c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029010:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029014:	ea4e 0e03 	orr.w	lr, lr, r3
 8029018:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802901c:	ea47 0e0e 	orr.w	lr, r7, lr
 8029020:	f8a8 e000 	strh.w	lr, [r8]
 8029024:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8029026:	441c      	add	r4, r3
 8029028:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802902a:	f108 0802 	add.w	r8, r8, #2
 802902e:	441e      	add	r6, r3
 8029030:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029034:	e63e      	b.n	8028cb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8029036:	2800      	cmp	r0, #0
 8029038:	f43f aee1 	beq.w	8028dfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 802903c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029040:	9109      	str	r1, [sp, #36]	; 0x24
 8029042:	0e09      	lsrs	r1, r1, #24
 8029044:	9111      	str	r1, [sp, #68]	; 0x44
 8029046:	e6da      	b.n	8028dfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8029048:	097a      	lsrs	r2, r7, #5
 802904a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 802904e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029052:	f020 0007 	bic.w	r0, r0, #7
 8029056:	4310      	orrs	r0, r2
 8029058:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802905c:	4307      	orrs	r7, r0
 802905e:	f8a8 7000 	strh.w	r7, [r8]
 8029062:	e7df      	b.n	8029024 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029064:	b01b      	add	sp, #108	; 0x6c
 8029066:	ecbd 8b08 	vpop	{d8-d11}
 802906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802906e:	bf00      	nop
 8029070:	fffff800 	.word	0xfffff800

08029074 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029078:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802907c:	2c00      	cmp	r4, #0
 802907e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029082:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029086:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802908a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802908e:	fb04 ce03 	mla	lr, r4, r3, ip
 8029092:	db60      	blt.n	8029156 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029094:	45a1      	cmp	r9, r4
 8029096:	dd5e      	ble.n	8029156 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029098:	f1bc 0f00 	cmp.w	ip, #0
 802909c:	db59      	blt.n	8029152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802909e:	45e0      	cmp	r8, ip
 80290a0:	dd57      	ble.n	8029152 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80290a2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80290a6:	f01e 0f01 	tst.w	lr, #1
 80290aa:	5c16      	ldrb	r6, [r2, r0]
 80290ac:	bf0c      	ite	eq
 80290ae:	f006 060f 	andeq.w	r6, r6, #15
 80290b2:	1136      	asrne	r6, r6, #4
 80290b4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80290b8:	b2f6      	uxtb	r6, r6
 80290ba:	f11c 0001 	adds.w	r0, ip, #1
 80290be:	d44d      	bmi.n	802915c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80290c0:	4580      	cmp	r8, r0
 80290c2:	dd4b      	ble.n	802915c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80290c4:	2d00      	cmp	r5, #0
 80290c6:	d04b      	beq.n	8029160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80290c8:	f10e 0a01 	add.w	sl, lr, #1
 80290cc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80290d0:	f01a 0f01 	tst.w	sl, #1
 80290d4:	5c10      	ldrb	r0, [r2, r0]
 80290d6:	bf0c      	ite	eq
 80290d8:	f000 000f 	andeq.w	r0, r0, #15
 80290dc:	1100      	asrne	r0, r0, #4
 80290de:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80290e2:	b2c0      	uxtb	r0, r0
 80290e4:	3401      	adds	r4, #1
 80290e6:	d43f      	bmi.n	8029168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80290e8:	45a1      	cmp	r9, r4
 80290ea:	dd3d      	ble.n	8029168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 80290ec:	2f00      	cmp	r7, #0
 80290ee:	f000 809b 	beq.w	8029228 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b4>
 80290f2:	f1bc 0f00 	cmp.w	ip, #0
 80290f6:	db35      	blt.n	8029164 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80290f8:	45e0      	cmp	r8, ip
 80290fa:	dd33      	ble.n	8029164 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 80290fc:	eb03 090e 	add.w	r9, r3, lr
 8029100:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029104:	f019 0f01 	tst.w	r9, #1
 8029108:	5d14      	ldrb	r4, [r2, r4]
 802910a:	bf0c      	ite	eq
 802910c:	f004 040f 	andeq.w	r4, r4, #15
 8029110:	1124      	asrne	r4, r4, #4
 8029112:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029116:	b2e4      	uxtb	r4, r4
 8029118:	f11c 0c01 	adds.w	ip, ip, #1
 802911c:	d427      	bmi.n	802916e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802911e:	45e0      	cmp	r8, ip
 8029120:	dd25      	ble.n	802916e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029122:	b335      	cbz	r5, 8029172 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8029124:	3301      	adds	r3, #1
 8029126:	449e      	add	lr, r3
 8029128:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802912c:	f01e 0f01 	tst.w	lr, #1
 8029130:	5cd2      	ldrb	r2, [r2, r3]
 8029132:	bf0c      	ite	eq
 8029134:	f002 020f 	andeq.w	r2, r2, #15
 8029138:	1112      	asrne	r2, r2, #4
 802913a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802913e:	b2d3      	uxtb	r3, r2
 8029140:	2d0f      	cmp	r5, #15
 8029142:	d917      	bls.n	8029174 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8029144:	4b3b      	ldr	r3, [pc, #236]	; (8029234 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c0>)
 8029146:	4a3c      	ldr	r2, [pc, #240]	; (8029238 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8029148:	483c      	ldr	r0, [pc, #240]	; (802923c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802914a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 802914e:	f003 fa85 	bl	802c65c <__assert_func>
 8029152:	2600      	movs	r6, #0
 8029154:	e7b1      	b.n	80290ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8029156:	2000      	movs	r0, #0
 8029158:	4606      	mov	r6, r0
 802915a:	e7c3      	b.n	80290e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802915c:	2000      	movs	r0, #0
 802915e:	e7c1      	b.n	80290e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029160:	4628      	mov	r0, r5
 8029162:	e7bf      	b.n	80290e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029164:	2400      	movs	r4, #0
 8029166:	e7d7      	b.n	8029118 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8029168:	2300      	movs	r3, #0
 802916a:	461c      	mov	r4, r3
 802916c:	e7e8      	b.n	8029140 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802916e:	2300      	movs	r3, #0
 8029170:	e7e6      	b.n	8029140 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029172:	462b      	mov	r3, r5
 8029174:	2f0f      	cmp	r7, #15
 8029176:	d8e5      	bhi.n	8029144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029178:	b2ad      	uxth	r5, r5
 802917a:	b2bf      	uxth	r7, r7
 802917c:	fb05 fc07 	mul.w	ip, r5, r7
 8029180:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029184:	012d      	lsls	r5, r5, #4
 8029186:	b2bf      	uxth	r7, r7
 8029188:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802918c:	eba5 050c 	sub.w	r5, r5, ip
 8029190:	1bd2      	subs	r2, r2, r7
 8029192:	b2ad      	uxth	r5, r5
 8029194:	b292      	uxth	r2, r2
 8029196:	4368      	muls	r0, r5
 8029198:	fb06 0002 	mla	r0, r6, r2, r0
 802919c:	fb07 0404 	mla	r4, r7, r4, r0
 80291a0:	fb0c 4303 	mla	r3, ip, r3, r4
 80291a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80291a8:	2b00      	cmp	r3, #0
 80291aa:	d03b      	beq.n	8029224 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b0>
 80291ac:	4a24      	ldr	r2, [pc, #144]	; (8029240 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80291ae:	880e      	ldrh	r6, [r1, #0]
 80291b0:	6815      	ldr	r5, [r2, #0]
 80291b2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80291b6:	435a      	muls	r2, r3
 80291b8:	1c53      	adds	r3, r2, #1
 80291ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80291be:	121b      	asrs	r3, r3, #8
 80291c0:	b29a      	uxth	r2, r3
 80291c2:	1234      	asrs	r4, r6, #8
 80291c4:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80291c8:	43db      	mvns	r3, r3
 80291ca:	b2db      	uxtb	r3, r3
 80291cc:	fb10 f002 	smulbb	r0, r0, r2
 80291d0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80291d4:	fb04 0403 	mla	r4, r4, r3, r0
 80291d8:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80291dc:	10f0      	asrs	r0, r6, #3
 80291de:	b2ed      	uxtb	r5, r5
 80291e0:	00f6      	lsls	r6, r6, #3
 80291e2:	fb17 f702 	smulbb	r7, r7, r2
 80291e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80291ea:	fb15 f202 	smulbb	r2, r5, r2
 80291ee:	b2f6      	uxtb	r6, r6
 80291f0:	b2a4      	uxth	r4, r4
 80291f2:	fb00 7003 	mla	r0, r0, r3, r7
 80291f6:	fb06 2303 	mla	r3, r6, r3, r2
 80291fa:	b29a      	uxth	r2, r3
 80291fc:	1c63      	adds	r3, r4, #1
 80291fe:	b280      	uxth	r0, r0
 8029200:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029204:	1c53      	adds	r3, r2, #1
 8029206:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802920a:	1c42      	adds	r2, r0, #1
 802920c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029210:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029214:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029218:	0940      	lsrs	r0, r0, #5
 802921a:	4323      	orrs	r3, r4
 802921c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029220:	4303      	orrs	r3, r0
 8029222:	800b      	strh	r3, [r1, #0]
 8029224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029228:	2d0f      	cmp	r5, #15
 802922a:	d88b      	bhi.n	8029144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802922c:	463b      	mov	r3, r7
 802922e:	463c      	mov	r4, r7
 8029230:	e7a2      	b.n	8029178 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8029232:	bf00      	nop
 8029234:	080315e5 	.word	0x080315e5
 8029238:	08031bae 	.word	0x08031bae
 802923c:	08031669 	.word	0x08031669
 8029240:	20006708 	.word	0x20006708

08029244 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029248:	ed2d 8b08 	vpush	{d8-d11}
 802924c:	b097      	sub	sp, #92	; 0x5c
 802924e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8029252:	9214      	str	r2, [sp, #80]	; 0x50
 8029254:	9309      	str	r3, [sp, #36]	; 0x24
 8029256:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8029258:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802925c:	910e      	str	r1, [sp, #56]	; 0x38
 802925e:	930f      	str	r3, [sp, #60]	; 0x3c
 8029260:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8029264:	9015      	str	r0, [sp, #84]	; 0x54
 8029266:	6850      	ldr	r0, [r2, #4]
 8029268:	6812      	ldr	r2, [r2, #0]
 802926a:	fb00 1303 	mla	r3, r0, r3, r1
 802926e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029272:	930a      	str	r3, [sp, #40]	; 0x28
 8029274:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029276:	689b      	ldr	r3, [r3, #8]
 8029278:	3301      	adds	r3, #1
 802927a:	f023 0301 	bic.w	r3, r3, #1
 802927e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029280:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029282:	681f      	ldr	r7, [r3, #0]
 8029284:	eeb0 aa40 	vmov.f32	s20, s0
 8029288:	eef0 9a60 	vmov.f32	s19, s1
 802928c:	eeb0 9a41 	vmov.f32	s18, s2
 8029290:	eeb0 8a62 	vmov.f32	s16, s5
 8029294:	eef0 8a43 	vmov.f32	s17, s6
 8029298:	eef0 ba44 	vmov.f32	s23, s8
 802929c:	eeb0 ba64 	vmov.f32	s22, s9
 80292a0:	eef0 aa45 	vmov.f32	s21, s10
 80292a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	dc03      	bgt.n	80292b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80292aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80292ac:	2b00      	cmp	r3, #0
 80292ae:	f340 8257 	ble.w	8029760 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 80292b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80292b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80292b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80292bc:	1e48      	subs	r0, r1, #1
 80292be:	f102 3cff 	add.w	ip, r2, #4294967295
 80292c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	f340 80eb 	ble.w	80294a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80292ca:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80292ce:	ea4f 4326 	mov.w	r3, r6, asr #16
 80292d2:	d406      	bmi.n	80292e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80292d4:	4586      	cmp	lr, r0
 80292d6:	da04      	bge.n	80292e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80292d8:	2b00      	cmp	r3, #0
 80292da:	db02      	blt.n	80292e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80292dc:	4563      	cmp	r3, ip
 80292de:	f2c0 80e0 	blt.w	80294a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80292e2:	f11e 0e01 	adds.w	lr, lr, #1
 80292e6:	f100 80d0 	bmi.w	802948a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80292ea:	4571      	cmp	r1, lr
 80292ec:	f2c0 80cd 	blt.w	802948a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80292f0:	3301      	adds	r3, #1
 80292f2:	f100 80ca 	bmi.w	802948a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80292f6:	429a      	cmp	r2, r3
 80292f8:	f2c0 80c7 	blt.w	802948a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80292fc:	e9dd 9809 	ldrd	r9, r8, [sp, #36]	; 0x24
 8029300:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8029304:	f1b9 0f00 	cmp.w	r9, #0
 8029308:	f340 80e8 	ble.w	80294dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802930c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802930e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029312:	1423      	asrs	r3, r4, #16
 8029314:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029318:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802931c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029320:	f100 8133 	bmi.w	802958a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8029324:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029328:	455b      	cmp	r3, fp
 802932a:	f280 812e 	bge.w	802958a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802932e:	2800      	cmp	r0, #0
 8029330:	f2c0 812b 	blt.w	802958a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8029334:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029338:	4558      	cmp	r0, fp
 802933a:	f280 8126 	bge.w	802958a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802933e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029340:	fb00 3305 	mla	r3, r0, r5, r3
 8029344:	0858      	lsrs	r0, r3, #1
 8029346:	07dd      	lsls	r5, r3, #31
 8029348:	f817 c000 	ldrb.w	ip, [r7, r0]
 802934c:	bf54      	ite	pl
 802934e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029352:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029356:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802935a:	fa5f fc8c 	uxtb.w	ip, ip
 802935e:	2a00      	cmp	r2, #0
 8029360:	f000 8102 	beq.w	8029568 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8029364:	1c58      	adds	r0, r3, #1
 8029366:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802936a:	07c0      	lsls	r0, r0, #31
 802936c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029370:	bf54      	ite	pl
 8029372:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029376:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802937a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802937e:	fa5f f08e 	uxtb.w	r0, lr
 8029382:	9010      	str	r0, [sp, #64]	; 0x40
 8029384:	b1c9      	cbz	r1, 80293ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029386:	4453      	add	r3, sl
 8029388:	0858      	lsrs	r0, r3, #1
 802938a:	07dd      	lsls	r5, r3, #31
 802938c:	5c38      	ldrb	r0, [r7, r0]
 802938e:	bf54      	ite	pl
 8029390:	f000 000f 	andpl.w	r0, r0, #15
 8029394:	1100      	asrmi	r0, r0, #4
 8029396:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802939a:	3301      	adds	r3, #1
 802939c:	b2c0      	uxtb	r0, r0
 802939e:	900c      	str	r0, [sp, #48]	; 0x30
 80293a0:	0858      	lsrs	r0, r3, #1
 80293a2:	07dd      	lsls	r5, r3, #31
 80293a4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80293a8:	bf54      	ite	pl
 80293aa:	f00e 030f 	andpl.w	r3, lr, #15
 80293ae:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80293b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80293b6:	b2db      	uxtb	r3, r3
 80293b8:	9311      	str	r3, [sp, #68]	; 0x44
 80293ba:	b292      	uxth	r2, r2
 80293bc:	b289      	uxth	r1, r1
 80293be:	fb02 f301 	mul.w	r3, r2, r1
 80293c2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80293c6:	0112      	lsls	r2, r2, #4
 80293c8:	b289      	uxth	r1, r1
 80293ca:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80293ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80293d0:	1ad2      	subs	r2, r2, r3
 80293d2:	1a40      	subs	r0, r0, r1
 80293d4:	b292      	uxth	r2, r2
 80293d6:	436a      	muls	r2, r5
 80293d8:	b280      	uxth	r0, r0
 80293da:	fb0c 2c00 	mla	ip, ip, r0, r2
 80293de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80293e0:	fb01 c102 	mla	r1, r1, r2, ip
 80293e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80293e6:	fb03 1302 	mla	r3, r3, r2, r1
 80293ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80293ee:	2b00      	cmp	r3, #0
 80293f0:	d042      	beq.n	8029478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80293f2:	4a76      	ldr	r2, [pc, #472]	; (80295cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>)
 80293f4:	f8b8 c000 	ldrh.w	ip, [r8]
 80293f8:	6810      	ldr	r0, [r2, #0]
 80293fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80293fc:	4353      	muls	r3, r2
 80293fe:	1c5a      	adds	r2, r3, #1
 8029400:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029404:	121b      	asrs	r3, r3, #8
 8029406:	fa1f fe83 	uxth.w	lr, r3
 802940a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802940e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029412:	43db      	mvns	r3, r3
 8029414:	b2db      	uxtb	r3, r3
 8029416:	fb12 f20e 	smulbb	r2, r2, lr
 802941a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802941e:	fb01 2103 	mla	r1, r1, r3, r2
 8029422:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029426:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802942a:	b2c0      	uxtb	r0, r0
 802942c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029430:	fb1b fb0e 	smulbb	fp, fp, lr
 8029434:	b289      	uxth	r1, r1
 8029436:	fb10 fe0e 	smulbb	lr, r0, lr
 802943a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802943e:	fa5f fc8c 	uxtb.w	ip, ip
 8029442:	fb02 b203 	mla	r2, r2, r3, fp
 8029446:	1c48      	adds	r0, r1, #1
 8029448:	fb0c e303 	mla	r3, ip, r3, lr
 802944c:	b292      	uxth	r2, r2
 802944e:	b29b      	uxth	r3, r3
 8029450:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8029454:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8029458:	f102 0b01 	add.w	fp, r2, #1
 802945c:	1c59      	adds	r1, r3, #1
 802945e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029462:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029466:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802946a:	0952      	lsrs	r2, r2, #5
 802946c:	4301      	orrs	r1, r0
 802946e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029472:	4311      	orrs	r1, r2
 8029474:	f8a8 1000 	strh.w	r1, [r8]
 8029478:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802947a:	441c      	add	r4, r3
 802947c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802947e:	f108 0802 	add.w	r8, r8, #2
 8029482:	441e      	add	r6, r3
 8029484:	f109 39ff 	add.w	r9, r9, #4294967295
 8029488:	e73c      	b.n	8029304 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802948a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802948c:	441c      	add	r4, r3
 802948e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029490:	441e      	add	r6, r3
 8029492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029494:	3b01      	subs	r3, #1
 8029496:	9309      	str	r3, [sp, #36]	; 0x24
 8029498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802949a:	3302      	adds	r3, #2
 802949c:	930a      	str	r3, [sp, #40]	; 0x28
 802949e:	e710      	b.n	80292c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80294a0:	d023      	beq.n	80294ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80294a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80294a4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80294a6:	3b01      	subs	r3, #1
 80294a8:	fb00 4003 	mla	r0, r0, r3, r4
 80294ac:	1400      	asrs	r0, r0, #16
 80294ae:	f53f af25 	bmi.w	80292fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80294b2:	3901      	subs	r1, #1
 80294b4:	4288      	cmp	r0, r1
 80294b6:	f6bf af21 	bge.w	80292fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80294ba:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80294bc:	fb01 6303 	mla	r3, r1, r3, r6
 80294c0:	141b      	asrs	r3, r3, #16
 80294c2:	f53f af1b 	bmi.w	80292fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80294c6:	3a01      	subs	r2, #1
 80294c8:	4293      	cmp	r3, r2
 80294ca:	f6bf af17 	bge.w	80292fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80294ce:	e9dd 8e09 	ldrd	r8, lr, [sp, #36]	; 0x24
 80294d2:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80294d6:	f1b8 0f00 	cmp.w	r8, #0
 80294da:	dc79      	bgt.n	80295d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80294dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80294de:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80294e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80294e4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80294e8:	930a      	str	r3, [sp, #40]	; 0x28
 80294ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80294ec:	2b00      	cmp	r3, #0
 80294ee:	f340 8137 	ble.w	8029760 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 80294f2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80294f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80294fa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80294fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029500:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029504:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029508:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802950c:	eef0 6a48 	vmov.f32	s13, s16
 8029510:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029514:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029518:	ee37 8a48 	vsub.f32	s16, s14, s16
 802951c:	ee16 4a90 	vmov	r4, s13
 8029520:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029524:	eef0 6a68 	vmov.f32	s13, s17
 8029528:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802952c:	ee18 2a10 	vmov	r2, s16
 8029530:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029534:	fb92 f3f3 	sdiv	r3, r2, r3
 8029538:	ee18 2a90 	vmov	r2, s17
 802953c:	932b      	str	r3, [sp, #172]	; 0xac
 802953e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029540:	fb92 f3f3 	sdiv	r3, r2, r3
 8029544:	932c      	str	r3, [sp, #176]	; 0xb0
 8029546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029548:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802954a:	3b01      	subs	r3, #1
 802954c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029550:	930e      	str	r3, [sp, #56]	; 0x38
 8029552:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029554:	bf08      	it	eq
 8029556:	4613      	moveq	r3, r2
 8029558:	ee16 6a90 	vmov	r6, s13
 802955c:	9309      	str	r3, [sp, #36]	; 0x24
 802955e:	eef0 8a67 	vmov.f32	s17, s15
 8029562:	eeb0 8a47 	vmov.f32	s16, s14
 8029566:	e69d      	b.n	80292a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8029568:	2900      	cmp	r1, #0
 802956a:	f43f af26 	beq.w	80293ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802956e:	eb0a 0003 	add.w	r0, sl, r3
 8029572:	0843      	lsrs	r3, r0, #1
 8029574:	07c0      	lsls	r0, r0, #31
 8029576:	5cfb      	ldrb	r3, [r7, r3]
 8029578:	bf54      	ite	pl
 802957a:	f003 030f 	andpl.w	r3, r3, #15
 802957e:	111b      	asrmi	r3, r3, #4
 8029580:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029584:	b2db      	uxtb	r3, r3
 8029586:	930c      	str	r3, [sp, #48]	; 0x30
 8029588:	e717      	b.n	80293ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802958a:	f113 0b01 	adds.w	fp, r3, #1
 802958e:	f53f af73 	bmi.w	8029478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029592:	45dc      	cmp	ip, fp
 8029594:	f6ff af70 	blt.w	8029478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029598:	f110 0b01 	adds.w	fp, r0, #1
 802959c:	f53f af6c 	bmi.w	8029478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80295a0:	45de      	cmp	lr, fp
 80295a2:	f6ff af69 	blt.w	8029478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80295a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80295a8:	9302      	str	r3, [sp, #8]
 80295aa:	fa0f f38e 	sxth.w	r3, lr
 80295ae:	9301      	str	r3, [sp, #4]
 80295b0:	fa0f f38c 	sxth.w	r3, ip
 80295b4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80295b8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80295bc:	9300      	str	r3, [sp, #0]
 80295be:	463a      	mov	r2, r7
 80295c0:	4653      	mov	r3, sl
 80295c2:	4641      	mov	r1, r8
 80295c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80295c6:	f7ff fd55 	bl	8029074 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80295ca:	e755      	b.n	8029478 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80295cc:	20006708 	.word	0x20006708
 80295d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80295d2:	1422      	asrs	r2, r4, #16
 80295d4:	1433      	asrs	r3, r6, #16
 80295d6:	fb05 2303 	mla	r3, r5, r3, r2
 80295da:	085a      	lsrs	r2, r3, #1
 80295dc:	07dd      	lsls	r5, r3, #31
 80295de:	5cba      	ldrb	r2, [r7, r2]
 80295e0:	bf54      	ite	pl
 80295e2:	f002 020f 	andpl.w	r2, r2, #15
 80295e6:	1112      	asrmi	r2, r2, #4
 80295e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80295ec:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80295f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80295f4:	b2d2      	uxtb	r2, r2
 80295f6:	2900      	cmp	r1, #0
 80295f8:	f000 809f 	beq.w	802973a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f6>
 80295fc:	f103 0901 	add.w	r9, r3, #1
 8029600:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 8029604:	f019 0f01 	tst.w	r9, #1
 8029608:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802960c:	bf0c      	ite	eq
 802960e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029612:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029616:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802961a:	fa5f f58c 	uxtb.w	r5, ip
 802961e:	9512      	str	r5, [sp, #72]	; 0x48
 8029620:	b1f8      	cbz	r0, 8029662 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 8029622:	445b      	add	r3, fp
 8029624:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029628:	07dd      	lsls	r5, r3, #31
 802962a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802962e:	bf54      	ite	pl
 8029630:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029634:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029638:	3301      	adds	r3, #1
 802963a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802963e:	fa5f f58c 	uxtb.w	r5, ip
 8029642:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029646:	950d      	str	r5, [sp, #52]	; 0x34
 8029648:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802964c:	07dd      	lsls	r5, r3, #31
 802964e:	bf54      	ite	pl
 8029650:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029654:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029658:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802965c:	fa5f f38c 	uxtb.w	r3, ip
 8029660:	9313      	str	r3, [sp, #76]	; 0x4c
 8029662:	b289      	uxth	r1, r1
 8029664:	b280      	uxth	r0, r0
 8029666:	fb01 f300 	mul.w	r3, r1, r0
 802966a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802966e:	0109      	lsls	r1, r1, #4
 8029670:	b280      	uxth	r0, r0
 8029672:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029676:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029678:	1ac9      	subs	r1, r1, r3
 802967a:	ebac 0c00 	sub.w	ip, ip, r0
 802967e:	b289      	uxth	r1, r1
 8029680:	4369      	muls	r1, r5
 8029682:	fa1f fc8c 	uxth.w	ip, ip
 8029686:	fb02 120c 	mla	r2, r2, ip, r1
 802968a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802968c:	fb00 2001 	mla	r0, r0, r1, r2
 8029690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029692:	fb03 0302 	mla	r3, r3, r2, r0
 8029696:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802969a:	2b00      	cmp	r3, #0
 802969c:	d044      	beq.n	8029728 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802969e:	4a33      	ldr	r2, [pc, #204]	; (802976c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>)
 80296a0:	f8be c000 	ldrh.w	ip, [lr]
 80296a4:	6810      	ldr	r0, [r2, #0]
 80296a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80296a8:	4353      	muls	r3, r2
 80296aa:	1c5a      	adds	r2, r3, #1
 80296ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80296b0:	121b      	asrs	r3, r3, #8
 80296b2:	fa1f f983 	uxth.w	r9, r3
 80296b6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80296ba:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80296be:	43db      	mvns	r3, r3
 80296c0:	b2db      	uxtb	r3, r3
 80296c2:	fb12 f209 	smulbb	r2, r2, r9
 80296c6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80296ca:	fb01 2103 	mla	r1, r1, r3, r2
 80296ce:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80296d2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80296d6:	b2c0      	uxtb	r0, r0
 80296d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80296dc:	fa5f fc8c 	uxtb.w	ip, ip
 80296e0:	fb10 f009 	smulbb	r0, r0, r9
 80296e4:	fb0c 0003 	mla	r0, ip, r3, r0
 80296e8:	b289      	uxth	r1, r1
 80296ea:	fb1a fa09 	smulbb	sl, sl, r9
 80296ee:	b280      	uxth	r0, r0
 80296f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80296f4:	fb02 a203 	mla	r2, r2, r3, sl
 80296f8:	1c4b      	adds	r3, r1, #1
 80296fa:	f100 0a01 	add.w	sl, r0, #1
 80296fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029702:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8029706:	b292      	uxth	r2, r2
 8029708:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802970c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029710:	ea4a 0101 	orr.w	r1, sl, r1
 8029714:	f102 0a01 	add.w	sl, r2, #1
 8029718:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802971c:	0952      	lsrs	r2, r2, #5
 802971e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029722:	4311      	orrs	r1, r2
 8029724:	f8ae 1000 	strh.w	r1, [lr]
 8029728:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802972a:	441c      	add	r4, r3
 802972c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802972e:	f10e 0e02 	add.w	lr, lr, #2
 8029732:	441e      	add	r6, r3
 8029734:	f108 38ff 	add.w	r8, r8, #4294967295
 8029738:	e6cd      	b.n	80294d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802973a:	2800      	cmp	r0, #0
 802973c:	d091      	beq.n	8029662 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 802973e:	445b      	add	r3, fp
 8029740:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029744:	07db      	lsls	r3, r3, #31
 8029746:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802974a:	bf54      	ite	pl
 802974c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029750:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029754:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029758:	fa5f f38c 	uxtb.w	r3, ip
 802975c:	930d      	str	r3, [sp, #52]	; 0x34
 802975e:	e780      	b.n	8029662 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 8029760:	b017      	add	sp, #92	; 0x5c
 8029762:	ecbd 8b08 	vpop	{d8-d11}
 8029766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802976a:	bf00      	nop
 802976c:	20006708 	.word	0x20006708

08029770 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029774:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029778:	2c00      	cmp	r4, #0
 802977a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802977e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029782:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8029786:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802978a:	fb04 ce03 	mla	lr, r4, r3, ip
 802978e:	db60      	blt.n	8029852 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029790:	45a1      	cmp	r9, r4
 8029792:	dd5e      	ble.n	8029852 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029794:	f1bc 0f00 	cmp.w	ip, #0
 8029798:	db59      	blt.n	802984e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802979a:	45e0      	cmp	r8, ip
 802979c:	dd57      	ble.n	802984e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802979e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80297a2:	f01e 0f01 	tst.w	lr, #1
 80297a6:	5c16      	ldrb	r6, [r2, r0]
 80297a8:	bf0c      	ite	eq
 80297aa:	f006 060f 	andeq.w	r6, r6, #15
 80297ae:	1136      	asrne	r6, r6, #4
 80297b0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80297b4:	b2f6      	uxtb	r6, r6
 80297b6:	f11c 0001 	adds.w	r0, ip, #1
 80297ba:	d44d      	bmi.n	8029858 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80297bc:	4580      	cmp	r8, r0
 80297be:	dd4b      	ble.n	8029858 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80297c0:	2d00      	cmp	r5, #0
 80297c2:	d04b      	beq.n	802985c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80297c4:	f10e 0a01 	add.w	sl, lr, #1
 80297c8:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80297cc:	f01a 0f01 	tst.w	sl, #1
 80297d0:	5c10      	ldrb	r0, [r2, r0]
 80297d2:	bf0c      	ite	eq
 80297d4:	f000 000f 	andeq.w	r0, r0, #15
 80297d8:	1100      	asrne	r0, r0, #4
 80297da:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80297de:	b2c0      	uxtb	r0, r0
 80297e0:	3401      	adds	r4, #1
 80297e2:	d43f      	bmi.n	8029864 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80297e4:	45a1      	cmp	r9, r4
 80297e6:	dd3d      	ble.n	8029864 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80297e8:	2f00      	cmp	r7, #0
 80297ea:	f000 8093 	beq.w	8029914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80297ee:	f1bc 0f00 	cmp.w	ip, #0
 80297f2:	db35      	blt.n	8029860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80297f4:	45e0      	cmp	r8, ip
 80297f6:	dd33      	ble.n	8029860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80297f8:	eb03 090e 	add.w	r9, r3, lr
 80297fc:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029800:	f019 0f01 	tst.w	r9, #1
 8029804:	5d14      	ldrb	r4, [r2, r4]
 8029806:	bf0c      	ite	eq
 8029808:	f004 040f 	andeq.w	r4, r4, #15
 802980c:	1124      	asrne	r4, r4, #4
 802980e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029812:	b2e4      	uxtb	r4, r4
 8029814:	f11c 0c01 	adds.w	ip, ip, #1
 8029818:	d427      	bmi.n	802986a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802981a:	45e0      	cmp	r8, ip
 802981c:	dd25      	ble.n	802986a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802981e:	b335      	cbz	r5, 802986e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8029820:	3301      	adds	r3, #1
 8029822:	449e      	add	lr, r3
 8029824:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029828:	f01e 0f01 	tst.w	lr, #1
 802982c:	5cd2      	ldrb	r2, [r2, r3]
 802982e:	bf0c      	ite	eq
 8029830:	f002 020f 	andeq.w	r2, r2, #15
 8029834:	1112      	asrne	r2, r2, #4
 8029836:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802983a:	b2d3      	uxtb	r3, r2
 802983c:	2d0f      	cmp	r5, #15
 802983e:	d917      	bls.n	8029870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8029840:	4b37      	ldr	r3, [pc, #220]	; (8029920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 8029842:	4a38      	ldr	r2, [pc, #224]	; (8029924 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8029844:	4838      	ldr	r0, [pc, #224]	; (8029928 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8029846:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 802984a:	f002 ff07 	bl	802c65c <__assert_func>
 802984e:	2600      	movs	r6, #0
 8029850:	e7b1      	b.n	80297b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8029852:	2000      	movs	r0, #0
 8029854:	4606      	mov	r6, r0
 8029856:	e7c3      	b.n	80297e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029858:	2000      	movs	r0, #0
 802985a:	e7c1      	b.n	80297e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802985c:	4628      	mov	r0, r5
 802985e:	e7bf      	b.n	80297e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029860:	2400      	movs	r4, #0
 8029862:	e7d7      	b.n	8029814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8029864:	2300      	movs	r3, #0
 8029866:	461c      	mov	r4, r3
 8029868:	e7e8      	b.n	802983c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802986a:	2300      	movs	r3, #0
 802986c:	e7e6      	b.n	802983c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802986e:	462b      	mov	r3, r5
 8029870:	2f0f      	cmp	r7, #15
 8029872:	d8e5      	bhi.n	8029840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029874:	b2ad      	uxth	r5, r5
 8029876:	b2bf      	uxth	r7, r7
 8029878:	fb05 fc07 	mul.w	ip, r5, r7
 802987c:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029880:	012d      	lsls	r5, r5, #4
 8029882:	b2bf      	uxth	r7, r7
 8029884:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8029888:	eba5 050c 	sub.w	r5, r5, ip
 802988c:	1bd2      	subs	r2, r2, r7
 802988e:	b2ad      	uxth	r5, r5
 8029890:	b292      	uxth	r2, r2
 8029892:	4368      	muls	r0, r5
 8029894:	fb06 0002 	mla	r0, r6, r2, r0
 8029898:	fb07 0404 	mla	r4, r7, r4, r0
 802989c:	fb0c 4303 	mla	r3, ip, r3, r4
 80298a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80298a4:	b3a3      	cbz	r3, 8029910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80298a6:	4a21      	ldr	r2, [pc, #132]	; (802992c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 80298a8:	880e      	ldrh	r6, [r1, #0]
 80298aa:	6815      	ldr	r5, [r2, #0]
 80298ac:	1234      	asrs	r4, r6, #8
 80298ae:	b29a      	uxth	r2, r3
 80298b0:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80298b4:	43db      	mvns	r3, r3
 80298b6:	b2db      	uxtb	r3, r3
 80298b8:	fb10 f002 	smulbb	r0, r0, r2
 80298bc:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80298c0:	fb04 0403 	mla	r4, r4, r3, r0
 80298c4:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80298c8:	10f0      	asrs	r0, r6, #3
 80298ca:	b2ed      	uxtb	r5, r5
 80298cc:	00f6      	lsls	r6, r6, #3
 80298ce:	fb17 f702 	smulbb	r7, r7, r2
 80298d2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80298d6:	fb15 f202 	smulbb	r2, r5, r2
 80298da:	b2f6      	uxtb	r6, r6
 80298dc:	b2a4      	uxth	r4, r4
 80298de:	fb00 7003 	mla	r0, r0, r3, r7
 80298e2:	fb06 2303 	mla	r3, r6, r3, r2
 80298e6:	b29a      	uxth	r2, r3
 80298e8:	1c63      	adds	r3, r4, #1
 80298ea:	b280      	uxth	r0, r0
 80298ec:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80298f0:	1c53      	adds	r3, r2, #1
 80298f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80298f6:	1c42      	adds	r2, r0, #1
 80298f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80298fc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029900:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029904:	0940      	lsrs	r0, r0, #5
 8029906:	4323      	orrs	r3, r4
 8029908:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802990c:	4303      	orrs	r3, r0
 802990e:	800b      	strh	r3, [r1, #0]
 8029910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029914:	2d0f      	cmp	r5, #15
 8029916:	d893      	bhi.n	8029840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029918:	463b      	mov	r3, r7
 802991a:	463c      	mov	r4, r7
 802991c:	e7aa      	b.n	8029874 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802991e:	bf00      	nop
 8029920:	080315e5 	.word	0x080315e5
 8029924:	08031bae 	.word	0x08031bae
 8029928:	08031669 	.word	0x08031669
 802992c:	20006708 	.word	0x20006708

08029930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029934:	ed2d 8b08 	vpush	{d8-d11}
 8029938:	b093      	sub	sp, #76	; 0x4c
 802993a:	461d      	mov	r5, r3
 802993c:	920c      	str	r2, [sp, #48]	; 0x30
 802993e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029940:	9107      	str	r1, [sp, #28]
 8029942:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029946:	9011      	str	r0, [sp, #68]	; 0x44
 8029948:	6850      	ldr	r0, [r2, #4]
 802994a:	6812      	ldr	r2, [r2, #0]
 802994c:	fb00 1303 	mla	r3, r0, r3, r1
 8029950:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029954:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029956:	689b      	ldr	r3, [r3, #8]
 8029958:	3301      	adds	r3, #1
 802995a:	f023 0301 	bic.w	r3, r3, #1
 802995e:	9306      	str	r3, [sp, #24]
 8029960:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029962:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029966:	681f      	ldr	r7, [r3, #0]
 8029968:	eeb0 aa40 	vmov.f32	s20, s0
 802996c:	eef0 9a60 	vmov.f32	s19, s1
 8029970:	eeb0 9a41 	vmov.f32	s18, s2
 8029974:	eeb0 8a62 	vmov.f32	s16, s5
 8029978:	eef0 8a43 	vmov.f32	s17, s6
 802997c:	eef0 ba44 	vmov.f32	s23, s8
 8029980:	eeb0 ba64 	vmov.f32	s22, s9
 8029984:	eef0 aa45 	vmov.f32	s21, s10
 8029988:	9b07      	ldr	r3, [sp, #28]
 802998a:	2b00      	cmp	r3, #0
 802998c:	dc03      	bgt.n	8029996 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802998e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029990:	2b00      	cmp	r3, #0
 8029992:	f340 8267 	ble.w	8029e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029996:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029998:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802999c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80299a0:	1e48      	subs	r0, r1, #1
 80299a2:	f102 3cff 	add.w	ip, r2, #4294967295
 80299a6:	2d00      	cmp	r5, #0
 80299a8:	f340 80eb 	ble.w	8029b82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80299ac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80299b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80299b4:	d406      	bmi.n	80299c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80299b6:	4586      	cmp	lr, r0
 80299b8:	da04      	bge.n	80299c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80299ba:	2b00      	cmp	r3, #0
 80299bc:	db02      	blt.n	80299c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80299be:	4563      	cmp	r3, ip
 80299c0:	f2c0 80e0 	blt.w	8029b84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80299c4:	f11e 0e01 	adds.w	lr, lr, #1
 80299c8:	f100 80d3 	bmi.w	8029b72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80299cc:	4571      	cmp	r1, lr
 80299ce:	f2c0 80d0 	blt.w	8029b72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80299d2:	3301      	adds	r3, #1
 80299d4:	f100 80cd 	bmi.w	8029b72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80299d8:	429a      	cmp	r2, r3
 80299da:	f2c0 80ca 	blt.w	8029b72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80299de:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80299e2:	9509      	str	r5, [sp, #36]	; 0x24
 80299e4:	46c8      	mov	r8, r9
 80299e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80299e8:	2b00      	cmp	r3, #0
 80299ea:	f340 80e9 	ble.w	8029bc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80299ee:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80299f2:	9308      	str	r3, [sp, #32]
 80299f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80299f6:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80299fa:	1423      	asrs	r3, r4, #16
 80299fc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029a00:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029a04:	f100 813d 	bmi.w	8029c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029a08:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029a0c:	455b      	cmp	r3, fp
 8029a0e:	f280 8138 	bge.w	8029c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029a12:	2800      	cmp	r0, #0
 8029a14:	f2c0 8135 	blt.w	8029c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029a18:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029a1c:	4558      	cmp	r0, fp
 8029a1e:	f280 8130 	bge.w	8029c82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029a22:	9a06      	ldr	r2, [sp, #24]
 8029a24:	fb00 3302 	mla	r3, r0, r2, r3
 8029a28:	0858      	lsrs	r0, r3, #1
 8029a2a:	07da      	lsls	r2, r3, #31
 8029a2c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029a30:	9a08      	ldr	r2, [sp, #32]
 8029a32:	bf54      	ite	pl
 8029a34:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029a38:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029a3c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029a40:	fa5f fc8c 	uxtb.w	ip, ip
 8029a44:	2a00      	cmp	r2, #0
 8029a46:	f000 80fe 	beq.w	8029c46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8029a4a:	1c58      	adds	r0, r3, #1
 8029a4c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029a50:	07c0      	lsls	r0, r0, #31
 8029a52:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029a56:	bf54      	ite	pl
 8029a58:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029a5c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029a60:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029a64:	fa5f fe8e 	uxtb.w	lr, lr
 8029a68:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029a6c:	b1b9      	cbz	r1, 8029a9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8029a6e:	4453      	add	r3, sl
 8029a70:	0858      	lsrs	r0, r3, #1
 8029a72:	07da      	lsls	r2, r3, #31
 8029a74:	5c38      	ldrb	r0, [r7, r0]
 8029a76:	bf54      	ite	pl
 8029a78:	f000 000f 	andpl.w	r0, r0, #15
 8029a7c:	1100      	asrmi	r0, r0, #4
 8029a7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029a82:	b2c0      	uxtb	r0, r0
 8029a84:	900a      	str	r0, [sp, #40]	; 0x28
 8029a86:	1c58      	adds	r0, r3, #1
 8029a88:	0843      	lsrs	r3, r0, #1
 8029a8a:	07c2      	lsls	r2, r0, #31
 8029a8c:	5cfb      	ldrb	r3, [r7, r3]
 8029a8e:	bf54      	ite	pl
 8029a90:	f003 030f 	andpl.w	r3, r3, #15
 8029a94:	111b      	asrmi	r3, r3, #4
 8029a96:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029a9a:	b2db      	uxtb	r3, r3
 8029a9c:	930e      	str	r3, [sp, #56]	; 0x38
 8029a9e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029aa2:	b289      	uxth	r1, r1
 8029aa4:	fb02 f301 	mul.w	r3, r2, r1
 8029aa8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029aac:	0112      	lsls	r2, r2, #4
 8029aae:	b289      	uxth	r1, r1
 8029ab0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029ab4:	1a40      	subs	r0, r0, r1
 8029ab6:	fa1f fe80 	uxth.w	lr, r0
 8029aba:	1ad2      	subs	r2, r2, r3
 8029abc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029abe:	b292      	uxth	r2, r2
 8029ac0:	4342      	muls	r2, r0
 8029ac2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029ac8:	fb01 c102 	mla	r1, r1, r2, ip
 8029acc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029ace:	fb03 1302 	mla	r3, r3, r2, r1
 8029ad2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029ad6:	2b00      	cmp	r3, #0
 8029ad8:	d041      	beq.n	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029ada:	4a7a      	ldr	r2, [pc, #488]	; (8029cc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>)
 8029adc:	6810      	ldr	r0, [r2, #0]
 8029ade:	2bff      	cmp	r3, #255	; 0xff
 8029ae0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8029ae4:	ea4f 2110 	mov.w	r1, r0, lsr #8
 8029ae8:	fa5f fe80 	uxtb.w	lr, r0
 8029aec:	f000 80bc 	beq.w	8029c68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8029af0:	f8b8 c000 	ldrh.w	ip, [r8]
 8029af4:	fa1f fb83 	uxth.w	fp, r3
 8029af8:	ea4f 202c 	mov.w	r0, ip, asr #8
 8029afc:	43db      	mvns	r3, r3
 8029afe:	b2d2      	uxtb	r2, r2
 8029b00:	b2db      	uxtb	r3, r3
 8029b02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029b06:	fb12 f20b 	smulbb	r2, r2, fp
 8029b0a:	fb00 2203 	mla	r2, r0, r3, r2
 8029b0e:	b2c9      	uxtb	r1, r1
 8029b10:	ea4f 00ec 	mov.w	r0, ip, asr #3
 8029b14:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029b18:	b292      	uxth	r2, r2
 8029b1a:	fb11 f10b 	smulbb	r1, r1, fp
 8029b1e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029b22:	fa5f fc8c 	uxtb.w	ip, ip
 8029b26:	fb1e fe0b 	smulbb	lr, lr, fp
 8029b2a:	fb00 1003 	mla	r0, r0, r3, r1
 8029b2e:	1c51      	adds	r1, r2, #1
 8029b30:	fb0c e303 	mla	r3, ip, r3, lr
 8029b34:	b29b      	uxth	r3, r3
 8029b36:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029b3a:	f402 4178 	and.w	r1, r2, #63488	; 0xf800
 8029b3e:	1c5a      	adds	r2, r3, #1
 8029b40:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029b44:	b280      	uxth	r0, r0
 8029b46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8029b4a:	430a      	orrs	r2, r1
 8029b4c:	1c41      	adds	r1, r0, #1
 8029b4e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029b52:	0940      	lsrs	r0, r0, #5
 8029b54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029b58:	4302      	orrs	r2, r0
 8029b5a:	f8a8 2000 	strh.w	r2, [r8]
 8029b5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029b60:	441c      	add	r4, r3
 8029b62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b64:	441e      	add	r6, r3
 8029b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b68:	3b01      	subs	r3, #1
 8029b6a:	f108 0802 	add.w	r8, r8, #2
 8029b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8029b70:	e739      	b.n	80299e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029b72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029b74:	441c      	add	r4, r3
 8029b76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029b78:	3d01      	subs	r5, #1
 8029b7a:	441e      	add	r6, r3
 8029b7c:	f109 0902 	add.w	r9, r9, #2
 8029b80:	e711      	b.n	80299a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8029b82:	d021      	beq.n	8029bc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8029b84:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029b86:	1e6b      	subs	r3, r5, #1
 8029b88:	fb00 4003 	mla	r0, r0, r3, r4
 8029b8c:	1400      	asrs	r0, r0, #16
 8029b8e:	f53f af26 	bmi.w	80299de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029b92:	3901      	subs	r1, #1
 8029b94:	4288      	cmp	r0, r1
 8029b96:	f6bf af22 	bge.w	80299de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029b9a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029b9c:	fb01 6303 	mla	r3, r1, r3, r6
 8029ba0:	141b      	asrs	r3, r3, #16
 8029ba2:	f53f af1c 	bmi.w	80299de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029ba6:	3a01      	subs	r2, #1
 8029ba8:	4293      	cmp	r3, r2
 8029baa:	f6bf af18 	bge.w	80299de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029bae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029bb2:	9308      	str	r3, [sp, #32]
 8029bb4:	46aa      	mov	sl, r5
 8029bb6:	46c8      	mov	r8, r9
 8029bb8:	f1ba 0f00 	cmp.w	sl, #0
 8029bbc:	f300 8086 	bgt.w	8029ccc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8029bc0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029bc4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029bc8:	9b07      	ldr	r3, [sp, #28]
 8029bca:	2b00      	cmp	r3, #0
 8029bcc:	f340 814a 	ble.w	8029e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029bd0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029bd8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029bde:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029be2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029be6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029bea:	eef0 6a48 	vmov.f32	s13, s16
 8029bee:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029bf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029bf6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029bfa:	ee16 4a90 	vmov	r4, s13
 8029bfe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029c02:	eef0 6a68 	vmov.f32	s13, s17
 8029c06:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029c0a:	ee18 2a10 	vmov	r2, s16
 8029c0e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8029c16:	ee18 2a90 	vmov	r2, s17
 8029c1a:	9327      	str	r3, [sp, #156]	; 0x9c
 8029c1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029c22:	9328      	str	r3, [sp, #160]	; 0xa0
 8029c24:	9b07      	ldr	r3, [sp, #28]
 8029c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029c28:	3b01      	subs	r3, #1
 8029c2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029c2e:	9307      	str	r3, [sp, #28]
 8029c30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029c32:	ee16 6a90 	vmov	r6, s13
 8029c36:	bf14      	ite	ne
 8029c38:	461d      	movne	r5, r3
 8029c3a:	4615      	moveq	r5, r2
 8029c3c:	eef0 8a67 	vmov.f32	s17, s15
 8029c40:	eeb0 8a47 	vmov.f32	s16, s14
 8029c44:	e6a0      	b.n	8029988 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029c46:	2900      	cmp	r1, #0
 8029c48:	f43f af29 	beq.w	8029a9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8029c4c:	eb0a 0003 	add.w	r0, sl, r3
 8029c50:	0843      	lsrs	r3, r0, #1
 8029c52:	07c0      	lsls	r0, r0, #31
 8029c54:	5cfb      	ldrb	r3, [r7, r3]
 8029c56:	bf54      	ite	pl
 8029c58:	f003 030f 	andpl.w	r3, r3, #15
 8029c5c:	111b      	asrmi	r3, r3, #4
 8029c5e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029c62:	b2db      	uxtb	r3, r3
 8029c64:	930a      	str	r3, [sp, #40]	; 0x28
 8029c66:	e71a      	b.n	8029a9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8029c68:	4b17      	ldr	r3, [pc, #92]	; (8029cc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8029c6a:	00c9      	lsls	r1, r1, #3
 8029c6c:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8029c70:	ea42 0ede 	orr.w	lr, r2, lr, lsr #3
 8029c74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029c78:	ea4e 0e01 	orr.w	lr, lr, r1
 8029c7c:	f8a8 e000 	strh.w	lr, [r8]
 8029c80:	e76d      	b.n	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029c82:	f113 0b01 	adds.w	fp, r3, #1
 8029c86:	f53f af6a 	bmi.w	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029c8a:	45dc      	cmp	ip, fp
 8029c8c:	f6ff af67 	blt.w	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029c90:	f110 0b01 	adds.w	fp, r0, #1
 8029c94:	f53f af63 	bmi.w	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029c98:	45de      	cmp	lr, fp
 8029c9a:	f6ff af60 	blt.w	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029c9e:	9a08      	ldr	r2, [sp, #32]
 8029ca0:	9302      	str	r3, [sp, #8]
 8029ca2:	fa0f f38e 	sxth.w	r3, lr
 8029ca6:	9301      	str	r3, [sp, #4]
 8029ca8:	fa0f f38c 	sxth.w	r3, ip
 8029cac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029cb0:	9105      	str	r1, [sp, #20]
 8029cb2:	9300      	str	r3, [sp, #0]
 8029cb4:	463a      	mov	r2, r7
 8029cb6:	4653      	mov	r3, sl
 8029cb8:	4641      	mov	r1, r8
 8029cba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029cbc:	f7ff fd58 	bl	8029770 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8029cc0:	e74d      	b.n	8029b5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029cc2:	bf00      	nop
 8029cc4:	20006708 	.word	0x20006708
 8029cc8:	fffff800 	.word	0xfffff800
 8029ccc:	9906      	ldr	r1, [sp, #24]
 8029cce:	1422      	asrs	r2, r4, #16
 8029cd0:	1433      	asrs	r3, r6, #16
 8029cd2:	fb01 2303 	mla	r3, r1, r3, r2
 8029cd6:	085a      	lsrs	r2, r3, #1
 8029cd8:	07d9      	lsls	r1, r3, #31
 8029cda:	5cba      	ldrb	r2, [r7, r2]
 8029cdc:	bf54      	ite	pl
 8029cde:	f002 020f 	andpl.w	r2, r2, #15
 8029ce2:	1112      	asrmi	r2, r2, #4
 8029ce4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029ce8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029cec:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029cf0:	b2d2      	uxtb	r2, r2
 8029cf2:	2800      	cmp	r0, #0
 8029cf4:	f000 8098 	beq.w	8029e28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8029cf8:	f103 0e01 	add.w	lr, r3, #1
 8029cfc:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8029d00:	f01e 0f01 	tst.w	lr, #1
 8029d04:	5c79      	ldrb	r1, [r7, r1]
 8029d06:	bf0c      	ite	eq
 8029d08:	f001 010f 	andeq.w	r1, r1, #15
 8029d0c:	1109      	asrne	r1, r1, #4
 8029d0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029d12:	b2c9      	uxtb	r1, r1
 8029d14:	910f      	str	r1, [sp, #60]	; 0x3c
 8029d16:	f1bc 0f00 	cmp.w	ip, #0
 8029d1a:	d019      	beq.n	8029d50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029d1c:	9908      	ldr	r1, [sp, #32]
 8029d1e:	440b      	add	r3, r1
 8029d20:	0859      	lsrs	r1, r3, #1
 8029d22:	f013 0f01 	tst.w	r3, #1
 8029d26:	5c79      	ldrb	r1, [r7, r1]
 8029d28:	bf0c      	ite	eq
 8029d2a:	f001 010f 	andeq.w	r1, r1, #15
 8029d2e:	1109      	asrne	r1, r1, #4
 8029d30:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029d34:	b2c9      	uxtb	r1, r1
 8029d36:	3301      	adds	r3, #1
 8029d38:	910b      	str	r1, [sp, #44]	; 0x2c
 8029d3a:	0859      	lsrs	r1, r3, #1
 8029d3c:	07db      	lsls	r3, r3, #31
 8029d3e:	5c79      	ldrb	r1, [r7, r1]
 8029d40:	bf54      	ite	pl
 8029d42:	f001 010f 	andpl.w	r1, r1, #15
 8029d46:	1109      	asrmi	r1, r1, #4
 8029d48:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029d4c:	b2c9      	uxtb	r1, r1
 8029d4e:	9110      	str	r1, [sp, #64]	; 0x40
 8029d50:	b280      	uxth	r0, r0
 8029d52:	fa1f fc8c 	uxth.w	ip, ip
 8029d56:	fb00 f30c 	mul.w	r3, r0, ip
 8029d5a:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029d5e:	0100      	lsls	r0, r0, #4
 8029d60:	fa1f fc8c 	uxth.w	ip, ip
 8029d64:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029d68:	eba1 010c 	sub.w	r1, r1, ip
 8029d6c:	fa1f fe81 	uxth.w	lr, r1
 8029d70:	1ac0      	subs	r0, r0, r3
 8029d72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029d74:	b280      	uxth	r0, r0
 8029d76:	4348      	muls	r0, r1
 8029d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029d7a:	fb02 020e 	mla	r2, r2, lr, r0
 8029d7e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8029d82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029d84:	fb03 c302 	mla	r3, r3, r2, ip
 8029d88:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029d8c:	2b00      	cmp	r3, #0
 8029d8e:	d042      	beq.n	8029e16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8029d90:	4a37      	ldr	r2, [pc, #220]	; (8029e70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8029d92:	6810      	ldr	r0, [r2, #0]
 8029d94:	2bff      	cmp	r3, #255	; 0xff
 8029d96:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8029d9a:	ea4f 2110 	mov.w	r1, r0, lsr #8
 8029d9e:	fa5f fe80 	uxtb.w	lr, r0
 8029da2:	d052      	beq.n	8029e4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8029da4:	f8b8 c000 	ldrh.w	ip, [r8]
 8029da8:	fa1f fb83 	uxth.w	fp, r3
 8029dac:	ea4f 202c 	mov.w	r0, ip, asr #8
 8029db0:	43db      	mvns	r3, r3
 8029db2:	b2d2      	uxtb	r2, r2
 8029db4:	b2db      	uxtb	r3, r3
 8029db6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029dba:	fb12 f20b 	smulbb	r2, r2, fp
 8029dbe:	fb00 2203 	mla	r2, r0, r3, r2
 8029dc2:	ea4f 00ec 	mov.w	r0, ip, asr #3
 8029dc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029dca:	fa5f fc8c 	uxtb.w	ip, ip
 8029dce:	fb1e fe0b 	smulbb	lr, lr, fp
 8029dd2:	fb0c ee03 	mla	lr, ip, r3, lr
 8029dd6:	b2c9      	uxtb	r1, r1
 8029dd8:	b292      	uxth	r2, r2
 8029dda:	fb11 f10b 	smulbb	r1, r1, fp
 8029dde:	fa1f fe8e 	uxth.w	lr, lr
 8029de2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029de6:	fb00 1003 	mla	r0, r0, r3, r1
 8029dea:	1c53      	adds	r3, r2, #1
 8029dec:	f10e 0101 	add.w	r1, lr, #1
 8029df0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029df4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029df8:	b280      	uxth	r0, r0
 8029dfa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029dfe:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8029e02:	430a      	orrs	r2, r1
 8029e04:	1c41      	adds	r1, r0, #1
 8029e06:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029e0a:	0940      	lsrs	r0, r0, #5
 8029e0c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029e10:	4302      	orrs	r2, r0
 8029e12:	f8a8 2000 	strh.w	r2, [r8]
 8029e16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029e18:	441c      	add	r4, r3
 8029e1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029e1c:	f108 0802 	add.w	r8, r8, #2
 8029e20:	441e      	add	r6, r3
 8029e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029e26:	e6c7      	b.n	8029bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8029e28:	f1bc 0f00 	cmp.w	ip, #0
 8029e2c:	d090      	beq.n	8029d50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029e2e:	9908      	ldr	r1, [sp, #32]
 8029e30:	440b      	add	r3, r1
 8029e32:	0859      	lsrs	r1, r3, #1
 8029e34:	07db      	lsls	r3, r3, #31
 8029e36:	5c79      	ldrb	r1, [r7, r1]
 8029e38:	bf54      	ite	pl
 8029e3a:	f001 010f 	andpl.w	r1, r1, #15
 8029e3e:	1109      	asrmi	r1, r1, #4
 8029e40:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029e44:	b2c9      	uxtb	r1, r1
 8029e46:	910b      	str	r1, [sp, #44]	; 0x2c
 8029e48:	e782      	b.n	8029d50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029e4a:	4b0a      	ldr	r3, [pc, #40]	; (8029e74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>)
 8029e4c:	00c9      	lsls	r1, r1, #3
 8029e4e:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8029e52:	ea42 0ede 	orr.w	lr, r2, lr, lsr #3
 8029e56:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029e5a:	ea4e 0e01 	orr.w	lr, lr, r1
 8029e5e:	f8a8 e000 	strh.w	lr, [r8]
 8029e62:	e7d8      	b.n	8029e16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8029e64:	b013      	add	sp, #76	; 0x4c
 8029e66:	ecbd 8b08 	vpop	{d8-d11}
 8029e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029e6e:	bf00      	nop
 8029e70:	20006708 	.word	0x20006708
 8029e74:	fffff800 	.word	0xfffff800

08029e78 <CRC_Lock>:
 8029e78:	b530      	push	{r4, r5, lr}
 8029e7a:	4a20      	ldr	r2, [pc, #128]	; (8029efc <CRC_Lock+0x84>)
 8029e7c:	6813      	ldr	r3, [r2, #0]
 8029e7e:	f023 0301 	bic.w	r3, r3, #1
 8029e82:	6013      	str	r3, [r2, #0]
 8029e84:	4b1e      	ldr	r3, [pc, #120]	; (8029f00 <CRC_Lock+0x88>)
 8029e86:	681a      	ldr	r2, [r3, #0]
 8029e88:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029e8c:	4022      	ands	r2, r4
 8029e8e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029e92:	42aa      	cmp	r2, r5
 8029e94:	d005      	beq.n	8029ea2 <CRC_Lock+0x2a>
 8029e96:	681b      	ldr	r3, [r3, #0]
 8029e98:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029e9c:	4023      	ands	r3, r4
 8029e9e:	4293      	cmp	r3, r2
 8029ea0:	d124      	bne.n	8029eec <CRC_Lock+0x74>
 8029ea2:	4b18      	ldr	r3, [pc, #96]	; (8029f04 <CRC_Lock+0x8c>)
 8029ea4:	681b      	ldr	r3, [r3, #0]
 8029ea6:	bb0b      	cbnz	r3, 8029eec <CRC_Lock+0x74>
 8029ea8:	4b17      	ldr	r3, [pc, #92]	; (8029f08 <CRC_Lock+0x90>)
 8029eaa:	681a      	ldr	r2, [r3, #0]
 8029eac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029eb0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029eb4:	d00d      	beq.n	8029ed2 <CRC_Lock+0x5a>
 8029eb6:	681a      	ldr	r2, [r3, #0]
 8029eb8:	f240 4483 	movw	r4, #1155	; 0x483
 8029ebc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029ec0:	42a2      	cmp	r2, r4
 8029ec2:	d006      	beq.n	8029ed2 <CRC_Lock+0x5a>
 8029ec4:	681b      	ldr	r3, [r3, #0]
 8029ec6:	f240 4285 	movw	r2, #1157	; 0x485
 8029eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029ece:	4293      	cmp	r3, r2
 8029ed0:	d10c      	bne.n	8029eec <CRC_Lock+0x74>
 8029ed2:	4b0e      	ldr	r3, [pc, #56]	; (8029f0c <CRC_Lock+0x94>)
 8029ed4:	2201      	movs	r2, #1
 8029ed6:	601a      	str	r2, [r3, #0]
 8029ed8:	681a      	ldr	r2, [r3, #0]
 8029eda:	2a00      	cmp	r2, #0
 8029edc:	d1fc      	bne.n	8029ed8 <CRC_Lock+0x60>
 8029ede:	4b0c      	ldr	r3, [pc, #48]	; (8029f10 <CRC_Lock+0x98>)
 8029ee0:	6018      	str	r0, [r3, #0]
 8029ee2:	6818      	ldr	r0, [r3, #0]
 8029ee4:	1a43      	subs	r3, r0, r1
 8029ee6:	4258      	negs	r0, r3
 8029ee8:	4158      	adcs	r0, r3
 8029eea:	bd30      	pop	{r4, r5, pc}
 8029eec:	4b09      	ldr	r3, [pc, #36]	; (8029f14 <CRC_Lock+0x9c>)
 8029eee:	2201      	movs	r2, #1
 8029ef0:	601a      	str	r2, [r3, #0]
 8029ef2:	681a      	ldr	r2, [r3, #0]
 8029ef4:	2a00      	cmp	r2, #0
 8029ef6:	d1fc      	bne.n	8029ef2 <CRC_Lock+0x7a>
 8029ef8:	4b07      	ldr	r3, [pc, #28]	; (8029f18 <CRC_Lock+0xa0>)
 8029efa:	e7f1      	b.n	8029ee0 <CRC_Lock+0x68>
 8029efc:	e0002000 	.word	0xe0002000
 8029f00:	e000ed00 	.word	0xe000ed00
 8029f04:	e0042000 	.word	0xe0042000
 8029f08:	5c001000 	.word	0x5c001000
 8029f0c:	58024c08 	.word	0x58024c08
 8029f10:	58024c00 	.word	0x58024c00
 8029f14:	40023008 	.word	0x40023008
 8029f18:	40023000 	.word	0x40023000

08029f1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029f1c:	6101      	str	r1, [r0, #16]
 8029f1e:	4770      	bx	lr

08029f20 <_ZN8touchgfx8Gestures4tickEv>:
 8029f20:	7b83      	ldrb	r3, [r0, #14]
 8029f22:	b14b      	cbz	r3, 8029f38 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029f24:	8903      	ldrh	r3, [r0, #8]
 8029f26:	3301      	adds	r3, #1
 8029f28:	b29b      	uxth	r3, r3
 8029f2a:	2b07      	cmp	r3, #7
 8029f2c:	8103      	strh	r3, [r0, #8]
 8029f2e:	bf81      	itttt	hi
 8029f30:	2300      	movhi	r3, #0
 8029f32:	8143      	strhhi	r3, [r0, #10]
 8029f34:	8183      	strhhi	r3, [r0, #12]
 8029f36:	7383      	strbhi	r3, [r0, #14]
 8029f38:	4770      	bx	lr
	...

08029f3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029f3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029f40:	4604      	mov	r4, r0
 8029f42:	8880      	ldrh	r0, [r0, #4]
 8029f44:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029f48:	4698      	mov	r8, r3
 8029f4a:	eba8 0000 	sub.w	r0, r8, r0
 8029f4e:	4b1c      	ldr	r3, [pc, #112]	; (8029fc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029f50:	9300      	str	r3, [sp, #0]
 8029f52:	b280      	uxth	r0, r0
 8029f54:	2300      	movs	r3, #0
 8029f56:	f88d 3004 	strb.w	r3, [sp, #4]
 8029f5a:	b203      	sxth	r3, r0
 8029f5c:	2b00      	cmp	r3, #0
 8029f5e:	bfb8      	it	lt
 8029f60:	4240      	neglt	r0, r0
 8029f62:	4617      	mov	r7, r2
 8029f64:	8aa2      	ldrh	r2, [r4, #20]
 8029f66:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029f6a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029f6e:	bfb8      	it	lt
 8029f70:	b203      	sxthlt	r3, r0
 8029f72:	460e      	mov	r6, r1
 8029f74:	4293      	cmp	r3, r2
 8029f76:	88e1      	ldrh	r1, [r4, #6]
 8029f78:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029f7c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029f80:	dc08      	bgt.n	8029f94 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029f82:	1a69      	subs	r1, r5, r1
 8029f84:	b289      	uxth	r1, r1
 8029f86:	b20b      	sxth	r3, r1
 8029f88:	2b00      	cmp	r3, #0
 8029f8a:	bfbc      	itt	lt
 8029f8c:	4249      	neglt	r1, r1
 8029f8e:	b20b      	sxthlt	r3, r1
 8029f90:	429a      	cmp	r2, r3
 8029f92:	da13      	bge.n	8029fbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029f94:	6920      	ldr	r0, [r4, #16]
 8029f96:	6803      	ldr	r3, [r0, #0]
 8029f98:	4669      	mov	r1, sp
 8029f9a:	685b      	ldr	r3, [r3, #4]
 8029f9c:	4798      	blx	r3
 8029f9e:	eba8 0606 	sub.w	r6, r8, r6
 8029fa2:	2300      	movs	r3, #0
 8029fa4:	1bef      	subs	r7, r5, r7
 8029fa6:	2001      	movs	r0, #1
 8029fa8:	8123      	strh	r3, [r4, #8]
 8029faa:	8166      	strh	r6, [r4, #10]
 8029fac:	81a7      	strh	r7, [r4, #12]
 8029fae:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029fb2:	80e5      	strh	r5, [r4, #6]
 8029fb4:	73a0      	strb	r0, [r4, #14]
 8029fb6:	b004      	add	sp, #16
 8029fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029fbc:	2000      	movs	r0, #0
 8029fbe:	e7fa      	b.n	8029fb6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8029fc0:	08030a38 	.word	0x08030a38

08029fc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029fc6:	461e      	mov	r6, r3
 8029fc8:	1e4b      	subs	r3, r1, #1
 8029fca:	2b01      	cmp	r3, #1
 8029fcc:	b085      	sub	sp, #20
 8029fce:	4604      	mov	r4, r0
 8029fd0:	460d      	mov	r5, r1
 8029fd2:	4617      	mov	r7, r2
 8029fd4:	d84b      	bhi.n	802a06e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029fd6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029fda:	1cd3      	adds	r3, r2, #3
 8029fdc:	b29b      	uxth	r3, r3
 8029fde:	2b06      	cmp	r3, #6
 8029fe0:	d916      	bls.n	802a010 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029fe2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a084 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029fe6:	f8cd c004 	str.w	ip, [sp, #4]
 8029fea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029fee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029ff2:	6900      	ldr	r0, [r0, #16]
 8029ff4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029ff8:	f04f 0c00 	mov.w	ip, #0
 8029ffc:	f88d c008 	strb.w	ip, [sp, #8]
 802a000:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a004:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a008:	6803      	ldr	r3, [r0, #0]
 802a00a:	a901      	add	r1, sp, #4
 802a00c:	689b      	ldr	r3, [r3, #8]
 802a00e:	4798      	blx	r3
 802a010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a014:	1cd3      	adds	r3, r2, #3
 802a016:	b29b      	uxth	r3, r3
 802a018:	2b06      	cmp	r3, #6
 802a01a:	d916      	bls.n	802a04a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a01c:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a084 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a020:	f8cd c004 	str.w	ip, [sp, #4]
 802a024:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a028:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a02c:	6920      	ldr	r0, [r4, #16]
 802a02e:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a032:	f04f 0c01 	mov.w	ip, #1
 802a036:	f88d c008 	strb.w	ip, [sp, #8]
 802a03a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a03e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a042:	6803      	ldr	r3, [r0, #0]
 802a044:	a901      	add	r1, sp, #4
 802a046:	689b      	ldr	r3, [r3, #8]
 802a048:	4798      	blx	r3
 802a04a:	4b0d      	ldr	r3, [pc, #52]	; (802a080 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a04c:	9301      	str	r3, [sp, #4]
 802a04e:	6920      	ldr	r0, [r4, #16]
 802a050:	f88d 5008 	strb.w	r5, [sp, #8]
 802a054:	2300      	movs	r3, #0
 802a056:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a05a:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a05e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a062:	6803      	ldr	r3, [r0, #0]
 802a064:	a901      	add	r1, sp, #4
 802a066:	681b      	ldr	r3, [r3, #0]
 802a068:	4798      	blx	r3
 802a06a:	b005      	add	sp, #20
 802a06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a06e:	2900      	cmp	r1, #0
 802a070:	d1eb      	bne.n	802a04a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a072:	80a2      	strh	r2, [r4, #4]
 802a074:	80c6      	strh	r6, [r0, #6]
 802a076:	60a1      	str	r1, [r4, #8]
 802a078:	81a1      	strh	r1, [r4, #12]
 802a07a:	73a1      	strb	r1, [r4, #14]
 802a07c:	e7e5      	b.n	802a04a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a07e:	bf00      	nop
 802a080:	08030a24 	.word	0x08030a24
 802a084:	08030a4c 	.word	0x08030a4c

0802a088 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802a088:	10c9      	asrs	r1, r1, #3
 802a08a:	2900      	cmp	r1, #0
 802a08c:	bfb8      	it	lt
 802a08e:	4249      	neglt	r1, r1
 802a090:	2801      	cmp	r0, #1
 802a092:	d108      	bne.n	802a0a6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802a094:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802a098:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802a09c:	4601      	mov	r1, r0
 802a09e:	dd02      	ble.n	802a0a6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802a0a0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802a0a4:	4770      	bx	lr
 802a0a6:	29ff      	cmp	r1, #255	; 0xff
 802a0a8:	bfa8      	it	ge
 802a0aa:	21ff      	movge	r1, #255	; 0xff
 802a0ac:	4608      	mov	r0, r1
 802a0ae:	4770      	bx	lr

0802a0b0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a0b4:	688c      	ldr	r4, [r1, #8]
 802a0b6:	2c00      	cmp	r4, #0
 802a0b8:	b087      	sub	sp, #28
 802a0ba:	4607      	mov	r7, r0
 802a0bc:	db2b      	blt.n	802a116 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802a0be:	6803      	ldr	r3, [r0, #0]
 802a0c0:	691a      	ldr	r2, [r3, #16]
 802a0c2:	42a2      	cmp	r2, r4
 802a0c4:	dd27      	ble.n	802a116 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802a0c6:	685a      	ldr	r2, [r3, #4]
 802a0c8:	695e      	ldr	r6, [r3, #20]
 802a0ca:	68cd      	ldr	r5, [r1, #12]
 802a0cc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802a0d0:	f893 a008 	ldrb.w	sl, [r3, #8]
 802a0d4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802a0d8:	fb06 2604 	mla	r6, r6, r4, r2
 802a0dc:	698a      	ldr	r2, [r1, #24]
 802a0de:	9205      	str	r2, [sp, #20]
 802a0e0:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802a0e4:	9b05      	ldr	r3, [sp, #20]
 802a0e6:	6839      	ldr	r1, [r7, #0]
 802a0e8:	eb03 0c02 	add.w	ip, r3, r2
 802a0ec:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802a0f0:	68c9      	ldr	r1, [r1, #12]
 802a0f2:	1898      	adds	r0, r3, r2
 802a0f4:	4288      	cmp	r0, r1
 802a0f6:	db02      	blt.n	802a0fe <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802a0f8:	1a8b      	subs	r3, r1, r2
 802a0fa:	2b00      	cmp	r3, #0
 802a0fc:	dd09      	ble.n	802a112 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802a0fe:	6878      	ldr	r0, [r7, #4]
 802a100:	6801      	ldr	r1, [r0, #0]
 802a102:	9400      	str	r4, [sp, #0]
 802a104:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802a108:	4653      	mov	r3, sl
 802a10a:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802a10e:	4631      	mov	r1, r6
 802a110:	47d8      	blx	fp
 802a112:	3d01      	subs	r5, #1
 802a114:	d1e4      	bne.n	802a0e0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802a116:	b007      	add	sp, #28
 802a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a11c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802a11c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802a120:	b90b      	cbnz	r3, 802a126 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802a122:	f001 b999 	b.w	802b458 <_ZN8touchgfx7Outline6lineToEii>
 802a126:	4770      	bx	lr

0802a128 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a12c:	4b90      	ldr	r3, [pc, #576]	; (802a370 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802a12e:	4604      	mov	r4, r0
 802a130:	2600      	movs	r6, #0
 802a132:	f100 0518 	add.w	r5, r0, #24
 802a136:	e9c0 3100 	strd	r3, r1, [r0]
 802a13a:	b086      	sub	sp, #24
 802a13c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802a140:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802a144:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802a148:	4628      	mov	r0, r5
 802a14a:	4690      	mov	r8, r2
 802a14c:	f001 fc4e 	bl	802b9ec <_ZN8touchgfx15RenderingBufferC1Ev>
 802a150:	4638      	mov	r0, r7
 802a152:	f000 fb45 	bl	802a7e0 <_ZN8touchgfx7OutlineC1Ev>
 802a156:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802a15a:	f001 fbef 	bl	802b93c <_ZN8touchgfx8ScanlineC1Ev>
 802a15e:	2301      	movs	r3, #1
 802a160:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802a164:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802a168:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 802a16c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a170:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802a174:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 802a178:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802a17c:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 802a180:	f001 fb8c 	bl	802b89c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802a184:	b928      	cbnz	r0, 802a192 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802a186:	4b7b      	ldr	r3, [pc, #492]	; (802a374 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802a188:	4a7b      	ldr	r2, [pc, #492]	; (802a378 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802a18a:	212d      	movs	r1, #45	; 0x2d
 802a18c:	487b      	ldr	r0, [pc, #492]	; (802a37c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802a18e:	f002 fa65 	bl	802c65c <__assert_func>
 802a192:	f9b8 2000 	ldrsh.w	r2, [r8]
 802a196:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802a19a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802a19e:	9602      	str	r6, [sp, #8]
 802a1a0:	4410      	add	r0, r2
 802a1a2:	b280      	uxth	r0, r0
 802a1a4:	fa0f fa80 	sxth.w	sl, r0
 802a1a8:	f1ba 0f00 	cmp.w	sl, #0
 802a1ac:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802a1b0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802a1b4:	dd70      	ble.n	802a298 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a1b6:	4591      	cmp	r9, r2
 802a1b8:	dd6e      	ble.n	802a298 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a1ba:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802a1be:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802a1c2:	440b      	add	r3, r1
 802a1c4:	b29b      	uxth	r3, r3
 802a1c6:	b21e      	sxth	r6, r3
 802a1c8:	2e00      	cmp	r6, #0
 802a1ca:	dd65      	ble.n	802a298 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a1cc:	458e      	cmp	lr, r1
 802a1ce:	dd63      	ble.n	802a298 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a1d0:	45d1      	cmp	r9, sl
 802a1d2:	bfb8      	it	lt
 802a1d4:	fa1f f089 	uxthlt.w	r0, r9
 802a1d8:	45b6      	cmp	lr, r6
 802a1da:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802a1de:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802a1e2:	bfb8      	it	lt
 802a1e4:	fa1f f38e 	uxthlt.w	r3, lr
 802a1e8:	1a80      	subs	r0, r0, r2
 802a1ea:	1a5b      	subs	r3, r3, r1
 802a1ec:	f8ad 000c 	strh.w	r0, [sp, #12]
 802a1f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a1f4:	f8ad 2008 	strh.w	r2, [sp, #8]
 802a1f8:	f8ad 100a 	strh.w	r1, [sp, #10]
 802a1fc:	f10d 0808 	add.w	r8, sp, #8
 802a200:	e898 0003 	ldmia.w	r8, {r0, r1}
 802a204:	ae04      	add	r6, sp, #16
 802a206:	e886 0003 	stmia.w	r6, {r0, r1}
 802a20a:	f8dc 3000 	ldr.w	r3, [ip]
 802a20e:	4660      	mov	r0, ip
 802a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a212:	4631      	mov	r1, r6
 802a214:	4798      	blx	r3
 802a216:	6861      	ldr	r1, [r4, #4]
 802a218:	4640      	mov	r0, r8
 802a21a:	3104      	adds	r1, #4
 802a21c:	f7f0 fac0 	bl	801a7a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a220:	4630      	mov	r0, r6
 802a222:	f7f0 fad5 	bl	801a7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a226:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802a22a:	f001 fac7 	bl	802b7bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802a22e:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802a232:	4638      	mov	r0, r7
 802a234:	f000 fab0 	bl	802a798 <_ZN8touchgfx7Outline5resetEv>
 802a238:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802a23c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802a240:	015b      	lsls	r3, r3, #5
 802a242:	60e3      	str	r3, [r4, #12]
 802a244:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802a248:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802a24c:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802a250:	015b      	lsls	r3, r3, #5
 802a252:	6123      	str	r3, [r4, #16]
 802a254:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802a258:	015b      	lsls	r3, r3, #5
 802a25a:	6163      	str	r3, [r4, #20]
 802a25c:	4b48      	ldr	r3, [pc, #288]	; (802a380 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802a25e:	0152      	lsls	r2, r2, #5
 802a260:	6818      	ldr	r0, [r3, #0]
 802a262:	60a2      	str	r2, [r4, #8]
 802a264:	6803      	ldr	r3, [r0, #0]
 802a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a268:	4798      	blx	r3
 802a26a:	4606      	mov	r6, r0
 802a26c:	f7e4 fe70 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 802a270:	6803      	ldr	r3, [r0, #0]
 802a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a274:	4798      	blx	r3
 802a276:	4607      	mov	r7, r0
 802a278:	f7e4 fe6a 	bl	800ef50 <_ZN8touchgfx3HAL3lcdEv>
 802a27c:	6803      	ldr	r3, [r0, #0]
 802a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a280:	4798      	blx	r3
 802a282:	280d      	cmp	r0, #13
 802a284:	d855      	bhi.n	802a332 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20a>
 802a286:	e8df f000 	tbb	[pc, r0]
 802a28a:	564c      	.short	0x564c
 802a28c:	2b6f0a67 	.word	0x2b6f0a67
 802a290:	6060603b 	.word	0x6060603b
 802a294:	6f6f6060 	.word	0x6f6f6060
 802a298:	2300      	movs	r3, #0
 802a29a:	9303      	str	r3, [sp, #12]
 802a29c:	e7ae      	b.n	802a1fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 802a29e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a2a2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a2a6:	2108      	movs	r1, #8
 802a2a8:	fb92 f1f1 	sdiv	r1, r2, r1
 802a2ac:	fb07 1303 	mla	r3, r7, r3, r1
 802a2b0:	441e      	add	r6, r3
 802a2b2:	4253      	negs	r3, r2
 802a2b4:	f003 0307 	and.w	r3, r3, #7
 802a2b8:	f002 0207 	and.w	r2, r2, #7
 802a2bc:	bf58      	it	pl
 802a2be:	425a      	negpl	r2, r3
 802a2c0:	b2d2      	uxtb	r2, r2
 802a2c2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802a2c6:	6721      	str	r1, [r4, #112]	; 0x70
 802a2c8:	e9cd 1700 	strd	r1, r7, [sp]
 802a2cc:	4628      	mov	r0, r5
 802a2ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802a2d2:	4631      	mov	r1, r6
 802a2d4:	f001 fb96 	bl	802ba04 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802a2d8:	4620      	mov	r0, r4
 802a2da:	b006      	add	sp, #24
 802a2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a2e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a2e4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a2e8:	2104      	movs	r1, #4
 802a2ea:	fb92 f1f1 	sdiv	r1, r2, r1
 802a2ee:	fb07 1303 	mla	r3, r7, r3, r1
 802a2f2:	441e      	add	r6, r3
 802a2f4:	4253      	negs	r3, r2
 802a2f6:	f003 0303 	and.w	r3, r3, #3
 802a2fa:	f002 0203 	and.w	r2, r2, #3
 802a2fe:	e7dd      	b.n	802a2bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802a300:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a304:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a308:	2a00      	cmp	r2, #0
 802a30a:	f04f 0102 	mov.w	r1, #2
 802a30e:	fb92 f1f1 	sdiv	r1, r2, r1
 802a312:	f002 0201 	and.w	r2, r2, #1
 802a316:	fb07 1303 	mla	r3, r7, r3, r1
 802a31a:	441e      	add	r6, r3
 802a31c:	bfb8      	it	lt
 802a31e:	4252      	neglt	r2, r2
 802a320:	e7ce      	b.n	802a2c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 802a322:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a326:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a32a:	437b      	muls	r3, r7
 802a32c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802a330:	441e      	add	r6, r3
 802a332:	2200      	movs	r2, #0
 802a334:	e7c5      	b.n	802a2c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802a336:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a33a:	fb07 f203 	mul.w	r2, r7, r3
 802a33e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802a342:	2103      	movs	r1, #3
 802a344:	fb13 2301 	smlabb	r3, r3, r1, r2
 802a348:	e7f2      	b.n	802a330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802a34a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a34e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a352:	fb07 2303 	mla	r3, r7, r3, r2
 802a356:	e7eb      	b.n	802a330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802a358:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a35c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a360:	437b      	muls	r3, r7
 802a362:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a366:	e7e3      	b.n	802a330 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802a368:	4b06      	ldr	r3, [pc, #24]	; (802a384 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802a36a:	4a03      	ldr	r2, [pc, #12]	; (802a378 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802a36c:	216c      	movs	r1, #108	; 0x6c
 802a36e:	e70d      	b.n	802a18c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 802a370:	08031ea0 	.word	0x08031ea0
 802a374:	08031de9 	.word	0x08031de9
 802a378:	08031ea8 	.word	0x08031ea8
 802a37c:	08031e45 	.word	0x08031e45
 802a380:	20006700 	.word	0x20006700
 802a384:	08031e79 	.word	0x08031e79

0802a388 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802a388:	6812      	ldr	r2, [r2, #0]
 802a38a:	2a00      	cmp	r2, #0
 802a38c:	db0b      	blt.n	802a3a6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802a38e:	9800      	ldr	r0, [sp, #0]
 802a390:	6800      	ldr	r0, [r0, #0]
 802a392:	4290      	cmp	r0, r2
 802a394:	bfd4      	ite	le
 802a396:	2002      	movle	r0, #2
 802a398:	2000      	movgt	r0, #0
 802a39a:	680a      	ldr	r2, [r1, #0]
 802a39c:	2a00      	cmp	r2, #0
 802a39e:	da04      	bge.n	802a3aa <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802a3a0:	f040 0004 	orr.w	r0, r0, #4
 802a3a4:	4770      	bx	lr
 802a3a6:	2001      	movs	r0, #1
 802a3a8:	e7f7      	b.n	802a39a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802a3aa:	681b      	ldr	r3, [r3, #0]
 802a3ac:	4293      	cmp	r3, r2
 802a3ae:	bfd8      	it	le
 802a3b0:	f040 0008 	orrle.w	r0, r0, #8
 802a3b4:	4770      	bx	lr
	...

0802a3b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802a3b8:	b510      	push	{r4, lr}
 802a3ba:	4b07      	ldr	r3, [pc, #28]	; (802a3d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802a3bc:	781b      	ldrb	r3, [r3, #0]
 802a3be:	2b01      	cmp	r3, #1
 802a3c0:	d108      	bne.n	802a3d4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802a3c2:	6843      	ldr	r3, [r0, #4]
 802a3c4:	6814      	ldr	r4, [r2, #0]
 802a3c6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802a3ca:	680b      	ldr	r3, [r1, #0]
 802a3cc:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802a3d0:	6013      	str	r3, [r2, #0]
 802a3d2:	600c      	str	r4, [r1, #0]
 802a3d4:	bd10      	pop	{r4, pc}
 802a3d6:	bf00      	nop
 802a3d8:	200066f8 	.word	0x200066f8

0802a3dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802a3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a3de:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a3e2:	b085      	sub	sp, #20
 802a3e4:	4604      	mov	r4, r0
 802a3e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a3ea:	b33b      	cbz	r3, 802a43c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802a3ec:	aa02      	add	r2, sp, #8
 802a3ee:	a903      	add	r1, sp, #12
 802a3f0:	f7ff ffe2 	bl	802a3b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a3f4:	68a3      	ldr	r3, [r4, #8]
 802a3f6:	9e03      	ldr	r6, [sp, #12]
 802a3f8:	9f02      	ldr	r7, [sp, #8]
 802a3fa:	1af6      	subs	r6, r6, r3
 802a3fc:	68e3      	ldr	r3, [r4, #12]
 802a3fe:	9603      	str	r6, [sp, #12]
 802a400:	1aff      	subs	r7, r7, r3
 802a402:	f104 0314 	add.w	r3, r4, #20
 802a406:	9300      	str	r3, [sp, #0]
 802a408:	aa02      	add	r2, sp, #8
 802a40a:	f104 0310 	add.w	r3, r4, #16
 802a40e:	a903      	add	r1, sp, #12
 802a410:	4620      	mov	r0, r4
 802a412:	9702      	str	r7, [sp, #8]
 802a414:	f7ff ffb8 	bl	802a388 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a418:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802a41c:	4605      	mov	r5, r0
 802a41e:	b97b      	cbnz	r3, 802a440 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802a420:	463a      	mov	r2, r7
 802a422:	4631      	mov	r1, r6
 802a424:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a428:	f7ff fe78 	bl	802a11c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a42c:	9b03      	ldr	r3, [sp, #12]
 802a42e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802a432:	9b02      	ldr	r3, [sp, #8]
 802a434:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802a438:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802a43c:	b005      	add	sp, #20
 802a43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a440:	b110      	cbz	r0, 802a448 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802a442:	ea13 0200 	ands.w	r2, r3, r0
 802a446:	d11c      	bne.n	802a482 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802a448:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802a44c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802a450:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802a454:	b188      	cbz	r0, 802a47a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802a456:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802a45a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a45e:	b913      	cbnz	r3, 802a466 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802a460:	4630      	mov	r0, r6
 802a462:	f001 f829 	bl	802b4b8 <_ZN8touchgfx7Outline6moveToEii>
 802a466:	2300      	movs	r3, #0
 802a468:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a46c:	2301      	movs	r3, #1
 802a46e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a472:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802a476:	4630      	mov	r0, r6
 802a478:	e7d6      	b.n	802a428 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802a47a:	4630      	mov	r0, r6
 802a47c:	f7ff fe4e 	bl	802a11c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a480:	e7f7      	b.n	802a472 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802a482:	4615      	mov	r5, r2
 802a484:	e7d2      	b.n	802a42c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802a486 <_ZN8touchgfx6Canvas5closeEv>:
 802a486:	b538      	push	{r3, r4, r5, lr}
 802a488:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a48c:	4604      	mov	r4, r0
 802a48e:	b993      	cbnz	r3, 802a4b6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a490:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802a494:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802a498:	4213      	tst	r3, r2
 802a49a:	d10c      	bne.n	802a4b6 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a49c:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802a4a0:	b123      	cbz	r3, 802a4ac <_ZN8touchgfx6Canvas5closeEv+0x26>
 802a4a2:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802a4a6:	4628      	mov	r0, r5
 802a4a8:	f7ff fe38 	bl	802a11c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a4ac:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802a4b0:	4628      	mov	r0, r5
 802a4b2:	f7ff fe33 	bl	802a11c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a4b6:	2300      	movs	r3, #0
 802a4b8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a4bc:	bd38      	pop	{r3, r4, r5, pc}

0802a4be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a4be:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a4c0:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a4c4:	b085      	sub	sp, #20
 802a4c6:	4604      	mov	r4, r0
 802a4c8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a4cc:	b353      	cbz	r3, 802a524 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802a4ce:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a4d2:	b90b      	cbnz	r3, 802a4d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802a4d4:	f7ff ffd7 	bl	802a486 <_ZN8touchgfx6Canvas5closeEv>
 802a4d8:	aa02      	add	r2, sp, #8
 802a4da:	a903      	add	r1, sp, #12
 802a4dc:	4620      	mov	r0, r4
 802a4de:	f7ff ff6b 	bl	802a3b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a4e2:	68a3      	ldr	r3, [r4, #8]
 802a4e4:	9d03      	ldr	r5, [sp, #12]
 802a4e6:	9e02      	ldr	r6, [sp, #8]
 802a4e8:	1aed      	subs	r5, r5, r3
 802a4ea:	68e3      	ldr	r3, [r4, #12]
 802a4ec:	9503      	str	r5, [sp, #12]
 802a4ee:	1af6      	subs	r6, r6, r3
 802a4f0:	f104 0314 	add.w	r3, r4, #20
 802a4f4:	9300      	str	r3, [sp, #0]
 802a4f6:	aa02      	add	r2, sp, #8
 802a4f8:	f104 0310 	add.w	r3, r4, #16
 802a4fc:	a903      	add	r1, sp, #12
 802a4fe:	4620      	mov	r0, r4
 802a500:	9602      	str	r6, [sp, #8]
 802a502:	f7ff ff41 	bl	802a388 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a506:	4607      	mov	r7, r0
 802a508:	b170      	cbz	r0, 802a528 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802a50a:	2301      	movs	r3, #1
 802a50c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a510:	9a03      	ldr	r2, [sp, #12]
 802a512:	9b02      	ldr	r3, [sp, #8]
 802a514:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802a518:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802a51c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802a520:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802a524:	b005      	add	sp, #20
 802a526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a528:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a52c:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802a530:	b92b      	cbnz	r3, 802a53e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802a532:	4632      	mov	r2, r6
 802a534:	4629      	mov	r1, r5
 802a536:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a53a:	f000 ffbd 	bl	802b4b8 <_ZN8touchgfx7Outline6moveToEii>
 802a53e:	2300      	movs	r3, #0
 802a540:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a544:	2301      	movs	r3, #1
 802a546:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a54a:	e7e1      	b.n	802a510 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802a54c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a550:	b087      	sub	sp, #28
 802a552:	4604      	mov	r4, r0
 802a554:	9105      	str	r1, [sp, #20]
 802a556:	f001 f8f6 	bl	802b746 <_ZN8touchgfx7Outline8getCellsEv>
 802a55a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802a55e:	4605      	mov	r5, r0
 802a560:	f1b9 0f00 	cmp.w	r9, #0
 802a564:	d103      	bne.n	802a56e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802a566:	2001      	movs	r0, #1
 802a568:	b007      	add	sp, #28
 802a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a56e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802a572:	2e00      	cmp	r6, #0
 802a574:	d139      	bne.n	802a5ea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802a576:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802a57a:	4640      	mov	r0, r8
 802a57c:	f001 f9c8 	bl	802b910 <_ZN8touchgfx8Scanline5resetEv>
 802a580:	f109 33ff 	add.w	r3, r9, #4294967295
 802a584:	f105 0708 	add.w	r7, r5, #8
 802a588:	9303      	str	r3, [sp, #12]
 802a58a:	f9b5 b000 	ldrsh.w	fp, [r5]
 802a58e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802a592:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802a596:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802a59a:	46da      	mov	sl, fp
 802a59c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802a5a0:	9b03      	ldr	r3, [sp, #12]
 802a5a2:	9504      	str	r5, [sp, #16]
 802a5a4:	3b01      	subs	r3, #1
 802a5a6:	9303      	str	r3, [sp, #12]
 802a5a8:	3301      	adds	r3, #1
 802a5aa:	4416      	add	r6, r2
 802a5ac:	463d      	mov	r5, r7
 802a5ae:	d01e      	beq.n	802a5ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802a5b0:	3708      	adds	r7, #8
 802a5b2:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802a5b6:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802a5ba:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802a5be:	4290      	cmp	r0, r2
 802a5c0:	d11e      	bne.n	802a600 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802a5c2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802a5c6:	4411      	add	r1, r2
 802a5c8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802a5cc:	e7e8      	b.n	802a5a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802a5ce:	1c91      	adds	r1, r2, #2
 802a5d0:	f04f 0301 	mov.w	r3, #1
 802a5d4:	65e1      	str	r1, [r4, #92]	; 0x5c
 802a5d6:	8053      	strh	r3, [r2, #2]
 802a5d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802a5da:	1c91      	adds	r1, r2, #2
 802a5dc:	65a1      	str	r1, [r4, #88]	; 0x58
 802a5de:	f8a2 b002 	strh.w	fp, [r2, #2]
 802a5e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a5e4:	3201      	adds	r2, #1
 802a5e6:	6562      	str	r2, [r4, #84]	; 0x54
 802a5e8:	e03a      	b.n	802a660 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802a5ea:	2000      	movs	r0, #0
 802a5ec:	e7bc      	b.n	802a568 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802a5ee:	b951      	cbnz	r1, 802a606 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802a5f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a5f2:	2b00      	cmp	r3, #0
 802a5f4:	d0b7      	beq.n	802a566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a5f6:	4641      	mov	r1, r8
 802a5f8:	9805      	ldr	r0, [sp, #20]
 802a5fa:	f7ff fd59 	bl	802a0b0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a5fe:	e7b2      	b.n	802a566 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a600:	2900      	cmp	r1, #0
 802a602:	d035      	beq.n	802a670 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802a604:	9504      	str	r5, [sp, #16]
 802a606:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802a60a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a60e:	f7ff fd3b 	bl	802a088 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a612:	4605      	mov	r5, r0
 802a614:	b330      	cbz	r0, 802a664 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a616:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a618:	b182      	cbz	r2, 802a63c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a61a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802a61c:	4591      	cmp	r9, r2
 802a61e:	d00d      	beq.n	802a63c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a620:	4641      	mov	r1, r8
 802a622:	9805      	ldr	r0, [sp, #20]
 802a624:	f7ff fd44 	bl	802a0b0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a628:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a62c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802a62e:	65e2      	str	r2, [r4, #92]	; 0x5c
 802a630:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a634:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a636:	65a2      	str	r2, [r4, #88]	; 0x58
 802a638:	2300      	movs	r3, #0
 802a63a:	6563      	str	r3, [r4, #84]	; 0x54
 802a63c:	f1bb 0f00 	cmp.w	fp, #0
 802a640:	db10      	blt.n	802a664 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a642:	f001 f939 	bl	802b8b8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a646:	4583      	cmp	fp, r0
 802a648:	da0c      	bge.n	802a664 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a64a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802a64c:	f802 500b 	strb.w	r5, [r2, fp]
 802a650:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802a652:	3201      	adds	r2, #1
 802a654:	4593      	cmp	fp, r2
 802a656:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802a658:	d1b9      	bne.n	802a5ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802a65a:	8811      	ldrh	r1, [r2, #0]
 802a65c:	3101      	adds	r1, #1
 802a65e:	8011      	strh	r1, [r2, #0]
 802a660:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802a664:	9b03      	ldr	r3, [sp, #12]
 802a666:	3301      	adds	r3, #1
 802a668:	d0c2      	beq.n	802a5f0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802a66a:	9d04      	ldr	r5, [sp, #16]
 802a66c:	f10b 0a01 	add.w	sl, fp, #1
 802a670:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a674:	4553      	cmp	r3, sl
 802a676:	dd88      	ble.n	802a58a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a678:	01b1      	lsls	r1, r6, #6
 802a67a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a67e:	f7ff fd03 	bl	802a088 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a682:	4683      	mov	fp, r0
 802a684:	2800      	cmp	r0, #0
 802a686:	d080      	beq.n	802a58a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a68a:	b183      	cbz	r3, 802a6ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a68c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802a68e:	4599      	cmp	r9, r3
 802a690:	d00d      	beq.n	802a6ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a692:	4641      	mov	r1, r8
 802a694:	9805      	ldr	r0, [sp, #20]
 802a696:	f7ff fd0b 	bl	802a0b0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a69a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a69e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a6a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802a6a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 802a6a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a6a8:	65a3      	str	r3, [r4, #88]	; 0x58
 802a6aa:	2300      	movs	r3, #0
 802a6ac:	6563      	str	r3, [r4, #84]	; 0x54
 802a6ae:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a6b2:	f8cd b000 	str.w	fp, [sp]
 802a6b6:	eba3 030a 	sub.w	r3, r3, sl
 802a6ba:	464a      	mov	r2, r9
 802a6bc:	4651      	mov	r1, sl
 802a6be:	4640      	mov	r0, r8
 802a6c0:	f001 f952 	bl	802b968 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802a6c4:	e761      	b.n	802a58a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802a6c6 <_ZN8touchgfx6Canvas6renderEh>:
 802a6c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a6c8:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a6cc:	4604      	mov	r4, r0
 802a6ce:	460d      	mov	r5, r1
 802a6d0:	b913      	cbnz	r3, 802a6d8 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802a6d2:	2001      	movs	r0, #1
 802a6d4:	b003      	add	sp, #12
 802a6d6:	bd30      	pop	{r4, r5, pc}
 802a6d8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802a6dc:	2b00      	cmp	r3, #0
 802a6de:	d12f      	bne.n	802a740 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802a6e0:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802a6e4:	2b00      	cmp	r3, #0
 802a6e6:	d0f4      	beq.n	802a6d2 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a6e8:	6840      	ldr	r0, [r0, #4]
 802a6ea:	6803      	ldr	r3, [r0, #0]
 802a6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a6ee:	4798      	blx	r3
 802a6f0:	fb10 f105 	smulbb	r1, r0, r5
 802a6f4:	b288      	uxth	r0, r1
 802a6f6:	1c41      	adds	r1, r0, #1
 802a6f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a6fc:	120d      	asrs	r5, r1, #8
 802a6fe:	d0e8      	beq.n	802a6d2 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a700:	4620      	mov	r0, r4
 802a702:	f7ff fec0 	bl	802a486 <_ZN8touchgfx6Canvas5closeEv>
 802a706:	6860      	ldr	r0, [r4, #4]
 802a708:	6803      	ldr	r3, [r0, #0]
 802a70a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a70c:	4798      	blx	r3
 802a70e:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802a712:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802a716:	80c3      	strh	r3, [r0, #6]
 802a718:	8082      	strh	r2, [r0, #4]
 802a71a:	6860      	ldr	r0, [r4, #4]
 802a71c:	6803      	ldr	r3, [r0, #0]
 802a71e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a720:	4798      	blx	r3
 802a722:	7205      	strb	r5, [r0, #8]
 802a724:	6860      	ldr	r0, [r4, #4]
 802a726:	6803      	ldr	r3, [r0, #0]
 802a728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a72a:	4798      	blx	r3
 802a72c:	f104 0318 	add.w	r3, r4, #24
 802a730:	e9cd 3000 	strd	r3, r0, [sp]
 802a734:	4669      	mov	r1, sp
 802a736:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a73a:	f7ff ff07 	bl	802a54c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802a73e:	e7c9      	b.n	802a6d4 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802a740:	2000      	movs	r0, #0
 802a742:	e7c7      	b.n	802a6d4 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802a744 <_ZN8touchgfx6CanvasD1Ev>:
 802a744:	b538      	push	{r3, r4, r5, lr}
 802a746:	4605      	mov	r5, r0
 802a748:	4b08      	ldr	r3, [pc, #32]	; (802a76c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802a74a:	f845 3b30 	str.w	r3, [r5], #48
 802a74e:	4b08      	ldr	r3, [pc, #32]	; (802a770 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802a750:	4604      	mov	r4, r0
 802a752:	6818      	ldr	r0, [r3, #0]
 802a754:	6803      	ldr	r3, [r0, #0]
 802a756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a758:	4798      	blx	r3
 802a75a:	4628      	mov	r0, r5
 802a75c:	f000 f814 	bl	802a788 <_ZN8touchgfx7OutlineD1Ev>
 802a760:	f104 0018 	add.w	r0, r4, #24
 802a764:	f001 f939 	bl	802b9da <_ZN8touchgfx15RenderingBufferD1Ev>
 802a768:	4620      	mov	r0, r4
 802a76a:	bd38      	pop	{r3, r4, r5, pc}
 802a76c:	08031ea0 	.word	0x08031ea0
 802a770:	20006700 	.word	0x20006700

0802a774 <_ZN8touchgfx6CanvasD0Ev>:
 802a774:	b510      	push	{r4, lr}
 802a776:	4604      	mov	r4, r0
 802a778:	f7ff ffe4 	bl	802a744 <_ZN8touchgfx6CanvasD1Ev>
 802a77c:	4620      	mov	r0, r4
 802a77e:	21bc      	movs	r1, #188	; 0xbc
 802a780:	f001 f94d 	bl	802ba1e <_ZdlPvj>
 802a784:	4620      	mov	r0, r4
 802a786:	bd10      	pop	{r4, pc}

0802a788 <_ZN8touchgfx7OutlineD1Ev>:
 802a788:	4770      	bx	lr

0802a78a <_ZN8touchgfx7OutlineD0Ev>:
 802a78a:	b510      	push	{r4, lr}
 802a78c:	2148      	movs	r1, #72	; 0x48
 802a78e:	4604      	mov	r4, r0
 802a790:	f001 f945 	bl	802ba1e <_ZdlPvj>
 802a794:	4620      	mov	r0, r4
 802a796:	bd10      	pop	{r4, pc}

0802a798 <_ZN8touchgfx7Outline5resetEv>:
 802a798:	b510      	push	{r4, lr}
 802a79a:	4604      	mov	r4, r0
 802a79c:	f001 f8a4 	bl	802b8e8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802a7a0:	60e0      	str	r0, [r4, #12]
 802a7a2:	f001 f8a7 	bl	802b8f4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802a7a6:	68e3      	ldr	r3, [r4, #12]
 802a7a8:	6123      	str	r3, [r4, #16]
 802a7aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a7ae:	82a3      	strh	r3, [r4, #20]
 802a7b0:	82e3      	strh	r3, [r4, #22]
 802a7b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a7b4:	f023 0301 	bic.w	r3, r3, #1
 802a7b8:	f043 0302 	orr.w	r3, r3, #2
 802a7bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a7be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802a7c2:	2200      	movs	r2, #0
 802a7c4:	08c0      	lsrs	r0, r0, #3
 802a7c6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802a7ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a7ce:	6060      	str	r0, [r4, #4]
 802a7d0:	60a2      	str	r2, [r4, #8]
 802a7d2:	8322      	strh	r2, [r4, #24]
 802a7d4:	8362      	strh	r2, [r4, #26]
 802a7d6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802a7da:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a7de:	bd10      	pop	{r4, pc}

0802a7e0 <_ZN8touchgfx7OutlineC1Ev>:
 802a7e0:	b510      	push	{r4, lr}
 802a7e2:	4b0f      	ldr	r3, [pc, #60]	; (802a820 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802a7e4:	6003      	str	r3, [r0, #0]
 802a7e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a7ea:	2300      	movs	r3, #0
 802a7ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802a7f0:	4604      	mov	r4, r0
 802a7f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a7f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a7fa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802a7fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802a802:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802a806:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802a80a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802a80e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802a812:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802a816:	f7ff ffbf 	bl	802a798 <_ZN8touchgfx7Outline5resetEv>
 802a81a:	4620      	mov	r0, r4
 802a81c:	bd10      	pop	{r4, pc}
 802a81e:	bf00      	nop
 802a820:	08031f70 	.word	0x08031f70

0802a824 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a828:	b095      	sub	sp, #84	; 0x54
 802a82a:	4604      	mov	r4, r0
 802a82c:	981e      	ldr	r0, [sp, #120]	; 0x78
 802a82e:	9304      	str	r3, [sp, #16]
 802a830:	1153      	asrs	r3, r2, #5
 802a832:	9300      	str	r3, [sp, #0]
 802a834:	1143      	asrs	r3, r0, #5
 802a836:	930c      	str	r3, [sp, #48]	; 0x30
 802a838:	f000 031f 	and.w	r3, r0, #31
 802a83c:	9303      	str	r3, [sp, #12]
 802a83e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a840:	1155      	asrs	r5, r2, #5
 802a842:	42ab      	cmp	r3, r5
 802a844:	bfc4      	itt	gt
 802a846:	462b      	movgt	r3, r5
 802a848:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a84a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a84c:	1155      	asrs	r5, r2, #5
 802a84e:	42ab      	cmp	r3, r5
 802a850:	bfde      	ittt	le
 802a852:	462b      	movle	r3, r5
 802a854:	3301      	addle	r3, #1
 802a856:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a858:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a85a:	1145      	asrs	r5, r0, #5
 802a85c:	42ab      	cmp	r3, r5
 802a85e:	bfc4      	itt	gt
 802a860:	462b      	movgt	r3, r5
 802a862:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a866:	1145      	asrs	r5, r0, #5
 802a868:	42ab      	cmp	r3, r5
 802a86a:	bfde      	ittt	le
 802a86c:	462b      	movle	r3, r5
 802a86e:	3301      	addle	r3, #1
 802a870:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a872:	9b04      	ldr	r3, [sp, #16]
 802a874:	1157      	asrs	r7, r2, #5
 802a876:	eba3 0a01 	sub.w	sl, r3, r1
 802a87a:	1143      	asrs	r3, r0, #5
 802a87c:	429f      	cmp	r7, r3
 802a87e:	f002 061f 	and.w	r6, r2, #31
 802a882:	ea4f 1561 	mov.w	r5, r1, asr #5
 802a886:	f040 8122 	bne.w	802aace <_ZN8touchgfx7Outline10renderLineEiiii+0x2aa>
 802a88a:	9b04      	ldr	r3, [sp, #16]
 802a88c:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802a890:	9b03      	ldr	r3, [sp, #12]
 802a892:	429e      	cmp	r6, r3
 802a894:	d131      	bne.n	802a8fa <_ZN8touchgfx7Outline10renderLineEiiii+0xd6>
 802a896:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a89a:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a89e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a8a2:	fa0f fb8b 	sxth.w	fp, fp
 802a8a6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a8aa:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802a8ae:	4281      	cmp	r1, r0
 802a8b0:	f000 80eb 	beq.w	802aa8a <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802a8b4:	8b60      	ldrh	r0, [r4, #26]
 802a8b6:	8b21      	ldrh	r1, [r4, #24]
 802a8b8:	4301      	orrs	r1, r0
 802a8ba:	d00b      	beq.n	802a8d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a8bc:	2b00      	cmp	r3, #0
 802a8be:	db09      	blt.n	802a8d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a8c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a8c2:	428b      	cmp	r3, r1
 802a8c4:	da06      	bge.n	802a8d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a8c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a8ca:	4299      	cmp	r1, r3
 802a8cc:	d308      	bcc.n	802a8e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc>
 802a8ce:	2301      	movs	r3, #1
 802a8d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a8d4:	f8a4 b014 	strh.w	fp, [r4, #20]
 802a8d8:	2300      	movs	r3, #0
 802a8da:	82e2      	strh	r2, [r4, #22]
 802a8dc:	8323      	strh	r3, [r4, #24]
 802a8de:	e01f      	b.n	802a920 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802a8e0:	f104 0314 	add.w	r3, r4, #20
 802a8e4:	cb03      	ldmia	r3!, {r0, r1}
 802a8e6:	6925      	ldr	r5, [r4, #16]
 802a8e8:	6028      	str	r0, [r5, #0]
 802a8ea:	6069      	str	r1, [r5, #4]
 802a8ec:	6923      	ldr	r3, [r4, #16]
 802a8ee:	3308      	adds	r3, #8
 802a8f0:	6123      	str	r3, [r4, #16]
 802a8f2:	68a3      	ldr	r3, [r4, #8]
 802a8f4:	3301      	adds	r3, #1
 802a8f6:	60a3      	str	r3, [r4, #8]
 802a8f8:	e7ec      	b.n	802a8d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a8fa:	9b04      	ldr	r3, [sp, #16]
 802a8fc:	8b20      	ldrh	r0, [r4, #24]
 802a8fe:	8b62      	ldrh	r2, [r4, #26]
 802a900:	f003 031f 	and.w	r3, r3, #31
 802a904:	9305      	str	r3, [sp, #20]
 802a906:	9b03      	ldr	r3, [sp, #12]
 802a908:	45ab      	cmp	fp, r5
 802a90a:	f001 011f 	and.w	r1, r1, #31
 802a90e:	eba3 0306 	sub.w	r3, r3, r6
 802a912:	d107      	bne.n	802a924 <_ZN8touchgfx7Outline10renderLineEiiii+0x100>
 802a914:	4418      	add	r0, r3
 802a916:	8320      	strh	r0, [r4, #24]
 802a918:	9805      	ldr	r0, [sp, #20]
 802a91a:	4401      	add	r1, r0
 802a91c:	fb03 2301 	mla	r3, r3, r1, r2
 802a920:	8363      	strh	r3, [r4, #26]
 802a922:	e0b2      	b.n	802aa8a <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802a924:	f1ba 0f00 	cmp.w	sl, #0
 802a928:	db35      	blt.n	802a996 <_ZN8touchgfx7Outline10renderLineEiiii+0x172>
 802a92a:	2701      	movs	r7, #1
 802a92c:	f1c1 0c20 	rsb	ip, r1, #32
 802a930:	9702      	str	r7, [sp, #8]
 802a932:	fb03 f30c 	mul.w	r3, r3, ip
 802a936:	2720      	movs	r7, #32
 802a938:	9701      	str	r7, [sp, #4]
 802a93a:	fb93 fcfa 	sdiv	ip, r3, sl
 802a93e:	9f01      	ldr	r7, [sp, #4]
 802a940:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a944:	fb0a 331c 	mls	r3, sl, ip, r3
 802a948:	2b00      	cmp	r3, #0
 802a94a:	bfb8      	it	lt
 802a94c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a950:	4439      	add	r1, r7
 802a952:	fb0c 2101 	mla	r1, ip, r1, r2
 802a956:	9a02      	ldr	r2, [sp, #8]
 802a958:	4415      	add	r5, r2
 802a95a:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a95e:	9200      	str	r2, [sp, #0]
 802a960:	ea4f 4702 	mov.w	r7, r2, lsl #16
 802a964:	9704      	str	r7, [sp, #16]
 802a966:	9a04      	ldr	r2, [sp, #16]
 802a968:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802a96c:	fa0f fe85 	sxth.w	lr, r5
 802a970:	4460      	add	r0, ip
 802a972:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802a976:	eb0e 0902 	add.w	r9, lr, r2
 802a97a:	bfb8      	it	lt
 802a97c:	4453      	addlt	r3, sl
 802a97e:	b200      	sxth	r0, r0
 802a980:	b209      	sxth	r1, r1
 802a982:	454f      	cmp	r7, r9
 802a984:	8320      	strh	r0, [r4, #24]
 802a986:	8361      	strh	r1, [r4, #26]
 802a988:	d10d      	bne.n	802a9a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 802a98a:	4ba1      	ldr	r3, [pc, #644]	; (802ac10 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ec>)
 802a98c:	4aa1      	ldr	r2, [pc, #644]	; (802ac14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f0>)
 802a98e:	48a2      	ldr	r0, [pc, #648]	; (802ac18 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802a990:	2177      	movs	r1, #119	; 0x77
 802a992:	f001 fe63 	bl	802c65c <__assert_func>
 802a996:	f04f 37ff 	mov.w	r7, #4294967295
 802a99a:	9702      	str	r7, [sp, #8]
 802a99c:	434b      	muls	r3, r1
 802a99e:	f1ca 0a00 	rsb	sl, sl, #0
 802a9a2:	2700      	movs	r7, #0
 802a9a4:	e7c8      	b.n	802a938 <_ZN8touchgfx7Outline10renderLineEiiii+0x114>
 802a9a6:	ea50 0201 	orrs.w	r2, r0, r1
 802a9aa:	d00c      	beq.n	802a9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802a9ac:	f1b8 0f00 	cmp.w	r8, #0
 802a9b0:	db09      	blt.n	802a9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802a9b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a9b4:	4588      	cmp	r8, r1
 802a9b6:	da06      	bge.n	802a9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802a9b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a9bc:	4288      	cmp	r0, r1
 802a9be:	d367      	bcc.n	802aa90 <_ZN8touchgfx7Outline10renderLineEiiii+0x26c>
 802a9c0:	2101      	movs	r1, #1
 802a9c2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a9c6:	2100      	movs	r1, #0
 802a9c8:	9a00      	ldr	r2, [sp, #0]
 802a9ca:	f8a4 e014 	strh.w	lr, [r4, #20]
 802a9ce:	45ab      	cmp	fp, r5
 802a9d0:	82e2      	strh	r2, [r4, #22]
 802a9d2:	8321      	strh	r1, [r4, #24]
 802a9d4:	8361      	strh	r1, [r4, #26]
 802a9d6:	4466      	add	r6, ip
 802a9d8:	d04e      	beq.n	802aa78 <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 802a9da:	9a03      	ldr	r2, [sp, #12]
 802a9dc:	1b91      	subs	r1, r2, r6
 802a9de:	448c      	add	ip, r1
 802a9e0:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802a9e4:	fb9c f7fa 	sdiv	r7, ip, sl
 802a9e8:	fb0a cc17 	mls	ip, sl, r7, ip
 802a9ec:	f1bc 0f00 	cmp.w	ip, #0
 802a9f0:	bfb8      	it	lt
 802a9f2:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802a9f6:	f107 0201 	add.w	r2, r7, #1
 802a9fa:	bfb8      	it	lt
 802a9fc:	44d4      	addlt	ip, sl
 802a9fe:	eba3 030a 	sub.w	r3, r3, sl
 802aa02:	9207      	str	r2, [sp, #28]
 802aa04:	f04f 0800 	mov.w	r8, #0
 802aa08:	eb13 030c 	adds.w	r3, r3, ip
 802aa0c:	bf58      	it	pl
 802aa0e:	9807      	ldrpl	r0, [sp, #28]
 802aa10:	9a02      	ldr	r2, [sp, #8]
 802aa12:	bf48      	it	mi
 802aa14:	4638      	movmi	r0, r7
 802aa16:	fa0f fe80 	sxth.w	lr, r0
 802aa1a:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802aa1e:	4415      	add	r5, r2
 802aa20:	4406      	add	r6, r0
 802aa22:	9a04      	ldr	r2, [sp, #16]
 802aa24:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802aa28:	f8a4 e018 	strh.w	lr, [r4, #24]
 802aa2c:	fa0f f985 	sxth.w	r9, r5
 802aa30:	4410      	add	r0, r2
 802aa32:	444a      	add	r2, r9
 802aa34:	bf58      	it	pl
 802aa36:	eba3 030a 	subpl.w	r3, r3, sl
 802aa3a:	b209      	sxth	r1, r1
 802aa3c:	4290      	cmp	r0, r2
 802aa3e:	8361      	strh	r1, [r4, #26]
 802aa40:	d0a3      	beq.n	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802aa42:	ea5e 0201 	orrs.w	r2, lr, r1
 802aa46:	d00d      	beq.n	802aa64 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aa48:	9a00      	ldr	r2, [sp, #0]
 802aa4a:	2a00      	cmp	r2, #0
 802aa4c:	db0a      	blt.n	802aa64 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aa4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aa50:	428a      	cmp	r2, r1
 802aa52:	da07      	bge.n	802aa64 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aa54:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802aa58:	4288      	cmp	r0, r1
 802aa5a:	d329      	bcc.n	802aab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 802aa5c:	f04f 0201 	mov.w	r2, #1
 802aa60:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802aa64:	9a00      	ldr	r2, [sp, #0]
 802aa66:	f8a4 9014 	strh.w	r9, [r4, #20]
 802aa6a:	45ab      	cmp	fp, r5
 802aa6c:	82e2      	strh	r2, [r4, #22]
 802aa6e:	f8a4 8018 	strh.w	r8, [r4, #24]
 802aa72:	f8a4 801a 	strh.w	r8, [r4, #26]
 802aa76:	d1c7      	bne.n	802aa08 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 802aa78:	9b03      	ldr	r3, [sp, #12]
 802aa7a:	9a01      	ldr	r2, [sp, #4]
 802aa7c:	1b9e      	subs	r6, r3, r6
 802aa7e:	9b05      	ldr	r3, [sp, #20]
 802aa80:	8326      	strh	r6, [r4, #24]
 802aa82:	3320      	adds	r3, #32
 802aa84:	1a9b      	subs	r3, r3, r2
 802aa86:	435e      	muls	r6, r3
 802aa88:	8366      	strh	r6, [r4, #26]
 802aa8a:	b015      	add	sp, #84	; 0x54
 802aa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa90:	f104 0714 	add.w	r7, r4, #20
 802aa94:	cf03      	ldmia	r7!, {r0, r1}
 802aa96:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802aa9a:	f8c8 0000 	str.w	r0, [r8]
 802aa9e:	f8c8 1004 	str.w	r1, [r8, #4]
 802aaa2:	6921      	ldr	r1, [r4, #16]
 802aaa4:	3108      	adds	r1, #8
 802aaa6:	6121      	str	r1, [r4, #16]
 802aaa8:	68a1      	ldr	r1, [r4, #8]
 802aaaa:	3101      	adds	r1, #1
 802aaac:	60a1      	str	r1, [r4, #8]
 802aaae:	e78a      	b.n	802a9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802aab0:	f104 0e14 	add.w	lr, r4, #20
 802aab4:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802aab8:	6922      	ldr	r2, [r4, #16]
 802aaba:	9206      	str	r2, [sp, #24]
 802aabc:	6010      	str	r0, [r2, #0]
 802aabe:	6051      	str	r1, [r2, #4]
 802aac0:	6921      	ldr	r1, [r4, #16]
 802aac2:	3108      	adds	r1, #8
 802aac4:	6121      	str	r1, [r4, #16]
 802aac6:	68a1      	ldr	r1, [r4, #8]
 802aac8:	3101      	adds	r1, #1
 802aaca:	60a1      	str	r1, [r4, #8]
 802aacc:	e7ca      	b.n	802aa64 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aace:	eba0 0b02 	sub.w	fp, r0, r2
 802aad2:	f1ba 0f00 	cmp.w	sl, #0
 802aad6:	f040 80a1 	bne.w	802ac1c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>
 802aada:	f1bb 0f00 	cmp.w	fp, #0
 802aade:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802aae2:	8b62      	ldrh	r2, [r4, #26]
 802aae4:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802aae8:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802aaec:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802aaf0:	bfa8      	it	ge
 802aaf2:	f04f 0a20 	movge.w	sl, #32
 802aaf6:	8b21      	ldrh	r1, [r4, #24]
 802aaf8:	ebaa 0606 	sub.w	r6, sl, r6
 802aafc:	4431      	add	r1, r6
 802aafe:	fb06 2603 	mla	r6, r6, r3, r2
 802ab02:	9a00      	ldr	r2, [sp, #0]
 802ab04:	bfb4      	ite	lt
 802ab06:	f04f 39ff 	movlt.w	r9, #4294967295
 802ab0a:	f04f 0901 	movge.w	r9, #1
 802ab0e:	444a      	add	r2, r9
 802ab10:	b22d      	sxth	r5, r5
 802ab12:	b217      	sxth	r7, r2
 802ab14:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802ab18:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802ab1c:	b209      	sxth	r1, r1
 802ab1e:	b236      	sxth	r6, r6
 802ab20:	45f4      	cmp	ip, lr
 802ab22:	8321      	strh	r1, [r4, #24]
 802ab24:	8366      	strh	r6, [r4, #26]
 802ab26:	f43f af30 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ab2a:	4331      	orrs	r1, r6
 802ab2c:	d00b      	beq.n	802ab46 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802ab2e:	2800      	cmp	r0, #0
 802ab30:	db09      	blt.n	802ab46 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802ab32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ab34:	4288      	cmp	r0, r1
 802ab36:	da06      	bge.n	802ab46 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802ab38:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ab3c:	4288      	cmp	r0, r1
 802ab3e:	d33b      	bcc.n	802abb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 802ab40:	2101      	movs	r1, #1
 802ab42:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802ab46:	f1aa 0610 	sub.w	r6, sl, #16
 802ab4a:	0076      	lsls	r6, r6, #1
 802ab4c:	fb06 fc03 	mul.w	ip, r6, r3
 802ab50:	fa0f fc8c 	sxth.w	ip, ip
 802ab54:	b236      	sxth	r6, r6
 802ab56:	82e7      	strh	r7, [r4, #22]
 802ab58:	ea46 010c 	orr.w	r1, r6, ip
 802ab5c:	2700      	movs	r7, #0
 802ab5e:	82a5      	strh	r5, [r4, #20]
 802ab60:	8327      	strh	r7, [r4, #24]
 802ab62:	8367      	strh	r7, [r4, #26]
 802ab64:	9100      	str	r1, [sp, #0]
 802ab66:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ab68:	428a      	cmp	r2, r1
 802ab6a:	d046      	beq.n	802abfa <_ZN8touchgfx7Outline10renderLineEiiii+0x3d6>
 802ab6c:	444a      	add	r2, r9
 802ab6e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802ab72:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802ab76:	8326      	strh	r6, [r4, #24]
 802ab78:	fa0f f882 	sxth.w	r8, r2
 802ab7c:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802ab80:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802ab84:	4570      	cmp	r0, lr
 802ab86:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802ab8a:	f43f aefe 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ab8e:	9800      	ldr	r0, [sp, #0]
 802ab90:	b160      	cbz	r0, 802abac <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ab92:	2900      	cmp	r1, #0
 802ab94:	db0a      	blt.n	802abac <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ab96:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802ab98:	4281      	cmp	r1, r0
 802ab9a:	da07      	bge.n	802abac <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ab9c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802aba0:	4288      	cmp	r0, r1
 802aba2:	d319      	bcc.n	802abd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b4>
 802aba4:	f04f 0101 	mov.w	r1, #1
 802aba8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802abac:	82a5      	strh	r5, [r4, #20]
 802abae:	f8a4 8016 	strh.w	r8, [r4, #22]
 802abb2:	8327      	strh	r7, [r4, #24]
 802abb4:	8367      	strh	r7, [r4, #26]
 802abb6:	e7d6      	b.n	802ab66 <_ZN8touchgfx7Outline10renderLineEiiii+0x342>
 802abb8:	f104 0614 	add.w	r6, r4, #20
 802abbc:	ce03      	ldmia	r6!, {r0, r1}
 802abbe:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802abc2:	f8cc 0000 	str.w	r0, [ip]
 802abc6:	f8cc 1004 	str.w	r1, [ip, #4]
 802abca:	6921      	ldr	r1, [r4, #16]
 802abcc:	3108      	adds	r1, #8
 802abce:	6121      	str	r1, [r4, #16]
 802abd0:	68a1      	ldr	r1, [r4, #8]
 802abd2:	3101      	adds	r1, #1
 802abd4:	60a1      	str	r1, [r4, #8]
 802abd6:	e7b6      	b.n	802ab46 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802abd8:	f104 0e14 	add.w	lr, r4, #20
 802abdc:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802abe0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802abe4:	f8cb 0000 	str.w	r0, [fp]
 802abe8:	f8cb 1004 	str.w	r1, [fp, #4]
 802abec:	6921      	ldr	r1, [r4, #16]
 802abee:	3108      	adds	r1, #8
 802abf0:	6121      	str	r1, [r4, #16]
 802abf2:	68a1      	ldr	r1, [r4, #8]
 802abf4:	3101      	adds	r1, #1
 802abf6:	60a1      	str	r1, [r4, #8]
 802abf8:	e7d8      	b.n	802abac <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802abfa:	9a03      	ldr	r2, [sp, #12]
 802abfc:	8b61      	ldrh	r1, [r4, #26]
 802abfe:	f1a2 0e20 	sub.w	lr, r2, #32
 802ac02:	8b22      	ldrh	r2, [r4, #24]
 802ac04:	44d6      	add	lr, sl
 802ac06:	4472      	add	r2, lr
 802ac08:	8322      	strh	r2, [r4, #24]
 802ac0a:	fb0e 1303 	mla	r3, lr, r3, r1
 802ac0e:	e687      	b.n	802a920 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802ac10:	08031ef7 	.word	0x08031ef7
 802ac14:	08031f78 	.word	0x08031f78
 802ac18:	08031f28 	.word	0x08031f28
 802ac1c:	f1bb 0f00 	cmp.w	fp, #0
 802ac20:	f2c0 8124 	blt.w	802ae6c <_ZN8touchgfx7Outline10renderLineEiiii+0x648>
 802ac24:	2201      	movs	r2, #1
 802ac26:	f1c6 0320 	rsb	r3, r6, #32
 802ac2a:	920b      	str	r2, [sp, #44]	; 0x2c
 802ac2c:	fb0a f303 	mul.w	r3, sl, r3
 802ac30:	2220      	movs	r2, #32
 802ac32:	fb93 fcfb 	sdiv	ip, r3, fp
 802ac36:	fb0b 331c 	mls	r3, fp, ip, r3
 802ac3a:	2b00      	cmp	r3, #0
 802ac3c:	9308      	str	r3, [sp, #32]
 802ac3e:	bfbe      	ittt	lt
 802ac40:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802ac44:	445b      	addlt	r3, fp
 802ac46:	9308      	strlt	r3, [sp, #32]
 802ac48:	eb0c 0301 	add.w	r3, ip, r1
 802ac4c:	9301      	str	r3, [sp, #4]
 802ac4e:	115b      	asrs	r3, r3, #5
 802ac50:	9305      	str	r3, [sp, #20]
 802ac52:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802ac56:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802ac5a:	9202      	str	r2, [sp, #8]
 802ac5c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802ac60:	461f      	mov	r7, r3
 802ac62:	9b02      	ldr	r3, [sp, #8]
 802ac64:	42b3      	cmp	r3, r6
 802ac66:	f040 8117 	bne.w	802ae98 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802ac6a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802ac6e:	f9bd 3000 	ldrsh.w	r3, [sp]
 802ac72:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802ac76:	42b9      	cmp	r1, r7
 802ac78:	d016      	beq.n	802aca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802ac7a:	8b60      	ldrh	r0, [r4, #26]
 802ac7c:	8b21      	ldrh	r1, [r4, #24]
 802ac7e:	4301      	orrs	r1, r0
 802ac80:	d00d      	beq.n	802ac9e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ac82:	f1b8 0f00 	cmp.w	r8, #0
 802ac86:	db0a      	blt.n	802ac9e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ac88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ac8a:	4541      	cmp	r1, r8
 802ac8c:	dd07      	ble.n	802ac9e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ac8e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ac92:	4288      	cmp	r0, r1
 802ac94:	f0c0 80f3 	bcc.w	802ae7e <_ZN8touchgfx7Outline10renderLineEiiii+0x65a>
 802ac98:	2101      	movs	r1, #1
 802ac9a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802ac9e:	82e3      	strh	r3, [r4, #22]
 802aca0:	2300      	movs	r3, #0
 802aca2:	82a2      	strh	r2, [r4, #20]
 802aca4:	8323      	strh	r3, [r4, #24]
 802aca6:	8363      	strh	r3, [r4, #26]
 802aca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802acaa:	9a00      	ldr	r2, [sp, #0]
 802acac:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802acb0:	441a      	add	r2, r3
 802acb2:	4691      	mov	r9, r2
 802acb4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802acb8:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802acbc:	fa0f f589 	sxth.w	r5, r9
 802acc0:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802acc4:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802acc8:	4281      	cmp	r1, r0
 802acca:	d015      	beq.n	802acf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d4>
 802accc:	8b60      	ldrh	r0, [r4, #26]
 802acce:	8b21      	ldrh	r1, [r4, #24]
 802acd0:	4301      	orrs	r1, r0
 802acd2:	d00c      	beq.n	802acee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802acd4:	2a00      	cmp	r2, #0
 802acd6:	db0a      	blt.n	802acee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802acd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802acda:	428a      	cmp	r2, r1
 802acdc:	da07      	bge.n	802acee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802acde:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802ace2:	4291      	cmp	r1, r2
 802ace4:	f0c0 81b4 	bcc.w	802b050 <_ZN8touchgfx7Outline10renderLineEiiii+0x82c>
 802ace8:	2201      	movs	r2, #1
 802acea:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802acee:	82a3      	strh	r3, [r4, #20]
 802acf0:	2300      	movs	r3, #0
 802acf2:	82e5      	strh	r5, [r4, #22]
 802acf4:	8323      	strh	r3, [r4, #24]
 802acf6:	8363      	strh	r3, [r4, #26]
 802acf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802acfa:	454b      	cmp	r3, r9
 802acfc:	f000 808a 	beq.w	802ae14 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 802ad00:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802ad04:	fb93 f2fb 	sdiv	r2, r3, fp
 802ad08:	fb0b 3312 	mls	r3, fp, r2, r3
 802ad0c:	2b00      	cmp	r3, #0
 802ad0e:	9205      	str	r2, [sp, #20]
 802ad10:	9307      	str	r3, [sp, #28]
 802ad12:	da04      	bge.n	802ad1e <_ZN8touchgfx7Outline10renderLineEiiii+0x4fa>
 802ad14:	1e53      	subs	r3, r2, #1
 802ad16:	9305      	str	r3, [sp, #20]
 802ad18:	9b07      	ldr	r3, [sp, #28]
 802ad1a:	445b      	add	r3, fp
 802ad1c:	9307      	str	r3, [sp, #28]
 802ad1e:	9b08      	ldr	r3, [sp, #32]
 802ad20:	eba3 030b 	sub.w	r3, r3, fp
 802ad24:	9308      	str	r3, [sp, #32]
 802ad26:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802ad2a:	f1c3 0320 	rsb	r3, r3, #32
 802ad2e:	930a      	str	r3, [sp, #40]	; 0x28
 802ad30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ad32:	9b02      	ldr	r3, [sp, #8]
 802ad34:	1a9b      	subs	r3, r3, r2
 802ad36:	9309      	str	r3, [sp, #36]	; 0x24
 802ad38:	f04f 0a00 	mov.w	sl, #0
 802ad3c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802ad40:	189b      	adds	r3, r3, r2
 802ad42:	9308      	str	r3, [sp, #32]
 802ad44:	bf5d      	ittte	pl
 802ad46:	eba3 030b 	subpl.w	r3, r3, fp
 802ad4a:	9308      	strpl	r3, [sp, #32]
 802ad4c:	9b05      	ldrpl	r3, [sp, #20]
 802ad4e:	9b05      	ldrmi	r3, [sp, #20]
 802ad50:	9902      	ldr	r1, [sp, #8]
 802ad52:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802ad56:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802ad5a:	bf58      	it	pl
 802ad5c:	3301      	addpl	r3, #1
 802ad5e:	9300      	str	r3, [sp, #0]
 802ad60:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ad64:	4413      	add	r3, r2
 802ad66:	9301      	str	r3, [sp, #4]
 802ad68:	115b      	asrs	r3, r3, #5
 802ad6a:	9306      	str	r3, [sp, #24]
 802ad6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ad6e:	428b      	cmp	r3, r1
 802ad70:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802ad74:	f040 8186 	bne.w	802b084 <_ZN8touchgfx7Outline10renderLineEiiii+0x860>
 802ad78:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802ad7c:	fa0f f389 	sxth.w	r3, r9
 802ad80:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802ad84:	4541      	cmp	r1, r8
 802ad86:	d017      	beq.n	802adb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802ad88:	8b60      	ldrh	r0, [r4, #26]
 802ad8a:	8b21      	ldrh	r1, [r4, #24]
 802ad8c:	4301      	orrs	r1, r0
 802ad8e:	d00d      	beq.n	802adac <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802ad90:	2e00      	cmp	r6, #0
 802ad92:	db0b      	blt.n	802adac <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802ad94:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ad96:	42b1      	cmp	r1, r6
 802ad98:	dd08      	ble.n	802adac <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802ad9a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ad9e:	4288      	cmp	r0, r1
 802ada0:	f0c0 8163 	bcc.w	802b06a <_ZN8touchgfx7Outline10renderLineEiiii+0x846>
 802ada4:	f04f 0101 	mov.w	r1, #1
 802ada8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802adac:	82a2      	strh	r2, [r4, #20]
 802adae:	82e3      	strh	r3, [r4, #22]
 802adb0:	f8a4 a018 	strh.w	sl, [r4, #24]
 802adb4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802adb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802adba:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802adbe:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802adc2:	4499      	add	r9, r3
 802adc4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802adc8:	fa0f f589 	sxth.w	r5, r9
 802adcc:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802add0:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802add4:	4281      	cmp	r1, r0
 802add6:	f43f add8 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802adda:	8b60      	ldrh	r0, [r4, #26]
 802addc:	8b21      	ldrh	r1, [r4, #24]
 802adde:	4301      	orrs	r1, r0
 802ade0:	d00d      	beq.n	802adfe <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ade2:	2a00      	cmp	r2, #0
 802ade4:	db0b      	blt.n	802adfe <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ade6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ade8:	428a      	cmp	r2, r1
 802adea:	da08      	bge.n	802adfe <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802adec:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802adf0:	4291      	cmp	r1, r2
 802adf2:	f0c0 8230 	bcc.w	802b256 <_ZN8touchgfx7Outline10renderLineEiiii+0xa32>
 802adf6:	f04f 0201 	mov.w	r2, #1
 802adfa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802adfe:	82a3      	strh	r3, [r4, #20]
 802ae00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ae02:	82e5      	strh	r5, [r4, #22]
 802ae04:	454b      	cmp	r3, r9
 802ae06:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ae0a:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ae0e:	f8dd c004 	ldr.w	ip, [sp, #4]
 802ae12:	d193      	bne.n	802ad3c <_ZN8touchgfx7Outline10renderLineEiiii+0x518>
 802ae14:	9b02      	ldr	r3, [sp, #8]
 802ae16:	f1c3 0e20 	rsb	lr, r3, #32
 802ae1a:	9b04      	ldr	r3, [sp, #16]
 802ae1c:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802ae20:	9b03      	ldr	r3, [sp, #12]
 802ae22:	459e      	cmp	lr, r3
 802ae24:	f040 8231 	bne.w	802b28a <_ZN8touchgfx7Outline10renderLineEiiii+0xa66>
 802ae28:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802ae2c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802ae30:	fa0f f58b 	sxth.w	r5, fp
 802ae34:	fa0f f289 	sxth.w	r2, r9
 802ae38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802ae3c:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802ae40:	4281      	cmp	r1, r0
 802ae42:	f43f ae22 	beq.w	802aa8a <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802ae46:	8b60      	ldrh	r0, [r4, #26]
 802ae48:	8b21      	ldrh	r1, [r4, #24]
 802ae4a:	4301      	orrs	r1, r0
 802ae4c:	d00c      	beq.n	802ae68 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ae4e:	2b00      	cmp	r3, #0
 802ae50:	db0a      	blt.n	802ae68 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ae52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ae54:	428b      	cmp	r3, r1
 802ae56:	da07      	bge.n	802ae68 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ae58:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802ae5c:	4299      	cmp	r1, r3
 802ae5e:	f0c0 8207 	bcc.w	802b270 <_ZN8touchgfx7Outline10renderLineEiiii+0xa4c>
 802ae62:	2301      	movs	r3, #1
 802ae64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802ae68:	82a5      	strh	r5, [r4, #20]
 802ae6a:	e535      	b.n	802a8d8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb4>
 802ae6c:	f04f 32ff 	mov.w	r2, #4294967295
 802ae70:	920b      	str	r2, [sp, #44]	; 0x2c
 802ae72:	fb0a f306 	mul.w	r3, sl, r6
 802ae76:	f1cb 0b00 	rsb	fp, fp, #0
 802ae7a:	2200      	movs	r2, #0
 802ae7c:	e6d9      	b.n	802ac32 <_ZN8touchgfx7Outline10renderLineEiiii+0x40e>
 802ae7e:	f104 0514 	add.w	r5, r4, #20
 802ae82:	cd03      	ldmia	r5!, {r0, r1}
 802ae84:	6926      	ldr	r6, [r4, #16]
 802ae86:	6030      	str	r0, [r6, #0]
 802ae88:	6071      	str	r1, [r6, #4]
 802ae8a:	6921      	ldr	r1, [r4, #16]
 802ae8c:	3108      	adds	r1, #8
 802ae8e:	6121      	str	r1, [r4, #16]
 802ae90:	68a1      	ldr	r1, [r4, #8]
 802ae92:	3101      	adds	r1, #1
 802ae94:	60a1      	str	r1, [r4, #8]
 802ae96:	e702      	b.n	802ac9e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ae98:	9b01      	ldr	r3, [sp, #4]
 802ae9a:	8b20      	ldrh	r0, [r4, #24]
 802ae9c:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802aea0:	f003 031f 	and.w	r3, r3, #31
 802aea4:	930d      	str	r3, [sp, #52]	; 0x34
 802aea6:	9b02      	ldr	r3, [sp, #8]
 802aea8:	1b9a      	subs	r2, r3, r6
 802aeaa:	9b05      	ldr	r3, [sp, #20]
 802aeac:	42ab      	cmp	r3, r5
 802aeae:	f001 011f 	and.w	r1, r1, #31
 802aeb2:	d107      	bne.n	802aec4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a0>
 802aeb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aeb6:	4419      	add	r1, r3
 802aeb8:	4410      	add	r0, r2
 802aeba:	fb02 9201 	mla	r2, r2, r1, r9
 802aebe:	8320      	strh	r0, [r4, #24]
 802aec0:	8362      	strh	r2, [r4, #26]
 802aec2:	e6f1      	b.n	802aca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802aec4:	f1bc 0f00 	cmp.w	ip, #0
 802aec8:	f2c0 8099 	blt.w	802affe <_ZN8touchgfx7Outline10renderLineEiiii+0x7da>
 802aecc:	f1c1 0320 	rsb	r3, r1, #32
 802aed0:	435a      	muls	r2, r3
 802aed2:	2301      	movs	r3, #1
 802aed4:	9309      	str	r3, [sp, #36]	; 0x24
 802aed6:	2320      	movs	r3, #32
 802aed8:	9307      	str	r3, [sp, #28]
 802aeda:	fb92 fefc 	sdiv	lr, r2, ip
 802aede:	9b07      	ldr	r3, [sp, #28]
 802aee0:	fb0c 221e 	mls	r2, ip, lr, r2
 802aee4:	2a00      	cmp	r2, #0
 802aee6:	bfb8      	it	lt
 802aee8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802aeec:	4419      	add	r1, r3
 802aeee:	fb0e 9101 	mla	r1, lr, r1, r9
 802aef2:	b20b      	sxth	r3, r1
 802aef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802aef6:	8363      	strh	r3, [r4, #26]
 802aef8:	440d      	add	r5, r1
 802aefa:	f9bd 1000 	ldrsh.w	r1, [sp]
 802aefe:	9106      	str	r1, [sp, #24]
 802af00:	fa0f f985 	sxth.w	r9, r5
 802af04:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802af08:	4470      	add	r0, lr
 802af0a:	910a      	str	r1, [sp, #40]	; 0x28
 802af0c:	4449      	add	r1, r9
 802af0e:	bfb8      	it	lt
 802af10:	4462      	addlt	r2, ip
 802af12:	b200      	sxth	r0, r0
 802af14:	42b9      	cmp	r1, r7
 802af16:	8320      	strh	r0, [r4, #24]
 802af18:	f43f ad37 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802af1c:	4303      	orrs	r3, r0
 802af1e:	d00c      	beq.n	802af3a <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802af20:	f1b8 0f00 	cmp.w	r8, #0
 802af24:	db09      	blt.n	802af3a <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802af26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802af28:	4543      	cmp	r3, r8
 802af2a:	dd06      	ble.n	802af3a <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802af2c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802af30:	4299      	cmp	r1, r3
 802af32:	d36c      	bcc.n	802b00e <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 802af34:	2301      	movs	r3, #1
 802af36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802af3a:	9b06      	ldr	r3, [sp, #24]
 802af3c:	82e3      	strh	r3, [r4, #22]
 802af3e:	2300      	movs	r3, #0
 802af40:	8323      	strh	r3, [r4, #24]
 802af42:	8363      	strh	r3, [r4, #26]
 802af44:	9b05      	ldr	r3, [sp, #20]
 802af46:	f8a4 9014 	strh.w	r9, [r4, #20]
 802af4a:	42ab      	cmp	r3, r5
 802af4c:	4476      	add	r6, lr
 802af4e:	d04c      	beq.n	802afea <_ZN8touchgfx7Outline10renderLineEiiii+0x7c6>
 802af50:	9b02      	ldr	r3, [sp, #8]
 802af52:	1b9b      	subs	r3, r3, r6
 802af54:	4473      	add	r3, lr
 802af56:	015b      	lsls	r3, r3, #5
 802af58:	fb93 f8fc 	sdiv	r8, r3, ip
 802af5c:	fb0c 3318 	mls	r3, ip, r8, r3
 802af60:	2b00      	cmp	r3, #0
 802af62:	bfb8      	it	lt
 802af64:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802af68:	f108 0101 	add.w	r1, r8, #1
 802af6c:	bfb8      	it	lt
 802af6e:	4463      	addlt	r3, ip
 802af70:	eba2 020c 	sub.w	r2, r2, ip
 802af74:	910f      	str	r1, [sp, #60]	; 0x3c
 802af76:	18d2      	adds	r2, r2, r3
 802af78:	bf58      	it	pl
 802af7a:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802af7c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802af7e:	bf48      	it	mi
 802af80:	4640      	movmi	r0, r8
 802af82:	fa0f fe80 	sxth.w	lr, r0
 802af86:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802af8a:	4406      	add	r6, r0
 802af8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802af8e:	f8a4 e018 	strh.w	lr, [r4, #24]
 802af92:	4405      	add	r5, r0
 802af94:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802af98:	fa0f f985 	sxth.w	r9, r5
 802af9c:	4438      	add	r0, r7
 802af9e:	444f      	add	r7, r9
 802afa0:	bf58      	it	pl
 802afa2:	eba2 020c 	subpl.w	r2, r2, ip
 802afa6:	b209      	sxth	r1, r1
 802afa8:	42b8      	cmp	r0, r7
 802afaa:	8361      	strh	r1, [r4, #26]
 802afac:	f43f aced 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802afb0:	ea5e 0101 	orrs.w	r1, lr, r1
 802afb4:	d00e      	beq.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802afb6:	9906      	ldr	r1, [sp, #24]
 802afb8:	2900      	cmp	r1, #0
 802afba:	db0b      	blt.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802afbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802afbe:	9806      	ldr	r0, [sp, #24]
 802afc0:	4288      	cmp	r0, r1
 802afc2:	da07      	bge.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802afc4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802afc8:	4288      	cmp	r0, r1
 802afca:	d330      	bcc.n	802b02e <_ZN8touchgfx7Outline10renderLineEiiii+0x80a>
 802afcc:	f04f 0101 	mov.w	r1, #1
 802afd0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802afd4:	9906      	ldr	r1, [sp, #24]
 802afd6:	82e1      	strh	r1, [r4, #22]
 802afd8:	f04f 0100 	mov.w	r1, #0
 802afdc:	8321      	strh	r1, [r4, #24]
 802afde:	8361      	strh	r1, [r4, #26]
 802afe0:	9905      	ldr	r1, [sp, #20]
 802afe2:	f8a4 9014 	strh.w	r9, [r4, #20]
 802afe6:	42a9      	cmp	r1, r5
 802afe8:	d1c5      	bne.n	802af76 <_ZN8touchgfx7Outline10renderLineEiiii+0x752>
 802afea:	9b02      	ldr	r3, [sp, #8]
 802afec:	990d      	ldr	r1, [sp, #52]	; 0x34
 802afee:	1b9e      	subs	r6, r3, r6
 802aff0:	9b07      	ldr	r3, [sp, #28]
 802aff2:	8326      	strh	r6, [r4, #24]
 802aff4:	3120      	adds	r1, #32
 802aff6:	1ac9      	subs	r1, r1, r3
 802aff8:	434e      	muls	r6, r1
 802affa:	8366      	strh	r6, [r4, #26]
 802affc:	e654      	b.n	802aca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802affe:	f04f 33ff 	mov.w	r3, #4294967295
 802b002:	9309      	str	r3, [sp, #36]	; 0x24
 802b004:	434a      	muls	r2, r1
 802b006:	f1cc 0c00 	rsb	ip, ip, #0
 802b00a:	2300      	movs	r3, #0
 802b00c:	e764      	b.n	802aed8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6b4>
 802b00e:	f104 0314 	add.w	r3, r4, #20
 802b012:	cb03      	ldmia	r3!, {r0, r1}
 802b014:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802b018:	f8c8 0000 	str.w	r0, [r8]
 802b01c:	f8c8 1004 	str.w	r1, [r8, #4]
 802b020:	6923      	ldr	r3, [r4, #16]
 802b022:	3308      	adds	r3, #8
 802b024:	6123      	str	r3, [r4, #16]
 802b026:	68a3      	ldr	r3, [r4, #8]
 802b028:	3301      	adds	r3, #1
 802b02a:	60a3      	str	r3, [r4, #8]
 802b02c:	e785      	b.n	802af3a <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802b02e:	6921      	ldr	r1, [r4, #16]
 802b030:	910e      	str	r1, [sp, #56]	; 0x38
 802b032:	f104 0e14 	add.w	lr, r4, #20
 802b036:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802b03a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802b03c:	6038      	str	r0, [r7, #0]
 802b03e:	6079      	str	r1, [r7, #4]
 802b040:	6921      	ldr	r1, [r4, #16]
 802b042:	3108      	adds	r1, #8
 802b044:	6121      	str	r1, [r4, #16]
 802b046:	68a1      	ldr	r1, [r4, #8]
 802b048:	3101      	adds	r1, #1
 802b04a:	4638      	mov	r0, r7
 802b04c:	60a1      	str	r1, [r4, #8]
 802b04e:	e7c1      	b.n	802afd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802b050:	f104 0214 	add.w	r2, r4, #20
 802b054:	ca03      	ldmia	r2!, {r0, r1}
 802b056:	6926      	ldr	r6, [r4, #16]
 802b058:	6030      	str	r0, [r6, #0]
 802b05a:	6071      	str	r1, [r6, #4]
 802b05c:	6922      	ldr	r2, [r4, #16]
 802b05e:	3208      	adds	r2, #8
 802b060:	6122      	str	r2, [r4, #16]
 802b062:	68a2      	ldr	r2, [r4, #8]
 802b064:	3201      	adds	r2, #1
 802b066:	60a2      	str	r2, [r4, #8]
 802b068:	e641      	b.n	802acee <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802b06a:	f104 0514 	add.w	r5, r4, #20
 802b06e:	cd03      	ldmia	r5!, {r0, r1}
 802b070:	6926      	ldr	r6, [r4, #16]
 802b072:	6030      	str	r0, [r6, #0]
 802b074:	6071      	str	r1, [r6, #4]
 802b076:	6921      	ldr	r1, [r4, #16]
 802b078:	3108      	adds	r1, #8
 802b07a:	6121      	str	r1, [r4, #16]
 802b07c:	68a1      	ldr	r1, [r4, #8]
 802b07e:	3101      	adds	r1, #1
 802b080:	60a1      	str	r1, [r4, #8]
 802b082:	e693      	b.n	802adac <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802b084:	9b01      	ldr	r3, [sp, #4]
 802b086:	8b20      	ldrh	r0, [r4, #24]
 802b088:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802b08c:	f003 031f 	and.w	r3, r3, #31
 802b090:	9310      	str	r3, [sp, #64]	; 0x40
 802b092:	9b06      	ldr	r3, [sp, #24]
 802b094:	ea4f 176c 	mov.w	r7, ip, asr #5
 802b098:	429f      	cmp	r7, r3
 802b09a:	f00c 0c1f 	and.w	ip, ip, #31
 802b09e:	d10a      	bne.n	802b0b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x892>
 802b0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b0a2:	4418      	add	r0, r3
 802b0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b0a6:	8320      	strh	r0, [r4, #24]
 802b0a8:	449c      	add	ip, r3
 802b0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b0ac:	fb03 ee0c 	mla	lr, r3, ip, lr
 802b0b0:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802b0b4:	e680      	b.n	802adb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802b0b6:	9b00      	ldr	r3, [sp, #0]
 802b0b8:	2b00      	cmp	r3, #0
 802b0ba:	f2c0 80a2 	blt.w	802b202 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 802b0be:	9909      	ldr	r1, [sp, #36]	; 0x24
 802b0c0:	f1cc 0320 	rsb	r3, ip, #32
 802b0c4:	434b      	muls	r3, r1
 802b0c6:	2101      	movs	r1, #1
 802b0c8:	910e      	str	r1, [sp, #56]	; 0x38
 802b0ca:	2120      	movs	r1, #32
 802b0cc:	9a00      	ldr	r2, [sp, #0]
 802b0ce:	910d      	str	r1, [sp, #52]	; 0x34
 802b0d0:	fb93 f5f2 	sdiv	r5, r3, r2
 802b0d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 802b0d6:	fb02 3315 	mls	r3, r2, r5, r3
 802b0da:	2b00      	cmp	r3, #0
 802b0dc:	bfbc      	itt	lt
 802b0de:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802b0e2:	189b      	addlt	r3, r3, r2
 802b0e4:	448c      	add	ip, r1
 802b0e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b0e8:	fb05 ec0c 	mla	ip, r5, ip, lr
 802b0ec:	fa0f f18c 	sxth.w	r1, ip
 802b0f0:	4417      	add	r7, r2
 802b0f2:	fa0f fc89 	sxth.w	ip, r9
 802b0f6:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802b0fa:	fa0f fe87 	sxth.w	lr, r7
 802b0fe:	4428      	add	r0, r5
 802b100:	920f      	str	r2, [sp, #60]	; 0x3c
 802b102:	4472      	add	r2, lr
 802b104:	b200      	sxth	r0, r0
 802b106:	4542      	cmp	r2, r8
 802b108:	8320      	strh	r0, [r4, #24]
 802b10a:	8361      	strh	r1, [r4, #26]
 802b10c:	f43f ac3d 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b110:	ea50 0201 	orrs.w	r2, r0, r1
 802b114:	d00c      	beq.n	802b130 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b116:	2e00      	cmp	r6, #0
 802b118:	db0a      	blt.n	802b130 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b11a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b11c:	42b1      	cmp	r1, r6
 802b11e:	dd07      	ble.n	802b130 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b120:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b124:	4288      	cmp	r0, r1
 802b126:	d377      	bcc.n	802b218 <_ZN8touchgfx7Outline10renderLineEiiii+0x9f4>
 802b128:	f04f 0201 	mov.w	r2, #1
 802b12c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802b130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b132:	f8a4 e014 	strh.w	lr, [r4, #20]
 802b136:	1956      	adds	r6, r2, r5
 802b138:	9a06      	ldr	r2, [sp, #24]
 802b13a:	f8a4 c016 	strh.w	ip, [r4, #22]
 802b13e:	42ba      	cmp	r2, r7
 802b140:	f8a4 a018 	strh.w	sl, [r4, #24]
 802b144:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802b148:	d04e      	beq.n	802b1e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c4>
 802b14a:	9a02      	ldr	r2, [sp, #8]
 802b14c:	1b91      	subs	r1, r2, r6
 802b14e:	440d      	add	r5, r1
 802b150:	9a00      	ldr	r2, [sp, #0]
 802b152:	016d      	lsls	r5, r5, #5
 802b154:	fb95 fef2 	sdiv	lr, r5, r2
 802b158:	fb02 551e 	mls	r5, r2, lr, r5
 802b15c:	2d00      	cmp	r5, #0
 802b15e:	bfb8      	it	lt
 802b160:	18ad      	addlt	r5, r5, r2
 802b162:	9a00      	ldr	r2, [sp, #0]
 802b164:	bfb8      	it	lt
 802b166:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802b16a:	1a9b      	subs	r3, r3, r2
 802b16c:	f10e 0201 	add.w	r2, lr, #1
 802b170:	9213      	str	r2, [sp, #76]	; 0x4c
 802b172:	195b      	adds	r3, r3, r5
 802b174:	bf5e      	ittt	pl
 802b176:	9a00      	ldrpl	r2, [sp, #0]
 802b178:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802b17a:	1a9b      	subpl	r3, r3, r2
 802b17c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b17e:	4417      	add	r7, r2
 802b180:	bf48      	it	mi
 802b182:	4670      	movmi	r0, lr
 802b184:	b23a      	sxth	r2, r7
 802b186:	fa0f f880 	sxth.w	r8, r0
 802b18a:	0141      	lsls	r1, r0, #5
 802b18c:	9211      	str	r2, [sp, #68]	; 0x44
 802b18e:	4406      	add	r6, r0
 802b190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b192:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802b196:	f8a4 8018 	strh.w	r8, [r4, #24]
 802b19a:	1882      	adds	r2, r0, r2
 802b19c:	9212      	str	r2, [sp, #72]	; 0x48
 802b19e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802b1a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b1a2:	4402      	add	r2, r0
 802b1a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 802b1a6:	b209      	sxth	r1, r1
 802b1a8:	4290      	cmp	r0, r2
 802b1aa:	8361      	strh	r1, [r4, #26]
 802b1ac:	f43f abed 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b1b0:	ea58 0201 	orrs.w	r2, r8, r1
 802b1b4:	d00d      	beq.n	802b1d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b1b6:	f1bc 0f00 	cmp.w	ip, #0
 802b1ba:	db0a      	blt.n	802b1d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b1bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b1be:	458c      	cmp	ip, r1
 802b1c0:	da07      	bge.n	802b1d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b1c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b1c6:	4288      	cmp	r0, r1
 802b1c8:	d336      	bcc.n	802b238 <_ZN8touchgfx7Outline10renderLineEiiii+0xa14>
 802b1ca:	f04f 0201 	mov.w	r2, #1
 802b1ce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802b1d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b1d4:	82a2      	strh	r2, [r4, #20]
 802b1d6:	9a06      	ldr	r2, [sp, #24]
 802b1d8:	f8a4 c016 	strh.w	ip, [r4, #22]
 802b1dc:	42ba      	cmp	r2, r7
 802b1de:	f8a4 a018 	strh.w	sl, [r4, #24]
 802b1e2:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802b1e6:	d1c4      	bne.n	802b172 <_ZN8touchgfx7Outline10renderLineEiiii+0x94e>
 802b1e8:	9b02      	ldr	r3, [sp, #8]
 802b1ea:	1b9e      	subs	r6, r3, r6
 802b1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b1ee:	8326      	strh	r6, [r4, #24]
 802b1f0:	f103 0c20 	add.w	ip, r3, #32
 802b1f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b1f6:	ebac 0c03 	sub.w	ip, ip, r3
 802b1fa:	fb06 f60c 	mul.w	r6, r6, ip
 802b1fe:	8366      	strh	r6, [r4, #26]
 802b200:	e5da      	b.n	802adb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802b202:	9a00      	ldr	r2, [sp, #0]
 802b204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b206:	f04f 31ff 	mov.w	r1, #4294967295
 802b20a:	4252      	negs	r2, r2
 802b20c:	910e      	str	r1, [sp, #56]	; 0x38
 802b20e:	fb03 f30c 	mul.w	r3, r3, ip
 802b212:	9200      	str	r2, [sp, #0]
 802b214:	2100      	movs	r1, #0
 802b216:	e759      	b.n	802b0cc <_ZN8touchgfx7Outline10renderLineEiiii+0x8a8>
 802b218:	f104 0614 	add.w	r6, r4, #20
 802b21c:	ce03      	ldmia	r6!, {r0, r1}
 802b21e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802b222:	f8c8 0000 	str.w	r0, [r8]
 802b226:	f8c8 1004 	str.w	r1, [r8, #4]
 802b22a:	6921      	ldr	r1, [r4, #16]
 802b22c:	3108      	adds	r1, #8
 802b22e:	6121      	str	r1, [r4, #16]
 802b230:	68a1      	ldr	r1, [r4, #8]
 802b232:	3101      	adds	r1, #1
 802b234:	60a1      	str	r1, [r4, #8]
 802b236:	e77b      	b.n	802b130 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b238:	f104 0814 	add.w	r8, r4, #20
 802b23c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802b240:	6922      	ldr	r2, [r4, #16]
 802b242:	9212      	str	r2, [sp, #72]	; 0x48
 802b244:	6010      	str	r0, [r2, #0]
 802b246:	6051      	str	r1, [r2, #4]
 802b248:	6921      	ldr	r1, [r4, #16]
 802b24a:	3108      	adds	r1, #8
 802b24c:	6121      	str	r1, [r4, #16]
 802b24e:	68a1      	ldr	r1, [r4, #8]
 802b250:	3101      	adds	r1, #1
 802b252:	60a1      	str	r1, [r4, #8]
 802b254:	e7bd      	b.n	802b1d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b256:	f104 0214 	add.w	r2, r4, #20
 802b25a:	ca03      	ldmia	r2!, {r0, r1}
 802b25c:	6926      	ldr	r6, [r4, #16]
 802b25e:	6030      	str	r0, [r6, #0]
 802b260:	6071      	str	r1, [r6, #4]
 802b262:	6922      	ldr	r2, [r4, #16]
 802b264:	3208      	adds	r2, #8
 802b266:	6122      	str	r2, [r4, #16]
 802b268:	68a2      	ldr	r2, [r4, #8]
 802b26a:	3201      	adds	r2, #1
 802b26c:	60a2      	str	r2, [r4, #8]
 802b26e:	e5c6      	b.n	802adfe <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802b270:	f104 0314 	add.w	r3, r4, #20
 802b274:	cb03      	ldmia	r3!, {r0, r1}
 802b276:	6926      	ldr	r6, [r4, #16]
 802b278:	6030      	str	r0, [r6, #0]
 802b27a:	6071      	str	r1, [r6, #4]
 802b27c:	6923      	ldr	r3, [r4, #16]
 802b27e:	3308      	adds	r3, #8
 802b280:	6123      	str	r3, [r4, #16]
 802b282:	68a3      	ldr	r3, [r4, #8]
 802b284:	3301      	adds	r3, #1
 802b286:	60a3      	str	r3, [r4, #8]
 802b288:	e5ee      	b.n	802ae68 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802b28a:	9b01      	ldr	r3, [sp, #4]
 802b28c:	8b20      	ldrh	r0, [r4, #24]
 802b28e:	8b66      	ldrh	r6, [r4, #26]
 802b290:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802b294:	f003 021f 	and.w	r2, r3, #31
 802b298:	9b04      	ldr	r3, [sp, #16]
 802b29a:	f003 031f 	and.w	r3, r3, #31
 802b29e:	9305      	str	r3, [sp, #20]
 802b2a0:	9b03      	ldr	r3, [sp, #12]
 802b2a2:	45dc      	cmp	ip, fp
 802b2a4:	eba3 050e 	sub.w	r5, r3, lr
 802b2a8:	d108      	bne.n	802b2bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa98>
 802b2aa:	9b05      	ldr	r3, [sp, #20]
 802b2ac:	441a      	add	r2, r3
 802b2ae:	4428      	add	r0, r5
 802b2b0:	fb05 6502 	mla	r5, r5, r2, r6
 802b2b4:	8320      	strh	r0, [r4, #24]
 802b2b6:	8365      	strh	r5, [r4, #26]
 802b2b8:	f7ff bbe7 	b.w	802aa8a <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802b2bc:	9b04      	ldr	r3, [sp, #16]
 802b2be:	9901      	ldr	r1, [sp, #4]
 802b2c0:	1a5b      	subs	r3, r3, r1
 802b2c2:	9300      	str	r3, [sp, #0]
 802b2c4:	f100 809f 	bmi.w	802b406 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe2>
 802b2c8:	f1c2 0120 	rsb	r1, r2, #32
 802b2cc:	434d      	muls	r5, r1
 802b2ce:	2101      	movs	r1, #1
 802b2d0:	9102      	str	r1, [sp, #8]
 802b2d2:	2120      	movs	r1, #32
 802b2d4:	9b00      	ldr	r3, [sp, #0]
 802b2d6:	9101      	str	r1, [sp, #4]
 802b2d8:	fb95 f7f3 	sdiv	r7, r5, r3
 802b2dc:	9901      	ldr	r1, [sp, #4]
 802b2de:	fb03 5517 	mls	r5, r3, r7, r5
 802b2e2:	2d00      	cmp	r5, #0
 802b2e4:	bfb8      	it	lt
 802b2e6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802b2ea:	440a      	add	r2, r1
 802b2ec:	fb07 6202 	mla	r2, r7, r2, r6
 802b2f0:	b211      	sxth	r1, r2
 802b2f2:	9a02      	ldr	r2, [sp, #8]
 802b2f4:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802b2f8:	8361      	strh	r1, [r4, #26]
 802b2fa:	4494      	add	ip, r2
 802b2fc:	fa0f f289 	sxth.w	r2, r9
 802b300:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802b304:	bfb8      	it	lt
 802b306:	18ed      	addlt	r5, r5, r3
 802b308:	fa0f f88c 	sxth.w	r8, ip
 802b30c:	0413      	lsls	r3, r2, #16
 802b30e:	4438      	add	r0, r7
 802b310:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802b314:	eb08 0a03 	add.w	sl, r8, r3
 802b318:	b200      	sxth	r0, r0
 802b31a:	45d1      	cmp	r9, sl
 802b31c:	8320      	strh	r0, [r4, #24]
 802b31e:	9304      	str	r3, [sp, #16]
 802b320:	f43f ab33 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b324:	ea50 0301 	orrs.w	r3, r0, r1
 802b328:	d00b      	beq.n	802b342 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b32a:	2e00      	cmp	r6, #0
 802b32c:	db09      	blt.n	802b342 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b32e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b330:	428e      	cmp	r6, r1
 802b332:	da06      	bge.n	802b342 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b334:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b338:	4288      	cmp	r0, r1
 802b33a:	d36d      	bcc.n	802b418 <_ZN8touchgfx7Outline10renderLineEiiii+0xbf4>
 802b33c:	2101      	movs	r1, #1
 802b33e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802b342:	2100      	movs	r1, #0
 802b344:	45e3      	cmp	fp, ip
 802b346:	f8a4 8014 	strh.w	r8, [r4, #20]
 802b34a:	82e2      	strh	r2, [r4, #22]
 802b34c:	8321      	strh	r1, [r4, #24]
 802b34e:	8361      	strh	r1, [r4, #26]
 802b350:	44be      	add	lr, r7
 802b352:	d049      	beq.n	802b3e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc4>
 802b354:	9b03      	ldr	r3, [sp, #12]
 802b356:	eba3 060e 	sub.w	r6, r3, lr
 802b35a:	443e      	add	r6, r7
 802b35c:	9b00      	ldr	r3, [sp, #0]
 802b35e:	0176      	lsls	r6, r6, #5
 802b360:	fb96 f7f3 	sdiv	r7, r6, r3
 802b364:	fb03 6617 	mls	r6, r3, r7, r6
 802b368:	428e      	cmp	r6, r1
 802b36a:	bfb8      	it	lt
 802b36c:	18f6      	addlt	r6, r6, r3
 802b36e:	9b00      	ldr	r3, [sp, #0]
 802b370:	bfb8      	it	lt
 802b372:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802b376:	1aed      	subs	r5, r5, r3
 802b378:	1c7b      	adds	r3, r7, #1
 802b37a:	9307      	str	r3, [sp, #28]
 802b37c:	f04f 0900 	mov.w	r9, #0
 802b380:	19ad      	adds	r5, r5, r6
 802b382:	bf5e      	ittt	pl
 802b384:	9b00      	ldrpl	r3, [sp, #0]
 802b386:	9807      	ldrpl	r0, [sp, #28]
 802b388:	1aed      	subpl	r5, r5, r3
 802b38a:	9b02      	ldr	r3, [sp, #8]
 802b38c:	bf48      	it	mi
 802b38e:	4638      	movmi	r0, r7
 802b390:	fa0f f880 	sxth.w	r8, r0
 802b394:	0141      	lsls	r1, r0, #5
 802b396:	449c      	add	ip, r3
 802b398:	4486      	add	lr, r0
 802b39a:	9b04      	ldr	r3, [sp, #16]
 802b39c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802b3a0:	f8a4 8018 	strh.w	r8, [r4, #24]
 802b3a4:	fa0f fa8c 	sxth.w	sl, ip
 802b3a8:	4418      	add	r0, r3
 802b3aa:	4453      	add	r3, sl
 802b3ac:	b209      	sxth	r1, r1
 802b3ae:	4298      	cmp	r0, r3
 802b3b0:	8361      	strh	r1, [r4, #26]
 802b3b2:	f43f aaea 	beq.w	802a98a <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b3b6:	ea58 0301 	orrs.w	r3, r8, r1
 802b3ba:	d00c      	beq.n	802b3d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b3bc:	2a00      	cmp	r2, #0
 802b3be:	db0a      	blt.n	802b3d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b3c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b3c2:	428a      	cmp	r2, r1
 802b3c4:	da07      	bge.n	802b3d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b3c6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b3ca:	4288      	cmp	r0, r1
 802b3cc:	d334      	bcc.n	802b438 <_ZN8touchgfx7Outline10renderLineEiiii+0xc14>
 802b3ce:	f04f 0301 	mov.w	r3, #1
 802b3d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b3d6:	45e3      	cmp	fp, ip
 802b3d8:	f8a4 a014 	strh.w	sl, [r4, #20]
 802b3dc:	82e2      	strh	r2, [r4, #22]
 802b3de:	f8a4 9018 	strh.w	r9, [r4, #24]
 802b3e2:	f8a4 901a 	strh.w	r9, [r4, #26]
 802b3e6:	d1cb      	bne.n	802b380 <_ZN8touchgfx7Outline10renderLineEiiii+0xb5c>
 802b3e8:	9b03      	ldr	r3, [sp, #12]
 802b3ea:	9e05      	ldr	r6, [sp, #20]
 802b3ec:	eba3 0e0e 	sub.w	lr, r3, lr
 802b3f0:	9b01      	ldr	r3, [sp, #4]
 802b3f2:	f8a4 e018 	strh.w	lr, [r4, #24]
 802b3f6:	3620      	adds	r6, #32
 802b3f8:	1af6      	subs	r6, r6, r3
 802b3fa:	fb0e fe06 	mul.w	lr, lr, r6
 802b3fe:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802b402:	f7ff bb42 	b.w	802aa8a <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802b406:	9b00      	ldr	r3, [sp, #0]
 802b408:	f04f 31ff 	mov.w	r1, #4294967295
 802b40c:	425b      	negs	r3, r3
 802b40e:	9102      	str	r1, [sp, #8]
 802b410:	4355      	muls	r5, r2
 802b412:	9300      	str	r3, [sp, #0]
 802b414:	2100      	movs	r1, #0
 802b416:	e75d      	b.n	802b2d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xab0>
 802b418:	f104 0614 	add.w	r6, r4, #20
 802b41c:	ce03      	ldmia	r6!, {r0, r1}
 802b41e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802b422:	f8c9 0000 	str.w	r0, [r9]
 802b426:	f8c9 1004 	str.w	r1, [r9, #4]
 802b42a:	6921      	ldr	r1, [r4, #16]
 802b42c:	3108      	adds	r1, #8
 802b42e:	6121      	str	r1, [r4, #16]
 802b430:	68a1      	ldr	r1, [r4, #8]
 802b432:	3101      	adds	r1, #1
 802b434:	60a1      	str	r1, [r4, #8]
 802b436:	e784      	b.n	802b342 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b438:	f104 0814 	add.w	r8, r4, #20
 802b43c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802b440:	6923      	ldr	r3, [r4, #16]
 802b442:	9306      	str	r3, [sp, #24]
 802b444:	6018      	str	r0, [r3, #0]
 802b446:	6059      	str	r1, [r3, #4]
 802b448:	6921      	ldr	r1, [r4, #16]
 802b44a:	3108      	adds	r1, #8
 802b44c:	6121      	str	r1, [r4, #16]
 802b44e:	68a1      	ldr	r1, [r4, #8]
 802b450:	3101      	adds	r1, #1
 802b452:	60a1      	str	r1, [r4, #8]
 802b454:	e7bf      	b.n	802b3d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b456:	bf00      	nop

0802b458 <_ZN8touchgfx7Outline6lineToEii>:
 802b458:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b45a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b45c:	079b      	lsls	r3, r3, #30
 802b45e:	4604      	mov	r4, r0
 802b460:	460d      	mov	r5, r1
 802b462:	4616      	mov	r6, r2
 802b464:	d526      	bpl.n	802b4b4 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b466:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802b46a:	ea85 0001 	eor.w	r0, r5, r1
 802b46e:	ea86 0302 	eor.w	r3, r6, r2
 802b472:	4303      	orrs	r3, r0
 802b474:	d01e      	beq.n	802b4b4 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b476:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b478:	9600      	str	r6, [sp, #0]
 802b47a:	114b      	asrs	r3, r1, #5
 802b47c:	4283      	cmp	r3, r0
 802b47e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b480:	bfb8      	it	lt
 802b482:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b484:	3301      	adds	r3, #1
 802b486:	4283      	cmp	r3, r0
 802b488:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b48a:	bfc8      	it	gt
 802b48c:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b48e:	116b      	asrs	r3, r5, #5
 802b490:	4283      	cmp	r3, r0
 802b492:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b494:	bfb8      	it	lt
 802b496:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b498:	3301      	adds	r3, #1
 802b49a:	4283      	cmp	r3, r0
 802b49c:	bfc8      	it	gt
 802b49e:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b4a0:	4620      	mov	r0, r4
 802b4a2:	462b      	mov	r3, r5
 802b4a4:	f7ff f9be 	bl	802a824 <_ZN8touchgfx7Outline10renderLineEiiii>
 802b4a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b4aa:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802b4ae:	f043 0301 	orr.w	r3, r3, #1
 802b4b2:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b4b4:	b002      	add	sp, #8
 802b4b6:	bd70      	pop	{r4, r5, r6, pc}

0802b4b8 <_ZN8touchgfx7Outline6moveToEii>:
 802b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b4ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b4bc:	4615      	mov	r5, r2
 802b4be:	079a      	lsls	r2, r3, #30
 802b4c0:	4604      	mov	r4, r0
 802b4c2:	460e      	mov	r6, r1
 802b4c4:	d401      	bmi.n	802b4ca <_ZN8touchgfx7Outline6moveToEii+0x12>
 802b4c6:	f7ff f967 	bl	802a798 <_ZN8touchgfx7Outline5resetEv>
 802b4ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b4cc:	07db      	lsls	r3, r3, #31
 802b4ce:	d504      	bpl.n	802b4da <_ZN8touchgfx7Outline6moveToEii+0x22>
 802b4d0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802b4d4:	4620      	mov	r0, r4
 802b4d6:	f7ff ffbf 	bl	802b458 <_ZN8touchgfx7Outline6lineToEii>
 802b4da:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b4de:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802b4e2:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802b4e6:	f345 174f 	sbfx	r7, r5, #5, #16
 802b4ea:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802b4ee:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802b4f2:	428a      	cmp	r2, r1
 802b4f4:	d015      	beq.n	802b522 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802b4f6:	8b61      	ldrh	r1, [r4, #26]
 802b4f8:	8b22      	ldrh	r2, [r4, #24]
 802b4fa:	430a      	orrs	r2, r1
 802b4fc:	d00b      	beq.n	802b516 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b4fe:	2b00      	cmp	r3, #0
 802b500:	db09      	blt.n	802b516 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b502:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b504:	4293      	cmp	r3, r2
 802b506:	da06      	bge.n	802b516 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b508:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802b50c:	429a      	cmp	r2, r3
 802b50e:	d30d      	bcc.n	802b52c <_ZN8touchgfx7Outline6moveToEii+0x74>
 802b510:	2301      	movs	r3, #1
 802b512:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b516:	2300      	movs	r3, #0
 802b518:	f8a4 c014 	strh.w	ip, [r4, #20]
 802b51c:	82e7      	strh	r7, [r4, #22]
 802b51e:	8323      	strh	r3, [r4, #24]
 802b520:	8363      	strh	r3, [r4, #26]
 802b522:	61e6      	str	r6, [r4, #28]
 802b524:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802b528:	62a5      	str	r5, [r4, #40]	; 0x28
 802b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b52c:	f104 0314 	add.w	r3, r4, #20
 802b530:	cb03      	ldmia	r3!, {r0, r1}
 802b532:	6922      	ldr	r2, [r4, #16]
 802b534:	6010      	str	r0, [r2, #0]
 802b536:	6051      	str	r1, [r2, #4]
 802b538:	6923      	ldr	r3, [r4, #16]
 802b53a:	3308      	adds	r3, #8
 802b53c:	6123      	str	r3, [r4, #16]
 802b53e:	68a3      	ldr	r3, [r4, #8]
 802b540:	3301      	adds	r3, #1
 802b542:	60a3      	str	r3, [r4, #8]
 802b544:	e7e7      	b.n	802b516 <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802b546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802b546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b54a:	b0d1      	sub	sp, #324	; 0x144
 802b54c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802b550:	466c      	mov	r4, sp
 802b552:	1a0d      	subs	r5, r1, r0
 802b554:	2d48      	cmp	r5, #72	; 0x48
 802b556:	f100 0208 	add.w	r2, r0, #8
 802b55a:	f340 80bb 	ble.w	802b6d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802b55e:	112d      	asrs	r5, r5, #4
 802b560:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802b564:	f9b0 8000 	ldrsh.w	r8, [r0]
 802b568:	681e      	ldr	r6, [r3, #0]
 802b56a:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802b56e:	6006      	str	r6, [r0, #0]
 802b570:	685e      	ldr	r6, [r3, #4]
 802b572:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802b576:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802b57a:	6046      	str	r6, [r0, #4]
 802b57c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802b580:	f8a3 e002 	strh.w	lr, [r3, #2]
 802b584:	f8a3 c004 	strh.w	ip, [r3, #4]
 802b588:	80df      	strh	r7, [r3, #6]
 802b58a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b58e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802b592:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802b596:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b59a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b59e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b5a2:	4565      	cmp	r5, ip
 802b5a4:	f1a1 0308 	sub.w	r3, r1, #8
 802b5a8:	da0f      	bge.n	802b5ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802b5aa:	681d      	ldr	r5, [r3, #0]
 802b5ac:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802b5b0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802b5b4:	6015      	str	r5, [r2, #0]
 802b5b6:	685d      	ldr	r5, [r3, #4]
 802b5b8:	6055      	str	r5, [r2, #4]
 802b5ba:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b5be:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b5c2:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b5c6:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b5ca:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b5ce:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b5d2:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802b5d6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802b5da:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b5de:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b5e2:	45ac      	cmp	ip, r5
 802b5e4:	da0d      	bge.n	802b602 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802b5e6:	6815      	ldr	r5, [r2, #0]
 802b5e8:	6005      	str	r5, [r0, #0]
 802b5ea:	6855      	ldr	r5, [r2, #4]
 802b5ec:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b5f0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b5f4:	8107      	strh	r7, [r0, #8]
 802b5f6:	6045      	str	r5, [r0, #4]
 802b5f8:	8146      	strh	r6, [r0, #10]
 802b5fa:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802b5fe:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802b602:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b606:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b60a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b60e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b612:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b616:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b61a:	4565      	cmp	r5, ip
 802b61c:	da0f      	bge.n	802b63e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b61e:	681d      	ldr	r5, [r3, #0]
 802b620:	6005      	str	r5, [r0, #0]
 802b622:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b626:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b62a:	685d      	ldr	r5, [r3, #4]
 802b62c:	6045      	str	r5, [r0, #4]
 802b62e:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b632:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b636:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b63a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b63e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802b642:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802b646:	f9b0 e000 	ldrsh.w	lr, [r0]
 802b64a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802b64e:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802b652:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802b656:	f102 0508 	add.w	r5, r2, #8
 802b65a:	4556      	cmp	r6, sl
 802b65c:	462f      	mov	r7, r5
 802b65e:	db18      	blt.n	802b692 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802b660:	3b08      	subs	r3, #8
 802b662:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802b666:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b66a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802b66e:	45b2      	cmp	sl, r6
 802b670:	dbf6      	blt.n	802b660 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802b672:	42ab      	cmp	r3, r5
 802b674:	681e      	ldr	r6, [r3, #0]
 802b676:	d30e      	bcc.n	802b696 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802b678:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802b67c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802b680:	602e      	str	r6, [r5, #0]
 802b682:	685e      	ldr	r6, [r3, #4]
 802b684:	606e      	str	r6, [r5, #4]
 802b686:	f8a3 9000 	strh.w	r9, [r3]
 802b68a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802b68e:	809f      	strh	r7, [r3, #4]
 802b690:	80da      	strh	r2, [r3, #6]
 802b692:	462a      	mov	r2, r5
 802b694:	e7d3      	b.n	802b63e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b696:	6006      	str	r6, [r0, #0]
 802b698:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802b69c:	685e      	ldr	r6, [r3, #4]
 802b69e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802b6a2:	6046      	str	r6, [r0, #4]
 802b6a4:	80da      	strh	r2, [r3, #6]
 802b6a6:	1b4a      	subs	r2, r1, r5
 802b6a8:	1a1e      	subs	r6, r3, r0
 802b6aa:	10d2      	asrs	r2, r2, #3
 802b6ac:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802b6b0:	bfb8      	it	lt
 802b6b2:	e9c4 0300 	strdlt	r0, r3, [r4]
 802b6b6:	f8a3 e000 	strh.w	lr, [r3]
 802b6ba:	f8a3 c002 	strh.w	ip, [r3, #2]
 802b6be:	f8a3 8004 	strh.w	r8, [r3, #4]
 802b6c2:	bfaa      	itet	ge
 802b6c4:	4607      	movge	r7, r0
 802b6c6:	460b      	movlt	r3, r1
 802b6c8:	e9c4 5100 	strdge	r5, r1, [r4]
 802b6cc:	4638      	mov	r0, r7
 802b6ce:	3408      	adds	r4, #8
 802b6d0:	4619      	mov	r1, r3
 802b6d2:	e73e      	b.n	802b552 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b6d4:	4291      	cmp	r1, r2
 802b6d6:	d926      	bls.n	802b726 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 802b6d8:	f1a2 0310 	sub.w	r3, r2, #16
 802b6dc:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802b6e0:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802b6e4:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802b6e8:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802b6ec:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802b6f0:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b6f4:	42ae      	cmp	r6, r5
 802b6f6:	da14      	bge.n	802b722 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802b6f8:	461d      	mov	r5, r3
 802b6fa:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802b6fe:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802b702:	611e      	str	r6, [r3, #16]
 802b704:	686e      	ldr	r6, [r5, #4]
 802b706:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802b70a:	f8a3 c008 	strh.w	ip, [r3, #8]
 802b70e:	42a8      	cmp	r0, r5
 802b710:	615e      	str	r6, [r3, #20]
 802b712:	815f      	strh	r7, [r3, #10]
 802b714:	f8a3 800c 	strh.w	r8, [r3, #12]
 802b718:	f8a3 e00e 	strh.w	lr, [r3, #14]
 802b71c:	f1a3 0308 	sub.w	r3, r3, #8
 802b720:	d1dc      	bne.n	802b6dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 802b722:	3208      	adds	r2, #8
 802b724:	e7d6      	b.n	802b6d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802b726:	466b      	mov	r3, sp
 802b728:	429c      	cmp	r4, r3
 802b72a:	d903      	bls.n	802b734 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802b72c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802b730:	3c08      	subs	r4, #8
 802b732:	e70e      	b.n	802b552 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b734:	b051      	add	sp, #324	; 0x144
 802b736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b73a <_ZN8touchgfx7Outline9sortCellsEv>:
 802b73a:	6881      	ldr	r1, [r0, #8]
 802b73c:	b111      	cbz	r1, 802b744 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802b73e:	68c0      	ldr	r0, [r0, #12]
 802b740:	f7ff bf01 	b.w	802b546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802b744:	4770      	bx	lr

0802b746 <_ZN8touchgfx7Outline8getCellsEv>:
 802b746:	b510      	push	{r4, lr}
 802b748:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b74a:	07da      	lsls	r2, r3, #31
 802b74c:	4604      	mov	r4, r0
 802b74e:	d507      	bpl.n	802b760 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802b750:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802b754:	f7ff fe80 	bl	802b458 <_ZN8touchgfx7Outline6lineToEii>
 802b758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b75a:	f023 0301 	bic.w	r3, r3, #1
 802b75e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b762:	079b      	lsls	r3, r3, #30
 802b764:	d51a      	bpl.n	802b79c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802b766:	8b62      	ldrh	r2, [r4, #26]
 802b768:	8b23      	ldrh	r3, [r4, #24]
 802b76a:	4313      	orrs	r3, r2
 802b76c:	d00d      	beq.n	802b78a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b76e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b772:	2b00      	cmp	r3, #0
 802b774:	db09      	blt.n	802b78a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b776:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b778:	4293      	cmp	r3, r2
 802b77a:	da06      	bge.n	802b78a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b77c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802b780:	429a      	cmp	r2, r3
 802b782:	d80d      	bhi.n	802b7a0 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802b784:	2301      	movs	r3, #1
 802b786:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b78a:	68a0      	ldr	r0, [r4, #8]
 802b78c:	b138      	cbz	r0, 802b79e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802b78e:	4620      	mov	r0, r4
 802b790:	f7ff ffd3 	bl	802b73a <_ZN8touchgfx7Outline9sortCellsEv>
 802b794:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b796:	f023 0302 	bic.w	r3, r3, #2
 802b79a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b79c:	68e0      	ldr	r0, [r4, #12]
 802b79e:	bd10      	pop	{r4, pc}
 802b7a0:	f104 0314 	add.w	r3, r4, #20
 802b7a4:	cb03      	ldmia	r3!, {r0, r1}
 802b7a6:	6922      	ldr	r2, [r4, #16]
 802b7a8:	6010      	str	r0, [r2, #0]
 802b7aa:	6051      	str	r1, [r2, #4]
 802b7ac:	6923      	ldr	r3, [r4, #16]
 802b7ae:	3308      	adds	r3, #8
 802b7b0:	6123      	str	r3, [r4, #16]
 802b7b2:	68a3      	ldr	r3, [r4, #8]
 802b7b4:	3301      	adds	r3, #1
 802b7b6:	60a3      	str	r3, [r4, #8]
 802b7b8:	e7e7      	b.n	802b78a <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

0802b7bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 802b7bc:	b538      	push	{r3, r4, r5, lr}
 802b7be:	4c2b      	ldr	r4, [pc, #172]	; (802b86c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 802b7c0:	4b2b      	ldr	r3, [pc, #172]	; (802b870 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 802b7c2:	6821      	ldr	r1, [r4, #0]
 802b7c4:	681a      	ldr	r2, [r3, #0]
 802b7c6:	4d2b      	ldr	r5, [pc, #172]	; (802b874 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802b7c8:	4281      	cmp	r1, r0
 802b7ca:	492b      	ldr	r1, [pc, #172]	; (802b878 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 802b7cc:	d108      	bne.n	802b7e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802b7ce:	682b      	ldr	r3, [r5, #0]
 802b7d0:	4293      	cmp	r3, r2
 802b7d2:	d105      	bne.n	802b7e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802b7d4:	6808      	ldr	r0, [r1, #0]
 802b7d6:	280f      	cmp	r0, #15
 802b7d8:	bf94      	ite	ls
 802b7da:	2000      	movls	r0, #0
 802b7dc:	2001      	movhi	r0, #1
 802b7de:	bd38      	pop	{r3, r4, r5, pc}
 802b7e0:	4b26      	ldr	r3, [pc, #152]	; (802b87c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 802b7e2:	6020      	str	r0, [r4, #0]
 802b7e4:	681b      	ldr	r3, [r3, #0]
 802b7e6:	602a      	str	r2, [r5, #0]
 802b7e8:	4298      	cmp	r0, r3
 802b7ea:	d905      	bls.n	802b7f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 802b7ec:	4b24      	ldr	r3, [pc, #144]	; (802b880 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802b7ee:	4a25      	ldr	r2, [pc, #148]	; (802b884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b7f0:	2137      	movs	r1, #55	; 0x37
 802b7f2:	4825      	ldr	r0, [pc, #148]	; (802b888 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 802b7f4:	f000 ff32 	bl	802c65c <__assert_func>
 802b7f8:	f010 0403 	ands.w	r4, r0, #3
 802b7fc:	bf1f      	itttt	ne
 802b7fe:	f1c4 0504 	rsbne	r5, r4, #4
 802b802:	3b04      	subne	r3, #4
 802b804:	1952      	addne	r2, r2, r5
 802b806:	191b      	addne	r3, r3, r4
 802b808:	4402      	add	r2, r0
 802b80a:	1a1b      	subs	r3, r3, r0
 802b80c:	3001      	adds	r0, #1
 802b80e:	f020 0401 	bic.w	r4, r0, #1
 802b812:	4d1e      	ldr	r5, [pc, #120]	; (802b88c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802b814:	42a3      	cmp	r3, r4
 802b816:	602a      	str	r2, [r5, #0]
 802b818:	d203      	bcs.n	802b822 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802b81a:	4b19      	ldr	r3, [pc, #100]	; (802b880 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802b81c:	4a19      	ldr	r2, [pc, #100]	; (802b884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b81e:	214a      	movs	r1, #74	; 0x4a
 802b820:	e7e7      	b.n	802b7f2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802b822:	f010 0002 	ands.w	r0, r0, #2
 802b826:	bf1f      	itttt	ne
 802b828:	f1c0 0504 	rsbne	r5, r0, #4
 802b82c:	1952      	addne	r2, r2, r5
 802b82e:	1f05      	subne	r5, r0, #4
 802b830:	195b      	addne	r3, r3, r5
 802b832:	1b1b      	subs	r3, r3, r4
 802b834:	4d16      	ldr	r5, [pc, #88]	; (802b890 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 802b836:	4422      	add	r2, r4
 802b838:	429c      	cmp	r4, r3
 802b83a:	602a      	str	r2, [r5, #0]
 802b83c:	d903      	bls.n	802b846 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 802b83e:	4b10      	ldr	r3, [pc, #64]	; (802b880 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802b840:	4a10      	ldr	r2, [pc, #64]	; (802b884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b842:	215d      	movs	r1, #93	; 0x5d
 802b844:	e7d5      	b.n	802b7f2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802b846:	b120      	cbz	r0, 802b852 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 802b848:	f1c0 0504 	rsb	r5, r0, #4
 802b84c:	3804      	subs	r0, #4
 802b84e:	442a      	add	r2, r5
 802b850:	4403      	add	r3, r0
 802b852:	1b1b      	subs	r3, r3, r4
 802b854:	480f      	ldr	r0, [pc, #60]	; (802b894 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 802b856:	600b      	str	r3, [r1, #0]
 802b858:	4422      	add	r2, r4
 802b85a:	2b0f      	cmp	r3, #15
 802b85c:	6002      	str	r2, [r0, #0]
 802b85e:	d803      	bhi.n	802b868 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 802b860:	4b0d      	ldr	r3, [pc, #52]	; (802b898 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 802b862:	4a08      	ldr	r2, [pc, #32]	; (802b884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b864:	2170      	movs	r1, #112	; 0x70
 802b866:	e7c4      	b.n	802b7f2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802b868:	2001      	movs	r0, #1
 802b86a:	e7b8      	b.n	802b7de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 802b86c:	20006804 	.word	0x20006804
 802b870:	200067fc 	.word	0x200067fc
 802b874:	2000680c 	.word	0x2000680c
 802b878:	20006814 	.word	0x20006814
 802b87c:	20006810 	.word	0x20006810
 802b880:	08031fa8 	.word	0x08031fa8
 802b884:	08032070 	.word	0x08032070
 802b888:	08031fe1 	.word	0x08031fe1
 802b88c:	20006818 	.word	0x20006818
 802b890:	20006808 	.word	0x20006808
 802b894:	20006800 	.word	0x20006800
 802b898:	0803202b 	.word	0x0803202b

0802b89c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 802b89c:	4b04      	ldr	r3, [pc, #16]	; (802b8b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 802b89e:	6818      	ldr	r0, [r3, #0]
 802b8a0:	b120      	cbz	r0, 802b8ac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 802b8a2:	4b04      	ldr	r3, [pc, #16]	; (802b8b4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 802b8a4:	6818      	ldr	r0, [r3, #0]
 802b8a6:	3000      	adds	r0, #0
 802b8a8:	bf18      	it	ne
 802b8aa:	2001      	movne	r0, #1
 802b8ac:	4770      	bx	lr
 802b8ae:	bf00      	nop
 802b8b0:	200067fc 	.word	0x200067fc
 802b8b4:	20006810 	.word	0x20006810

0802b8b8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 802b8b8:	4b01      	ldr	r3, [pc, #4]	; (802b8c0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 802b8ba:	6818      	ldr	r0, [r3, #0]
 802b8bc:	4770      	bx	lr
 802b8be:	bf00      	nop
 802b8c0:	20006804 	.word	0x20006804

0802b8c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 802b8c4:	4b01      	ldr	r3, [pc, #4]	; (802b8cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 802b8c6:	6818      	ldr	r0, [r3, #0]
 802b8c8:	4770      	bx	lr
 802b8ca:	bf00      	nop
 802b8cc:	2000680c 	.word	0x2000680c

0802b8d0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 802b8d0:	4b01      	ldr	r3, [pc, #4]	; (802b8d8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 802b8d2:	6818      	ldr	r0, [r3, #0]
 802b8d4:	4770      	bx	lr
 802b8d6:	bf00      	nop
 802b8d8:	20006818 	.word	0x20006818

0802b8dc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 802b8dc:	4b01      	ldr	r3, [pc, #4]	; (802b8e4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 802b8de:	6818      	ldr	r0, [r3, #0]
 802b8e0:	4770      	bx	lr
 802b8e2:	bf00      	nop
 802b8e4:	20006808 	.word	0x20006808

0802b8e8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 802b8e8:	4b01      	ldr	r3, [pc, #4]	; (802b8f0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 802b8ea:	6818      	ldr	r0, [r3, #0]
 802b8ec:	4770      	bx	lr
 802b8ee:	bf00      	nop
 802b8f0:	20006800 	.word	0x20006800

0802b8f4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 802b8f4:	4b01      	ldr	r3, [pc, #4]	; (802b8fc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 802b8f6:	6818      	ldr	r0, [r3, #0]
 802b8f8:	4770      	bx	lr
 802b8fa:	bf00      	nop
 802b8fc:	20006814 	.word	0x20006814

0802b900 <_ZN8touchgfx8ScanlineD1Ev>:
 802b900:	4770      	bx	lr

0802b902 <_ZN8touchgfx8ScanlineD0Ev>:
 802b902:	b510      	push	{r4, lr}
 802b904:	2124      	movs	r1, #36	; 0x24
 802b906:	4604      	mov	r4, r0
 802b908:	f000 f889 	bl	802ba1e <_ZdlPvj>
 802b90c:	4620      	mov	r0, r4
 802b90e:	bd10      	pop	{r4, pc}

0802b910 <_ZN8touchgfx8Scanline5resetEv>:
 802b910:	b510      	push	{r4, lr}
 802b912:	4604      	mov	r4, r0
 802b914:	f7ff ffd6 	bl	802b8c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802b918:	61a0      	str	r0, [r4, #24]
 802b91a:	f7ff ffd9 	bl	802b8d0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802b91e:	61e0      	str	r0, [r4, #28]
 802b920:	f7ff ffdc 	bl	802b8dc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802b924:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b928:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802b92c:	69e3      	ldr	r3, [r4, #28]
 802b92e:	6123      	str	r3, [r4, #16]
 802b930:	2300      	movs	r3, #0
 802b932:	6220      	str	r0, [r4, #32]
 802b934:	6160      	str	r0, [r4, #20]
 802b936:	60e3      	str	r3, [r4, #12]
 802b938:	bd10      	pop	{r4, pc}
	...

0802b93c <_ZN8touchgfx8ScanlineC1Ev>:
 802b93c:	b510      	push	{r4, lr}
 802b93e:	4b09      	ldr	r3, [pc, #36]	; (802b964 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802b940:	6003      	str	r3, [r0, #0]
 802b942:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b946:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802b94a:	2300      	movs	r3, #0
 802b94c:	4604      	mov	r4, r0
 802b94e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b952:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802b956:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802b95a:	f7ff ffd9 	bl	802b910 <_ZN8touchgfx8Scanline5resetEv>
 802b95e:	4620      	mov	r0, r4
 802b960:	bd10      	pop	{r4, pc}
 802b962:	bf00      	nop
 802b964:	080320c4 	.word	0x080320c4

0802b968 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b96c:	1e0c      	subs	r4, r1, #0
 802b96e:	4605      	mov	r5, r0
 802b970:	4617      	mov	r7, r2
 802b972:	461e      	mov	r6, r3
 802b974:	da03      	bge.n	802b97e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802b976:	4426      	add	r6, r4
 802b978:	2e01      	cmp	r6, #1
 802b97a:	d421      	bmi.n	802b9c0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b97c:	2400      	movs	r4, #0
 802b97e:	f7ff ff9b 	bl	802b8b8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b982:	42a0      	cmp	r0, r4
 802b984:	dd1c      	ble.n	802b9c0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b986:	f7ff ff97 	bl	802b8b8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b98a:	eb04 0806 	add.w	r8, r4, r6
 802b98e:	4580      	cmp	r8, r0
 802b990:	d902      	bls.n	802b998 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802b992:	f7ff ff91 	bl	802b8b8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b996:	1b06      	subs	r6, r0, r4
 802b998:	69a8      	ldr	r0, [r5, #24]
 802b99a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802b99e:	4632      	mov	r2, r6
 802b9a0:	4420      	add	r0, r4
 802b9a2:	f7f0 f989 	bl	801bcb8 <_ZN8touchgfx6memsetEPvhm>
 802b9a6:	686b      	ldr	r3, [r5, #4]
 802b9a8:	3301      	adds	r3, #1
 802b9aa:	42a3      	cmp	r3, r4
 802b9ac:	b2b2      	uxth	r2, r6
 802b9ae:	696b      	ldr	r3, [r5, #20]
 802b9b0:	d108      	bne.n	802b9c4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802b9b2:	8819      	ldrh	r1, [r3, #0]
 802b9b4:	440a      	add	r2, r1
 802b9b6:	801a      	strh	r2, [r3, #0]
 802b9b8:	3c01      	subs	r4, #1
 802b9ba:	4434      	add	r4, r6
 802b9bc:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b9c4:	1c99      	adds	r1, r3, #2
 802b9c6:	6169      	str	r1, [r5, #20]
 802b9c8:	805a      	strh	r2, [r3, #2]
 802b9ca:	692b      	ldr	r3, [r5, #16]
 802b9cc:	1c9a      	adds	r2, r3, #2
 802b9ce:	612a      	str	r2, [r5, #16]
 802b9d0:	805c      	strh	r4, [r3, #2]
 802b9d2:	68eb      	ldr	r3, [r5, #12]
 802b9d4:	3301      	adds	r3, #1
 802b9d6:	60eb      	str	r3, [r5, #12]
 802b9d8:	e7ee      	b.n	802b9b8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802b9da <_ZN8touchgfx15RenderingBufferD1Ev>:
 802b9da:	4770      	bx	lr

0802b9dc <_ZN8touchgfx15RenderingBufferD0Ev>:
 802b9dc:	b510      	push	{r4, lr}
 802b9de:	2118      	movs	r1, #24
 802b9e0:	4604      	mov	r4, r0
 802b9e2:	f000 f81c 	bl	802ba1e <_ZdlPvj>
 802b9e6:	4620      	mov	r0, r4
 802b9e8:	bd10      	pop	{r4, pc}
	...

0802b9ec <_ZN8touchgfx15RenderingBufferC1Ev>:
 802b9ec:	4a04      	ldr	r2, [pc, #16]	; (802ba00 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802b9ee:	6002      	str	r2, [r0, #0]
 802b9f0:	2200      	movs	r2, #0
 802b9f2:	6042      	str	r2, [r0, #4]
 802b9f4:	7202      	strb	r2, [r0, #8]
 802b9f6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802b9fa:	6142      	str	r2, [r0, #20]
 802b9fc:	4770      	bx	lr
 802b9fe:	bf00      	nop
 802ba00:	080320d4 	.word	0x080320d4

0802ba04 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802ba04:	60c3      	str	r3, [r0, #12]
 802ba06:	9b00      	ldr	r3, [sp, #0]
 802ba08:	6103      	str	r3, [r0, #16]
 802ba0a:	9b01      	ldr	r3, [sp, #4]
 802ba0c:	6041      	str	r1, [r0, #4]
 802ba0e:	7202      	strb	r2, [r0, #8]
 802ba10:	6143      	str	r3, [r0, #20]
 802ba12:	4770      	bx	lr

0802ba14 <__aeabi_atexit>:
 802ba14:	460b      	mov	r3, r1
 802ba16:	4601      	mov	r1, r0
 802ba18:	4618      	mov	r0, r3
 802ba1a:	f000 be43 	b.w	802c6a4 <__cxa_atexit>

0802ba1e <_ZdlPvj>:
 802ba1e:	f000 b812 	b.w	802ba46 <_ZdlPv>

0802ba22 <__cxa_guard_acquire>:
 802ba22:	6803      	ldr	r3, [r0, #0]
 802ba24:	07db      	lsls	r3, r3, #31
 802ba26:	d406      	bmi.n	802ba36 <__cxa_guard_acquire+0x14>
 802ba28:	7843      	ldrb	r3, [r0, #1]
 802ba2a:	b103      	cbz	r3, 802ba2e <__cxa_guard_acquire+0xc>
 802ba2c:	deff      	udf	#255	; 0xff
 802ba2e:	2301      	movs	r3, #1
 802ba30:	7043      	strb	r3, [r0, #1]
 802ba32:	4618      	mov	r0, r3
 802ba34:	4770      	bx	lr
 802ba36:	2000      	movs	r0, #0
 802ba38:	4770      	bx	lr

0802ba3a <__cxa_guard_release>:
 802ba3a:	2301      	movs	r3, #1
 802ba3c:	6003      	str	r3, [r0, #0]
 802ba3e:	4770      	bx	lr

0802ba40 <__cxa_pure_virtual>:
 802ba40:	b508      	push	{r3, lr}
 802ba42:	f000 f80f 	bl	802ba64 <_ZSt9terminatev>

0802ba46 <_ZdlPv>:
 802ba46:	f000 be7f 	b.w	802c748 <free>

0802ba4a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802ba4a:	b508      	push	{r3, lr}
 802ba4c:	4780      	blx	r0
 802ba4e:	f000 fdfd 	bl	802c64c <abort>
	...

0802ba54 <_ZSt13get_terminatev>:
 802ba54:	4b02      	ldr	r3, [pc, #8]	; (802ba60 <_ZSt13get_terminatev+0xc>)
 802ba56:	6818      	ldr	r0, [r3, #0]
 802ba58:	f3bf 8f5b 	dmb	ish
 802ba5c:	4770      	bx	lr
 802ba5e:	bf00      	nop
 802ba60:	200000a4 	.word	0x200000a4

0802ba64 <_ZSt9terminatev>:
 802ba64:	b508      	push	{r3, lr}
 802ba66:	f7ff fff5 	bl	802ba54 <_ZSt13get_terminatev>
 802ba6a:	f7ff ffee 	bl	802ba4a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802ba70 <ceilf>:
 802ba70:	ee10 3a10 	vmov	r3, s0
 802ba74:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802ba78:	3a7f      	subs	r2, #127	; 0x7f
 802ba7a:	2a16      	cmp	r2, #22
 802ba7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802ba80:	dc2a      	bgt.n	802bad8 <ceilf+0x68>
 802ba82:	2a00      	cmp	r2, #0
 802ba84:	da11      	bge.n	802baaa <ceilf+0x3a>
 802ba86:	eddf 7a19 	vldr	s15, [pc, #100]	; 802baec <ceilf+0x7c>
 802ba8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802ba8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802ba92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba96:	dd05      	ble.n	802baa4 <ceilf+0x34>
 802ba98:	2b00      	cmp	r3, #0
 802ba9a:	db23      	blt.n	802bae4 <ceilf+0x74>
 802ba9c:	2900      	cmp	r1, #0
 802ba9e:	bf18      	it	ne
 802baa0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802baa4:	ee00 3a10 	vmov	s0, r3
 802baa8:	4770      	bx	lr
 802baaa:	4911      	ldr	r1, [pc, #68]	; (802baf0 <ceilf+0x80>)
 802baac:	4111      	asrs	r1, r2
 802baae:	420b      	tst	r3, r1
 802bab0:	d0fa      	beq.n	802baa8 <ceilf+0x38>
 802bab2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802baec <ceilf+0x7c>
 802bab6:	ee30 0a27 	vadd.f32	s0, s0, s15
 802baba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bac2:	ddef      	ble.n	802baa4 <ceilf+0x34>
 802bac4:	2b00      	cmp	r3, #0
 802bac6:	bfc2      	ittt	gt
 802bac8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802bacc:	fa40 f202 	asrgt.w	r2, r0, r2
 802bad0:	189b      	addgt	r3, r3, r2
 802bad2:	ea23 0301 	bic.w	r3, r3, r1
 802bad6:	e7e5      	b.n	802baa4 <ceilf+0x34>
 802bad8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802badc:	d3e4      	bcc.n	802baa8 <ceilf+0x38>
 802bade:	ee30 0a00 	vadd.f32	s0, s0, s0
 802bae2:	4770      	bx	lr
 802bae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802bae8:	e7dc      	b.n	802baa4 <ceilf+0x34>
 802baea:	bf00      	nop
 802baec:	7149f2ca 	.word	0x7149f2ca
 802baf0:	007fffff 	.word	0x007fffff

0802baf4 <cosf>:
 802baf4:	ee10 3a10 	vmov	r3, s0
 802baf8:	b507      	push	{r0, r1, r2, lr}
 802bafa:	4a1c      	ldr	r2, [pc, #112]	; (802bb6c <cosf+0x78>)
 802bafc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802bb00:	4293      	cmp	r3, r2
 802bb02:	dc04      	bgt.n	802bb0e <cosf+0x1a>
 802bb04:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802bb70 <cosf+0x7c>
 802bb08:	f000 f9f4 	bl	802bef4 <__kernel_cosf>
 802bb0c:	e004      	b.n	802bb18 <cosf+0x24>
 802bb0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802bb12:	db04      	blt.n	802bb1e <cosf+0x2a>
 802bb14:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bb18:	b003      	add	sp, #12
 802bb1a:	f85d fb04 	ldr.w	pc, [sp], #4
 802bb1e:	4668      	mov	r0, sp
 802bb20:	f000 f8ac 	bl	802bc7c <__ieee754_rem_pio2f>
 802bb24:	f000 0003 	and.w	r0, r0, #3
 802bb28:	2801      	cmp	r0, #1
 802bb2a:	d007      	beq.n	802bb3c <cosf+0x48>
 802bb2c:	2802      	cmp	r0, #2
 802bb2e:	d00e      	beq.n	802bb4e <cosf+0x5a>
 802bb30:	b9a0      	cbnz	r0, 802bb5c <cosf+0x68>
 802bb32:	eddd 0a01 	vldr	s1, [sp, #4]
 802bb36:	ed9d 0a00 	vldr	s0, [sp]
 802bb3a:	e7e5      	b.n	802bb08 <cosf+0x14>
 802bb3c:	eddd 0a01 	vldr	s1, [sp, #4]
 802bb40:	ed9d 0a00 	vldr	s0, [sp]
 802bb44:	f000 fcc0 	bl	802c4c8 <__kernel_sinf>
 802bb48:	eeb1 0a40 	vneg.f32	s0, s0
 802bb4c:	e7e4      	b.n	802bb18 <cosf+0x24>
 802bb4e:	eddd 0a01 	vldr	s1, [sp, #4]
 802bb52:	ed9d 0a00 	vldr	s0, [sp]
 802bb56:	f000 f9cd 	bl	802bef4 <__kernel_cosf>
 802bb5a:	e7f5      	b.n	802bb48 <cosf+0x54>
 802bb5c:	eddd 0a01 	vldr	s1, [sp, #4]
 802bb60:	ed9d 0a00 	vldr	s0, [sp]
 802bb64:	2001      	movs	r0, #1
 802bb66:	f000 fcaf 	bl	802c4c8 <__kernel_sinf>
 802bb6a:	e7d5      	b.n	802bb18 <cosf+0x24>
 802bb6c:	3f490fd8 	.word	0x3f490fd8
 802bb70:	00000000 	.word	0x00000000

0802bb74 <floorf>:
 802bb74:	ee10 3a10 	vmov	r3, s0
 802bb78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802bb7c:	3a7f      	subs	r2, #127	; 0x7f
 802bb7e:	2a16      	cmp	r2, #22
 802bb80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802bb84:	dc2a      	bgt.n	802bbdc <floorf+0x68>
 802bb86:	2a00      	cmp	r2, #0
 802bb88:	da11      	bge.n	802bbae <floorf+0x3a>
 802bb8a:	eddf 7a18 	vldr	s15, [pc, #96]	; 802bbec <floorf+0x78>
 802bb8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802bb92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb9a:	dd05      	ble.n	802bba8 <floorf+0x34>
 802bb9c:	2b00      	cmp	r3, #0
 802bb9e:	da23      	bge.n	802bbe8 <floorf+0x74>
 802bba0:	4a13      	ldr	r2, [pc, #76]	; (802bbf0 <floorf+0x7c>)
 802bba2:	2900      	cmp	r1, #0
 802bba4:	bf18      	it	ne
 802bba6:	4613      	movne	r3, r2
 802bba8:	ee00 3a10 	vmov	s0, r3
 802bbac:	4770      	bx	lr
 802bbae:	4911      	ldr	r1, [pc, #68]	; (802bbf4 <floorf+0x80>)
 802bbb0:	4111      	asrs	r1, r2
 802bbb2:	420b      	tst	r3, r1
 802bbb4:	d0fa      	beq.n	802bbac <floorf+0x38>
 802bbb6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802bbec <floorf+0x78>
 802bbba:	ee30 0a27 	vadd.f32	s0, s0, s15
 802bbbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bbc6:	ddef      	ble.n	802bba8 <floorf+0x34>
 802bbc8:	2b00      	cmp	r3, #0
 802bbca:	bfbe      	ittt	lt
 802bbcc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802bbd0:	fa40 f202 	asrlt.w	r2, r0, r2
 802bbd4:	189b      	addlt	r3, r3, r2
 802bbd6:	ea23 0301 	bic.w	r3, r3, r1
 802bbda:	e7e5      	b.n	802bba8 <floorf+0x34>
 802bbdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802bbe0:	d3e4      	bcc.n	802bbac <floorf+0x38>
 802bbe2:	ee30 0a00 	vadd.f32	s0, s0, s0
 802bbe6:	4770      	bx	lr
 802bbe8:	2300      	movs	r3, #0
 802bbea:	e7dd      	b.n	802bba8 <floorf+0x34>
 802bbec:	7149f2ca 	.word	0x7149f2ca
 802bbf0:	bf800000 	.word	0xbf800000
 802bbf4:	007fffff 	.word	0x007fffff

0802bbf8 <sinf>:
 802bbf8:	ee10 3a10 	vmov	r3, s0
 802bbfc:	b507      	push	{r0, r1, r2, lr}
 802bbfe:	4a1d      	ldr	r2, [pc, #116]	; (802bc74 <sinf+0x7c>)
 802bc00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802bc04:	4293      	cmp	r3, r2
 802bc06:	dc05      	bgt.n	802bc14 <sinf+0x1c>
 802bc08:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802bc78 <sinf+0x80>
 802bc0c:	2000      	movs	r0, #0
 802bc0e:	f000 fc5b 	bl	802c4c8 <__kernel_sinf>
 802bc12:	e004      	b.n	802bc1e <sinf+0x26>
 802bc14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802bc18:	db04      	blt.n	802bc24 <sinf+0x2c>
 802bc1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bc1e:	b003      	add	sp, #12
 802bc20:	f85d fb04 	ldr.w	pc, [sp], #4
 802bc24:	4668      	mov	r0, sp
 802bc26:	f000 f829 	bl	802bc7c <__ieee754_rem_pio2f>
 802bc2a:	f000 0003 	and.w	r0, r0, #3
 802bc2e:	2801      	cmp	r0, #1
 802bc30:	d008      	beq.n	802bc44 <sinf+0x4c>
 802bc32:	2802      	cmp	r0, #2
 802bc34:	d00d      	beq.n	802bc52 <sinf+0x5a>
 802bc36:	b9b0      	cbnz	r0, 802bc66 <sinf+0x6e>
 802bc38:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc3c:	ed9d 0a00 	vldr	s0, [sp]
 802bc40:	2001      	movs	r0, #1
 802bc42:	e7e4      	b.n	802bc0e <sinf+0x16>
 802bc44:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc48:	ed9d 0a00 	vldr	s0, [sp]
 802bc4c:	f000 f952 	bl	802bef4 <__kernel_cosf>
 802bc50:	e7e5      	b.n	802bc1e <sinf+0x26>
 802bc52:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc56:	ed9d 0a00 	vldr	s0, [sp]
 802bc5a:	2001      	movs	r0, #1
 802bc5c:	f000 fc34 	bl	802c4c8 <__kernel_sinf>
 802bc60:	eeb1 0a40 	vneg.f32	s0, s0
 802bc64:	e7db      	b.n	802bc1e <sinf+0x26>
 802bc66:	eddd 0a01 	vldr	s1, [sp, #4]
 802bc6a:	ed9d 0a00 	vldr	s0, [sp]
 802bc6e:	f000 f941 	bl	802bef4 <__kernel_cosf>
 802bc72:	e7f5      	b.n	802bc60 <sinf+0x68>
 802bc74:	3f490fd8 	.word	0x3f490fd8
 802bc78:	00000000 	.word	0x00000000

0802bc7c <__ieee754_rem_pio2f>:
 802bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bc7e:	ee10 6a10 	vmov	r6, s0
 802bc82:	4b8e      	ldr	r3, [pc, #568]	; (802bebc <__ieee754_rem_pio2f+0x240>)
 802bc84:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802bc88:	429d      	cmp	r5, r3
 802bc8a:	b087      	sub	sp, #28
 802bc8c:	eef0 7a40 	vmov.f32	s15, s0
 802bc90:	4604      	mov	r4, r0
 802bc92:	dc05      	bgt.n	802bca0 <__ieee754_rem_pio2f+0x24>
 802bc94:	2300      	movs	r3, #0
 802bc96:	ed80 0a00 	vstr	s0, [r0]
 802bc9a:	6043      	str	r3, [r0, #4]
 802bc9c:	2000      	movs	r0, #0
 802bc9e:	e01a      	b.n	802bcd6 <__ieee754_rem_pio2f+0x5a>
 802bca0:	4b87      	ldr	r3, [pc, #540]	; (802bec0 <__ieee754_rem_pio2f+0x244>)
 802bca2:	429d      	cmp	r5, r3
 802bca4:	dc46      	bgt.n	802bd34 <__ieee754_rem_pio2f+0xb8>
 802bca6:	2e00      	cmp	r6, #0
 802bca8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802bec4 <__ieee754_rem_pio2f+0x248>
 802bcac:	4b86      	ldr	r3, [pc, #536]	; (802bec8 <__ieee754_rem_pio2f+0x24c>)
 802bcae:	f025 050f 	bic.w	r5, r5, #15
 802bcb2:	dd1f      	ble.n	802bcf4 <__ieee754_rem_pio2f+0x78>
 802bcb4:	429d      	cmp	r5, r3
 802bcb6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bcba:	d00e      	beq.n	802bcda <__ieee754_rem_pio2f+0x5e>
 802bcbc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802becc <__ieee754_rem_pio2f+0x250>
 802bcc0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802bcc4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bcc8:	ed80 0a00 	vstr	s0, [r0]
 802bccc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bcd0:	2001      	movs	r0, #1
 802bcd2:	edc4 7a01 	vstr	s15, [r4, #4]
 802bcd6:	b007      	add	sp, #28
 802bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bcda:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802bed0 <__ieee754_rem_pio2f+0x254>
 802bcde:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802bed4 <__ieee754_rem_pio2f+0x258>
 802bce2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bce6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802bcea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bcee:	edc0 6a00 	vstr	s13, [r0]
 802bcf2:	e7eb      	b.n	802bccc <__ieee754_rem_pio2f+0x50>
 802bcf4:	429d      	cmp	r5, r3
 802bcf6:	ee77 7a80 	vadd.f32	s15, s15, s0
 802bcfa:	d00e      	beq.n	802bd1a <__ieee754_rem_pio2f+0x9e>
 802bcfc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802becc <__ieee754_rem_pio2f+0x250>
 802bd00:	ee37 0a87 	vadd.f32	s0, s15, s14
 802bd04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bd08:	ed80 0a00 	vstr	s0, [r0]
 802bd0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bd10:	f04f 30ff 	mov.w	r0, #4294967295
 802bd14:	edc4 7a01 	vstr	s15, [r4, #4]
 802bd18:	e7dd      	b.n	802bcd6 <__ieee754_rem_pio2f+0x5a>
 802bd1a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802bed0 <__ieee754_rem_pio2f+0x254>
 802bd1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802bed4 <__ieee754_rem_pio2f+0x258>
 802bd22:	ee77 7a80 	vadd.f32	s15, s15, s0
 802bd26:	ee77 6a87 	vadd.f32	s13, s15, s14
 802bd2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bd2e:	edc0 6a00 	vstr	s13, [r0]
 802bd32:	e7eb      	b.n	802bd0c <__ieee754_rem_pio2f+0x90>
 802bd34:	4b68      	ldr	r3, [pc, #416]	; (802bed8 <__ieee754_rem_pio2f+0x25c>)
 802bd36:	429d      	cmp	r5, r3
 802bd38:	dc72      	bgt.n	802be20 <__ieee754_rem_pio2f+0x1a4>
 802bd3a:	f000 fc0d 	bl	802c558 <fabsf>
 802bd3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802bedc <__ieee754_rem_pio2f+0x260>
 802bd42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802bd46:	eee0 7a07 	vfma.f32	s15, s0, s14
 802bd4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802bd4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802bd52:	ee17 0a90 	vmov	r0, s15
 802bd56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802bec4 <__ieee754_rem_pio2f+0x248>
 802bd5a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802bd5e:	281f      	cmp	r0, #31
 802bd60:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802becc <__ieee754_rem_pio2f+0x250>
 802bd64:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bd68:	eeb1 6a47 	vneg.f32	s12, s14
 802bd6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 802bd70:	ee16 2a90 	vmov	r2, s13
 802bd74:	dc1c      	bgt.n	802bdb0 <__ieee754_rem_pio2f+0x134>
 802bd76:	495a      	ldr	r1, [pc, #360]	; (802bee0 <__ieee754_rem_pio2f+0x264>)
 802bd78:	1e47      	subs	r7, r0, #1
 802bd7a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802bd7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802bd82:	428b      	cmp	r3, r1
 802bd84:	d014      	beq.n	802bdb0 <__ieee754_rem_pio2f+0x134>
 802bd86:	6022      	str	r2, [r4, #0]
 802bd88:	ed94 7a00 	vldr	s14, [r4]
 802bd8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 802bd90:	2e00      	cmp	r6, #0
 802bd92:	ee30 0a67 	vsub.f32	s0, s0, s15
 802bd96:	ed84 0a01 	vstr	s0, [r4, #4]
 802bd9a:	da9c      	bge.n	802bcd6 <__ieee754_rem_pio2f+0x5a>
 802bd9c:	eeb1 7a47 	vneg.f32	s14, s14
 802bda0:	eeb1 0a40 	vneg.f32	s0, s0
 802bda4:	ed84 7a00 	vstr	s14, [r4]
 802bda8:	ed84 0a01 	vstr	s0, [r4, #4]
 802bdac:	4240      	negs	r0, r0
 802bdae:	e792      	b.n	802bcd6 <__ieee754_rem_pio2f+0x5a>
 802bdb0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802bdb4:	15eb      	asrs	r3, r5, #23
 802bdb6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802bdba:	2d08      	cmp	r5, #8
 802bdbc:	dde3      	ble.n	802bd86 <__ieee754_rem_pio2f+0x10a>
 802bdbe:	eddf 7a44 	vldr	s15, [pc, #272]	; 802bed0 <__ieee754_rem_pio2f+0x254>
 802bdc2:	eef0 6a40 	vmov.f32	s13, s0
 802bdc6:	eee6 6a27 	vfma.f32	s13, s12, s15
 802bdca:	ee30 0a66 	vsub.f32	s0, s0, s13
 802bdce:	eea6 0a27 	vfma.f32	s0, s12, s15
 802bdd2:	eddf 7a40 	vldr	s15, [pc, #256]	; 802bed4 <__ieee754_rem_pio2f+0x258>
 802bdd6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802bdda:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802bdde:	eef0 7a40 	vmov.f32	s15, s0
 802bde2:	ee15 2a90 	vmov	r2, s11
 802bde6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802bdea:	1a5b      	subs	r3, r3, r1
 802bdec:	2b19      	cmp	r3, #25
 802bdee:	dc04      	bgt.n	802bdfa <__ieee754_rem_pio2f+0x17e>
 802bdf0:	edc4 5a00 	vstr	s11, [r4]
 802bdf4:	eeb0 0a66 	vmov.f32	s0, s13
 802bdf8:	e7c6      	b.n	802bd88 <__ieee754_rem_pio2f+0x10c>
 802bdfa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802bee4 <__ieee754_rem_pio2f+0x268>
 802bdfe:	eeb0 0a66 	vmov.f32	s0, s13
 802be02:	eea6 0a25 	vfma.f32	s0, s12, s11
 802be06:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802be0a:	eddf 6a37 	vldr	s13, [pc, #220]	; 802bee8 <__ieee754_rem_pio2f+0x26c>
 802be0e:	eee6 7a25 	vfma.f32	s15, s12, s11
 802be12:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802be16:	ee30 7a67 	vsub.f32	s14, s0, s15
 802be1a:	ed84 7a00 	vstr	s14, [r4]
 802be1e:	e7b3      	b.n	802bd88 <__ieee754_rem_pio2f+0x10c>
 802be20:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802be24:	db06      	blt.n	802be34 <__ieee754_rem_pio2f+0x1b8>
 802be26:	ee70 7a40 	vsub.f32	s15, s0, s0
 802be2a:	edc0 7a01 	vstr	s15, [r0, #4]
 802be2e:	edc0 7a00 	vstr	s15, [r0]
 802be32:	e733      	b.n	802bc9c <__ieee754_rem_pio2f+0x20>
 802be34:	15ea      	asrs	r2, r5, #23
 802be36:	3a86      	subs	r2, #134	; 0x86
 802be38:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802be3c:	ee07 3a90 	vmov	s15, r3
 802be40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802be44:	eddf 6a29 	vldr	s13, [pc, #164]	; 802beec <__ieee754_rem_pio2f+0x270>
 802be48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802be4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802be50:	ed8d 7a03 	vstr	s14, [sp, #12]
 802be54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802be58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802be5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802be60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802be64:	ed8d 7a04 	vstr	s14, [sp, #16]
 802be68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802be6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 802be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802be74:	edcd 7a05 	vstr	s15, [sp, #20]
 802be78:	d11e      	bne.n	802beb8 <__ieee754_rem_pio2f+0x23c>
 802be7a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802be82:	bf14      	ite	ne
 802be84:	2302      	movne	r3, #2
 802be86:	2301      	moveq	r3, #1
 802be88:	4919      	ldr	r1, [pc, #100]	; (802bef0 <__ieee754_rem_pio2f+0x274>)
 802be8a:	9101      	str	r1, [sp, #4]
 802be8c:	2102      	movs	r1, #2
 802be8e:	9100      	str	r1, [sp, #0]
 802be90:	a803      	add	r0, sp, #12
 802be92:	4621      	mov	r1, r4
 802be94:	f000 f88e 	bl	802bfb4 <__kernel_rem_pio2f>
 802be98:	2e00      	cmp	r6, #0
 802be9a:	f6bf af1c 	bge.w	802bcd6 <__ieee754_rem_pio2f+0x5a>
 802be9e:	edd4 7a00 	vldr	s15, [r4]
 802bea2:	eef1 7a67 	vneg.f32	s15, s15
 802bea6:	edc4 7a00 	vstr	s15, [r4]
 802beaa:	edd4 7a01 	vldr	s15, [r4, #4]
 802beae:	eef1 7a67 	vneg.f32	s15, s15
 802beb2:	edc4 7a01 	vstr	s15, [r4, #4]
 802beb6:	e779      	b.n	802bdac <__ieee754_rem_pio2f+0x130>
 802beb8:	2303      	movs	r3, #3
 802beba:	e7e5      	b.n	802be88 <__ieee754_rem_pio2f+0x20c>
 802bebc:	3f490fd8 	.word	0x3f490fd8
 802bec0:	4016cbe3 	.word	0x4016cbe3
 802bec4:	3fc90f80 	.word	0x3fc90f80
 802bec8:	3fc90fd0 	.word	0x3fc90fd0
 802becc:	37354443 	.word	0x37354443
 802bed0:	37354400 	.word	0x37354400
 802bed4:	2e85a308 	.word	0x2e85a308
 802bed8:	43490f80 	.word	0x43490f80
 802bedc:	3f22f984 	.word	0x3f22f984
 802bee0:	080320dc 	.word	0x080320dc
 802bee4:	2e85a300 	.word	0x2e85a300
 802bee8:	248d3132 	.word	0x248d3132
 802beec:	43800000 	.word	0x43800000
 802bef0:	0803215c 	.word	0x0803215c

0802bef4 <__kernel_cosf>:
 802bef4:	ee10 3a10 	vmov	r3, s0
 802bef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802befc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802bf00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802bf04:	da05      	bge.n	802bf12 <__kernel_cosf+0x1e>
 802bf06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802bf0a:	ee17 2a90 	vmov	r2, s15
 802bf0e:	2a00      	cmp	r2, #0
 802bf10:	d03d      	beq.n	802bf8e <__kernel_cosf+0x9a>
 802bf12:	ee60 5a00 	vmul.f32	s11, s0, s0
 802bf16:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802bf94 <__kernel_cosf+0xa0>
 802bf1a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802bf98 <__kernel_cosf+0xa4>
 802bf1e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802bf9c <__kernel_cosf+0xa8>
 802bf22:	4a1f      	ldr	r2, [pc, #124]	; (802bfa0 <__kernel_cosf+0xac>)
 802bf24:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802bf28:	4293      	cmp	r3, r2
 802bf2a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802bfa4 <__kernel_cosf+0xb0>
 802bf2e:	eee7 7a25 	vfma.f32	s15, s14, s11
 802bf32:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802bfa8 <__kernel_cosf+0xb4>
 802bf36:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802bf3a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802bfac <__kernel_cosf+0xb8>
 802bf3e:	eee7 7a25 	vfma.f32	s15, s14, s11
 802bf42:	eeb0 7a66 	vmov.f32	s14, s13
 802bf46:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802bf4a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802bf4e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802bf52:	ee67 6a25 	vmul.f32	s13, s14, s11
 802bf56:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802bf5a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802bf5e:	dc04      	bgt.n	802bf6a <__kernel_cosf+0x76>
 802bf60:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802bf64:	ee36 0a47 	vsub.f32	s0, s12, s14
 802bf68:	4770      	bx	lr
 802bf6a:	4a11      	ldr	r2, [pc, #68]	; (802bfb0 <__kernel_cosf+0xbc>)
 802bf6c:	4293      	cmp	r3, r2
 802bf6e:	bfda      	itte	le
 802bf70:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802bf74:	ee06 3a90 	vmovle	s13, r3
 802bf78:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802bf7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bf80:	ee36 0a66 	vsub.f32	s0, s12, s13
 802bf84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bf88:	ee30 0a67 	vsub.f32	s0, s0, s15
 802bf8c:	4770      	bx	lr
 802bf8e:	eeb0 0a46 	vmov.f32	s0, s12
 802bf92:	4770      	bx	lr
 802bf94:	ad47d74e 	.word	0xad47d74e
 802bf98:	310f74f6 	.word	0x310f74f6
 802bf9c:	3d2aaaab 	.word	0x3d2aaaab
 802bfa0:	3e999999 	.word	0x3e999999
 802bfa4:	b493f27c 	.word	0xb493f27c
 802bfa8:	37d00d01 	.word	0x37d00d01
 802bfac:	bab60b61 	.word	0xbab60b61
 802bfb0:	3f480000 	.word	0x3f480000

0802bfb4 <__kernel_rem_pio2f>:
 802bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bfb8:	ed2d 8b04 	vpush	{d8-d9}
 802bfbc:	b0d7      	sub	sp, #348	; 0x15c
 802bfbe:	4616      	mov	r6, r2
 802bfc0:	4698      	mov	r8, r3
 802bfc2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802bfc4:	4bbb      	ldr	r3, [pc, #748]	; (802c2b4 <__kernel_rem_pio2f+0x300>)
 802bfc6:	9001      	str	r0, [sp, #4]
 802bfc8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 802bfcc:	1d33      	adds	r3, r6, #4
 802bfce:	460d      	mov	r5, r1
 802bfd0:	f108 39ff 	add.w	r9, r8, #4294967295
 802bfd4:	db29      	blt.n	802c02a <__kernel_rem_pio2f+0x76>
 802bfd6:	1ef1      	subs	r1, r6, #3
 802bfd8:	bf48      	it	mi
 802bfda:	1d31      	addmi	r1, r6, #4
 802bfdc:	10c9      	asrs	r1, r1, #3
 802bfde:	1c4c      	adds	r4, r1, #1
 802bfe0:	00e3      	lsls	r3, r4, #3
 802bfe2:	9302      	str	r3, [sp, #8]
 802bfe4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802bfe6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802bfea:	eba1 0009 	sub.w	r0, r1, r9
 802bfee:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802bff2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802bff6:	eb07 0c09 	add.w	ip, r7, r9
 802bffa:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 802bffe:	2300      	movs	r3, #0
 802c000:	4563      	cmp	r3, ip
 802c002:	dd14      	ble.n	802c02e <__kernel_rem_pio2f+0x7a>
 802c004:	ab1a      	add	r3, sp, #104	; 0x68
 802c006:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 802c00a:	46cc      	mov	ip, r9
 802c00c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 802c010:	f1c8 0b01 	rsb	fp, r8, #1
 802c014:	eb0b 020c 	add.w	r2, fp, ip
 802c018:	4297      	cmp	r7, r2
 802c01a:	db27      	blt.n	802c06c <__kernel_rem_pio2f+0xb8>
 802c01c:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c020:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802c024:	4618      	mov	r0, r3
 802c026:	2200      	movs	r2, #0
 802c028:	e016      	b.n	802c058 <__kernel_rem_pio2f+0xa4>
 802c02a:	2100      	movs	r1, #0
 802c02c:	e7d7      	b.n	802bfde <__kernel_rem_pio2f+0x2a>
 802c02e:	42d8      	cmn	r0, r3
 802c030:	bf5d      	ittte	pl
 802c032:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 802c036:	ee07 2a90 	vmovpl	s15, r2
 802c03a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c03e:	eef0 7a47 	vmovmi.f32	s15, s14
 802c042:	ecea 7a01 	vstmia	sl!, {s15}
 802c046:	3301      	adds	r3, #1
 802c048:	e7da      	b.n	802c000 <__kernel_rem_pio2f+0x4c>
 802c04a:	ecfe 6a01 	vldmia	lr!, {s13}
 802c04e:	ed90 7a00 	vldr	s14, [r0]
 802c052:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c056:	3201      	adds	r2, #1
 802c058:	454a      	cmp	r2, r9
 802c05a:	f1a0 0004 	sub.w	r0, r0, #4
 802c05e:	ddf4      	ble.n	802c04a <__kernel_rem_pio2f+0x96>
 802c060:	ecea 7a01 	vstmia	sl!, {s15}
 802c064:	3304      	adds	r3, #4
 802c066:	f10c 0c01 	add.w	ip, ip, #1
 802c06a:	e7d3      	b.n	802c014 <__kernel_rem_pio2f+0x60>
 802c06c:	ab06      	add	r3, sp, #24
 802c06e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802c072:	9304      	str	r3, [sp, #16]
 802c074:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802c076:	eddf 8a92 	vldr	s17, [pc, #584]	; 802c2c0 <__kernel_rem_pio2f+0x30c>
 802c07a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802c2bc <__kernel_rem_pio2f+0x308>
 802c07e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802c082:	9303      	str	r3, [sp, #12]
 802c084:	46ba      	mov	sl, r7
 802c086:	ab56      	add	r3, sp, #344	; 0x158
 802c088:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802c08c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802c090:	ab06      	add	r3, sp, #24
 802c092:	4618      	mov	r0, r3
 802c094:	4652      	mov	r2, sl
 802c096:	2a00      	cmp	r2, #0
 802c098:	dc51      	bgt.n	802c13e <__kernel_rem_pio2f+0x18a>
 802c09a:	4620      	mov	r0, r4
 802c09c:	9305      	str	r3, [sp, #20]
 802c09e:	f000 fa63 	bl	802c568 <scalbnf>
 802c0a2:	eeb0 8a40 	vmov.f32	s16, s0
 802c0a6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802c0aa:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c0ae:	f7ff fd61 	bl	802bb74 <floorf>
 802c0b2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802c0b6:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c0ba:	2c00      	cmp	r4, #0
 802c0bc:	9b05      	ldr	r3, [sp, #20]
 802c0be:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c0c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802c0c6:	edcd 7a00 	vstr	s15, [sp]
 802c0ca:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c0ce:	dd4b      	ble.n	802c168 <__kernel_rem_pio2f+0x1b4>
 802c0d0:	f10a 3cff 	add.w	ip, sl, #4294967295
 802c0d4:	aa06      	add	r2, sp, #24
 802c0d6:	f1c4 0e08 	rsb	lr, r4, #8
 802c0da:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c0de:	ee17 1a90 	vmov	r1, s15
 802c0e2:	fa42 f00e 	asr.w	r0, r2, lr
 802c0e6:	4401      	add	r1, r0
 802c0e8:	9100      	str	r1, [sp, #0]
 802c0ea:	fa00 f00e 	lsl.w	r0, r0, lr
 802c0ee:	a906      	add	r1, sp, #24
 802c0f0:	1a12      	subs	r2, r2, r0
 802c0f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802c0f6:	f1c4 0007 	rsb	r0, r4, #7
 802c0fa:	fa42 fb00 	asr.w	fp, r2, r0
 802c0fe:	f1bb 0f00 	cmp.w	fp, #0
 802c102:	dd43      	ble.n	802c18c <__kernel_rem_pio2f+0x1d8>
 802c104:	9a00      	ldr	r2, [sp, #0]
 802c106:	f04f 0e00 	mov.w	lr, #0
 802c10a:	3201      	adds	r2, #1
 802c10c:	9200      	str	r2, [sp, #0]
 802c10e:	4670      	mov	r0, lr
 802c110:	45f2      	cmp	sl, lr
 802c112:	dc6c      	bgt.n	802c1ee <__kernel_rem_pio2f+0x23a>
 802c114:	2c00      	cmp	r4, #0
 802c116:	dd04      	ble.n	802c122 <__kernel_rem_pio2f+0x16e>
 802c118:	2c01      	cmp	r4, #1
 802c11a:	d079      	beq.n	802c210 <__kernel_rem_pio2f+0x25c>
 802c11c:	2c02      	cmp	r4, #2
 802c11e:	f000 8082 	beq.w	802c226 <__kernel_rem_pio2f+0x272>
 802c122:	f1bb 0f02 	cmp.w	fp, #2
 802c126:	d131      	bne.n	802c18c <__kernel_rem_pio2f+0x1d8>
 802c128:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c12c:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c130:	b360      	cbz	r0, 802c18c <__kernel_rem_pio2f+0x1d8>
 802c132:	4620      	mov	r0, r4
 802c134:	f000 fa18 	bl	802c568 <scalbnf>
 802c138:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c13c:	e026      	b.n	802c18c <__kernel_rem_pio2f+0x1d8>
 802c13e:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c142:	3a01      	subs	r2, #1
 802c144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c148:	a942      	add	r1, sp, #264	; 0x108
 802c14a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c14e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802c152:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c156:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c15a:	eca0 0a01 	vstmia	r0!, {s0}
 802c15e:	ed9c 0a00 	vldr	s0, [ip]
 802c162:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c166:	e796      	b.n	802c096 <__kernel_rem_pio2f+0xe2>
 802c168:	d107      	bne.n	802c17a <__kernel_rem_pio2f+0x1c6>
 802c16a:	f10a 32ff 	add.w	r2, sl, #4294967295
 802c16e:	a906      	add	r1, sp, #24
 802c170:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802c174:	ea4f 2b22 	mov.w	fp, r2, asr #8
 802c178:	e7c1      	b.n	802c0fe <__kernel_rem_pio2f+0x14a>
 802c17a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c17e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c186:	da2f      	bge.n	802c1e8 <__kernel_rem_pio2f+0x234>
 802c188:	f04f 0b00 	mov.w	fp, #0
 802c18c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c194:	f040 8098 	bne.w	802c2c8 <__kernel_rem_pio2f+0x314>
 802c198:	f10a 33ff 	add.w	r3, sl, #4294967295
 802c19c:	469c      	mov	ip, r3
 802c19e:	2200      	movs	r2, #0
 802c1a0:	45bc      	cmp	ip, r7
 802c1a2:	da48      	bge.n	802c236 <__kernel_rem_pio2f+0x282>
 802c1a4:	2a00      	cmp	r2, #0
 802c1a6:	d05f      	beq.n	802c268 <__kernel_rem_pio2f+0x2b4>
 802c1a8:	aa06      	add	r2, sp, #24
 802c1aa:	3c08      	subs	r4, #8
 802c1ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802c1b0:	2900      	cmp	r1, #0
 802c1b2:	d07d      	beq.n	802c2b0 <__kernel_rem_pio2f+0x2fc>
 802c1b4:	4620      	mov	r0, r4
 802c1b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c1ba:	9301      	str	r3, [sp, #4]
 802c1bc:	f000 f9d4 	bl	802c568 <scalbnf>
 802c1c0:	9b01      	ldr	r3, [sp, #4]
 802c1c2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 802c2c0 <__kernel_rem_pio2f+0x30c>
 802c1c6:	4619      	mov	r1, r3
 802c1c8:	2900      	cmp	r1, #0
 802c1ca:	f280 80af 	bge.w	802c32c <__kernel_rem_pio2f+0x378>
 802c1ce:	4618      	mov	r0, r3
 802c1d0:	2400      	movs	r4, #0
 802c1d2:	2800      	cmp	r0, #0
 802c1d4:	f2c0 80d0 	blt.w	802c378 <__kernel_rem_pio2f+0x3c4>
 802c1d8:	a942      	add	r1, sp, #264	; 0x108
 802c1da:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 802c1de:	4a36      	ldr	r2, [pc, #216]	; (802c2b8 <__kernel_rem_pio2f+0x304>)
 802c1e0:	eddf 7a38 	vldr	s15, [pc, #224]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802c1e4:	2100      	movs	r1, #0
 802c1e6:	e0bb      	b.n	802c360 <__kernel_rem_pio2f+0x3ac>
 802c1e8:	f04f 0b02 	mov.w	fp, #2
 802c1ec:	e78a      	b.n	802c104 <__kernel_rem_pio2f+0x150>
 802c1ee:	681a      	ldr	r2, [r3, #0]
 802c1f0:	b948      	cbnz	r0, 802c206 <__kernel_rem_pio2f+0x252>
 802c1f2:	b11a      	cbz	r2, 802c1fc <__kernel_rem_pio2f+0x248>
 802c1f4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802c1f8:	601a      	str	r2, [r3, #0]
 802c1fa:	2201      	movs	r2, #1
 802c1fc:	f10e 0e01 	add.w	lr, lr, #1
 802c200:	3304      	adds	r3, #4
 802c202:	4610      	mov	r0, r2
 802c204:	e784      	b.n	802c110 <__kernel_rem_pio2f+0x15c>
 802c206:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802c20a:	601a      	str	r2, [r3, #0]
 802c20c:	4602      	mov	r2, r0
 802c20e:	e7f5      	b.n	802c1fc <__kernel_rem_pio2f+0x248>
 802c210:	f10a 3cff 	add.w	ip, sl, #4294967295
 802c214:	ab06      	add	r3, sp, #24
 802c216:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802c21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c21e:	aa06      	add	r2, sp, #24
 802c220:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802c224:	e77d      	b.n	802c122 <__kernel_rem_pio2f+0x16e>
 802c226:	f10a 3cff 	add.w	ip, sl, #4294967295
 802c22a:	ab06      	add	r3, sp, #24
 802c22c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802c230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c234:	e7f3      	b.n	802c21e <__kernel_rem_pio2f+0x26a>
 802c236:	a906      	add	r1, sp, #24
 802c238:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 802c23c:	f10c 3cff 	add.w	ip, ip, #4294967295
 802c240:	4302      	orrs	r2, r0
 802c242:	e7ad      	b.n	802c1a0 <__kernel_rem_pio2f+0x1ec>
 802c244:	3001      	adds	r0, #1
 802c246:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802c24a:	2a00      	cmp	r2, #0
 802c24c:	d0fa      	beq.n	802c244 <__kernel_rem_pio2f+0x290>
 802c24e:	a91a      	add	r1, sp, #104	; 0x68
 802c250:	eb0a 0208 	add.w	r2, sl, r8
 802c254:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802c258:	f10a 0301 	add.w	r3, sl, #1
 802c25c:	eb0a 0100 	add.w	r1, sl, r0
 802c260:	4299      	cmp	r1, r3
 802c262:	da04      	bge.n	802c26e <__kernel_rem_pio2f+0x2ba>
 802c264:	468a      	mov	sl, r1
 802c266:	e70e      	b.n	802c086 <__kernel_rem_pio2f+0xd2>
 802c268:	9b04      	ldr	r3, [sp, #16]
 802c26a:	2001      	movs	r0, #1
 802c26c:	e7eb      	b.n	802c246 <__kernel_rem_pio2f+0x292>
 802c26e:	9803      	ldr	r0, [sp, #12]
 802c270:	f8dd c004 	ldr.w	ip, [sp, #4]
 802c274:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802c278:	9000      	str	r0, [sp, #0]
 802c27a:	ee07 0a90 	vmov	s15, r0
 802c27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c282:	2000      	movs	r0, #0
 802c284:	ece2 7a01 	vstmia	r2!, {s15}
 802c288:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802c28c:	4696      	mov	lr, r2
 802c28e:	4548      	cmp	r0, r9
 802c290:	dd06      	ble.n	802c2a0 <__kernel_rem_pio2f+0x2ec>
 802c292:	a842      	add	r0, sp, #264	; 0x108
 802c294:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802c298:	edc0 7a00 	vstr	s15, [r0]
 802c29c:	3301      	adds	r3, #1
 802c29e:	e7df      	b.n	802c260 <__kernel_rem_pio2f+0x2ac>
 802c2a0:	ecfc 6a01 	vldmia	ip!, {s13}
 802c2a4:	ed3e 7a01 	vldmdb	lr!, {s14}
 802c2a8:	3001      	adds	r0, #1
 802c2aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c2ae:	e7ee      	b.n	802c28e <__kernel_rem_pio2f+0x2da>
 802c2b0:	3b01      	subs	r3, #1
 802c2b2:	e779      	b.n	802c1a8 <__kernel_rem_pio2f+0x1f4>
 802c2b4:	080324a0 	.word	0x080324a0
 802c2b8:	08032474 	.word	0x08032474
 802c2bc:	43800000 	.word	0x43800000
 802c2c0:	3b800000 	.word	0x3b800000
 802c2c4:	00000000 	.word	0x00000000
 802c2c8:	9b02      	ldr	r3, [sp, #8]
 802c2ca:	eeb0 0a48 	vmov.f32	s0, s16
 802c2ce:	1b98      	subs	r0, r3, r6
 802c2d0:	f000 f94a 	bl	802c568 <scalbnf>
 802c2d4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802c2bc <__kernel_rem_pio2f+0x308>
 802c2d8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c2e0:	db1b      	blt.n	802c31a <__kernel_rem_pio2f+0x366>
 802c2e2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802c2c0 <__kernel_rem_pio2f+0x30c>
 802c2e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c2ea:	aa06      	add	r2, sp, #24
 802c2ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c2f0:	a906      	add	r1, sp, #24
 802c2f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c2f6:	3408      	adds	r4, #8
 802c2f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c2fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c300:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c304:	ee10 3a10 	vmov	r3, s0
 802c308:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802c30c:	ee17 2a90 	vmov	r2, s15
 802c310:	f10a 0301 	add.w	r3, sl, #1
 802c314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c318:	e74c      	b.n	802c1b4 <__kernel_rem_pio2f+0x200>
 802c31a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c31e:	aa06      	add	r2, sp, #24
 802c320:	ee10 3a10 	vmov	r3, s0
 802c324:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802c328:	4653      	mov	r3, sl
 802c32a:	e743      	b.n	802c1b4 <__kernel_rem_pio2f+0x200>
 802c32c:	aa42      	add	r2, sp, #264	; 0x108
 802c32e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802c332:	aa06      	add	r2, sp, #24
 802c334:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802c338:	9201      	str	r2, [sp, #4]
 802c33a:	ee07 2a90 	vmov	s15, r2
 802c33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c342:	3901      	subs	r1, #1
 802c344:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c348:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c34c:	edc0 7a00 	vstr	s15, [r0]
 802c350:	e73a      	b.n	802c1c8 <__kernel_rem_pio2f+0x214>
 802c352:	ecf2 6a01 	vldmia	r2!, {s13}
 802c356:	ecb6 7a01 	vldmia	r6!, {s14}
 802c35a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c35e:	3101      	adds	r1, #1
 802c360:	42b9      	cmp	r1, r7
 802c362:	dc01      	bgt.n	802c368 <__kernel_rem_pio2f+0x3b4>
 802c364:	428c      	cmp	r4, r1
 802c366:	daf4      	bge.n	802c352 <__kernel_rem_pio2f+0x39e>
 802c368:	aa56      	add	r2, sp, #344	; 0x158
 802c36a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802c36e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802c372:	3801      	subs	r0, #1
 802c374:	3401      	adds	r4, #1
 802c376:	e72c      	b.n	802c1d2 <__kernel_rem_pio2f+0x21e>
 802c378:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802c37a:	2a02      	cmp	r2, #2
 802c37c:	dc0a      	bgt.n	802c394 <__kernel_rem_pio2f+0x3e0>
 802c37e:	2a00      	cmp	r2, #0
 802c380:	dc61      	bgt.n	802c446 <__kernel_rem_pio2f+0x492>
 802c382:	d03c      	beq.n	802c3fe <__kernel_rem_pio2f+0x44a>
 802c384:	9b00      	ldr	r3, [sp, #0]
 802c386:	f003 0007 	and.w	r0, r3, #7
 802c38a:	b057      	add	sp, #348	; 0x15c
 802c38c:	ecbd 8b04 	vpop	{d8-d9}
 802c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c394:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802c396:	2a03      	cmp	r2, #3
 802c398:	d1f4      	bne.n	802c384 <__kernel_rem_pio2f+0x3d0>
 802c39a:	aa2e      	add	r2, sp, #184	; 0xb8
 802c39c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802c3a0:	4608      	mov	r0, r1
 802c3a2:	461c      	mov	r4, r3
 802c3a4:	2c00      	cmp	r4, #0
 802c3a6:	f1a0 0004 	sub.w	r0, r0, #4
 802c3aa:	dc59      	bgt.n	802c460 <__kernel_rem_pio2f+0x4ac>
 802c3ac:	4618      	mov	r0, r3
 802c3ae:	2801      	cmp	r0, #1
 802c3b0:	f1a1 0104 	sub.w	r1, r1, #4
 802c3b4:	dc64      	bgt.n	802c480 <__kernel_rem_pio2f+0x4cc>
 802c3b6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802c3ba:	2b01      	cmp	r3, #1
 802c3bc:	dc70      	bgt.n	802c4a0 <__kernel_rem_pio2f+0x4ec>
 802c3be:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802c3c2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802c3c6:	f1bb 0f00 	cmp.w	fp, #0
 802c3ca:	d172      	bne.n	802c4b2 <__kernel_rem_pio2f+0x4fe>
 802c3cc:	edc5 6a00 	vstr	s13, [r5]
 802c3d0:	ed85 7a01 	vstr	s14, [r5, #4]
 802c3d4:	edc5 7a02 	vstr	s15, [r5, #8]
 802c3d8:	e7d4      	b.n	802c384 <__kernel_rem_pio2f+0x3d0>
 802c3da:	aa2e      	add	r2, sp, #184	; 0xb8
 802c3dc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802c3e0:	ed91 7a00 	vldr	s14, [r1]
 802c3e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c3e8:	3b01      	subs	r3, #1
 802c3ea:	2b00      	cmp	r3, #0
 802c3ec:	daf5      	bge.n	802c3da <__kernel_rem_pio2f+0x426>
 802c3ee:	f1bb 0f00 	cmp.w	fp, #0
 802c3f2:	d001      	beq.n	802c3f8 <__kernel_rem_pio2f+0x444>
 802c3f4:	eef1 7a67 	vneg.f32	s15, s15
 802c3f8:	edc5 7a00 	vstr	s15, [r5]
 802c3fc:	e7c2      	b.n	802c384 <__kernel_rem_pio2f+0x3d0>
 802c3fe:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802c402:	e7f2      	b.n	802c3ea <__kernel_rem_pio2f+0x436>
 802c404:	aa2e      	add	r2, sp, #184	; 0xb8
 802c406:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802c40a:	edd0 7a00 	vldr	s15, [r0]
 802c40e:	ee37 7a27 	vadd.f32	s14, s14, s15
 802c412:	3901      	subs	r1, #1
 802c414:	2900      	cmp	r1, #0
 802c416:	daf5      	bge.n	802c404 <__kernel_rem_pio2f+0x450>
 802c418:	f1bb 0f00 	cmp.w	fp, #0
 802c41c:	d017      	beq.n	802c44e <__kernel_rem_pio2f+0x49a>
 802c41e:	eef1 7a47 	vneg.f32	s15, s14
 802c422:	edc5 7a00 	vstr	s15, [r5]
 802c426:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802c42a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c42e:	a82f      	add	r0, sp, #188	; 0xbc
 802c430:	2101      	movs	r1, #1
 802c432:	428b      	cmp	r3, r1
 802c434:	da0e      	bge.n	802c454 <__kernel_rem_pio2f+0x4a0>
 802c436:	f1bb 0f00 	cmp.w	fp, #0
 802c43a:	d001      	beq.n	802c440 <__kernel_rem_pio2f+0x48c>
 802c43c:	eef1 7a67 	vneg.f32	s15, s15
 802c440:	edc5 7a01 	vstr	s15, [r5, #4]
 802c444:	e79e      	b.n	802c384 <__kernel_rem_pio2f+0x3d0>
 802c446:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 802c2c4 <__kernel_rem_pio2f+0x310>
 802c44a:	4619      	mov	r1, r3
 802c44c:	e7e2      	b.n	802c414 <__kernel_rem_pio2f+0x460>
 802c44e:	eef0 7a47 	vmov.f32	s15, s14
 802c452:	e7e6      	b.n	802c422 <__kernel_rem_pio2f+0x46e>
 802c454:	ecb0 7a01 	vldmia	r0!, {s14}
 802c458:	3101      	adds	r1, #1
 802c45a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c45e:	e7e8      	b.n	802c432 <__kernel_rem_pio2f+0x47e>
 802c460:	edd0 7a00 	vldr	s15, [r0]
 802c464:	edd0 6a01 	vldr	s13, [r0, #4]
 802c468:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c46c:	3c01      	subs	r4, #1
 802c46e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c472:	ed80 7a00 	vstr	s14, [r0]
 802c476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c47a:	edc0 7a01 	vstr	s15, [r0, #4]
 802c47e:	e791      	b.n	802c3a4 <__kernel_rem_pio2f+0x3f0>
 802c480:	edd1 7a00 	vldr	s15, [r1]
 802c484:	edd1 6a01 	vldr	s13, [r1, #4]
 802c488:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c48c:	3801      	subs	r0, #1
 802c48e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c492:	ed81 7a00 	vstr	s14, [r1]
 802c496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c49a:	edc1 7a01 	vstr	s15, [r1, #4]
 802c49e:	e786      	b.n	802c3ae <__kernel_rem_pio2f+0x3fa>
 802c4a0:	aa2e      	add	r2, sp, #184	; 0xb8
 802c4a2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802c4a6:	ed91 7a00 	vldr	s14, [r1]
 802c4aa:	3b01      	subs	r3, #1
 802c4ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c4b0:	e783      	b.n	802c3ba <__kernel_rem_pio2f+0x406>
 802c4b2:	eef1 6a66 	vneg.f32	s13, s13
 802c4b6:	eeb1 7a47 	vneg.f32	s14, s14
 802c4ba:	edc5 6a00 	vstr	s13, [r5]
 802c4be:	ed85 7a01 	vstr	s14, [r5, #4]
 802c4c2:	eef1 7a67 	vneg.f32	s15, s15
 802c4c6:	e785      	b.n	802c3d4 <__kernel_rem_pio2f+0x420>

0802c4c8 <__kernel_sinf>:
 802c4c8:	ee10 3a10 	vmov	r3, s0
 802c4cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c4d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c4d4:	da04      	bge.n	802c4e0 <__kernel_sinf+0x18>
 802c4d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c4da:	ee17 3a90 	vmov	r3, s15
 802c4de:	b35b      	cbz	r3, 802c538 <__kernel_sinf+0x70>
 802c4e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c4e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 802c53c <__kernel_sinf+0x74>
 802c4e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802c540 <__kernel_sinf+0x78>
 802c4ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c4f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 802c544 <__kernel_sinf+0x7c>
 802c4f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c4f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802c548 <__kernel_sinf+0x80>
 802c4fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c500:	eddf 7a12 	vldr	s15, [pc, #72]	; 802c54c <__kernel_sinf+0x84>
 802c504:	ee60 6a07 	vmul.f32	s13, s0, s14
 802c508:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c50c:	b930      	cbnz	r0, 802c51c <__kernel_sinf+0x54>
 802c50e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802c550 <__kernel_sinf+0x88>
 802c512:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c516:	eea6 0a26 	vfma.f32	s0, s12, s13
 802c51a:	4770      	bx	lr
 802c51c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802c520:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802c524:	eee0 7a86 	vfma.f32	s15, s1, s12
 802c528:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802c52c:	eddf 7a09 	vldr	s15, [pc, #36]	; 802c554 <__kernel_sinf+0x8c>
 802c530:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802c534:	ee30 0a60 	vsub.f32	s0, s0, s1
 802c538:	4770      	bx	lr
 802c53a:	bf00      	nop
 802c53c:	2f2ec9d3 	.word	0x2f2ec9d3
 802c540:	b2d72f34 	.word	0xb2d72f34
 802c544:	3638ef1b 	.word	0x3638ef1b
 802c548:	b9500d01 	.word	0xb9500d01
 802c54c:	3c088889 	.word	0x3c088889
 802c550:	be2aaaab 	.word	0xbe2aaaab
 802c554:	3e2aaaab 	.word	0x3e2aaaab

0802c558 <fabsf>:
 802c558:	ee10 3a10 	vmov	r3, s0
 802c55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c560:	ee00 3a10 	vmov	s0, r3
 802c564:	4770      	bx	lr
	...

0802c568 <scalbnf>:
 802c568:	ee10 3a10 	vmov	r3, s0
 802c56c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802c570:	d025      	beq.n	802c5be <scalbnf+0x56>
 802c572:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802c576:	d302      	bcc.n	802c57e <scalbnf+0x16>
 802c578:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c57c:	4770      	bx	lr
 802c57e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802c582:	d122      	bne.n	802c5ca <scalbnf+0x62>
 802c584:	4b2a      	ldr	r3, [pc, #168]	; (802c630 <scalbnf+0xc8>)
 802c586:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802c634 <scalbnf+0xcc>
 802c58a:	4298      	cmp	r0, r3
 802c58c:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c590:	db16      	blt.n	802c5c0 <scalbnf+0x58>
 802c592:	ee10 3a10 	vmov	r3, s0
 802c596:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c59a:	3a19      	subs	r2, #25
 802c59c:	4402      	add	r2, r0
 802c59e:	2afe      	cmp	r2, #254	; 0xfe
 802c5a0:	dd15      	ble.n	802c5ce <scalbnf+0x66>
 802c5a2:	ee10 3a10 	vmov	r3, s0
 802c5a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 802c638 <scalbnf+0xd0>
 802c5aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 802c63c <scalbnf+0xd4>
 802c5ae:	2b00      	cmp	r3, #0
 802c5b0:	eeb0 7a67 	vmov.f32	s14, s15
 802c5b4:	bfb8      	it	lt
 802c5b6:	eef0 7a66 	vmovlt.f32	s15, s13
 802c5ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 802c5be:	4770      	bx	lr
 802c5c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802c640 <scalbnf+0xd8>
 802c5c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c5c8:	4770      	bx	lr
 802c5ca:	0dd2      	lsrs	r2, r2, #23
 802c5cc:	e7e6      	b.n	802c59c <scalbnf+0x34>
 802c5ce:	2a00      	cmp	r2, #0
 802c5d0:	dd06      	ble.n	802c5e0 <scalbnf+0x78>
 802c5d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c5d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802c5da:	ee00 3a10 	vmov	s0, r3
 802c5de:	4770      	bx	lr
 802c5e0:	f112 0f16 	cmn.w	r2, #22
 802c5e4:	da1a      	bge.n	802c61c <scalbnf+0xb4>
 802c5e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 802c5ea:	4298      	cmp	r0, r3
 802c5ec:	ee10 3a10 	vmov	r3, s0
 802c5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c5f4:	dd0a      	ble.n	802c60c <scalbnf+0xa4>
 802c5f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802c638 <scalbnf+0xd0>
 802c5fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802c63c <scalbnf+0xd4>
 802c5fe:	eef0 7a40 	vmov.f32	s15, s0
 802c602:	2b00      	cmp	r3, #0
 802c604:	bf18      	it	ne
 802c606:	eeb0 0a47 	vmovne.f32	s0, s14
 802c60a:	e7db      	b.n	802c5c4 <scalbnf+0x5c>
 802c60c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802c640 <scalbnf+0xd8>
 802c610:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802c644 <scalbnf+0xdc>
 802c614:	eef0 7a40 	vmov.f32	s15, s0
 802c618:	2b00      	cmp	r3, #0
 802c61a:	e7f3      	b.n	802c604 <scalbnf+0x9c>
 802c61c:	3219      	adds	r2, #25
 802c61e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c622:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802c626:	eddf 7a08 	vldr	s15, [pc, #32]	; 802c648 <scalbnf+0xe0>
 802c62a:	ee07 3a10 	vmov	s14, r3
 802c62e:	e7c4      	b.n	802c5ba <scalbnf+0x52>
 802c630:	ffff3cb0 	.word	0xffff3cb0
 802c634:	4c000000 	.word	0x4c000000
 802c638:	7149f2ca 	.word	0x7149f2ca
 802c63c:	f149f2ca 	.word	0xf149f2ca
 802c640:	0da24260 	.word	0x0da24260
 802c644:	8da24260 	.word	0x8da24260
 802c648:	33000000 	.word	0x33000000

0802c64c <abort>:
 802c64c:	b508      	push	{r3, lr}
 802c64e:	2006      	movs	r0, #6
 802c650:	f000 fc68 	bl	802cf24 <raise>
 802c654:	2001      	movs	r0, #1
 802c656:	f7d5 fb7f 	bl	8001d58 <_exit>
	...

0802c65c <__assert_func>:
 802c65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c65e:	4614      	mov	r4, r2
 802c660:	461a      	mov	r2, r3
 802c662:	4b09      	ldr	r3, [pc, #36]	; (802c688 <__assert_func+0x2c>)
 802c664:	681b      	ldr	r3, [r3, #0]
 802c666:	4605      	mov	r5, r0
 802c668:	68d8      	ldr	r0, [r3, #12]
 802c66a:	b14c      	cbz	r4, 802c680 <__assert_func+0x24>
 802c66c:	4b07      	ldr	r3, [pc, #28]	; (802c68c <__assert_func+0x30>)
 802c66e:	9100      	str	r1, [sp, #0]
 802c670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c674:	4906      	ldr	r1, [pc, #24]	; (802c690 <__assert_func+0x34>)
 802c676:	462b      	mov	r3, r5
 802c678:	f000 f828 	bl	802c6cc <fiprintf>
 802c67c:	f7ff ffe6 	bl	802c64c <abort>
 802c680:	4b04      	ldr	r3, [pc, #16]	; (802c694 <__assert_func+0x38>)
 802c682:	461c      	mov	r4, r3
 802c684:	e7f3      	b.n	802c66e <__assert_func+0x12>
 802c686:	bf00      	nop
 802c688:	200000a8 	.word	0x200000a8
 802c68c:	080324ac 	.word	0x080324ac
 802c690:	080324b9 	.word	0x080324b9
 802c694:	080324e7 	.word	0x080324e7

0802c698 <atexit>:
 802c698:	2300      	movs	r3, #0
 802c69a:	4601      	mov	r1, r0
 802c69c:	461a      	mov	r2, r3
 802c69e:	4618      	mov	r0, r3
 802c6a0:	f000 bd3c 	b.w	802d11c <__register_exitproc>

0802c6a4 <__cxa_atexit>:
 802c6a4:	b510      	push	{r4, lr}
 802c6a6:	4c05      	ldr	r4, [pc, #20]	; (802c6bc <__cxa_atexit+0x18>)
 802c6a8:	4613      	mov	r3, r2
 802c6aa:	b12c      	cbz	r4, 802c6b8 <__cxa_atexit+0x14>
 802c6ac:	460a      	mov	r2, r1
 802c6ae:	4601      	mov	r1, r0
 802c6b0:	2002      	movs	r0, #2
 802c6b2:	f000 fd33 	bl	802d11c <__register_exitproc>
 802c6b6:	bd10      	pop	{r4, pc}
 802c6b8:	4620      	mov	r0, r4
 802c6ba:	e7fc      	b.n	802c6b6 <__cxa_atexit+0x12>
 802c6bc:	0802d11d 	.word	0x0802d11d

0802c6c0 <__errno>:
 802c6c0:	4b01      	ldr	r3, [pc, #4]	; (802c6c8 <__errno+0x8>)
 802c6c2:	6818      	ldr	r0, [r3, #0]
 802c6c4:	4770      	bx	lr
 802c6c6:	bf00      	nop
 802c6c8:	200000a8 	.word	0x200000a8

0802c6cc <fiprintf>:
 802c6cc:	b40e      	push	{r1, r2, r3}
 802c6ce:	b503      	push	{r0, r1, lr}
 802c6d0:	4601      	mov	r1, r0
 802c6d2:	ab03      	add	r3, sp, #12
 802c6d4:	4805      	ldr	r0, [pc, #20]	; (802c6ec <fiprintf+0x20>)
 802c6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 802c6da:	6800      	ldr	r0, [r0, #0]
 802c6dc:	9301      	str	r3, [sp, #4]
 802c6de:	f000 f925 	bl	802c92c <_vfiprintf_r>
 802c6e2:	b002      	add	sp, #8
 802c6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 802c6e8:	b003      	add	sp, #12
 802c6ea:	4770      	bx	lr
 802c6ec:	200000a8 	.word	0x200000a8

0802c6f0 <__libc_init_array>:
 802c6f0:	b570      	push	{r4, r5, r6, lr}
 802c6f2:	4d0d      	ldr	r5, [pc, #52]	; (802c728 <__libc_init_array+0x38>)
 802c6f4:	4c0d      	ldr	r4, [pc, #52]	; (802c72c <__libc_init_array+0x3c>)
 802c6f6:	1b64      	subs	r4, r4, r5
 802c6f8:	10a4      	asrs	r4, r4, #2
 802c6fa:	2600      	movs	r6, #0
 802c6fc:	42a6      	cmp	r6, r4
 802c6fe:	d109      	bne.n	802c714 <__libc_init_array+0x24>
 802c700:	4d0b      	ldr	r5, [pc, #44]	; (802c730 <__libc_init_array+0x40>)
 802c702:	4c0c      	ldr	r4, [pc, #48]	; (802c734 <__libc_init_array+0x44>)
 802c704:	f001 f9e8 	bl	802dad8 <_init>
 802c708:	1b64      	subs	r4, r4, r5
 802c70a:	10a4      	asrs	r4, r4, #2
 802c70c:	2600      	movs	r6, #0
 802c70e:	42a6      	cmp	r6, r4
 802c710:	d105      	bne.n	802c71e <__libc_init_array+0x2e>
 802c712:	bd70      	pop	{r4, r5, r6, pc}
 802c714:	f855 3b04 	ldr.w	r3, [r5], #4
 802c718:	4798      	blx	r3
 802c71a:	3601      	adds	r6, #1
 802c71c:	e7ee      	b.n	802c6fc <__libc_init_array+0xc>
 802c71e:	f855 3b04 	ldr.w	r3, [r5], #4
 802c722:	4798      	blx	r3
 802c724:	3601      	adds	r6, #1
 802c726:	e7f2      	b.n	802c70e <__libc_init_array+0x1e>
 802c728:	080a31f4 	.word	0x080a31f4
 802c72c:	080a31f4 	.word	0x080a31f4
 802c730:	080a31f4 	.word	0x080a31f4
 802c734:	080a3208 	.word	0x080a3208

0802c738 <malloc>:
 802c738:	4b02      	ldr	r3, [pc, #8]	; (802c744 <malloc+0xc>)
 802c73a:	4601      	mov	r1, r0
 802c73c:	6818      	ldr	r0, [r3, #0]
 802c73e:	f000 b871 	b.w	802c824 <_malloc_r>
 802c742:	bf00      	nop
 802c744:	200000a8 	.word	0x200000a8

0802c748 <free>:
 802c748:	4b02      	ldr	r3, [pc, #8]	; (802c754 <free+0xc>)
 802c74a:	4601      	mov	r1, r0
 802c74c:	6818      	ldr	r0, [r3, #0]
 802c74e:	f000 b819 	b.w	802c784 <_free_r>
 802c752:	bf00      	nop
 802c754:	200000a8 	.word	0x200000a8

0802c758 <memcpy>:
 802c758:	440a      	add	r2, r1
 802c75a:	4291      	cmp	r1, r2
 802c75c:	f100 33ff 	add.w	r3, r0, #4294967295
 802c760:	d100      	bne.n	802c764 <memcpy+0xc>
 802c762:	4770      	bx	lr
 802c764:	b510      	push	{r4, lr}
 802c766:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c76a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c76e:	4291      	cmp	r1, r2
 802c770:	d1f9      	bne.n	802c766 <memcpy+0xe>
 802c772:	bd10      	pop	{r4, pc}

0802c774 <memset>:
 802c774:	4402      	add	r2, r0
 802c776:	4603      	mov	r3, r0
 802c778:	4293      	cmp	r3, r2
 802c77a:	d100      	bne.n	802c77e <memset+0xa>
 802c77c:	4770      	bx	lr
 802c77e:	f803 1b01 	strb.w	r1, [r3], #1
 802c782:	e7f9      	b.n	802c778 <memset+0x4>

0802c784 <_free_r>:
 802c784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c786:	2900      	cmp	r1, #0
 802c788:	d048      	beq.n	802c81c <_free_r+0x98>
 802c78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c78e:	9001      	str	r0, [sp, #4]
 802c790:	2b00      	cmp	r3, #0
 802c792:	f1a1 0404 	sub.w	r4, r1, #4
 802c796:	bfb8      	it	lt
 802c798:	18e4      	addlt	r4, r4, r3
 802c79a:	f000 ff5b 	bl	802d654 <__malloc_lock>
 802c79e:	4a20      	ldr	r2, [pc, #128]	; (802c820 <_free_r+0x9c>)
 802c7a0:	9801      	ldr	r0, [sp, #4]
 802c7a2:	6813      	ldr	r3, [r2, #0]
 802c7a4:	4615      	mov	r5, r2
 802c7a6:	b933      	cbnz	r3, 802c7b6 <_free_r+0x32>
 802c7a8:	6063      	str	r3, [r4, #4]
 802c7aa:	6014      	str	r4, [r2, #0]
 802c7ac:	b003      	add	sp, #12
 802c7ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c7b2:	f000 bf55 	b.w	802d660 <__malloc_unlock>
 802c7b6:	42a3      	cmp	r3, r4
 802c7b8:	d90b      	bls.n	802c7d2 <_free_r+0x4e>
 802c7ba:	6821      	ldr	r1, [r4, #0]
 802c7bc:	1862      	adds	r2, r4, r1
 802c7be:	4293      	cmp	r3, r2
 802c7c0:	bf04      	itt	eq
 802c7c2:	681a      	ldreq	r2, [r3, #0]
 802c7c4:	685b      	ldreq	r3, [r3, #4]
 802c7c6:	6063      	str	r3, [r4, #4]
 802c7c8:	bf04      	itt	eq
 802c7ca:	1852      	addeq	r2, r2, r1
 802c7cc:	6022      	streq	r2, [r4, #0]
 802c7ce:	602c      	str	r4, [r5, #0]
 802c7d0:	e7ec      	b.n	802c7ac <_free_r+0x28>
 802c7d2:	461a      	mov	r2, r3
 802c7d4:	685b      	ldr	r3, [r3, #4]
 802c7d6:	b10b      	cbz	r3, 802c7dc <_free_r+0x58>
 802c7d8:	42a3      	cmp	r3, r4
 802c7da:	d9fa      	bls.n	802c7d2 <_free_r+0x4e>
 802c7dc:	6811      	ldr	r1, [r2, #0]
 802c7de:	1855      	adds	r5, r2, r1
 802c7e0:	42a5      	cmp	r5, r4
 802c7e2:	d10b      	bne.n	802c7fc <_free_r+0x78>
 802c7e4:	6824      	ldr	r4, [r4, #0]
 802c7e6:	4421      	add	r1, r4
 802c7e8:	1854      	adds	r4, r2, r1
 802c7ea:	42a3      	cmp	r3, r4
 802c7ec:	6011      	str	r1, [r2, #0]
 802c7ee:	d1dd      	bne.n	802c7ac <_free_r+0x28>
 802c7f0:	681c      	ldr	r4, [r3, #0]
 802c7f2:	685b      	ldr	r3, [r3, #4]
 802c7f4:	6053      	str	r3, [r2, #4]
 802c7f6:	4421      	add	r1, r4
 802c7f8:	6011      	str	r1, [r2, #0]
 802c7fa:	e7d7      	b.n	802c7ac <_free_r+0x28>
 802c7fc:	d902      	bls.n	802c804 <_free_r+0x80>
 802c7fe:	230c      	movs	r3, #12
 802c800:	6003      	str	r3, [r0, #0]
 802c802:	e7d3      	b.n	802c7ac <_free_r+0x28>
 802c804:	6825      	ldr	r5, [r4, #0]
 802c806:	1961      	adds	r1, r4, r5
 802c808:	428b      	cmp	r3, r1
 802c80a:	bf04      	itt	eq
 802c80c:	6819      	ldreq	r1, [r3, #0]
 802c80e:	685b      	ldreq	r3, [r3, #4]
 802c810:	6063      	str	r3, [r4, #4]
 802c812:	bf04      	itt	eq
 802c814:	1949      	addeq	r1, r1, r5
 802c816:	6021      	streq	r1, [r4, #0]
 802c818:	6054      	str	r4, [r2, #4]
 802c81a:	e7c7      	b.n	802c7ac <_free_r+0x28>
 802c81c:	b003      	add	sp, #12
 802c81e:	bd30      	pop	{r4, r5, pc}
 802c820:	2000681c 	.word	0x2000681c

0802c824 <_malloc_r>:
 802c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c826:	1ccd      	adds	r5, r1, #3
 802c828:	f025 0503 	bic.w	r5, r5, #3
 802c82c:	3508      	adds	r5, #8
 802c82e:	2d0c      	cmp	r5, #12
 802c830:	bf38      	it	cc
 802c832:	250c      	movcc	r5, #12
 802c834:	2d00      	cmp	r5, #0
 802c836:	4606      	mov	r6, r0
 802c838:	db01      	blt.n	802c83e <_malloc_r+0x1a>
 802c83a:	42a9      	cmp	r1, r5
 802c83c:	d903      	bls.n	802c846 <_malloc_r+0x22>
 802c83e:	230c      	movs	r3, #12
 802c840:	6033      	str	r3, [r6, #0]
 802c842:	2000      	movs	r0, #0
 802c844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c846:	f000 ff05 	bl	802d654 <__malloc_lock>
 802c84a:	4921      	ldr	r1, [pc, #132]	; (802c8d0 <_malloc_r+0xac>)
 802c84c:	680a      	ldr	r2, [r1, #0]
 802c84e:	4614      	mov	r4, r2
 802c850:	b99c      	cbnz	r4, 802c87a <_malloc_r+0x56>
 802c852:	4f20      	ldr	r7, [pc, #128]	; (802c8d4 <_malloc_r+0xb0>)
 802c854:	683b      	ldr	r3, [r7, #0]
 802c856:	b923      	cbnz	r3, 802c862 <_malloc_r+0x3e>
 802c858:	4621      	mov	r1, r4
 802c85a:	4630      	mov	r0, r6
 802c85c:	f000 fb2a 	bl	802ceb4 <_sbrk_r>
 802c860:	6038      	str	r0, [r7, #0]
 802c862:	4629      	mov	r1, r5
 802c864:	4630      	mov	r0, r6
 802c866:	f000 fb25 	bl	802ceb4 <_sbrk_r>
 802c86a:	1c43      	adds	r3, r0, #1
 802c86c:	d123      	bne.n	802c8b6 <_malloc_r+0x92>
 802c86e:	230c      	movs	r3, #12
 802c870:	6033      	str	r3, [r6, #0]
 802c872:	4630      	mov	r0, r6
 802c874:	f000 fef4 	bl	802d660 <__malloc_unlock>
 802c878:	e7e3      	b.n	802c842 <_malloc_r+0x1e>
 802c87a:	6823      	ldr	r3, [r4, #0]
 802c87c:	1b5b      	subs	r3, r3, r5
 802c87e:	d417      	bmi.n	802c8b0 <_malloc_r+0x8c>
 802c880:	2b0b      	cmp	r3, #11
 802c882:	d903      	bls.n	802c88c <_malloc_r+0x68>
 802c884:	6023      	str	r3, [r4, #0]
 802c886:	441c      	add	r4, r3
 802c888:	6025      	str	r5, [r4, #0]
 802c88a:	e004      	b.n	802c896 <_malloc_r+0x72>
 802c88c:	6863      	ldr	r3, [r4, #4]
 802c88e:	42a2      	cmp	r2, r4
 802c890:	bf0c      	ite	eq
 802c892:	600b      	streq	r3, [r1, #0]
 802c894:	6053      	strne	r3, [r2, #4]
 802c896:	4630      	mov	r0, r6
 802c898:	f000 fee2 	bl	802d660 <__malloc_unlock>
 802c89c:	f104 000b 	add.w	r0, r4, #11
 802c8a0:	1d23      	adds	r3, r4, #4
 802c8a2:	f020 0007 	bic.w	r0, r0, #7
 802c8a6:	1ac2      	subs	r2, r0, r3
 802c8a8:	d0cc      	beq.n	802c844 <_malloc_r+0x20>
 802c8aa:	1a1b      	subs	r3, r3, r0
 802c8ac:	50a3      	str	r3, [r4, r2]
 802c8ae:	e7c9      	b.n	802c844 <_malloc_r+0x20>
 802c8b0:	4622      	mov	r2, r4
 802c8b2:	6864      	ldr	r4, [r4, #4]
 802c8b4:	e7cc      	b.n	802c850 <_malloc_r+0x2c>
 802c8b6:	1cc4      	adds	r4, r0, #3
 802c8b8:	f024 0403 	bic.w	r4, r4, #3
 802c8bc:	42a0      	cmp	r0, r4
 802c8be:	d0e3      	beq.n	802c888 <_malloc_r+0x64>
 802c8c0:	1a21      	subs	r1, r4, r0
 802c8c2:	4630      	mov	r0, r6
 802c8c4:	f000 faf6 	bl	802ceb4 <_sbrk_r>
 802c8c8:	3001      	adds	r0, #1
 802c8ca:	d1dd      	bne.n	802c888 <_malloc_r+0x64>
 802c8cc:	e7cf      	b.n	802c86e <_malloc_r+0x4a>
 802c8ce:	bf00      	nop
 802c8d0:	2000681c 	.word	0x2000681c
 802c8d4:	20006820 	.word	0x20006820

0802c8d8 <__sfputc_r>:
 802c8d8:	6893      	ldr	r3, [r2, #8]
 802c8da:	3b01      	subs	r3, #1
 802c8dc:	2b00      	cmp	r3, #0
 802c8de:	b410      	push	{r4}
 802c8e0:	6093      	str	r3, [r2, #8]
 802c8e2:	da08      	bge.n	802c8f6 <__sfputc_r+0x1e>
 802c8e4:	6994      	ldr	r4, [r2, #24]
 802c8e6:	42a3      	cmp	r3, r4
 802c8e8:	db01      	blt.n	802c8ee <__sfputc_r+0x16>
 802c8ea:	290a      	cmp	r1, #10
 802c8ec:	d103      	bne.n	802c8f6 <__sfputc_r+0x1e>
 802c8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c8f2:	f000 bb53 	b.w	802cf9c <__swbuf_r>
 802c8f6:	6813      	ldr	r3, [r2, #0]
 802c8f8:	1c58      	adds	r0, r3, #1
 802c8fa:	6010      	str	r0, [r2, #0]
 802c8fc:	7019      	strb	r1, [r3, #0]
 802c8fe:	4608      	mov	r0, r1
 802c900:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c904:	4770      	bx	lr

0802c906 <__sfputs_r>:
 802c906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c908:	4606      	mov	r6, r0
 802c90a:	460f      	mov	r7, r1
 802c90c:	4614      	mov	r4, r2
 802c90e:	18d5      	adds	r5, r2, r3
 802c910:	42ac      	cmp	r4, r5
 802c912:	d101      	bne.n	802c918 <__sfputs_r+0x12>
 802c914:	2000      	movs	r0, #0
 802c916:	e007      	b.n	802c928 <__sfputs_r+0x22>
 802c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c91c:	463a      	mov	r2, r7
 802c91e:	4630      	mov	r0, r6
 802c920:	f7ff ffda 	bl	802c8d8 <__sfputc_r>
 802c924:	1c43      	adds	r3, r0, #1
 802c926:	d1f3      	bne.n	802c910 <__sfputs_r+0xa>
 802c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c92c <_vfiprintf_r>:
 802c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c930:	460d      	mov	r5, r1
 802c932:	b09d      	sub	sp, #116	; 0x74
 802c934:	4614      	mov	r4, r2
 802c936:	4698      	mov	r8, r3
 802c938:	4606      	mov	r6, r0
 802c93a:	b118      	cbz	r0, 802c944 <_vfiprintf_r+0x18>
 802c93c:	6983      	ldr	r3, [r0, #24]
 802c93e:	b90b      	cbnz	r3, 802c944 <_vfiprintf_r+0x18>
 802c940:	f000 fd68 	bl	802d414 <__sinit>
 802c944:	4b89      	ldr	r3, [pc, #548]	; (802cb6c <_vfiprintf_r+0x240>)
 802c946:	429d      	cmp	r5, r3
 802c948:	d11b      	bne.n	802c982 <_vfiprintf_r+0x56>
 802c94a:	6875      	ldr	r5, [r6, #4]
 802c94c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c94e:	07d9      	lsls	r1, r3, #31
 802c950:	d405      	bmi.n	802c95e <_vfiprintf_r+0x32>
 802c952:	89ab      	ldrh	r3, [r5, #12]
 802c954:	059a      	lsls	r2, r3, #22
 802c956:	d402      	bmi.n	802c95e <_vfiprintf_r+0x32>
 802c958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c95a:	f000 fdf9 	bl	802d550 <__retarget_lock_acquire_recursive>
 802c95e:	89ab      	ldrh	r3, [r5, #12]
 802c960:	071b      	lsls	r3, r3, #28
 802c962:	d501      	bpl.n	802c968 <_vfiprintf_r+0x3c>
 802c964:	692b      	ldr	r3, [r5, #16]
 802c966:	b9eb      	cbnz	r3, 802c9a4 <_vfiprintf_r+0x78>
 802c968:	4629      	mov	r1, r5
 802c96a:	4630      	mov	r0, r6
 802c96c:	f000 fb68 	bl	802d040 <__swsetup_r>
 802c970:	b1c0      	cbz	r0, 802c9a4 <_vfiprintf_r+0x78>
 802c972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802c974:	07dc      	lsls	r4, r3, #31
 802c976:	d50e      	bpl.n	802c996 <_vfiprintf_r+0x6a>
 802c978:	f04f 30ff 	mov.w	r0, #4294967295
 802c97c:	b01d      	add	sp, #116	; 0x74
 802c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c982:	4b7b      	ldr	r3, [pc, #492]	; (802cb70 <_vfiprintf_r+0x244>)
 802c984:	429d      	cmp	r5, r3
 802c986:	d101      	bne.n	802c98c <_vfiprintf_r+0x60>
 802c988:	68b5      	ldr	r5, [r6, #8]
 802c98a:	e7df      	b.n	802c94c <_vfiprintf_r+0x20>
 802c98c:	4b79      	ldr	r3, [pc, #484]	; (802cb74 <_vfiprintf_r+0x248>)
 802c98e:	429d      	cmp	r5, r3
 802c990:	bf08      	it	eq
 802c992:	68f5      	ldreq	r5, [r6, #12]
 802c994:	e7da      	b.n	802c94c <_vfiprintf_r+0x20>
 802c996:	89ab      	ldrh	r3, [r5, #12]
 802c998:	0598      	lsls	r0, r3, #22
 802c99a:	d4ed      	bmi.n	802c978 <_vfiprintf_r+0x4c>
 802c99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802c99e:	f000 fdd9 	bl	802d554 <__retarget_lock_release_recursive>
 802c9a2:	e7e9      	b.n	802c978 <_vfiprintf_r+0x4c>
 802c9a4:	2300      	movs	r3, #0
 802c9a6:	9309      	str	r3, [sp, #36]	; 0x24
 802c9a8:	2320      	movs	r3, #32
 802c9aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 802c9b2:	2330      	movs	r3, #48	; 0x30
 802c9b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802cb78 <_vfiprintf_r+0x24c>
 802c9b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c9bc:	f04f 0901 	mov.w	r9, #1
 802c9c0:	4623      	mov	r3, r4
 802c9c2:	469a      	mov	sl, r3
 802c9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c9c8:	b10a      	cbz	r2, 802c9ce <_vfiprintf_r+0xa2>
 802c9ca:	2a25      	cmp	r2, #37	; 0x25
 802c9cc:	d1f9      	bne.n	802c9c2 <_vfiprintf_r+0x96>
 802c9ce:	ebba 0b04 	subs.w	fp, sl, r4
 802c9d2:	d00b      	beq.n	802c9ec <_vfiprintf_r+0xc0>
 802c9d4:	465b      	mov	r3, fp
 802c9d6:	4622      	mov	r2, r4
 802c9d8:	4629      	mov	r1, r5
 802c9da:	4630      	mov	r0, r6
 802c9dc:	f7ff ff93 	bl	802c906 <__sfputs_r>
 802c9e0:	3001      	adds	r0, #1
 802c9e2:	f000 80aa 	beq.w	802cb3a <_vfiprintf_r+0x20e>
 802c9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c9e8:	445a      	add	r2, fp
 802c9ea:	9209      	str	r2, [sp, #36]	; 0x24
 802c9ec:	f89a 3000 	ldrb.w	r3, [sl]
 802c9f0:	2b00      	cmp	r3, #0
 802c9f2:	f000 80a2 	beq.w	802cb3a <_vfiprintf_r+0x20e>
 802c9f6:	2300      	movs	r3, #0
 802c9f8:	f04f 32ff 	mov.w	r2, #4294967295
 802c9fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ca00:	f10a 0a01 	add.w	sl, sl, #1
 802ca04:	9304      	str	r3, [sp, #16]
 802ca06:	9307      	str	r3, [sp, #28]
 802ca08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ca0c:	931a      	str	r3, [sp, #104]	; 0x68
 802ca0e:	4654      	mov	r4, sl
 802ca10:	2205      	movs	r2, #5
 802ca12:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ca16:	4858      	ldr	r0, [pc, #352]	; (802cb78 <_vfiprintf_r+0x24c>)
 802ca18:	f7d3 fbfa 	bl	8000210 <memchr>
 802ca1c:	9a04      	ldr	r2, [sp, #16]
 802ca1e:	b9d8      	cbnz	r0, 802ca58 <_vfiprintf_r+0x12c>
 802ca20:	06d1      	lsls	r1, r2, #27
 802ca22:	bf44      	itt	mi
 802ca24:	2320      	movmi	r3, #32
 802ca26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ca2a:	0713      	lsls	r3, r2, #28
 802ca2c:	bf44      	itt	mi
 802ca2e:	232b      	movmi	r3, #43	; 0x2b
 802ca30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ca34:	f89a 3000 	ldrb.w	r3, [sl]
 802ca38:	2b2a      	cmp	r3, #42	; 0x2a
 802ca3a:	d015      	beq.n	802ca68 <_vfiprintf_r+0x13c>
 802ca3c:	9a07      	ldr	r2, [sp, #28]
 802ca3e:	4654      	mov	r4, sl
 802ca40:	2000      	movs	r0, #0
 802ca42:	f04f 0c0a 	mov.w	ip, #10
 802ca46:	4621      	mov	r1, r4
 802ca48:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ca4c:	3b30      	subs	r3, #48	; 0x30
 802ca4e:	2b09      	cmp	r3, #9
 802ca50:	d94e      	bls.n	802caf0 <_vfiprintf_r+0x1c4>
 802ca52:	b1b0      	cbz	r0, 802ca82 <_vfiprintf_r+0x156>
 802ca54:	9207      	str	r2, [sp, #28]
 802ca56:	e014      	b.n	802ca82 <_vfiprintf_r+0x156>
 802ca58:	eba0 0308 	sub.w	r3, r0, r8
 802ca5c:	fa09 f303 	lsl.w	r3, r9, r3
 802ca60:	4313      	orrs	r3, r2
 802ca62:	9304      	str	r3, [sp, #16]
 802ca64:	46a2      	mov	sl, r4
 802ca66:	e7d2      	b.n	802ca0e <_vfiprintf_r+0xe2>
 802ca68:	9b03      	ldr	r3, [sp, #12]
 802ca6a:	1d19      	adds	r1, r3, #4
 802ca6c:	681b      	ldr	r3, [r3, #0]
 802ca6e:	9103      	str	r1, [sp, #12]
 802ca70:	2b00      	cmp	r3, #0
 802ca72:	bfbb      	ittet	lt
 802ca74:	425b      	neglt	r3, r3
 802ca76:	f042 0202 	orrlt.w	r2, r2, #2
 802ca7a:	9307      	strge	r3, [sp, #28]
 802ca7c:	9307      	strlt	r3, [sp, #28]
 802ca7e:	bfb8      	it	lt
 802ca80:	9204      	strlt	r2, [sp, #16]
 802ca82:	7823      	ldrb	r3, [r4, #0]
 802ca84:	2b2e      	cmp	r3, #46	; 0x2e
 802ca86:	d10c      	bne.n	802caa2 <_vfiprintf_r+0x176>
 802ca88:	7863      	ldrb	r3, [r4, #1]
 802ca8a:	2b2a      	cmp	r3, #42	; 0x2a
 802ca8c:	d135      	bne.n	802cafa <_vfiprintf_r+0x1ce>
 802ca8e:	9b03      	ldr	r3, [sp, #12]
 802ca90:	1d1a      	adds	r2, r3, #4
 802ca92:	681b      	ldr	r3, [r3, #0]
 802ca94:	9203      	str	r2, [sp, #12]
 802ca96:	2b00      	cmp	r3, #0
 802ca98:	bfb8      	it	lt
 802ca9a:	f04f 33ff 	movlt.w	r3, #4294967295
 802ca9e:	3402      	adds	r4, #2
 802caa0:	9305      	str	r3, [sp, #20]
 802caa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802cb88 <_vfiprintf_r+0x25c>
 802caa6:	7821      	ldrb	r1, [r4, #0]
 802caa8:	2203      	movs	r2, #3
 802caaa:	4650      	mov	r0, sl
 802caac:	f7d3 fbb0 	bl	8000210 <memchr>
 802cab0:	b140      	cbz	r0, 802cac4 <_vfiprintf_r+0x198>
 802cab2:	2340      	movs	r3, #64	; 0x40
 802cab4:	eba0 000a 	sub.w	r0, r0, sl
 802cab8:	fa03 f000 	lsl.w	r0, r3, r0
 802cabc:	9b04      	ldr	r3, [sp, #16]
 802cabe:	4303      	orrs	r3, r0
 802cac0:	3401      	adds	r4, #1
 802cac2:	9304      	str	r3, [sp, #16]
 802cac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cac8:	482c      	ldr	r0, [pc, #176]	; (802cb7c <_vfiprintf_r+0x250>)
 802caca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802cace:	2206      	movs	r2, #6
 802cad0:	f7d3 fb9e 	bl	8000210 <memchr>
 802cad4:	2800      	cmp	r0, #0
 802cad6:	d03f      	beq.n	802cb58 <_vfiprintf_r+0x22c>
 802cad8:	4b29      	ldr	r3, [pc, #164]	; (802cb80 <_vfiprintf_r+0x254>)
 802cada:	bb1b      	cbnz	r3, 802cb24 <_vfiprintf_r+0x1f8>
 802cadc:	9b03      	ldr	r3, [sp, #12]
 802cade:	3307      	adds	r3, #7
 802cae0:	f023 0307 	bic.w	r3, r3, #7
 802cae4:	3308      	adds	r3, #8
 802cae6:	9303      	str	r3, [sp, #12]
 802cae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802caea:	443b      	add	r3, r7
 802caec:	9309      	str	r3, [sp, #36]	; 0x24
 802caee:	e767      	b.n	802c9c0 <_vfiprintf_r+0x94>
 802caf0:	fb0c 3202 	mla	r2, ip, r2, r3
 802caf4:	460c      	mov	r4, r1
 802caf6:	2001      	movs	r0, #1
 802caf8:	e7a5      	b.n	802ca46 <_vfiprintf_r+0x11a>
 802cafa:	2300      	movs	r3, #0
 802cafc:	3401      	adds	r4, #1
 802cafe:	9305      	str	r3, [sp, #20]
 802cb00:	4619      	mov	r1, r3
 802cb02:	f04f 0c0a 	mov.w	ip, #10
 802cb06:	4620      	mov	r0, r4
 802cb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cb0c:	3a30      	subs	r2, #48	; 0x30
 802cb0e:	2a09      	cmp	r2, #9
 802cb10:	d903      	bls.n	802cb1a <_vfiprintf_r+0x1ee>
 802cb12:	2b00      	cmp	r3, #0
 802cb14:	d0c5      	beq.n	802caa2 <_vfiprintf_r+0x176>
 802cb16:	9105      	str	r1, [sp, #20]
 802cb18:	e7c3      	b.n	802caa2 <_vfiprintf_r+0x176>
 802cb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 802cb1e:	4604      	mov	r4, r0
 802cb20:	2301      	movs	r3, #1
 802cb22:	e7f0      	b.n	802cb06 <_vfiprintf_r+0x1da>
 802cb24:	ab03      	add	r3, sp, #12
 802cb26:	9300      	str	r3, [sp, #0]
 802cb28:	462a      	mov	r2, r5
 802cb2a:	4b16      	ldr	r3, [pc, #88]	; (802cb84 <_vfiprintf_r+0x258>)
 802cb2c:	a904      	add	r1, sp, #16
 802cb2e:	4630      	mov	r0, r6
 802cb30:	f3af 8000 	nop.w
 802cb34:	4607      	mov	r7, r0
 802cb36:	1c78      	adds	r0, r7, #1
 802cb38:	d1d6      	bne.n	802cae8 <_vfiprintf_r+0x1bc>
 802cb3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cb3c:	07d9      	lsls	r1, r3, #31
 802cb3e:	d405      	bmi.n	802cb4c <_vfiprintf_r+0x220>
 802cb40:	89ab      	ldrh	r3, [r5, #12]
 802cb42:	059a      	lsls	r2, r3, #22
 802cb44:	d402      	bmi.n	802cb4c <_vfiprintf_r+0x220>
 802cb46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802cb48:	f000 fd04 	bl	802d554 <__retarget_lock_release_recursive>
 802cb4c:	89ab      	ldrh	r3, [r5, #12]
 802cb4e:	065b      	lsls	r3, r3, #25
 802cb50:	f53f af12 	bmi.w	802c978 <_vfiprintf_r+0x4c>
 802cb54:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cb56:	e711      	b.n	802c97c <_vfiprintf_r+0x50>
 802cb58:	ab03      	add	r3, sp, #12
 802cb5a:	9300      	str	r3, [sp, #0]
 802cb5c:	462a      	mov	r2, r5
 802cb5e:	4b09      	ldr	r3, [pc, #36]	; (802cb84 <_vfiprintf_r+0x258>)
 802cb60:	a904      	add	r1, sp, #16
 802cb62:	4630      	mov	r0, r6
 802cb64:	f000 f880 	bl	802cc68 <_printf_i>
 802cb68:	e7e4      	b.n	802cb34 <_vfiprintf_r+0x208>
 802cb6a:	bf00      	nop
 802cb6c:	08032544 	.word	0x08032544
 802cb70:	08032564 	.word	0x08032564
 802cb74:	08032524 	.word	0x08032524
 802cb78:	080324ec 	.word	0x080324ec
 802cb7c:	080324f6 	.word	0x080324f6
 802cb80:	00000000 	.word	0x00000000
 802cb84:	0802c907 	.word	0x0802c907
 802cb88:	080324f2 	.word	0x080324f2

0802cb8c <_printf_common>:
 802cb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cb90:	4616      	mov	r6, r2
 802cb92:	4699      	mov	r9, r3
 802cb94:	688a      	ldr	r2, [r1, #8]
 802cb96:	690b      	ldr	r3, [r1, #16]
 802cb98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cb9c:	4293      	cmp	r3, r2
 802cb9e:	bfb8      	it	lt
 802cba0:	4613      	movlt	r3, r2
 802cba2:	6033      	str	r3, [r6, #0]
 802cba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cba8:	4607      	mov	r7, r0
 802cbaa:	460c      	mov	r4, r1
 802cbac:	b10a      	cbz	r2, 802cbb2 <_printf_common+0x26>
 802cbae:	3301      	adds	r3, #1
 802cbb0:	6033      	str	r3, [r6, #0]
 802cbb2:	6823      	ldr	r3, [r4, #0]
 802cbb4:	0699      	lsls	r1, r3, #26
 802cbb6:	bf42      	ittt	mi
 802cbb8:	6833      	ldrmi	r3, [r6, #0]
 802cbba:	3302      	addmi	r3, #2
 802cbbc:	6033      	strmi	r3, [r6, #0]
 802cbbe:	6825      	ldr	r5, [r4, #0]
 802cbc0:	f015 0506 	ands.w	r5, r5, #6
 802cbc4:	d106      	bne.n	802cbd4 <_printf_common+0x48>
 802cbc6:	f104 0a19 	add.w	sl, r4, #25
 802cbca:	68e3      	ldr	r3, [r4, #12]
 802cbcc:	6832      	ldr	r2, [r6, #0]
 802cbce:	1a9b      	subs	r3, r3, r2
 802cbd0:	42ab      	cmp	r3, r5
 802cbd2:	dc26      	bgt.n	802cc22 <_printf_common+0x96>
 802cbd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cbd8:	1e13      	subs	r3, r2, #0
 802cbda:	6822      	ldr	r2, [r4, #0]
 802cbdc:	bf18      	it	ne
 802cbde:	2301      	movne	r3, #1
 802cbe0:	0692      	lsls	r2, r2, #26
 802cbe2:	d42b      	bmi.n	802cc3c <_printf_common+0xb0>
 802cbe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cbe8:	4649      	mov	r1, r9
 802cbea:	4638      	mov	r0, r7
 802cbec:	47c0      	blx	r8
 802cbee:	3001      	adds	r0, #1
 802cbf0:	d01e      	beq.n	802cc30 <_printf_common+0xa4>
 802cbf2:	6823      	ldr	r3, [r4, #0]
 802cbf4:	68e5      	ldr	r5, [r4, #12]
 802cbf6:	6832      	ldr	r2, [r6, #0]
 802cbf8:	f003 0306 	and.w	r3, r3, #6
 802cbfc:	2b04      	cmp	r3, #4
 802cbfe:	bf08      	it	eq
 802cc00:	1aad      	subeq	r5, r5, r2
 802cc02:	68a3      	ldr	r3, [r4, #8]
 802cc04:	6922      	ldr	r2, [r4, #16]
 802cc06:	bf0c      	ite	eq
 802cc08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cc0c:	2500      	movne	r5, #0
 802cc0e:	4293      	cmp	r3, r2
 802cc10:	bfc4      	itt	gt
 802cc12:	1a9b      	subgt	r3, r3, r2
 802cc14:	18ed      	addgt	r5, r5, r3
 802cc16:	2600      	movs	r6, #0
 802cc18:	341a      	adds	r4, #26
 802cc1a:	42b5      	cmp	r5, r6
 802cc1c:	d11a      	bne.n	802cc54 <_printf_common+0xc8>
 802cc1e:	2000      	movs	r0, #0
 802cc20:	e008      	b.n	802cc34 <_printf_common+0xa8>
 802cc22:	2301      	movs	r3, #1
 802cc24:	4652      	mov	r2, sl
 802cc26:	4649      	mov	r1, r9
 802cc28:	4638      	mov	r0, r7
 802cc2a:	47c0      	blx	r8
 802cc2c:	3001      	adds	r0, #1
 802cc2e:	d103      	bne.n	802cc38 <_printf_common+0xac>
 802cc30:	f04f 30ff 	mov.w	r0, #4294967295
 802cc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cc38:	3501      	adds	r5, #1
 802cc3a:	e7c6      	b.n	802cbca <_printf_common+0x3e>
 802cc3c:	18e1      	adds	r1, r4, r3
 802cc3e:	1c5a      	adds	r2, r3, #1
 802cc40:	2030      	movs	r0, #48	; 0x30
 802cc42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cc46:	4422      	add	r2, r4
 802cc48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cc4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cc50:	3302      	adds	r3, #2
 802cc52:	e7c7      	b.n	802cbe4 <_printf_common+0x58>
 802cc54:	2301      	movs	r3, #1
 802cc56:	4622      	mov	r2, r4
 802cc58:	4649      	mov	r1, r9
 802cc5a:	4638      	mov	r0, r7
 802cc5c:	47c0      	blx	r8
 802cc5e:	3001      	adds	r0, #1
 802cc60:	d0e6      	beq.n	802cc30 <_printf_common+0xa4>
 802cc62:	3601      	adds	r6, #1
 802cc64:	e7d9      	b.n	802cc1a <_printf_common+0x8e>
	...

0802cc68 <_printf_i>:
 802cc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cc6c:	460c      	mov	r4, r1
 802cc6e:	4691      	mov	r9, r2
 802cc70:	7e27      	ldrb	r7, [r4, #24]
 802cc72:	990c      	ldr	r1, [sp, #48]	; 0x30
 802cc74:	2f78      	cmp	r7, #120	; 0x78
 802cc76:	4680      	mov	r8, r0
 802cc78:	469a      	mov	sl, r3
 802cc7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cc7e:	d807      	bhi.n	802cc90 <_printf_i+0x28>
 802cc80:	2f62      	cmp	r7, #98	; 0x62
 802cc82:	d80a      	bhi.n	802cc9a <_printf_i+0x32>
 802cc84:	2f00      	cmp	r7, #0
 802cc86:	f000 80d8 	beq.w	802ce3a <_printf_i+0x1d2>
 802cc8a:	2f58      	cmp	r7, #88	; 0x58
 802cc8c:	f000 80a3 	beq.w	802cdd6 <_printf_i+0x16e>
 802cc90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802cc94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802cc98:	e03a      	b.n	802cd10 <_printf_i+0xa8>
 802cc9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802cc9e:	2b15      	cmp	r3, #21
 802cca0:	d8f6      	bhi.n	802cc90 <_printf_i+0x28>
 802cca2:	a001      	add	r0, pc, #4	; (adr r0, 802cca8 <_printf_i+0x40>)
 802cca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802cca8:	0802cd01 	.word	0x0802cd01
 802ccac:	0802cd15 	.word	0x0802cd15
 802ccb0:	0802cc91 	.word	0x0802cc91
 802ccb4:	0802cc91 	.word	0x0802cc91
 802ccb8:	0802cc91 	.word	0x0802cc91
 802ccbc:	0802cc91 	.word	0x0802cc91
 802ccc0:	0802cd15 	.word	0x0802cd15
 802ccc4:	0802cc91 	.word	0x0802cc91
 802ccc8:	0802cc91 	.word	0x0802cc91
 802cccc:	0802cc91 	.word	0x0802cc91
 802ccd0:	0802cc91 	.word	0x0802cc91
 802ccd4:	0802ce21 	.word	0x0802ce21
 802ccd8:	0802cd45 	.word	0x0802cd45
 802ccdc:	0802ce03 	.word	0x0802ce03
 802cce0:	0802cc91 	.word	0x0802cc91
 802cce4:	0802cc91 	.word	0x0802cc91
 802cce8:	0802ce43 	.word	0x0802ce43
 802ccec:	0802cc91 	.word	0x0802cc91
 802ccf0:	0802cd45 	.word	0x0802cd45
 802ccf4:	0802cc91 	.word	0x0802cc91
 802ccf8:	0802cc91 	.word	0x0802cc91
 802ccfc:	0802ce0b 	.word	0x0802ce0b
 802cd00:	680b      	ldr	r3, [r1, #0]
 802cd02:	1d1a      	adds	r2, r3, #4
 802cd04:	681b      	ldr	r3, [r3, #0]
 802cd06:	600a      	str	r2, [r1, #0]
 802cd08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802cd0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802cd10:	2301      	movs	r3, #1
 802cd12:	e0a3      	b.n	802ce5c <_printf_i+0x1f4>
 802cd14:	6825      	ldr	r5, [r4, #0]
 802cd16:	6808      	ldr	r0, [r1, #0]
 802cd18:	062e      	lsls	r6, r5, #24
 802cd1a:	f100 0304 	add.w	r3, r0, #4
 802cd1e:	d50a      	bpl.n	802cd36 <_printf_i+0xce>
 802cd20:	6805      	ldr	r5, [r0, #0]
 802cd22:	600b      	str	r3, [r1, #0]
 802cd24:	2d00      	cmp	r5, #0
 802cd26:	da03      	bge.n	802cd30 <_printf_i+0xc8>
 802cd28:	232d      	movs	r3, #45	; 0x2d
 802cd2a:	426d      	negs	r5, r5
 802cd2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cd30:	485e      	ldr	r0, [pc, #376]	; (802ceac <_printf_i+0x244>)
 802cd32:	230a      	movs	r3, #10
 802cd34:	e019      	b.n	802cd6a <_printf_i+0x102>
 802cd36:	f015 0f40 	tst.w	r5, #64	; 0x40
 802cd3a:	6805      	ldr	r5, [r0, #0]
 802cd3c:	600b      	str	r3, [r1, #0]
 802cd3e:	bf18      	it	ne
 802cd40:	b22d      	sxthne	r5, r5
 802cd42:	e7ef      	b.n	802cd24 <_printf_i+0xbc>
 802cd44:	680b      	ldr	r3, [r1, #0]
 802cd46:	6825      	ldr	r5, [r4, #0]
 802cd48:	1d18      	adds	r0, r3, #4
 802cd4a:	6008      	str	r0, [r1, #0]
 802cd4c:	0628      	lsls	r0, r5, #24
 802cd4e:	d501      	bpl.n	802cd54 <_printf_i+0xec>
 802cd50:	681d      	ldr	r5, [r3, #0]
 802cd52:	e002      	b.n	802cd5a <_printf_i+0xf2>
 802cd54:	0669      	lsls	r1, r5, #25
 802cd56:	d5fb      	bpl.n	802cd50 <_printf_i+0xe8>
 802cd58:	881d      	ldrh	r5, [r3, #0]
 802cd5a:	4854      	ldr	r0, [pc, #336]	; (802ceac <_printf_i+0x244>)
 802cd5c:	2f6f      	cmp	r7, #111	; 0x6f
 802cd5e:	bf0c      	ite	eq
 802cd60:	2308      	moveq	r3, #8
 802cd62:	230a      	movne	r3, #10
 802cd64:	2100      	movs	r1, #0
 802cd66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802cd6a:	6866      	ldr	r6, [r4, #4]
 802cd6c:	60a6      	str	r6, [r4, #8]
 802cd6e:	2e00      	cmp	r6, #0
 802cd70:	bfa2      	ittt	ge
 802cd72:	6821      	ldrge	r1, [r4, #0]
 802cd74:	f021 0104 	bicge.w	r1, r1, #4
 802cd78:	6021      	strge	r1, [r4, #0]
 802cd7a:	b90d      	cbnz	r5, 802cd80 <_printf_i+0x118>
 802cd7c:	2e00      	cmp	r6, #0
 802cd7e:	d04d      	beq.n	802ce1c <_printf_i+0x1b4>
 802cd80:	4616      	mov	r6, r2
 802cd82:	fbb5 f1f3 	udiv	r1, r5, r3
 802cd86:	fb03 5711 	mls	r7, r3, r1, r5
 802cd8a:	5dc7      	ldrb	r7, [r0, r7]
 802cd8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802cd90:	462f      	mov	r7, r5
 802cd92:	42bb      	cmp	r3, r7
 802cd94:	460d      	mov	r5, r1
 802cd96:	d9f4      	bls.n	802cd82 <_printf_i+0x11a>
 802cd98:	2b08      	cmp	r3, #8
 802cd9a:	d10b      	bne.n	802cdb4 <_printf_i+0x14c>
 802cd9c:	6823      	ldr	r3, [r4, #0]
 802cd9e:	07df      	lsls	r7, r3, #31
 802cda0:	d508      	bpl.n	802cdb4 <_printf_i+0x14c>
 802cda2:	6923      	ldr	r3, [r4, #16]
 802cda4:	6861      	ldr	r1, [r4, #4]
 802cda6:	4299      	cmp	r1, r3
 802cda8:	bfde      	ittt	le
 802cdaa:	2330      	movle	r3, #48	; 0x30
 802cdac:	f806 3c01 	strble.w	r3, [r6, #-1]
 802cdb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 802cdb4:	1b92      	subs	r2, r2, r6
 802cdb6:	6122      	str	r2, [r4, #16]
 802cdb8:	f8cd a000 	str.w	sl, [sp]
 802cdbc:	464b      	mov	r3, r9
 802cdbe:	aa03      	add	r2, sp, #12
 802cdc0:	4621      	mov	r1, r4
 802cdc2:	4640      	mov	r0, r8
 802cdc4:	f7ff fee2 	bl	802cb8c <_printf_common>
 802cdc8:	3001      	adds	r0, #1
 802cdca:	d14c      	bne.n	802ce66 <_printf_i+0x1fe>
 802cdcc:	f04f 30ff 	mov.w	r0, #4294967295
 802cdd0:	b004      	add	sp, #16
 802cdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cdd6:	4835      	ldr	r0, [pc, #212]	; (802ceac <_printf_i+0x244>)
 802cdd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802cddc:	6823      	ldr	r3, [r4, #0]
 802cdde:	680e      	ldr	r6, [r1, #0]
 802cde0:	061f      	lsls	r7, r3, #24
 802cde2:	f856 5b04 	ldr.w	r5, [r6], #4
 802cde6:	600e      	str	r6, [r1, #0]
 802cde8:	d514      	bpl.n	802ce14 <_printf_i+0x1ac>
 802cdea:	07d9      	lsls	r1, r3, #31
 802cdec:	bf44      	itt	mi
 802cdee:	f043 0320 	orrmi.w	r3, r3, #32
 802cdf2:	6023      	strmi	r3, [r4, #0]
 802cdf4:	b91d      	cbnz	r5, 802cdfe <_printf_i+0x196>
 802cdf6:	6823      	ldr	r3, [r4, #0]
 802cdf8:	f023 0320 	bic.w	r3, r3, #32
 802cdfc:	6023      	str	r3, [r4, #0]
 802cdfe:	2310      	movs	r3, #16
 802ce00:	e7b0      	b.n	802cd64 <_printf_i+0xfc>
 802ce02:	6823      	ldr	r3, [r4, #0]
 802ce04:	f043 0320 	orr.w	r3, r3, #32
 802ce08:	6023      	str	r3, [r4, #0]
 802ce0a:	2378      	movs	r3, #120	; 0x78
 802ce0c:	4828      	ldr	r0, [pc, #160]	; (802ceb0 <_printf_i+0x248>)
 802ce0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ce12:	e7e3      	b.n	802cddc <_printf_i+0x174>
 802ce14:	065e      	lsls	r6, r3, #25
 802ce16:	bf48      	it	mi
 802ce18:	b2ad      	uxthmi	r5, r5
 802ce1a:	e7e6      	b.n	802cdea <_printf_i+0x182>
 802ce1c:	4616      	mov	r6, r2
 802ce1e:	e7bb      	b.n	802cd98 <_printf_i+0x130>
 802ce20:	680b      	ldr	r3, [r1, #0]
 802ce22:	6826      	ldr	r6, [r4, #0]
 802ce24:	6960      	ldr	r0, [r4, #20]
 802ce26:	1d1d      	adds	r5, r3, #4
 802ce28:	600d      	str	r5, [r1, #0]
 802ce2a:	0635      	lsls	r5, r6, #24
 802ce2c:	681b      	ldr	r3, [r3, #0]
 802ce2e:	d501      	bpl.n	802ce34 <_printf_i+0x1cc>
 802ce30:	6018      	str	r0, [r3, #0]
 802ce32:	e002      	b.n	802ce3a <_printf_i+0x1d2>
 802ce34:	0671      	lsls	r1, r6, #25
 802ce36:	d5fb      	bpl.n	802ce30 <_printf_i+0x1c8>
 802ce38:	8018      	strh	r0, [r3, #0]
 802ce3a:	2300      	movs	r3, #0
 802ce3c:	6123      	str	r3, [r4, #16]
 802ce3e:	4616      	mov	r6, r2
 802ce40:	e7ba      	b.n	802cdb8 <_printf_i+0x150>
 802ce42:	680b      	ldr	r3, [r1, #0]
 802ce44:	1d1a      	adds	r2, r3, #4
 802ce46:	600a      	str	r2, [r1, #0]
 802ce48:	681e      	ldr	r6, [r3, #0]
 802ce4a:	6862      	ldr	r2, [r4, #4]
 802ce4c:	2100      	movs	r1, #0
 802ce4e:	4630      	mov	r0, r6
 802ce50:	f7d3 f9de 	bl	8000210 <memchr>
 802ce54:	b108      	cbz	r0, 802ce5a <_printf_i+0x1f2>
 802ce56:	1b80      	subs	r0, r0, r6
 802ce58:	6060      	str	r0, [r4, #4]
 802ce5a:	6863      	ldr	r3, [r4, #4]
 802ce5c:	6123      	str	r3, [r4, #16]
 802ce5e:	2300      	movs	r3, #0
 802ce60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ce64:	e7a8      	b.n	802cdb8 <_printf_i+0x150>
 802ce66:	6923      	ldr	r3, [r4, #16]
 802ce68:	4632      	mov	r2, r6
 802ce6a:	4649      	mov	r1, r9
 802ce6c:	4640      	mov	r0, r8
 802ce6e:	47d0      	blx	sl
 802ce70:	3001      	adds	r0, #1
 802ce72:	d0ab      	beq.n	802cdcc <_printf_i+0x164>
 802ce74:	6823      	ldr	r3, [r4, #0]
 802ce76:	079b      	lsls	r3, r3, #30
 802ce78:	d413      	bmi.n	802cea2 <_printf_i+0x23a>
 802ce7a:	68e0      	ldr	r0, [r4, #12]
 802ce7c:	9b03      	ldr	r3, [sp, #12]
 802ce7e:	4298      	cmp	r0, r3
 802ce80:	bfb8      	it	lt
 802ce82:	4618      	movlt	r0, r3
 802ce84:	e7a4      	b.n	802cdd0 <_printf_i+0x168>
 802ce86:	2301      	movs	r3, #1
 802ce88:	4632      	mov	r2, r6
 802ce8a:	4649      	mov	r1, r9
 802ce8c:	4640      	mov	r0, r8
 802ce8e:	47d0      	blx	sl
 802ce90:	3001      	adds	r0, #1
 802ce92:	d09b      	beq.n	802cdcc <_printf_i+0x164>
 802ce94:	3501      	adds	r5, #1
 802ce96:	68e3      	ldr	r3, [r4, #12]
 802ce98:	9903      	ldr	r1, [sp, #12]
 802ce9a:	1a5b      	subs	r3, r3, r1
 802ce9c:	42ab      	cmp	r3, r5
 802ce9e:	dcf2      	bgt.n	802ce86 <_printf_i+0x21e>
 802cea0:	e7eb      	b.n	802ce7a <_printf_i+0x212>
 802cea2:	2500      	movs	r5, #0
 802cea4:	f104 0619 	add.w	r6, r4, #25
 802cea8:	e7f5      	b.n	802ce96 <_printf_i+0x22e>
 802ceaa:	bf00      	nop
 802ceac:	080324fd 	.word	0x080324fd
 802ceb0:	0803250e 	.word	0x0803250e

0802ceb4 <_sbrk_r>:
 802ceb4:	b538      	push	{r3, r4, r5, lr}
 802ceb6:	4d06      	ldr	r5, [pc, #24]	; (802ced0 <_sbrk_r+0x1c>)
 802ceb8:	2300      	movs	r3, #0
 802ceba:	4604      	mov	r4, r0
 802cebc:	4608      	mov	r0, r1
 802cebe:	602b      	str	r3, [r5, #0]
 802cec0:	f7d4 ffc2 	bl	8001e48 <_sbrk>
 802cec4:	1c43      	adds	r3, r0, #1
 802cec6:	d102      	bne.n	802cece <_sbrk_r+0x1a>
 802cec8:	682b      	ldr	r3, [r5, #0]
 802ceca:	b103      	cbz	r3, 802cece <_sbrk_r+0x1a>
 802cecc:	6023      	str	r3, [r4, #0]
 802cece:	bd38      	pop	{r3, r4, r5, pc}
 802ced0:	20007e98 	.word	0x20007e98

0802ced4 <_raise_r>:
 802ced4:	291f      	cmp	r1, #31
 802ced6:	b538      	push	{r3, r4, r5, lr}
 802ced8:	4604      	mov	r4, r0
 802ceda:	460d      	mov	r5, r1
 802cedc:	d904      	bls.n	802cee8 <_raise_r+0x14>
 802cede:	2316      	movs	r3, #22
 802cee0:	6003      	str	r3, [r0, #0]
 802cee2:	f04f 30ff 	mov.w	r0, #4294967295
 802cee6:	bd38      	pop	{r3, r4, r5, pc}
 802cee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ceea:	b112      	cbz	r2, 802cef2 <_raise_r+0x1e>
 802ceec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cef0:	b94b      	cbnz	r3, 802cf06 <_raise_r+0x32>
 802cef2:	4620      	mov	r0, r4
 802cef4:	f000 f830 	bl	802cf58 <_getpid_r>
 802cef8:	462a      	mov	r2, r5
 802cefa:	4601      	mov	r1, r0
 802cefc:	4620      	mov	r0, r4
 802cefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cf02:	f000 b817 	b.w	802cf34 <_kill_r>
 802cf06:	2b01      	cmp	r3, #1
 802cf08:	d00a      	beq.n	802cf20 <_raise_r+0x4c>
 802cf0a:	1c59      	adds	r1, r3, #1
 802cf0c:	d103      	bne.n	802cf16 <_raise_r+0x42>
 802cf0e:	2316      	movs	r3, #22
 802cf10:	6003      	str	r3, [r0, #0]
 802cf12:	2001      	movs	r0, #1
 802cf14:	e7e7      	b.n	802cee6 <_raise_r+0x12>
 802cf16:	2400      	movs	r4, #0
 802cf18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802cf1c:	4628      	mov	r0, r5
 802cf1e:	4798      	blx	r3
 802cf20:	2000      	movs	r0, #0
 802cf22:	e7e0      	b.n	802cee6 <_raise_r+0x12>

0802cf24 <raise>:
 802cf24:	4b02      	ldr	r3, [pc, #8]	; (802cf30 <raise+0xc>)
 802cf26:	4601      	mov	r1, r0
 802cf28:	6818      	ldr	r0, [r3, #0]
 802cf2a:	f7ff bfd3 	b.w	802ced4 <_raise_r>
 802cf2e:	bf00      	nop
 802cf30:	200000a8 	.word	0x200000a8

0802cf34 <_kill_r>:
 802cf34:	b538      	push	{r3, r4, r5, lr}
 802cf36:	4d07      	ldr	r5, [pc, #28]	; (802cf54 <_kill_r+0x20>)
 802cf38:	2300      	movs	r3, #0
 802cf3a:	4604      	mov	r4, r0
 802cf3c:	4608      	mov	r0, r1
 802cf3e:	4611      	mov	r1, r2
 802cf40:	602b      	str	r3, [r5, #0]
 802cf42:	f7d4 fef9 	bl	8001d38 <_kill>
 802cf46:	1c43      	adds	r3, r0, #1
 802cf48:	d102      	bne.n	802cf50 <_kill_r+0x1c>
 802cf4a:	682b      	ldr	r3, [r5, #0]
 802cf4c:	b103      	cbz	r3, 802cf50 <_kill_r+0x1c>
 802cf4e:	6023      	str	r3, [r4, #0]
 802cf50:	bd38      	pop	{r3, r4, r5, pc}
 802cf52:	bf00      	nop
 802cf54:	20007e98 	.word	0x20007e98

0802cf58 <_getpid_r>:
 802cf58:	f7d4 bee6 	b.w	8001d28 <_getpid>

0802cf5c <siprintf>:
 802cf5c:	b40e      	push	{r1, r2, r3}
 802cf5e:	b500      	push	{lr}
 802cf60:	b09c      	sub	sp, #112	; 0x70
 802cf62:	ab1d      	add	r3, sp, #116	; 0x74
 802cf64:	9002      	str	r0, [sp, #8]
 802cf66:	9006      	str	r0, [sp, #24]
 802cf68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802cf6c:	4809      	ldr	r0, [pc, #36]	; (802cf94 <siprintf+0x38>)
 802cf6e:	9107      	str	r1, [sp, #28]
 802cf70:	9104      	str	r1, [sp, #16]
 802cf72:	4909      	ldr	r1, [pc, #36]	; (802cf98 <siprintf+0x3c>)
 802cf74:	f853 2b04 	ldr.w	r2, [r3], #4
 802cf78:	9105      	str	r1, [sp, #20]
 802cf7a:	6800      	ldr	r0, [r0, #0]
 802cf7c:	9301      	str	r3, [sp, #4]
 802cf7e:	a902      	add	r1, sp, #8
 802cf80:	f000 fbf6 	bl	802d770 <_svfiprintf_r>
 802cf84:	9b02      	ldr	r3, [sp, #8]
 802cf86:	2200      	movs	r2, #0
 802cf88:	701a      	strb	r2, [r3, #0]
 802cf8a:	b01c      	add	sp, #112	; 0x70
 802cf8c:	f85d eb04 	ldr.w	lr, [sp], #4
 802cf90:	b003      	add	sp, #12
 802cf92:	4770      	bx	lr
 802cf94:	200000a8 	.word	0x200000a8
 802cf98:	ffff0208 	.word	0xffff0208

0802cf9c <__swbuf_r>:
 802cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cf9e:	460e      	mov	r6, r1
 802cfa0:	4614      	mov	r4, r2
 802cfa2:	4605      	mov	r5, r0
 802cfa4:	b118      	cbz	r0, 802cfae <__swbuf_r+0x12>
 802cfa6:	6983      	ldr	r3, [r0, #24]
 802cfa8:	b90b      	cbnz	r3, 802cfae <__swbuf_r+0x12>
 802cfaa:	f000 fa33 	bl	802d414 <__sinit>
 802cfae:	4b21      	ldr	r3, [pc, #132]	; (802d034 <__swbuf_r+0x98>)
 802cfb0:	429c      	cmp	r4, r3
 802cfb2:	d12b      	bne.n	802d00c <__swbuf_r+0x70>
 802cfb4:	686c      	ldr	r4, [r5, #4]
 802cfb6:	69a3      	ldr	r3, [r4, #24]
 802cfb8:	60a3      	str	r3, [r4, #8]
 802cfba:	89a3      	ldrh	r3, [r4, #12]
 802cfbc:	071a      	lsls	r2, r3, #28
 802cfbe:	d52f      	bpl.n	802d020 <__swbuf_r+0x84>
 802cfc0:	6923      	ldr	r3, [r4, #16]
 802cfc2:	b36b      	cbz	r3, 802d020 <__swbuf_r+0x84>
 802cfc4:	6923      	ldr	r3, [r4, #16]
 802cfc6:	6820      	ldr	r0, [r4, #0]
 802cfc8:	1ac0      	subs	r0, r0, r3
 802cfca:	6963      	ldr	r3, [r4, #20]
 802cfcc:	b2f6      	uxtb	r6, r6
 802cfce:	4283      	cmp	r3, r0
 802cfd0:	4637      	mov	r7, r6
 802cfd2:	dc04      	bgt.n	802cfde <__swbuf_r+0x42>
 802cfd4:	4621      	mov	r1, r4
 802cfd6:	4628      	mov	r0, r5
 802cfd8:	f000 f988 	bl	802d2ec <_fflush_r>
 802cfdc:	bb30      	cbnz	r0, 802d02c <__swbuf_r+0x90>
 802cfde:	68a3      	ldr	r3, [r4, #8]
 802cfe0:	3b01      	subs	r3, #1
 802cfe2:	60a3      	str	r3, [r4, #8]
 802cfe4:	6823      	ldr	r3, [r4, #0]
 802cfe6:	1c5a      	adds	r2, r3, #1
 802cfe8:	6022      	str	r2, [r4, #0]
 802cfea:	701e      	strb	r6, [r3, #0]
 802cfec:	6963      	ldr	r3, [r4, #20]
 802cfee:	3001      	adds	r0, #1
 802cff0:	4283      	cmp	r3, r0
 802cff2:	d004      	beq.n	802cffe <__swbuf_r+0x62>
 802cff4:	89a3      	ldrh	r3, [r4, #12]
 802cff6:	07db      	lsls	r3, r3, #31
 802cff8:	d506      	bpl.n	802d008 <__swbuf_r+0x6c>
 802cffa:	2e0a      	cmp	r6, #10
 802cffc:	d104      	bne.n	802d008 <__swbuf_r+0x6c>
 802cffe:	4621      	mov	r1, r4
 802d000:	4628      	mov	r0, r5
 802d002:	f000 f973 	bl	802d2ec <_fflush_r>
 802d006:	b988      	cbnz	r0, 802d02c <__swbuf_r+0x90>
 802d008:	4638      	mov	r0, r7
 802d00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d00c:	4b0a      	ldr	r3, [pc, #40]	; (802d038 <__swbuf_r+0x9c>)
 802d00e:	429c      	cmp	r4, r3
 802d010:	d101      	bne.n	802d016 <__swbuf_r+0x7a>
 802d012:	68ac      	ldr	r4, [r5, #8]
 802d014:	e7cf      	b.n	802cfb6 <__swbuf_r+0x1a>
 802d016:	4b09      	ldr	r3, [pc, #36]	; (802d03c <__swbuf_r+0xa0>)
 802d018:	429c      	cmp	r4, r3
 802d01a:	bf08      	it	eq
 802d01c:	68ec      	ldreq	r4, [r5, #12]
 802d01e:	e7ca      	b.n	802cfb6 <__swbuf_r+0x1a>
 802d020:	4621      	mov	r1, r4
 802d022:	4628      	mov	r0, r5
 802d024:	f000 f80c 	bl	802d040 <__swsetup_r>
 802d028:	2800      	cmp	r0, #0
 802d02a:	d0cb      	beq.n	802cfc4 <__swbuf_r+0x28>
 802d02c:	f04f 37ff 	mov.w	r7, #4294967295
 802d030:	e7ea      	b.n	802d008 <__swbuf_r+0x6c>
 802d032:	bf00      	nop
 802d034:	08032544 	.word	0x08032544
 802d038:	08032564 	.word	0x08032564
 802d03c:	08032524 	.word	0x08032524

0802d040 <__swsetup_r>:
 802d040:	4b32      	ldr	r3, [pc, #200]	; (802d10c <__swsetup_r+0xcc>)
 802d042:	b570      	push	{r4, r5, r6, lr}
 802d044:	681d      	ldr	r5, [r3, #0]
 802d046:	4606      	mov	r6, r0
 802d048:	460c      	mov	r4, r1
 802d04a:	b125      	cbz	r5, 802d056 <__swsetup_r+0x16>
 802d04c:	69ab      	ldr	r3, [r5, #24]
 802d04e:	b913      	cbnz	r3, 802d056 <__swsetup_r+0x16>
 802d050:	4628      	mov	r0, r5
 802d052:	f000 f9df 	bl	802d414 <__sinit>
 802d056:	4b2e      	ldr	r3, [pc, #184]	; (802d110 <__swsetup_r+0xd0>)
 802d058:	429c      	cmp	r4, r3
 802d05a:	d10f      	bne.n	802d07c <__swsetup_r+0x3c>
 802d05c:	686c      	ldr	r4, [r5, #4]
 802d05e:	89a3      	ldrh	r3, [r4, #12]
 802d060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d064:	0719      	lsls	r1, r3, #28
 802d066:	d42c      	bmi.n	802d0c2 <__swsetup_r+0x82>
 802d068:	06dd      	lsls	r5, r3, #27
 802d06a:	d411      	bmi.n	802d090 <__swsetup_r+0x50>
 802d06c:	2309      	movs	r3, #9
 802d06e:	6033      	str	r3, [r6, #0]
 802d070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d074:	81a3      	strh	r3, [r4, #12]
 802d076:	f04f 30ff 	mov.w	r0, #4294967295
 802d07a:	e03e      	b.n	802d0fa <__swsetup_r+0xba>
 802d07c:	4b25      	ldr	r3, [pc, #148]	; (802d114 <__swsetup_r+0xd4>)
 802d07e:	429c      	cmp	r4, r3
 802d080:	d101      	bne.n	802d086 <__swsetup_r+0x46>
 802d082:	68ac      	ldr	r4, [r5, #8]
 802d084:	e7eb      	b.n	802d05e <__swsetup_r+0x1e>
 802d086:	4b24      	ldr	r3, [pc, #144]	; (802d118 <__swsetup_r+0xd8>)
 802d088:	429c      	cmp	r4, r3
 802d08a:	bf08      	it	eq
 802d08c:	68ec      	ldreq	r4, [r5, #12]
 802d08e:	e7e6      	b.n	802d05e <__swsetup_r+0x1e>
 802d090:	0758      	lsls	r0, r3, #29
 802d092:	d512      	bpl.n	802d0ba <__swsetup_r+0x7a>
 802d094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d096:	b141      	cbz	r1, 802d0aa <__swsetup_r+0x6a>
 802d098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d09c:	4299      	cmp	r1, r3
 802d09e:	d002      	beq.n	802d0a6 <__swsetup_r+0x66>
 802d0a0:	4630      	mov	r0, r6
 802d0a2:	f7ff fb6f 	bl	802c784 <_free_r>
 802d0a6:	2300      	movs	r3, #0
 802d0a8:	6363      	str	r3, [r4, #52]	; 0x34
 802d0aa:	89a3      	ldrh	r3, [r4, #12]
 802d0ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d0b0:	81a3      	strh	r3, [r4, #12]
 802d0b2:	2300      	movs	r3, #0
 802d0b4:	6063      	str	r3, [r4, #4]
 802d0b6:	6923      	ldr	r3, [r4, #16]
 802d0b8:	6023      	str	r3, [r4, #0]
 802d0ba:	89a3      	ldrh	r3, [r4, #12]
 802d0bc:	f043 0308 	orr.w	r3, r3, #8
 802d0c0:	81a3      	strh	r3, [r4, #12]
 802d0c2:	6923      	ldr	r3, [r4, #16]
 802d0c4:	b94b      	cbnz	r3, 802d0da <__swsetup_r+0x9a>
 802d0c6:	89a3      	ldrh	r3, [r4, #12]
 802d0c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d0cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d0d0:	d003      	beq.n	802d0da <__swsetup_r+0x9a>
 802d0d2:	4621      	mov	r1, r4
 802d0d4:	4630      	mov	r0, r6
 802d0d6:	f000 fa63 	bl	802d5a0 <__smakebuf_r>
 802d0da:	89a0      	ldrh	r0, [r4, #12]
 802d0dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d0e0:	f010 0301 	ands.w	r3, r0, #1
 802d0e4:	d00a      	beq.n	802d0fc <__swsetup_r+0xbc>
 802d0e6:	2300      	movs	r3, #0
 802d0e8:	60a3      	str	r3, [r4, #8]
 802d0ea:	6963      	ldr	r3, [r4, #20]
 802d0ec:	425b      	negs	r3, r3
 802d0ee:	61a3      	str	r3, [r4, #24]
 802d0f0:	6923      	ldr	r3, [r4, #16]
 802d0f2:	b943      	cbnz	r3, 802d106 <__swsetup_r+0xc6>
 802d0f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d0f8:	d1ba      	bne.n	802d070 <__swsetup_r+0x30>
 802d0fa:	bd70      	pop	{r4, r5, r6, pc}
 802d0fc:	0781      	lsls	r1, r0, #30
 802d0fe:	bf58      	it	pl
 802d100:	6963      	ldrpl	r3, [r4, #20]
 802d102:	60a3      	str	r3, [r4, #8]
 802d104:	e7f4      	b.n	802d0f0 <__swsetup_r+0xb0>
 802d106:	2000      	movs	r0, #0
 802d108:	e7f7      	b.n	802d0fa <__swsetup_r+0xba>
 802d10a:	bf00      	nop
 802d10c:	200000a8 	.word	0x200000a8
 802d110:	08032544 	.word	0x08032544
 802d114:	08032564 	.word	0x08032564
 802d118:	08032524 	.word	0x08032524

0802d11c <__register_exitproc>:
 802d11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d120:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802d1dc <__register_exitproc+0xc0>
 802d124:	4606      	mov	r6, r0
 802d126:	f8d8 0000 	ldr.w	r0, [r8]
 802d12a:	461f      	mov	r7, r3
 802d12c:	460d      	mov	r5, r1
 802d12e:	4691      	mov	r9, r2
 802d130:	f000 fa0e 	bl	802d550 <__retarget_lock_acquire_recursive>
 802d134:	4b25      	ldr	r3, [pc, #148]	; (802d1cc <__register_exitproc+0xb0>)
 802d136:	681c      	ldr	r4, [r3, #0]
 802d138:	b934      	cbnz	r4, 802d148 <__register_exitproc+0x2c>
 802d13a:	4c25      	ldr	r4, [pc, #148]	; (802d1d0 <__register_exitproc+0xb4>)
 802d13c:	601c      	str	r4, [r3, #0]
 802d13e:	4b25      	ldr	r3, [pc, #148]	; (802d1d4 <__register_exitproc+0xb8>)
 802d140:	b113      	cbz	r3, 802d148 <__register_exitproc+0x2c>
 802d142:	681b      	ldr	r3, [r3, #0]
 802d144:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802d148:	6863      	ldr	r3, [r4, #4]
 802d14a:	2b1f      	cmp	r3, #31
 802d14c:	dd07      	ble.n	802d15e <__register_exitproc+0x42>
 802d14e:	f8d8 0000 	ldr.w	r0, [r8]
 802d152:	f000 f9ff 	bl	802d554 <__retarget_lock_release_recursive>
 802d156:	f04f 30ff 	mov.w	r0, #4294967295
 802d15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d15e:	b34e      	cbz	r6, 802d1b4 <__register_exitproc+0x98>
 802d160:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802d164:	b988      	cbnz	r0, 802d18a <__register_exitproc+0x6e>
 802d166:	4b1c      	ldr	r3, [pc, #112]	; (802d1d8 <__register_exitproc+0xbc>)
 802d168:	b923      	cbnz	r3, 802d174 <__register_exitproc+0x58>
 802d16a:	f8d8 0000 	ldr.w	r0, [r8]
 802d16e:	f000 f9f0 	bl	802d552 <__retarget_lock_release>
 802d172:	e7f0      	b.n	802d156 <__register_exitproc+0x3a>
 802d174:	f44f 7084 	mov.w	r0, #264	; 0x108
 802d178:	f7ff fade 	bl	802c738 <malloc>
 802d17c:	2800      	cmp	r0, #0
 802d17e:	d0f4      	beq.n	802d16a <__register_exitproc+0x4e>
 802d180:	2300      	movs	r3, #0
 802d182:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802d186:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802d18a:	6863      	ldr	r3, [r4, #4]
 802d18c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802d190:	2201      	movs	r2, #1
 802d192:	409a      	lsls	r2, r3
 802d194:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802d198:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802d19c:	4313      	orrs	r3, r2
 802d19e:	2e02      	cmp	r6, #2
 802d1a0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802d1a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802d1a8:	bf02      	ittt	eq
 802d1aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802d1ae:	431a      	orreq	r2, r3
 802d1b0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802d1b4:	6863      	ldr	r3, [r4, #4]
 802d1b6:	f8d8 0000 	ldr.w	r0, [r8]
 802d1ba:	1c5a      	adds	r2, r3, #1
 802d1bc:	3302      	adds	r3, #2
 802d1be:	6062      	str	r2, [r4, #4]
 802d1c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802d1c4:	f000 f9c6 	bl	802d554 <__retarget_lock_release_recursive>
 802d1c8:	2000      	movs	r0, #0
 802d1ca:	e7c6      	b.n	802d15a <__register_exitproc+0x3e>
 802d1cc:	200069b8 	.word	0x200069b8
 802d1d0:	2000692c 	.word	0x2000692c
 802d1d4:	08032520 	.word	0x08032520
 802d1d8:	0802c739 	.word	0x0802c739
 802d1dc:	2000010c 	.word	0x2000010c

0802d1e0 <__sflush_r>:
 802d1e0:	898a      	ldrh	r2, [r1, #12]
 802d1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d1e6:	4605      	mov	r5, r0
 802d1e8:	0710      	lsls	r0, r2, #28
 802d1ea:	460c      	mov	r4, r1
 802d1ec:	d458      	bmi.n	802d2a0 <__sflush_r+0xc0>
 802d1ee:	684b      	ldr	r3, [r1, #4]
 802d1f0:	2b00      	cmp	r3, #0
 802d1f2:	dc05      	bgt.n	802d200 <__sflush_r+0x20>
 802d1f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d1f6:	2b00      	cmp	r3, #0
 802d1f8:	dc02      	bgt.n	802d200 <__sflush_r+0x20>
 802d1fa:	2000      	movs	r0, #0
 802d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d202:	2e00      	cmp	r6, #0
 802d204:	d0f9      	beq.n	802d1fa <__sflush_r+0x1a>
 802d206:	2300      	movs	r3, #0
 802d208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d20c:	682f      	ldr	r7, [r5, #0]
 802d20e:	602b      	str	r3, [r5, #0]
 802d210:	d032      	beq.n	802d278 <__sflush_r+0x98>
 802d212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d214:	89a3      	ldrh	r3, [r4, #12]
 802d216:	075a      	lsls	r2, r3, #29
 802d218:	d505      	bpl.n	802d226 <__sflush_r+0x46>
 802d21a:	6863      	ldr	r3, [r4, #4]
 802d21c:	1ac0      	subs	r0, r0, r3
 802d21e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d220:	b10b      	cbz	r3, 802d226 <__sflush_r+0x46>
 802d222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d224:	1ac0      	subs	r0, r0, r3
 802d226:	2300      	movs	r3, #0
 802d228:	4602      	mov	r2, r0
 802d22a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d22c:	6a21      	ldr	r1, [r4, #32]
 802d22e:	4628      	mov	r0, r5
 802d230:	47b0      	blx	r6
 802d232:	1c43      	adds	r3, r0, #1
 802d234:	89a3      	ldrh	r3, [r4, #12]
 802d236:	d106      	bne.n	802d246 <__sflush_r+0x66>
 802d238:	6829      	ldr	r1, [r5, #0]
 802d23a:	291d      	cmp	r1, #29
 802d23c:	d82c      	bhi.n	802d298 <__sflush_r+0xb8>
 802d23e:	4a2a      	ldr	r2, [pc, #168]	; (802d2e8 <__sflush_r+0x108>)
 802d240:	40ca      	lsrs	r2, r1
 802d242:	07d6      	lsls	r6, r2, #31
 802d244:	d528      	bpl.n	802d298 <__sflush_r+0xb8>
 802d246:	2200      	movs	r2, #0
 802d248:	6062      	str	r2, [r4, #4]
 802d24a:	04d9      	lsls	r1, r3, #19
 802d24c:	6922      	ldr	r2, [r4, #16]
 802d24e:	6022      	str	r2, [r4, #0]
 802d250:	d504      	bpl.n	802d25c <__sflush_r+0x7c>
 802d252:	1c42      	adds	r2, r0, #1
 802d254:	d101      	bne.n	802d25a <__sflush_r+0x7a>
 802d256:	682b      	ldr	r3, [r5, #0]
 802d258:	b903      	cbnz	r3, 802d25c <__sflush_r+0x7c>
 802d25a:	6560      	str	r0, [r4, #84]	; 0x54
 802d25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d25e:	602f      	str	r7, [r5, #0]
 802d260:	2900      	cmp	r1, #0
 802d262:	d0ca      	beq.n	802d1fa <__sflush_r+0x1a>
 802d264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d268:	4299      	cmp	r1, r3
 802d26a:	d002      	beq.n	802d272 <__sflush_r+0x92>
 802d26c:	4628      	mov	r0, r5
 802d26e:	f7ff fa89 	bl	802c784 <_free_r>
 802d272:	2000      	movs	r0, #0
 802d274:	6360      	str	r0, [r4, #52]	; 0x34
 802d276:	e7c1      	b.n	802d1fc <__sflush_r+0x1c>
 802d278:	6a21      	ldr	r1, [r4, #32]
 802d27a:	2301      	movs	r3, #1
 802d27c:	4628      	mov	r0, r5
 802d27e:	47b0      	blx	r6
 802d280:	1c41      	adds	r1, r0, #1
 802d282:	d1c7      	bne.n	802d214 <__sflush_r+0x34>
 802d284:	682b      	ldr	r3, [r5, #0]
 802d286:	2b00      	cmp	r3, #0
 802d288:	d0c4      	beq.n	802d214 <__sflush_r+0x34>
 802d28a:	2b1d      	cmp	r3, #29
 802d28c:	d001      	beq.n	802d292 <__sflush_r+0xb2>
 802d28e:	2b16      	cmp	r3, #22
 802d290:	d101      	bne.n	802d296 <__sflush_r+0xb6>
 802d292:	602f      	str	r7, [r5, #0]
 802d294:	e7b1      	b.n	802d1fa <__sflush_r+0x1a>
 802d296:	89a3      	ldrh	r3, [r4, #12]
 802d298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d29c:	81a3      	strh	r3, [r4, #12]
 802d29e:	e7ad      	b.n	802d1fc <__sflush_r+0x1c>
 802d2a0:	690f      	ldr	r7, [r1, #16]
 802d2a2:	2f00      	cmp	r7, #0
 802d2a4:	d0a9      	beq.n	802d1fa <__sflush_r+0x1a>
 802d2a6:	0793      	lsls	r3, r2, #30
 802d2a8:	680e      	ldr	r6, [r1, #0]
 802d2aa:	bf08      	it	eq
 802d2ac:	694b      	ldreq	r3, [r1, #20]
 802d2ae:	600f      	str	r7, [r1, #0]
 802d2b0:	bf18      	it	ne
 802d2b2:	2300      	movne	r3, #0
 802d2b4:	eba6 0807 	sub.w	r8, r6, r7
 802d2b8:	608b      	str	r3, [r1, #8]
 802d2ba:	f1b8 0f00 	cmp.w	r8, #0
 802d2be:	dd9c      	ble.n	802d1fa <__sflush_r+0x1a>
 802d2c0:	6a21      	ldr	r1, [r4, #32]
 802d2c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802d2c4:	4643      	mov	r3, r8
 802d2c6:	463a      	mov	r2, r7
 802d2c8:	4628      	mov	r0, r5
 802d2ca:	47b0      	blx	r6
 802d2cc:	2800      	cmp	r0, #0
 802d2ce:	dc06      	bgt.n	802d2de <__sflush_r+0xfe>
 802d2d0:	89a3      	ldrh	r3, [r4, #12]
 802d2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d2d6:	81a3      	strh	r3, [r4, #12]
 802d2d8:	f04f 30ff 	mov.w	r0, #4294967295
 802d2dc:	e78e      	b.n	802d1fc <__sflush_r+0x1c>
 802d2de:	4407      	add	r7, r0
 802d2e0:	eba8 0800 	sub.w	r8, r8, r0
 802d2e4:	e7e9      	b.n	802d2ba <__sflush_r+0xda>
 802d2e6:	bf00      	nop
 802d2e8:	20400001 	.word	0x20400001

0802d2ec <_fflush_r>:
 802d2ec:	b538      	push	{r3, r4, r5, lr}
 802d2ee:	690b      	ldr	r3, [r1, #16]
 802d2f0:	4605      	mov	r5, r0
 802d2f2:	460c      	mov	r4, r1
 802d2f4:	b913      	cbnz	r3, 802d2fc <_fflush_r+0x10>
 802d2f6:	2500      	movs	r5, #0
 802d2f8:	4628      	mov	r0, r5
 802d2fa:	bd38      	pop	{r3, r4, r5, pc}
 802d2fc:	b118      	cbz	r0, 802d306 <_fflush_r+0x1a>
 802d2fe:	6983      	ldr	r3, [r0, #24]
 802d300:	b90b      	cbnz	r3, 802d306 <_fflush_r+0x1a>
 802d302:	f000 f887 	bl	802d414 <__sinit>
 802d306:	4b14      	ldr	r3, [pc, #80]	; (802d358 <_fflush_r+0x6c>)
 802d308:	429c      	cmp	r4, r3
 802d30a:	d11b      	bne.n	802d344 <_fflush_r+0x58>
 802d30c:	686c      	ldr	r4, [r5, #4]
 802d30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d312:	2b00      	cmp	r3, #0
 802d314:	d0ef      	beq.n	802d2f6 <_fflush_r+0xa>
 802d316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802d318:	07d0      	lsls	r0, r2, #31
 802d31a:	d404      	bmi.n	802d326 <_fflush_r+0x3a>
 802d31c:	0599      	lsls	r1, r3, #22
 802d31e:	d402      	bmi.n	802d326 <_fflush_r+0x3a>
 802d320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d322:	f000 f915 	bl	802d550 <__retarget_lock_acquire_recursive>
 802d326:	4628      	mov	r0, r5
 802d328:	4621      	mov	r1, r4
 802d32a:	f7ff ff59 	bl	802d1e0 <__sflush_r>
 802d32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d330:	07da      	lsls	r2, r3, #31
 802d332:	4605      	mov	r5, r0
 802d334:	d4e0      	bmi.n	802d2f8 <_fflush_r+0xc>
 802d336:	89a3      	ldrh	r3, [r4, #12]
 802d338:	059b      	lsls	r3, r3, #22
 802d33a:	d4dd      	bmi.n	802d2f8 <_fflush_r+0xc>
 802d33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d33e:	f000 f909 	bl	802d554 <__retarget_lock_release_recursive>
 802d342:	e7d9      	b.n	802d2f8 <_fflush_r+0xc>
 802d344:	4b05      	ldr	r3, [pc, #20]	; (802d35c <_fflush_r+0x70>)
 802d346:	429c      	cmp	r4, r3
 802d348:	d101      	bne.n	802d34e <_fflush_r+0x62>
 802d34a:	68ac      	ldr	r4, [r5, #8]
 802d34c:	e7df      	b.n	802d30e <_fflush_r+0x22>
 802d34e:	4b04      	ldr	r3, [pc, #16]	; (802d360 <_fflush_r+0x74>)
 802d350:	429c      	cmp	r4, r3
 802d352:	bf08      	it	eq
 802d354:	68ec      	ldreq	r4, [r5, #12]
 802d356:	e7da      	b.n	802d30e <_fflush_r+0x22>
 802d358:	08032544 	.word	0x08032544
 802d35c:	08032564 	.word	0x08032564
 802d360:	08032524 	.word	0x08032524

0802d364 <std>:
 802d364:	2300      	movs	r3, #0
 802d366:	b510      	push	{r4, lr}
 802d368:	4604      	mov	r4, r0
 802d36a:	e9c0 3300 	strd	r3, r3, [r0]
 802d36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d372:	6083      	str	r3, [r0, #8]
 802d374:	8181      	strh	r1, [r0, #12]
 802d376:	6643      	str	r3, [r0, #100]	; 0x64
 802d378:	81c2      	strh	r2, [r0, #14]
 802d37a:	6183      	str	r3, [r0, #24]
 802d37c:	4619      	mov	r1, r3
 802d37e:	2208      	movs	r2, #8
 802d380:	305c      	adds	r0, #92	; 0x5c
 802d382:	f7ff f9f7 	bl	802c774 <memset>
 802d386:	4b05      	ldr	r3, [pc, #20]	; (802d39c <std+0x38>)
 802d388:	6263      	str	r3, [r4, #36]	; 0x24
 802d38a:	4b05      	ldr	r3, [pc, #20]	; (802d3a0 <std+0x3c>)
 802d38c:	62a3      	str	r3, [r4, #40]	; 0x28
 802d38e:	4b05      	ldr	r3, [pc, #20]	; (802d3a4 <std+0x40>)
 802d390:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d392:	4b05      	ldr	r3, [pc, #20]	; (802d3a8 <std+0x44>)
 802d394:	6224      	str	r4, [r4, #32]
 802d396:	6323      	str	r3, [r4, #48]	; 0x30
 802d398:	bd10      	pop	{r4, pc}
 802d39a:	bf00      	nop
 802d39c:	0802d971 	.word	0x0802d971
 802d3a0:	0802d993 	.word	0x0802d993
 802d3a4:	0802d9cb 	.word	0x0802d9cb
 802d3a8:	0802d9ef 	.word	0x0802d9ef

0802d3ac <_cleanup_r>:
 802d3ac:	4901      	ldr	r1, [pc, #4]	; (802d3b4 <_cleanup_r+0x8>)
 802d3ae:	f000 b8af 	b.w	802d510 <_fwalk_reent>
 802d3b2:	bf00      	nop
 802d3b4:	0802d2ed 	.word	0x0802d2ed

0802d3b8 <__sfmoreglue>:
 802d3b8:	b570      	push	{r4, r5, r6, lr}
 802d3ba:	1e4a      	subs	r2, r1, #1
 802d3bc:	2568      	movs	r5, #104	; 0x68
 802d3be:	4355      	muls	r5, r2
 802d3c0:	460e      	mov	r6, r1
 802d3c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802d3c6:	f7ff fa2d 	bl	802c824 <_malloc_r>
 802d3ca:	4604      	mov	r4, r0
 802d3cc:	b140      	cbz	r0, 802d3e0 <__sfmoreglue+0x28>
 802d3ce:	2100      	movs	r1, #0
 802d3d0:	e9c0 1600 	strd	r1, r6, [r0]
 802d3d4:	300c      	adds	r0, #12
 802d3d6:	60a0      	str	r0, [r4, #8]
 802d3d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802d3dc:	f7ff f9ca 	bl	802c774 <memset>
 802d3e0:	4620      	mov	r0, r4
 802d3e2:	bd70      	pop	{r4, r5, r6, pc}

0802d3e4 <__sfp_lock_acquire>:
 802d3e4:	4801      	ldr	r0, [pc, #4]	; (802d3ec <__sfp_lock_acquire+0x8>)
 802d3e6:	f000 b8b3 	b.w	802d550 <__retarget_lock_acquire_recursive>
 802d3ea:	bf00      	nop
 802d3ec:	20007e94 	.word	0x20007e94

0802d3f0 <__sfp_lock_release>:
 802d3f0:	4801      	ldr	r0, [pc, #4]	; (802d3f8 <__sfp_lock_release+0x8>)
 802d3f2:	f000 b8af 	b.w	802d554 <__retarget_lock_release_recursive>
 802d3f6:	bf00      	nop
 802d3f8:	20007e94 	.word	0x20007e94

0802d3fc <__sinit_lock_acquire>:
 802d3fc:	4801      	ldr	r0, [pc, #4]	; (802d404 <__sinit_lock_acquire+0x8>)
 802d3fe:	f000 b8a7 	b.w	802d550 <__retarget_lock_acquire_recursive>
 802d402:	bf00      	nop
 802d404:	20007e8f 	.word	0x20007e8f

0802d408 <__sinit_lock_release>:
 802d408:	4801      	ldr	r0, [pc, #4]	; (802d410 <__sinit_lock_release+0x8>)
 802d40a:	f000 b8a3 	b.w	802d554 <__retarget_lock_release_recursive>
 802d40e:	bf00      	nop
 802d410:	20007e8f 	.word	0x20007e8f

0802d414 <__sinit>:
 802d414:	b510      	push	{r4, lr}
 802d416:	4604      	mov	r4, r0
 802d418:	f7ff fff0 	bl	802d3fc <__sinit_lock_acquire>
 802d41c:	69a3      	ldr	r3, [r4, #24]
 802d41e:	b11b      	cbz	r3, 802d428 <__sinit+0x14>
 802d420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d424:	f7ff bff0 	b.w	802d408 <__sinit_lock_release>
 802d428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802d42c:	6523      	str	r3, [r4, #80]	; 0x50
 802d42e:	4b13      	ldr	r3, [pc, #76]	; (802d47c <__sinit+0x68>)
 802d430:	4a13      	ldr	r2, [pc, #76]	; (802d480 <__sinit+0x6c>)
 802d432:	681b      	ldr	r3, [r3, #0]
 802d434:	62a2      	str	r2, [r4, #40]	; 0x28
 802d436:	42a3      	cmp	r3, r4
 802d438:	bf04      	itt	eq
 802d43a:	2301      	moveq	r3, #1
 802d43c:	61a3      	streq	r3, [r4, #24]
 802d43e:	4620      	mov	r0, r4
 802d440:	f000 f820 	bl	802d484 <__sfp>
 802d444:	6060      	str	r0, [r4, #4]
 802d446:	4620      	mov	r0, r4
 802d448:	f000 f81c 	bl	802d484 <__sfp>
 802d44c:	60a0      	str	r0, [r4, #8]
 802d44e:	4620      	mov	r0, r4
 802d450:	f000 f818 	bl	802d484 <__sfp>
 802d454:	2200      	movs	r2, #0
 802d456:	60e0      	str	r0, [r4, #12]
 802d458:	2104      	movs	r1, #4
 802d45a:	6860      	ldr	r0, [r4, #4]
 802d45c:	f7ff ff82 	bl	802d364 <std>
 802d460:	68a0      	ldr	r0, [r4, #8]
 802d462:	2201      	movs	r2, #1
 802d464:	2109      	movs	r1, #9
 802d466:	f7ff ff7d 	bl	802d364 <std>
 802d46a:	68e0      	ldr	r0, [r4, #12]
 802d46c:	2202      	movs	r2, #2
 802d46e:	2112      	movs	r1, #18
 802d470:	f7ff ff78 	bl	802d364 <std>
 802d474:	2301      	movs	r3, #1
 802d476:	61a3      	str	r3, [r4, #24]
 802d478:	e7d2      	b.n	802d420 <__sinit+0xc>
 802d47a:	bf00      	nop
 802d47c:	080324e8 	.word	0x080324e8
 802d480:	0802d3ad 	.word	0x0802d3ad

0802d484 <__sfp>:
 802d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d486:	4607      	mov	r7, r0
 802d488:	f7ff ffac 	bl	802d3e4 <__sfp_lock_acquire>
 802d48c:	4b1e      	ldr	r3, [pc, #120]	; (802d508 <__sfp+0x84>)
 802d48e:	681e      	ldr	r6, [r3, #0]
 802d490:	69b3      	ldr	r3, [r6, #24]
 802d492:	b913      	cbnz	r3, 802d49a <__sfp+0x16>
 802d494:	4630      	mov	r0, r6
 802d496:	f7ff ffbd 	bl	802d414 <__sinit>
 802d49a:	3648      	adds	r6, #72	; 0x48
 802d49c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802d4a0:	3b01      	subs	r3, #1
 802d4a2:	d503      	bpl.n	802d4ac <__sfp+0x28>
 802d4a4:	6833      	ldr	r3, [r6, #0]
 802d4a6:	b30b      	cbz	r3, 802d4ec <__sfp+0x68>
 802d4a8:	6836      	ldr	r6, [r6, #0]
 802d4aa:	e7f7      	b.n	802d49c <__sfp+0x18>
 802d4ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802d4b0:	b9d5      	cbnz	r5, 802d4e8 <__sfp+0x64>
 802d4b2:	4b16      	ldr	r3, [pc, #88]	; (802d50c <__sfp+0x88>)
 802d4b4:	60e3      	str	r3, [r4, #12]
 802d4b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d4ba:	6665      	str	r5, [r4, #100]	; 0x64
 802d4bc:	f000 f847 	bl	802d54e <__retarget_lock_init_recursive>
 802d4c0:	f7ff ff96 	bl	802d3f0 <__sfp_lock_release>
 802d4c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802d4c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802d4cc:	6025      	str	r5, [r4, #0]
 802d4ce:	61a5      	str	r5, [r4, #24]
 802d4d0:	2208      	movs	r2, #8
 802d4d2:	4629      	mov	r1, r5
 802d4d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802d4d8:	f7ff f94c 	bl	802c774 <memset>
 802d4dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802d4e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802d4e4:	4620      	mov	r0, r4
 802d4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d4e8:	3468      	adds	r4, #104	; 0x68
 802d4ea:	e7d9      	b.n	802d4a0 <__sfp+0x1c>
 802d4ec:	2104      	movs	r1, #4
 802d4ee:	4638      	mov	r0, r7
 802d4f0:	f7ff ff62 	bl	802d3b8 <__sfmoreglue>
 802d4f4:	4604      	mov	r4, r0
 802d4f6:	6030      	str	r0, [r6, #0]
 802d4f8:	2800      	cmp	r0, #0
 802d4fa:	d1d5      	bne.n	802d4a8 <__sfp+0x24>
 802d4fc:	f7ff ff78 	bl	802d3f0 <__sfp_lock_release>
 802d500:	230c      	movs	r3, #12
 802d502:	603b      	str	r3, [r7, #0]
 802d504:	e7ee      	b.n	802d4e4 <__sfp+0x60>
 802d506:	bf00      	nop
 802d508:	080324e8 	.word	0x080324e8
 802d50c:	ffff0001 	.word	0xffff0001

0802d510 <_fwalk_reent>:
 802d510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d514:	4606      	mov	r6, r0
 802d516:	4688      	mov	r8, r1
 802d518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802d51c:	2700      	movs	r7, #0
 802d51e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d522:	f1b9 0901 	subs.w	r9, r9, #1
 802d526:	d505      	bpl.n	802d534 <_fwalk_reent+0x24>
 802d528:	6824      	ldr	r4, [r4, #0]
 802d52a:	2c00      	cmp	r4, #0
 802d52c:	d1f7      	bne.n	802d51e <_fwalk_reent+0xe>
 802d52e:	4638      	mov	r0, r7
 802d530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d534:	89ab      	ldrh	r3, [r5, #12]
 802d536:	2b01      	cmp	r3, #1
 802d538:	d907      	bls.n	802d54a <_fwalk_reent+0x3a>
 802d53a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d53e:	3301      	adds	r3, #1
 802d540:	d003      	beq.n	802d54a <_fwalk_reent+0x3a>
 802d542:	4629      	mov	r1, r5
 802d544:	4630      	mov	r0, r6
 802d546:	47c0      	blx	r8
 802d548:	4307      	orrs	r7, r0
 802d54a:	3568      	adds	r5, #104	; 0x68
 802d54c:	e7e9      	b.n	802d522 <_fwalk_reent+0x12>

0802d54e <__retarget_lock_init_recursive>:
 802d54e:	4770      	bx	lr

0802d550 <__retarget_lock_acquire_recursive>:
 802d550:	4770      	bx	lr

0802d552 <__retarget_lock_release>:
 802d552:	4770      	bx	lr

0802d554 <__retarget_lock_release_recursive>:
 802d554:	4770      	bx	lr

0802d556 <__swhatbuf_r>:
 802d556:	b570      	push	{r4, r5, r6, lr}
 802d558:	460e      	mov	r6, r1
 802d55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d55e:	2900      	cmp	r1, #0
 802d560:	b096      	sub	sp, #88	; 0x58
 802d562:	4614      	mov	r4, r2
 802d564:	461d      	mov	r5, r3
 802d566:	da07      	bge.n	802d578 <__swhatbuf_r+0x22>
 802d568:	2300      	movs	r3, #0
 802d56a:	602b      	str	r3, [r5, #0]
 802d56c:	89b3      	ldrh	r3, [r6, #12]
 802d56e:	061a      	lsls	r2, r3, #24
 802d570:	d410      	bmi.n	802d594 <__swhatbuf_r+0x3e>
 802d572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d576:	e00e      	b.n	802d596 <__swhatbuf_r+0x40>
 802d578:	466a      	mov	r2, sp
 802d57a:	f000 fa5f 	bl	802da3c <_fstat_r>
 802d57e:	2800      	cmp	r0, #0
 802d580:	dbf2      	blt.n	802d568 <__swhatbuf_r+0x12>
 802d582:	9a01      	ldr	r2, [sp, #4]
 802d584:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802d588:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802d58c:	425a      	negs	r2, r3
 802d58e:	415a      	adcs	r2, r3
 802d590:	602a      	str	r2, [r5, #0]
 802d592:	e7ee      	b.n	802d572 <__swhatbuf_r+0x1c>
 802d594:	2340      	movs	r3, #64	; 0x40
 802d596:	2000      	movs	r0, #0
 802d598:	6023      	str	r3, [r4, #0]
 802d59a:	b016      	add	sp, #88	; 0x58
 802d59c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d5a0 <__smakebuf_r>:
 802d5a0:	898b      	ldrh	r3, [r1, #12]
 802d5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d5a4:	079d      	lsls	r5, r3, #30
 802d5a6:	4606      	mov	r6, r0
 802d5a8:	460c      	mov	r4, r1
 802d5aa:	d507      	bpl.n	802d5bc <__smakebuf_r+0x1c>
 802d5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802d5b0:	6023      	str	r3, [r4, #0]
 802d5b2:	6123      	str	r3, [r4, #16]
 802d5b4:	2301      	movs	r3, #1
 802d5b6:	6163      	str	r3, [r4, #20]
 802d5b8:	b002      	add	sp, #8
 802d5ba:	bd70      	pop	{r4, r5, r6, pc}
 802d5bc:	ab01      	add	r3, sp, #4
 802d5be:	466a      	mov	r2, sp
 802d5c0:	f7ff ffc9 	bl	802d556 <__swhatbuf_r>
 802d5c4:	9900      	ldr	r1, [sp, #0]
 802d5c6:	4605      	mov	r5, r0
 802d5c8:	4630      	mov	r0, r6
 802d5ca:	f7ff f92b 	bl	802c824 <_malloc_r>
 802d5ce:	b948      	cbnz	r0, 802d5e4 <__smakebuf_r+0x44>
 802d5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d5d4:	059a      	lsls	r2, r3, #22
 802d5d6:	d4ef      	bmi.n	802d5b8 <__smakebuf_r+0x18>
 802d5d8:	f023 0303 	bic.w	r3, r3, #3
 802d5dc:	f043 0302 	orr.w	r3, r3, #2
 802d5e0:	81a3      	strh	r3, [r4, #12]
 802d5e2:	e7e3      	b.n	802d5ac <__smakebuf_r+0xc>
 802d5e4:	4b0d      	ldr	r3, [pc, #52]	; (802d61c <__smakebuf_r+0x7c>)
 802d5e6:	62b3      	str	r3, [r6, #40]	; 0x28
 802d5e8:	89a3      	ldrh	r3, [r4, #12]
 802d5ea:	6020      	str	r0, [r4, #0]
 802d5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d5f0:	81a3      	strh	r3, [r4, #12]
 802d5f2:	9b00      	ldr	r3, [sp, #0]
 802d5f4:	6163      	str	r3, [r4, #20]
 802d5f6:	9b01      	ldr	r3, [sp, #4]
 802d5f8:	6120      	str	r0, [r4, #16]
 802d5fa:	b15b      	cbz	r3, 802d614 <__smakebuf_r+0x74>
 802d5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d600:	4630      	mov	r0, r6
 802d602:	f000 fa2d 	bl	802da60 <_isatty_r>
 802d606:	b128      	cbz	r0, 802d614 <__smakebuf_r+0x74>
 802d608:	89a3      	ldrh	r3, [r4, #12]
 802d60a:	f023 0303 	bic.w	r3, r3, #3
 802d60e:	f043 0301 	orr.w	r3, r3, #1
 802d612:	81a3      	strh	r3, [r4, #12]
 802d614:	89a0      	ldrh	r0, [r4, #12]
 802d616:	4305      	orrs	r5, r0
 802d618:	81a5      	strh	r5, [r4, #12]
 802d61a:	e7cd      	b.n	802d5b8 <__smakebuf_r+0x18>
 802d61c:	0802d3ad 	.word	0x0802d3ad

0802d620 <memmove>:
 802d620:	4288      	cmp	r0, r1
 802d622:	b510      	push	{r4, lr}
 802d624:	eb01 0402 	add.w	r4, r1, r2
 802d628:	d902      	bls.n	802d630 <memmove+0x10>
 802d62a:	4284      	cmp	r4, r0
 802d62c:	4623      	mov	r3, r4
 802d62e:	d807      	bhi.n	802d640 <memmove+0x20>
 802d630:	1e43      	subs	r3, r0, #1
 802d632:	42a1      	cmp	r1, r4
 802d634:	d008      	beq.n	802d648 <memmove+0x28>
 802d636:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d63a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d63e:	e7f8      	b.n	802d632 <memmove+0x12>
 802d640:	4402      	add	r2, r0
 802d642:	4601      	mov	r1, r0
 802d644:	428a      	cmp	r2, r1
 802d646:	d100      	bne.n	802d64a <memmove+0x2a>
 802d648:	bd10      	pop	{r4, pc}
 802d64a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d64e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d652:	e7f7      	b.n	802d644 <memmove+0x24>

0802d654 <__malloc_lock>:
 802d654:	4801      	ldr	r0, [pc, #4]	; (802d65c <__malloc_lock+0x8>)
 802d656:	f7ff bf7b 	b.w	802d550 <__retarget_lock_acquire_recursive>
 802d65a:	bf00      	nop
 802d65c:	20007e90 	.word	0x20007e90

0802d660 <__malloc_unlock>:
 802d660:	4801      	ldr	r0, [pc, #4]	; (802d668 <__malloc_unlock+0x8>)
 802d662:	f7ff bf77 	b.w	802d554 <__retarget_lock_release_recursive>
 802d666:	bf00      	nop
 802d668:	20007e90 	.word	0x20007e90

0802d66c <_realloc_r>:
 802d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d66e:	4607      	mov	r7, r0
 802d670:	4614      	mov	r4, r2
 802d672:	460e      	mov	r6, r1
 802d674:	b921      	cbnz	r1, 802d680 <_realloc_r+0x14>
 802d676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802d67a:	4611      	mov	r1, r2
 802d67c:	f7ff b8d2 	b.w	802c824 <_malloc_r>
 802d680:	b922      	cbnz	r2, 802d68c <_realloc_r+0x20>
 802d682:	f7ff f87f 	bl	802c784 <_free_r>
 802d686:	4625      	mov	r5, r4
 802d688:	4628      	mov	r0, r5
 802d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d68c:	f000 fa0a 	bl	802daa4 <_malloc_usable_size_r>
 802d690:	42a0      	cmp	r0, r4
 802d692:	d20f      	bcs.n	802d6b4 <_realloc_r+0x48>
 802d694:	4621      	mov	r1, r4
 802d696:	4638      	mov	r0, r7
 802d698:	f7ff f8c4 	bl	802c824 <_malloc_r>
 802d69c:	4605      	mov	r5, r0
 802d69e:	2800      	cmp	r0, #0
 802d6a0:	d0f2      	beq.n	802d688 <_realloc_r+0x1c>
 802d6a2:	4631      	mov	r1, r6
 802d6a4:	4622      	mov	r2, r4
 802d6a6:	f7ff f857 	bl	802c758 <memcpy>
 802d6aa:	4631      	mov	r1, r6
 802d6ac:	4638      	mov	r0, r7
 802d6ae:	f7ff f869 	bl	802c784 <_free_r>
 802d6b2:	e7e9      	b.n	802d688 <_realloc_r+0x1c>
 802d6b4:	4635      	mov	r5, r6
 802d6b6:	e7e7      	b.n	802d688 <_realloc_r+0x1c>

0802d6b8 <__ssputs_r>:
 802d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d6bc:	688e      	ldr	r6, [r1, #8]
 802d6be:	429e      	cmp	r6, r3
 802d6c0:	4682      	mov	sl, r0
 802d6c2:	460c      	mov	r4, r1
 802d6c4:	4690      	mov	r8, r2
 802d6c6:	461f      	mov	r7, r3
 802d6c8:	d838      	bhi.n	802d73c <__ssputs_r+0x84>
 802d6ca:	898a      	ldrh	r2, [r1, #12]
 802d6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802d6d0:	d032      	beq.n	802d738 <__ssputs_r+0x80>
 802d6d2:	6825      	ldr	r5, [r4, #0]
 802d6d4:	6909      	ldr	r1, [r1, #16]
 802d6d6:	eba5 0901 	sub.w	r9, r5, r1
 802d6da:	6965      	ldr	r5, [r4, #20]
 802d6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d6e4:	3301      	adds	r3, #1
 802d6e6:	444b      	add	r3, r9
 802d6e8:	106d      	asrs	r5, r5, #1
 802d6ea:	429d      	cmp	r5, r3
 802d6ec:	bf38      	it	cc
 802d6ee:	461d      	movcc	r5, r3
 802d6f0:	0553      	lsls	r3, r2, #21
 802d6f2:	d531      	bpl.n	802d758 <__ssputs_r+0xa0>
 802d6f4:	4629      	mov	r1, r5
 802d6f6:	f7ff f895 	bl	802c824 <_malloc_r>
 802d6fa:	4606      	mov	r6, r0
 802d6fc:	b950      	cbnz	r0, 802d714 <__ssputs_r+0x5c>
 802d6fe:	230c      	movs	r3, #12
 802d700:	f8ca 3000 	str.w	r3, [sl]
 802d704:	89a3      	ldrh	r3, [r4, #12]
 802d706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d70a:	81a3      	strh	r3, [r4, #12]
 802d70c:	f04f 30ff 	mov.w	r0, #4294967295
 802d710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d714:	6921      	ldr	r1, [r4, #16]
 802d716:	464a      	mov	r2, r9
 802d718:	f7ff f81e 	bl	802c758 <memcpy>
 802d71c:	89a3      	ldrh	r3, [r4, #12]
 802d71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802d722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d726:	81a3      	strh	r3, [r4, #12]
 802d728:	6126      	str	r6, [r4, #16]
 802d72a:	6165      	str	r5, [r4, #20]
 802d72c:	444e      	add	r6, r9
 802d72e:	eba5 0509 	sub.w	r5, r5, r9
 802d732:	6026      	str	r6, [r4, #0]
 802d734:	60a5      	str	r5, [r4, #8]
 802d736:	463e      	mov	r6, r7
 802d738:	42be      	cmp	r6, r7
 802d73a:	d900      	bls.n	802d73e <__ssputs_r+0x86>
 802d73c:	463e      	mov	r6, r7
 802d73e:	4632      	mov	r2, r6
 802d740:	6820      	ldr	r0, [r4, #0]
 802d742:	4641      	mov	r1, r8
 802d744:	f7ff ff6c 	bl	802d620 <memmove>
 802d748:	68a3      	ldr	r3, [r4, #8]
 802d74a:	6822      	ldr	r2, [r4, #0]
 802d74c:	1b9b      	subs	r3, r3, r6
 802d74e:	4432      	add	r2, r6
 802d750:	60a3      	str	r3, [r4, #8]
 802d752:	6022      	str	r2, [r4, #0]
 802d754:	2000      	movs	r0, #0
 802d756:	e7db      	b.n	802d710 <__ssputs_r+0x58>
 802d758:	462a      	mov	r2, r5
 802d75a:	f7ff ff87 	bl	802d66c <_realloc_r>
 802d75e:	4606      	mov	r6, r0
 802d760:	2800      	cmp	r0, #0
 802d762:	d1e1      	bne.n	802d728 <__ssputs_r+0x70>
 802d764:	6921      	ldr	r1, [r4, #16]
 802d766:	4650      	mov	r0, sl
 802d768:	f7ff f80c 	bl	802c784 <_free_r>
 802d76c:	e7c7      	b.n	802d6fe <__ssputs_r+0x46>
	...

0802d770 <_svfiprintf_r>:
 802d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d774:	4698      	mov	r8, r3
 802d776:	898b      	ldrh	r3, [r1, #12]
 802d778:	061b      	lsls	r3, r3, #24
 802d77a:	b09d      	sub	sp, #116	; 0x74
 802d77c:	4607      	mov	r7, r0
 802d77e:	460d      	mov	r5, r1
 802d780:	4614      	mov	r4, r2
 802d782:	d50e      	bpl.n	802d7a2 <_svfiprintf_r+0x32>
 802d784:	690b      	ldr	r3, [r1, #16]
 802d786:	b963      	cbnz	r3, 802d7a2 <_svfiprintf_r+0x32>
 802d788:	2140      	movs	r1, #64	; 0x40
 802d78a:	f7ff f84b 	bl	802c824 <_malloc_r>
 802d78e:	6028      	str	r0, [r5, #0]
 802d790:	6128      	str	r0, [r5, #16]
 802d792:	b920      	cbnz	r0, 802d79e <_svfiprintf_r+0x2e>
 802d794:	230c      	movs	r3, #12
 802d796:	603b      	str	r3, [r7, #0]
 802d798:	f04f 30ff 	mov.w	r0, #4294967295
 802d79c:	e0d1      	b.n	802d942 <_svfiprintf_r+0x1d2>
 802d79e:	2340      	movs	r3, #64	; 0x40
 802d7a0:	616b      	str	r3, [r5, #20]
 802d7a2:	2300      	movs	r3, #0
 802d7a4:	9309      	str	r3, [sp, #36]	; 0x24
 802d7a6:	2320      	movs	r3, #32
 802d7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 802d7b0:	2330      	movs	r3, #48	; 0x30
 802d7b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802d95c <_svfiprintf_r+0x1ec>
 802d7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d7ba:	f04f 0901 	mov.w	r9, #1
 802d7be:	4623      	mov	r3, r4
 802d7c0:	469a      	mov	sl, r3
 802d7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d7c6:	b10a      	cbz	r2, 802d7cc <_svfiprintf_r+0x5c>
 802d7c8:	2a25      	cmp	r2, #37	; 0x25
 802d7ca:	d1f9      	bne.n	802d7c0 <_svfiprintf_r+0x50>
 802d7cc:	ebba 0b04 	subs.w	fp, sl, r4
 802d7d0:	d00b      	beq.n	802d7ea <_svfiprintf_r+0x7a>
 802d7d2:	465b      	mov	r3, fp
 802d7d4:	4622      	mov	r2, r4
 802d7d6:	4629      	mov	r1, r5
 802d7d8:	4638      	mov	r0, r7
 802d7da:	f7ff ff6d 	bl	802d6b8 <__ssputs_r>
 802d7de:	3001      	adds	r0, #1
 802d7e0:	f000 80aa 	beq.w	802d938 <_svfiprintf_r+0x1c8>
 802d7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d7e6:	445a      	add	r2, fp
 802d7e8:	9209      	str	r2, [sp, #36]	; 0x24
 802d7ea:	f89a 3000 	ldrb.w	r3, [sl]
 802d7ee:	2b00      	cmp	r3, #0
 802d7f0:	f000 80a2 	beq.w	802d938 <_svfiprintf_r+0x1c8>
 802d7f4:	2300      	movs	r3, #0
 802d7f6:	f04f 32ff 	mov.w	r2, #4294967295
 802d7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d7fe:	f10a 0a01 	add.w	sl, sl, #1
 802d802:	9304      	str	r3, [sp, #16]
 802d804:	9307      	str	r3, [sp, #28]
 802d806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d80a:	931a      	str	r3, [sp, #104]	; 0x68
 802d80c:	4654      	mov	r4, sl
 802d80e:	2205      	movs	r2, #5
 802d810:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d814:	4851      	ldr	r0, [pc, #324]	; (802d95c <_svfiprintf_r+0x1ec>)
 802d816:	f7d2 fcfb 	bl	8000210 <memchr>
 802d81a:	9a04      	ldr	r2, [sp, #16]
 802d81c:	b9d8      	cbnz	r0, 802d856 <_svfiprintf_r+0xe6>
 802d81e:	06d0      	lsls	r0, r2, #27
 802d820:	bf44      	itt	mi
 802d822:	2320      	movmi	r3, #32
 802d824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d828:	0711      	lsls	r1, r2, #28
 802d82a:	bf44      	itt	mi
 802d82c:	232b      	movmi	r3, #43	; 0x2b
 802d82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d832:	f89a 3000 	ldrb.w	r3, [sl]
 802d836:	2b2a      	cmp	r3, #42	; 0x2a
 802d838:	d015      	beq.n	802d866 <_svfiprintf_r+0xf6>
 802d83a:	9a07      	ldr	r2, [sp, #28]
 802d83c:	4654      	mov	r4, sl
 802d83e:	2000      	movs	r0, #0
 802d840:	f04f 0c0a 	mov.w	ip, #10
 802d844:	4621      	mov	r1, r4
 802d846:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d84a:	3b30      	subs	r3, #48	; 0x30
 802d84c:	2b09      	cmp	r3, #9
 802d84e:	d94e      	bls.n	802d8ee <_svfiprintf_r+0x17e>
 802d850:	b1b0      	cbz	r0, 802d880 <_svfiprintf_r+0x110>
 802d852:	9207      	str	r2, [sp, #28]
 802d854:	e014      	b.n	802d880 <_svfiprintf_r+0x110>
 802d856:	eba0 0308 	sub.w	r3, r0, r8
 802d85a:	fa09 f303 	lsl.w	r3, r9, r3
 802d85e:	4313      	orrs	r3, r2
 802d860:	9304      	str	r3, [sp, #16]
 802d862:	46a2      	mov	sl, r4
 802d864:	e7d2      	b.n	802d80c <_svfiprintf_r+0x9c>
 802d866:	9b03      	ldr	r3, [sp, #12]
 802d868:	1d19      	adds	r1, r3, #4
 802d86a:	681b      	ldr	r3, [r3, #0]
 802d86c:	9103      	str	r1, [sp, #12]
 802d86e:	2b00      	cmp	r3, #0
 802d870:	bfbb      	ittet	lt
 802d872:	425b      	neglt	r3, r3
 802d874:	f042 0202 	orrlt.w	r2, r2, #2
 802d878:	9307      	strge	r3, [sp, #28]
 802d87a:	9307      	strlt	r3, [sp, #28]
 802d87c:	bfb8      	it	lt
 802d87e:	9204      	strlt	r2, [sp, #16]
 802d880:	7823      	ldrb	r3, [r4, #0]
 802d882:	2b2e      	cmp	r3, #46	; 0x2e
 802d884:	d10c      	bne.n	802d8a0 <_svfiprintf_r+0x130>
 802d886:	7863      	ldrb	r3, [r4, #1]
 802d888:	2b2a      	cmp	r3, #42	; 0x2a
 802d88a:	d135      	bne.n	802d8f8 <_svfiprintf_r+0x188>
 802d88c:	9b03      	ldr	r3, [sp, #12]
 802d88e:	1d1a      	adds	r2, r3, #4
 802d890:	681b      	ldr	r3, [r3, #0]
 802d892:	9203      	str	r2, [sp, #12]
 802d894:	2b00      	cmp	r3, #0
 802d896:	bfb8      	it	lt
 802d898:	f04f 33ff 	movlt.w	r3, #4294967295
 802d89c:	3402      	adds	r4, #2
 802d89e:	9305      	str	r3, [sp, #20]
 802d8a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802d96c <_svfiprintf_r+0x1fc>
 802d8a4:	7821      	ldrb	r1, [r4, #0]
 802d8a6:	2203      	movs	r2, #3
 802d8a8:	4650      	mov	r0, sl
 802d8aa:	f7d2 fcb1 	bl	8000210 <memchr>
 802d8ae:	b140      	cbz	r0, 802d8c2 <_svfiprintf_r+0x152>
 802d8b0:	2340      	movs	r3, #64	; 0x40
 802d8b2:	eba0 000a 	sub.w	r0, r0, sl
 802d8b6:	fa03 f000 	lsl.w	r0, r3, r0
 802d8ba:	9b04      	ldr	r3, [sp, #16]
 802d8bc:	4303      	orrs	r3, r0
 802d8be:	3401      	adds	r4, #1
 802d8c0:	9304      	str	r3, [sp, #16]
 802d8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d8c6:	4826      	ldr	r0, [pc, #152]	; (802d960 <_svfiprintf_r+0x1f0>)
 802d8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d8cc:	2206      	movs	r2, #6
 802d8ce:	f7d2 fc9f 	bl	8000210 <memchr>
 802d8d2:	2800      	cmp	r0, #0
 802d8d4:	d038      	beq.n	802d948 <_svfiprintf_r+0x1d8>
 802d8d6:	4b23      	ldr	r3, [pc, #140]	; (802d964 <_svfiprintf_r+0x1f4>)
 802d8d8:	bb1b      	cbnz	r3, 802d922 <_svfiprintf_r+0x1b2>
 802d8da:	9b03      	ldr	r3, [sp, #12]
 802d8dc:	3307      	adds	r3, #7
 802d8de:	f023 0307 	bic.w	r3, r3, #7
 802d8e2:	3308      	adds	r3, #8
 802d8e4:	9303      	str	r3, [sp, #12]
 802d8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d8e8:	4433      	add	r3, r6
 802d8ea:	9309      	str	r3, [sp, #36]	; 0x24
 802d8ec:	e767      	b.n	802d7be <_svfiprintf_r+0x4e>
 802d8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 802d8f2:	460c      	mov	r4, r1
 802d8f4:	2001      	movs	r0, #1
 802d8f6:	e7a5      	b.n	802d844 <_svfiprintf_r+0xd4>
 802d8f8:	2300      	movs	r3, #0
 802d8fa:	3401      	adds	r4, #1
 802d8fc:	9305      	str	r3, [sp, #20]
 802d8fe:	4619      	mov	r1, r3
 802d900:	f04f 0c0a 	mov.w	ip, #10
 802d904:	4620      	mov	r0, r4
 802d906:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d90a:	3a30      	subs	r2, #48	; 0x30
 802d90c:	2a09      	cmp	r2, #9
 802d90e:	d903      	bls.n	802d918 <_svfiprintf_r+0x1a8>
 802d910:	2b00      	cmp	r3, #0
 802d912:	d0c5      	beq.n	802d8a0 <_svfiprintf_r+0x130>
 802d914:	9105      	str	r1, [sp, #20]
 802d916:	e7c3      	b.n	802d8a0 <_svfiprintf_r+0x130>
 802d918:	fb0c 2101 	mla	r1, ip, r1, r2
 802d91c:	4604      	mov	r4, r0
 802d91e:	2301      	movs	r3, #1
 802d920:	e7f0      	b.n	802d904 <_svfiprintf_r+0x194>
 802d922:	ab03      	add	r3, sp, #12
 802d924:	9300      	str	r3, [sp, #0]
 802d926:	462a      	mov	r2, r5
 802d928:	4b0f      	ldr	r3, [pc, #60]	; (802d968 <_svfiprintf_r+0x1f8>)
 802d92a:	a904      	add	r1, sp, #16
 802d92c:	4638      	mov	r0, r7
 802d92e:	f3af 8000 	nop.w
 802d932:	1c42      	adds	r2, r0, #1
 802d934:	4606      	mov	r6, r0
 802d936:	d1d6      	bne.n	802d8e6 <_svfiprintf_r+0x176>
 802d938:	89ab      	ldrh	r3, [r5, #12]
 802d93a:	065b      	lsls	r3, r3, #25
 802d93c:	f53f af2c 	bmi.w	802d798 <_svfiprintf_r+0x28>
 802d940:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d942:	b01d      	add	sp, #116	; 0x74
 802d944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d948:	ab03      	add	r3, sp, #12
 802d94a:	9300      	str	r3, [sp, #0]
 802d94c:	462a      	mov	r2, r5
 802d94e:	4b06      	ldr	r3, [pc, #24]	; (802d968 <_svfiprintf_r+0x1f8>)
 802d950:	a904      	add	r1, sp, #16
 802d952:	4638      	mov	r0, r7
 802d954:	f7ff f988 	bl	802cc68 <_printf_i>
 802d958:	e7eb      	b.n	802d932 <_svfiprintf_r+0x1c2>
 802d95a:	bf00      	nop
 802d95c:	080324ec 	.word	0x080324ec
 802d960:	080324f6 	.word	0x080324f6
 802d964:	00000000 	.word	0x00000000
 802d968:	0802d6b9 	.word	0x0802d6b9
 802d96c:	080324f2 	.word	0x080324f2

0802d970 <__sread>:
 802d970:	b510      	push	{r4, lr}
 802d972:	460c      	mov	r4, r1
 802d974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d978:	f000 f89c 	bl	802dab4 <_read_r>
 802d97c:	2800      	cmp	r0, #0
 802d97e:	bfab      	itete	ge
 802d980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d982:	89a3      	ldrhlt	r3, [r4, #12]
 802d984:	181b      	addge	r3, r3, r0
 802d986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d98a:	bfac      	ite	ge
 802d98c:	6563      	strge	r3, [r4, #84]	; 0x54
 802d98e:	81a3      	strhlt	r3, [r4, #12]
 802d990:	bd10      	pop	{r4, pc}

0802d992 <__swrite>:
 802d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d996:	461f      	mov	r7, r3
 802d998:	898b      	ldrh	r3, [r1, #12]
 802d99a:	05db      	lsls	r3, r3, #23
 802d99c:	4605      	mov	r5, r0
 802d99e:	460c      	mov	r4, r1
 802d9a0:	4616      	mov	r6, r2
 802d9a2:	d505      	bpl.n	802d9b0 <__swrite+0x1e>
 802d9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9a8:	2302      	movs	r3, #2
 802d9aa:	2200      	movs	r2, #0
 802d9ac:	f000 f868 	bl	802da80 <_lseek_r>
 802d9b0:	89a3      	ldrh	r3, [r4, #12]
 802d9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d9ba:	81a3      	strh	r3, [r4, #12]
 802d9bc:	4632      	mov	r2, r6
 802d9be:	463b      	mov	r3, r7
 802d9c0:	4628      	mov	r0, r5
 802d9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d9c6:	f000 b817 	b.w	802d9f8 <_write_r>

0802d9ca <__sseek>:
 802d9ca:	b510      	push	{r4, lr}
 802d9cc:	460c      	mov	r4, r1
 802d9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9d2:	f000 f855 	bl	802da80 <_lseek_r>
 802d9d6:	1c43      	adds	r3, r0, #1
 802d9d8:	89a3      	ldrh	r3, [r4, #12]
 802d9da:	bf15      	itete	ne
 802d9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 802d9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d9e6:	81a3      	strheq	r3, [r4, #12]
 802d9e8:	bf18      	it	ne
 802d9ea:	81a3      	strhne	r3, [r4, #12]
 802d9ec:	bd10      	pop	{r4, pc}

0802d9ee <__sclose>:
 802d9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9f2:	f000 b813 	b.w	802da1c <_close_r>
	...

0802d9f8 <_write_r>:
 802d9f8:	b538      	push	{r3, r4, r5, lr}
 802d9fa:	4d07      	ldr	r5, [pc, #28]	; (802da18 <_write_r+0x20>)
 802d9fc:	4604      	mov	r4, r0
 802d9fe:	4608      	mov	r0, r1
 802da00:	4611      	mov	r1, r2
 802da02:	2200      	movs	r2, #0
 802da04:	602a      	str	r2, [r5, #0]
 802da06:	461a      	mov	r2, r3
 802da08:	f7d4 f9cd 	bl	8001da6 <_write>
 802da0c:	1c43      	adds	r3, r0, #1
 802da0e:	d102      	bne.n	802da16 <_write_r+0x1e>
 802da10:	682b      	ldr	r3, [r5, #0]
 802da12:	b103      	cbz	r3, 802da16 <_write_r+0x1e>
 802da14:	6023      	str	r3, [r4, #0]
 802da16:	bd38      	pop	{r3, r4, r5, pc}
 802da18:	20007e98 	.word	0x20007e98

0802da1c <_close_r>:
 802da1c:	b538      	push	{r3, r4, r5, lr}
 802da1e:	4d06      	ldr	r5, [pc, #24]	; (802da38 <_close_r+0x1c>)
 802da20:	2300      	movs	r3, #0
 802da22:	4604      	mov	r4, r0
 802da24:	4608      	mov	r0, r1
 802da26:	602b      	str	r3, [r5, #0]
 802da28:	f7d4 f9d9 	bl	8001dde <_close>
 802da2c:	1c43      	adds	r3, r0, #1
 802da2e:	d102      	bne.n	802da36 <_close_r+0x1a>
 802da30:	682b      	ldr	r3, [r5, #0]
 802da32:	b103      	cbz	r3, 802da36 <_close_r+0x1a>
 802da34:	6023      	str	r3, [r4, #0]
 802da36:	bd38      	pop	{r3, r4, r5, pc}
 802da38:	20007e98 	.word	0x20007e98

0802da3c <_fstat_r>:
 802da3c:	b538      	push	{r3, r4, r5, lr}
 802da3e:	4d07      	ldr	r5, [pc, #28]	; (802da5c <_fstat_r+0x20>)
 802da40:	2300      	movs	r3, #0
 802da42:	4604      	mov	r4, r0
 802da44:	4608      	mov	r0, r1
 802da46:	4611      	mov	r1, r2
 802da48:	602b      	str	r3, [r5, #0]
 802da4a:	f7d4 f9d4 	bl	8001df6 <_fstat>
 802da4e:	1c43      	adds	r3, r0, #1
 802da50:	d102      	bne.n	802da58 <_fstat_r+0x1c>
 802da52:	682b      	ldr	r3, [r5, #0]
 802da54:	b103      	cbz	r3, 802da58 <_fstat_r+0x1c>
 802da56:	6023      	str	r3, [r4, #0]
 802da58:	bd38      	pop	{r3, r4, r5, pc}
 802da5a:	bf00      	nop
 802da5c:	20007e98 	.word	0x20007e98

0802da60 <_isatty_r>:
 802da60:	b538      	push	{r3, r4, r5, lr}
 802da62:	4d06      	ldr	r5, [pc, #24]	; (802da7c <_isatty_r+0x1c>)
 802da64:	2300      	movs	r3, #0
 802da66:	4604      	mov	r4, r0
 802da68:	4608      	mov	r0, r1
 802da6a:	602b      	str	r3, [r5, #0]
 802da6c:	f7d4 f9d3 	bl	8001e16 <_isatty>
 802da70:	1c43      	adds	r3, r0, #1
 802da72:	d102      	bne.n	802da7a <_isatty_r+0x1a>
 802da74:	682b      	ldr	r3, [r5, #0]
 802da76:	b103      	cbz	r3, 802da7a <_isatty_r+0x1a>
 802da78:	6023      	str	r3, [r4, #0]
 802da7a:	bd38      	pop	{r3, r4, r5, pc}
 802da7c:	20007e98 	.word	0x20007e98

0802da80 <_lseek_r>:
 802da80:	b538      	push	{r3, r4, r5, lr}
 802da82:	4d07      	ldr	r5, [pc, #28]	; (802daa0 <_lseek_r+0x20>)
 802da84:	4604      	mov	r4, r0
 802da86:	4608      	mov	r0, r1
 802da88:	4611      	mov	r1, r2
 802da8a:	2200      	movs	r2, #0
 802da8c:	602a      	str	r2, [r5, #0]
 802da8e:	461a      	mov	r2, r3
 802da90:	f7d4 f9cc 	bl	8001e2c <_lseek>
 802da94:	1c43      	adds	r3, r0, #1
 802da96:	d102      	bne.n	802da9e <_lseek_r+0x1e>
 802da98:	682b      	ldr	r3, [r5, #0]
 802da9a:	b103      	cbz	r3, 802da9e <_lseek_r+0x1e>
 802da9c:	6023      	str	r3, [r4, #0]
 802da9e:	bd38      	pop	{r3, r4, r5, pc}
 802daa0:	20007e98 	.word	0x20007e98

0802daa4 <_malloc_usable_size_r>:
 802daa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802daa8:	1f18      	subs	r0, r3, #4
 802daaa:	2b00      	cmp	r3, #0
 802daac:	bfbc      	itt	lt
 802daae:	580b      	ldrlt	r3, [r1, r0]
 802dab0:	18c0      	addlt	r0, r0, r3
 802dab2:	4770      	bx	lr

0802dab4 <_read_r>:
 802dab4:	b538      	push	{r3, r4, r5, lr}
 802dab6:	4d07      	ldr	r5, [pc, #28]	; (802dad4 <_read_r+0x20>)
 802dab8:	4604      	mov	r4, r0
 802daba:	4608      	mov	r0, r1
 802dabc:	4611      	mov	r1, r2
 802dabe:	2200      	movs	r2, #0
 802dac0:	602a      	str	r2, [r5, #0]
 802dac2:	461a      	mov	r2, r3
 802dac4:	f7d4 f952 	bl	8001d6c <_read>
 802dac8:	1c43      	adds	r3, r0, #1
 802daca:	d102      	bne.n	802dad2 <_read_r+0x1e>
 802dacc:	682b      	ldr	r3, [r5, #0]
 802dace:	b103      	cbz	r3, 802dad2 <_read_r+0x1e>
 802dad0:	6023      	str	r3, [r4, #0]
 802dad2:	bd38      	pop	{r3, r4, r5, pc}
 802dad4:	20007e98 	.word	0x20007e98

0802dad8 <_init>:
 802dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dada:	bf00      	nop
 802dadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dade:	bc08      	pop	{r3}
 802dae0:	469e      	mov	lr, r3
 802dae2:	4770      	bx	lr

0802dae4 <_fini>:
 802dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dae6:	bf00      	nop
 802dae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802daea:	bc08      	pop	{r3}
 802daec:	469e      	mov	lr, r3
 802daee:	4770      	bx	lr
